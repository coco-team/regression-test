-- This file has been generated by cocoSim


-- System nodes



















-- Entry action for state :Regulation_On
node Regulation_On_en(idEnabled_Regulation_1:int;
	Regul_OFF_1:bool;
	Regul_ON_1:bool;
	Regul_STDBY_1:bool;
	isInner:bool)

returns (idEnabled_Regulation:int;
	Regul_OFF:bool;
	Regul_ON:bool;
	Regul_STDBY:bool);


var 	idEnabled_Regulation_2:int;
	Regul_OFF_2:bool;
	Regul_ON_2:bool;
	Regul_STDBY_2:bool;


let



	-- set state as active 
	idEnabled_Regulation_2 
	= 945;
	

	Regul_OFF_2 
	= if (not isInner) then false
	 else Regul_OFF_1;
	

	Regul_ON_2 
	= if (not isInner) then true
	 else Regul_ON_1;
	

	Regul_STDBY_2 
	= if (not isInner) then false
	 else Regul_STDBY_1;
	

	(idEnabled_Regulation, Regul_OFF, Regul_ON, Regul_STDBY) 
	= (idEnabled_Regulation_2, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2);
	

tel





-- Exit action for state :Regulation_On
node Regulation_On_ex(idEnabled_Regulation_1:int;
	isInner:bool)

returns (idEnabled_Regulation:int);


var 	idEnabled_Regulation_2:int;


let



	-- set state as inactive 
	idEnabled_Regulation_2
	 = if (not isInner) then 0 else idEnabled_Regulation_1;


	(idEnabled_Regulation) 
	= (idEnabled_Regulation_2);
	

tel






-- Entry action for state :Regulation_StandBy
node Regulation_StandBy_en(idEnabled_Regulation_1:int;
	Regul_OFF_1:bool;
	Regul_ON_1:bool;
	Regul_STDBY_1:bool;
	isInner:bool)

returns (idEnabled_Regulation:int;
	Regul_OFF:bool;
	Regul_ON:bool;
	Regul_STDBY:bool);


var 	idEnabled_Regulation_2:int;
	Regul_OFF_2:bool;
	Regul_ON_2:bool;
	Regul_STDBY_2:bool;


let



	-- set state as active 
	idEnabled_Regulation_2 
	= 946;
	

	Regul_OFF_2 
	= if (not isInner) then false
	 else Regul_OFF_1;
	

	Regul_ON_2 
	= if (not isInner) then false
	 else Regul_ON_1;
	

	Regul_STDBY_2 
	= if (not isInner) then true
	 else Regul_STDBY_1;
	

	(idEnabled_Regulation, Regul_OFF, Regul_ON, Regul_STDBY) 
	= (idEnabled_Regulation_2, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2);
	

tel





-- Exit action for state :Regulation_StandBy
node Regulation_StandBy_ex(idEnabled_Regulation_1:int;
	isInner:bool)

returns (idEnabled_Regulation:int);


var 	idEnabled_Regulation_2:int;


let



	-- set state as inactive 
	idEnabled_Regulation_2
	 = if (not isInner) then 0 else idEnabled_Regulation_1;


	(idEnabled_Regulation) 
	= (idEnabled_Regulation_2);
	

tel






-- Entry action for state :Enabled_Interrupted
node Enabled_Interrupted_en(idCruiseStateMgt_Enabled_1:int;
	Regul_OFF_1:bool;
	Regul_ON_1:bool;
	Regul_STDBY_1:bool;
	isInner:bool)

returns (idCruiseStateMgt_Enabled:int;
	Regul_OFF:bool;
	Regul_ON:bool;
	Regul_STDBY:bool);


var 	idCruiseStateMgt_Enabled_2:int;
	Regul_OFF_2:bool;
	Regul_ON_2:bool;
	Regul_STDBY_2:bool;


let



	-- set state as active 
	idCruiseStateMgt_Enabled_2 
	= 947;
	

	Regul_OFF_2 
	= if (not isInner) then true
	 else Regul_OFF_1;
	

	Regul_ON_2 
	= if (not isInner) then false
	 else Regul_ON_1;
	

	Regul_STDBY_2 
	= if (not isInner) then true
	 else Regul_STDBY_1;
	

	(idCruiseStateMgt_Enabled, Regul_OFF, Regul_ON, Regul_STDBY) 
	= (idCruiseStateMgt_Enabled_2, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2);
	

tel





-- Exit action for state :Enabled_Interrupted
node Enabled_Interrupted_ex(idCruiseStateMgt_Enabled_1:int;
	isInner:bool)

returns (idCruiseStateMgt_Enabled:int);


var 	idCruiseStateMgt_Enabled_2:int;


let



	-- set state as inactive 
	idCruiseStateMgt_Enabled_2
	 = if (not isInner) then 0 else idCruiseStateMgt_Enabled_1;


	(idCruiseStateMgt_Enabled) 
	= (idCruiseStateMgt_Enabled_2);
	

tel






-- Entry action for state :Enabled_Regulation
node Enabled_Regulation_en(idEnabled_Regulation_1:int;
	idCruiseStateMgt_Enabled_1:int;
	AccelPressed:bool;
	SpeedOutOffLimits:bool;
	Regul_OFF_1:bool;
	Regul_ON_1:bool;
	Regul_STDBY_1:bool;
	isInner:bool)

returns (idEnabled_Regulation:int;
	idCruiseStateMgt_Enabled:int;
	Regul_OFF:bool;
	Regul_ON:bool;
	Regul_STDBY:bool);


var 	idEnabled_Regulation_2, idEnabled_Regulation_3, idEnabled_Regulation_4, idEnabled_Regulation_5, idEnabled_Regulation_6, idEnabled_Regulation_7:int;
	idCruiseStateMgt_Enabled_2, idCruiseStateMgt_Enabled_3, idCruiseStateMgt_Enabled_4:int;
	Regul_OFF_2, Regul_OFF_3, Regul_OFF_4, Regul_OFF_5, Regul_OFF_6, Regul_OFF_7:bool;
	Regul_ON_2, Regul_ON_3, Regul_ON_4, Regul_ON_5, Regul_ON_6, Regul_ON_7:bool;
	Regul_STDBY_2, Regul_STDBY_3, Regul_STDBY_4, Regul_STDBY_5, Regul_STDBY_6, Regul_STDBY_7:bool;


let



	-- set state as active 
	idCruiseStateMgt_Enabled_2 
	= 948;
	

	


-- transition trace :
	--POINT__To__Junction950_1, Junction950__To__Regulation_StandBy_1
		(idEnabled_Regulation_2, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2) 
	= 
		 if (( AccelPressed or SpeedOutOffLimits )) then 
		Regulation_StandBy_en(idEnabled_Regulation_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, false)
		 else (idEnabled_Regulation_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1);
		


-- transition trace :
	--POINT__To__Junction950_1, Junction950__To__Regulation_On_2
		(idEnabled_Regulation_3, Regul_OFF_3, Regul_ON_3, Regul_STDBY_3) 
	= Regulation_On_en(idEnabled_Regulation_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, false);
		

	(idEnabled_Regulation_4, idCruiseStateMgt_Enabled_3, Regul_OFF_4, Regul_ON_4, Regul_STDBY_4) 
	= 

	if ( idEnabled_Regulation_1 = 0) then

	
		 if (( AccelPressed or SpeedOutOffLimits )) then 
		(idEnabled_Regulation_2, idCruiseStateMgt_Enabled_2, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2)
		 else (idEnabled_Regulation_3, idCruiseStateMgt_Enabled_2, Regul_OFF_3, Regul_ON_3, Regul_STDBY_3)

	 else(idEnabled_Regulation_1, idCruiseStateMgt_Enabled_2, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1);

	

	(idEnabled_Regulation_5, Regul_OFF_5, Regul_ON_5, Regul_STDBY_5) 
	= 
	if ( idEnabled_Regulation_1 = 946) then
	Regulation_StandBy_en(idEnabled_Regulation_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, false)
	 else (idEnabled_Regulation_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1);

	

	(idEnabled_Regulation_6, Regul_OFF_6, Regul_ON_6, Regul_STDBY_6) 
	= 
	if ( idEnabled_Regulation_1 = 945) then
	Regulation_On_en(idEnabled_Regulation_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, false)
	 else (idEnabled_Regulation_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1);

	

	(idEnabled_Regulation_7, idCruiseStateMgt_Enabled_4, Regul_OFF_7, Regul_ON_7, Regul_STDBY_7) 
	= 
		 if ( idEnabled_Regulation_1 = 0) then 
		(idEnabled_Regulation_4, idCruiseStateMgt_Enabled_3, Regul_OFF_4, Regul_ON_4, Regul_STDBY_4)
		 else
		 if ( idEnabled_Regulation_1 = 946) then 
		(idEnabled_Regulation_5, idCruiseStateMgt_Enabled_3, Regul_OFF_5, Regul_ON_5, Regul_STDBY_5)
		 else
		 if ( idEnabled_Regulation_1 = 945) then 
		(idEnabled_Regulation_6, idCruiseStateMgt_Enabled_3, Regul_OFF_6, Regul_ON_6, Regul_STDBY_6)
		 else (idEnabled_Regulation_1, idCruiseStateMgt_Enabled_2, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1);


	(idEnabled_Regulation, idCruiseStateMgt_Enabled, Regul_OFF, Regul_ON, Regul_STDBY) 
	= (idEnabled_Regulation_7, idCruiseStateMgt_Enabled_4, Regul_OFF_7, Regul_ON_7, Regul_STDBY_7);
	

tel





-- Exit action for state :Enabled_Regulation
node Enabled_Regulation_ex(idEnabled_Regulation_1:int;
	idCruiseStateMgt_Enabled_1:int;
	isInner:bool)

returns (idEnabled_Regulation:int;
	idCruiseStateMgt_Enabled:int);


var 	idEnabled_Regulation_2, idEnabled_Regulation_3, idEnabled_Regulation_4, idEnabled_Regulation_5:int;
	idCruiseStateMgt_Enabled_2:int;


let



	
	(idEnabled_Regulation_2) 
	= 
	if ( idEnabled_Regulation_1 = 946) then
	Regulation_StandBy_ex(idEnabled_Regulation_1, false)
	 else (idEnabled_Regulation_1);

	

	(idEnabled_Regulation_3) 
	= 
	if ( idEnabled_Regulation_1 = 945) then
	Regulation_On_ex(idEnabled_Regulation_1, false)
	 else (idEnabled_Regulation_1);

	

	(idEnabled_Regulation_4) 
	= 
		 if ( idEnabled_Regulation_1 = 946) then 
		(idEnabled_Regulation_2)
		 else
		 if ( idEnabled_Regulation_1 = 945) then 
		(idEnabled_Regulation_3)
		 else (idEnabled_Regulation_1);


	-- set state as inactive 
	idCruiseStateMgt_Enabled_2
	 = if (not isInner) then 0 else idCruiseStateMgt_Enabled_1;

	idEnabled_Regulation_5 
	= 0;
	

	(idEnabled_Regulation, idCruiseStateMgt_Enabled) 
	= (idEnabled_Regulation_5, idCruiseStateMgt_Enabled_2);
	

tel






-- Entry action for state :CruiseStateMgt_Enabled
node CruiseStateMgt_Enabled_en(idCruiseStateMgt_Enabled_1:int;
	idCruiseStateMgt_CruiseStateMgt_1:int;
	BrakePressed:bool;
	Regul_OFF_1:bool;
	Regul_ON_1:bool;
	Regul_STDBY_1:bool;
	AccelPressed:bool;
	SpeedOutOffLimits:bool;
	idEnabled_Regulation_1:int;
	isInner:bool)

returns (idCruiseStateMgt_Enabled:int;
	idCruiseStateMgt_CruiseStateMgt:int;
	Regul_OFF:bool;
	Regul_ON:bool;
	Regul_STDBY:bool;
	idEnabled_Regulation:int);


var 	idCruiseStateMgt_Enabled_2, idCruiseStateMgt_Enabled_3, idCruiseStateMgt_Enabled_4, idCruiseStateMgt_Enabled_5, idCruiseStateMgt_Enabled_6, idCruiseStateMgt_Enabled_7:int;
	idCruiseStateMgt_CruiseStateMgt_2, idCruiseStateMgt_CruiseStateMgt_3, idCruiseStateMgt_CruiseStateMgt_4:int;
	Regul_OFF_2, Regul_OFF_3, Regul_OFF_4, Regul_OFF_5, Regul_OFF_6, Regul_OFF_7:bool;
	Regul_ON_2, Regul_ON_3, Regul_ON_4, Regul_ON_5, Regul_ON_6, Regul_ON_7:bool;
	Regul_STDBY_2, Regul_STDBY_3, Regul_STDBY_4, Regul_STDBY_5, Regul_STDBY_6, Regul_STDBY_7:bool;
	idEnabled_Regulation_2, idEnabled_Regulation_3, idEnabled_Regulation_4, idEnabled_Regulation_5:int;


let



	-- set state as active 
	idCruiseStateMgt_CruiseStateMgt_2 
	= 949;
	

	


-- transition trace :
	--POINT__To__Junction956_1, Junction956__To__Enabled_Interrupted_1
		(idCruiseStateMgt_Enabled_2, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2) 
	= 
		 if (( BrakePressed )) then 
		Enabled_Interrupted_en(idCruiseStateMgt_Enabled_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, false)
		 else (idCruiseStateMgt_Enabled_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1);
		


-- transition trace :
	--POINT__To__Junction956_1, Junction956__To__Enabled_Regulation_2
		(idEnabled_Regulation_2, idCruiseStateMgt_Enabled_3, Regul_OFF_3, Regul_ON_3, Regul_STDBY_3) 
	= Enabled_Regulation_en(idEnabled_Regulation_1, idCruiseStateMgt_Enabled_1, AccelPressed, SpeedOutOffLimits, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, false);
		

	(idCruiseStateMgt_Enabled_4, idCruiseStateMgt_CruiseStateMgt_3, Regul_OFF_4, Regul_ON_4, Regul_STDBY_4, idEnabled_Regulation_3) 
	= 

	if ( idCruiseStateMgt_Enabled_1 = 0) then

	
		 if (( BrakePressed )) then 
		(idCruiseStateMgt_Enabled_2, idCruiseStateMgt_CruiseStateMgt_2, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2, idEnabled_Regulation_1)
		 else (idCruiseStateMgt_Enabled_3, idCruiseStateMgt_CruiseStateMgt_2, Regul_OFF_3, Regul_ON_3, Regul_STDBY_3, idEnabled_Regulation_2)

	 else(idCruiseStateMgt_Enabled_1, idCruiseStateMgt_CruiseStateMgt_2, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, idEnabled_Regulation_1);

	

	(idEnabled_Regulation_4, idCruiseStateMgt_Enabled_5, Regul_OFF_5, Regul_ON_5, Regul_STDBY_5) 
	= 
	if ( idCruiseStateMgt_Enabled_1 = 948) then
	Enabled_Regulation_en(idEnabled_Regulation_1, idCruiseStateMgt_Enabled_1, AccelPressed, SpeedOutOffLimits, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, false)
	 else (idEnabled_Regulation_1, idCruiseStateMgt_Enabled_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1);

	

	(idCruiseStateMgt_Enabled_6, Regul_OFF_6, Regul_ON_6, Regul_STDBY_6) 
	= 
	if ( idCruiseStateMgt_Enabled_1 = 947) then
	Enabled_Interrupted_en(idCruiseStateMgt_Enabled_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, false)
	 else (idCruiseStateMgt_Enabled_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1);

	

	(idCruiseStateMgt_Enabled_7, idCruiseStateMgt_CruiseStateMgt_4, Regul_OFF_7, Regul_ON_7, Regul_STDBY_7, idEnabled_Regulation_5) 
	= 
		 if ( idCruiseStateMgt_Enabled_1 = 0) then 
		(idCruiseStateMgt_Enabled_4, idCruiseStateMgt_CruiseStateMgt_3, Regul_OFF_4, Regul_ON_4, Regul_STDBY_4, idEnabled_Regulation_3)
		 else
		 if ( idCruiseStateMgt_Enabled_1 = 948) then 
		(idCruiseStateMgt_Enabled_5, idCruiseStateMgt_CruiseStateMgt_3, Regul_OFF_5, Regul_ON_5, Regul_STDBY_5, idEnabled_Regulation_4)
		 else
		 if ( idCruiseStateMgt_Enabled_1 = 947) then 
		(idCruiseStateMgt_Enabled_6, idCruiseStateMgt_CruiseStateMgt_3, Regul_OFF_6, Regul_ON_6, Regul_STDBY_6, idEnabled_Regulation_4)
		 else (idCruiseStateMgt_Enabled_1, idCruiseStateMgt_CruiseStateMgt_2, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, idEnabled_Regulation_1);


	(idCruiseStateMgt_Enabled, idCruiseStateMgt_CruiseStateMgt, Regul_OFF, Regul_ON, Regul_STDBY, idEnabled_Regulation) 
	= (idCruiseStateMgt_Enabled_7, idCruiseStateMgt_CruiseStateMgt_4, Regul_OFF_7, Regul_ON_7, Regul_STDBY_7, idEnabled_Regulation_5);
	

tel





-- Exit action for state :CruiseStateMgt_Enabled
node CruiseStateMgt_Enabled_ex(idEnabled_Regulation_1:int;
	idCruiseStateMgt_Enabled_1:int;
	idCruiseStateMgt_CruiseStateMgt_1:int;
	isInner:bool)

returns (idEnabled_Regulation:int;
	idCruiseStateMgt_Enabled:int;
	idCruiseStateMgt_CruiseStateMgt:int);


var 	idEnabled_Regulation_2, idEnabled_Regulation_3:int;
	idCruiseStateMgt_Enabled_2, idCruiseStateMgt_Enabled_3, idCruiseStateMgt_Enabled_4, idCruiseStateMgt_Enabled_5:int;
	idCruiseStateMgt_CruiseStateMgt_2:int;


let



	
	(idEnabled_Regulation_2, idCruiseStateMgt_Enabled_2) 
	= 
	if ( idCruiseStateMgt_Enabled_1 = 948) then
	Enabled_Regulation_ex(idEnabled_Regulation_1, idCruiseStateMgt_Enabled_1, false)
	 else (idEnabled_Regulation_1, idCruiseStateMgt_Enabled_1);

	

	(idCruiseStateMgt_Enabled_3) 
	= 
	if ( idCruiseStateMgt_Enabled_1 = 947) then
	Enabled_Interrupted_ex(idCruiseStateMgt_Enabled_1, false)
	 else (idCruiseStateMgt_Enabled_1);

	

	(idEnabled_Regulation_3, idCruiseStateMgt_Enabled_4) 
	= 
		 if ( idCruiseStateMgt_Enabled_1 = 948) then 
		(idEnabled_Regulation_2, idCruiseStateMgt_Enabled_2)
		 else
		 if ( idCruiseStateMgt_Enabled_1 = 947) then 
		(idEnabled_Regulation_2, idCruiseStateMgt_Enabled_3)
		 else (idEnabled_Regulation_1, idCruiseStateMgt_Enabled_1);


	-- set state as inactive 
	idCruiseStateMgt_CruiseStateMgt_2
	 = if (not isInner) then 0 else idCruiseStateMgt_CruiseStateMgt_1;

	idCruiseStateMgt_Enabled_5 
	= 0;
	

	(idEnabled_Regulation, idCruiseStateMgt_Enabled, idCruiseStateMgt_CruiseStateMgt) 
	= (idEnabled_Regulation_3, idCruiseStateMgt_Enabled_5, idCruiseStateMgt_CruiseStateMgt_2);
	

tel






-- Entry action for state :CruiseStateMgt_Disabled
node CruiseStateMgt_Disabled_en(idCruiseStateMgt_CruiseStateMgt_1:int;
	Regul_OFF_1:bool;
	Regul_ON_1:bool;
	Regul_STDBY_1:bool;
	isInner:bool)

returns (idCruiseStateMgt_CruiseStateMgt:int;
	Regul_OFF:bool;
	Regul_ON:bool;
	Regul_STDBY:bool);


var 	idCruiseStateMgt_CruiseStateMgt_2:int;
	Regul_OFF_2:bool;
	Regul_ON_2:bool;
	Regul_STDBY_2:bool;


let



	-- set state as active 
	idCruiseStateMgt_CruiseStateMgt_2 
	= 944;
	

	Regul_OFF_2 
	= if (not isInner) then true
	 else Regul_OFF_1;
	

	Regul_ON_2 
	= if (not isInner) then false
	 else Regul_ON_1;
	

	Regul_STDBY_2 
	= if (not isInner) then false
	 else Regul_STDBY_1;
	

	(idCruiseStateMgt_CruiseStateMgt, Regul_OFF, Regul_ON, Regul_STDBY) 
	= (idCruiseStateMgt_CruiseStateMgt_2, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2);
	

tel





-- Exit action for state :CruiseStateMgt_Disabled
node CruiseStateMgt_Disabled_ex(idCruiseStateMgt_CruiseStateMgt_1:int;
	isInner:bool)

returns (idCruiseStateMgt_CruiseStateMgt:int);


var 	idCruiseStateMgt_CruiseStateMgt_2:int;


let



	-- set state as inactive 
	idCruiseStateMgt_CruiseStateMgt_2
	 = if (not isInner) then 0 else idCruiseStateMgt_CruiseStateMgt_1;


	(idCruiseStateMgt_CruiseStateMgt) 
	= (idCruiseStateMgt_CruiseStateMgt_2);
	

tel


--***************************************************State :Enabled_Regulation Automaton***************************************************

node Enabled_Regulation_node(idEnabled_Regulation_1:int;
	AccelPressed:bool;
	SpeedOutOffLimits:bool;
	Regul_OFF_1:bool;
	Regul_ON_1:bool;
	Regul_STDBY_1:bool)

returns (idEnabled_Regulation:int;
	Regul_OFF:bool;
	Regul_ON:bool;
	Regul_STDBY:bool);


let

	 automaton enabled_regulation

	state POINTEnabled_Regulation:
	unless (idEnabled_Regulation_1=0) restart POINT__TO__CRUISESTATEMGT_CRUISESTATEMGTJUNCTION950_1



	unless (idEnabled_Regulation_1=946) and ( not AccelPressed and not SpeedOutOffLimits ) restart REGULATION_STANDBY__TO__REGULATION_ON_1



	unless (idEnabled_Regulation_1=945) and ( AccelPressed or SpeedOutOffLimits ) restart REGULATION_ON__TO__REGULATION_STANDBY_1



	unless (idEnabled_Regulation_1=946) restart REGULATION_STANDBY_IDL

	unless (idEnabled_Regulation_1=945) restart REGULATION_ON_IDL

	let

		(idEnabled_Regulation, Regul_OFF, Regul_ON, Regul_STDBY) 
	= (idEnabled_Regulation_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1);
	

	tel



	state POINT__TO__CRUISESTATEMGT_CRUISESTATEMGTJUNCTION950_1:

	 var 	idEnabled_Regulation_2, idEnabled_Regulation_3:int;
	Regul_OFF_2, Regul_OFF_3:bool;
	Regul_ON_2, Regul_ON_3:bool;
	Regul_STDBY_2, Regul_STDBY_3:bool;
	let

		

-- transition trace :
	--POINT__To__Junction950_1, Junction950__To__Regulation_StandBy_1
		(idEnabled_Regulation_2, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2) 
	= 
		 if (( AccelPressed or SpeedOutOffLimits )) then 
		Regulation_StandBy_en(idEnabled_Regulation_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, false)
		 else (idEnabled_Regulation_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1);
		


-- transition trace :
	--POINT__To__Junction950_1, Junction950__To__Regulation_On_2
		(idEnabled_Regulation_3, Regul_OFF_3, Regul_ON_3, Regul_STDBY_3) 
	= Regulation_On_en(idEnabled_Regulation_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, false);
		

	(idEnabled_Regulation, Regul_OFF, Regul_ON, Regul_STDBY) 
	= 
		 if (( AccelPressed or SpeedOutOffLimits )) then 
		(idEnabled_Regulation_2, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2)
		 else (idEnabled_Regulation_3, Regul_OFF_3, Regul_ON_3, Regul_STDBY_3);


	tel

	until true restart POINTEnabled_Regulation



	state REGULATION_STANDBY__TO__REGULATION_ON_1:

	 var 	idEnabled_Regulation_2, idEnabled_Regulation_3:int;
	Regul_OFF_2:bool;
	Regul_ON_2:bool;
	Regul_STDBY_2:bool;
	let

		-- transition trace :
	--Regulation_StandBy__To__Regulation_On_1
		(idEnabled_Regulation_2) 
	= Regulation_StandBy_ex(idEnabled_Regulation_1, false);
		

		(idEnabled_Regulation_3, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2) 
	= Regulation_On_en(idEnabled_Regulation_2, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, false);
		

	(idEnabled_Regulation, Regul_OFF, Regul_ON, Regul_STDBY) 
	=  (idEnabled_Regulation_3, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2);


	tel

	until true restart POINTEnabled_Regulation



	state REGULATION_ON__TO__REGULATION_STANDBY_1:

	 var 	idEnabled_Regulation_2, idEnabled_Regulation_3:int;
	Regul_OFF_2:bool;
	Regul_ON_2:bool;
	Regul_STDBY_2:bool;
	let

		-- transition trace :
	--Regulation_On__To__Regulation_StandBy_1
		(idEnabled_Regulation_2) 
	= Regulation_On_ex(idEnabled_Regulation_1, false);
		

		(idEnabled_Regulation_3, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2) 
	= Regulation_StandBy_en(idEnabled_Regulation_2, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, false);
		

	(idEnabled_Regulation, Regul_OFF, Regul_ON, Regul_STDBY) 
	=  (idEnabled_Regulation_3, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2);


	tel

	until true restart POINTEnabled_Regulation



	state REGULATION_STANDBY_IDL:

	 	let

		

	(idEnabled_Regulation, Regul_OFF, Regul_ON, Regul_STDBY) 
	= (idEnabled_Regulation_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1);
	

	tel

	until true restart POINTEnabled_Regulation



	state REGULATION_ON_IDL:

	 	let

		

	(idEnabled_Regulation, Regul_OFF, Regul_ON, Regul_STDBY) 
	= (idEnabled_Regulation_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1);
	

	tel

	until true restart POINTEnabled_Regulation



tel


--***************************************************State :CruiseStateMgt_Enabled Automaton***************************************************

node CruiseStateMgt_Enabled_node(idCruiseStateMgt_Enabled_1:int;
	BrakePressed:bool;
	Regul_OFF_1:bool;
	Regul_ON_1:bool;
	Regul_STDBY_1:bool;
	AccelPressed:bool;
	SpeedOutOffLimits:bool;
	idEnabled_Regulation_1:int;
	Resume:bool)

returns (idCruiseStateMgt_Enabled:int;
	Regul_OFF:bool;
	Regul_ON:bool;
	Regul_STDBY:bool;
	idEnabled_Regulation:int);


let

	 automaton cruisestatemgt_enabled

	state POINTCruiseStateMgt_Enabled:
	unless (idCruiseStateMgt_Enabled_1=0) restart POINT__TO__CRUISESTATEMGT_CRUISESTATEMGTJUNCTION956_1



	unless (idCruiseStateMgt_Enabled_1=948) and ( BrakePressed ) restart ENABLED_REGULATION__TO__ENABLED_INTERRUPTED_1



	unless (idCruiseStateMgt_Enabled_1=947) and ( Resume and not BrakePressed ) restart ENABLED_INTERRUPTED__TO__ENABLED_REGULATION_1



	unless (idCruiseStateMgt_Enabled_1=948) restart ENABLED_REGULATION_IDL

	unless (idCruiseStateMgt_Enabled_1=947) restart ENABLED_INTERRUPTED_IDL

	let

		(idCruiseStateMgt_Enabled, Regul_OFF, Regul_ON, Regul_STDBY, idEnabled_Regulation) 
	= (idCruiseStateMgt_Enabled_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, idEnabled_Regulation_1);
	

	tel



	state POINT__TO__CRUISESTATEMGT_CRUISESTATEMGTJUNCTION956_1:

	 var 	idCruiseStateMgt_Enabled_2, idCruiseStateMgt_Enabled_3:int;
	Regul_OFF_2, Regul_OFF_3:bool;
	Regul_ON_2, Regul_ON_3:bool;
	Regul_STDBY_2, Regul_STDBY_3:bool;
	idEnabled_Regulation_2:int;
	let

		

-- transition trace :
	--POINT__To__Junction956_1, Junction956__To__Enabled_Interrupted_1
		(idCruiseStateMgt_Enabled_2, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2) 
	= 
		 if (( BrakePressed )) then 
		Enabled_Interrupted_en(idCruiseStateMgt_Enabled_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, false)
		 else (idCruiseStateMgt_Enabled_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1);
		


-- transition trace :
	--POINT__To__Junction956_1, Junction956__To__Enabled_Regulation_2
		(idEnabled_Regulation_2, idCruiseStateMgt_Enabled_3, Regul_OFF_3, Regul_ON_3, Regul_STDBY_3) 
	= Enabled_Regulation_en(idEnabled_Regulation_1, idCruiseStateMgt_Enabled_1, AccelPressed, SpeedOutOffLimits, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, false);
		

	(idCruiseStateMgt_Enabled, Regul_OFF, Regul_ON, Regul_STDBY, idEnabled_Regulation) 
	= 
		 if (( BrakePressed )) then 
		(idCruiseStateMgt_Enabled_2, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2, idEnabled_Regulation_1)
		 else (idCruiseStateMgt_Enabled_3, Regul_OFF_3, Regul_ON_3, Regul_STDBY_3, idEnabled_Regulation_2);


	tel

	until true restart POINTCruiseStateMgt_Enabled



	state ENABLED_REGULATION__TO__ENABLED_INTERRUPTED_1:

	 var 	idCruiseStateMgt_Enabled_2, idCruiseStateMgt_Enabled_3:int;
	Regul_OFF_2:bool;
	Regul_ON_2:bool;
	Regul_STDBY_2:bool;
	idEnabled_Regulation_2:int;
	let

		-- transition trace :
	--Enabled_Regulation__To__Enabled_Interrupted_1
		(idEnabled_Regulation_2, idCruiseStateMgt_Enabled_2) 
	= Enabled_Regulation_ex(idEnabled_Regulation_1, idCruiseStateMgt_Enabled_1, false);
		

		(idCruiseStateMgt_Enabled_3, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2) 
	= Enabled_Interrupted_en(idCruiseStateMgt_Enabled_2, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, false);
		

	(idCruiseStateMgt_Enabled, Regul_OFF, Regul_ON, Regul_STDBY, idEnabled_Regulation) 
	=  (idCruiseStateMgt_Enabled_3, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2, idEnabled_Regulation_2);


	tel

	until true restart POINTCruiseStateMgt_Enabled



	state ENABLED_INTERRUPTED__TO__ENABLED_REGULATION_1:

	 var 	idCruiseStateMgt_Enabled_2, idCruiseStateMgt_Enabled_3:int;
	Regul_OFF_2:bool;
	Regul_ON_2:bool;
	Regul_STDBY_2:bool;
	idEnabled_Regulation_2:int;
	let

		-- transition trace :
	--Enabled_Interrupted__To__Enabled_Regulation_1
		(idCruiseStateMgt_Enabled_2) 
	= Enabled_Interrupted_ex(idCruiseStateMgt_Enabled_1, false);
		

		(idEnabled_Regulation_2, idCruiseStateMgt_Enabled_3, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2) 
	= Enabled_Regulation_en(idEnabled_Regulation_1, idCruiseStateMgt_Enabled_2, AccelPressed, SpeedOutOffLimits, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, false);
		

	(idCruiseStateMgt_Enabled, Regul_OFF, Regul_ON, Regul_STDBY, idEnabled_Regulation) 
	=  (idCruiseStateMgt_Enabled_3, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2, idEnabled_Regulation_2);


	tel

	until true restart POINTCruiseStateMgt_Enabled



	state ENABLED_REGULATION_IDL:

	 var 	Regul_OFF_2:bool;
	Regul_ON_2:bool;
	Regul_STDBY_2:bool;
	idEnabled_Regulation_2:int;
	let

		
	(idEnabled_Regulation_2, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2) 
	= Enabled_Regulation_node(idEnabled_Regulation_1, AccelPressed, SpeedOutOffLimits, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1);

		


	(idCruiseStateMgt_Enabled, Regul_OFF, Regul_ON, Regul_STDBY, idEnabled_Regulation) 
	= (idCruiseStateMgt_Enabled_1, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2, idEnabled_Regulation_2);
	

	tel

	until true restart POINTCruiseStateMgt_Enabled



	state ENABLED_INTERRUPTED_IDL:

	 	let

		

	(idCruiseStateMgt_Enabled, Regul_OFF, Regul_ON, Regul_STDBY, idEnabled_Regulation) 
	= (idCruiseStateMgt_Enabled_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, idEnabled_Regulation_1);
	

	tel

	until true restart POINTCruiseStateMgt_Enabled



tel


--***************************************************State :CruiseStateMgt_CruiseStateMgt Automaton***************************************************

node CruiseStateMgt_CruiseStateMgt_node(idCruiseStateMgt_CruiseStateMgt_1:int;
	On:bool;
	AccelPressed:bool;
	BrakePressed:bool;
	Regul_OFF_1:bool;
	Regul_ON_1:bool;
	Regul_STDBY_1:bool;
	SpeedOutOffLimits:bool;
	idCruiseStateMgt_Enabled_1:int;
	idEnabled_Regulation_1:int;
	Off:bool;
	Resume:bool)

returns (idCruiseStateMgt_CruiseStateMgt:int;
	Regul_OFF:bool;
	Regul_ON:bool;
	Regul_STDBY:bool;
	idCruiseStateMgt_Enabled:int;
	idEnabled_Regulation:int);


let

	 automaton cruisestatemgt_cruisestatemgt

	state POINTCruiseStateMgt_CruiseStateMgt:
	unless (idCruiseStateMgt_CruiseStateMgt_1=0) restart POINT__TO__CRUISESTATEMGT_CRUISESTATEMGTJUNCTION971_1



	unless (idCruiseStateMgt_CruiseStateMgt_1=944) and ( On ) restart CRUISESTATEMGT_DISABLED__TO__CRUISESTATEMGT_ENABLED_1



	unless (idCruiseStateMgt_CruiseStateMgt_1=949) and ( Off ) restart CRUISESTATEMGT_ENABLED__TO__CRUISESTATEMGT_DISABLED_1



	unless (idCruiseStateMgt_CruiseStateMgt_1=944) restart CRUISESTATEMGT_DISABLED_IDL

	unless (idCruiseStateMgt_CruiseStateMgt_1=949) restart CRUISESTATEMGT_ENABLED_IDL

	let

		(idCruiseStateMgt_CruiseStateMgt, Regul_OFF, Regul_ON, Regul_STDBY, idCruiseStateMgt_Enabled, idEnabled_Regulation) 
	= (idCruiseStateMgt_CruiseStateMgt_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, idCruiseStateMgt_Enabled_1, idEnabled_Regulation_1);
	

	tel



	state POINT__TO__CRUISESTATEMGT_CRUISESTATEMGTJUNCTION971_1:

	 var 	idCruiseStateMgt_CruiseStateMgt_2, idCruiseStateMgt_CruiseStateMgt_3:int;
	Regul_OFF_2, Regul_OFF_3:bool;
	Regul_ON_2, Regul_ON_3:bool;
	Regul_STDBY_2, Regul_STDBY_3:bool;
	idCruiseStateMgt_Enabled_2:int;
	idEnabled_Regulation_2:int;
	let

		

-- transition trace :
	--POINT__To__Junction971_1, Junction971__To__CruiseStateMgt_Enabled_1
		(idCruiseStateMgt_Enabled_2, idCruiseStateMgt_CruiseStateMgt_2, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2, idEnabled_Regulation_2) 
	= 
		 if (( On )) then 
		CruiseStateMgt_Enabled_en(idCruiseStateMgt_Enabled_1, idCruiseStateMgt_CruiseStateMgt_1, BrakePressed, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, AccelPressed, SpeedOutOffLimits, idEnabled_Regulation_1, false)
		 else (idCruiseStateMgt_Enabled_1, idCruiseStateMgt_CruiseStateMgt_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, idEnabled_Regulation_1);
		


-- transition trace :
	--POINT__To__Junction971_1, Junction971__To__CruiseStateMgt_Disabled_2
		(idCruiseStateMgt_CruiseStateMgt_3, Regul_OFF_3, Regul_ON_3, Regul_STDBY_3) 
	= CruiseStateMgt_Disabled_en(idCruiseStateMgt_CruiseStateMgt_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, false);
		

	(idCruiseStateMgt_CruiseStateMgt, Regul_OFF, Regul_ON, Regul_STDBY, idCruiseStateMgt_Enabled, idEnabled_Regulation) 
	= 
		 if (( On )) then 
		(idCruiseStateMgt_CruiseStateMgt_2, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2, idCruiseStateMgt_Enabled_2, idEnabled_Regulation_2)
		 else (idCruiseStateMgt_CruiseStateMgt_3, Regul_OFF_3, Regul_ON_3, Regul_STDBY_3, idCruiseStateMgt_Enabled_2, idEnabled_Regulation_2);


	tel

	until true restart POINTCruiseStateMgt_CruiseStateMgt



	state CRUISESTATEMGT_DISABLED__TO__CRUISESTATEMGT_ENABLED_1:

	 var 	idCruiseStateMgt_CruiseStateMgt_2, idCruiseStateMgt_CruiseStateMgt_3:int;
	Regul_OFF_2:bool;
	Regul_ON_2:bool;
	Regul_STDBY_2:bool;
	idCruiseStateMgt_Enabled_2:int;
	idEnabled_Regulation_2:int;
	let

		-- transition trace :
	--CruiseStateMgt_Disabled__To__CruiseStateMgt_Enabled_1
		(idCruiseStateMgt_CruiseStateMgt_2) 
	= CruiseStateMgt_Disabled_ex(idCruiseStateMgt_CruiseStateMgt_1, false);
		

		(idCruiseStateMgt_Enabled_2, idCruiseStateMgt_CruiseStateMgt_3, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2, idEnabled_Regulation_2) 
	= CruiseStateMgt_Enabled_en(idCruiseStateMgt_Enabled_1, idCruiseStateMgt_CruiseStateMgt_2, BrakePressed, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, AccelPressed, SpeedOutOffLimits, idEnabled_Regulation_1, false);
		

	(idCruiseStateMgt_CruiseStateMgt, Regul_OFF, Regul_ON, Regul_STDBY, idCruiseStateMgt_Enabled, idEnabled_Regulation) 
	=  (idCruiseStateMgt_CruiseStateMgt_3, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2, idCruiseStateMgt_Enabled_2, idEnabled_Regulation_2);


	tel

	until true restart POINTCruiseStateMgt_CruiseStateMgt



	state CRUISESTATEMGT_ENABLED__TO__CRUISESTATEMGT_DISABLED_1:

	 var 	idCruiseStateMgt_CruiseStateMgt_2, idCruiseStateMgt_CruiseStateMgt_3:int;
	Regul_OFF_2:bool;
	Regul_ON_2:bool;
	Regul_STDBY_2:bool;
	idCruiseStateMgt_Enabled_2:int;
	idEnabled_Regulation_2:int;
	let

		-- transition trace :
	--CruiseStateMgt_Enabled__To__CruiseStateMgt_Disabled_1
		(idEnabled_Regulation_2, idCruiseStateMgt_Enabled_2, idCruiseStateMgt_CruiseStateMgt_2) 
	= CruiseStateMgt_Enabled_ex(idEnabled_Regulation_1, idCruiseStateMgt_Enabled_1, idCruiseStateMgt_CruiseStateMgt_1, false);
		

		(idCruiseStateMgt_CruiseStateMgt_3, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2) 
	= CruiseStateMgt_Disabled_en(idCruiseStateMgt_CruiseStateMgt_2, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, false);
		

	(idCruiseStateMgt_CruiseStateMgt, Regul_OFF, Regul_ON, Regul_STDBY, idCruiseStateMgt_Enabled, idEnabled_Regulation) 
	=  (idCruiseStateMgt_CruiseStateMgt_3, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2, idCruiseStateMgt_Enabled_2, idEnabled_Regulation_2);


	tel

	until true restart POINTCruiseStateMgt_CruiseStateMgt



	state CRUISESTATEMGT_DISABLED_IDL:

	 	let

		

	(idCruiseStateMgt_CruiseStateMgt, Regul_OFF, Regul_ON, Regul_STDBY, idCruiseStateMgt_Enabled, idEnabled_Regulation) 
	= (idCruiseStateMgt_CruiseStateMgt_1, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, idCruiseStateMgt_Enabled_1, idEnabled_Regulation_1);
	

	tel

	until true restart POINTCruiseStateMgt_CruiseStateMgt



	state CRUISESTATEMGT_ENABLED_IDL:

	 var 	Regul_OFF_2:bool;
	Regul_ON_2:bool;
	Regul_STDBY_2:bool;
	idCruiseStateMgt_Enabled_2:int;
	idEnabled_Regulation_2:int;
	let

		
	(idCruiseStateMgt_Enabled_2, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2, idEnabled_Regulation_2) 
	= CruiseStateMgt_Enabled_node(idCruiseStateMgt_Enabled_1, BrakePressed, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, AccelPressed, SpeedOutOffLimits, idEnabled_Regulation_1, Resume);

		


	(idCruiseStateMgt_CruiseStateMgt, Regul_OFF, Regul_ON, Regul_STDBY, idCruiseStateMgt_Enabled, idEnabled_Regulation) 
	= (idCruiseStateMgt_CruiseStateMgt_1, Regul_OFF_2, Regul_ON_2, Regul_STDBY_2, idCruiseStateMgt_Enabled_2, idEnabled_Regulation_2);
	

	tel

	until true restart POINTCruiseStateMgt_CruiseStateMgt



tel


--***************************************************State :CruiseStateMgt_CruiseStateMgt Automaton***************************************************

node CruiseState_CruiseStateMgt(BrakePressed:bool;
	AccelPressed:bool;
	Resume:bool;
	On:bool;
	Off:bool;
	SpeedOutOffLimits:bool)

returns (Regul_ON:bool;
	Regul_OFF:bool;
	Regul_STDBY:bool);


var Regul_ON_1: bool;

	Regul_OFF_1: bool;

	Regul_STDBY_1: bool;

	idCruiseStateMgt_CruiseStateMgt, idCruiseStateMgt_CruiseStateMgt_1: int;

	idCruiseStateMgt_Enabled, idCruiseStateMgt_Enabled_1: int;

	idEnabled_Regulation, idEnabled_Regulation_1: int;

	let

	Regul_ON_1 = false -> pre Regul_ON;

	Regul_OFF_1 = false -> pre Regul_OFF;

	Regul_STDBY_1 = false -> pre Regul_STDBY;

	idCruiseStateMgt_CruiseStateMgt_1 = 0 -> pre idCruiseStateMgt_CruiseStateMgt;

	idCruiseStateMgt_Enabled_1 = 0 -> pre idCruiseStateMgt_Enabled;

	idEnabled_Regulation_1 = 0 -> pre idEnabled_Regulation;

	



	(idCruiseStateMgt_CruiseStateMgt, Regul_OFF, Regul_ON, Regul_STDBY, idCruiseStateMgt_Enabled, idEnabled_Regulation)
	 = CruiseStateMgt_CruiseStateMgt_node(idCruiseStateMgt_CruiseStateMgt_1, On, AccelPressed, BrakePressed, Regul_OFF_1, Regul_ON_1, Regul_STDBY_1, SpeedOutOffLimits, idCruiseStateMgt_Enabled_1, idEnabled_Regulation_1, Off, Resume);


--unused outputs
	

tel



node CruiseState (In1_1_1 : bool; In2_1_1 : bool; In3_1_1 : bool; In4_1_1 : bool; In5_1_1 : bool; In6_1_1 : bool)
returns (Out1_1_1 : bool;
	Out2_2_1 : bool;
	Out3_3_1 : bool); 
var
	CruiseStateMgt_1_1 : bool; CruiseStateMgt_2_1 : bool; CruiseStateMgt_3_1 : bool;
let 
	(CruiseStateMgt_1_1, CruiseStateMgt_2_1, CruiseStateMgt_3_1) =  CruiseState_CruiseStateMgt(In1_1_1, In2_1_1, In3_1_1, In4_1_1, In5_1_1, In6_1_1);
	Out1_1_1 = CruiseStateMgt_1_1;
	Out2_2_1 = CruiseStateMgt_2_1;
	Out3_3_1 = CruiseStateMgt_3_1;
tel

