-- This file has been generated by CoCoSim


-- System nodes













-- Entry action for state :B_B2352
node B_B2352_en(idHistory1_B350_1:int;
	x_1:int;
	isInner:bool)

returns (idHistory1_B350:int;
	x:int);


var 	idHistory1_B350_2:int;
	x_2:int;


let



	-- set state as active 
	idHistory1_B350_2 
	= 352;
	

	x_2 
	= if (not isInner) then  x_1 +1000
	 else x_1;
	

	(idHistory1_B350, x) 
	= (idHistory1_B350_2, x_2);
	

tel





-- Exit action for state :B_B2352
node B_B2352_ex(x_1:int;
	idHistory1_B350_1:int;
	isInner:bool)

returns (x:int;
	idHistory1_B350:int);


var 	x_2:int;
	idHistory1_B350_2:int;


let



	x_2 
	= if (not isInner) then  x_1 -1000
	 else x_1;
	

	-- set state as inactive 
	idHistory1_B350_2
	 = if (not isInner) then 0 else idHistory1_B350_1;


	(x, idHistory1_B350) 
	= (x_2, idHistory1_B350_1);
	

tel






-- Entry action for state :B_B1351
node B_B1351_en(idHistory1_B350_1:int;
	x_1:int;
	isInner:bool)

returns (idHistory1_B350:int;
	x:int);


var 	idHistory1_B350_2:int;
	x_2:int;


let



	-- set state as active 
	idHistory1_B350_2 
	= 351;
	

	x_2 
	= if (not isInner) then  x_1 +100
	 else x_1;
	

	(idHistory1_B350, x) 
	= (idHistory1_B350_2, x_2);
	

tel





-- Exit action for state :B_B1351
node B_B1351_ex(x_1:int;
	idHistory1_B350_1:int;
	isInner:bool)

returns (x:int;
	idHistory1_B350:int);


var 	x_2:int;
	idHistory1_B350_2:int;


let



	x_2 
	= if (not isInner) then  x_1 -100
	 else x_1;
	

	-- set state as inactive 
	idHistory1_B350_2
	 = if (not isInner) then 0 else idHistory1_B350_1;


	(x, idHistory1_B350) 
	= (x_2, idHistory1_B350_1);
	

tel






-- Entry action for state :History1_B350
node History1_B350_en(idHistory1_B350_1:int;
	idHistory1_History1346_1:int;
	x_1:int;
	isInner:bool)

returns (idHistory1_B350:int;
	idHistory1_History1346:int;
	x:int);


var 	idHistory1_B350_2, idHistory1_B350_3, idHistory1_B350_4, idHistory1_B350_5, idHistory1_B350_6:int;
	idHistory1_History1346_2, idHistory1_History1346_3, idHistory1_History1346_4:int;
	x_2, x_3, x_4, x_5, x_6:int;


let



	-- set state as active 
	idHistory1_History1346_2 
	= 350;
	

	
-- transition trace :
	--POINT__To__B_B1351_1
		(idHistory1_B350_2, x_2) 
	= B_B1351_en(idHistory1_B350_1, x_1, false);
		

	(idHistory1_B350_3, idHistory1_History1346_3, x_3) 
	= 

	if ( idHistory1_B350_1 = 0) then

	 (idHistory1_B350_2, idHistory1_History1346_2, x_2)

	 else(idHistory1_B350_1, idHistory1_History1346_2, x_1);

	

	(idHistory1_B350_4, x_4) 
	= 
	if ( idHistory1_B350_1 = 351) then
	B_B1351_en(idHistory1_B350_1, x_1, false)
	 else (idHistory1_B350_1, x_1);

	

	(idHistory1_B350_5, x_5) 
	= 
	if ( idHistory1_B350_1 = 352) then
	B_B2352_en(idHistory1_B350_1, x_1, false)
	 else (idHistory1_B350_1, x_1);

	

	(idHistory1_B350_6, idHistory1_History1346_4, x_6) 
	= 
		 if ( idHistory1_B350_1 = 0) then 
		(idHistory1_B350_3, idHistory1_History1346_3, x_3)
		 else
		 if ( idHistory1_B350_1 = 351) then 
		(idHistory1_B350_4, idHistory1_History1346_3, x_4)
		 else
		 if ( idHistory1_B350_1 = 352) then 
		(idHistory1_B350_5, idHistory1_History1346_3, x_5)
		 else (idHistory1_B350_1, idHistory1_History1346_2, x_1);


	(idHistory1_B350, idHistory1_History1346, x) 
	= (idHistory1_B350_6, idHistory1_History1346_4, x_6);
	

tel





-- Exit action for state :History1_B350
node History1_B350_ex(x_1:int;
	idHistory1_B350_1:int;
	idHistory1_History1346_1:int;
	isInner:bool)

returns (x:int;
	idHistory1_B350:int;
	idHistory1_History1346:int);


var 	x_2, x_3, x_4:int;
	idHistory1_B350_2, idHistory1_B350_3, idHistory1_B350_4:int;
	idHistory1_History1346_2:int;


let



	
	(x_2, idHistory1_B350_2) 
	= 
	if ( idHistory1_B350_1 = 351) then
	B_B1351_ex(x_1, idHistory1_B350_1, false)
	 else (x_1, idHistory1_B350_1);

	

	(x_3, idHistory1_B350_3) 
	= 
	if ( idHistory1_B350_1 = 352) then
	B_B2352_ex(x_1, idHistory1_B350_1, false)
	 else (x_1, idHistory1_B350_1);

	

	(x_4, idHistory1_B350_4) 
	= 
		 if ( idHistory1_B350_1 = 351) then 
		(x_2, idHistory1_B350_2)
		 else
		 if ( idHistory1_B350_1 = 352) then 
		(x_3, idHistory1_B350_3)
		 else (x_1, idHistory1_B350_1);


	-- set state as inactive 
	idHistory1_History1346_2
	 = if (not isInner) then 0 else idHistory1_History1346_1;


	(x, idHistory1_B350, idHistory1_History1346) 
	= (x_4, idHistory1_B350_4, idHistory1_History1346_1);
	

tel






-- Entry action for state :A_A2349
node A_A2349_en(idHistory1_A347_1:int;
	x_1:int;
	isInner:bool)

returns (idHistory1_A347:int;
	x:int);


var 	idHistory1_A347_2:int;
	x_2:int;


let



	-- set state as active 
	idHistory1_A347_2 
	= 349;
	

	x_2 
	= if (not isInner) then  x_1 +10
	 else x_1;
	

	(idHistory1_A347, x) 
	= (idHistory1_A347_2, x_2);
	

tel





-- Exit action for state :A_A2349
node A_A2349_ex(x_1:int;
	idHistory1_A347_1:int;
	isInner:bool)

returns (x:int;
	idHistory1_A347:int);


var 	x_2:int;
	idHistory1_A347_2:int;


let



	x_2 
	= if (not isInner) then  x_1 -10
	 else x_1;
	

	-- set state as inactive 
	idHistory1_A347_2
	 = if (not isInner) then 0 else idHistory1_A347_1;


	(x, idHistory1_A347) 
	= (x_2, idHistory1_A347_1);
	

tel






-- Entry action for state :A_A1348
node A_A1348_en(idHistory1_A347_1:int;
	x_1:int;
	isInner:bool)

returns (idHistory1_A347:int;
	x:int);


var 	idHistory1_A347_2:int;
	x_2:int;


let



	-- set state as active 
	idHistory1_A347_2 
	= 348;
	

	x_2 
	= if (not isInner) then  x_1 +1
	 else x_1;
	

	(idHistory1_A347, x) 
	= (idHistory1_A347_2, x_2);
	

tel





-- Exit action for state :A_A1348
node A_A1348_ex(x_1:int;
	idHistory1_A347_1:int;
	isInner:bool)

returns (x:int;
	idHistory1_A347:int);


var 	x_2:int;
	idHistory1_A347_2:int;


let



	x_2 
	= if (not isInner) then  x_1 -1
	 else x_1;
	

	-- set state as inactive 
	idHistory1_A347_2
	 = if (not isInner) then 0 else idHistory1_A347_1;


	(x, idHistory1_A347) 
	= (x_2, idHistory1_A347_1);
	

tel






-- Entry action for state :History1_A347
node History1_A347_en(idHistory1_A347_1:int;
	idHistory1_History1346_1:int;
	x_1:int;
	isInner:bool)

returns (idHistory1_A347:int;
	idHistory1_History1346:int;
	x:int);


var 	idHistory1_A347_2, idHistory1_A347_3, idHistory1_A347_4, idHistory1_A347_5, idHistory1_A347_6:int;
	idHistory1_History1346_2, idHistory1_History1346_3, idHistory1_History1346_4:int;
	x_2, x_3, x_4, x_5, x_6:int;


let



	-- set state as active 
	idHistory1_History1346_2 
	= 347;
	

	
-- transition trace :
	--POINT__To__A_A1348_1
		(idHistory1_A347_2, x_2) 
	= A_A1348_en(idHistory1_A347_1, x_1, false);
		

	(idHistory1_A347_3, idHistory1_History1346_3, x_3) 
	= 

	if ( idHistory1_A347_1 = 0) then

	 (idHistory1_A347_2, idHistory1_History1346_2, x_2)

	 else(idHistory1_A347_1, idHistory1_History1346_2, x_1);

	

	(idHistory1_A347_4, x_4) 
	= 
	if ( idHistory1_A347_1 = 348) then
	A_A1348_en(idHistory1_A347_1, x_1, false)
	 else (idHistory1_A347_1, x_1);

	

	(idHistory1_A347_5, x_5) 
	= 
	if ( idHistory1_A347_1 = 349) then
	A_A2349_en(idHistory1_A347_1, x_1, false)
	 else (idHistory1_A347_1, x_1);

	

	(idHistory1_A347_6, idHistory1_History1346_4, x_6) 
	= 
		 if ( idHistory1_A347_1 = 0) then 
		(idHistory1_A347_3, idHistory1_History1346_3, x_3)
		 else
		 if ( idHistory1_A347_1 = 348) then 
		(idHistory1_A347_4, idHistory1_History1346_3, x_4)
		 else
		 if ( idHistory1_A347_1 = 349) then 
		(idHistory1_A347_5, idHistory1_History1346_3, x_5)
		 else (idHistory1_A347_1, idHistory1_History1346_2, x_1);


	(idHistory1_A347, idHistory1_History1346, x) 
	= (idHistory1_A347_6, idHistory1_History1346_4, x_6);
	

tel





-- Exit action for state :History1_A347
node History1_A347_ex(x_1:int;
	idHistory1_A347_1:int;
	idHistory1_History1346_1:int;
	isInner:bool)

returns (x:int;
	idHistory1_A347:int;
	idHistory1_History1346:int);


var 	x_2, x_3, x_4:int;
	idHistory1_A347_2, idHistory1_A347_3, idHistory1_A347_4:int;
	idHistory1_History1346_2:int;


let



	
	(x_2, idHistory1_A347_2) 
	= 
	if ( idHistory1_A347_1 = 348) then
	A_A1348_ex(x_1, idHistory1_A347_1, false)
	 else (x_1, idHistory1_A347_1);

	

	(x_3, idHistory1_A347_3) 
	= 
	if ( idHistory1_A347_1 = 349) then
	A_A2349_ex(x_1, idHistory1_A347_1, false)
	 else (x_1, idHistory1_A347_1);

	

	(x_4, idHistory1_A347_4) 
	= 
		 if ( idHistory1_A347_1 = 348) then 
		(x_2, idHistory1_A347_2)
		 else
		 if ( idHistory1_A347_1 = 349) then 
		(x_3, idHistory1_A347_3)
		 else (x_1, idHistory1_A347_1);


	-- set state as inactive 
	idHistory1_History1346_2
	 = if (not isInner) then 0 else idHistory1_History1346_1;


	(x, idHistory1_A347, idHistory1_History1346) 
	= (x_4, idHistory1_A347_4, idHistory1_History1346_1);
	

tel


--***************************************************State :History1_B350 Automaton***************************************************

node History1_B350_node(idHistory1_B350_1:int;
	x_1:int;
	E:bool)

returns (idHistory1_B350:int;
	x:int);


let

	 automaton history1_b350

	state POINTHistory1_B350:
	unless (idHistory1_B350_1=0) restart POINT__TO__B_B1351_1



	unless (idHistory1_B350_1=351) and E restart B_B1351__TO__B_B2352_1



	unless (idHistory1_B350_1=352) and E restart B_B2352__TO__B_B1351_1



	unless (idHistory1_B350_1=351) restart B_B1351_IDL

	unless (idHistory1_B350_1=352) restart B_B2352_IDL

	let

		(idHistory1_B350, x) 
	= (idHistory1_B350_1, x_1);
	

	tel



	state POINT__TO__B_B1351_1:

	 var 	idHistory1_B350_2:int;
	x_2:int;
	let

		-- transition trace :
	--POINT__To__B_B1351_1
		(idHistory1_B350_2, x_2) 
	= B_B1351_en(idHistory1_B350_1, x_1, false);
		

	(idHistory1_B350, x) 
	=  (idHistory1_B350_2, x_2);


	tel

	until true restart POINTHistory1_B350



	state B_B1351__TO__B_B2352_1:

	 var 	idHistory1_B350_2, idHistory1_B350_3:int;
	x_2, x_3:int;
	let

		-- transition trace :
	--B_B1351__To__B_B2352_1
		(x_2, idHistory1_B350_2) 
	= B_B1351_ex(x_1, idHistory1_B350_1, false);
		

		(idHistory1_B350_3, x_3) 
	= B_B2352_en(idHistory1_B350_2, x_2, false);
		

	(idHistory1_B350, x) 
	=  (idHistory1_B350_3, x_3);


	tel

	until true restart POINTHistory1_B350



	state B_B2352__TO__B_B1351_1:

	 var 	idHistory1_B350_2, idHistory1_B350_3:int;
	x_2, x_3:int;
	let

		-- transition trace :
	--B_B2352__To__B_B1351_1
		(x_2, idHistory1_B350_2) 
	= B_B2352_ex(x_1, idHistory1_B350_1, false);
		

		(idHistory1_B350_3, x_3) 
	= B_B1351_en(idHistory1_B350_2, x_2, false);
		

	(idHistory1_B350, x) 
	=  (idHistory1_B350_3, x_3);


	tel

	until true restart POINTHistory1_B350



	state B_B1351_IDL:

	 	let

		

	(idHistory1_B350, x) 
	= (idHistory1_B350_1, x_1);
	

	tel

	until true restart POINTHistory1_B350



	state B_B2352_IDL:

	 	let

		

	(idHistory1_B350, x) 
	= (idHistory1_B350_1, x_1);
	

	tel

	until true restart POINTHistory1_B350



tel


--***************************************************State :History1_A347 Automaton***************************************************

node History1_A347_node(idHistory1_A347_1:int;
	x_1:int;
	E:bool)

returns (idHistory1_A347:int;
	x:int);


let

	 automaton history1_a347

	state POINTHistory1_A347:
	unless (idHistory1_A347_1=0) restart POINT__TO__A_A1348_1



	unless (idHistory1_A347_1=348) and E restart A_A1348__TO__A_A2349_1



	unless (idHistory1_A347_1=349) and E restart A_A2349__TO__A_A1348_1



	unless (idHistory1_A347_1=348) restart A_A1348_IDL

	unless (idHistory1_A347_1=349) restart A_A2349_IDL

	let

		(idHistory1_A347, x) 
	= (idHistory1_A347_1, x_1);
	

	tel



	state POINT__TO__A_A1348_1:

	 var 	idHistory1_A347_2:int;
	x_2:int;
	let

		-- transition trace :
	--POINT__To__A_A1348_1
		(idHistory1_A347_2, x_2) 
	= A_A1348_en(idHistory1_A347_1, x_1, false);
		

	(idHistory1_A347, x) 
	=  (idHistory1_A347_2, x_2);


	tel

	until true restart POINTHistory1_A347



	state A_A1348__TO__A_A2349_1:

	 var 	idHistory1_A347_2, idHistory1_A347_3:int;
	x_2, x_3:int;
	let

		-- transition trace :
	--A_A1348__To__A_A2349_1
		(x_2, idHistory1_A347_2) 
	= A_A1348_ex(x_1, idHistory1_A347_1, false);
		

		(idHistory1_A347_3, x_3) 
	= A_A2349_en(idHistory1_A347_2, x_2, false);
		

	(idHistory1_A347, x) 
	=  (idHistory1_A347_3, x_3);


	tel

	until true restart POINTHistory1_A347



	state A_A2349__TO__A_A1348_1:

	 var 	idHistory1_A347_2, idHistory1_A347_3:int;
	x_2, x_3:int;
	let

		-- transition trace :
	--A_A2349__To__A_A1348_1
		(x_2, idHistory1_A347_2) 
	= A_A2349_ex(x_1, idHistory1_A347_1, false);
		

		(idHistory1_A347_3, x_3) 
	= A_A1348_en(idHistory1_A347_2, x_2, false);
		

	(idHistory1_A347, x) 
	=  (idHistory1_A347_3, x_3);


	tel

	until true restart POINTHistory1_A347



	state A_A1348_IDL:

	 	let

		

	(idHistory1_A347, x) 
	= (idHistory1_A347_1, x_1);
	

	tel

	until true restart POINTHistory1_A347



	state A_A2349_IDL:

	 	let

		

	(idHistory1_A347, x) 
	= (idHistory1_A347_1, x_1);
	

	tel

	until true restart POINTHistory1_A347



tel


--***************************************************State :History1_History1346 Automaton***************************************************

node History1_History1346_node(idHistory1_History1346_1:int;
	idHistory1_A347_1:int;
	x_1:int;
	F:bool;
	idHistory1_B350_1:int;
	E:bool)

returns (idHistory1_History1346:int;
	idHistory1_A347:int;
	x:int;
	idHistory1_B350:int);


let

	 automaton history1_history1346

	state POINTHistory1_History1346:
	unless (idHistory1_History1346_1=0) restart POINT__TO__HISTORY1_A347_1



	unless (idHistory1_History1346_1=347) and F restart HISTORY1_A347__TO__HISTORY1_B350_1



	unless (idHistory1_History1346_1=350) and F restart HISTORY1_B350__TO__HISTORY1_A347_1



	unless (idHistory1_History1346_1=347) restart HISTORY1_A347_IDL

	unless (idHistory1_History1346_1=350) restart HISTORY1_B350_IDL

	let

		(idHistory1_History1346, idHistory1_A347, x, idHistory1_B350) 
	= (idHistory1_History1346_1, idHistory1_A347_1, x_1, idHistory1_B350_1);
	

	tel



	state POINT__TO__HISTORY1_A347_1:

	 var 	idHistory1_History1346_2:int;
	idHistory1_A347_2:int;
	x_2:int;
	let

		-- transition trace :
	--POINT__To__History1_A347_1
		(idHistory1_A347_2, idHistory1_History1346_2, x_2) 
	= History1_A347_en(idHistory1_A347_1, idHistory1_History1346_1, x_1, false);
		

	(idHistory1_History1346, idHistory1_A347, x) 
	=  (idHistory1_History1346_2, idHistory1_A347_2, x_2);

	--add unused variables
	(idHistory1_B350) 
	= (idHistory1_B350_1);
	

	tel

	until true restart POINTHistory1_History1346



	state HISTORY1_A347__TO__HISTORY1_B350_1:

	 var 	idHistory1_History1346_2, idHistory1_History1346_3:int;
	idHistory1_A347_2:int;
	x_2, x_3:int;
	idHistory1_B350_2:int;
	let

		-- transition trace :
	--History1_A347__To__History1_B350_1
		(x_2, idHistory1_A347_2, idHistory1_History1346_2) 
	= History1_A347_ex(x_1, idHistory1_A347_1, idHistory1_History1346_1, false);
		

		(idHistory1_B350_2, idHistory1_History1346_3, x_3) 
	= History1_B350_en(idHistory1_B350_1, idHistory1_History1346_2, x_2, false);
		

	(idHistory1_History1346, idHistory1_A347, x, idHistory1_B350) 
	=  (idHistory1_History1346_3, idHistory1_A347_2, x_3, idHistory1_B350_2);


	tel

	until true restart POINTHistory1_History1346



	state HISTORY1_B350__TO__HISTORY1_A347_1:

	 var 	idHistory1_History1346_2, idHistory1_History1346_3:int;
	idHistory1_A347_2:int;
	x_2, x_3:int;
	idHistory1_B350_2:int;
	let

		-- transition trace :
	--History1_B350__To__History1_A347_1
		(x_2, idHistory1_B350_2, idHistory1_History1346_2) 
	= History1_B350_ex(x_1, idHistory1_B350_1, idHistory1_History1346_1, false);
		

		(idHistory1_A347_2, idHistory1_History1346_3, x_3) 
	= History1_A347_en(idHistory1_A347_1, idHistory1_History1346_2, x_2, false);
		

	(idHistory1_History1346, idHistory1_A347, x, idHistory1_B350) 
	=  (idHistory1_History1346_3, idHistory1_A347_2, x_3, idHistory1_B350_2);


	tel

	until true restart POINTHistory1_History1346



	state HISTORY1_A347_IDL:

	 var 	idHistory1_A347_2:int;
	x_2:int;
	let

		
	(idHistory1_A347_2, x_2) 
	= History1_A347_node(idHistory1_A347_1, x_1, E);

		


	(idHistory1_History1346, idHistory1_A347, x, idHistory1_B350) 
	= (idHistory1_History1346_1, idHistory1_A347_2, x_2, idHistory1_B350_1);
	

	tel

	until true restart POINTHistory1_History1346



	state HISTORY1_B350_IDL:

	 var 	x_2:int;
	idHistory1_B350_2:int;
	let

		
	(idHistory1_B350_2, x_2) 
	= History1_B350_node(idHistory1_B350_1, x_1, E);

		


	(idHistory1_History1346, idHistory1_A347, x, idHistory1_B350) 
	= (idHistory1_History1346_1, idHistory1_A347_1, x_2, idHistory1_B350_2);
	

	tel

	until true restart POINTHistory1_History1346



tel


--***************************************************State :History1_History1346 Automaton***************************************************

node History1_PP_History1(E:bool;
	F:bool)

returns (x:int);


var x_1: int;

	idHistory1_History1346, idHistory1_History1346_1: int;

	idHistory1_B350, idHistory1_B350_1: int;

	idHistory1_A347, idHistory1_A347_1: int;

		idHistory1_History1346_2:int;
	idHistory1_A347_2:int;
	x_2:int;
	idHistory1_B350_2:int;
let

	x_1 = 0 -> pre x;

	idHistory1_History1346_1 = 0 -> pre idHistory1_History1346;

	idHistory1_B350_1 = 0 -> pre idHistory1_B350;

	idHistory1_A347_1 = 0 -> pre idHistory1_A347;

	



	(idHistory1_History1346_2, idHistory1_A347_2, x_2, idHistory1_B350_2)
	 = 

	 if E then History1_History1346_node(idHistory1_History1346_1, idHistory1_A347_1, x_1, false, idHistory1_B350_1, E)

	 else (idHistory1_History1346_1, idHistory1_A347_1, x_1, idHistory1_B350_1);

	



	(idHistory1_History1346, idHistory1_A347, x, idHistory1_B350)
	 = 

	 if F then History1_History1346_node(idHistory1_History1346_2, idHistory1_A347_2, x_2, F, idHistory1_B350_2, false)

	 else (idHistory1_History1346_2, idHistory1_A347_2, x_2, idHistory1_B350_2);

	


--unused outputs
	

tel



node History1_PP (E_1_1 : real; F_1_1 : real)
returns (x_1_1 : int); 
var
	History1_1_1 : int;
	Mux_1_1 : real; Mux_1_2 : real;
	i_virtual_local : real;
	History1Mux_1_1_event: bool;
	History1Mux_1_2_event: bool;
let 
	History1Mux_1_1_event = false -> ((pre(Mux_1_1) > 0.0 and Mux_1_1 <= 0.0) or (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0));
	History1Mux_1_2_event = false -> ((pre(Mux_1_2) > 0.0 and Mux_1_2 <= 0.0) or (pre(Mux_1_2) <= 0.0 and Mux_1_2 > 0.0));
	History1_1_1 =  History1_PP_History1(History1Mux_1_1_event, History1Mux_1_2_event);
	Mux_1_1 = E_1_1 ;
	Mux_1_2 = F_1_1 ;
	x_1_1 = History1_1_1;
	i_virtual_local= 0.0 -> 1.0;
tel

