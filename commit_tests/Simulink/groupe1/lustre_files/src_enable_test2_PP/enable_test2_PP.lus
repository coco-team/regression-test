-- This file has been generated by CoCoSim


-- System nodes
node enable_test2_PP_Subsystem2 (In1_1_1 : real; enable_test2_PP_Subsystem2_Enable_1_1: bool; enable_test2_PP_Subsystem2_Trigger_1_1: bool; enable_test2_PP_Subsystem2_Trigger_pre_1_1: bool; enable_test2_PP_Subsystem2_enable_reset: bool)
returns (Out1_1_1 : bool;
	Out2_2_1 : real); 
var
	Enable_1_1 : bool;
	Trigger_1_1 : real;
	Add_1_1 : real;
	CompareToZero_1_1 : bool;
	LogicalOperator_1_1 : bool;
let 
	Enable_1_1 = enable_test2_PP_Subsystem2_Enable_1_1;
	Trigger_1_1 = if enable_test2_PP_Subsystem2_Trigger_pre_1_1 and not(enable_test2_PP_Subsystem2_Trigger_1_1) then -1.0 else 1.0;
	Add_1_1 = Trigger_1_1 + In1_1_1;
	CompareToZero_1_1 = Add_1_1 <= 0.00000000;
	LogicalOperator_1_1 = CompareToZero_1_1 and Enable_1_1;
	Out1_1_1 = LogicalOperator_1_1;
	Out2_2_1 = Add_1_1;
tel

node enable_test2_PP_Subsystem1 (In1_1_1 : real; enable_test2_PP_Subsystem1_Enable_1_1: bool; enable_test2_PP_Subsystem1_Trigger_1_1: bool; enable_test2_PP_Subsystem1_Trigger_pre_1_1: bool)
returns (Out1_1_1 : bool;
	Out2_2_1 : real); 
var
	Enable_1_1 : bool;
	Trigger_1_1 : real;
	Add_1_1 : real;
	CompareToZero_1_1 : bool;
	LogicalOperator_1_1 : bool;
let 
	Enable_1_1 = enable_test2_PP_Subsystem1_Enable_1_1;
	Trigger_1_1 = if enable_test2_PP_Subsystem1_Trigger_pre_1_1 and not(enable_test2_PP_Subsystem1_Trigger_1_1) then -1.0 else 1.0;
	Add_1_1 = Trigger_1_1 + In1_1_1;
	CompareToZero_1_1 = Add_1_1 <= 0.00000000;
	LogicalOperator_1_1 = CompareToZero_1_1 and Enable_1_1;
	Out1_1_1 = LogicalOperator_1_1;
	Out2_2_1 = Add_1_1;
tel

node enable_test2_PP_Subsystem0 (In1_1_1 : real)
returns (Out1_1_1 : real); 
let 
	Out1_1_1 = In1_1_1;
tel

node enable_test2_PP (in1_1_1 : real; in2_1_1 : real; in3_1_1 : bool)
returns (Out1_1_1 : real;
	Out2_2_1 : bool;
	Out3_3_1 : real;
	Out4_4_1 : bool;
	Out5_5_1 : real); 
var
	Subsystem0_1_1 : real;
	Subsystem1_1_1 : bool; Subsystem1_2_1 : real;
	Subsystem2_1_1 : bool; Subsystem2_2_1 : real;
	i_virtual_local : real;
	Subsystem0in3_1_1_cond_str_trigger: bool;
	Subsystem1in3_1_1_cond_str_trigger: bool;
	Subsystem1pre_in3_1_1: bool;
	Subsystem2in3_1_1_cond_str_trigger: bool;
	Subsystem2pre_in3_1_1: bool;
	Subsystem2_reset_cond: bool;
let 
	Subsystem0in3_1_1_cond_str_trigger = false -> (pre(in3_1_1) and not(in3_1_1));
	Subsystem0_1_1 = if (Subsystem0in3_1_1_cond_str_trigger and in3_1_1) then enable_test2_PP_Subsystem0(in2_1_1) else pre Subsystem0_1_1;
	Subsystem1in3_1_1_cond_str_trigger = false -> (not(pre(in3_1_1) = in3_1_1));
	Subsystem1pre_in3_1_1 = pre(in3_1_1);
	(Subsystem1_1_1, Subsystem1_2_1) = if (Subsystem1in3_1_1_cond_str_trigger and in3_1_1) then enable_test2_PP_Subsystem1(in1_1_1, in3_1_1, in3_1_1, Subsystem1pre_in3_1_1) else (pre Subsystem1_1_1, pre Subsystem1_2_1);
	Subsystem2in3_1_1_cond_str_trigger = false -> (not(pre(in3_1_1) = in3_1_1));
	Subsystem2pre_in3_1_1 = pre(in3_1_1);
	Subsystem2_reset_cond = (Subsystem2in3_1_1_cond_str_trigger and in3_1_1) and not pre (Subsystem2in3_1_1_cond_str_trigger and in3_1_1);
	(Subsystem2_1_1, Subsystem2_2_1) = if (Subsystem2in3_1_1_cond_str_trigger and in3_1_1) then enable_test2_PP_Subsystem2(in1_1_1, in3_1_1, in3_1_1, Subsystem2pre_in3_1_1, Subsystem2_reset_cond) else (pre Subsystem2_1_1, pre Subsystem2_2_1);
	Out1_1_1 = Subsystem0_1_1;
	Out2_2_1 = Subsystem1_1_1;
	Out3_3_1 = Subsystem1_2_1;
	Out4_4_1 = Subsystem2_1_1;
	Out5_5_1 = Subsystem2_2_1;
	i_virtual_local= 0.0 -> 1.0;
tel

