-- This file has been generated by cocoSim

-- External Stateflow functions
#open <math>

-- System nodes




node POINT__To__Chart_fJunction783_1_Condition_Action(x:real;
	y:real;
	z_1:real)

returns (z:real);


var 	z_2:real;


let



	z_2 
	= sqrt(x*x+y*y);
	

	(z) 
	= (z_2);
	

tel


--***************************************************State :Chart_f Automaton***************************************************

node Chart_f_node(idChart_f_1:int;
	x:real;
	y:real;
	z_1:real)

returns (idChart_f:int;
	z:real);


let

	 automaton chart_f

	state POINTChart_f:
	unless (idChart_f_1=0) restart POINT__TO__CHART_FJUNCTION783_1



	let

		(idChart_f, z) 
	= (idChart_f_1, z_1);
	

	tel



	state POINT__TO__CHART_FJUNCTION783_1:

	 var 	z_2:real;
	let

		-- transition trace :
	--POINT__To__Junction783_1
		-- condition Action : z=sqrt(x*x+y*y);
		
		(z_2) 
	= POINT__To__Chart_fJunction783_1_Condition_Action(x, y, z_1);
		

	(idChart_f, z) 
	=  (idChart_f_1, z_2);


	tel

	until true restart POINTChart_f



tel


--***************************************************State :Chart_f Automaton***************************************************

node f(x:real;
	y:real)

returns (z:real);


var z_1: real;

	idChart_f, idChart_f_1: int;

	let

	z_1 = 0.0 -> pre z;

	idChart_f_1 = 0 -> pre idChart_f;

	



	(idChart_f, z)
	 = Chart_f_node(idChart_f_1, x, y, z_1);


--unused outputs
	

tel







node Chart_B__To__Chart_A_1_Condition_Action(a_1:real;
	b_1:real;
	c_1:real)

returns (a:real;
	b:real;
	c:real);


var 	c_2:real;


let



	c_2 
	= f( a_1 , b_1 );
	

	(a, b, c) 
	= (a_1, b_1, c_2);
	

tel







node Chart_A__To__Chart_B_1_Condition_Action(a_1:real;
	b_1:real;
	c_1:real)

returns (a:real;
	b:real;
	c:real);


var 	c_2:real;


let



	c_2 
	= f( a_1 , b_1 );
	

	(a, b, c) 
	= (a_1, b_1, c_2);
	

tel






-- Entry action for state :Chart_B
node Chart_B_en(idChart_Chart_1:int;
	a_1:real;
	b_1:real;
	isInner:bool)

returns (idChart_Chart:int;
	a:real;
	b:real);


var 	idChart_Chart_2:int;
	a_2:real;
	b_2:real;


let



	-- set state as active 
	idChart_Chart_2 
	= 778;
	

	a_2 
	= if (not isInner) then 5.
	 else a_1;
	

	b_2 
	= if (not isInner) then 12.
	 else b_1;
	

	(idChart_Chart, a, b) 
	= (idChart_Chart_2, a_2, b_2);
	

tel





-- Exit action for state :Chart_B
node Chart_B_ex(idChart_Chart_1:int;
	isInner:bool)

returns (idChart_Chart:int);


var 	idChart_Chart_2:int;


let



	-- set state as inactive 
	idChart_Chart_2
	 = if (not isInner) then 0 else idChart_Chart_1;


	(idChart_Chart) 
	= (idChart_Chart_1);
	

tel






-- Entry action for state :Chart_A
node Chart_A_en(idChart_Chart_1:int;
	a_1:real;
	b_1:real;
	isInner:bool)

returns (idChart_Chart:int;
	a:real;
	b:real);


var 	idChart_Chart_2:int;
	a_2:real;
	b_2:real;


let



	-- set state as active 
	idChart_Chart_2 
	= 777;
	

	a_2 
	= if (not isInner) then 3.
	 else a_1;
	

	b_2 
	= if (not isInner) then 4.
	 else b_1;
	

	(idChart_Chart, a, b) 
	= (idChart_Chart_2, a_2, b_2);
	

tel





-- Exit action for state :Chart_A
node Chart_A_ex(idChart_Chart_1:int;
	isInner:bool)

returns (idChart_Chart:int);


var 	idChart_Chart_2:int;


let



	-- set state as inactive 
	idChart_Chart_2
	 = if (not isInner) then 0 else idChart_Chart_1;


	(idChart_Chart) 
	= (idChart_Chart_1);
	

tel


--***************************************************State :Chart_Chart Automaton***************************************************

node Chart_Chart_node(idChart_Chart_1:int;
	a_1:real;
	b_1:real;
	c_1:real)

returns (idChart_Chart:int;
	a:real;
	b:real;
	c:real);


let

	 automaton chart_chart

	state POINTChart_Chart:
	unless (idChart_Chart_1=0) restart POINT__TO__CHART_A_1



	unless (idChart_Chart_1=777) restart CHART_A__TO__CHART_B_1



	unless (idChart_Chart_1=778) restart CHART_B__TO__CHART_A_1



	unless (idChart_Chart_1=777) restart CHART_A_IDL

	unless (idChart_Chart_1=778) restart CHART_B_IDL

	let

		(idChart_Chart, a, b, c) 
	= (idChart_Chart_1, a_1, b_1, c_1);
	

	tel



	state POINT__TO__CHART_A_1:

	 var 	idChart_Chart_2:int;
	a_2:real;
	b_2:real;
	let

		-- transition trace :
	--POINT__To__Chart_A_1
		(idChart_Chart_2, a_2, b_2) 
	= Chart_A_en(idChart_Chart_1, a_1, b_1, false);
		

	(idChart_Chart, a, b) 
	=  (idChart_Chart_2, a_2, b_2);

	--add unused variables
	(c) 
	= (c_1);
	

	tel

	until true restart POINTChart_Chart



	state CHART_A__TO__CHART_B_1:

	 var 	idChart_Chart_2, idChart_Chart_3:int;
	a_2, a_3:real;
	b_2, b_3:real;
	c_2:real;
	let

		-- transition trace :
	--Chart_A__To__Chart_B_1
		-- condition Action : c=f(a,b)
		
		(a_2, b_2, c_2) 
	= Chart_A__To__Chart_B_1_Condition_Action(a_1, b_1, c_1);
		

		(idChart_Chart_2) 
	= Chart_A_ex(idChart_Chart_1, false);
		

		(idChart_Chart_3, a_3, b_3) 
	= Chart_B_en(idChart_Chart_2, a_2, b_2, false);
		

	(idChart_Chart, a, b, c) 
	=  (idChart_Chart_3, a_3, b_3, c_2);


	tel

	until true restart POINTChart_Chart



	state CHART_B__TO__CHART_A_1:

	 var 	idChart_Chart_2, idChart_Chart_3:int;
	a_2, a_3:real;
	b_2, b_3:real;
	c_2:real;
	let

		-- transition trace :
	--Chart_B__To__Chart_A_1
		-- condition Action : c=f(a,b)
		
		(a_2, b_2, c_2) 
	= Chart_B__To__Chart_A_1_Condition_Action(a_1, b_1, c_1);
		

		(idChart_Chart_2) 
	= Chart_B_ex(idChart_Chart_1, false);
		

		(idChart_Chart_3, a_3, b_3) 
	= Chart_A_en(idChart_Chart_2, a_2, b_2, false);
		

	(idChart_Chart, a, b, c) 
	=  (idChart_Chart_3, a_3, b_3, c_2);


	tel

	until true restart POINTChart_Chart



	state CHART_A_IDL:

	 	let

		

	(idChart_Chart, a, b, c) 
	= (idChart_Chart_1, a_1, b_1, c_1);
	

	tel

	until true restart POINTChart_Chart



	state CHART_B_IDL:

	 	let

		

	(idChart_Chart, a, b, c) 
	= (idChart_Chart_1, a_1, b_1, c_1);
	

	tel

	until true restart POINTChart_Chart



tel


--***************************************************State :Chart_Chart Automaton***************************************************

node GraphFun1_Chart(noInput :bool)

returns (c:real);


var c_1: real;

	a, a_1: real;

	b, b_1: real;

	idChart_Chart, idChart_Chart_1: int;

	let

	c_1 = 0.0 -> pre c;

	a_1 = 0.0 -> pre a;

	b_1 = 0.0 -> pre b;

	idChart_Chart_1 = 0 -> pre idChart_Chart;

	



	(idChart_Chart, a, b, c)
	 = Chart_Chart_node(idChart_Chart_1, a_1, b_1, c_1);


--unused outputs
	

tel



node GraphFun1 (i_virtual : real)
returns (c_1_1 : real); 
var
	Chart_1_1 : real;
let 
	Chart_1_1 =  GraphFun1_Chart(true);
	c_1_1 = Chart_1_1;
tel

