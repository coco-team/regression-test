-- This file has been generated by cocoSim


-- System nodes





node Inner1_A__To__A_A2_1_Condition_Action(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1 +1000;
	

	(y) 
	= (y_2);
	

tel





node Inner1_A__To__A_A2_1_Transition_Action(y_1:int;
	z_1:int)

returns (y:int;
	z:int);


var 	z_2:int;


let



	z_2 
	=  z_1 +1000;
	

	(y, z) 
	= (y_1, z_2);
	

tel







node Inner1_A__To__Inner1_Inner1Junction441_3_Condition_Action(w_1:int)

returns (w:int);


var 	w_2:int;


let



	w_2 
	=  w_1  + 1;
	

	(w) 
	= (w_2);
	

tel





node Inner1_A__To__Inner1_Inner1Junction441_3_Transition_Action(w_1:int;
	v_1:int)

returns (w:int;
	v:int);


var 	v_2:int;


let



	v_2 
	=  v_1  + 1;
	

	(w, v) 
	= (w_1, v_2);
	

tel






node Inner1_A__To__A_A1_2_Condition_Action(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel





node Inner1_A__To__A_A1_2_Transition_Action(y_1:int;
	z_1:int)

returns (y:int;
	z:int);


var 	z_2:int;


let



	z_2 
	=  z_1  + 1;
	

	(y, z) 
	= (y_1, z_2);
	

tel







-- Exit action for state :A3_A3a
node A3_A3a_ex(v_1:int;
	idA_A3_1:int;
	isInner:bool)

returns (v:int;
	idA_A3:int);


var 	v_2:int;
	idA_A3_2:int;


let



	v_2 
	= if (not isInner) then  v_1 +10000
	 else v_1;
	

	-- set state as inactive 
	idA_A3_2
	 = if (not isInner) then 0 else idA_A3_1;


	(v, idA_A3) 
	= (v_2, idA_A3_2);
	

tel





-- Entry action for state :A3_A3a
node A3_A3a_en(idA_A3_1:int;
	isInner:bool)

returns (idA_A3:int);


var 	idA_A3_2:int;


let



	-- set state as active 
	idA_A3_2 
	= 440;
	

	(idA_A3) 
	= (idA_A3_2);
	

tel






-- Entry action for state :A_A2
node A_A2_en(idInner1_A_1:int;
	x_1:int;
	isInner:bool)

returns (idInner1_A:int;
	x:int);


var 	idInner1_A_2:int;
	x_2:int;


let



	-- set state as active 
	idInner1_A_2 
	= 438;
	

	x_2 
	= if (not isInner) then  x_1 +1000
	 else x_1;
	

	(idInner1_A, x) 
	= (idInner1_A_2, x_2);
	

tel





--During action for state :A_A2
node A_A2_du(x_1:int)

returns (x:int);


var 	x_2:int;


let



	x_2 
	=  x_1 +10000;
	

	(x) 
	= (x_2);
	

tel





-- Exit action for state :A_A2
node A_A2_ex(idInner1_A_1:int;
	isInner:bool)

returns (idInner1_A:int);


var 	idInner1_A_2:int;


let



	-- set state as inactive 
	idInner1_A_2
	 = if (not isInner) then 0 else idInner1_A_1;


	(idInner1_A) 
	= (idInner1_A_2);
	

tel






-- Entry action for state :A_A1
node A_A1_en(idInner1_A_1:int;
	x_1:int;
	isInner:bool)

returns (idInner1_A:int;
	x:int);


var 	idInner1_A_2:int;
	x_2:int;


let



	-- set state as active 
	idInner1_A_2 
	= 437;
	

	x_2 
	= if (not isInner) then  x_1 +1
	 else x_1;
	

	(idInner1_A, x) 
	= (idInner1_A_2, x_2);
	

tel





--During action for state :A_A1
node A_A1_du(x_1:int)

returns (x:int);


var 	x_2:int;


let



	x_2 
	=  x_1 +10;
	

	(x) 
	= (x_2);
	

tel





-- Exit action for state :A_A1
node A_A1_ex(idInner1_A_1:int;
	isInner:bool)

returns (idInner1_A:int);


var 	idInner1_A_2:int;


let



	-- set state as inactive 
	idInner1_A_2
	 = if (not isInner) then 0 else idInner1_A_1;


	(idInner1_A) 
	= (idInner1_A_2);
	

tel






-- Exit action for state :A_A3
node A_A3_ex(v_1:int;
	idA_A3_1:int;
	idInner1_A_1:int;
	isInner:bool)

returns (v:int;
	idA_A3:int;
	idInner1_A:int);


var 	v_2, v_3, v_4:int;
	idA_A3_2, idA_A3_3, idA_A3_4:int;
	idInner1_A_2:int;


let



	
	(v_2, idA_A3_2) 
	= 
	if ( idA_A3_1 = 440) then
	A3_A3a_ex(v_1, idA_A3_1, false)
	 else (v_1, idA_A3_1);

	

	(v_3, idA_A3_3) 
	= 
		 if ( idA_A3_1 = 440) then 
		(v_2, idA_A3_2)
		 else (v_1, idA_A3_1);


	v_4 
	= if (not isInner) then  v_3 +1000
	 else v_3;
	

	-- set state as inactive 
	idInner1_A_2
	 = if (not isInner) then 0 else idInner1_A_1;

	idA_A3_4 
	= 0;
	

	(v, idA_A3, idInner1_A) 
	= (v_4, idA_A3_4, idInner1_A_2);
	

tel





-- Entry action for state :A_A3
node A_A3_en(idA_A3_1:int;
	idInner1_A_1:int;
	isInner:bool)

returns (idA_A3:int;
	idInner1_A:int);


var 	idA_A3_2, idA_A3_3, idA_A3_4, idA_A3_5:int;
	idInner1_A_2, idInner1_A_3, idInner1_A_4:int;


let



	-- set state as active 
	idInner1_A_2 
	= 439;
	

	
-- transition trace :
	--POINT__To__A3_A3a_1
		(idA_A3_2) 
	= A3_A3a_en(idA_A3_1, false);
		

	(idA_A3_3, idInner1_A_3) 
	= 

	if ( idA_A3_1 = 0) then

	 (idA_A3_2, idInner1_A_2)

	 else(idA_A3_1, idInner1_A_2);

	

	(idA_A3_4) 
	= 
	if ( idA_A3_1 = 440) then
	A3_A3a_en(idA_A3_1, false)
	 else (idA_A3_1);

	

	(idA_A3_5, idInner1_A_4) 
	= 
		 if ( idA_A3_1 = 0) then 
		(idA_A3_3, idInner1_A_3)
		 else
		 if ( idA_A3_1 = 440) then 
		(idA_A3_4, idInner1_A_3)
		 else (idA_A3_1, idInner1_A_2);


	(idA_A3, idInner1_A) 
	= (idA_A3_5, idInner1_A_4);
	

tel






--During action for state :Inner1_A
node Inner1_A_du(u_1:int)

returns (u:int);


var 	u_2:int;


let



	u_2 
	=  u_1  + 1;
	

	(u) 
	= (u_2);
	

tel





-- Entry action for state :Inner1_A
node Inner1_A_en(idInner1_A_1:int;
	idInner1_Inner1_1:int;
	idA_A3_1:int;
	x_1:int;
	isInner:bool)

returns (idInner1_A:int;
	idInner1_Inner1:int;
	idA_A3:int;
	x:int);


var 	idInner1_A_2, idInner1_A_3, idInner1_A_4, idInner1_A_5, idInner1_A_6, idInner1_A_7:int;
	idInner1_Inner1_2, idInner1_Inner1_3, idInner1_Inner1_4:int;
	idA_A3_2, idA_A3_3, idA_A3_4, idA_A3_5:int;
	x_2, x_3, x_4:int;


let



	-- set state as active 
	idInner1_Inner1_2 
	= 436;
	

	
-- transition trace :
	--POINT__To__A_A3_1
		(idA_A3_2, idInner1_A_2) 
	= A_A3_en(idA_A3_1, idInner1_A_1, false);
		

	(idInner1_A_3, idInner1_Inner1_3, idA_A3_3) 
	= 

	if ( idInner1_A_1 = 0) then

	 (idInner1_A_2, idInner1_Inner1_2, idA_A3_2)

	 else(idInner1_A_1, idInner1_Inner1_2, idA_A3_1);

	

	(idA_A3_4, idInner1_A_4) 
	= 
	if ( idInner1_A_1 = 439) then
	A_A3_en(idA_A3_1, idInner1_A_1, false)
	 else (idA_A3_1, idInner1_A_1);

	

	(idInner1_A_5, x_2) 
	= 
	if ( idInner1_A_1 = 437) then
	A_A1_en(idInner1_A_1, x_1, false)
	 else (idInner1_A_1, x_1);

	

	(idInner1_A_6, x_3) 
	= 
	if ( idInner1_A_1 = 438) then
	A_A2_en(idInner1_A_1, x_1, false)
	 else (idInner1_A_1, x_1);

	

	(idInner1_A_7, idInner1_Inner1_4, idA_A3_5, x_4) 
	= 
		 if ( idInner1_A_1 = 0) then 
		(idInner1_A_3, idInner1_Inner1_3, idA_A3_3, x_1)
		 else
		 if ( idInner1_A_1 = 439) then 
		(idInner1_A_4, idInner1_Inner1_3, idA_A3_4, x_1)
		 else
		 if ( idInner1_A_1 = 437) then 
		(idInner1_A_5, idInner1_Inner1_3, idA_A3_4, x_2)
		 else
		 if ( idInner1_A_1 = 438) then 
		(idInner1_A_6, idInner1_Inner1_3, idA_A3_4, x_3)
		 else (idInner1_A_1, idInner1_Inner1_2, idA_A3_1, x_1);


	(idInner1_A, idInner1_Inner1, idA_A3, x) 
	= (idInner1_A_7, idInner1_Inner1_4, idA_A3_5, x_4);
	

tel





-- Exit action for state :Inner1_A
node Inner1_A_ex(v_1:int;
	idA_A3_1:int;
	idInner1_A_1:int;
	idInner1_Inner1_1:int;
	isInner:bool)

returns (v:int;
	idA_A3:int;
	idInner1_A:int;
	idInner1_Inner1:int);


var 	v_2, v_3:int;
	idA_A3_2, idA_A3_3:int;
	idInner1_A_2, idInner1_A_3, idInner1_A_4, idInner1_A_5, idInner1_A_6:int;
	idInner1_Inner1_2:int;


let



	
	(v_2, idA_A3_2, idInner1_A_2) 
	= 
	if ( idInner1_A_1 = 439) then
	A_A3_ex(v_1, idA_A3_1, idInner1_A_1, false)
	 else (v_1, idA_A3_1, idInner1_A_1);

	

	(idInner1_A_3) 
	= 
	if ( idInner1_A_1 = 437) then
	A_A1_ex(idInner1_A_1, false)
	 else (idInner1_A_1);

	

	(idInner1_A_4) 
	= 
	if ( idInner1_A_1 = 438) then
	A_A2_ex(idInner1_A_1, false)
	 else (idInner1_A_1);

	

	(v_3, idA_A3_3, idInner1_A_5) 
	= 
		 if ( idInner1_A_1 = 439) then 
		(v_2, idA_A3_2, idInner1_A_2)
		 else
		 if ( idInner1_A_1 = 437) then 
		(v_2, idA_A3_2, idInner1_A_3)
		 else
		 if ( idInner1_A_1 = 438) then 
		(v_2, idA_A3_2, idInner1_A_4)
		 else (v_1, idA_A3_1, idInner1_A_1);


	-- set state as inactive 
	idInner1_Inner1_2
	 = if (not isInner) then 0 else idInner1_Inner1_1;

	idInner1_A_6 
	= 0;
	

	(v, idA_A3, idInner1_A, idInner1_Inner1) 
	= (v_3, idA_A3_3, idInner1_A_6, idInner1_Inner1_2);
	

tel


--***************************************************State :A_A3 Automaton***************************************************

node A_A3_node(idA_A3_1:int)

returns (idA_A3:int);


let

	 automaton a_a3

	state POINTA_A3:
	unless (idA_A3_1=0) restart POINT__TO__A3_A3A_1



	unless (idA_A3_1=440) restart A3_A3A_IDL

	let

		(idA_A3) 
	= (idA_A3_1);
	

	tel



	state POINT__TO__A3_A3A_1:

	 var 	idA_A3_2:int;
	let

		-- transition trace :
	--POINT__To__A3_A3a_1
		(idA_A3_2) 
	= A3_A3a_en(idA_A3_1, false);
		

	(idA_A3) 
	=  (idA_A3_2);


	tel

	until true restart POINTA_A3



	state A3_A3A_IDL:

	 	let

		

	(idA_A3) 
	= (idA_A3_1);
	

	tel

	until true restart POINTA_A3



tel


--***************************************************State :Inner1_A Automaton***************************************************

node Inner1_A_node(idInner1_A_1:int;
	idA_A3_1:int;
	E:bool;
	u_1:int;
	y_1:int;
	idInner1_Inner1_1:int;
	v_1:int;
	z_1:int;
	x_1:int;
	w_1:int)

returns (idInner1_A:int;
	idA_A3:int;
	u:int;
	y:int;
	idInner1_Inner1:int;
	v:int;
	z:int;
	x:int;
	w:int);


let

	 automaton inner1_a

	state POINTInner1_A:
	unless (idInner1_A_1=0) restart POINT__TO__A_A3_1



	unless true and E and (  u_1  mod 3=1 ) restart INNER1_A__TO__A_A2_1



	unless true and E and (  u_1  mod 3=0 ) restart INNER1_A__TO__A_A1_2



	unless true and E and (  u_1  mod 3=2 ) restart INNER1_A__TO__INNER1_INNER1JUNCTION441_3



	unless (idInner1_A_1=439) restart A_A3_IDL

	unless (idInner1_A_1=437) restart A_A1_IDL

	unless (idInner1_A_1=438) restart A_A2_IDL

	let

		(idInner1_A, idA_A3, u, y, idInner1_Inner1, v, z, x, w) 
	= (idInner1_A_1, idA_A3_1, u_1, y_1, idInner1_Inner1_1, v_1, z_1, x_1, w_1);
	

	tel



	state POINT__TO__A_A3_1:

	 var 	idInner1_A_2:int;
	idA_A3_2:int;
	let

		-- transition trace :
	--POINT__To__A_A3_1
		(idA_A3_2, idInner1_A_2) 
	= A_A3_en(idA_A3_1, idInner1_A_1, false);
		

	(idInner1_A, idA_A3) 
	=  (idInner1_A_2, idA_A3_2);

	--add unused variables
	(idInner1_Inner1, u, v, w, x, y, z) 
	= (idInner1_Inner1_1, u_1, v_1, w_1, x_1, y_1, z_1);
	

	tel

	until true restart POINTInner1_A



	state INNER1_A__TO__A_A2_1:

	 var 	idInner1_A_2, idInner1_A_3:int;
	idA_A3_2:int;
	y_2, y_3:int;
	idInner1_Inner1_2:int;
	v_2:int;
	z_2:int;
	x_2:int;
	let

		-- transition trace :
	--Inner1_A__To__A_A2_1
		-- condition Action : y+=1000;
		
		(y_2) 
	= Inner1_A__To__A_A2_1_Condition_Action(y_1);
		

		(v_2, idA_A3_2, idInner1_A_2, idInner1_Inner1_2) 
	= Inner1_A_ex(v_1, idA_A3_1, idInner1_A_1, idInner1_Inner1_1, true);
		

		(y_3, z_2) 
	= Inner1_A__To__A_A2_1_Transition_Action(y_2, z_1);
		

		(idInner1_A_3, x_2) 
	= A_A2_en(idInner1_A_2, x_1, false);
		

	(idInner1_A, idA_A3, u, y, idInner1_Inner1, v, z, x) 
	=  (idInner1_A_3, idA_A3_2, u_1, y_3, idInner1_Inner1_2, v_2, z_2, x_2);

	--add unused variables
	(w) 
	= (w_1);
	

	tel

	until true restart POINTInner1_A



	state INNER1_A__TO__A_A1_2:

	 var 	idInner1_A_2, idInner1_A_3:int;
	idA_A3_2:int;
	y_2, y_3:int;
	idInner1_Inner1_2:int;
	v_2:int;
	z_2:int;
	x_2:int;
	let

		-- transition trace :
	--Inner1_A__To__A_A1_2
		-- condition Action : y++;
		
		(y_2) 
	= Inner1_A__To__A_A1_2_Condition_Action(y_1);
		

		(v_2, idA_A3_2, idInner1_A_2, idInner1_Inner1_2) 
	= Inner1_A_ex(v_1, idA_A3_1, idInner1_A_1, idInner1_Inner1_1, true);
		

		(y_3, z_2) 
	= Inner1_A__To__A_A1_2_Transition_Action(y_2, z_1);
		

		(idInner1_A_3, x_2) 
	= A_A1_en(idInner1_A_2, x_1, false);
		

	(idInner1_A, idA_A3, u, y, idInner1_Inner1, v, z, x) 
	=  (idInner1_A_3, idA_A3_2, u_1, y_3, idInner1_Inner1_2, v_2, z_2, x_2);

	--add unused variables
	(w) 
	= (w_1);
	

	tel

	until true restart POINTInner1_A



	state INNER1_A__TO__INNER1_INNER1JUNCTION441_3:

	 var 	w_2:int;
	let

		-- transition trace :
	--Inner1_A__To__Junction441_3
		-- condition Action : w++;
		
		(w_2) 
	= Inner1_A__To__Inner1_Inner1Junction441_3_Condition_Action(w_1);
		

	(idInner1_A, idA_A3, u, y, idInner1_Inner1, v, z, x, w) 
	=  (idInner1_A_1, idA_A3_1, u_1, y_1, idInner1_Inner1_1, v_1, z_1, x_1, w_2);


	tel

	until true restart POINTInner1_A



	state A_A3_IDL:

	 var 	idA_A3_2:int;
	let

		
	(idA_A3_2) 
	= A_A3_node(idA_A3_1);

		


	(idInner1_A, idA_A3, u, y, idInner1_Inner1, v, z, x, w) 
	= (idInner1_A_1, idA_A3_2, u_1, y_1, idInner1_Inner1_1, v_1, z_1, x_1, w_1);
	

	tel

	until true restart POINTInner1_A



	state A_A1_IDL:

	 var 	x_2:int;
	let

		
	(x_2) 
	= A_A1_du(x_1);

		


	(idInner1_A, idA_A3, u, y, idInner1_Inner1, v, z, x, w) 
	= (idInner1_A_1, idA_A3_1, u_1, y_1, idInner1_Inner1_1, v_1, z_1, x_2, w_1);
	

	tel

	until true restart POINTInner1_A



	state A_A2_IDL:

	 var 	x_2:int;
	let

		
	(x_2) 
	= A_A2_du(x_1);

		


	(idInner1_A, idA_A3, u, y, idInner1_Inner1, v, z, x, w) 
	= (idInner1_A_1, idA_A3_1, u_1, y_1, idInner1_Inner1_1, v_1, z_1, x_2, w_1);
	

	tel

	until true restart POINTInner1_A



tel


--***************************************************State :Inner1_Inner1 Automaton***************************************************

node Inner1_Inner1_node(idInner1_Inner1_1:int;
	idA_A3_1:int;
	idInner1_A_1:int;
	x_1:int;
	u_1:int;
	E:bool;
	v_1:int;
	w_1:int;
	y_1:int;
	z_1:int)

returns (idInner1_Inner1:int;
	idA_A3:int;
	idInner1_A:int;
	x:int;
	u:int;
	v:int;
	w:int;
	y:int;
	z:int);


let

	 automaton inner1_inner1

	state POINTInner1_Inner1:
	unless (idInner1_Inner1_1=0) restart POINT__TO__INNER1_A_1



	unless (idInner1_Inner1_1=436) restart INNER1_A_IDL

	let

		(idInner1_Inner1, idA_A3, idInner1_A, x, u, v, w, y, z) 
	= (idInner1_Inner1_1, idA_A3_1, idInner1_A_1, x_1, u_1, v_1, w_1, y_1, z_1);
	

	tel



	state POINT__TO__INNER1_A_1:

	 var 	idInner1_Inner1_2:int;
	idA_A3_2:int;
	idInner1_A_2:int;
	x_2:int;
	let

		-- transition trace :
	--POINT__To__Inner1_A_1
		(idInner1_A_2, idInner1_Inner1_2, idA_A3_2, x_2) 
	= Inner1_A_en(idInner1_A_1, idInner1_Inner1_1, idA_A3_1, x_1, false);
		

	(idInner1_Inner1, idA_A3, idInner1_A, x) 
	=  (idInner1_Inner1_2, idA_A3_2, idInner1_A_2, x_2);

	--add unused variables
	(u, v, w, y, z) 
	= (u_1, v_1, w_1, y_1, z_1);
	

	tel

	until true restart POINTInner1_Inner1



	state INNER1_A_IDL:

	 var 	idInner1_Inner1_2:int;
	idA_A3_2:int;
	idInner1_A_2:int;
	x_2:int;
	u_2, u_3:int;
	v_2:int;
	w_2:int;
	y_2:int;
	z_2:int;
	let

		
	(u_2) 
	= Inner1_A_du(u_1);

		

	(idInner1_A_2, idA_A3_2, u_3, y_2, idInner1_Inner1_2, v_2, z_2, x_2, w_2) 
	= Inner1_A_node(idInner1_A_1, idA_A3_1, E, u_2, y_1, idInner1_Inner1_1, v_1, z_1, x_1, w_1);

		


	(idInner1_Inner1, idA_A3, idInner1_A, x, u, v, w, y, z) 
	= (idInner1_Inner1_2, idA_A3_2, idInner1_A_2, x_2, u_3, v_2, w_2, y_2, z_2);
	

	tel

	until true restart POINTInner1_Inner1



tel


--***************************************************State :Inner1_Inner1 Automaton***************************************************

node Inner1_Inner1(E:bool)

returns (u:int;
	v:int;
	w:int;
	z:int;
	y:int;
	x:int);


var u_1: int;

	v_1: int;

	w_1: int;

	z_1: int;

	y_1: int;

	x_1: int;

	idInner1_Inner1, idInner1_Inner1_1: int;

	idInner1_A, idInner1_A_1: int;

	idA_A3, idA_A3_1: int;

	let

	u_1 = 0 -> pre u;

	v_1 = 0 -> pre v;

	w_1 = 0 -> pre w;

	z_1 = 0 -> pre z;

	y_1 = 0 -> pre y;

	x_1 = 0 -> pre x;

	idInner1_Inner1_1 = 0 -> pre idInner1_Inner1;

	idInner1_A_1 = 0 -> pre idInner1_A;

	idA_A3_1 = 0 -> pre idA_A3;

	



	(idInner1_Inner1, idA_A3, idInner1_A, x, u, v, w, y, z)
	 = 

	 if E then Inner1_Inner1_node(idInner1_Inner1_1, idA_A3_1, idInner1_A_1, x_1, u_1, E, v_1, w_1, y_1, z_1)

	 else (idInner1_Inner1_1, idA_A3_1, idInner1_A_1, x_1, u_1, v_1, w_1, y_1, z_1);

	


--unused outputs
	

tel



node Inner1 (E_1_1 : real)
returns (u_1_1 : int;
	v_2_1 : int;
	w_3_1 : int;
	z_4_1 : int;
	y_5_1 : int;
	x_6_1 : int); 
var
	Inner1_1_1 : int; Inner1_2_1 : int; Inner1_3_1 : int; Inner1_4_1 : int; Inner1_5_1 : int; Inner1_6_1 : int;
	E_1_1_event: bool;
let 
	E_1_1_event = false -> ((pre(E_1_1) > 0.0 and E_1_1 <= 0.0) or (pre(E_1_1) <= 0.0 and E_1_1 > 0.0));
	(Inner1_1_1, Inner1_2_1, Inner1_3_1, Inner1_4_1, Inner1_5_1, Inner1_6_1) =  Inner1_Inner1(E_1_1_event);
	u_1_1 = Inner1_1_1;
	v_2_1 = Inner1_2_1;
	w_3_1 = Inner1_3_1;
	z_4_1 = Inner1_4_1;
	y_5_1 = Inner1_5_1;
	x_6_1 = Inner1_6_1;
tel

