-- This file has been generated by cocoSim


-- System nodes





node POINT__To__A_A2_1_Condition_Action(v_1:int)

returns (v:int);


var 	v_2:int;


let



	v_2 
	=  v_1 +1000000;
	

	(v) 
	= (v_2);
	

tel






node Inner2_A__To__A_A1_2_Condition_Action(x_1:int)

returns (x:int);


var 	x_2:int;


let



	x_2 
	=  x_1 +1000000;
	

	(x) 
	= (x_2);
	

tel






node A_A1__To__Inner2_A_1_Condition_Action(z_1:int)

returns (z:int);


var 	z_2:int;


let



	z_2 
	=  z_1  + 1;
	

	(z) 
	= (z_2);
	

tel






node Inner2_A__To__Inner2_A_1_Condition_Action(w_1:int)

returns (w:int);


var 	w_2:int;


let



	w_2 
	=  w_1  + 1;
	

	(w) 
	= (w_2);
	

tel






-- Entry action for state :A_A2
node A_A2_en(idInner2_A_1:int;
	v_1:int;
	isInner:bool)

returns (idInner2_A:int;
	v:int);


var 	idInner2_A_2:int;
	v_2:int;


let



	-- set state as active 
	idInner2_A_2 
	= 164;
	

	v_2 
	= if (not isInner) then  v_1 +10000
	 else v_1;
	

	(idInner2_A, v) 
	= (idInner2_A_2, v_2);
	

tel





-- Exit action for state :A_A2
node A_A2_ex(v_1:int;
	idInner2_A_1:int;
	isInner:bool)

returns (v:int;
	idInner2_A:int);


var 	v_2:int;
	idInner2_A_2:int;


let



	v_2 
	= if (not isInner) then  v_1 +100
	 else v_1;
	

	-- set state as inactive 
	idInner2_A_2
	 = if (not isInner) then 0 else idInner2_A_1;


	(v, idInner2_A) 
	= (v_2, idInner2_A_2);
	

tel





--During action for state :A_A2
node A_A2_du(v_1:int)

returns (v:int);


var 	v_2:int;


let



	v_2 
	=  v_1 +1;
	

	(v) 
	= (v_2);
	

tel






-- Entry action for state :A_A1
node A_A1_en(idInner2_A_1:int;
	x_1:int;
	isInner:bool)

returns (idInner2_A:int;
	x:int);


var 	idInner2_A_2:int;
	x_2:int;


let



	-- set state as active 
	idInner2_A_2 
	= 163;
	

	x_2 
	= if (not isInner) then  x_1 +10000
	 else x_1;
	

	(idInner2_A, x) 
	= (idInner2_A_2, x_2);
	

tel





-- Exit action for state :A_A1
node A_A1_ex(x_1:int;
	idInner2_A_1:int;
	isInner:bool)

returns (x:int;
	idInner2_A:int);


var 	x_2:int;
	idInner2_A_2:int;


let



	x_2 
	= if (not isInner) then  x_1 +100
	 else x_1;
	

	-- set state as inactive 
	idInner2_A_2
	 = if (not isInner) then 0 else idInner2_A_1;


	(x, idInner2_A) 
	= (x_2, idInner2_A_2);
	

tel





--During action for state :A_A1
node A_A1_du(x_1:int)

returns (x:int);


var 	x_2:int;


let



	x_2 
	=  x_1 +1;
	

	(x) 
	= (x_2);
	

tel






-- Entry action for state :Inner2_A
node Inner2_A_en(idInner2_A_1:int;
	idInner2_Inner2_1:int;
	u_1:int;
	v_1:int;
	x_1:int;
	isInner:bool)

returns (idInner2_A:int;
	idInner2_Inner2:int;
	u:int;
	v:int;
	x:int);


var 	idInner2_A_2, idInner2_A_3, idInner2_A_4, idInner2_A_5, idInner2_A_6:int;
	idInner2_Inner2_2, idInner2_Inner2_3, idInner2_Inner2_4:int;
	u_2, u_3, u_4:int;
	v_2, v_3, v_4, v_5, v_6:int;
	x_2, x_3:int;


let



	-- set state as active 
	idInner2_Inner2_2 
	= 162;
	

	u_2 
	= if (not isInner) then  u_1 +10000
	 else u_1;
	

	
-- transition trace :
	--POINT__To__A_A2_1
		-- condition Action : v+=1000000;
		
		(v_2) 
	= POINT__To__A_A2_1_Condition_Action(v_1);
		

		(idInner2_A_2, v_3) 
	= A_A2_en(idInner2_A_1, v_2, false);
		

	(idInner2_A_3, idInner2_Inner2_3, u_3, v_4) 
	= 

	if ( idInner2_A_1 = 0) then

	 (idInner2_A_2, idInner2_Inner2_2, u_2, v_3)

	 else(idInner2_A_1, idInner2_Inner2_2, u_2, v_1);

	

	(idInner2_A_4, x_2) 
	= 
	if ( idInner2_A_1 = 163) then
	A_A1_en(idInner2_A_1, x_1, false)
	 else (idInner2_A_1, x_1);

	

	(idInner2_A_5, v_5) 
	= 
	if ( idInner2_A_1 = 164) then
	A_A2_en(idInner2_A_1, v_1, false)
	 else (idInner2_A_1, v_1);

	

	(idInner2_A_6, idInner2_Inner2_4, u_4, v_6, x_3) 
	= 
		 if ( idInner2_A_1 = 0) then 
		(idInner2_A_3, idInner2_Inner2_3, u_3, v_4, x_1)
		 else
		 if ( idInner2_A_1 = 163) then 
		(idInner2_A_4, idInner2_Inner2_3, u_3, v_4, x_2)
		 else
		 if ( idInner2_A_1 = 164) then 
		(idInner2_A_5, idInner2_Inner2_3, u_3, v_5, x_2)
		 else (idInner2_A_1, idInner2_Inner2_2, u_2, v_1, x_1);


	(idInner2_A, idInner2_Inner2, u, v, x) 
	= (idInner2_A_6, idInner2_Inner2_4, u_4, v_6, x_3);
	

tel





-- Exit action for state :Inner2_A
node Inner2_A_ex(x_1:int;
	idInner2_A_1:int;
	v_1:int;
	u_1:int;
	idInner2_Inner2_1:int;
	isInner:bool)

returns (x:int;
	idInner2_A:int;
	v:int;
	u:int;
	idInner2_Inner2:int);


var 	x_2, x_3:int;
	idInner2_A_2, idInner2_A_3, idInner2_A_4, idInner2_A_5:int;
	v_2, v_3:int;
	u_2:int;
	idInner2_Inner2_2:int;


let



	
	(x_2, idInner2_A_2) 
	= 
	if ( idInner2_A_1 = 163) then
	A_A1_ex(x_1, idInner2_A_1, false)
	 else (x_1, idInner2_A_1);

	

	(v_2, idInner2_A_3) 
	= 
	if ( idInner2_A_1 = 164) then
	A_A2_ex(v_1, idInner2_A_1, false)
	 else (v_1, idInner2_A_1);

	

	(x_3, idInner2_A_4, v_3) 
	= 
		 if ( idInner2_A_1 = 163) then 
		(x_2, idInner2_A_2, v_1)
		 else
		 if ( idInner2_A_1 = 164) then 
		(x_2, idInner2_A_3, v_2)
		 else (x_1, idInner2_A_1, v_1);


	u_2 
	= if (not isInner) then  u_1 +100
	 else u_1;
	

	-- set state as inactive 
	idInner2_Inner2_2
	 = if (not isInner) then 0 else idInner2_Inner2_1;

	idInner2_A_5 
	= 0;
	

	(x, idInner2_A, v, u, idInner2_Inner2) 
	= (x_3, idInner2_A_5, v_3, u_2, idInner2_Inner2_2);
	

tel





--During action for state :Inner2_A
node Inner2_A_du(u_1:int)

returns (u:int);


var 	u_2:int;


let



	u_2 
	=  u_1 +1;
	

	(u) 
	= (u_2);
	

tel


--***************************************************State :Inner2_A Automaton***************************************************

node Inner2_A_node(idInner2_A_1:int;
	v_1:int;
	E:bool;
	u_1:int;
	w_1:int;
	idInner2_Inner2_1:int;
	x_1:int;
	z_1:int)

returns (idInner2_A:int;
	v:int;
	w:int;
	idInner2_Inner2:int;
	u:int;
	x:int;
	z:int);


let

	 automaton inner2_a

	state POINTInner2_A:
	unless (idInner2_A_1=0) restart POINT__TO__A_A2_1



	unless true and E and (  u_1  mod 3=0 ) restart INNER2_A__TO__INNER2_A_1



	unless true and E and (  u_1  mod 3=1 ) restart INNER2_A__TO__A_A1_2



	unless (idInner2_A_1=163) and E and (  u_1  mod 3=2 ) restart A_A1__TO__INNER2_A_1



	unless (idInner2_A_1=163) restart A_A1_IDL

	unless (idInner2_A_1=164) restart A_A2_IDL

	let

		(idInner2_A, v, w, idInner2_Inner2, u, x, z) 
	= (idInner2_A_1, v_1, w_1, idInner2_Inner2_1, u_1, x_1, z_1);
	

	tel



	state POINT__TO__A_A2_1:

	 var 	idInner2_A_2:int;
	v_2, v_3:int;
	let

		-- transition trace :
	--POINT__To__A_A2_1
		-- condition Action : v+=1000000;
		
		(v_2) 
	= POINT__To__A_A2_1_Condition_Action(v_1);
		

		(idInner2_A_2, v_3) 
	= A_A2_en(idInner2_A_1, v_2, false);
		

	(idInner2_A, v) 
	=  (idInner2_A_2, v_3);

	--add unused variables
	(idInner2_Inner2, u, w, x, z) 
	= (idInner2_Inner2_1, u_1, w_1, x_1, z_1);
	

	tel

	until true restart POINTInner2_A



	state INNER2_A__TO__INNER2_A_1:

	 var 	idInner2_A_2, idInner2_A_3, idInner2_A_4:int;
	v_2, v_3:int;
	w_2:int;
	idInner2_Inner2_2, idInner2_Inner2_3:int;
	u_2, u_3:int;
	x_2, x_3:int;
	let

		-- transition trace :
	--Inner2_A__To__Inner2_A_1
		-- condition Action : w++;
		
		(w_2) 
	= Inner2_A__To__Inner2_A_1_Condition_Action(w_1);
		

		(x_2, idInner2_A_2, v_2, u_2, idInner2_Inner2_2) 
	= Inner2_A_ex(x_1, idInner2_A_1, v_1, u_1, idInner2_Inner2_1, true);
		

		idInner2_A_3 
	= 0;
	
		(idInner2_A_4, idInner2_Inner2_3, u_3, v_3, x_3) 
	= Inner2_A_en(idInner2_A_3, idInner2_Inner2_2, u_2, v_2, x_2, true);
		

	(idInner2_A, v, w, idInner2_Inner2, u, x) 
	=  (idInner2_A_4, v_3, w_2, idInner2_Inner2_3, u_3, x_3);

	--add unused variables
	(z) 
	= (z_1);
	

	tel

	until true restart POINTInner2_A



	state INNER2_A__TO__A_A1_2:

	 var 	idInner2_A_2, idInner2_A_3:int;
	v_2:int;
	idInner2_Inner2_2:int;
	u_2:int;
	x_2, x_3, x_4:int;
	let

		-- transition trace :
	--Inner2_A__To__A_A1_2
		-- condition Action : x+=1000000;
		
		(x_2) 
	= Inner2_A__To__A_A1_2_Condition_Action(x_1);
		

		(x_3, idInner2_A_2, v_2, u_2, idInner2_Inner2_2) 
	= Inner2_A_ex(x_2, idInner2_A_1, v_1, u_1, idInner2_Inner2_1, true);
		

		(idInner2_A_3, x_4) 
	= A_A1_en(idInner2_A_2, x_3, false);
		

	(idInner2_A, v, w, idInner2_Inner2, u, x) 
	=  (idInner2_A_3, v_2, w_1, idInner2_Inner2_2, u_2, x_4);

	--add unused variables
	(z) 
	= (z_1);
	

	tel

	until true restart POINTInner2_A



	state A_A1__TO__INNER2_A_1:

	 var 	idInner2_A_2, idInner2_A_3, idInner2_A_4:int;
	v_2:int;
	idInner2_Inner2_2:int;
	u_2:int;
	x_2, x_3:int;
	z_2:int;
	let

		-- transition trace :
	--A_A1__To__Inner2_A_1
		-- condition Action : z++;
		
		(z_2) 
	= A_A1__To__Inner2_A_1_Condition_Action(z_1);
		

		(x_2, idInner2_A_2) 
	= A_A1_ex(x_1, idInner2_A_1, false);
		

		idInner2_A_3 
	= 0;
	
		(idInner2_A_4, idInner2_Inner2_2, u_2, v_2, x_3) 
	= Inner2_A_en(idInner2_A_3, idInner2_Inner2_1, u_1, v_1, x_2, true);
		

	(idInner2_A, v, w, idInner2_Inner2, u, x, z) 
	=  (idInner2_A_4, v_2, w_1, idInner2_Inner2_2, u_2, x_3, z_2);


	tel

	until true restart POINTInner2_A



	state A_A1_IDL:

	 var 	x_2:int;
	let

		
	(x_2) 
	= A_A1_du(x_1);

		


	(idInner2_A, v, w, idInner2_Inner2, u, x, z) 
	= (idInner2_A_1, v_1, w_1, idInner2_Inner2_1, u_1, x_2, z_1);
	

	tel

	until true restart POINTInner2_A



	state A_A2_IDL:

	 var 	v_2:int;
	let

		
	(v_2) 
	= A_A2_du(v_1);

		


	(idInner2_A, v, w, idInner2_Inner2, u, x, z) 
	= (idInner2_A_1, v_2, w_1, idInner2_Inner2_1, u_1, x_1, z_1);
	

	tel

	until true restart POINTInner2_A



tel


--***************************************************State :Inner2_Inner2 Automaton***************************************************

node Inner2_Inner2_node(idInner2_Inner2_1:int;
	idInner2_A_1:int;
	u_1:int;
	v_1:int;
	x_1:int;
	E:bool;
	w_1:int;
	z_1:int)

returns (idInner2_Inner2:int;
	idInner2_A:int;
	u:int;
	v:int;
	x:int;
	w:int;
	z:int);


let

	 automaton inner2_inner2

	state POINTInner2_Inner2:
	unless (idInner2_Inner2_1=0) restart POINT__TO__INNER2_A_1



	unless (idInner2_Inner2_1=162) restart INNER2_A_IDL

	let

		(idInner2_Inner2, idInner2_A, u, v, x, w, z) 
	= (idInner2_Inner2_1, idInner2_A_1, u_1, v_1, x_1, w_1, z_1);
	

	tel



	state POINT__TO__INNER2_A_1:

	 var 	idInner2_Inner2_2:int;
	idInner2_A_2:int;
	u_2:int;
	v_2:int;
	x_2:int;
	let

		-- transition trace :
	--POINT__To__Inner2_A_1
		(idInner2_A_2, idInner2_Inner2_2, u_2, v_2, x_2) 
	= Inner2_A_en(idInner2_A_1, idInner2_Inner2_1, u_1, v_1, x_1, false);
		

	(idInner2_Inner2, idInner2_A, u, v, x) 
	=  (idInner2_Inner2_2, idInner2_A_2, u_2, v_2, x_2);

	--add unused variables
	(w, z) 
	= (w_1, z_1);
	

	tel

	until true restart POINTInner2_Inner2



	state INNER2_A_IDL:

	 var 	idInner2_Inner2_2:int;
	idInner2_A_2:int;
	u_2, u_3:int;
	v_2:int;
	x_2:int;
	w_2:int;
	z_2:int;
	let

		
	(u_2) 
	= Inner2_A_du(u_1);

		

	(idInner2_A_2, v_2, w_2, idInner2_Inner2_2, u_3, x_2, z_2) 
	= Inner2_A_node(idInner2_A_1, v_1, E, u_2, w_1, idInner2_Inner2_1, x_1, z_1);

		


	(idInner2_Inner2, idInner2_A, u, v, x, w, z) 
	= (idInner2_Inner2_2, idInner2_A_2, u_3, v_2, x_2, w_2, z_2);
	

	tel

	until true restart POINTInner2_Inner2



tel


--***************************************************State :Inner2_Inner2 Automaton***************************************************

node Inner2_Inner2(E:bool)

returns (u:int;
	v:int;
	w:int;
	z:int;
	x:int);


var u_1: int;

	v_1: int;

	w_1: int;

	z_1: int;

	x_1: int;

	idInner2_Inner2, idInner2_Inner2_1: int;

	idInner2_A, idInner2_A_1: int;

	let

	u_1 = 0 -> pre u;

	v_1 = 0 -> pre v;

	w_1 = 0 -> pre w;

	z_1 = 0 -> pre z;

	x_1 = 0 -> pre x;

	idInner2_Inner2_1 = 0 -> pre idInner2_Inner2;

	idInner2_A_1 = 0 -> pre idInner2_A;

	



	(idInner2_Inner2, idInner2_A, u, v, x, w, z)
	 = 

	 if E then Inner2_Inner2_node(idInner2_Inner2_1, idInner2_A_1, u_1, v_1, x_1, E, w_1, z_1)

	 else (idInner2_Inner2_1, idInner2_A_1, u_1, v_1, x_1, w_1, z_1);

	


--unused outputs
	

tel



node Inner2 (E_1_1 : real)
returns (u_1_1 : int;
	v_2_1 : int;
	w_3_1 : int;
	z_4_1 : int;
	x_5_1 : int); 
var
	Inner2_1_1 : int; Inner2_2_1 : int; Inner2_3_1 : int; Inner2_4_1 : int; Inner2_5_1 : int;
	E_1_1_event: bool;
let 
	E_1_1_event = false -> ((pre(E_1_1) > 0.0 and E_1_1 <= 0.0) or (pre(E_1_1) <= 0.0 and E_1_1 > 0.0));
	(Inner2_1_1, Inner2_2_1, Inner2_3_1, Inner2_4_1, Inner2_5_1) =  Inner2_Inner2(E_1_1_event);
	u_1_1 = Inner2_1_1;
	v_2_1 = Inner2_2_1;
	w_3_1 = Inner2_3_1;
	z_4_1 = Inner2_4_1;
	x_5_1 = Inner2_5_1;
tel

