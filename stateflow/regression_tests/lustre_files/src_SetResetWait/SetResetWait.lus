-- This file has been generated by cocoSim


-- System nodes










-- Entry action for state :SetResetWait_Wait
node SetResetWait_Wait_en(idSetResetWait_SetResetWait_1:int;
	s_1:real;
	isInner:bool)

returns (idSetResetWait_SetResetWait:int;
	s:real);


var 	idSetResetWait_SetResetWait_2:int;
	s_2:real;


let



	-- set state as active 
	idSetResetWait_SetResetWait_2 
	= 270;
	

	s_2 
	= if (not isInner) then 2.
	 else s_1;
	

	(idSetResetWait_SetResetWait, s) 
	= (idSetResetWait_SetResetWait_2, s_2);
	

tel





-- Exit action for state :SetResetWait_Wait
node SetResetWait_Wait_ex(idSetResetWait_SetResetWait_1:int;
	isInner:bool)

returns (idSetResetWait_SetResetWait:int);


var 	idSetResetWait_SetResetWait_2:int;


let



	-- set state as inactive 
	idSetResetWait_SetResetWait_2
	 = if (not isInner) then 0 else idSetResetWait_SetResetWait_1;


	(idSetResetWait_SetResetWait) 
	= (idSetResetWait_SetResetWait_2);
	

tel






-- Entry action for state :SetResetWait_Off
node SetResetWait_Off_en(idSetResetWait_SetResetWait_1:int;
	s_1:real;
	isInner:bool)

returns (idSetResetWait_SetResetWait:int;
	s:real);


var 	idSetResetWait_SetResetWait_2:int;
	s_2:real;


let



	-- set state as active 
	idSetResetWait_SetResetWait_2 
	= 269;
	

	s_2 
	= if (not isInner) then 3.
	 else s_1;
	

	(idSetResetWait_SetResetWait, s) 
	= (idSetResetWait_SetResetWait_2, s_2);
	

tel





-- Exit action for state :SetResetWait_Off
node SetResetWait_Off_ex(idSetResetWait_SetResetWait_1:int;
	isInner:bool)

returns (idSetResetWait_SetResetWait:int);


var 	idSetResetWait_SetResetWait_2:int;


let



	-- set state as inactive 
	idSetResetWait_SetResetWait_2
	 = if (not isInner) then 0 else idSetResetWait_SetResetWait_1;


	(idSetResetWait_SetResetWait) 
	= (idSetResetWait_SetResetWait_2);
	

tel






-- Entry action for state :SetResetWait_On
node SetResetWait_On_en(idSetResetWait_SetResetWait_1:int;
	s_1:real;
	isInner:bool)

returns (idSetResetWait_SetResetWait:int;
	s:real);


var 	idSetResetWait_SetResetWait_2:int;
	s_2:real;


let



	-- set state as active 
	idSetResetWait_SetResetWait_2 
	= 268;
	

	s_2 
	= if (not isInner) then 1.
	 else s_1;
	

	(idSetResetWait_SetResetWait, s) 
	= (idSetResetWait_SetResetWait_2, s_2);
	

tel





-- Exit action for state :SetResetWait_On
node SetResetWait_On_ex(idSetResetWait_SetResetWait_1:int;
	isInner:bool)

returns (idSetResetWait_SetResetWait:int);


var 	idSetResetWait_SetResetWait_2:int;


let



	-- set state as inactive 
	idSetResetWait_SetResetWait_2
	 = if (not isInner) then 0 else idSetResetWait_SetResetWait_1;


	(idSetResetWait_SetResetWait) 
	= (idSetResetWait_SetResetWait_2);
	

tel


--***************************************************State :SetResetWait_SetResetWait Automaton***************************************************

node SetResetWait_SetResetWait_node(idSetResetWait_SetResetWait_1:int;
	s_1:real;
	Suspend:bool;
	Reset:bool;
	Set:bool;
	Clear:bool)

returns (idSetResetWait_SetResetWait:int;
	s:real);


let

	 automaton setresetwait_setresetwait

	state POINTSetResetWait_SetResetWait:
	unless (idSetResetWait_SetResetWait_1=0) restart POINT__TO__SETRESETWAIT_OFF_1



	unless (idSetResetWait_SetResetWait_1=268) and Suspend restart SETRESETWAIT_ON__TO__SETRESETWAIT_WAIT_1



	unless (idSetResetWait_SetResetWait_1=268) and Reset restart SETRESETWAIT_ON__TO__SETRESETWAIT_OFF_2



	unless (idSetResetWait_SetResetWait_1=269) and Set restart SETRESETWAIT_OFF__TO__SETRESETWAIT_ON_1



	unless (idSetResetWait_SetResetWait_1=269) and Suspend restart SETRESETWAIT_OFF__TO__SETRESETWAIT_WAIT_2



	unless (idSetResetWait_SetResetWait_1=270) and Clear restart SETRESETWAIT_WAIT__TO__SETRESETWAIT_OFF_1



	unless (idSetResetWait_SetResetWait_1=268) restart SETRESETWAIT_ON_IDL

	unless (idSetResetWait_SetResetWait_1=269) restart SETRESETWAIT_OFF_IDL

	unless (idSetResetWait_SetResetWait_1=270) restart SETRESETWAIT_WAIT_IDL

	let

		(idSetResetWait_SetResetWait, s) 
	= (idSetResetWait_SetResetWait_1, s_1);
	

	tel



	state POINT__TO__SETRESETWAIT_OFF_1:

	 var 	idSetResetWait_SetResetWait_2:int;
	s_2:real;
	let

		-- transition trace :
	--POINT__To__SetResetWait_Off_1
		(idSetResetWait_SetResetWait_2, s_2) 
	= SetResetWait_Off_en(idSetResetWait_SetResetWait_1, s_1, false);
		

	(idSetResetWait_SetResetWait, s) 
	=  (idSetResetWait_SetResetWait_2, s_2);


	tel

	until true restart POINTSetResetWait_SetResetWait



	state SETRESETWAIT_ON__TO__SETRESETWAIT_WAIT_1:

	 var 	idSetResetWait_SetResetWait_2, idSetResetWait_SetResetWait_3:int;
	s_2:real;
	let

		-- transition trace :
	--SetResetWait_On__To__SetResetWait_Wait_1
		(idSetResetWait_SetResetWait_2) 
	= SetResetWait_On_ex(idSetResetWait_SetResetWait_1, false);
		

		(idSetResetWait_SetResetWait_3, s_2) 
	= SetResetWait_Wait_en(idSetResetWait_SetResetWait_2, s_1, false);
		

	(idSetResetWait_SetResetWait, s) 
	=  (idSetResetWait_SetResetWait_3, s_2);


	tel

	until true restart POINTSetResetWait_SetResetWait



	state SETRESETWAIT_ON__TO__SETRESETWAIT_OFF_2:

	 var 	idSetResetWait_SetResetWait_2, idSetResetWait_SetResetWait_3:int;
	s_2:real;
	let

		-- transition trace :
	--SetResetWait_On__To__SetResetWait_Off_2
		(idSetResetWait_SetResetWait_2) 
	= SetResetWait_On_ex(idSetResetWait_SetResetWait_1, false);
		

		(idSetResetWait_SetResetWait_3, s_2) 
	= SetResetWait_Off_en(idSetResetWait_SetResetWait_2, s_1, false);
		

	(idSetResetWait_SetResetWait, s) 
	=  (idSetResetWait_SetResetWait_3, s_2);


	tel

	until true restart POINTSetResetWait_SetResetWait



	state SETRESETWAIT_OFF__TO__SETRESETWAIT_ON_1:

	 var 	idSetResetWait_SetResetWait_2, idSetResetWait_SetResetWait_3:int;
	s_2:real;
	let

		-- transition trace :
	--SetResetWait_Off__To__SetResetWait_On_1
		(idSetResetWait_SetResetWait_2) 
	= SetResetWait_Off_ex(idSetResetWait_SetResetWait_1, false);
		

		(idSetResetWait_SetResetWait_3, s_2) 
	= SetResetWait_On_en(idSetResetWait_SetResetWait_2, s_1, false);
		

	(idSetResetWait_SetResetWait, s) 
	=  (idSetResetWait_SetResetWait_3, s_2);


	tel

	until true restart POINTSetResetWait_SetResetWait



	state SETRESETWAIT_OFF__TO__SETRESETWAIT_WAIT_2:

	 var 	idSetResetWait_SetResetWait_2, idSetResetWait_SetResetWait_3:int;
	s_2:real;
	let

		-- transition trace :
	--SetResetWait_Off__To__SetResetWait_Wait_2
		(idSetResetWait_SetResetWait_2) 
	= SetResetWait_Off_ex(idSetResetWait_SetResetWait_1, false);
		

		(idSetResetWait_SetResetWait_3, s_2) 
	= SetResetWait_Wait_en(idSetResetWait_SetResetWait_2, s_1, false);
		

	(idSetResetWait_SetResetWait, s) 
	=  (idSetResetWait_SetResetWait_3, s_2);


	tel

	until true restart POINTSetResetWait_SetResetWait



	state SETRESETWAIT_WAIT__TO__SETRESETWAIT_OFF_1:

	 var 	idSetResetWait_SetResetWait_2, idSetResetWait_SetResetWait_3:int;
	s_2:real;
	let

		-- transition trace :
	--SetResetWait_Wait__To__SetResetWait_Off_1
		(idSetResetWait_SetResetWait_2) 
	= SetResetWait_Wait_ex(idSetResetWait_SetResetWait_1, false);
		

		(idSetResetWait_SetResetWait_3, s_2) 
	= SetResetWait_Off_en(idSetResetWait_SetResetWait_2, s_1, false);
		

	(idSetResetWait_SetResetWait, s) 
	=  (idSetResetWait_SetResetWait_3, s_2);


	tel

	until true restart POINTSetResetWait_SetResetWait



	state SETRESETWAIT_ON_IDL:

	 	let

		

	(idSetResetWait_SetResetWait, s) 
	= (idSetResetWait_SetResetWait_1, s_1);
	

	tel

	until true restart POINTSetResetWait_SetResetWait



	state SETRESETWAIT_OFF_IDL:

	 	let

		

	(idSetResetWait_SetResetWait, s) 
	= (idSetResetWait_SetResetWait_1, s_1);
	

	tel

	until true restart POINTSetResetWait_SetResetWait



	state SETRESETWAIT_WAIT_IDL:

	 	let

		

	(idSetResetWait_SetResetWait, s) 
	= (idSetResetWait_SetResetWait_1, s_1);
	

	tel

	until true restart POINTSetResetWait_SetResetWait



tel


--***************************************************State :SetResetWait_SetResetWait Automaton***************************************************

node SetResetWait_SetResetWait(Clear:bool;
	Reset:bool;
	Suspend:bool;
	Set:bool)

returns (s:real);


var s_1: real;

	idSetResetWait_SetResetWait, idSetResetWait_SetResetWait_1: int;

		idSetResetWait_SetResetWait_2, idSetResetWait_SetResetWait_3, idSetResetWait_SetResetWait_4:int;
	s_2, s_3, s_4:real;
let

	s_1 = 0.0 -> pre s;

	idSetResetWait_SetResetWait_1 = 0 -> pre idSetResetWait_SetResetWait;

	



	(idSetResetWait_SetResetWait_2, s_2)
	 = 

	 if Clear then SetResetWait_SetResetWait_node(idSetResetWait_SetResetWait_1, s_1, false, false, false, Clear)

	 else (idSetResetWait_SetResetWait_1, s_1);

	



	(idSetResetWait_SetResetWait_3, s_3)
	 = 

	 if Reset then SetResetWait_SetResetWait_node(idSetResetWait_SetResetWait_2, s_2, false, Reset, false, false)

	 else (idSetResetWait_SetResetWait_2, s_2);

	



	(idSetResetWait_SetResetWait_4, s_4)
	 = 

	 if Suspend then SetResetWait_SetResetWait_node(idSetResetWait_SetResetWait_3, s_3, Suspend, false, false, false)

	 else (idSetResetWait_SetResetWait_3, s_3);

	



	(idSetResetWait_SetResetWait, s)
	 = 

	 if Set then SetResetWait_SetResetWait_node(idSetResetWait_SetResetWait_4, s_4, false, false, Set, false)

	 else (idSetResetWait_SetResetWait_4, s_4);

	


--unused outputs
	

tel



node SetResetWait (clear_1_1 : real; reset_1_1 : real; set_1_1 : real; suspend_1_1 : real)
returns (s_1_1 : real); 
var
	Mux_1_1 : real; Mux_1_2 : real; Mux_1_3 : real; Mux_1_4 : real;
	SetResetWait_1_1 : real;
	Mux_1_1_event: bool;
	Mux_1_2_event: bool;
	Mux_1_3_event: bool;
	Mux_1_4_event: bool;
let 
	Mux_1_1 = clear_1_1 ;
	Mux_1_2 = reset_1_1 ;
	Mux_1_3 = set_1_1 ;
	Mux_1_4 = suspend_1_1 ;
	Mux_1_1_event = false -> ((pre(Mux_1_1) > 0.0 and Mux_1_1 <= 0.0) or (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0));
	Mux_1_2_event = false -> ((pre(Mux_1_2) > 0.0 and Mux_1_2 <= 0.0) or (pre(Mux_1_2) <= 0.0 and Mux_1_2 > 0.0));
	Mux_1_3_event = false -> ((pre(Mux_1_3) > 0.0 and Mux_1_3 <= 0.0) or (pre(Mux_1_3) <= 0.0 and Mux_1_3 > 0.0));
	Mux_1_4_event = false -> ((pre(Mux_1_4) > 0.0 and Mux_1_4 <= 0.0) or (pre(Mux_1_4) <= 0.0 and Mux_1_4 > 0.0));
	SetResetWait_1_1 =  SetResetWait_SetResetWait(Mux_1_1_event, Mux_1_2_event, Mux_1_3_event, Mux_1_4_event);
	s_1_1 = SetResetWait_1_1;
tel

