-- This file has been generated by cocoSim

-- External Stateflow functions
node min(x,y:int) 
 returns (z:int) 
let 
	 z=if x<y then x else y; 
tel

-- Properties nodes
node DockingApproachExample_Ext_prop1 (GroundTrack_OrbitalPosition_1_1 : int; GroundTrack_OrbitalVelocity_1_1 : int; dockVisibility_status_1_1 : int; opticsAvailability_status_1_1 : bool; sunlight_status_1_1 : bool; GPS_satelliteVisibility_status_1_1 : int; GPS_receiverAvailability_status_1_1 : bool; StarPlanetTracker_planetVisibility_1_1 : int; StarPlanetTracker_starVisibility_1_1 : int; InertialNavigation_time_1_1 : bool; GroundTrack_Time_1_1 : int; RealTimeClock_time_1_1 : int; StageTransition_1_1 : int)
returns (prop1_1_1 : bool);
var
	CompareToConstant_1_1 : bool;
	LogicalOperator_1_1 : bool;
	LogicalOperator1_1_1 : bool;
	LatchCaptureComplete_1_1 : bool;
	LatchCapture_timer_1_1 : int;
	DockingApproachExample_Ext_CaptureApproachComplete_1_1 : bool;
	DockingApproachExample_Ext_DockingApproachComplete_1_1 : bool;
	DockingApproachExample_Ext_AttemptingToDock_1_1 : bool;
	DockingApproachExample_Ext_DockingApproach_1_1 : bool;
	DockingApproachExample_Ext_ApproachOrbitComplete_1_1 : bool;
	DockingApproachExample_Ext_FarApproachComplete_1_1 : bool;
	DockingApproachExample_Ext_ProximityOperationsComplete_1_1 : bool;
	DockingApproachExample_Ext_FailedApproach_1_1 : bool;
	DockingApproachExample_Ext_JointMission_1_1 : bool;
	DockingApproachExample_Ext_CaptureApproachFailed_1_1 : bool;
let
	CompareToConstant_1_1 = LatchCapture_timer_1_1 < 8;
	LogicalOperator_1_1 = LogicalOperator1_1_1 or CompareToConstant_1_1;
	LogicalOperator1_1_1 = not LatchCaptureComplete_1_1;
	prop1_1_1 = LogicalOperator_1_1;

	(DockingApproachExample_Ext_CaptureApproachComplete_1_1, DockingApproachExample_Ext_DockingApproachComplete_1_1, DockingApproachExample_Ext_AttemptingToDock_1_1, LatchCaptureComplete_1_1, DockingApproachExample_Ext_DockingApproach_1_1, DockingApproachExample_Ext_ApproachOrbitComplete_1_1, DockingApproachExample_Ext_FarApproachComplete_1_1, DockingApproachExample_Ext_ProximityOperationsComplete_1_1, DockingApproachExample_Ext_FailedApproach_1_1, DockingApproachExample_Ext_JointMission_1_1, DockingApproachExample_Ext_CaptureApproachFailed_1_1, LatchCapture_timer_1_1) = DockingApproachExample_Ext(GroundTrack_OrbitalPosition_1_1, GroundTrack_OrbitalVelocity_1_1, dockVisibility_status_1_1, opticsAvailability_status_1_1, sunlight_status_1_1, GPS_satelliteVisibility_status_1_1, GPS_receiverAvailability_status_1_1, StarPlanetTracker_planetVisibility_1_1, StarPlanetTracker_starVisibility_1_1, InertialNavigation_time_1_1, GroundTrack_Time_1_1, RealTimeClock_time_1_1, StageTransition_1_1);
	--%PROPERTY prop1_1_1; 
 
tel

node DockingApproachExample_Ext_prop2 (GroundTrack_OrbitalPosition_1_1 : int; GroundTrack_OrbitalVelocity_1_1 : int; dockVisibility_status_1_1 : int; opticsAvailability_status_1_1 : bool; sunlight_status_1_1 : bool; GPS_satelliteVisibility_status_1_1 : int; GPS_receiverAvailability_status_1_1 : bool; StarPlanetTracker_planetVisibility_1_1 : int; StarPlanetTracker_starVisibility_1_1 : int; InertialNavigation_time_1_1 : bool; GroundTrack_Time_1_1 : int; RealTimeClock_time_1_1 : int; StageTransition_1_1 : int)
returns (prop2_1_1 : bool);
var
	CompareToConstant_1_1 : bool;
	LogicalOperator_1_1 : bool;
	Memory_1_1 : int;
	DockingApproach_1_1 : bool;
	LatchCapture_timer_1_1 : int;
	DockingApproachExample_Ext_CaptureApproachComplete_1_1 : bool;
	DockingApproachExample_Ext_DockingApproachComplete_1_1 : bool;
	DockingApproachExample_Ext_AttemptingToDock_1_1 : bool;
	DockingApproachExample_Ext_LatchCaptureComplete_1_1 : bool;
	DockingApproachExample_Ext_ApproachOrbitComplete_1_1 : bool;
	DockingApproachExample_Ext_FarApproachComplete_1_1 : bool;
	DockingApproachExample_Ext_ProximityOperationsComplete_1_1 : bool;
	DockingApproachExample_Ext_FailedApproach_1_1 : bool;
	DockingApproachExample_Ext_JointMission_1_1 : bool;
	DockingApproachExample_Ext_CaptureApproachFailed_1_1 : bool;
let
	CompareToConstant_1_1 = not(Memory_1_1 = 8);
	LogicalOperator_1_1 = CompareToConstant_1_1 or DockingApproach_1_1;
	Memory_1_1 = 0 -> pre LatchCapture_timer_1_1;
	prop2_1_1 = LogicalOperator_1_1;

	(DockingApproachExample_Ext_CaptureApproachComplete_1_1, DockingApproachExample_Ext_DockingApproachComplete_1_1, DockingApproachExample_Ext_AttemptingToDock_1_1, DockingApproachExample_Ext_LatchCaptureComplete_1_1, DockingApproach_1_1, DockingApproachExample_Ext_ApproachOrbitComplete_1_1, DockingApproachExample_Ext_FarApproachComplete_1_1, DockingApproachExample_Ext_ProximityOperationsComplete_1_1, DockingApproachExample_Ext_FailedApproach_1_1, DockingApproachExample_Ext_JointMission_1_1, DockingApproachExample_Ext_CaptureApproachFailed_1_1, LatchCapture_timer_1_1) = DockingApproachExample_Ext(GroundTrack_OrbitalPosition_1_1, GroundTrack_OrbitalVelocity_1_1, dockVisibility_status_1_1, opticsAvailability_status_1_1, sunlight_status_1_1, GPS_satelliteVisibility_status_1_1, GPS_receiverAvailability_status_1_1, StarPlanetTracker_planetVisibility_1_1, StarPlanetTracker_starVisibility_1_1, InertialNavigation_time_1_1, GroundTrack_Time_1_1, RealTimeClock_time_1_1, StageTransition_1_1);
	--%PROPERTY prop2_1_1; 
 
tel


-- System nodes

--***************************************************State :thrust_command Automaton***************************************************

node thrust_command_node(idthrust_command_1:int)

returns (idthrust_command:int);


let

	 automaton thrust_command

	state POINTthrust_command:
	unless (idthrust_command_1=0) restart POINT__TO__THRUST_COMMANDJUNCTION1022_1



	let

		(idthrust_command) 
	= (idthrust_command_1);
	

	tel



	state POINT__TO__THRUST_COMMANDJUNCTION1022_1:

	 	let

		-- transition trace :
	--POINT__To__Junction1022_1
	(idthrust_command) 
	=  (idthrust_command_1);


	tel

	until true restart POINTthrust_command



tel


--***************************************************State :thrust_command Automaton***************************************************

node command(noInput :bool)

returns (y:real);


var y_1: real;

	idthrust_command, idthrust_command_1: int;

	let

	y_1 = 0.0 -> pre y;

	idthrust_command_1 = 0 -> pre idthrust_command;

	



	(idthrust_command)
	 = thrust_command_node(idthrust_command_1);


--unused outputs
	y = 0.0;

	

tel




--***************************************************State :thrust_compute Automaton***************************************************

node thrust_compute_node(idthrust_compute_1:int)

returns (idthrust_compute:int);


let

	 automaton thrust_compute

	state POINTthrust_compute:
	unless (idthrust_compute_1=0) restart POINT__TO__THRUST_COMPUTEJUNCTION1019_1



	let

		(idthrust_compute) 
	= (idthrust_compute_1);
	

	tel



	state POINT__TO__THRUST_COMPUTEJUNCTION1019_1:

	 	let

		-- transition trace :
	--POINT__To__Junction1019_1
	(idthrust_compute) 
	=  (idthrust_compute_1);


	tel

	until true restart POINTthrust_compute



tel


--***************************************************State :thrust_compute Automaton***************************************************

node compute(missionstate:int)

returns (y:int);


var y_1: int;

	idthrust_compute, idthrust_compute_1: int;

	let

	y_1 = 0 -> pre y;

	idthrust_compute_1 = 0 -> pre idthrust_compute;

	



	(idthrust_compute)
	 = thrust_compute_node(idthrust_compute_1);


--unused outputs
	y = 0;

	

tel




--***************************************************State :OrbitalState_Complex_RealTimeClock_callibrate Automaton***************************************************

node OrbitalState_Complex_RealTimeClock_callibrate_node(idOrbitalState_Complex_RealTimeClock_callibrate_1:int)

returns (idOrbitalState_Complex_RealTimeClock_callibrate:int);


let

	 automaton orbitalstate_complex_realtimeclock_callibrate

	state POINTOrbitalState_Complex_RealTimeClock_callibrate:
	unless (idOrbitalState_Complex_RealTimeClock_callibrate_1=0) restart POINT__TO__ORBITALSTATE_COMPLEX_REALTIMECLOCK_CALLIBRATEJUNCTION1102_1



	let

		(idOrbitalState_Complex_RealTimeClock_callibrate) 
	= (idOrbitalState_Complex_RealTimeClock_callibrate_1);
	

	tel



	state POINT__TO__ORBITALSTATE_COMPLEX_REALTIMECLOCK_CALLIBRATEJUNCTION1102_1:

	 	let

		-- transition trace :
	--POINT__To__Junction1102_1
	(idOrbitalState_Complex_RealTimeClock_callibrate) 
	=  (idOrbitalState_Complex_RealTimeClock_callibrate_1);


	tel

	until true restart POINTOrbitalState_Complex_RealTimeClock_callibrate



tel


--***************************************************State :OrbitalState_Complex_RealTimeClock_callibrate Automaton***************************************************

node RealTimeClock_callibrate(noInput :bool)

returns (y:int);


var y_1: int;

	idOrbitalState_Complex_RealTimeClock_callibrate, idOrbitalState_Complex_RealTimeClock_callibrate_1: int;

	let

	y_1 = 0 -> pre y;

	idOrbitalState_Complex_RealTimeClock_callibrate_1 = 0 -> pre idOrbitalState_Complex_RealTimeClock_callibrate;

	



	(idOrbitalState_Complex_RealTimeClock_callibrate)
	 = OrbitalState_Complex_RealTimeClock_callibrate_node(idOrbitalState_Complex_RealTimeClock_callibrate_1);


--unused outputs
	y = 0;

	

tel

































node MissionPhaseStates_FarApproach__To__MissionPhaseStates_CaptureApproach_2_Condition_Action(FarApproachComplete_1:bool)

returns (FarApproachComplete:bool);


var 	FarApproachComplete_2:bool;


let



	FarApproachComplete_2 
	= true;
	

	(FarApproachComplete) 
	= (FarApproachComplete_2);
	

tel































































node MissionPhaseStates_ProximityOperations__To__MissionPhaseStates_ApproachOrbit_1_Condition_Action(ApproachOrbitComplete_1:bool)

returns (ApproachOrbitComplete:bool);


var 	ApproachOrbitComplete_2:bool;


let



	ApproachOrbitComplete_2 
	= false;
	

	(ApproachOrbitComplete) 
	= (ApproachOrbitComplete_2);
	

tel









node MissionPhaseStates_ApproachOrbit__To__MissionPhaseStates_ProximityOperations_1_Condition_Action(ApproachOrbitComplete_1:bool)

returns (ApproachOrbitComplete:bool);


var 	ApproachOrbitComplete_2:bool;


let



	ApproachOrbitComplete_2 
	= true;
	

	(ApproachOrbitComplete) 
	= (ApproachOrbitComplete_2);
	

tel
















node MissionPhaseStates_ProximityOperations__To__MissionPhaseStates_FarApproach_2_Condition_Action(ProximityOperationsComplete_1:bool)

returns (ProximityOperationsComplete:bool);


var 	ProximityOperationsComplete_2:bool;


let



	ProximityOperationsComplete_2 
	= true;
	

	(ProximityOperationsComplete) 
	= (ProximityOperationsComplete_2);
	

tel







-- Entry action for state :Chart_fuel
node Chart_fuel_en(idChart_Chart_1:int;
	isInner:bool)

returns (idChart_Chart:int);


var 	idChart_Chart_2:int;


let



	-- set state as active 
	idChart_Chart_2 
	= 954;
	

	(idChart_Chart) 
	= (idChart_Chart_2);
	

tel





-- Exit action for state :Chart_fuel
node Chart_fuel_ex(idChart_Chart_1:int;
	isInner:bool)

returns (idChart_Chart:int);


var 	idChart_Chart_2:int;


let



	-- set state as inactive 
	idChart_Chart_2
	 = if (not isInner) then 0 else idChart_Chart_1;


	(idChart_Chart) 
	= (idChart_Chart_1);
	

tel






-- Entry action for state :Chart_thrust
node Chart_thrust_en(idChart_Chart_1:int;
	isInner:bool)

returns (idChart_Chart:int);


var 	idChart_Chart_2:int;


let



	-- set state as active 
	idChart_Chart_2 
	= 955;
	

	(idChart_Chart) 
	= (idChart_Chart_2);
	

tel





-- Exit action for state :Chart_thrust
node Chart_thrust_ex(idChart_Chart_1:int;
	isInner:bool)

returns (idChart_Chart:int);


var 	idChart_Chart_2:int;


let



	-- set state as inactive 
	idChart_Chart_2
	 = if (not isInner) then 0 else idChart_Chart_1;


	(idChart_Chart) 
	= (idChart_Chart_1);
	

tel






-- Entry action for state :MissionPhaseStates_JointMission
node MissionPhaseStates_JointMission_en(idChart_MissionPhaseStates_1:int;
	JointMission_1:bool;
	isInner:bool)

returns (idChart_MissionPhaseStates:int;
	JointMission:bool);


var 	idChart_MissionPhaseStates_2:int;
	JointMission_2:bool;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 961;
	

	JointMission_2 
	= if (not isInner) then true
	 else JointMission_1;
	

	(idChart_MissionPhaseStates, JointMission) 
	= (idChart_MissionPhaseStates_2, JointMission_2);
	

tel





-- Exit action for state :MissionPhaseStates_JointMission
node MissionPhaseStates_JointMission_ex(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;


	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_1);
	

tel






-- Entry action for state :MissionPhaseStates_FailedApproach
node MissionPhaseStates_FailedApproach_en(idChart_MissionPhaseStates_1:int;
	FailedApproach_1:bool;
	isInner:bool)

returns (idChart_MissionPhaseStates:int;
	FailedApproach:bool);


var 	idChart_MissionPhaseStates_2:int;
	FailedApproach_2:bool;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 957;
	

	FailedApproach_2 
	= if (not isInner) then true
	 else FailedApproach_1;
	

	(idChart_MissionPhaseStates, FailedApproach) 
	= (idChart_MissionPhaseStates_2, FailedApproach_2);
	

tel





-- Exit action for state :MissionPhaseStates_FailedApproach
node MissionPhaseStates_FailedApproach_ex(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;


	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_1);
	

tel






-- Entry action for state :MissionPhaseStates_JointStabilize
node MissionPhaseStates_JointStabilize_en(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 950;
	

	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_2);
	

tel





-- Exit action for state :MissionPhaseStates_JointStabilize
node MissionPhaseStates_JointStabilize_ex(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;


	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_1);
	

tel






-- Entry action for state :MissionPhaseStates_Disengage
node MissionPhaseStates_Disengage_en(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 959;
	

	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_2);
	

tel





-- Exit action for state :MissionPhaseStates_Disengage
node MissionPhaseStates_Disengage_ex(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;


	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_1);
	

tel






-- Exit action for state :MissionPhaseStates_CollisionAvoidanceManuever
node MissionPhaseStates_CollisionAvoidanceManuever_ex(ApproachOrbitComplete_1:bool;
	ProximityOperationsComplete_1:bool;
	FarApproachComplete_1:bool;
	CaptureApproachComplete_1:bool;
	idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (ApproachOrbitComplete:bool;
	ProximityOperationsComplete:bool;
	FarApproachComplete:bool;
	CaptureApproachComplete:bool;
	idChart_MissionPhaseStates:int);


var 	ApproachOrbitComplete_2:bool;
	ProximityOperationsComplete_2:bool;
	FarApproachComplete_2:bool;
	CaptureApproachComplete_2:bool;
	idChart_MissionPhaseStates_2:int;


let



	ApproachOrbitComplete_2 
	= if (not isInner) then false
	 else ApproachOrbitComplete_1;
	

	ProximityOperationsComplete_2 
	= if (not isInner) then false
	 else ProximityOperationsComplete_1;
	

	FarApproachComplete_2 
	= if (not isInner) then false
	 else FarApproachComplete_1;
	

	CaptureApproachComplete_2 
	= if (not isInner) then false
	 else CaptureApproachComplete_1;
	

	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;


	(ApproachOrbitComplete, ProximityOperationsComplete, FarApproachComplete, CaptureApproachComplete, idChart_MissionPhaseStates) 
	= (ApproachOrbitComplete_2, ProximityOperationsComplete_2, FarApproachComplete_2, CaptureApproachComplete_2, idChart_MissionPhaseStates_1);
	

tel





-- Entry action for state :MissionPhaseStates_CollisionAvoidanceManuever
node MissionPhaseStates_CollisionAvoidanceManuever_en(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 956;
	

	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_2);
	

tel






-- Entry action for state :latch_Open
node latch_Open_en(idLatchCapture_latch_1:int;
	OPEN:int;
	latch_status_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int;
	latch_status:int);


var 	idLatchCapture_latch_2:int;
	latch_status_2:int;


let



	-- set state as active 
	idLatchCapture_latch_2 
	= 1013;
	

	latch_status_2 
	= if (not isInner) then OPEN
	 else latch_status_1;
	

	(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_2, latch_status_2);
	

tel





-- Exit action for state :latch_Open
node latch_Open_ex(idLatchCapture_latch_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int);


var 	idLatchCapture_latch_2:int;


let



	-- set state as inactive 
	idLatchCapture_latch_2
	 = if (not isInner) then 0 else idLatchCapture_latch_1;


	(idLatchCapture_latch) 
	= (idLatchCapture_latch_1);
	

tel






-- Entry action for state :latch_Opening
node latch_Opening_en(idLatchCapture_latch_1:int;
	INDETERMINATE:int;
	latch_status_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int;
	latch_status:int);


var 	idLatchCapture_latch_2:int;
	latch_status_2:int;


let



	-- set state as active 
	idLatchCapture_latch_2 
	= 1012;
	

	latch_status_2 
	= if (not isInner) then INDETERMINATE
	 else latch_status_1;
	

	(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_2, latch_status_2);
	

tel





-- Exit action for state :latch_Opening
node latch_Opening_ex(idLatchCapture_latch_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int);


var 	idLatchCapture_latch_2:int;


let



	-- set state as inactive 
	idLatchCapture_latch_2
	 = if (not isInner) then 0 else idLatchCapture_latch_1;


	(idLatchCapture_latch) 
	= (idLatchCapture_latch_1);
	

tel






-- Entry action for state :latch_Mated
node latch_Mated_en(idLatchCapture_latch_1:int;
	MATED:int;
	latch_status_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int;
	latch_status:int);


var 	idLatchCapture_latch_2:int;
	latch_status_2:int;


let



	-- set state as active 
	idLatchCapture_latch_2 
	= 1015;
	

	latch_status_2 
	= if (not isInner) then MATED
	 else latch_status_1;
	

	(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_2, latch_status_2);
	

tel





-- Exit action for state :latch_Mated
node latch_Mated_ex(idLatchCapture_latch_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int);


var 	idLatchCapture_latch_2:int;


let



	-- set state as inactive 
	idLatchCapture_latch_2
	 = if (not isInner) then 0 else idLatchCapture_latch_1;


	(idLatchCapture_latch) 
	= (idLatchCapture_latch_1);
	

tel






-- Entry action for state :latch_Closing
node latch_Closing_en(idLatchCapture_latch_1:int;
	INDETERMINATE:int;
	latch_status_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int;
	latch_status:int);


var 	idLatchCapture_latch_2:int;
	latch_status_2:int;


let



	-- set state as active 
	idLatchCapture_latch_2 
	= 1014;
	

	latch_status_2 
	= if (not isInner) then INDETERMINATE
	 else latch_status_1;
	

	(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_2, latch_status_2);
	

tel





-- Exit action for state :latch_Closing
node latch_Closing_ex(idLatchCapture_latch_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int);


var 	idLatchCapture_latch_2:int;


let



	-- set state as inactive 
	idLatchCapture_latch_2
	 = if (not isInner) then 0 else idLatchCapture_latch_1;


	(idLatchCapture_latch) 
	= (idLatchCapture_latch_1);
	

tel






-- Entry action for state :latch_ClosedButUnmated
node latch_ClosedButUnmated_en(idLatchCapture_latch_1:int;
	CLOSEDBUTUNMATED:int;
	latch_status_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int;
	latch_status:int);


var 	idLatchCapture_latch_2:int;
	latch_status_2:int;


let



	-- set state as active 
	idLatchCapture_latch_2 
	= 1016;
	

	latch_status_2 
	= if (not isInner) then CLOSEDBUTUNMATED
	 else latch_status_1;
	

	(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_2, latch_status_2);
	

tel





-- Exit action for state :latch_ClosedButUnmated
node latch_ClosedButUnmated_ex(idLatchCapture_latch_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int);


var 	idLatchCapture_latch_2:int;


let



	-- set state as inactive 
	idLatchCapture_latch_2
	 = if (not isInner) then 0 else idLatchCapture_latch_1;


	(idLatchCapture_latch) 
	= (idLatchCapture_latch_1);
	

tel






-- Entry action for state :LatchCapture_latch
node LatchCapture_latch_en(idLatchCapture_latch_1:int;
	idMissionPhaseStates_LatchCapture_1:int;
	INDETERMINATE:int;
	latch_status_1:int;
	OPEN:int;
	MATED:int;
	CLOSEDBUTUNMATED:int;
	isInner:bool)

returns (idLatchCapture_latch:int;
	idMissionPhaseStates_LatchCapture:int;
	latch_status:int);


var 	idLatchCapture_latch_2, idLatchCapture_latch_3, idLatchCapture_latch_4, idLatchCapture_latch_5, idLatchCapture_latch_6, idLatchCapture_latch_7, idLatchCapture_latch_8, idLatchCapture_latch_9:int;
	idMissionPhaseStates_LatchCapture_2, idMissionPhaseStates_LatchCapture_3, idMissionPhaseStates_LatchCapture_4:int;
	latch_status_2, latch_status_3, latch_status_4, latch_status_5, latch_status_6, latch_status_7, latch_status_8, latch_status_9:int;


let



	-- set state as active 
	idMissionPhaseStates_LatchCapture_2 
	= 1011;
	

	
-- transition trace :
	--POINT__To__latch_Opening_1
		(idLatchCapture_latch_2, latch_status_2) 
	= latch_Opening_en(idLatchCapture_latch_1, INDETERMINATE, latch_status_1, false);
		

	(idLatchCapture_latch_3, idMissionPhaseStates_LatchCapture_3, latch_status_3) 
	= 

	if ( idLatchCapture_latch_1 = 0) then

	 (idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, latch_status_2)

	 else(idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_2, latch_status_1);

	

	(idLatchCapture_latch_4, latch_status_4) 
	= 
	if ( idLatchCapture_latch_1 = 1012) then
	latch_Opening_en(idLatchCapture_latch_1, INDETERMINATE, latch_status_1, false)
	 else (idLatchCapture_latch_1, latch_status_1);

	

	(idLatchCapture_latch_5, latch_status_5) 
	= 
	if ( idLatchCapture_latch_1 = 1013) then
	latch_Open_en(idLatchCapture_latch_1, OPEN, latch_status_1, false)
	 else (idLatchCapture_latch_1, latch_status_1);

	

	(idLatchCapture_latch_6, latch_status_6) 
	= 
	if ( idLatchCapture_latch_1 = 1014) then
	latch_Closing_en(idLatchCapture_latch_1, INDETERMINATE, latch_status_1, false)
	 else (idLatchCapture_latch_1, latch_status_1);

	

	(idLatchCapture_latch_7, latch_status_7) 
	= 
	if ( idLatchCapture_latch_1 = 1015) then
	latch_Mated_en(idLatchCapture_latch_1, MATED, latch_status_1, false)
	 else (idLatchCapture_latch_1, latch_status_1);

	

	(idLatchCapture_latch_8, latch_status_8) 
	= 
	if ( idLatchCapture_latch_1 = 1016) then
	latch_ClosedButUnmated_en(idLatchCapture_latch_1, CLOSEDBUTUNMATED, latch_status_1, false)
	 else (idLatchCapture_latch_1, latch_status_1);

	

	(idLatchCapture_latch_9, idMissionPhaseStates_LatchCapture_4, latch_status_9) 
	= 
		 if ( idLatchCapture_latch_1 = 0) then 
		(idLatchCapture_latch_3, idMissionPhaseStates_LatchCapture_3, latch_status_3)
		 else
		 if ( idLatchCapture_latch_1 = 1012) then 
		(idLatchCapture_latch_4, idMissionPhaseStates_LatchCapture_3, latch_status_4)
		 else
		 if ( idLatchCapture_latch_1 = 1013) then 
		(idLatchCapture_latch_5, idMissionPhaseStates_LatchCapture_3, latch_status_5)
		 else
		 if ( idLatchCapture_latch_1 = 1014) then 
		(idLatchCapture_latch_6, idMissionPhaseStates_LatchCapture_3, latch_status_6)
		 else
		 if ( idLatchCapture_latch_1 = 1015) then 
		(idLatchCapture_latch_7, idMissionPhaseStates_LatchCapture_3, latch_status_7)
		 else
		 if ( idLatchCapture_latch_1 = 1016) then 
		(idLatchCapture_latch_8, idMissionPhaseStates_LatchCapture_3, latch_status_8)
		 else (idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_2, latch_status_1);


	(idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (idLatchCapture_latch_9, idMissionPhaseStates_LatchCapture_4, latch_status_9);
	

tel





-- Exit action for state :LatchCapture_latch
node LatchCapture_latch_ex(idLatchCapture_latch_1:int;
	idMissionPhaseStates_LatchCapture_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int;
	idMissionPhaseStates_LatchCapture:int);


var 	idLatchCapture_latch_2, idLatchCapture_latch_3, idLatchCapture_latch_4, idLatchCapture_latch_5, idLatchCapture_latch_6, idLatchCapture_latch_7, idLatchCapture_latch_8:int;
	idMissionPhaseStates_LatchCapture_2:int;


let



	
	(idLatchCapture_latch_2) 
	= 
	if ( idLatchCapture_latch_1 = 1012) then
	latch_Opening_ex(idLatchCapture_latch_1, false)
	 else (idLatchCapture_latch_1);

	

	(idLatchCapture_latch_3) 
	= 
	if ( idLatchCapture_latch_1 = 1013) then
	latch_Open_ex(idLatchCapture_latch_1, false)
	 else (idLatchCapture_latch_1);

	

	(idLatchCapture_latch_4) 
	= 
	if ( idLatchCapture_latch_1 = 1014) then
	latch_Closing_ex(idLatchCapture_latch_1, false)
	 else (idLatchCapture_latch_1);

	

	(idLatchCapture_latch_5) 
	= 
	if ( idLatchCapture_latch_1 = 1015) then
	latch_Mated_ex(idLatchCapture_latch_1, false)
	 else (idLatchCapture_latch_1);

	

	(idLatchCapture_latch_6) 
	= 
	if ( idLatchCapture_latch_1 = 1016) then
	latch_ClosedButUnmated_ex(idLatchCapture_latch_1, false)
	 else (idLatchCapture_latch_1);

	

	(idLatchCapture_latch_7) 
	= 
		 if ( idLatchCapture_latch_1 = 1012) then 
		(idLatchCapture_latch_2)
		 else
		 if ( idLatchCapture_latch_1 = 1013) then 
		(idLatchCapture_latch_3)
		 else
		 if ( idLatchCapture_latch_1 = 1014) then 
		(idLatchCapture_latch_4)
		 else
		 if ( idLatchCapture_latch_1 = 1015) then 
		(idLatchCapture_latch_5)
		 else
		 if ( idLatchCapture_latch_1 = 1016) then 
		(idLatchCapture_latch_6)
		 else (idLatchCapture_latch_1);


	-- set state as inactive 
	idMissionPhaseStates_LatchCapture_2
	 = if (not isInner) then 0 else idMissionPhaseStates_LatchCapture_1;

	idLatchCapture_latch_8 
	= 0;
	

	(idLatchCapture_latch, idMissionPhaseStates_LatchCapture) 
	= (idLatchCapture_latch_8, idMissionPhaseStates_LatchCapture_1);
	

tel






-- Entry action for state :LatchCaptureCheck_CheckLatchMated
node LatchCaptureCheck_CheckLatchMated_en(idLatchCapture_LatchCaptureCheck_1:int;
	isInner:bool)

returns (idLatchCapture_LatchCaptureCheck:int);


var 	idLatchCapture_LatchCaptureCheck_2:int;


let



	-- set state as active 
	idLatchCapture_LatchCaptureCheck_2 
	= 1008;
	

	(idLatchCapture_LatchCaptureCheck) 
	= (idLatchCapture_LatchCaptureCheck_2);
	

tel





-- Exit action for state :LatchCaptureCheck_CheckLatchMated
node LatchCaptureCheck_CheckLatchMated_ex(idLatchCapture_LatchCaptureCheck_1:int;
	isInner:bool)

returns (idLatchCapture_LatchCaptureCheck:int);


var 	idLatchCapture_LatchCaptureCheck_2:int;


let



	-- set state as inactive 
	idLatchCapture_LatchCaptureCheck_2
	 = if (not isInner) then 0 else idLatchCapture_LatchCaptureCheck_1;


	(idLatchCapture_LatchCaptureCheck) 
	= (idLatchCapture_LatchCaptureCheck_1);
	

tel






-- Entry action for state :LatchCaptureCheck_Docked
node LatchCaptureCheck_Docked_en(idLatchCapture_LatchCaptureCheck_1:int;
	LatchCaptureComplete_1:bool;
	isInner:bool)

returns (idLatchCapture_LatchCaptureCheck:int;
	LatchCaptureComplete:bool);


var 	idLatchCapture_LatchCaptureCheck_2:int;
	LatchCaptureComplete_2:bool;


let



	-- set state as active 
	idLatchCapture_LatchCaptureCheck_2 
	= 1010;
	

	LatchCaptureComplete_2 
	= if (not isInner) then true
	 else LatchCaptureComplete_1;
	

	(idLatchCapture_LatchCaptureCheck, LatchCaptureComplete) 
	= (idLatchCapture_LatchCaptureCheck_2, LatchCaptureComplete_2);
	

tel





-- Exit action for state :LatchCaptureCheck_Docked
node LatchCaptureCheck_Docked_ex(idLatchCapture_LatchCaptureCheck_1:int;
	isInner:bool)

returns (idLatchCapture_LatchCaptureCheck:int);


var 	idLatchCapture_LatchCaptureCheck_2:int;


let



	-- set state as inactive 
	idLatchCapture_LatchCaptureCheck_2
	 = if (not isInner) then 0 else idLatchCapture_LatchCaptureCheck_1;


	(idLatchCapture_LatchCaptureCheck) 
	= (idLatchCapture_LatchCaptureCheck_1);
	

tel






-- Entry action for state :LatchCaptureCheck_LatchFailed
node LatchCaptureCheck_LatchFailed_en(idLatchCapture_LatchCaptureCheck_1:int;
	isInner:bool)

returns (idLatchCapture_LatchCaptureCheck:int);


var 	idLatchCapture_LatchCaptureCheck_2:int;


let



	-- set state as active 
	idLatchCapture_LatchCaptureCheck_2 
	= 1009;
	

	(idLatchCapture_LatchCaptureCheck) 
	= (idLatchCapture_LatchCaptureCheck_2);
	

tel





-- Exit action for state :LatchCaptureCheck_LatchFailed
node LatchCaptureCheck_LatchFailed_ex(idLatchCapture_LatchCaptureCheck_1:int;
	isInner:bool)

returns (idLatchCapture_LatchCaptureCheck:int);


var 	idLatchCapture_LatchCaptureCheck_2:int;


let



	-- set state as inactive 
	idLatchCapture_LatchCaptureCheck_2
	 = if (not isInner) then 0 else idLatchCapture_LatchCaptureCheck_1;


	(idLatchCapture_LatchCaptureCheck) 
	= (idLatchCapture_LatchCaptureCheck_1);
	

tel






-- Entry action for state :LatchCaptureCheck_CheckLatchOpen
node LatchCaptureCheck_CheckLatchOpen_en(idLatchCapture_LatchCaptureCheck_1:int;
	LatchCapture_timer_1:int;
	isInner:bool)

returns (idLatchCapture_LatchCaptureCheck:int;
	LatchCapture_timer:int);


var 	idLatchCapture_LatchCaptureCheck_2:int;
	LatchCapture_timer_2:int;


let



	-- set state as active 
	idLatchCapture_LatchCaptureCheck_2 
	= 1007;
	

	LatchCapture_timer_2 
	= if (not isInner) then 0
	 else LatchCapture_timer_1;
	

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer) 
	= (idLatchCapture_LatchCaptureCheck_2, LatchCapture_timer_2);
	

tel





-- Exit action for state :LatchCaptureCheck_CheckLatchOpen
node LatchCaptureCheck_CheckLatchOpen_ex(idLatchCapture_LatchCaptureCheck_1:int;
	isInner:bool)

returns (idLatchCapture_LatchCaptureCheck:int);


var 	idLatchCapture_LatchCaptureCheck_2:int;


let



	-- set state as inactive 
	idLatchCapture_LatchCaptureCheck_2
	 = if (not isInner) then 0 else idLatchCapture_LatchCaptureCheck_1;


	(idLatchCapture_LatchCaptureCheck) 
	= (idLatchCapture_LatchCaptureCheck_1);
	

tel






-- Entry action for state :LatchCapture_LatchCaptureCheck
node LatchCapture_LatchCaptureCheck_en(idLatchCapture_LatchCaptureCheck_1:int;
	idMissionPhaseStates_LatchCapture_1:int;
	AttemptingToDock_1:bool;
	LatchCapture_timer_1:int;
	LatchCaptureComplete_1:bool;
	isInner:bool)

returns (idLatchCapture_LatchCaptureCheck:int;
	idMissionPhaseStates_LatchCapture:int;
	AttemptingToDock:bool;
	LatchCapture_timer:int;
	LatchCaptureComplete:bool);


var 	idLatchCapture_LatchCaptureCheck_2, idLatchCapture_LatchCaptureCheck_3, idLatchCapture_LatchCaptureCheck_4, idLatchCapture_LatchCaptureCheck_5, idLatchCapture_LatchCaptureCheck_6, idLatchCapture_LatchCaptureCheck_7, idLatchCapture_LatchCaptureCheck_8:int;
	idMissionPhaseStates_LatchCapture_2, idMissionPhaseStates_LatchCapture_3, idMissionPhaseStates_LatchCapture_4:int;
	AttemptingToDock_2, AttemptingToDock_3, AttemptingToDock_4:bool;
	LatchCapture_timer_2, LatchCapture_timer_3, LatchCapture_timer_4, LatchCapture_timer_5:int;
	LatchCaptureComplete_2, LatchCaptureComplete_3:bool;


let



	-- set state as active 
	idMissionPhaseStates_LatchCapture_2 
	= 1006;
	

	AttemptingToDock_2 
	= if (not isInner) then true
	 else AttemptingToDock_1;
	

	
-- transition trace :
	--POINT__To__LatchCaptureCheck_CheckLatchOpen_1
		(idLatchCapture_LatchCaptureCheck_2, LatchCapture_timer_2) 
	= LatchCaptureCheck_CheckLatchOpen_en(idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_1, false);
		

	(idLatchCapture_LatchCaptureCheck_3, idMissionPhaseStates_LatchCapture_3, AttemptingToDock_3, LatchCapture_timer_3) 
	= 

	if ( idLatchCapture_LatchCaptureCheck_1 = 0) then

	 (idLatchCapture_LatchCaptureCheck_2, idMissionPhaseStates_LatchCapture_2, AttemptingToDock_2, LatchCapture_timer_2)

	 else(idLatchCapture_LatchCaptureCheck_1, idMissionPhaseStates_LatchCapture_2, AttemptingToDock_2, LatchCapture_timer_1);

	

	(idLatchCapture_LatchCaptureCheck_4, LatchCapture_timer_4) 
	= 
	if ( idLatchCapture_LatchCaptureCheck_1 = 1007) then
	LatchCaptureCheck_CheckLatchOpen_en(idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_1, false)
	 else (idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_1);

	

	(idLatchCapture_LatchCaptureCheck_5) 
	= 
	if ( idLatchCapture_LatchCaptureCheck_1 = 1008) then
	LatchCaptureCheck_CheckLatchMated_en(idLatchCapture_LatchCaptureCheck_1, false)
	 else (idLatchCapture_LatchCaptureCheck_1);

	

	(idLatchCapture_LatchCaptureCheck_6) 
	= 
	if ( idLatchCapture_LatchCaptureCheck_1 = 1009) then
	LatchCaptureCheck_LatchFailed_en(idLatchCapture_LatchCaptureCheck_1, false)
	 else (idLatchCapture_LatchCaptureCheck_1);

	

	(idLatchCapture_LatchCaptureCheck_7, LatchCaptureComplete_2) 
	= 
	if ( idLatchCapture_LatchCaptureCheck_1 = 1010) then
	LatchCaptureCheck_Docked_en(idLatchCapture_LatchCaptureCheck_1, LatchCaptureComplete_1, false)
	 else (idLatchCapture_LatchCaptureCheck_1, LatchCaptureComplete_1);

	

	(idLatchCapture_LatchCaptureCheck_8, idMissionPhaseStates_LatchCapture_4, AttemptingToDock_4, LatchCapture_timer_5, LatchCaptureComplete_3) 
	= 
		 if ( idLatchCapture_LatchCaptureCheck_1 = 0) then 
		(idLatchCapture_LatchCaptureCheck_3, idMissionPhaseStates_LatchCapture_3, AttemptingToDock_3, LatchCapture_timer_3, LatchCaptureComplete_1)
		 else
		 if ( idLatchCapture_LatchCaptureCheck_1 = 1007) then 
		(idLatchCapture_LatchCaptureCheck_4, idMissionPhaseStates_LatchCapture_3, AttemptingToDock_3, LatchCapture_timer_4, LatchCaptureComplete_1)
		 else
		 if ( idLatchCapture_LatchCaptureCheck_1 = 1008) then 
		(idLatchCapture_LatchCaptureCheck_5, idMissionPhaseStates_LatchCapture_3, AttemptingToDock_3, LatchCapture_timer_4, LatchCaptureComplete_1)
		 else
		 if ( idLatchCapture_LatchCaptureCheck_1 = 1009) then 
		(idLatchCapture_LatchCaptureCheck_6, idMissionPhaseStates_LatchCapture_3, AttemptingToDock_3, LatchCapture_timer_4, LatchCaptureComplete_1)
		 else
		 if ( idLatchCapture_LatchCaptureCheck_1 = 1010) then 
		(idLatchCapture_LatchCaptureCheck_7, idMissionPhaseStates_LatchCapture_3, AttemptingToDock_3, LatchCapture_timer_4, LatchCaptureComplete_2)
		 else (idLatchCapture_LatchCaptureCheck_1, idMissionPhaseStates_LatchCapture_2, AttemptingToDock_2, LatchCapture_timer_1, LatchCaptureComplete_1);


	(idLatchCapture_LatchCaptureCheck, idMissionPhaseStates_LatchCapture, AttemptingToDock, LatchCapture_timer, LatchCaptureComplete) 
	= (idLatchCapture_LatchCaptureCheck_8, idMissionPhaseStates_LatchCapture_4, AttemptingToDock_4, LatchCapture_timer_5, LatchCaptureComplete_3);
	

tel





--During action for state :LatchCapture_LatchCaptureCheck
node LatchCapture_LatchCaptureCheck_du(LatchCapture_timer_1:int;
	LatchCapture_timer_upper_limit:int)

returns (LatchCapture_timer:int);


var 	LatchCapture_timer_2:int;


let



	LatchCapture_timer_2 
	= min( LatchCapture_timer_1 +1,LatchCapture_timer_upper_limit+1);
	

	(LatchCapture_timer) 
	= (LatchCapture_timer_2);
	

tel





-- Exit action for state :LatchCapture_LatchCaptureCheck
node LatchCapture_LatchCaptureCheck_ex(idLatchCapture_LatchCaptureCheck_1:int;
	AttemptingToDock_1:bool;
	idMissionPhaseStates_LatchCapture_1:int;
	isInner:bool)

returns (idLatchCapture_LatchCaptureCheck:int;
	AttemptingToDock:bool;
	idMissionPhaseStates_LatchCapture:int);


var 	idLatchCapture_LatchCaptureCheck_2, idLatchCapture_LatchCaptureCheck_3, idLatchCapture_LatchCaptureCheck_4, idLatchCapture_LatchCaptureCheck_5, idLatchCapture_LatchCaptureCheck_6, idLatchCapture_LatchCaptureCheck_7:int;
	AttemptingToDock_2:bool;
	idMissionPhaseStates_LatchCapture_2:int;


let



	
	(idLatchCapture_LatchCaptureCheck_2) 
	= 
	if ( idLatchCapture_LatchCaptureCheck_1 = 1007) then
	LatchCaptureCheck_CheckLatchOpen_ex(idLatchCapture_LatchCaptureCheck_1, false)
	 else (idLatchCapture_LatchCaptureCheck_1);

	

	(idLatchCapture_LatchCaptureCheck_3) 
	= 
	if ( idLatchCapture_LatchCaptureCheck_1 = 1008) then
	LatchCaptureCheck_CheckLatchMated_ex(idLatchCapture_LatchCaptureCheck_1, false)
	 else (idLatchCapture_LatchCaptureCheck_1);

	

	(idLatchCapture_LatchCaptureCheck_4) 
	= 
	if ( idLatchCapture_LatchCaptureCheck_1 = 1009) then
	LatchCaptureCheck_LatchFailed_ex(idLatchCapture_LatchCaptureCheck_1, false)
	 else (idLatchCapture_LatchCaptureCheck_1);

	

	(idLatchCapture_LatchCaptureCheck_5) 
	= 
	if ( idLatchCapture_LatchCaptureCheck_1 = 1010) then
	LatchCaptureCheck_Docked_ex(idLatchCapture_LatchCaptureCheck_1, false)
	 else (idLatchCapture_LatchCaptureCheck_1);

	

	(idLatchCapture_LatchCaptureCheck_6) 
	= 
		 if ( idLatchCapture_LatchCaptureCheck_1 = 1007) then 
		(idLatchCapture_LatchCaptureCheck_2)
		 else
		 if ( idLatchCapture_LatchCaptureCheck_1 = 1008) then 
		(idLatchCapture_LatchCaptureCheck_3)
		 else
		 if ( idLatchCapture_LatchCaptureCheck_1 = 1009) then 
		(idLatchCapture_LatchCaptureCheck_4)
		 else
		 if ( idLatchCapture_LatchCaptureCheck_1 = 1010) then 
		(idLatchCapture_LatchCaptureCheck_5)
		 else (idLatchCapture_LatchCaptureCheck_1);


	AttemptingToDock_2 
	= if (not isInner) then false
	 else AttemptingToDock_1;
	

	-- set state as inactive 
	idMissionPhaseStates_LatchCapture_2
	 = if (not isInner) then 0 else idMissionPhaseStates_LatchCapture_1;

	idLatchCapture_LatchCaptureCheck_7 
	= 0;
	

	(idLatchCapture_LatchCaptureCheck, AttemptingToDock, idMissionPhaseStates_LatchCapture) 
	= (idLatchCapture_LatchCaptureCheck_7, AttemptingToDock_2, idMissionPhaseStates_LatchCapture_1);
	

tel






-- Entry action for state :MissionPhaseStates_LatchCapture
node MissionPhaseStates_LatchCapture_en(idMissionPhaseStates_LatchCapture_1:int;
	idChart_MissionPhaseStates_1:int;
	AttemptingToDock_1:bool;
	LatchCaptureComplete_1:bool;
	LatchCapture_timer_1:int;
	idLatchCapture_LatchCaptureCheck_1:int;
	CLOSEDBUTUNMATED:int;
	INDETERMINATE:int;
	MATED:int;
	OPEN:int;
	idLatchCapture_latch_1:int;
	latch_status_1:int;
	isInner:bool)

returns (idMissionPhaseStates_LatchCapture:int;
	idChart_MissionPhaseStates:int;
	AttemptingToDock:bool;
	LatchCaptureComplete:bool;
	LatchCapture_timer:int;
	idLatchCapture_LatchCaptureCheck:int;
	idLatchCapture_latch:int;
	latch_status:int);


var 	idMissionPhaseStates_LatchCapture_2, idMissionPhaseStates_LatchCapture_3:int;
	idChart_MissionPhaseStates_2:int;
	AttemptingToDock_2:bool;
	LatchCaptureComplete_2:bool;
	LatchCapture_timer_2:int;
	idLatchCapture_LatchCaptureCheck_2:int;
	idLatchCapture_latch_2:int;
	latch_status_2:int;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 1005;
	

	
	(idLatchCapture_LatchCaptureCheck_2, idMissionPhaseStates_LatchCapture_2, AttemptingToDock_2, LatchCapture_timer_2, LatchCaptureComplete_2) 
	= LatchCapture_LatchCaptureCheck_en(idLatchCapture_LatchCaptureCheck_1, idMissionPhaseStates_LatchCapture_1, AttemptingToDock_1, LatchCapture_timer_1, LatchCaptureComplete_1, false);

	(idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_3, latch_status_2) 
	= LatchCapture_latch_en(idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_2, INDETERMINATE, latch_status_1, OPEN, MATED, CLOSEDBUTUNMATED, false);


	(idMissionPhaseStates_LatchCapture, idChart_MissionPhaseStates, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, latch_status) 
	= (idMissionPhaseStates_LatchCapture_3, idChart_MissionPhaseStates_2, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, latch_status_2);
	

tel





-- Exit action for state :MissionPhaseStates_LatchCapture
node MissionPhaseStates_LatchCapture_ex(idLatchCapture_latch_1:int;
	idMissionPhaseStates_LatchCapture_1:int;
	AttemptingToDock_1:bool;
	idLatchCapture_LatchCaptureCheck_1:int;
	idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int;
	idMissionPhaseStates_LatchCapture:int;
	AttemptingToDock:bool;
	idLatchCapture_LatchCaptureCheck:int;
	idChart_MissionPhaseStates:int);


var 	idLatchCapture_latch_2:int;
	idMissionPhaseStates_LatchCapture_2, idMissionPhaseStates_LatchCapture_3, idMissionPhaseStates_LatchCapture_4:int;
	AttemptingToDock_2:bool;
	idLatchCapture_LatchCaptureCheck_2:int;
	idChart_MissionPhaseStates_2:int;


let



	
	(idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2) 
	= LatchCapture_latch_ex(idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, false);

	(idLatchCapture_LatchCaptureCheck_2, AttemptingToDock_2, idMissionPhaseStates_LatchCapture_3) 
	= LatchCapture_LatchCaptureCheck_ex(idLatchCapture_LatchCaptureCheck_1, AttemptingToDock_1, idMissionPhaseStates_LatchCapture_2, false);


	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;

	idMissionPhaseStates_LatchCapture_4 
	= 0;
	

	(idLatchCapture_latch, idMissionPhaseStates_LatchCapture, AttemptingToDock, idLatchCapture_LatchCaptureCheck, idChart_MissionPhaseStates) 
	= (idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_4, AttemptingToDock_2, idLatchCapture_LatchCaptureCheck_2, idChart_MissionPhaseStates_1);
	

tel






-- Entry action for state :InertialNavigation_POOR
node InertialNavigation_POOR_en(idOrbitalState_Active_InertialNavigation_1:int;
	POOR:int;
	InertialNavigation_AbsolutePosition_1:int;
	InertialNavigation_AbsoluteVelocity_1:int;
	InertialNavigation_AbsoluteAttitude_1:int;
	isInner:bool)

returns (idOrbitalState_Active_InertialNavigation:int;
	InertialNavigation_AbsolutePosition:int;
	InertialNavigation_AbsoluteVelocity:int;
	InertialNavigation_AbsoluteAttitude:int);


var 	idOrbitalState_Active_InertialNavigation_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	InertialNavigation_AbsoluteAttitude_2:int;


let



	-- set state as active 
	idOrbitalState_Active_InertialNavigation_2 
	= 963;
	

	InertialNavigation_AbsolutePosition_2 
	= if (not isInner) then POOR
	 else InertialNavigation_AbsolutePosition_1;
	

	InertialNavigation_AbsoluteVelocity_2 
	= if (not isInner) then POOR
	 else InertialNavigation_AbsoluteVelocity_1;
	

	InertialNavigation_AbsoluteAttitude_2 
	= if (not isInner) then POOR
	 else InertialNavigation_AbsoluteAttitude_1;
	

	(idOrbitalState_Active_InertialNavigation, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_AbsoluteAttitude) 
	= (idOrbitalState_Active_InertialNavigation_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_AbsoluteAttitude_2);
	

tel





-- Exit action for state :InertialNavigation_POOR
node InertialNavigation_POOR_ex(idOrbitalState_Active_InertialNavigation_1:int;
	isInner:bool)

returns (idOrbitalState_Active_InertialNavigation:int);


var 	idOrbitalState_Active_InertialNavigation_2:int;


let



	-- set state as inactive 
	idOrbitalState_Active_InertialNavigation_2
	 = if (not isInner) then 0 else idOrbitalState_Active_InertialNavigation_1;


	(idOrbitalState_Active_InertialNavigation) 
	= (idOrbitalState_Active_InertialNavigation_1);
	

tel






-- Entry action for state :InertialNavigation_GOOD
node InertialNavigation_GOOD_en(idOrbitalState_Active_InertialNavigation_1:int;
	InertialNavigation_timer_1:int;
	GOOD:int;
	InertialNavigation_AbsolutePosition_1:int;
	InertialNavigation_AbsoluteVelocity_1:int;
	InertialNavigation_AbsoluteAttitude_1:int;
	isInner:bool)

returns (idOrbitalState_Active_InertialNavigation:int;
	InertialNavigation_timer:int;
	InertialNavigation_AbsolutePosition:int;
	InertialNavigation_AbsoluteVelocity:int;
	InertialNavigation_AbsoluteAttitude:int);


var 	idOrbitalState_Active_InertialNavigation_2:int;
	InertialNavigation_timer_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	InertialNavigation_AbsoluteAttitude_2:int;


let



	-- set state as active 
	idOrbitalState_Active_InertialNavigation_2 
	= 1004;
	

	InertialNavigation_timer_2 
	= if (not isInner) then 0
	 else InertialNavigation_timer_1;
	

	InertialNavigation_AbsolutePosition_2 
	= if (not isInner) then GOOD
	 else InertialNavigation_AbsolutePosition_1;
	

	InertialNavigation_AbsoluteVelocity_2 
	= if (not isInner) then GOOD
	 else InertialNavigation_AbsoluteVelocity_1;
	

	InertialNavigation_AbsoluteAttitude_2 
	= if (not isInner) then GOOD
	 else InertialNavigation_AbsoluteAttitude_1;
	

	(idOrbitalState_Active_InertialNavigation, InertialNavigation_timer, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_AbsoluteAttitude) 
	= (idOrbitalState_Active_InertialNavigation_2, InertialNavigation_timer_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_AbsoluteAttitude_2);
	

tel





-- Exit action for state :InertialNavigation_GOOD
node InertialNavigation_GOOD_ex(idOrbitalState_Active_InertialNavigation_1:int;
	isInner:bool)

returns (idOrbitalState_Active_InertialNavigation:int);


var 	idOrbitalState_Active_InertialNavigation_2:int;


let



	-- set state as inactive 
	idOrbitalState_Active_InertialNavigation_2
	 = if (not isInner) then 0 else idOrbitalState_Active_InertialNavigation_1;


	(idOrbitalState_Active_InertialNavigation) 
	= (idOrbitalState_Active_InertialNavigation_1);
	

tel






-- Entry action for state :InertialNavigation_ACQUIRING
node InertialNavigation_ACQUIRING_en(idOrbitalState_Active_InertialNavigation_1:int;
	NONE:int;
	InertialNavigation_AbsolutePosition_1:int;
	InertialNavigation_AbsoluteVelocity_1:int;
	InertialNavigation_AbsoluteAttitude_1:int;
	isInner:bool)

returns (idOrbitalState_Active_InertialNavigation:int;
	InertialNavigation_AbsolutePosition:int;
	InertialNavigation_AbsoluteVelocity:int;
	InertialNavigation_AbsoluteAttitude:int);


var 	idOrbitalState_Active_InertialNavigation_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	InertialNavigation_AbsoluteAttitude_2:int;


let



	-- set state as active 
	idOrbitalState_Active_InertialNavigation_2 
	= 1003;
	

	InertialNavigation_AbsolutePosition_2 
	= if (not isInner) then NONE
	 else InertialNavigation_AbsolutePosition_1;
	

	InertialNavigation_AbsoluteVelocity_2 
	= if (not isInner) then NONE
	 else InertialNavigation_AbsoluteVelocity_1;
	

	InertialNavigation_AbsoluteAttitude_2 
	= if (not isInner) then NONE
	 else InertialNavigation_AbsoluteAttitude_1;
	

	(idOrbitalState_Active_InertialNavigation, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_AbsoluteAttitude) 
	= (idOrbitalState_Active_InertialNavigation_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_AbsoluteAttitude_2);
	

tel





-- Exit action for state :InertialNavigation_ACQUIRING
node InertialNavigation_ACQUIRING_ex(idOrbitalState_Active_InertialNavigation_1:int;
	isInner:bool)

returns (idOrbitalState_Active_InertialNavigation:int);


var 	idOrbitalState_Active_InertialNavigation_2:int;


let



	-- set state as inactive 
	idOrbitalState_Active_InertialNavigation_2
	 = if (not isInner) then 0 else idOrbitalState_Active_InertialNavigation_1;


	(idOrbitalState_Active_InertialNavigation) 
	= (idOrbitalState_Active_InertialNavigation_1);
	

tel






--During action for state :OrbitalState_Active_InertialNavigation
node OrbitalState_Active_InertialNavigation_du(InertialNavigation_timer_1:int;
	InertialNavigation_timer_upper_limit:int)

returns (InertialNavigation_timer:int);


var 	InertialNavigation_timer_2:int;


let



	InertialNavigation_timer_2 
	= min( InertialNavigation_timer_1 +1,InertialNavigation_timer_upper_limit);
	

	(InertialNavigation_timer) 
	= (InertialNavigation_timer_2);
	

tel





-- Entry action for state :OrbitalState_Active_InertialNavigation
node OrbitalState_Active_InertialNavigation_en(idOrbitalState_Active_InertialNavigation_1:int;
	idCaptureApproach_OrbitalState_Active_1:int;
	InertialNavigation_AbsoluteAttitude_1:int;
	InertialNavigation_AbsolutePosition_1:int;
	InertialNavigation_AbsoluteVelocity_1:int;
	NONE:int;
	GOOD:int;
	InertialNavigation_timer_1:int;
	POOR:int;
	isInner:bool)

returns (idOrbitalState_Active_InertialNavigation:int;
	idCaptureApproach_OrbitalState_Active:int;
	InertialNavigation_AbsoluteAttitude:int;
	InertialNavigation_AbsolutePosition:int;
	InertialNavigation_AbsoluteVelocity:int;
	InertialNavigation_timer:int);


var 	idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_InertialNavigation_3, idOrbitalState_Active_InertialNavigation_4, idOrbitalState_Active_InertialNavigation_5, idOrbitalState_Active_InertialNavigation_6, idOrbitalState_Active_InertialNavigation_7:int;
	idCaptureApproach_OrbitalState_Active_2, idCaptureApproach_OrbitalState_Active_3, idCaptureApproach_OrbitalState_Active_4:int;
	InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsoluteAttitude_3, InertialNavigation_AbsoluteAttitude_4, InertialNavigation_AbsoluteAttitude_5, InertialNavigation_AbsoluteAttitude_6, InertialNavigation_AbsoluteAttitude_7:int;
	InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsolutePosition_3, InertialNavigation_AbsolutePosition_4, InertialNavigation_AbsolutePosition_5, InertialNavigation_AbsolutePosition_6, InertialNavigation_AbsolutePosition_7:int;
	InertialNavigation_AbsoluteVelocity_2, InertialNavigation_AbsoluteVelocity_3, InertialNavigation_AbsoluteVelocity_4, InertialNavigation_AbsoluteVelocity_5, InertialNavigation_AbsoluteVelocity_6, InertialNavigation_AbsoluteVelocity_7:int;
	InertialNavigation_timer_2, InertialNavigation_timer_3:int;


let



	-- set state as active 
	idCaptureApproach_OrbitalState_Active_2 
	= 1002;
	

	
-- transition trace :
	--POINT__To__InertialNavigation_ACQUIRING_1
		(idOrbitalState_Active_InertialNavigation_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_AbsoluteAttitude_2) 
	= InertialNavigation_ACQUIRING_en(idOrbitalState_Active_InertialNavigation_1, NONE, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_AbsoluteAttitude_1, false);
		

	(idOrbitalState_Active_InertialNavigation_3, idCaptureApproach_OrbitalState_Active_3, InertialNavigation_AbsoluteAttitude_3, InertialNavigation_AbsolutePosition_3, InertialNavigation_AbsoluteVelocity_3) 
	= 

	if ( idOrbitalState_Active_InertialNavigation_1 = 0) then

	 (idOrbitalState_Active_InertialNavigation_2, idCaptureApproach_OrbitalState_Active_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2)

	 else(idOrbitalState_Active_InertialNavigation_1, idCaptureApproach_OrbitalState_Active_2, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1);

	

	(idOrbitalState_Active_InertialNavigation_4, InertialNavigation_AbsolutePosition_4, InertialNavigation_AbsoluteVelocity_4, InertialNavigation_AbsoluteAttitude_4) 
	= 
	if ( idOrbitalState_Active_InertialNavigation_1 = 1003) then
	InertialNavigation_ACQUIRING_en(idOrbitalState_Active_InertialNavigation_1, NONE, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_AbsoluteAttitude_1, false)
	 else (idOrbitalState_Active_InertialNavigation_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_AbsoluteAttitude_1);

	

	(idOrbitalState_Active_InertialNavigation_5, InertialNavigation_timer_2, InertialNavigation_AbsolutePosition_5, InertialNavigation_AbsoluteVelocity_5, InertialNavigation_AbsoluteAttitude_5) 
	= 
	if ( idOrbitalState_Active_InertialNavigation_1 = 1004) then
	InertialNavigation_GOOD_en(idOrbitalState_Active_InertialNavigation_1, InertialNavigation_timer_1, GOOD, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_AbsoluteAttitude_1, false)
	 else (idOrbitalState_Active_InertialNavigation_1, InertialNavigation_timer_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_AbsoluteAttitude_1);

	

	(idOrbitalState_Active_InertialNavigation_6, InertialNavigation_AbsolutePosition_6, InertialNavigation_AbsoluteVelocity_6, InertialNavigation_AbsoluteAttitude_6) 
	= 
	if ( idOrbitalState_Active_InertialNavigation_1 = 963) then
	InertialNavigation_POOR_en(idOrbitalState_Active_InertialNavigation_1, POOR, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_AbsoluteAttitude_1, false)
	 else (idOrbitalState_Active_InertialNavigation_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_AbsoluteAttitude_1);

	

	(idOrbitalState_Active_InertialNavigation_7, idCaptureApproach_OrbitalState_Active_4, InertialNavigation_AbsoluteAttitude_7, InertialNavigation_AbsolutePosition_7, InertialNavigation_AbsoluteVelocity_7, InertialNavigation_timer_3) 
	= 
		 if ( idOrbitalState_Active_InertialNavigation_1 = 0) then 
		(idOrbitalState_Active_InertialNavigation_3, idCaptureApproach_OrbitalState_Active_3, InertialNavigation_AbsoluteAttitude_3, InertialNavigation_AbsolutePosition_3, InertialNavigation_AbsoluteVelocity_3, InertialNavigation_timer_1)
		 else
		 if ( idOrbitalState_Active_InertialNavigation_1 = 1003) then 
		(idOrbitalState_Active_InertialNavigation_4, idCaptureApproach_OrbitalState_Active_3, InertialNavigation_AbsoluteAttitude_4, InertialNavigation_AbsolutePosition_4, InertialNavigation_AbsoluteVelocity_4, InertialNavigation_timer_1)
		 else
		 if ( idOrbitalState_Active_InertialNavigation_1 = 1004) then 
		(idOrbitalState_Active_InertialNavigation_5, idCaptureApproach_OrbitalState_Active_3, InertialNavigation_AbsoluteAttitude_5, InertialNavigation_AbsolutePosition_5, InertialNavigation_AbsoluteVelocity_5, InertialNavigation_timer_2)
		 else
		 if ( idOrbitalState_Active_InertialNavigation_1 = 963) then 
		(idOrbitalState_Active_InertialNavigation_6, idCaptureApproach_OrbitalState_Active_3, InertialNavigation_AbsoluteAttitude_6, InertialNavigation_AbsolutePosition_6, InertialNavigation_AbsoluteVelocity_6, InertialNavigation_timer_2)
		 else (idOrbitalState_Active_InertialNavigation_1, idCaptureApproach_OrbitalState_Active_2, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1);


	(idOrbitalState_Active_InertialNavigation, idCaptureApproach_OrbitalState_Active, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer) 
	= (idOrbitalState_Active_InertialNavigation_7, idCaptureApproach_OrbitalState_Active_4, InertialNavigation_AbsoluteAttitude_7, InertialNavigation_AbsolutePosition_7, InertialNavigation_AbsoluteVelocity_7, InertialNavigation_timer_3);
	

tel





-- Exit action for state :OrbitalState_Active_InertialNavigation
node OrbitalState_Active_InertialNavigation_ex(idOrbitalState_Active_InertialNavigation_1:int;
	idCaptureApproach_OrbitalState_Active_1:int;
	isInner:bool)

returns (idOrbitalState_Active_InertialNavigation:int;
	idCaptureApproach_OrbitalState_Active:int);


var 	idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_InertialNavigation_3, idOrbitalState_Active_InertialNavigation_4, idOrbitalState_Active_InertialNavigation_5, idOrbitalState_Active_InertialNavigation_6:int;
	idCaptureApproach_OrbitalState_Active_2:int;


let



	
	(idOrbitalState_Active_InertialNavigation_2) 
	= 
	if ( idOrbitalState_Active_InertialNavigation_1 = 1003) then
	InertialNavigation_ACQUIRING_ex(idOrbitalState_Active_InertialNavigation_1, false)
	 else (idOrbitalState_Active_InertialNavigation_1);

	

	(idOrbitalState_Active_InertialNavigation_3) 
	= 
	if ( idOrbitalState_Active_InertialNavigation_1 = 1004) then
	InertialNavigation_GOOD_ex(idOrbitalState_Active_InertialNavigation_1, false)
	 else (idOrbitalState_Active_InertialNavigation_1);

	

	(idOrbitalState_Active_InertialNavigation_4) 
	= 
	if ( idOrbitalState_Active_InertialNavigation_1 = 963) then
	InertialNavigation_POOR_ex(idOrbitalState_Active_InertialNavigation_1, false)
	 else (idOrbitalState_Active_InertialNavigation_1);

	

	(idOrbitalState_Active_InertialNavigation_5) 
	= 
		 if ( idOrbitalState_Active_InertialNavigation_1 = 1003) then 
		(idOrbitalState_Active_InertialNavigation_2)
		 else
		 if ( idOrbitalState_Active_InertialNavigation_1 = 1004) then 
		(idOrbitalState_Active_InertialNavigation_3)
		 else
		 if ( idOrbitalState_Active_InertialNavigation_1 = 963) then 
		(idOrbitalState_Active_InertialNavigation_4)
		 else (idOrbitalState_Active_InertialNavigation_1);


	-- set state as inactive 
	idCaptureApproach_OrbitalState_Active_2
	 = if (not isInner) then 0 else idCaptureApproach_OrbitalState_Active_1;

	idOrbitalState_Active_InertialNavigation_6 
	= 0;
	

	(idOrbitalState_Active_InertialNavigation, idCaptureApproach_OrbitalState_Active) 
	= (idOrbitalState_Active_InertialNavigation_6, idCaptureApproach_OrbitalState_Active_1);
	

tel






-- Entry action for state :GPS_POOR
node GPS_POOR_en(idOrbitalState_Active_GPS_1:int;
	GPS_timer_1:int;
	POOR:int;
	GPS_AbsolutePosition_1:int;
	GPS_AbsoluteVelocity_1:int;
	GPS_AbsoluteTime_1:int;
	isInner:bool)

returns (idOrbitalState_Active_GPS:int;
	GPS_timer:int;
	GPS_AbsolutePosition:int;
	GPS_AbsoluteVelocity:int;
	GPS_AbsoluteTime:int);


var 	idOrbitalState_Active_GPS_2:int;
	GPS_timer_2:int;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteVelocity_2:int;
	GPS_AbsoluteTime_2:int;


let



	-- set state as active 
	idOrbitalState_Active_GPS_2 
	= 996;
	

	GPS_timer_2 
	= if (not isInner) then 0
	 else GPS_timer_1;
	

	GPS_AbsolutePosition_2 
	= if (not isInner) then POOR
	 else GPS_AbsolutePosition_1;
	

	GPS_AbsoluteVelocity_2 
	= if (not isInner) then POOR
	 else GPS_AbsoluteVelocity_1;
	

	GPS_AbsoluteTime_2 
	= if (not isInner) then POOR
	 else GPS_AbsoluteTime_1;
	

	(idOrbitalState_Active_GPS, GPS_timer, GPS_AbsolutePosition, GPS_AbsoluteVelocity, GPS_AbsoluteTime) 
	= (idOrbitalState_Active_GPS_2, GPS_timer_2, GPS_AbsolutePosition_2, GPS_AbsoluteVelocity_2, GPS_AbsoluteTime_2);
	

tel





-- Exit action for state :GPS_POOR
node GPS_POOR_ex(idOrbitalState_Active_GPS_1:int;
	isInner:bool)

returns (idOrbitalState_Active_GPS:int);


var 	idOrbitalState_Active_GPS_2:int;


let



	-- set state as inactive 
	idOrbitalState_Active_GPS_2
	 = if (not isInner) then 0 else idOrbitalState_Active_GPS_1;


	(idOrbitalState_Active_GPS) 
	= (idOrbitalState_Active_GPS_1);
	

tel






-- Entry action for state :GPS_GOOD
node GPS_GOOD_en(idOrbitalState_Active_GPS_1:int;
	GOOD:int;
	GPS_AbsolutePosition_1:int;
	GPS_AbsoluteVelocity_1:int;
	GPS_AbsoluteTime_1:int;
	isInner:bool)

returns (idOrbitalState_Active_GPS:int;
	GPS_AbsolutePosition:int;
	GPS_AbsoluteVelocity:int;
	GPS_AbsoluteTime:int);


var 	idOrbitalState_Active_GPS_2:int;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteVelocity_2:int;
	GPS_AbsoluteTime_2:int;


let



	-- set state as active 
	idOrbitalState_Active_GPS_2 
	= 997;
	

	GPS_AbsolutePosition_2 
	= if (not isInner) then GOOD
	 else GPS_AbsolutePosition_1;
	

	GPS_AbsoluteVelocity_2 
	= if (not isInner) then GOOD
	 else GPS_AbsoluteVelocity_1;
	

	GPS_AbsoluteTime_2 
	= if (not isInner) then GOOD
	 else GPS_AbsoluteTime_1;
	

	(idOrbitalState_Active_GPS, GPS_AbsolutePosition, GPS_AbsoluteVelocity, GPS_AbsoluteTime) 
	= (idOrbitalState_Active_GPS_2, GPS_AbsolutePosition_2, GPS_AbsoluteVelocity_2, GPS_AbsoluteTime_2);
	

tel





-- Exit action for state :GPS_GOOD
node GPS_GOOD_ex(idOrbitalState_Active_GPS_1:int;
	isInner:bool)

returns (idOrbitalState_Active_GPS:int);


var 	idOrbitalState_Active_GPS_2:int;


let



	-- set state as inactive 
	idOrbitalState_Active_GPS_2
	 = if (not isInner) then 0 else idOrbitalState_Active_GPS_1;


	(idOrbitalState_Active_GPS) 
	= (idOrbitalState_Active_GPS_1);
	

tel






-- Entry action for state :GPS_ACQUIRING
node GPS_ACQUIRING_en(idOrbitalState_Active_GPS_1:int;
	NONE:int;
	GPS_AbsolutePosition_1:int;
	GPS_AbsoluteVelocity_1:int;
	GPS_AbsoluteTime_1:int;
	isInner:bool)

returns (idOrbitalState_Active_GPS:int;
	GPS_AbsolutePosition:int;
	GPS_AbsoluteVelocity:int;
	GPS_AbsoluteTime:int);


var 	idOrbitalState_Active_GPS_2:int;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteVelocity_2:int;
	GPS_AbsoluteTime_2:int;


let



	-- set state as active 
	idOrbitalState_Active_GPS_2 
	= 995;
	

	GPS_AbsolutePosition_2 
	= if (not isInner) then NONE
	 else GPS_AbsolutePosition_1;
	

	GPS_AbsoluteVelocity_2 
	= if (not isInner) then NONE
	 else GPS_AbsoluteVelocity_1;
	

	GPS_AbsoluteTime_2 
	= if (not isInner) then NONE
	 else GPS_AbsoluteTime_1;
	

	(idOrbitalState_Active_GPS, GPS_AbsolutePosition, GPS_AbsoluteVelocity, GPS_AbsoluteTime) 
	= (idOrbitalState_Active_GPS_2, GPS_AbsolutePosition_2, GPS_AbsoluteVelocity_2, GPS_AbsoluteTime_2);
	

tel





-- Exit action for state :GPS_ACQUIRING
node GPS_ACQUIRING_ex(idOrbitalState_Active_GPS_1:int;
	isInner:bool)

returns (idOrbitalState_Active_GPS:int);


var 	idOrbitalState_Active_GPS_2:int;


let



	-- set state as inactive 
	idOrbitalState_Active_GPS_2
	 = if (not isInner) then 0 else idOrbitalState_Active_GPS_1;


	(idOrbitalState_Active_GPS) 
	= (idOrbitalState_Active_GPS_1);
	

tel






--During action for state :OrbitalState_Active_GPS
node OrbitalState_Active_GPS_du(GPS_timer_1:int;
	GPS_timer_upper_limit:int)

returns (GPS_timer:int);


var 	GPS_timer_2:int;


let



	GPS_timer_2 
	= min( GPS_timer_1 +1,GPS_timer_upper_limit);
	

	(GPS_timer) 
	= (GPS_timer_2);
	

tel





-- Entry action for state :OrbitalState_Active_GPS
node OrbitalState_Active_GPS_en(idOrbitalState_Active_GPS_1:int;
	idCaptureApproach_OrbitalState_Active_1:int;
	GPS_AbsolutePosition_1:int;
	GPS_AbsoluteTime_1:int;
	GPS_AbsoluteVelocity_1:int;
	NONE:int;
	GPS_timer_1:int;
	POOR:int;
	GOOD:int;
	isInner:bool)

returns (idOrbitalState_Active_GPS:int;
	idCaptureApproach_OrbitalState_Active:int;
	GPS_AbsolutePosition:int;
	GPS_AbsoluteTime:int;
	GPS_AbsoluteVelocity:int;
	GPS_timer:int);


var 	idOrbitalState_Active_GPS_2, idOrbitalState_Active_GPS_3, idOrbitalState_Active_GPS_4, idOrbitalState_Active_GPS_5, idOrbitalState_Active_GPS_6, idOrbitalState_Active_GPS_7:int;
	idCaptureApproach_OrbitalState_Active_2, idCaptureApproach_OrbitalState_Active_3, idCaptureApproach_OrbitalState_Active_4:int;
	GPS_AbsolutePosition_2, GPS_AbsolutePosition_3, GPS_AbsolutePosition_4, GPS_AbsolutePosition_5, GPS_AbsolutePosition_6, GPS_AbsolutePosition_7:int;
	GPS_AbsoluteTime_2, GPS_AbsoluteTime_3, GPS_AbsoluteTime_4, GPS_AbsoluteTime_5, GPS_AbsoluteTime_6, GPS_AbsoluteTime_7:int;
	GPS_AbsoluteVelocity_2, GPS_AbsoluteVelocity_3, GPS_AbsoluteVelocity_4, GPS_AbsoluteVelocity_5, GPS_AbsoluteVelocity_6, GPS_AbsoluteVelocity_7:int;
	GPS_timer_2, GPS_timer_3:int;


let



	-- set state as active 
	idCaptureApproach_OrbitalState_Active_2 
	= 994;
	

	
-- transition trace :
	--POINT__To__GPS_ACQUIRING_1
		(idOrbitalState_Active_GPS_2, GPS_AbsolutePosition_2, GPS_AbsoluteVelocity_2, GPS_AbsoluteTime_2) 
	= GPS_ACQUIRING_en(idOrbitalState_Active_GPS_1, NONE, GPS_AbsolutePosition_1, GPS_AbsoluteVelocity_1, GPS_AbsoluteTime_1, false);
		

	(idOrbitalState_Active_GPS_3, idCaptureApproach_OrbitalState_Active_3, GPS_AbsolutePosition_3, GPS_AbsoluteTime_3, GPS_AbsoluteVelocity_3) 
	= 

	if ( idOrbitalState_Active_GPS_1 = 0) then

	 (idOrbitalState_Active_GPS_2, idCaptureApproach_OrbitalState_Active_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2)

	 else(idOrbitalState_Active_GPS_1, idCaptureApproach_OrbitalState_Active_2, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1);

	

	(idOrbitalState_Active_GPS_4, GPS_AbsolutePosition_4, GPS_AbsoluteVelocity_4, GPS_AbsoluteTime_4) 
	= 
	if ( idOrbitalState_Active_GPS_1 = 995) then
	GPS_ACQUIRING_en(idOrbitalState_Active_GPS_1, NONE, GPS_AbsolutePosition_1, GPS_AbsoluteVelocity_1, GPS_AbsoluteTime_1, false)
	 else (idOrbitalState_Active_GPS_1, GPS_AbsolutePosition_1, GPS_AbsoluteVelocity_1, GPS_AbsoluteTime_1);

	

	(idOrbitalState_Active_GPS_5, GPS_timer_2, GPS_AbsolutePosition_5, GPS_AbsoluteVelocity_5, GPS_AbsoluteTime_5) 
	= 
	if ( idOrbitalState_Active_GPS_1 = 996) then
	GPS_POOR_en(idOrbitalState_Active_GPS_1, GPS_timer_1, POOR, GPS_AbsolutePosition_1, GPS_AbsoluteVelocity_1, GPS_AbsoluteTime_1, false)
	 else (idOrbitalState_Active_GPS_1, GPS_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteVelocity_1, GPS_AbsoluteTime_1);

	

	(idOrbitalState_Active_GPS_6, GPS_AbsolutePosition_6, GPS_AbsoluteVelocity_6, GPS_AbsoluteTime_6) 
	= 
	if ( idOrbitalState_Active_GPS_1 = 997) then
	GPS_GOOD_en(idOrbitalState_Active_GPS_1, GOOD, GPS_AbsolutePosition_1, GPS_AbsoluteVelocity_1, GPS_AbsoluteTime_1, false)
	 else (idOrbitalState_Active_GPS_1, GPS_AbsolutePosition_1, GPS_AbsoluteVelocity_1, GPS_AbsoluteTime_1);

	

	(idOrbitalState_Active_GPS_7, idCaptureApproach_OrbitalState_Active_4, GPS_AbsolutePosition_7, GPS_AbsoluteTime_7, GPS_AbsoluteVelocity_7, GPS_timer_3) 
	= 
		 if ( idOrbitalState_Active_GPS_1 = 0) then 
		(idOrbitalState_Active_GPS_3, idCaptureApproach_OrbitalState_Active_3, GPS_AbsolutePosition_3, GPS_AbsoluteTime_3, GPS_AbsoluteVelocity_3, GPS_timer_1)
		 else
		 if ( idOrbitalState_Active_GPS_1 = 995) then 
		(idOrbitalState_Active_GPS_4, idCaptureApproach_OrbitalState_Active_3, GPS_AbsolutePosition_4, GPS_AbsoluteTime_4, GPS_AbsoluteVelocity_4, GPS_timer_1)
		 else
		 if ( idOrbitalState_Active_GPS_1 = 996) then 
		(idOrbitalState_Active_GPS_5, idCaptureApproach_OrbitalState_Active_3, GPS_AbsolutePosition_5, GPS_AbsoluteTime_5, GPS_AbsoluteVelocity_5, GPS_timer_2)
		 else
		 if ( idOrbitalState_Active_GPS_1 = 997) then 
		(idOrbitalState_Active_GPS_6, idCaptureApproach_OrbitalState_Active_3, GPS_AbsolutePosition_6, GPS_AbsoluteTime_6, GPS_AbsoluteVelocity_6, GPS_timer_2)
		 else (idOrbitalState_Active_GPS_1, idCaptureApproach_OrbitalState_Active_2, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1);


	(idOrbitalState_Active_GPS, idCaptureApproach_OrbitalState_Active, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer) 
	= (idOrbitalState_Active_GPS_7, idCaptureApproach_OrbitalState_Active_4, GPS_AbsolutePosition_7, GPS_AbsoluteTime_7, GPS_AbsoluteVelocity_7, GPS_timer_3);
	

tel





-- Exit action for state :OrbitalState_Active_GPS
node OrbitalState_Active_GPS_ex(idOrbitalState_Active_GPS_1:int;
	idCaptureApproach_OrbitalState_Active_1:int;
	isInner:bool)

returns (idOrbitalState_Active_GPS:int;
	idCaptureApproach_OrbitalState_Active:int);


var 	idOrbitalState_Active_GPS_2, idOrbitalState_Active_GPS_3, idOrbitalState_Active_GPS_4, idOrbitalState_Active_GPS_5, idOrbitalState_Active_GPS_6:int;
	idCaptureApproach_OrbitalState_Active_2:int;


let



	
	(idOrbitalState_Active_GPS_2) 
	= 
	if ( idOrbitalState_Active_GPS_1 = 995) then
	GPS_ACQUIRING_ex(idOrbitalState_Active_GPS_1, false)
	 else (idOrbitalState_Active_GPS_1);

	

	(idOrbitalState_Active_GPS_3) 
	= 
	if ( idOrbitalState_Active_GPS_1 = 996) then
	GPS_POOR_ex(idOrbitalState_Active_GPS_1, false)
	 else (idOrbitalState_Active_GPS_1);

	

	(idOrbitalState_Active_GPS_4) 
	= 
	if ( idOrbitalState_Active_GPS_1 = 997) then
	GPS_GOOD_ex(idOrbitalState_Active_GPS_1, false)
	 else (idOrbitalState_Active_GPS_1);

	

	(idOrbitalState_Active_GPS_5) 
	= 
		 if ( idOrbitalState_Active_GPS_1 = 995) then 
		(idOrbitalState_Active_GPS_2)
		 else
		 if ( idOrbitalState_Active_GPS_1 = 996) then 
		(idOrbitalState_Active_GPS_3)
		 else
		 if ( idOrbitalState_Active_GPS_1 = 997) then 
		(idOrbitalState_Active_GPS_4)
		 else (idOrbitalState_Active_GPS_1);


	-- set state as inactive 
	idCaptureApproach_OrbitalState_Active_2
	 = if (not isInner) then 0 else idCaptureApproach_OrbitalState_Active_1;

	idOrbitalState_Active_GPS_6 
	= 0;
	

	(idOrbitalState_Active_GPS, idCaptureApproach_OrbitalState_Active) 
	= (idOrbitalState_Active_GPS_6, idCaptureApproach_OrbitalState_Active_1);
	

tel






-- Entry action for state :OrbitalState2_GOOD
node OrbitalState2_GOOD_en(idOrbitalState_Complex_OrbitalState2_1:int;
	GOOD:int;
	OrbitalState_Time_1:int;
	isInner:bool)

returns (idOrbitalState_Complex_OrbitalState2:int;
	OrbitalState_Time:int);


var 	idOrbitalState_Complex_OrbitalState2_2:int;
	OrbitalState_Time_2:int;


let



	-- set state as active 
	idOrbitalState_Complex_OrbitalState2_2 
	= 993;
	

	OrbitalState_Time_2 
	= if (not isInner) then GOOD
	 else OrbitalState_Time_1;
	

	(idOrbitalState_Complex_OrbitalState2, OrbitalState_Time) 
	= (idOrbitalState_Complex_OrbitalState2_2, OrbitalState_Time_2);
	

tel





-- Exit action for state :OrbitalState2_GOOD
node OrbitalState2_GOOD_ex(idOrbitalState_Complex_OrbitalState2_1:int;
	isInner:bool)

returns (idOrbitalState_Complex_OrbitalState2:int);


var 	idOrbitalState_Complex_OrbitalState2_2:int;


let



	-- set state as inactive 
	idOrbitalState_Complex_OrbitalState2_2
	 = if (not isInner) then 0 else idOrbitalState_Complex_OrbitalState2_1;


	(idOrbitalState_Complex_OrbitalState2) 
	= (idOrbitalState_Complex_OrbitalState2_1);
	

tel






-- Entry action for state :OrbitalState2_POOR
node OrbitalState2_POOR_en(idOrbitalState_Complex_OrbitalState2_1:int;
	POOR:int;
	OrbitalState_Time_1:int;
	isInner:bool)

returns (idOrbitalState_Complex_OrbitalState2:int;
	OrbitalState_Time:int);


var 	idOrbitalState_Complex_OrbitalState2_2:int;
	OrbitalState_Time_2:int;


let



	-- set state as active 
	idOrbitalState_Complex_OrbitalState2_2 
	= 992;
	

	OrbitalState_Time_2 
	= if (not isInner) then POOR
	 else OrbitalState_Time_1;
	

	(idOrbitalState_Complex_OrbitalState2, OrbitalState_Time) 
	= (idOrbitalState_Complex_OrbitalState2_2, OrbitalState_Time_2);
	

tel





-- Exit action for state :OrbitalState2_POOR
node OrbitalState2_POOR_ex(idOrbitalState_Complex_OrbitalState2_1:int;
	isInner:bool)

returns (idOrbitalState_Complex_OrbitalState2:int);


var 	idOrbitalState_Complex_OrbitalState2_2:int;


let



	-- set state as inactive 
	idOrbitalState_Complex_OrbitalState2_2
	 = if (not isInner) then 0 else idOrbitalState_Complex_OrbitalState2_1;


	(idOrbitalState_Complex_OrbitalState2) 
	= (idOrbitalState_Complex_OrbitalState2_1);
	

tel






-- Entry action for state :OrbitalState_Complex_OrbitalState2
node OrbitalState_Complex_OrbitalState2_en(idOrbitalState_Complex_OrbitalState2_1:int;
	idOrbitalState_Active_OrbitalState_Complex_1:int;
	OrbitalState_Time_1:int;
	POOR:int;
	GOOD:int;
	isInner:bool)

returns (idOrbitalState_Complex_OrbitalState2:int;
	idOrbitalState_Active_OrbitalState_Complex:int;
	OrbitalState_Time:int);


var 	idOrbitalState_Complex_OrbitalState2_2, idOrbitalState_Complex_OrbitalState2_3, idOrbitalState_Complex_OrbitalState2_4, idOrbitalState_Complex_OrbitalState2_5, idOrbitalState_Complex_OrbitalState2_6:int;
	idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_OrbitalState_Complex_3, idOrbitalState_Active_OrbitalState_Complex_4:int;
	OrbitalState_Time_2, OrbitalState_Time_3, OrbitalState_Time_4, OrbitalState_Time_5, OrbitalState_Time_6:int;


let



	-- set state as active 
	idOrbitalState_Active_OrbitalState_Complex_2 
	= 991;
	

	
-- transition trace :
	--POINT__To__OrbitalState2_POOR_1
		(idOrbitalState_Complex_OrbitalState2_2, OrbitalState_Time_2) 
	= OrbitalState2_POOR_en(idOrbitalState_Complex_OrbitalState2_1, POOR, OrbitalState_Time_1, false);
		

	(idOrbitalState_Complex_OrbitalState2_3, idOrbitalState_Active_OrbitalState_Complex_3, OrbitalState_Time_3) 
	= 

	if ( idOrbitalState_Complex_OrbitalState2_1 = 0) then

	 (idOrbitalState_Complex_OrbitalState2_2, idOrbitalState_Active_OrbitalState_Complex_2, OrbitalState_Time_2)

	 else(idOrbitalState_Complex_OrbitalState2_1, idOrbitalState_Active_OrbitalState_Complex_2, OrbitalState_Time_1);

	

	(idOrbitalState_Complex_OrbitalState2_4, OrbitalState_Time_4) 
	= 
	if ( idOrbitalState_Complex_OrbitalState2_1 = 992) then
	OrbitalState2_POOR_en(idOrbitalState_Complex_OrbitalState2_1, POOR, OrbitalState_Time_1, false)
	 else (idOrbitalState_Complex_OrbitalState2_1, OrbitalState_Time_1);

	

	(idOrbitalState_Complex_OrbitalState2_5, OrbitalState_Time_5) 
	= 
	if ( idOrbitalState_Complex_OrbitalState2_1 = 993) then
	OrbitalState2_GOOD_en(idOrbitalState_Complex_OrbitalState2_1, GOOD, OrbitalState_Time_1, false)
	 else (idOrbitalState_Complex_OrbitalState2_1, OrbitalState_Time_1);

	

	(idOrbitalState_Complex_OrbitalState2_6, idOrbitalState_Active_OrbitalState_Complex_4, OrbitalState_Time_6) 
	= 
		 if ( idOrbitalState_Complex_OrbitalState2_1 = 0) then 
		(idOrbitalState_Complex_OrbitalState2_3, idOrbitalState_Active_OrbitalState_Complex_3, OrbitalState_Time_3)
		 else
		 if ( idOrbitalState_Complex_OrbitalState2_1 = 992) then 
		(idOrbitalState_Complex_OrbitalState2_4, idOrbitalState_Active_OrbitalState_Complex_3, OrbitalState_Time_4)
		 else
		 if ( idOrbitalState_Complex_OrbitalState2_1 = 993) then 
		(idOrbitalState_Complex_OrbitalState2_5, idOrbitalState_Active_OrbitalState_Complex_3, OrbitalState_Time_5)
		 else (idOrbitalState_Complex_OrbitalState2_1, idOrbitalState_Active_OrbitalState_Complex_2, OrbitalState_Time_1);


	(idOrbitalState_Complex_OrbitalState2, idOrbitalState_Active_OrbitalState_Complex, OrbitalState_Time) 
	= (idOrbitalState_Complex_OrbitalState2_6, idOrbitalState_Active_OrbitalState_Complex_4, OrbitalState_Time_6);
	

tel





-- Exit action for state :OrbitalState_Complex_OrbitalState2
node OrbitalState_Complex_OrbitalState2_ex(idOrbitalState_Complex_OrbitalState2_1:int;
	idOrbitalState_Active_OrbitalState_Complex_1:int;
	isInner:bool)

returns (idOrbitalState_Complex_OrbitalState2:int;
	idOrbitalState_Active_OrbitalState_Complex:int);


var 	idOrbitalState_Complex_OrbitalState2_2, idOrbitalState_Complex_OrbitalState2_3, idOrbitalState_Complex_OrbitalState2_4, idOrbitalState_Complex_OrbitalState2_5:int;
	idOrbitalState_Active_OrbitalState_Complex_2:int;


let



	
	(idOrbitalState_Complex_OrbitalState2_2) 
	= 
	if ( idOrbitalState_Complex_OrbitalState2_1 = 992) then
	OrbitalState2_POOR_ex(idOrbitalState_Complex_OrbitalState2_1, false)
	 else (idOrbitalState_Complex_OrbitalState2_1);

	

	(idOrbitalState_Complex_OrbitalState2_3) 
	= 
	if ( idOrbitalState_Complex_OrbitalState2_1 = 993) then
	OrbitalState2_GOOD_ex(idOrbitalState_Complex_OrbitalState2_1, false)
	 else (idOrbitalState_Complex_OrbitalState2_1);

	

	(idOrbitalState_Complex_OrbitalState2_4) 
	= 
		 if ( idOrbitalState_Complex_OrbitalState2_1 = 992) then 
		(idOrbitalState_Complex_OrbitalState2_2)
		 else
		 if ( idOrbitalState_Complex_OrbitalState2_1 = 993) then 
		(idOrbitalState_Complex_OrbitalState2_3)
		 else (idOrbitalState_Complex_OrbitalState2_1);


	-- set state as inactive 
	idOrbitalState_Active_OrbitalState_Complex_2
	 = if (not isInner) then 0 else idOrbitalState_Active_OrbitalState_Complex_1;

	idOrbitalState_Complex_OrbitalState2_5 
	= 0;
	

	(idOrbitalState_Complex_OrbitalState2, idOrbitalState_Active_OrbitalState_Complex) 
	= (idOrbitalState_Complex_OrbitalState2_5, idOrbitalState_Active_OrbitalState_Complex_1);
	

tel






-- Entry action for state :OrbitalState_POOR
node OrbitalState_POOR_en(idOrbitalState_Complex_OrbitalState_1:int;
	POOR:int;
	OrbitalState_Position_1:int;
	OrbitalState_Velocity_1:int;
	NONE:int;
	OrbitalState_Attitude_1:int;
	isInner:bool)

returns (idOrbitalState_Complex_OrbitalState:int;
	OrbitalState_Position:int;
	OrbitalState_Velocity:int;
	OrbitalState_Attitude:int);


var 	idOrbitalState_Complex_OrbitalState_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Velocity_2:int;
	OrbitalState_Attitude_2:int;


let



	-- set state as active 
	idOrbitalState_Complex_OrbitalState_2 
	= 987;
	

	OrbitalState_Position_2 
	= if (not isInner) then POOR
	 else OrbitalState_Position_1;
	

	OrbitalState_Velocity_2 
	= if (not isInner) then POOR
	 else OrbitalState_Velocity_1;
	

	OrbitalState_Attitude_2 
	= if (not isInner) then NONE
	 else OrbitalState_Attitude_1;
	

	(idOrbitalState_Complex_OrbitalState, OrbitalState_Position, OrbitalState_Velocity, OrbitalState_Attitude) 
	= (idOrbitalState_Complex_OrbitalState_2, OrbitalState_Position_2, OrbitalState_Velocity_2, OrbitalState_Attitude_2);
	

tel





-- Exit action for state :OrbitalState_POOR
node OrbitalState_POOR_ex(idOrbitalState_Complex_OrbitalState_1:int;
	isInner:bool)

returns (idOrbitalState_Complex_OrbitalState:int);


var 	idOrbitalState_Complex_OrbitalState_2:int;


let



	-- set state as inactive 
	idOrbitalState_Complex_OrbitalState_2
	 = if (not isInner) then 0 else idOrbitalState_Complex_OrbitalState_1;


	(idOrbitalState_Complex_OrbitalState) 
	= (idOrbitalState_Complex_OrbitalState_1);
	

tel






-- Entry action for state :OrbitalState_Acquiring
node OrbitalState_Acquiring_en(idOrbitalState_Complex_OrbitalState_1:int;
	NONE:int;
	OrbitalState_Position_1:int;
	OrbitalState_Velocity_1:int;
	OrbitalState_Attitude_1:int;
	isInner:bool)

returns (idOrbitalState_Complex_OrbitalState:int;
	OrbitalState_Position:int;
	OrbitalState_Velocity:int;
	OrbitalState_Attitude:int);


var 	idOrbitalState_Complex_OrbitalState_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Velocity_2:int;
	OrbitalState_Attitude_2:int;


let



	-- set state as active 
	idOrbitalState_Complex_OrbitalState_2 
	= 986;
	

	OrbitalState_Position_2 
	= if (not isInner) then NONE
	 else OrbitalState_Position_1;
	

	OrbitalState_Velocity_2 
	= if (not isInner) then NONE
	 else OrbitalState_Velocity_1;
	

	OrbitalState_Attitude_2 
	= if (not isInner) then NONE
	 else OrbitalState_Attitude_1;
	

	(idOrbitalState_Complex_OrbitalState, OrbitalState_Position, OrbitalState_Velocity, OrbitalState_Attitude) 
	= (idOrbitalState_Complex_OrbitalState_2, OrbitalState_Position_2, OrbitalState_Velocity_2, OrbitalState_Attitude_2);
	

tel





-- Exit action for state :OrbitalState_Acquiring
node OrbitalState_Acquiring_ex(idOrbitalState_Complex_OrbitalState_1:int;
	isInner:bool)

returns (idOrbitalState_Complex_OrbitalState:int);


var 	idOrbitalState_Complex_OrbitalState_2:int;


let



	-- set state as inactive 
	idOrbitalState_Complex_OrbitalState_2
	 = if (not isInner) then 0 else idOrbitalState_Complex_OrbitalState_1;


	(idOrbitalState_Complex_OrbitalState) 
	= (idOrbitalState_Complex_OrbitalState_1);
	

tel






-- Entry action for state :OrbitalState_GOOD
node OrbitalState_GOOD_en(idOrbitalState_Complex_OrbitalState_1:int;
	GOOD:int;
	OrbitalState_Position_1:int;
	OrbitalState_Velocity_1:int;
	OrbitalState_Attitude_1:int;
	isInner:bool)

returns (idOrbitalState_Complex_OrbitalState:int;
	OrbitalState_Position:int;
	OrbitalState_Velocity:int;
	OrbitalState_Attitude:int);


var 	idOrbitalState_Complex_OrbitalState_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Velocity_2:int;
	OrbitalState_Attitude_2:int;


let



	-- set state as active 
	idOrbitalState_Complex_OrbitalState_2 
	= 989;
	

	OrbitalState_Position_2 
	= if (not isInner) then GOOD
	 else OrbitalState_Position_1;
	

	OrbitalState_Velocity_2 
	= if (not isInner) then GOOD
	 else OrbitalState_Velocity_1;
	

	OrbitalState_Attitude_2 
	= if (not isInner) then GOOD
	 else OrbitalState_Attitude_1;
	

	(idOrbitalState_Complex_OrbitalState, OrbitalState_Position, OrbitalState_Velocity, OrbitalState_Attitude) 
	= (idOrbitalState_Complex_OrbitalState_2, OrbitalState_Position_2, OrbitalState_Velocity_2, OrbitalState_Attitude_2);
	

tel





-- Exit action for state :OrbitalState_GOOD
node OrbitalState_GOOD_ex(idOrbitalState_Complex_OrbitalState_1:int;
	isInner:bool)

returns (idOrbitalState_Complex_OrbitalState:int);


var 	idOrbitalState_Complex_OrbitalState_2:int;


let



	-- set state as inactive 
	idOrbitalState_Complex_OrbitalState_2
	 = if (not isInner) then 0 else idOrbitalState_Complex_OrbitalState_1;


	(idOrbitalState_Complex_OrbitalState) 
	= (idOrbitalState_Complex_OrbitalState_1);
	

tel






-- Entry action for state :OrbitalState_pvGOOD
node OrbitalState_pvGOOD_en(idOrbitalState_Complex_OrbitalState_1:int;
	GOOD:int;
	OrbitalState_Position_1:int;
	OrbitalState_Velocity_1:int;
	POOR:int;
	OrbitalState_Attitude_1:int;
	isInner:bool)

returns (idOrbitalState_Complex_OrbitalState:int;
	OrbitalState_Position:int;
	OrbitalState_Velocity:int;
	OrbitalState_Attitude:int);


var 	idOrbitalState_Complex_OrbitalState_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Velocity_2:int;
	OrbitalState_Attitude_2:int;


let



	-- set state as active 
	idOrbitalState_Complex_OrbitalState_2 
	= 988;
	

	OrbitalState_Position_2 
	= if (not isInner) then GOOD
	 else OrbitalState_Position_1;
	

	OrbitalState_Velocity_2 
	= if (not isInner) then GOOD
	 else OrbitalState_Velocity_1;
	

	OrbitalState_Attitude_2 
	= if (not isInner) then POOR
	 else OrbitalState_Attitude_1;
	

	(idOrbitalState_Complex_OrbitalState, OrbitalState_Position, OrbitalState_Velocity, OrbitalState_Attitude) 
	= (idOrbitalState_Complex_OrbitalState_2, OrbitalState_Position_2, OrbitalState_Velocity_2, OrbitalState_Attitude_2);
	

tel





-- Exit action for state :OrbitalState_pvGOOD
node OrbitalState_pvGOOD_ex(idOrbitalState_Complex_OrbitalState_1:int;
	isInner:bool)

returns (idOrbitalState_Complex_OrbitalState:int);


var 	idOrbitalState_Complex_OrbitalState_2:int;


let



	-- set state as inactive 
	idOrbitalState_Complex_OrbitalState_2
	 = if (not isInner) then 0 else idOrbitalState_Complex_OrbitalState_1;


	(idOrbitalState_Complex_OrbitalState) 
	= (idOrbitalState_Complex_OrbitalState_1);
	

tel






-- Entry action for state :OrbitalState_Complex_OrbitalState
node OrbitalState_Complex_OrbitalState_en(idOrbitalState_Complex_OrbitalState_1:int;
	idOrbitalState_Active_OrbitalState_Complex_1:int;
	NONE:int;
	OrbitalState_Attitude_1:int;
	OrbitalState_Position_1:int;
	OrbitalState_Velocity_1:int;
	POOR:int;
	GOOD:int;
	isInner:bool)

returns (idOrbitalState_Complex_OrbitalState:int;
	idOrbitalState_Active_OrbitalState_Complex:int;
	OrbitalState_Attitude:int;
	OrbitalState_Position:int;
	OrbitalState_Velocity:int);


var 	idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState_3, idOrbitalState_Complex_OrbitalState_4, idOrbitalState_Complex_OrbitalState_5, idOrbitalState_Complex_OrbitalState_6, idOrbitalState_Complex_OrbitalState_7, idOrbitalState_Complex_OrbitalState_8:int;
	idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_OrbitalState_Complex_3, idOrbitalState_Active_OrbitalState_Complex_4:int;
	OrbitalState_Attitude_2, OrbitalState_Attitude_3, OrbitalState_Attitude_4, OrbitalState_Attitude_5, OrbitalState_Attitude_6, OrbitalState_Attitude_7, OrbitalState_Attitude_8:int;
	OrbitalState_Position_2, OrbitalState_Position_3, OrbitalState_Position_4, OrbitalState_Position_5, OrbitalState_Position_6, OrbitalState_Position_7, OrbitalState_Position_8:int;
	OrbitalState_Velocity_2, OrbitalState_Velocity_3, OrbitalState_Velocity_4, OrbitalState_Velocity_5, OrbitalState_Velocity_6, OrbitalState_Velocity_7, OrbitalState_Velocity_8:int;


let



	-- set state as active 
	idOrbitalState_Active_OrbitalState_Complex_2 
	= 985;
	

	
-- transition trace :
	--POINT__To__OrbitalState_Acquiring_1
		(idOrbitalState_Complex_OrbitalState_2, OrbitalState_Position_2, OrbitalState_Velocity_2, OrbitalState_Attitude_2) 
	= OrbitalState_Acquiring_en(idOrbitalState_Complex_OrbitalState_1, NONE, OrbitalState_Position_1, OrbitalState_Velocity_1, OrbitalState_Attitude_1, false);
		

	(idOrbitalState_Complex_OrbitalState_3, idOrbitalState_Active_OrbitalState_Complex_3, OrbitalState_Attitude_3, OrbitalState_Position_3, OrbitalState_Velocity_3) 
	= 

	if ( idOrbitalState_Complex_OrbitalState_1 = 0) then

	 (idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Active_OrbitalState_Complex_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Velocity_2)

	 else(idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Active_OrbitalState_Complex_2, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Velocity_1);

	

	(idOrbitalState_Complex_OrbitalState_4, OrbitalState_Position_4, OrbitalState_Velocity_4, OrbitalState_Attitude_4) 
	= 
	if ( idOrbitalState_Complex_OrbitalState_1 = 986) then
	OrbitalState_Acquiring_en(idOrbitalState_Complex_OrbitalState_1, NONE, OrbitalState_Position_1, OrbitalState_Velocity_1, OrbitalState_Attitude_1, false)
	 else (idOrbitalState_Complex_OrbitalState_1, OrbitalState_Position_1, OrbitalState_Velocity_1, OrbitalState_Attitude_1);

	

	(idOrbitalState_Complex_OrbitalState_5, OrbitalState_Position_5, OrbitalState_Velocity_5, OrbitalState_Attitude_5) 
	= 
	if ( idOrbitalState_Complex_OrbitalState_1 = 987) then
	OrbitalState_POOR_en(idOrbitalState_Complex_OrbitalState_1, POOR, OrbitalState_Position_1, OrbitalState_Velocity_1, NONE, OrbitalState_Attitude_1, false)
	 else (idOrbitalState_Complex_OrbitalState_1, OrbitalState_Position_1, OrbitalState_Velocity_1, OrbitalState_Attitude_1);

	

	(idOrbitalState_Complex_OrbitalState_6, OrbitalState_Position_6, OrbitalState_Velocity_6, OrbitalState_Attitude_6) 
	= 
	if ( idOrbitalState_Complex_OrbitalState_1 = 988) then
	OrbitalState_pvGOOD_en(idOrbitalState_Complex_OrbitalState_1, GOOD, OrbitalState_Position_1, OrbitalState_Velocity_1, POOR, OrbitalState_Attitude_1, false)
	 else (idOrbitalState_Complex_OrbitalState_1, OrbitalState_Position_1, OrbitalState_Velocity_1, OrbitalState_Attitude_1);

	

	(idOrbitalState_Complex_OrbitalState_7, OrbitalState_Position_7, OrbitalState_Velocity_7, OrbitalState_Attitude_7) 
	= 
	if ( idOrbitalState_Complex_OrbitalState_1 = 989) then
	OrbitalState_GOOD_en(idOrbitalState_Complex_OrbitalState_1, GOOD, OrbitalState_Position_1, OrbitalState_Velocity_1, OrbitalState_Attitude_1, false)
	 else (idOrbitalState_Complex_OrbitalState_1, OrbitalState_Position_1, OrbitalState_Velocity_1, OrbitalState_Attitude_1);

	

	(idOrbitalState_Complex_OrbitalState_8, idOrbitalState_Active_OrbitalState_Complex_4, OrbitalState_Attitude_8, OrbitalState_Position_8, OrbitalState_Velocity_8) 
	= 
		 if ( idOrbitalState_Complex_OrbitalState_1 = 0) then 
		(idOrbitalState_Complex_OrbitalState_3, idOrbitalState_Active_OrbitalState_Complex_3, OrbitalState_Attitude_3, OrbitalState_Position_3, OrbitalState_Velocity_3)
		 else
		 if ( idOrbitalState_Complex_OrbitalState_1 = 986) then 
		(idOrbitalState_Complex_OrbitalState_4, idOrbitalState_Active_OrbitalState_Complex_3, OrbitalState_Attitude_4, OrbitalState_Position_4, OrbitalState_Velocity_4)
		 else
		 if ( idOrbitalState_Complex_OrbitalState_1 = 987) then 
		(idOrbitalState_Complex_OrbitalState_5, idOrbitalState_Active_OrbitalState_Complex_3, OrbitalState_Attitude_5, OrbitalState_Position_5, OrbitalState_Velocity_5)
		 else
		 if ( idOrbitalState_Complex_OrbitalState_1 = 988) then 
		(idOrbitalState_Complex_OrbitalState_6, idOrbitalState_Active_OrbitalState_Complex_3, OrbitalState_Attitude_6, OrbitalState_Position_6, OrbitalState_Velocity_6)
		 else
		 if ( idOrbitalState_Complex_OrbitalState_1 = 989) then 
		(idOrbitalState_Complex_OrbitalState_7, idOrbitalState_Active_OrbitalState_Complex_3, OrbitalState_Attitude_7, OrbitalState_Position_7, OrbitalState_Velocity_7)
		 else (idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Active_OrbitalState_Complex_2, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Velocity_1);


	(idOrbitalState_Complex_OrbitalState, idOrbitalState_Active_OrbitalState_Complex, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Velocity) 
	= (idOrbitalState_Complex_OrbitalState_8, idOrbitalState_Active_OrbitalState_Complex_4, OrbitalState_Attitude_8, OrbitalState_Position_8, OrbitalState_Velocity_8);
	

tel





-- Exit action for state :OrbitalState_Complex_OrbitalState
node OrbitalState_Complex_OrbitalState_ex(idOrbitalState_Complex_OrbitalState_1:int;
	idOrbitalState_Active_OrbitalState_Complex_1:int;
	isInner:bool)

returns (idOrbitalState_Complex_OrbitalState:int;
	idOrbitalState_Active_OrbitalState_Complex:int);


var 	idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState_3, idOrbitalState_Complex_OrbitalState_4, idOrbitalState_Complex_OrbitalState_5, idOrbitalState_Complex_OrbitalState_6, idOrbitalState_Complex_OrbitalState_7:int;
	idOrbitalState_Active_OrbitalState_Complex_2:int;


let



	
	(idOrbitalState_Complex_OrbitalState_2) 
	= 
	if ( idOrbitalState_Complex_OrbitalState_1 = 986) then
	OrbitalState_Acquiring_ex(idOrbitalState_Complex_OrbitalState_1, false)
	 else (idOrbitalState_Complex_OrbitalState_1);

	

	(idOrbitalState_Complex_OrbitalState_3) 
	= 
	if ( idOrbitalState_Complex_OrbitalState_1 = 987) then
	OrbitalState_POOR_ex(idOrbitalState_Complex_OrbitalState_1, false)
	 else (idOrbitalState_Complex_OrbitalState_1);

	

	(idOrbitalState_Complex_OrbitalState_4) 
	= 
	if ( idOrbitalState_Complex_OrbitalState_1 = 988) then
	OrbitalState_pvGOOD_ex(idOrbitalState_Complex_OrbitalState_1, false)
	 else (idOrbitalState_Complex_OrbitalState_1);

	

	(idOrbitalState_Complex_OrbitalState_5) 
	= 
	if ( idOrbitalState_Complex_OrbitalState_1 = 989) then
	OrbitalState_GOOD_ex(idOrbitalState_Complex_OrbitalState_1, false)
	 else (idOrbitalState_Complex_OrbitalState_1);

	

	(idOrbitalState_Complex_OrbitalState_6) 
	= 
		 if ( idOrbitalState_Complex_OrbitalState_1 = 986) then 
		(idOrbitalState_Complex_OrbitalState_2)
		 else
		 if ( idOrbitalState_Complex_OrbitalState_1 = 987) then 
		(idOrbitalState_Complex_OrbitalState_3)
		 else
		 if ( idOrbitalState_Complex_OrbitalState_1 = 988) then 
		(idOrbitalState_Complex_OrbitalState_4)
		 else
		 if ( idOrbitalState_Complex_OrbitalState_1 = 989) then 
		(idOrbitalState_Complex_OrbitalState_5)
		 else (idOrbitalState_Complex_OrbitalState_1);


	-- set state as inactive 
	idOrbitalState_Active_OrbitalState_Complex_2
	 = if (not isInner) then 0 else idOrbitalState_Active_OrbitalState_Complex_1;

	idOrbitalState_Complex_OrbitalState_7 
	= 0;
	

	(idOrbitalState_Complex_OrbitalState, idOrbitalState_Active_OrbitalState_Complex) 
	= (idOrbitalState_Complex_OrbitalState_7, idOrbitalState_Active_OrbitalState_Complex_1);
	

tel






-- Entry action for state :OrbitalState_Active_OrbitalState_Complex
node OrbitalState_Active_OrbitalState_Complex_en(idOrbitalState_Active_OrbitalState_Complex_1:int;
	idCaptureApproach_OrbitalState_Active_1:int;
	GOOD:int;
	NONE:int;
	OrbitalState_Attitude_1:int;
	OrbitalState_Position_1:int;
	OrbitalState_Velocity_1:int;
	POOR:int;
	idOrbitalState_Complex_OrbitalState_1:int;
	OrbitalState_Time_1:int;
	idOrbitalState_Complex_OrbitalState2_1:int;
	isInner:bool)

returns (idOrbitalState_Active_OrbitalState_Complex:int;
	idCaptureApproach_OrbitalState_Active:int;
	OrbitalState_Attitude:int;
	OrbitalState_Position:int;
	OrbitalState_Velocity:int;
	idOrbitalState_Complex_OrbitalState:int;
	OrbitalState_Time:int;
	idOrbitalState_Complex_OrbitalState2:int);


var 	idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_OrbitalState_Complex_3:int;
	idCaptureApproach_OrbitalState_Active_2:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Velocity_2:int;
	idOrbitalState_Complex_OrbitalState_2:int;
	OrbitalState_Time_2:int;
	idOrbitalState_Complex_OrbitalState2_2:int;


let



	-- set state as active 
	idCaptureApproach_OrbitalState_Active_2 
	= 984;
	

	
	(idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Active_OrbitalState_Complex_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Velocity_2) 
	= OrbitalState_Complex_OrbitalState_en(idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Active_OrbitalState_Complex_1, NONE, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Velocity_1, POOR, GOOD, false);

	(idOrbitalState_Complex_OrbitalState2_2, idOrbitalState_Active_OrbitalState_Complex_3, OrbitalState_Time_2) 
	= OrbitalState_Complex_OrbitalState2_en(idOrbitalState_Complex_OrbitalState2_1, idOrbitalState_Active_OrbitalState_Complex_2, OrbitalState_Time_1, POOR, GOOD, false);


	(idOrbitalState_Active_OrbitalState_Complex, idCaptureApproach_OrbitalState_Active, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Velocity, idOrbitalState_Complex_OrbitalState, OrbitalState_Time, idOrbitalState_Complex_OrbitalState2) 
	= (idOrbitalState_Active_OrbitalState_Complex_3, idCaptureApproach_OrbitalState_Active_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Velocity_2, idOrbitalState_Complex_OrbitalState_2, OrbitalState_Time_2, idOrbitalState_Complex_OrbitalState2_2);
	

tel





-- Exit action for state :OrbitalState_Active_OrbitalState_Complex
node OrbitalState_Active_OrbitalState_Complex_ex(idOrbitalState_Complex_OrbitalState2_1:int;
	idOrbitalState_Active_OrbitalState_Complex_1:int;
	idOrbitalState_Complex_OrbitalState_1:int;
	idCaptureApproach_OrbitalState_Active_1:int;
	isInner:bool)

returns (idOrbitalState_Complex_OrbitalState2:int;
	idOrbitalState_Active_OrbitalState_Complex:int;
	idOrbitalState_Complex_OrbitalState:int;
	idCaptureApproach_OrbitalState_Active:int);


var 	idOrbitalState_Complex_OrbitalState2_2:int;
	idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_OrbitalState_Complex_3, idOrbitalState_Active_OrbitalState_Complex_4:int;
	idOrbitalState_Complex_OrbitalState_2:int;
	idCaptureApproach_OrbitalState_Active_2:int;


let



	
	(idOrbitalState_Complex_OrbitalState2_2, idOrbitalState_Active_OrbitalState_Complex_2) 
	= OrbitalState_Complex_OrbitalState2_ex(idOrbitalState_Complex_OrbitalState2_1, idOrbitalState_Active_OrbitalState_Complex_1, false);

	(idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Active_OrbitalState_Complex_3) 
	= OrbitalState_Complex_OrbitalState_ex(idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Active_OrbitalState_Complex_2, false);


	-- set state as inactive 
	idCaptureApproach_OrbitalState_Active_2
	 = if (not isInner) then 0 else idCaptureApproach_OrbitalState_Active_1;

	idOrbitalState_Active_OrbitalState_Complex_4 
	= 0;
	

	(idOrbitalState_Complex_OrbitalState2, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Complex_OrbitalState, idCaptureApproach_OrbitalState_Active) 
	= (idOrbitalState_Complex_OrbitalState2_2, idOrbitalState_Active_OrbitalState_Complex_4, idOrbitalState_Complex_OrbitalState_2, idCaptureApproach_OrbitalState_Active_1);
	

tel






-- Entry action for state :StarPlanetTracker_POOR
node StarPlanetTracker_POOR_en(idOrbitalState_Active_StarPlanetTracker_1:int;
	StarPlanetTracker_timer_1:int;
	POOR:int;
	StarPlanetTracker_AbsolutePosition_1:int;
	StarPlanetTracker_AbsoluteVelocity_1:int;
	StarPlanetTracker_AbsoluteAttitude_1:int;
	StarPlanetTracker_AbsoluteTime_1:int;
	isInner:bool)

returns (idOrbitalState_Active_StarPlanetTracker:int;
	StarPlanetTracker_timer:int;
	StarPlanetTracker_AbsolutePosition:int;
	StarPlanetTracker_AbsoluteVelocity:int;
	StarPlanetTracker_AbsoluteAttitude:int;
	StarPlanetTracker_AbsoluteTime:int);


var 	idOrbitalState_Active_StarPlanetTracker_2:int;
	StarPlanetTracker_timer_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;


let



	-- set state as active 
	idOrbitalState_Active_StarPlanetTracker_2 
	= 1000;
	

	StarPlanetTracker_timer_2 
	= if (not isInner) then 0
	 else StarPlanetTracker_timer_1;
	

	StarPlanetTracker_AbsolutePosition_2 
	= if (not isInner) then POOR
	 else StarPlanetTracker_AbsolutePosition_1;
	

	StarPlanetTracker_AbsoluteVelocity_2 
	= if (not isInner) then POOR
	 else StarPlanetTracker_AbsoluteVelocity_1;
	

	StarPlanetTracker_AbsoluteAttitude_2 
	= if (not isInner) then POOR
	 else StarPlanetTracker_AbsoluteAttitude_1;
	

	StarPlanetTracker_AbsoluteTime_2 
	= if (not isInner) then POOR
	 else StarPlanetTracker_AbsoluteTime_1;
	

	(idOrbitalState_Active_StarPlanetTracker, StarPlanetTracker_timer, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsoluteTime) 
	= (idOrbitalState_Active_StarPlanetTracker_2, StarPlanetTracker_timer_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsoluteTime_2);
	

tel





-- Exit action for state :StarPlanetTracker_POOR
node StarPlanetTracker_POOR_ex(idOrbitalState_Active_StarPlanetTracker_1:int;
	isInner:bool)

returns (idOrbitalState_Active_StarPlanetTracker:int);


var 	idOrbitalState_Active_StarPlanetTracker_2:int;


let



	-- set state as inactive 
	idOrbitalState_Active_StarPlanetTracker_2
	 = if (not isInner) then 0 else idOrbitalState_Active_StarPlanetTracker_1;


	(idOrbitalState_Active_StarPlanetTracker) 
	= (idOrbitalState_Active_StarPlanetTracker_1);
	

tel






-- Entry action for state :StarPlanetTracker_ACQUIRING
node StarPlanetTracker_ACQUIRING_en(idOrbitalState_Active_StarPlanetTracker_1:int;
	NONE:int;
	StarPlanetTracker_AbsolutePosition_1:int;
	StarPlanetTracker_AbsoluteVelocity_1:int;
	StarPlanetTracker_AbsoluteAttitude_1:int;
	StarPlanetTracker_AbsoluteTime_1:int;
	isInner:bool)

returns (idOrbitalState_Active_StarPlanetTracker:int;
	StarPlanetTracker_AbsolutePosition:int;
	StarPlanetTracker_AbsoluteVelocity:int;
	StarPlanetTracker_AbsoluteAttitude:int;
	StarPlanetTracker_AbsoluteTime:int);


var 	idOrbitalState_Active_StarPlanetTracker_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;


let



	-- set state as active 
	idOrbitalState_Active_StarPlanetTracker_2 
	= 999;
	

	StarPlanetTracker_AbsolutePosition_2 
	= if (not isInner) then NONE
	 else StarPlanetTracker_AbsolutePosition_1;
	

	StarPlanetTracker_AbsoluteVelocity_2 
	= if (not isInner) then NONE
	 else StarPlanetTracker_AbsoluteVelocity_1;
	

	StarPlanetTracker_AbsoluteAttitude_2 
	= if (not isInner) then NONE
	 else StarPlanetTracker_AbsoluteAttitude_1;
	

	StarPlanetTracker_AbsoluteTime_2 
	= if (not isInner) then NONE
	 else StarPlanetTracker_AbsoluteTime_1;
	

	(idOrbitalState_Active_StarPlanetTracker, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsoluteTime) 
	= (idOrbitalState_Active_StarPlanetTracker_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsoluteTime_2);
	

tel





-- Exit action for state :StarPlanetTracker_ACQUIRING
node StarPlanetTracker_ACQUIRING_ex(idOrbitalState_Active_StarPlanetTracker_1:int;
	isInner:bool)

returns (idOrbitalState_Active_StarPlanetTracker:int);


var 	idOrbitalState_Active_StarPlanetTracker_2:int;


let



	-- set state as inactive 
	idOrbitalState_Active_StarPlanetTracker_2
	 = if (not isInner) then 0 else idOrbitalState_Active_StarPlanetTracker_1;


	(idOrbitalState_Active_StarPlanetTracker) 
	= (idOrbitalState_Active_StarPlanetTracker_1);
	

tel






-- Entry action for state :StarPlanetTracker_GOOD
node StarPlanetTracker_GOOD_en(idOrbitalState_Active_StarPlanetTracker_1:int;
	GOOD:int;
	StarPlanetTracker_AbsolutePosition_1:int;
	StarPlanetTracker_AbsoluteVelocity_1:int;
	StarPlanetTracker_AbsoluteAttitude_1:int;
	StarPlanetTracker_AbsoluteTime_1:int;
	isInner:bool)

returns (idOrbitalState_Active_StarPlanetTracker:int;
	StarPlanetTracker_AbsolutePosition:int;
	StarPlanetTracker_AbsoluteVelocity:int;
	StarPlanetTracker_AbsoluteAttitude:int;
	StarPlanetTracker_AbsoluteTime:int);


var 	idOrbitalState_Active_StarPlanetTracker_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;


let



	-- set state as active 
	idOrbitalState_Active_StarPlanetTracker_2 
	= 1001;
	

	StarPlanetTracker_AbsolutePosition_2 
	= if (not isInner) then GOOD
	 else StarPlanetTracker_AbsolutePosition_1;
	

	StarPlanetTracker_AbsoluteVelocity_2 
	= if (not isInner) then GOOD
	 else StarPlanetTracker_AbsoluteVelocity_1;
	

	StarPlanetTracker_AbsoluteAttitude_2 
	= if (not isInner) then GOOD
	 else StarPlanetTracker_AbsoluteAttitude_1;
	

	StarPlanetTracker_AbsoluteTime_2 
	= if (not isInner) then GOOD
	 else StarPlanetTracker_AbsoluteTime_1;
	

	(idOrbitalState_Active_StarPlanetTracker, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsoluteTime) 
	= (idOrbitalState_Active_StarPlanetTracker_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsoluteTime_2);
	

tel





-- Exit action for state :StarPlanetTracker_GOOD
node StarPlanetTracker_GOOD_ex(idOrbitalState_Active_StarPlanetTracker_1:int;
	isInner:bool)

returns (idOrbitalState_Active_StarPlanetTracker:int);


var 	idOrbitalState_Active_StarPlanetTracker_2:int;


let



	-- set state as inactive 
	idOrbitalState_Active_StarPlanetTracker_2
	 = if (not isInner) then 0 else idOrbitalState_Active_StarPlanetTracker_1;


	(idOrbitalState_Active_StarPlanetTracker) 
	= (idOrbitalState_Active_StarPlanetTracker_1);
	

tel






--During action for state :OrbitalState_Active_StarPlanetTracker
node OrbitalState_Active_StarPlanetTracker_du(StarPlanetTracker_timer_1:int;
	StarPlanetTracker_timer_upper_limit:int)

returns (StarPlanetTracker_timer:int);


var 	StarPlanetTracker_timer_2:int;


let



	StarPlanetTracker_timer_2 
	= min( StarPlanetTracker_timer_1 +1,StarPlanetTracker_timer_upper_limit);
	

	(StarPlanetTracker_timer) 
	= (StarPlanetTracker_timer_2);
	

tel





-- Entry action for state :OrbitalState_Active_StarPlanetTracker
node OrbitalState_Active_StarPlanetTracker_en(idOrbitalState_Active_StarPlanetTracker_1:int;
	idCaptureApproach_OrbitalState_Active_1:int;
	NONE:int;
	StarPlanetTracker_AbsoluteAttitude_1:int;
	StarPlanetTracker_AbsolutePosition_1:int;
	StarPlanetTracker_AbsoluteTime_1:int;
	StarPlanetTracker_AbsoluteVelocity_1:int;
	POOR:int;
	StarPlanetTracker_timer_1:int;
	GOOD:int;
	isInner:bool)

returns (idOrbitalState_Active_StarPlanetTracker:int;
	idCaptureApproach_OrbitalState_Active:int;
	StarPlanetTracker_AbsoluteAttitude:int;
	StarPlanetTracker_AbsolutePosition:int;
	StarPlanetTracker_AbsoluteTime:int;
	StarPlanetTracker_AbsoluteVelocity:int;
	StarPlanetTracker_timer:int);


var 	idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Active_StarPlanetTracker_3, idOrbitalState_Active_StarPlanetTracker_4, idOrbitalState_Active_StarPlanetTracker_5, idOrbitalState_Active_StarPlanetTracker_6, idOrbitalState_Active_StarPlanetTracker_7:int;
	idCaptureApproach_OrbitalState_Active_2, idCaptureApproach_OrbitalState_Active_3, idCaptureApproach_OrbitalState_Active_4:int;
	StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsoluteAttitude_3, StarPlanetTracker_AbsoluteAttitude_4, StarPlanetTracker_AbsoluteAttitude_5, StarPlanetTracker_AbsoluteAttitude_6, StarPlanetTracker_AbsoluteAttitude_7:int;
	StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsolutePosition_3, StarPlanetTracker_AbsolutePosition_4, StarPlanetTracker_AbsolutePosition_5, StarPlanetTracker_AbsolutePosition_6, StarPlanetTracker_AbsolutePosition_7:int;
	StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteTime_3, StarPlanetTracker_AbsoluteTime_4, StarPlanetTracker_AbsoluteTime_5, StarPlanetTracker_AbsoluteTime_6, StarPlanetTracker_AbsoluteTime_7:int;
	StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_AbsoluteVelocity_3, StarPlanetTracker_AbsoluteVelocity_4, StarPlanetTracker_AbsoluteVelocity_5, StarPlanetTracker_AbsoluteVelocity_6, StarPlanetTracker_AbsoluteVelocity_7:int;
	StarPlanetTracker_timer_2, StarPlanetTracker_timer_3:int;


let



	-- set state as active 
	idCaptureApproach_OrbitalState_Active_2 
	= 998;
	

	
-- transition trace :
	--POINT__To__StarPlanetTracker_ACQUIRING_1
		(idOrbitalState_Active_StarPlanetTracker_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsoluteTime_2) 
	= StarPlanetTracker_ACQUIRING_en(idOrbitalState_Active_StarPlanetTracker_1, NONE, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsoluteTime_1, false);
		

	(idOrbitalState_Active_StarPlanetTracker_3, idCaptureApproach_OrbitalState_Active_3, StarPlanetTracker_AbsoluteAttitude_3, StarPlanetTracker_AbsolutePosition_3, StarPlanetTracker_AbsoluteTime_3, StarPlanetTracker_AbsoluteVelocity_3) 
	= 

	if ( idOrbitalState_Active_StarPlanetTracker_1 = 0) then

	 (idOrbitalState_Active_StarPlanetTracker_2, idCaptureApproach_OrbitalState_Active_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2)

	 else(idOrbitalState_Active_StarPlanetTracker_1, idCaptureApproach_OrbitalState_Active_2, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1);

	

	(idOrbitalState_Active_StarPlanetTracker_4, StarPlanetTracker_AbsolutePosition_4, StarPlanetTracker_AbsoluteVelocity_4, StarPlanetTracker_AbsoluteAttitude_4, StarPlanetTracker_AbsoluteTime_4) 
	= 
	if ( idOrbitalState_Active_StarPlanetTracker_1 = 999) then
	StarPlanetTracker_ACQUIRING_en(idOrbitalState_Active_StarPlanetTracker_1, NONE, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsoluteTime_1, false)
	 else (idOrbitalState_Active_StarPlanetTracker_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsoluteTime_1);

	

	(idOrbitalState_Active_StarPlanetTracker_5, StarPlanetTracker_timer_2, StarPlanetTracker_AbsolutePosition_5, StarPlanetTracker_AbsoluteVelocity_5, StarPlanetTracker_AbsoluteAttitude_5, StarPlanetTracker_AbsoluteTime_5) 
	= 
	if ( idOrbitalState_Active_StarPlanetTracker_1 = 1000) then
	StarPlanetTracker_POOR_en(idOrbitalState_Active_StarPlanetTracker_1, StarPlanetTracker_timer_1, POOR, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsoluteTime_1, false)
	 else (idOrbitalState_Active_StarPlanetTracker_1, StarPlanetTracker_timer_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsoluteTime_1);

	

	(idOrbitalState_Active_StarPlanetTracker_6, StarPlanetTracker_AbsolutePosition_6, StarPlanetTracker_AbsoluteVelocity_6, StarPlanetTracker_AbsoluteAttitude_6, StarPlanetTracker_AbsoluteTime_6) 
	= 
	if ( idOrbitalState_Active_StarPlanetTracker_1 = 1001) then
	StarPlanetTracker_GOOD_en(idOrbitalState_Active_StarPlanetTracker_1, GOOD, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsoluteTime_1, false)
	 else (idOrbitalState_Active_StarPlanetTracker_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsoluteTime_1);

	

	(idOrbitalState_Active_StarPlanetTracker_7, idCaptureApproach_OrbitalState_Active_4, StarPlanetTracker_AbsoluteAttitude_7, StarPlanetTracker_AbsolutePosition_7, StarPlanetTracker_AbsoluteTime_7, StarPlanetTracker_AbsoluteVelocity_7, StarPlanetTracker_timer_3) 
	= 
		 if ( idOrbitalState_Active_StarPlanetTracker_1 = 0) then 
		(idOrbitalState_Active_StarPlanetTracker_3, idCaptureApproach_OrbitalState_Active_3, StarPlanetTracker_AbsoluteAttitude_3, StarPlanetTracker_AbsolutePosition_3, StarPlanetTracker_AbsoluteTime_3, StarPlanetTracker_AbsoluteVelocity_3, StarPlanetTracker_timer_1)
		 else
		 if ( idOrbitalState_Active_StarPlanetTracker_1 = 999) then 
		(idOrbitalState_Active_StarPlanetTracker_4, idCaptureApproach_OrbitalState_Active_3, StarPlanetTracker_AbsoluteAttitude_4, StarPlanetTracker_AbsolutePosition_4, StarPlanetTracker_AbsoluteTime_4, StarPlanetTracker_AbsoluteVelocity_4, StarPlanetTracker_timer_1)
		 else
		 if ( idOrbitalState_Active_StarPlanetTracker_1 = 1000) then 
		(idOrbitalState_Active_StarPlanetTracker_5, idCaptureApproach_OrbitalState_Active_3, StarPlanetTracker_AbsoluteAttitude_5, StarPlanetTracker_AbsolutePosition_5, StarPlanetTracker_AbsoluteTime_5, StarPlanetTracker_AbsoluteVelocity_5, StarPlanetTracker_timer_2)
		 else
		 if ( idOrbitalState_Active_StarPlanetTracker_1 = 1001) then 
		(idOrbitalState_Active_StarPlanetTracker_6, idCaptureApproach_OrbitalState_Active_3, StarPlanetTracker_AbsoluteAttitude_6, StarPlanetTracker_AbsolutePosition_6, StarPlanetTracker_AbsoluteTime_6, StarPlanetTracker_AbsoluteVelocity_6, StarPlanetTracker_timer_2)
		 else (idOrbitalState_Active_StarPlanetTracker_1, idCaptureApproach_OrbitalState_Active_2, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1);


	(idOrbitalState_Active_StarPlanetTracker, idCaptureApproach_OrbitalState_Active, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer) 
	= (idOrbitalState_Active_StarPlanetTracker_7, idCaptureApproach_OrbitalState_Active_4, StarPlanetTracker_AbsoluteAttitude_7, StarPlanetTracker_AbsolutePosition_7, StarPlanetTracker_AbsoluteTime_7, StarPlanetTracker_AbsoluteVelocity_7, StarPlanetTracker_timer_3);
	

tel





-- Exit action for state :OrbitalState_Active_StarPlanetTracker
node OrbitalState_Active_StarPlanetTracker_ex(idOrbitalState_Active_StarPlanetTracker_1:int;
	idCaptureApproach_OrbitalState_Active_1:int;
	isInner:bool)

returns (idOrbitalState_Active_StarPlanetTracker:int;
	idCaptureApproach_OrbitalState_Active:int);


var 	idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Active_StarPlanetTracker_3, idOrbitalState_Active_StarPlanetTracker_4, idOrbitalState_Active_StarPlanetTracker_5, idOrbitalState_Active_StarPlanetTracker_6:int;
	idCaptureApproach_OrbitalState_Active_2:int;


let



	
	(idOrbitalState_Active_StarPlanetTracker_2) 
	= 
	if ( idOrbitalState_Active_StarPlanetTracker_1 = 999) then
	StarPlanetTracker_ACQUIRING_ex(idOrbitalState_Active_StarPlanetTracker_1, false)
	 else (idOrbitalState_Active_StarPlanetTracker_1);

	

	(idOrbitalState_Active_StarPlanetTracker_3) 
	= 
	if ( idOrbitalState_Active_StarPlanetTracker_1 = 1000) then
	StarPlanetTracker_POOR_ex(idOrbitalState_Active_StarPlanetTracker_1, false)
	 else (idOrbitalState_Active_StarPlanetTracker_1);

	

	(idOrbitalState_Active_StarPlanetTracker_4) 
	= 
	if ( idOrbitalState_Active_StarPlanetTracker_1 = 1001) then
	StarPlanetTracker_GOOD_ex(idOrbitalState_Active_StarPlanetTracker_1, false)
	 else (idOrbitalState_Active_StarPlanetTracker_1);

	

	(idOrbitalState_Active_StarPlanetTracker_5) 
	= 
		 if ( idOrbitalState_Active_StarPlanetTracker_1 = 999) then 
		(idOrbitalState_Active_StarPlanetTracker_2)
		 else
		 if ( idOrbitalState_Active_StarPlanetTracker_1 = 1000) then 
		(idOrbitalState_Active_StarPlanetTracker_3)
		 else
		 if ( idOrbitalState_Active_StarPlanetTracker_1 = 1001) then 
		(idOrbitalState_Active_StarPlanetTracker_4)
		 else (idOrbitalState_Active_StarPlanetTracker_1);


	-- set state as inactive 
	idCaptureApproach_OrbitalState_Active_2
	 = if (not isInner) then 0 else idCaptureApproach_OrbitalState_Active_1;

	idOrbitalState_Active_StarPlanetTracker_6 
	= 0;
	

	(idOrbitalState_Active_StarPlanetTracker, idCaptureApproach_OrbitalState_Active) 
	= (idOrbitalState_Active_StarPlanetTracker_6, idCaptureApproach_OrbitalState_Active_1);
	

tel






-- Entry action for state :CaptureApproach_OrbitalState_Active
node CaptureApproach_OrbitalState_Active_en(idCaptureApproach_OrbitalState_Active_1:int;
	idMissionPhaseStates_CaptureApproach_1:int;
	GOOD:int;
	NONE:int;
	OrbitalState_Attitude_1:int;
	OrbitalState_Position_1:int;
	OrbitalState_Time_1:int;
	OrbitalState_Velocity_1:int;
	POOR:int;
	idOrbitalState_Active_OrbitalState_Complex_1:int;
	idOrbitalState_Complex_OrbitalState_1:int;
	idOrbitalState_Complex_OrbitalState2_1:int;
	GPS_AbsolutePosition_1:int;
	GPS_AbsoluteTime_1:int;
	GPS_AbsoluteVelocity_1:int;
	GPS_timer_1:int;
	idOrbitalState_Active_GPS_1:int;
	StarPlanetTracker_AbsoluteAttitude_1:int;
	StarPlanetTracker_AbsolutePosition_1:int;
	StarPlanetTracker_AbsoluteTime_1:int;
	StarPlanetTracker_AbsoluteVelocity_1:int;
	StarPlanetTracker_timer_1:int;
	idOrbitalState_Active_StarPlanetTracker_1:int;
	InertialNavigation_AbsoluteAttitude_1:int;
	InertialNavigation_AbsolutePosition_1:int;
	InertialNavigation_AbsoluteVelocity_1:int;
	InertialNavigation_timer_1:int;
	idOrbitalState_Active_InertialNavigation_1:int;
	isInner:bool)

returns (idCaptureApproach_OrbitalState_Active:int;
	idMissionPhaseStates_CaptureApproach:int;
	OrbitalState_Attitude:int;
	OrbitalState_Position:int;
	OrbitalState_Time:int;
	OrbitalState_Velocity:int;
	idOrbitalState_Active_OrbitalState_Complex:int;
	idOrbitalState_Complex_OrbitalState:int;
	idOrbitalState_Complex_OrbitalState2:int;
	GPS_AbsolutePosition:int;
	GPS_AbsoluteTime:int;
	GPS_AbsoluteVelocity:int;
	GPS_timer:int;
	idOrbitalState_Active_GPS:int;
	StarPlanetTracker_AbsoluteAttitude:int;
	StarPlanetTracker_AbsolutePosition:int;
	StarPlanetTracker_AbsoluteTime:int;
	StarPlanetTracker_AbsoluteVelocity:int;
	StarPlanetTracker_timer:int;
	idOrbitalState_Active_StarPlanetTracker:int;
	InertialNavigation_AbsoluteAttitude:int;
	InertialNavigation_AbsolutePosition:int;
	InertialNavigation_AbsoluteVelocity:int;
	InertialNavigation_timer:int;
	idOrbitalState_Active_InertialNavigation:int);


var 	idCaptureApproach_OrbitalState_Active_2, idCaptureApproach_OrbitalState_Active_3, idCaptureApproach_OrbitalState_Active_4, idCaptureApproach_OrbitalState_Active_5:int;
	idMissionPhaseStates_CaptureApproach_2:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Time_2:int;
	OrbitalState_Velocity_2:int;
	idOrbitalState_Active_OrbitalState_Complex_2:int;
	idOrbitalState_Complex_OrbitalState_2:int;
	idOrbitalState_Complex_OrbitalState2_2:int;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteTime_2:int;
	GPS_AbsoluteVelocity_2:int;
	GPS_timer_2:int;
	idOrbitalState_Active_GPS_2:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	StarPlanetTracker_timer_2:int;
	idOrbitalState_Active_StarPlanetTracker_2:int;
	InertialNavigation_AbsoluteAttitude_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	InertialNavigation_timer_2:int;
	idOrbitalState_Active_InertialNavigation_2:int;


let



	-- set state as active 
	idMissionPhaseStates_CaptureApproach_2 
	= 983;
	

	
	(idOrbitalState_Active_OrbitalState_Complex_2, idCaptureApproach_OrbitalState_Active_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Velocity_2, idOrbitalState_Complex_OrbitalState_2, OrbitalState_Time_2, idOrbitalState_Complex_OrbitalState2_2) 
	= OrbitalState_Active_OrbitalState_Complex_en(idOrbitalState_Active_OrbitalState_Complex_1, idCaptureApproach_OrbitalState_Active_1, GOOD, NONE, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Velocity_1, POOR, idOrbitalState_Complex_OrbitalState_1, OrbitalState_Time_1, idOrbitalState_Complex_OrbitalState2_1, false);

	(idOrbitalState_Active_GPS_2, idCaptureApproach_OrbitalState_Active_3, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2) 
	= OrbitalState_Active_GPS_en(idOrbitalState_Active_GPS_1, idCaptureApproach_OrbitalState_Active_2, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, NONE, GPS_timer_1, POOR, GOOD, false);

	(idOrbitalState_Active_StarPlanetTracker_2, idCaptureApproach_OrbitalState_Active_4, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2) 
	= OrbitalState_Active_StarPlanetTracker_en(idOrbitalState_Active_StarPlanetTracker_1, idCaptureApproach_OrbitalState_Active_3, NONE, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, POOR, StarPlanetTracker_timer_1, GOOD, false);

	(idOrbitalState_Active_InertialNavigation_2, idCaptureApproach_OrbitalState_Active_5, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2) 
	= OrbitalState_Active_InertialNavigation_en(idOrbitalState_Active_InertialNavigation_1, idCaptureApproach_OrbitalState_Active_4, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, NONE, GOOD, InertialNavigation_timer_1, POOR, false);


	(idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, idOrbitalState_Active_GPS, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idOrbitalState_Active_StarPlanetTracker, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, idOrbitalState_Active_InertialNavigation) 
	= (idCaptureApproach_OrbitalState_Active_5, idMissionPhaseStates_CaptureApproach_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, idOrbitalState_Active_GPS_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idOrbitalState_Active_StarPlanetTracker_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, idOrbitalState_Active_InertialNavigation_2);
	

tel





-- Exit action for state :CaptureApproach_OrbitalState_Active
node CaptureApproach_OrbitalState_Active_ex(idOrbitalState_Active_InertialNavigation_1:int;
	idCaptureApproach_OrbitalState_Active_1:int;
	idOrbitalState_Active_StarPlanetTracker_1:int;
	idOrbitalState_Active_GPS_1:int;
	idOrbitalState_Active_OrbitalState_Complex_1:int;
	idOrbitalState_Complex_OrbitalState_1:int;
	idOrbitalState_Complex_OrbitalState2_1:int;
	idMissionPhaseStates_CaptureApproach_1:int;
	isInner:bool)

returns (idOrbitalState_Active_InertialNavigation:int;
	idCaptureApproach_OrbitalState_Active:int;
	idOrbitalState_Active_StarPlanetTracker:int;
	idOrbitalState_Active_GPS:int;
	idOrbitalState_Active_OrbitalState_Complex:int;
	idOrbitalState_Complex_OrbitalState:int;
	idOrbitalState_Complex_OrbitalState2:int;
	idMissionPhaseStates_CaptureApproach:int);


var 	idOrbitalState_Active_InertialNavigation_2:int;
	idCaptureApproach_OrbitalState_Active_2, idCaptureApproach_OrbitalState_Active_3, idCaptureApproach_OrbitalState_Active_4, idCaptureApproach_OrbitalState_Active_5, idCaptureApproach_OrbitalState_Active_6:int;
	idOrbitalState_Active_StarPlanetTracker_2:int;
	idOrbitalState_Active_GPS_2:int;
	idOrbitalState_Active_OrbitalState_Complex_2:int;
	idOrbitalState_Complex_OrbitalState_2:int;
	idOrbitalState_Complex_OrbitalState2_2:int;
	idMissionPhaseStates_CaptureApproach_2:int;


let



	
	(idOrbitalState_Active_InertialNavigation_2, idCaptureApproach_OrbitalState_Active_2) 
	= OrbitalState_Active_InertialNavigation_ex(idOrbitalState_Active_InertialNavigation_1, idCaptureApproach_OrbitalState_Active_1, false);

	(idOrbitalState_Active_StarPlanetTracker_2, idCaptureApproach_OrbitalState_Active_3) 
	= OrbitalState_Active_StarPlanetTracker_ex(idOrbitalState_Active_StarPlanetTracker_1, idCaptureApproach_OrbitalState_Active_2, false);

	(idOrbitalState_Active_GPS_2, idCaptureApproach_OrbitalState_Active_4) 
	= OrbitalState_Active_GPS_ex(idOrbitalState_Active_GPS_1, idCaptureApproach_OrbitalState_Active_3, false);

	(idOrbitalState_Complex_OrbitalState2_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Complex_OrbitalState_2, idCaptureApproach_OrbitalState_Active_5) 
	= OrbitalState_Active_OrbitalState_Complex_ex(idOrbitalState_Complex_OrbitalState2_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Complex_OrbitalState_1, idCaptureApproach_OrbitalState_Active_4, false);


	-- set state as inactive 
	idMissionPhaseStates_CaptureApproach_2
	 = if (not isInner) then 0 else idMissionPhaseStates_CaptureApproach_1;

	idCaptureApproach_OrbitalState_Active_6 
	= 0;
	

	(idOrbitalState_Active_InertialNavigation, idCaptureApproach_OrbitalState_Active, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Active_GPS, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, idMissionPhaseStates_CaptureApproach) 
	= (idOrbitalState_Active_InertialNavigation_2, idCaptureApproach_OrbitalState_Active_6, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, idMissionPhaseStates_CaptureApproach_1);
	

tel






-- Exit action for state :CaptureApproach_OrientedForDockingApproach
node CaptureApproach_OrientedForDockingApproach_ex(CaptureApproachComplete_1:bool;
	idCaptureApproach_CaptureApproach_1:int;
	isInner:bool)

returns (CaptureApproachComplete:bool;
	idCaptureApproach_CaptureApproach:int);


var 	CaptureApproachComplete_2:bool;
	idCaptureApproach_CaptureApproach_2:int;


let



	CaptureApproachComplete_2 
	= if (not isInner) then true
	 else CaptureApproachComplete_1;
	

	-- set state as inactive 
	idCaptureApproach_CaptureApproach_2
	 = if (not isInner) then 0 else idCaptureApproach_CaptureApproach_1;


	(CaptureApproachComplete, idCaptureApproach_CaptureApproach) 
	= (CaptureApproachComplete_2, idCaptureApproach_CaptureApproach_1);
	

tel





-- Entry action for state :CaptureApproach_OrientedForDockingApproach
node CaptureApproach_OrientedForDockingApproach_en(idCaptureApproach_CaptureApproach_1:int;
	isInner:bool)

returns (idCaptureApproach_CaptureApproach:int);


var 	idCaptureApproach_CaptureApproach_2:int;


let



	-- set state as active 
	idCaptureApproach_CaptureApproach_2 
	= 981;
	

	(idCaptureApproach_CaptureApproach) 
	= (idCaptureApproach_CaptureApproach_2);
	

tel






-- Entry action for state :CaptureApproach_ComputeThrust
node CaptureApproach_ComputeThrust_en(idCaptureApproach_CaptureApproach_1:int;
	isInner:bool)

returns (idCaptureApproach_CaptureApproach:int);


var 	idCaptureApproach_CaptureApproach_2:int;


let



	-- set state as active 
	idCaptureApproach_CaptureApproach_2 
	= 980;
	

	(idCaptureApproach_CaptureApproach) 
	= (idCaptureApproach_CaptureApproach_2);
	

tel





-- Exit action for state :CaptureApproach_ComputeThrust
node CaptureApproach_ComputeThrust_ex(idCaptureApproach_CaptureApproach_1:int;
	isInner:bool)

returns (idCaptureApproach_CaptureApproach:int);


var 	idCaptureApproach_CaptureApproach_2:int;


let



	-- set state as inactive 
	idCaptureApproach_CaptureApproach_2
	 = if (not isInner) then 0 else idCaptureApproach_CaptureApproach_1;


	(idCaptureApproach_CaptureApproach) 
	= (idCaptureApproach_CaptureApproach_1);
	

tel






-- Entry action for state :CaptureApproach_CheckOrbitalState
node CaptureApproach_CheckOrbitalState_en(idCaptureApproach_CaptureApproach_1:int;
	isInner:bool)

returns (idCaptureApproach_CaptureApproach:int);


var 	idCaptureApproach_CaptureApproach_2:int;


let



	-- set state as active 
	idCaptureApproach_CaptureApproach_2 
	= 979;
	

	(idCaptureApproach_CaptureApproach) 
	= (idCaptureApproach_CaptureApproach_2);
	

tel





-- Exit action for state :CaptureApproach_CheckOrbitalState
node CaptureApproach_CheckOrbitalState_ex(idCaptureApproach_CaptureApproach_1:int;
	isInner:bool)

returns (idCaptureApproach_CaptureApproach:int);


var 	idCaptureApproach_CaptureApproach_2:int;


let



	-- set state as inactive 
	idCaptureApproach_CaptureApproach_2
	 = if (not isInner) then 0 else idCaptureApproach_CaptureApproach_1;


	(idCaptureApproach_CaptureApproach) 
	= (idCaptureApproach_CaptureApproach_1);
	

tel






-- Entry action for state :CaptureApproach_StartApproach
node CaptureApproach_StartApproach_en(idCaptureApproach_CaptureApproach_1:int;
	CaptureApproach_timer_1:int;
	CaptureApproachFailed_1:bool;
	isInner:bool)

returns (idCaptureApproach_CaptureApproach:int;
	CaptureApproach_timer:int;
	CaptureApproachFailed:bool);


var 	idCaptureApproach_CaptureApproach_2:int;
	CaptureApproach_timer_2:int;
	CaptureApproachFailed_2:bool;


let



	-- set state as active 
	idCaptureApproach_CaptureApproach_2 
	= 978;
	

	CaptureApproach_timer_2 
	= if (not isInner) then 0
	 else CaptureApproach_timer_1;
	

	CaptureApproachFailed_2 
	= if (not isInner) then false
	 else CaptureApproachFailed_1;
	

	(idCaptureApproach_CaptureApproach, CaptureApproach_timer, CaptureApproachFailed) 
	= (idCaptureApproach_CaptureApproach_2, CaptureApproach_timer_2, CaptureApproachFailed_2);
	

tel





-- Exit action for state :CaptureApproach_StartApproach
node CaptureApproach_StartApproach_ex(idCaptureApproach_CaptureApproach_1:int;
	isInner:bool)

returns (idCaptureApproach_CaptureApproach:int);


var 	idCaptureApproach_CaptureApproach_2:int;


let



	-- set state as inactive 
	idCaptureApproach_CaptureApproach_2
	 = if (not isInner) then 0 else idCaptureApproach_CaptureApproach_1;


	(idCaptureApproach_CaptureApproach) 
	= (idCaptureApproach_CaptureApproach_1);
	

tel






-- Entry action for state :CaptureApproach_CaptureApproachFailed
node CaptureApproach_CaptureApproachFailed_en(idCaptureApproach_CaptureApproach_1:int;
	CaptureApproachFailed_1:bool;
	isInner:bool)

returns (idCaptureApproach_CaptureApproach:int;
	CaptureApproachFailed:bool);


var 	idCaptureApproach_CaptureApproach_2:int;
	CaptureApproachFailed_2:bool;


let



	-- set state as active 
	idCaptureApproach_CaptureApproach_2 
	= 982;
	

	CaptureApproachFailed_2 
	= if (not isInner) then true
	 else CaptureApproachFailed_1;
	

	(idCaptureApproach_CaptureApproach, CaptureApproachFailed) 
	= (idCaptureApproach_CaptureApproach_2, CaptureApproachFailed_2);
	

tel





-- Exit action for state :CaptureApproach_CaptureApproachFailed
node CaptureApproach_CaptureApproachFailed_ex(idCaptureApproach_CaptureApproach_1:int;
	isInner:bool)

returns (idCaptureApproach_CaptureApproach:int);


var 	idCaptureApproach_CaptureApproach_2:int;


let



	-- set state as inactive 
	idCaptureApproach_CaptureApproach_2
	 = if (not isInner) then 0 else idCaptureApproach_CaptureApproach_1;


	(idCaptureApproach_CaptureApproach) 
	= (idCaptureApproach_CaptureApproach_1);
	

tel






--During action for state :CaptureApproach_CaptureApproach
node CaptureApproach_CaptureApproach_du(CaptureApproach_timer_1:int;
	CaptureApproach_timer_upper_limit:int)

returns (CaptureApproach_timer:int);


var 	CaptureApproach_timer_2:int;


let



	CaptureApproach_timer_2 
	= min( CaptureApproach_timer_1 +1,CaptureApproach_timer_upper_limit);
	

	(CaptureApproach_timer) 
	= (CaptureApproach_timer_2);
	

tel





-- Entry action for state :CaptureApproach_CaptureApproach
node CaptureApproach_CaptureApproach_en(idCaptureApproach_CaptureApproach_1:int;
	idMissionPhaseStates_CaptureApproach_1:int;
	CaptureApproachFailed_1:bool;
	CaptureApproach_timer_1:int;
	isInner:bool)

returns (idCaptureApproach_CaptureApproach:int;
	idMissionPhaseStates_CaptureApproach:int;
	CaptureApproachFailed:bool;
	CaptureApproach_timer:int);


var 	idCaptureApproach_CaptureApproach_2, idCaptureApproach_CaptureApproach_3, idCaptureApproach_CaptureApproach_4, idCaptureApproach_CaptureApproach_5, idCaptureApproach_CaptureApproach_6, idCaptureApproach_CaptureApproach_7, idCaptureApproach_CaptureApproach_8, idCaptureApproach_CaptureApproach_9:int;
	idMissionPhaseStates_CaptureApproach_2, idMissionPhaseStates_CaptureApproach_3, idMissionPhaseStates_CaptureApproach_4:int;
	CaptureApproachFailed_2, CaptureApproachFailed_3, CaptureApproachFailed_4, CaptureApproachFailed_5, CaptureApproachFailed_6:bool;
	CaptureApproach_timer_2, CaptureApproach_timer_3, CaptureApproach_timer_4, CaptureApproach_timer_5:int;


let



	-- set state as active 
	idMissionPhaseStates_CaptureApproach_2 
	= 977;
	

	
-- transition trace :
	--POINT__To__CaptureApproach_StartApproach_1
		(idCaptureApproach_CaptureApproach_2, CaptureApproach_timer_2, CaptureApproachFailed_2) 
	= CaptureApproach_StartApproach_en(idCaptureApproach_CaptureApproach_1, CaptureApproach_timer_1, CaptureApproachFailed_1, false);
		

	(idCaptureApproach_CaptureApproach_3, idMissionPhaseStates_CaptureApproach_3, CaptureApproachFailed_3, CaptureApproach_timer_3) 
	= 

	if ( idCaptureApproach_CaptureApproach_1 = 0) then

	 (idCaptureApproach_CaptureApproach_2, idMissionPhaseStates_CaptureApproach_2, CaptureApproachFailed_2, CaptureApproach_timer_2)

	 else(idCaptureApproach_CaptureApproach_1, idMissionPhaseStates_CaptureApproach_2, CaptureApproachFailed_1, CaptureApproach_timer_1);

	

	(idCaptureApproach_CaptureApproach_4, CaptureApproach_timer_4, CaptureApproachFailed_4) 
	= 
	if ( idCaptureApproach_CaptureApproach_1 = 978) then
	CaptureApproach_StartApproach_en(idCaptureApproach_CaptureApproach_1, CaptureApproach_timer_1, CaptureApproachFailed_1, false)
	 else (idCaptureApproach_CaptureApproach_1, CaptureApproach_timer_1, CaptureApproachFailed_1);

	

	(idCaptureApproach_CaptureApproach_5) 
	= 
	if ( idCaptureApproach_CaptureApproach_1 = 979) then
	CaptureApproach_CheckOrbitalState_en(idCaptureApproach_CaptureApproach_1, false)
	 else (idCaptureApproach_CaptureApproach_1);

	

	(idCaptureApproach_CaptureApproach_6) 
	= 
	if ( idCaptureApproach_CaptureApproach_1 = 980) then
	CaptureApproach_ComputeThrust_en(idCaptureApproach_CaptureApproach_1, false)
	 else (idCaptureApproach_CaptureApproach_1);

	

	(idCaptureApproach_CaptureApproach_7) 
	= 
	if ( idCaptureApproach_CaptureApproach_1 = 981) then
	CaptureApproach_OrientedForDockingApproach_en(idCaptureApproach_CaptureApproach_1, false)
	 else (idCaptureApproach_CaptureApproach_1);

	

	(idCaptureApproach_CaptureApproach_8, CaptureApproachFailed_5) 
	= 
	if ( idCaptureApproach_CaptureApproach_1 = 982) then
	CaptureApproach_CaptureApproachFailed_en(idCaptureApproach_CaptureApproach_1, CaptureApproachFailed_1, false)
	 else (idCaptureApproach_CaptureApproach_1, CaptureApproachFailed_1);

	

	(idCaptureApproach_CaptureApproach_9, idMissionPhaseStates_CaptureApproach_4, CaptureApproachFailed_6, CaptureApproach_timer_5) 
	= 
		 if ( idCaptureApproach_CaptureApproach_1 = 0) then 
		(idCaptureApproach_CaptureApproach_3, idMissionPhaseStates_CaptureApproach_3, CaptureApproachFailed_3, CaptureApproach_timer_3)
		 else
		 if ( idCaptureApproach_CaptureApproach_1 = 978) then 
		(idCaptureApproach_CaptureApproach_4, idMissionPhaseStates_CaptureApproach_3, CaptureApproachFailed_4, CaptureApproach_timer_4)
		 else
		 if ( idCaptureApproach_CaptureApproach_1 = 979) then 
		(idCaptureApproach_CaptureApproach_5, idMissionPhaseStates_CaptureApproach_3, CaptureApproachFailed_4, CaptureApproach_timer_4)
		 else
		 if ( idCaptureApproach_CaptureApproach_1 = 980) then 
		(idCaptureApproach_CaptureApproach_6, idMissionPhaseStates_CaptureApproach_3, CaptureApproachFailed_4, CaptureApproach_timer_4)
		 else
		 if ( idCaptureApproach_CaptureApproach_1 = 981) then 
		(idCaptureApproach_CaptureApproach_7, idMissionPhaseStates_CaptureApproach_3, CaptureApproachFailed_4, CaptureApproach_timer_4)
		 else
		 if ( idCaptureApproach_CaptureApproach_1 = 982) then 
		(idCaptureApproach_CaptureApproach_8, idMissionPhaseStates_CaptureApproach_3, CaptureApproachFailed_5, CaptureApproach_timer_4)
		 else (idCaptureApproach_CaptureApproach_1, idMissionPhaseStates_CaptureApproach_2, CaptureApproachFailed_1, CaptureApproach_timer_1);


	(idCaptureApproach_CaptureApproach, idMissionPhaseStates_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer) 
	= (idCaptureApproach_CaptureApproach_9, idMissionPhaseStates_CaptureApproach_4, CaptureApproachFailed_6, CaptureApproach_timer_5);
	

tel





-- Exit action for state :CaptureApproach_CaptureApproach
node CaptureApproach_CaptureApproach_ex(idCaptureApproach_CaptureApproach_1:int;
	CaptureApproachComplete_1:bool;
	idMissionPhaseStates_CaptureApproach_1:int;
	isInner:bool)

returns (idCaptureApproach_CaptureApproach:int;
	CaptureApproachComplete:bool;
	idMissionPhaseStates_CaptureApproach:int);


var 	idCaptureApproach_CaptureApproach_2, idCaptureApproach_CaptureApproach_3, idCaptureApproach_CaptureApproach_4, idCaptureApproach_CaptureApproach_5, idCaptureApproach_CaptureApproach_6, idCaptureApproach_CaptureApproach_7, idCaptureApproach_CaptureApproach_8:int;
	CaptureApproachComplete_2, CaptureApproachComplete_3:bool;
	idMissionPhaseStates_CaptureApproach_2:int;


let



	
	(idCaptureApproach_CaptureApproach_2) 
	= 
	if ( idCaptureApproach_CaptureApproach_1 = 978) then
	CaptureApproach_StartApproach_ex(idCaptureApproach_CaptureApproach_1, false)
	 else (idCaptureApproach_CaptureApproach_1);

	

	(idCaptureApproach_CaptureApproach_3) 
	= 
	if ( idCaptureApproach_CaptureApproach_1 = 979) then
	CaptureApproach_CheckOrbitalState_ex(idCaptureApproach_CaptureApproach_1, false)
	 else (idCaptureApproach_CaptureApproach_1);

	

	(idCaptureApproach_CaptureApproach_4) 
	= 
	if ( idCaptureApproach_CaptureApproach_1 = 980) then
	CaptureApproach_ComputeThrust_ex(idCaptureApproach_CaptureApproach_1, false)
	 else (idCaptureApproach_CaptureApproach_1);

	

	(CaptureApproachComplete_2, idCaptureApproach_CaptureApproach_5) 
	= 
	if ( idCaptureApproach_CaptureApproach_1 = 981) then
	CaptureApproach_OrientedForDockingApproach_ex(CaptureApproachComplete_1, idCaptureApproach_CaptureApproach_1, false)
	 else (CaptureApproachComplete_1, idCaptureApproach_CaptureApproach_1);

	

	(idCaptureApproach_CaptureApproach_6) 
	= 
	if ( idCaptureApproach_CaptureApproach_1 = 982) then
	CaptureApproach_CaptureApproachFailed_ex(idCaptureApproach_CaptureApproach_1, false)
	 else (idCaptureApproach_CaptureApproach_1);

	

	(idCaptureApproach_CaptureApproach_7, CaptureApproachComplete_3) 
	= 
		 if ( idCaptureApproach_CaptureApproach_1 = 978) then 
		(idCaptureApproach_CaptureApproach_2, CaptureApproachComplete_1)
		 else
		 if ( idCaptureApproach_CaptureApproach_1 = 979) then 
		(idCaptureApproach_CaptureApproach_3, CaptureApproachComplete_1)
		 else
		 if ( idCaptureApproach_CaptureApproach_1 = 980) then 
		(idCaptureApproach_CaptureApproach_4, CaptureApproachComplete_1)
		 else
		 if ( idCaptureApproach_CaptureApproach_1 = 981) then 
		(idCaptureApproach_CaptureApproach_5, CaptureApproachComplete_2)
		 else
		 if ( idCaptureApproach_CaptureApproach_1 = 982) then 
		(idCaptureApproach_CaptureApproach_6, CaptureApproachComplete_2)
		 else (idCaptureApproach_CaptureApproach_1, CaptureApproachComplete_1);


	-- set state as inactive 
	idMissionPhaseStates_CaptureApproach_2
	 = if (not isInner) then 0 else idMissionPhaseStates_CaptureApproach_1;

	idCaptureApproach_CaptureApproach_8 
	= 0;
	

	(idCaptureApproach_CaptureApproach, CaptureApproachComplete, idMissionPhaseStates_CaptureApproach) 
	= (idCaptureApproach_CaptureApproach_8, CaptureApproachComplete_3, idMissionPhaseStates_CaptureApproach_1);
	

tel






-- Entry action for state :MissionPhaseStates_CaptureApproach
node MissionPhaseStates_CaptureApproach_en(idMissionPhaseStates_CaptureApproach_1:int;
	idChart_MissionPhaseStates_1:int;
	CaptureApproachFailed_1:bool;
	CaptureApproach_timer_1:int;
	idCaptureApproach_CaptureApproach_1:int;
	GOOD:int;
	GPS_AbsolutePosition_1:int;
	GPS_AbsoluteTime_1:int;
	GPS_AbsoluteVelocity_1:int;
	GPS_timer_1:int;
	InertialNavigation_AbsoluteAttitude_1:int;
	InertialNavigation_AbsolutePosition_1:int;
	InertialNavigation_AbsoluteVelocity_1:int;
	InertialNavigation_timer_1:int;
	NONE:int;
	OrbitalState_Attitude_1:int;
	OrbitalState_Position_1:int;
	OrbitalState_Time_1:int;
	OrbitalState_Velocity_1:int;
	POOR:int;
	StarPlanetTracker_AbsoluteAttitude_1:int;
	StarPlanetTracker_AbsolutePosition_1:int;
	StarPlanetTracker_AbsoluteTime_1:int;
	StarPlanetTracker_AbsoluteVelocity_1:int;
	StarPlanetTracker_timer_1:int;
	idCaptureApproach_OrbitalState_Active_1:int;
	idOrbitalState_Active_GPS_1:int;
	idOrbitalState_Active_InertialNavigation_1:int;
	idOrbitalState_Active_OrbitalState_Complex_1:int;
	idOrbitalState_Active_StarPlanetTracker_1:int;
	idOrbitalState_Complex_OrbitalState_1:int;
	idOrbitalState_Complex_OrbitalState2_1:int;
	isInner:bool)

returns (idMissionPhaseStates_CaptureApproach:int;
	idChart_MissionPhaseStates:int;
	CaptureApproachFailed:bool;
	CaptureApproach_timer:int;
	idCaptureApproach_CaptureApproach:int;
	GPS_AbsolutePosition:int;
	GPS_AbsoluteTime:int;
	GPS_AbsoluteVelocity:int;
	GPS_timer:int;
	InertialNavigation_AbsoluteAttitude:int;
	InertialNavigation_AbsolutePosition:int;
	InertialNavigation_AbsoluteVelocity:int;
	InertialNavigation_timer:int;
	OrbitalState_Attitude:int;
	OrbitalState_Position:int;
	OrbitalState_Time:int;
	OrbitalState_Velocity:int;
	StarPlanetTracker_AbsoluteAttitude:int;
	StarPlanetTracker_AbsolutePosition:int;
	StarPlanetTracker_AbsoluteTime:int;
	StarPlanetTracker_AbsoluteVelocity:int;
	StarPlanetTracker_timer:int;
	idCaptureApproach_OrbitalState_Active:int;
	idOrbitalState_Active_GPS:int;
	idOrbitalState_Active_InertialNavigation:int;
	idOrbitalState_Active_OrbitalState_Complex:int;
	idOrbitalState_Active_StarPlanetTracker:int;
	idOrbitalState_Complex_OrbitalState:int;
	idOrbitalState_Complex_OrbitalState2:int);


var 	idMissionPhaseStates_CaptureApproach_2, idMissionPhaseStates_CaptureApproach_3:int;
	idChart_MissionPhaseStates_2:int;
	CaptureApproachFailed_2:bool;
	CaptureApproach_timer_2:int;
	idCaptureApproach_CaptureApproach_2:int;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteTime_2:int;
	GPS_AbsoluteVelocity_2:int;
	GPS_timer_2:int;
	InertialNavigation_AbsoluteAttitude_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	InertialNavigation_timer_2:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Time_2:int;
	OrbitalState_Velocity_2:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	StarPlanetTracker_timer_2:int;
	idCaptureApproach_OrbitalState_Active_2:int;
	idOrbitalState_Active_GPS_2:int;
	idOrbitalState_Active_InertialNavigation_2:int;
	idOrbitalState_Active_OrbitalState_Complex_2:int;
	idOrbitalState_Active_StarPlanetTracker_2:int;
	idOrbitalState_Complex_OrbitalState_2:int;
	idOrbitalState_Complex_OrbitalState2_2:int;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 976;
	

	
	(idCaptureApproach_CaptureApproach_2, idMissionPhaseStates_CaptureApproach_2, CaptureApproachFailed_2, CaptureApproach_timer_2) 
	= CaptureApproach_CaptureApproach_en(idCaptureApproach_CaptureApproach_1, idMissionPhaseStates_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, false);

	(idCaptureApproach_OrbitalState_Active_2, idMissionPhaseStates_CaptureApproach_3, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, idOrbitalState_Active_GPS_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idOrbitalState_Active_StarPlanetTracker_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, idOrbitalState_Active_InertialNavigation_2) 
	= CaptureApproach_OrbitalState_Active_en(idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_2, GOOD, NONE, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, POOR, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, idOrbitalState_Active_GPS_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idOrbitalState_Active_StarPlanetTracker_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, idOrbitalState_Active_InertialNavigation_1, false);


	(idMissionPhaseStates_CaptureApproach, idChart_MissionPhaseStates, CaptureApproachFailed, CaptureApproach_timer, idCaptureApproach_CaptureApproach, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_OrbitalState_Active, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	= (idMissionPhaseStates_CaptureApproach_3, idChart_MissionPhaseStates_2, CaptureApproachFailed_2, CaptureApproach_timer_2, idCaptureApproach_CaptureApproach_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idCaptureApproach_OrbitalState_Active_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2);
	

tel





-- Exit action for state :MissionPhaseStates_CaptureApproach
node MissionPhaseStates_CaptureApproach_ex(idOrbitalState_Active_InertialNavigation_1:int;
	idCaptureApproach_OrbitalState_Active_1:int;
	idOrbitalState_Active_StarPlanetTracker_1:int;
	idOrbitalState_Active_GPS_1:int;
	idOrbitalState_Active_OrbitalState_Complex_1:int;
	idOrbitalState_Complex_OrbitalState_1:int;
	idOrbitalState_Complex_OrbitalState2_1:int;
	idMissionPhaseStates_CaptureApproach_1:int;
	CaptureApproachComplete_1:bool;
	idCaptureApproach_CaptureApproach_1:int;
	idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idOrbitalState_Active_InertialNavigation:int;
	idCaptureApproach_OrbitalState_Active:int;
	idOrbitalState_Active_StarPlanetTracker:int;
	idOrbitalState_Active_GPS:int;
	idOrbitalState_Active_OrbitalState_Complex:int;
	idOrbitalState_Complex_OrbitalState:int;
	idOrbitalState_Complex_OrbitalState2:int;
	idMissionPhaseStates_CaptureApproach:int;
	CaptureApproachComplete:bool;
	idCaptureApproach_CaptureApproach:int;
	idChart_MissionPhaseStates:int);


var 	idOrbitalState_Active_InertialNavigation_2:int;
	idCaptureApproach_OrbitalState_Active_2:int;
	idOrbitalState_Active_StarPlanetTracker_2:int;
	idOrbitalState_Active_GPS_2:int;
	idOrbitalState_Active_OrbitalState_Complex_2:int;
	idOrbitalState_Complex_OrbitalState_2:int;
	idOrbitalState_Complex_OrbitalState2_2:int;
	idMissionPhaseStates_CaptureApproach_2, idMissionPhaseStates_CaptureApproach_3, idMissionPhaseStates_CaptureApproach_4:int;
	CaptureApproachComplete_2:bool;
	idCaptureApproach_CaptureApproach_2:int;
	idChart_MissionPhaseStates_2:int;


let



	
	(idOrbitalState_Active_InertialNavigation_2, idCaptureApproach_OrbitalState_Active_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, idMissionPhaseStates_CaptureApproach_2) 
	= CaptureApproach_OrbitalState_Active_ex(idOrbitalState_Active_InertialNavigation_1, idCaptureApproach_OrbitalState_Active_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, idMissionPhaseStates_CaptureApproach_1, false);

	(idCaptureApproach_CaptureApproach_2, CaptureApproachComplete_2, idMissionPhaseStates_CaptureApproach_3) 
	= CaptureApproach_CaptureApproach_ex(idCaptureApproach_CaptureApproach_1, CaptureApproachComplete_1, idMissionPhaseStates_CaptureApproach_2, false);


	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;

	idMissionPhaseStates_CaptureApproach_4 
	= 0;
	

	(idOrbitalState_Active_InertialNavigation, idCaptureApproach_OrbitalState_Active, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Active_GPS, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, idMissionPhaseStates_CaptureApproach, CaptureApproachComplete, idCaptureApproach_CaptureApproach, idChart_MissionPhaseStates) 
	= (idOrbitalState_Active_InertialNavigation_2, idCaptureApproach_OrbitalState_Active_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, idMissionPhaseStates_CaptureApproach_4, CaptureApproachComplete_2, idCaptureApproach_CaptureApproach_2, idChart_MissionPhaseStates_1);
	

tel






-- Entry action for state :dockingSensor_Poor
node dockingSensor_Poor_en(idDockingApproach_dockingSensor_1:int;
	POOR:int;
	dockingSensor_RelativePosition_1:int;
	dockingSensor_RelativeVelocity_1:int;
	dockingSensor_RelativeAttitude_1:int;
	dockingSensor_targetState_1:int;
	isInner:bool)

returns (idDockingApproach_dockingSensor:int;
	dockingSensor_RelativePosition:int;
	dockingSensor_RelativeVelocity:int;
	dockingSensor_RelativeAttitude:int;
	dockingSensor_targetState:int);


var 	idDockingApproach_dockingSensor_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_targetState_2:int;


let



	-- set state as active 
	idDockingApproach_dockingSensor_2 
	= 968;
	

	dockingSensor_RelativePosition_2 
	= if (not isInner) then POOR
	 else dockingSensor_RelativePosition_1;
	

	dockingSensor_RelativeVelocity_2 
	= if (not isInner) then POOR
	 else dockingSensor_RelativeVelocity_1;
	

	dockingSensor_RelativeAttitude_2 
	= if (not isInner) then POOR
	 else dockingSensor_RelativeAttitude_1;
	

	dockingSensor_targetState_2 
	= if (not isInner) then POOR
	 else dockingSensor_targetState_1;
	

	(idDockingApproach_dockingSensor, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_RelativeAttitude, dockingSensor_targetState) 
	= (idDockingApproach_dockingSensor_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_RelativeAttitude_2, dockingSensor_targetState_2);
	

tel





-- Exit action for state :dockingSensor_Poor
node dockingSensor_Poor_ex(idDockingApproach_dockingSensor_1:int;
	isInner:bool)

returns (idDockingApproach_dockingSensor:int);


var 	idDockingApproach_dockingSensor_2:int;


let



	-- set state as inactive 
	idDockingApproach_dockingSensor_2
	 = if (not isInner) then 0 else idDockingApproach_dockingSensor_1;


	(idDockingApproach_dockingSensor) 
	= (idDockingApproach_dockingSensor_1);
	

tel






-- Entry action for state :dockingSensor_Good
node dockingSensor_Good_en(idDockingApproach_dockingSensor_1:int;
	GOOD:int;
	dockingSensor_RelativePosition_1:int;
	dockingSensor_RelativeVelocity_1:int;
	dockingSensor_RelativeAttitude_1:int;
	dockingSensor_targetState_1:int;
	isInner:bool)

returns (idDockingApproach_dockingSensor:int;
	dockingSensor_RelativePosition:int;
	dockingSensor_RelativeVelocity:int;
	dockingSensor_RelativeAttitude:int;
	dockingSensor_targetState:int);


var 	idDockingApproach_dockingSensor_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_targetState_2:int;


let



	-- set state as active 
	idDockingApproach_dockingSensor_2 
	= 949;
	

	dockingSensor_RelativePosition_2 
	= if (not isInner) then GOOD
	 else dockingSensor_RelativePosition_1;
	

	dockingSensor_RelativeVelocity_2 
	= if (not isInner) then GOOD
	 else dockingSensor_RelativeVelocity_1;
	

	dockingSensor_RelativeAttitude_2 
	= if (not isInner) then GOOD
	 else dockingSensor_RelativeAttitude_1;
	

	dockingSensor_targetState_2 
	= if (not isInner) then GOOD
	 else dockingSensor_targetState_1;
	

	(idDockingApproach_dockingSensor, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_RelativeAttitude, dockingSensor_targetState) 
	= (idDockingApproach_dockingSensor_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_RelativeAttitude_2, dockingSensor_targetState_2);
	

tel





-- Exit action for state :dockingSensor_Good
node dockingSensor_Good_ex(dockingSensor_timer_1:int;
	idDockingApproach_dockingSensor_1:int;
	isInner:bool)

returns (dockingSensor_timer:int;
	idDockingApproach_dockingSensor:int);


var 	dockingSensor_timer_2:int;
	idDockingApproach_dockingSensor_2:int;


let



	dockingSensor_timer_2 
	= if (not isInner) then 0
	 else dockingSensor_timer_1;
	

	-- set state as inactive 
	idDockingApproach_dockingSensor_2
	 = if (not isInner) then 0 else idDockingApproach_dockingSensor_1;


	(dockingSensor_timer, idDockingApproach_dockingSensor) 
	= (dockingSensor_timer_2, idDockingApproach_dockingSensor_1);
	

tel






-- Entry action for state :dockingSensor_Acquiring
node dockingSensor_Acquiring_en(idDockingApproach_dockingSensor_1:int;
	NONE:int;
	dockingSensor_RelativePosition_1:int;
	dockingSensor_RelativeVelocity_1:int;
	dockingSensor_RelativeAttitude_1:int;
	dockingSensor_targetState_1:int;
	isInner:bool)

returns (idDockingApproach_dockingSensor:int;
	dockingSensor_RelativePosition:int;
	dockingSensor_RelativeVelocity:int;
	dockingSensor_RelativeAttitude:int;
	dockingSensor_targetState:int);


var 	idDockingApproach_dockingSensor_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_targetState_2:int;


let



	-- set state as active 
	idDockingApproach_dockingSensor_2 
	= 970;
	

	dockingSensor_RelativePosition_2 
	= if (not isInner) then NONE
	 else dockingSensor_RelativePosition_1;
	

	dockingSensor_RelativeVelocity_2 
	= if (not isInner) then NONE
	 else dockingSensor_RelativeVelocity_1;
	

	dockingSensor_RelativeAttitude_2 
	= if (not isInner) then NONE
	 else dockingSensor_RelativeAttitude_1;
	

	dockingSensor_targetState_2 
	= if (not isInner) then NONE
	 else dockingSensor_targetState_1;
	

	(idDockingApproach_dockingSensor, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_RelativeAttitude, dockingSensor_targetState) 
	= (idDockingApproach_dockingSensor_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_RelativeAttitude_2, dockingSensor_targetState_2);
	

tel





-- Exit action for state :dockingSensor_Acquiring
node dockingSensor_Acquiring_ex(dockingSensor_timer_1:int;
	idDockingApproach_dockingSensor_1:int;
	isInner:bool)

returns (dockingSensor_timer:int;
	idDockingApproach_dockingSensor:int);


var 	dockingSensor_timer_2:int;
	idDockingApproach_dockingSensor_2:int;


let



	dockingSensor_timer_2 
	= if (not isInner) then 0
	 else dockingSensor_timer_1;
	

	-- set state as inactive 
	idDockingApproach_dockingSensor_2
	 = if (not isInner) then 0 else idDockingApproach_dockingSensor_1;


	(dockingSensor_timer, idDockingApproach_dockingSensor) 
	= (dockingSensor_timer_2, idDockingApproach_dockingSensor_1);
	

tel






--During action for state :DockingApproach_dockingSensor
node DockingApproach_dockingSensor_du(dockingSensor_timer_1:int;
	dockingSensor_timer_upper_limit:int)

returns (dockingSensor_timer:int);


var 	dockingSensor_timer_2:int;


let



	dockingSensor_timer_2 
	= min( dockingSensor_timer_1 +1,dockingSensor_timer_upper_limit);
	

	(dockingSensor_timer) 
	= (dockingSensor_timer_2);
	

tel





-- Entry action for state :DockingApproach_dockingSensor
node DockingApproach_dockingSensor_en(idDockingApproach_dockingSensor_1:int;
	idMissionPhaseStates_DockingApproach_1:int;
	NONE:int;
	dockingSensor_RelativeAttitude_1:int;
	dockingSensor_RelativePosition_1:int;
	dockingSensor_RelativeVelocity_1:int;
	dockingSensor_targetState_1:int;
	GOOD:int;
	POOR:int;
	isInner:bool)

returns (idDockingApproach_dockingSensor:int;
	idMissionPhaseStates_DockingApproach:int;
	dockingSensor_RelativeAttitude:int;
	dockingSensor_RelativePosition:int;
	dockingSensor_RelativeVelocity:int;
	dockingSensor_targetState:int);


var 	idDockingApproach_dockingSensor_2, idDockingApproach_dockingSensor_3, idDockingApproach_dockingSensor_4, idDockingApproach_dockingSensor_5, idDockingApproach_dockingSensor_6, idDockingApproach_dockingSensor_7:int;
	idMissionPhaseStates_DockingApproach_2, idMissionPhaseStates_DockingApproach_3, idMissionPhaseStates_DockingApproach_4:int;
	dockingSensor_RelativeAttitude_2, dockingSensor_RelativeAttitude_3, dockingSensor_RelativeAttitude_4, dockingSensor_RelativeAttitude_5, dockingSensor_RelativeAttitude_6, dockingSensor_RelativeAttitude_7:int;
	dockingSensor_RelativePosition_2, dockingSensor_RelativePosition_3, dockingSensor_RelativePosition_4, dockingSensor_RelativePosition_5, dockingSensor_RelativePosition_6, dockingSensor_RelativePosition_7:int;
	dockingSensor_RelativeVelocity_2, dockingSensor_RelativeVelocity_3, dockingSensor_RelativeVelocity_4, dockingSensor_RelativeVelocity_5, dockingSensor_RelativeVelocity_6, dockingSensor_RelativeVelocity_7:int;
	dockingSensor_targetState_2, dockingSensor_targetState_3, dockingSensor_targetState_4, dockingSensor_targetState_5, dockingSensor_targetState_6, dockingSensor_targetState_7:int;


let



	-- set state as active 
	idMissionPhaseStates_DockingApproach_2 
	= 975;
	

	
-- transition trace :
	--POINT__To__dockingSensor_Acquiring_1
		(idDockingApproach_dockingSensor_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_RelativeAttitude_2, dockingSensor_targetState_2) 
	= dockingSensor_Acquiring_en(idDockingApproach_dockingSensor_1, NONE, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_RelativeAttitude_1, dockingSensor_targetState_1, false);
		

	(idDockingApproach_dockingSensor_3, idMissionPhaseStates_DockingApproach_3, dockingSensor_RelativeAttitude_3, dockingSensor_RelativePosition_3, dockingSensor_RelativeVelocity_3, dockingSensor_targetState_3) 
	= 

	if ( idDockingApproach_dockingSensor_1 = 0) then

	 (idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2)

	 else(idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_2, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1);

	

	(idDockingApproach_dockingSensor_4, dockingSensor_RelativePosition_4, dockingSensor_RelativeVelocity_4, dockingSensor_RelativeAttitude_4, dockingSensor_targetState_4) 
	= 
	if ( idDockingApproach_dockingSensor_1 = 949) then
	dockingSensor_Good_en(idDockingApproach_dockingSensor_1, GOOD, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_RelativeAttitude_1, dockingSensor_targetState_1, false)
	 else (idDockingApproach_dockingSensor_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_RelativeAttitude_1, dockingSensor_targetState_1);

	

	(idDockingApproach_dockingSensor_5, dockingSensor_RelativePosition_5, dockingSensor_RelativeVelocity_5, dockingSensor_RelativeAttitude_5, dockingSensor_targetState_5) 
	= 
	if ( idDockingApproach_dockingSensor_1 = 968) then
	dockingSensor_Poor_en(idDockingApproach_dockingSensor_1, POOR, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_RelativeAttitude_1, dockingSensor_targetState_1, false)
	 else (idDockingApproach_dockingSensor_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_RelativeAttitude_1, dockingSensor_targetState_1);

	

	(idDockingApproach_dockingSensor_6, dockingSensor_RelativePosition_6, dockingSensor_RelativeVelocity_6, dockingSensor_RelativeAttitude_6, dockingSensor_targetState_6) 
	= 
	if ( idDockingApproach_dockingSensor_1 = 970) then
	dockingSensor_Acquiring_en(idDockingApproach_dockingSensor_1, NONE, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_RelativeAttitude_1, dockingSensor_targetState_1, false)
	 else (idDockingApproach_dockingSensor_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_RelativeAttitude_1, dockingSensor_targetState_1);

	

	(idDockingApproach_dockingSensor_7, idMissionPhaseStates_DockingApproach_4, dockingSensor_RelativeAttitude_7, dockingSensor_RelativePosition_7, dockingSensor_RelativeVelocity_7, dockingSensor_targetState_7) 
	= 
		 if ( idDockingApproach_dockingSensor_1 = 0) then 
		(idDockingApproach_dockingSensor_3, idMissionPhaseStates_DockingApproach_3, dockingSensor_RelativeAttitude_3, dockingSensor_RelativePosition_3, dockingSensor_RelativeVelocity_3, dockingSensor_targetState_3)
		 else
		 if ( idDockingApproach_dockingSensor_1 = 949) then 
		(idDockingApproach_dockingSensor_4, idMissionPhaseStates_DockingApproach_3, dockingSensor_RelativeAttitude_4, dockingSensor_RelativePosition_4, dockingSensor_RelativeVelocity_4, dockingSensor_targetState_4)
		 else
		 if ( idDockingApproach_dockingSensor_1 = 968) then 
		(idDockingApproach_dockingSensor_5, idMissionPhaseStates_DockingApproach_3, dockingSensor_RelativeAttitude_5, dockingSensor_RelativePosition_5, dockingSensor_RelativeVelocity_5, dockingSensor_targetState_5)
		 else
		 if ( idDockingApproach_dockingSensor_1 = 970) then 
		(idDockingApproach_dockingSensor_6, idMissionPhaseStates_DockingApproach_3, dockingSensor_RelativeAttitude_6, dockingSensor_RelativePosition_6, dockingSensor_RelativeVelocity_6, dockingSensor_targetState_6)
		 else (idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_2, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1);


	(idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState) 
	= (idDockingApproach_dockingSensor_7, idMissionPhaseStates_DockingApproach_4, dockingSensor_RelativeAttitude_7, dockingSensor_RelativePosition_7, dockingSensor_RelativeVelocity_7, dockingSensor_targetState_7);
	

tel





-- Exit action for state :DockingApproach_dockingSensor
node DockingApproach_dockingSensor_ex(dockingSensor_timer_1:int;
	idDockingApproach_dockingSensor_1:int;
	idMissionPhaseStates_DockingApproach_1:int;
	isInner:bool)

returns (dockingSensor_timer:int;
	idDockingApproach_dockingSensor:int;
	idMissionPhaseStates_DockingApproach:int);


var 	dockingSensor_timer_2, dockingSensor_timer_3, dockingSensor_timer_4:int;
	idDockingApproach_dockingSensor_2, idDockingApproach_dockingSensor_3, idDockingApproach_dockingSensor_4, idDockingApproach_dockingSensor_5, idDockingApproach_dockingSensor_6:int;
	idMissionPhaseStates_DockingApproach_2:int;


let



	
	(dockingSensor_timer_2, idDockingApproach_dockingSensor_2) 
	= 
	if ( idDockingApproach_dockingSensor_1 = 949) then
	dockingSensor_Good_ex(dockingSensor_timer_1, idDockingApproach_dockingSensor_1, false)
	 else (dockingSensor_timer_1, idDockingApproach_dockingSensor_1);

	

	(idDockingApproach_dockingSensor_3) 
	= 
	if ( idDockingApproach_dockingSensor_1 = 968) then
	dockingSensor_Poor_ex(idDockingApproach_dockingSensor_1, false)
	 else (idDockingApproach_dockingSensor_1);

	

	(dockingSensor_timer_3, idDockingApproach_dockingSensor_4) 
	= 
	if ( idDockingApproach_dockingSensor_1 = 970) then
	dockingSensor_Acquiring_ex(dockingSensor_timer_1, idDockingApproach_dockingSensor_1, false)
	 else (dockingSensor_timer_1, idDockingApproach_dockingSensor_1);

	

	(dockingSensor_timer_4, idDockingApproach_dockingSensor_5) 
	= 
		 if ( idDockingApproach_dockingSensor_1 = 949) then 
		(dockingSensor_timer_2, idDockingApproach_dockingSensor_2)
		 else
		 if ( idDockingApproach_dockingSensor_1 = 968) then 
		(dockingSensor_timer_2, idDockingApproach_dockingSensor_3)
		 else
		 if ( idDockingApproach_dockingSensor_1 = 970) then 
		(dockingSensor_timer_3, idDockingApproach_dockingSensor_4)
		 else (dockingSensor_timer_1, idDockingApproach_dockingSensor_1);


	-- set state as inactive 
	idMissionPhaseStates_DockingApproach_2
	 = if (not isInner) then 0 else idMissionPhaseStates_DockingApproach_1;

	idDockingApproach_dockingSensor_6 
	= 0;
	

	(dockingSensor_timer, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach) 
	= (dockingSensor_timer_4, idDockingApproach_dockingSensor_6, idMissionPhaseStates_DockingApproach_1);
	

tel






-- Exit action for state :DockingApproach_ReadyToDock
node DockingApproach_ReadyToDock_ex(DockingApproachComplete_1:bool;
	idDockingApproach_DockingApproach_1:int;
	isInner:bool)

returns (DockingApproachComplete:bool;
	idDockingApproach_DockingApproach:int);


var 	DockingApproachComplete_2:bool;
	idDockingApproach_DockingApproach_2:int;


let



	DockingApproachComplete_2 
	= if (not isInner) then true
	 else DockingApproachComplete_1;
	

	-- set state as inactive 
	idDockingApproach_DockingApproach_2
	 = if (not isInner) then 0 else idDockingApproach_DockingApproach_1;


	(DockingApproachComplete, idDockingApproach_DockingApproach) 
	= (DockingApproachComplete_2, idDockingApproach_DockingApproach_1);
	

tel





-- Entry action for state :DockingApproach_ReadyToDock
node DockingApproach_ReadyToDock_en(idDockingApproach_DockingApproach_1:int;
	isInner:bool)

returns (idDockingApproach_DockingApproach:int);


var 	idDockingApproach_DockingApproach_2:int;


let



	-- set state as active 
	idDockingApproach_DockingApproach_2 
	= 972;
	

	(idDockingApproach_DockingApproach) 
	= (idDockingApproach_DockingApproach_2);
	

tel






-- Entry action for state :DockingApproach_CheckTargetRelativeState
node DockingApproach_CheckTargetRelativeState_en(idDockingApproach_DockingApproach_1:int;
	isInner:bool)

returns (idDockingApproach_DockingApproach:int);


var 	idDockingApproach_DockingApproach_2:int;


let



	-- set state as active 
	idDockingApproach_DockingApproach_2 
	= 971;
	

	(idDockingApproach_DockingApproach) 
	= (idDockingApproach_DockingApproach_2);
	

tel





-- Exit action for state :DockingApproach_CheckTargetRelativeState
node DockingApproach_CheckTargetRelativeState_ex(idDockingApproach_DockingApproach_1:int;
	isInner:bool)

returns (idDockingApproach_DockingApproach:int);


var 	idDockingApproach_DockingApproach_2:int;


let



	-- set state as inactive 
	idDockingApproach_DockingApproach_2
	 = if (not isInner) then 0 else idDockingApproach_DockingApproach_1;


	(idDockingApproach_DockingApproach) 
	= (idDockingApproach_DockingApproach_1);
	

tel






-- Entry action for state :DockingApproach_ComputeThrust
node DockingApproach_ComputeThrust_en(idDockingApproach_DockingApproach_1:int;
	isInner:bool)

returns (idDockingApproach_DockingApproach:int);


var 	idDockingApproach_DockingApproach_2:int;


let



	-- set state as active 
	idDockingApproach_DockingApproach_2 
	= 973;
	

	(idDockingApproach_DockingApproach) 
	= (idDockingApproach_DockingApproach_2);
	

tel





-- Exit action for state :DockingApproach_ComputeThrust
node DockingApproach_ComputeThrust_ex(idDockingApproach_DockingApproach_1:int;
	isInner:bool)

returns (idDockingApproach_DockingApproach:int);


var 	idDockingApproach_DockingApproach_2:int;


let



	-- set state as inactive 
	idDockingApproach_DockingApproach_2
	 = if (not isInner) then 0 else idDockingApproach_DockingApproach_1;


	(idDockingApproach_DockingApproach) 
	= (idDockingApproach_DockingApproach_1);
	

tel






-- Entry action for state :DockingApproach_StartApproach
node DockingApproach_StartApproach_en(idDockingApproach_DockingApproach_1:int;
	DockingApproach_timer_1:int;
	isInner:bool)

returns (idDockingApproach_DockingApproach:int;
	DockingApproach_timer:int);


var 	idDockingApproach_DockingApproach_2:int;
	DockingApproach_timer_2:int;


let



	-- set state as active 
	idDockingApproach_DockingApproach_2 
	= 969;
	

	DockingApproach_timer_2 
	= if (not isInner) then 0
	 else DockingApproach_timer_1;
	

	(idDockingApproach_DockingApproach, DockingApproach_timer) 
	= (idDockingApproach_DockingApproach_2, DockingApproach_timer_2);
	

tel





-- Exit action for state :DockingApproach_StartApproach
node DockingApproach_StartApproach_ex(idDockingApproach_DockingApproach_1:int;
	isInner:bool)

returns (idDockingApproach_DockingApproach:int);


var 	idDockingApproach_DockingApproach_2:int;


let



	-- set state as inactive 
	idDockingApproach_DockingApproach_2
	 = if (not isInner) then 0 else idDockingApproach_DockingApproach_1;


	(idDockingApproach_DockingApproach) 
	= (idDockingApproach_DockingApproach_1);
	

tel






-- Entry action for state :DockingApproach_DockingApproachFailed
node DockingApproach_DockingApproachFailed_en(idDockingApproach_DockingApproach_1:int;
	isInner:bool)

returns (idDockingApproach_DockingApproach:int);


var 	idDockingApproach_DockingApproach_2:int;


let



	-- set state as active 
	idDockingApproach_DockingApproach_2 
	= 974;
	

	(idDockingApproach_DockingApproach) 
	= (idDockingApproach_DockingApproach_2);
	

tel





-- Exit action for state :DockingApproach_DockingApproachFailed
node DockingApproach_DockingApproachFailed_ex(idDockingApproach_DockingApproach_1:int;
	isInner:bool)

returns (idDockingApproach_DockingApproach:int);


var 	idDockingApproach_DockingApproach_2:int;


let



	-- set state as inactive 
	idDockingApproach_DockingApproach_2
	 = if (not isInner) then 0 else idDockingApproach_DockingApproach_1;


	(idDockingApproach_DockingApproach) 
	= (idDockingApproach_DockingApproach_1);
	

tel






--During action for state :DockingApproach_DockingApproach
node DockingApproach_DockingApproach_du(DockingApproach_timer_1:int;
	DockingApproach_timer_upper_limit:int)

returns (DockingApproach_timer:int);


var 	DockingApproach_timer_2:int;


let



	DockingApproach_timer_2 
	= min( DockingApproach_timer_1 +1,DockingApproach_timer_upper_limit);
	

	(DockingApproach_timer) 
	= (DockingApproach_timer_2);
	

tel





-- Entry action for state :DockingApproach_DockingApproach
node DockingApproach_DockingApproach_en(idDockingApproach_DockingApproach_1:int;
	idMissionPhaseStates_DockingApproach_1:int;
	DockingApproach_timer_1:int;
	isInner:bool)

returns (idDockingApproach_DockingApproach:int;
	idMissionPhaseStates_DockingApproach:int;
	DockingApproach_timer:int);


var 	idDockingApproach_DockingApproach_2, idDockingApproach_DockingApproach_3, idDockingApproach_DockingApproach_4, idDockingApproach_DockingApproach_5, idDockingApproach_DockingApproach_6, idDockingApproach_DockingApproach_7, idDockingApproach_DockingApproach_8, idDockingApproach_DockingApproach_9:int;
	idMissionPhaseStates_DockingApproach_2, idMissionPhaseStates_DockingApproach_3, idMissionPhaseStates_DockingApproach_4:int;
	DockingApproach_timer_2, DockingApproach_timer_3, DockingApproach_timer_4, DockingApproach_timer_5:int;


let



	-- set state as active 
	idMissionPhaseStates_DockingApproach_2 
	= 967;
	

	
-- transition trace :
	--POINT__To__DockingApproach_StartApproach_1
		(idDockingApproach_DockingApproach_2, DockingApproach_timer_2) 
	= DockingApproach_StartApproach_en(idDockingApproach_DockingApproach_1, DockingApproach_timer_1, false);
		

	(idDockingApproach_DockingApproach_3, idMissionPhaseStates_DockingApproach_3, DockingApproach_timer_3) 
	= 

	if ( idDockingApproach_DockingApproach_1 = 0) then

	 (idDockingApproach_DockingApproach_2, idMissionPhaseStates_DockingApproach_2, DockingApproach_timer_2)

	 else(idDockingApproach_DockingApproach_1, idMissionPhaseStates_DockingApproach_2, DockingApproach_timer_1);

	

	(idDockingApproach_DockingApproach_4, DockingApproach_timer_4) 
	= 
	if ( idDockingApproach_DockingApproach_1 = 969) then
	DockingApproach_StartApproach_en(idDockingApproach_DockingApproach_1, DockingApproach_timer_1, false)
	 else (idDockingApproach_DockingApproach_1, DockingApproach_timer_1);

	

	(idDockingApproach_DockingApproach_5) 
	= 
	if ( idDockingApproach_DockingApproach_1 = 971) then
	DockingApproach_CheckTargetRelativeState_en(idDockingApproach_DockingApproach_1, false)
	 else (idDockingApproach_DockingApproach_1);

	

	(idDockingApproach_DockingApproach_6) 
	= 
	if ( idDockingApproach_DockingApproach_1 = 972) then
	DockingApproach_ReadyToDock_en(idDockingApproach_DockingApproach_1, false)
	 else (idDockingApproach_DockingApproach_1);

	

	(idDockingApproach_DockingApproach_7) 
	= 
	if ( idDockingApproach_DockingApproach_1 = 973) then
	DockingApproach_ComputeThrust_en(idDockingApproach_DockingApproach_1, false)
	 else (idDockingApproach_DockingApproach_1);

	

	(idDockingApproach_DockingApproach_8) 
	= 
	if ( idDockingApproach_DockingApproach_1 = 974) then
	DockingApproach_DockingApproachFailed_en(idDockingApproach_DockingApproach_1, false)
	 else (idDockingApproach_DockingApproach_1);

	

	(idDockingApproach_DockingApproach_9, idMissionPhaseStates_DockingApproach_4, DockingApproach_timer_5) 
	= 
		 if ( idDockingApproach_DockingApproach_1 = 0) then 
		(idDockingApproach_DockingApproach_3, idMissionPhaseStates_DockingApproach_3, DockingApproach_timer_3)
		 else
		 if ( idDockingApproach_DockingApproach_1 = 969) then 
		(idDockingApproach_DockingApproach_4, idMissionPhaseStates_DockingApproach_3, DockingApproach_timer_4)
		 else
		 if ( idDockingApproach_DockingApproach_1 = 971) then 
		(idDockingApproach_DockingApproach_5, idMissionPhaseStates_DockingApproach_3, DockingApproach_timer_4)
		 else
		 if ( idDockingApproach_DockingApproach_1 = 972) then 
		(idDockingApproach_DockingApproach_6, idMissionPhaseStates_DockingApproach_3, DockingApproach_timer_4)
		 else
		 if ( idDockingApproach_DockingApproach_1 = 973) then 
		(idDockingApproach_DockingApproach_7, idMissionPhaseStates_DockingApproach_3, DockingApproach_timer_4)
		 else
		 if ( idDockingApproach_DockingApproach_1 = 974) then 
		(idDockingApproach_DockingApproach_8, idMissionPhaseStates_DockingApproach_3, DockingApproach_timer_4)
		 else (idDockingApproach_DockingApproach_1, idMissionPhaseStates_DockingApproach_2, DockingApproach_timer_1);


	(idDockingApproach_DockingApproach, idMissionPhaseStates_DockingApproach, DockingApproach_timer) 
	= (idDockingApproach_DockingApproach_9, idMissionPhaseStates_DockingApproach_4, DockingApproach_timer_5);
	

tel





-- Exit action for state :DockingApproach_DockingApproach
node DockingApproach_DockingApproach_ex(idDockingApproach_DockingApproach_1:int;
	DockingApproachComplete_1:bool;
	idMissionPhaseStates_DockingApproach_1:int;
	isInner:bool)

returns (idDockingApproach_DockingApproach:int;
	DockingApproachComplete:bool;
	idMissionPhaseStates_DockingApproach:int);


var 	idDockingApproach_DockingApproach_2, idDockingApproach_DockingApproach_3, idDockingApproach_DockingApproach_4, idDockingApproach_DockingApproach_5, idDockingApproach_DockingApproach_6, idDockingApproach_DockingApproach_7, idDockingApproach_DockingApproach_8:int;
	DockingApproachComplete_2, DockingApproachComplete_3:bool;
	idMissionPhaseStates_DockingApproach_2:int;


let



	
	(idDockingApproach_DockingApproach_2) 
	= 
	if ( idDockingApproach_DockingApproach_1 = 969) then
	DockingApproach_StartApproach_ex(idDockingApproach_DockingApproach_1, false)
	 else (idDockingApproach_DockingApproach_1);

	

	(idDockingApproach_DockingApproach_3) 
	= 
	if ( idDockingApproach_DockingApproach_1 = 971) then
	DockingApproach_CheckTargetRelativeState_ex(idDockingApproach_DockingApproach_1, false)
	 else (idDockingApproach_DockingApproach_1);

	

	(DockingApproachComplete_2, idDockingApproach_DockingApproach_4) 
	= 
	if ( idDockingApproach_DockingApproach_1 = 972) then
	DockingApproach_ReadyToDock_ex(DockingApproachComplete_1, idDockingApproach_DockingApproach_1, false)
	 else (DockingApproachComplete_1, idDockingApproach_DockingApproach_1);

	

	(idDockingApproach_DockingApproach_5) 
	= 
	if ( idDockingApproach_DockingApproach_1 = 973) then
	DockingApproach_ComputeThrust_ex(idDockingApproach_DockingApproach_1, false)
	 else (idDockingApproach_DockingApproach_1);

	

	(idDockingApproach_DockingApproach_6) 
	= 
	if ( idDockingApproach_DockingApproach_1 = 974) then
	DockingApproach_DockingApproachFailed_ex(idDockingApproach_DockingApproach_1, false)
	 else (idDockingApproach_DockingApproach_1);

	

	(idDockingApproach_DockingApproach_7, DockingApproachComplete_3) 
	= 
		 if ( idDockingApproach_DockingApproach_1 = 969) then 
		(idDockingApproach_DockingApproach_2, DockingApproachComplete_1)
		 else
		 if ( idDockingApproach_DockingApproach_1 = 971) then 
		(idDockingApproach_DockingApproach_3, DockingApproachComplete_1)
		 else
		 if ( idDockingApproach_DockingApproach_1 = 972) then 
		(idDockingApproach_DockingApproach_4, DockingApproachComplete_2)
		 else
		 if ( idDockingApproach_DockingApproach_1 = 973) then 
		(idDockingApproach_DockingApproach_5, DockingApproachComplete_2)
		 else
		 if ( idDockingApproach_DockingApproach_1 = 974) then 
		(idDockingApproach_DockingApproach_6, DockingApproachComplete_2)
		 else (idDockingApproach_DockingApproach_1, DockingApproachComplete_1);


	-- set state as inactive 
	idMissionPhaseStates_DockingApproach_2
	 = if (not isInner) then 0 else idMissionPhaseStates_DockingApproach_1;

	idDockingApproach_DockingApproach_8 
	= 0;
	

	(idDockingApproach_DockingApproach, DockingApproachComplete, idMissionPhaseStates_DockingApproach) 
	= (idDockingApproach_DockingApproach_8, DockingApproachComplete_3, idMissionPhaseStates_DockingApproach_1);
	

tel






-- Entry action for state :MissionPhaseStates_DockingApproach
node MissionPhaseStates_DockingApproach_en(idMissionPhaseStates_DockingApproach_1:int;
	idChart_MissionPhaseStates_1:int;
	DockingApproach_1:bool;
	DockingApproachComplete_1:bool;
	DockingApproach_timer_1:int;
	idDockingApproach_DockingApproach_1:int;
	GOOD:int;
	NONE:int;
	POOR:int;
	dockingSensor_RelativeAttitude_1:int;
	dockingSensor_RelativePosition_1:int;
	dockingSensor_RelativeVelocity_1:int;
	dockingSensor_targetState_1:int;
	idDockingApproach_dockingSensor_1:int;
	isInner:bool)

returns (idMissionPhaseStates_DockingApproach:int;
	idChart_MissionPhaseStates:int;
	DockingApproach:bool;
	DockingApproachComplete:bool;
	DockingApproach_timer:int;
	idDockingApproach_DockingApproach:int;
	dockingSensor_RelativeAttitude:int;
	dockingSensor_RelativePosition:int;
	dockingSensor_RelativeVelocity:int;
	dockingSensor_targetState:int;
	idDockingApproach_dockingSensor:int);


var 	idMissionPhaseStates_DockingApproach_2, idMissionPhaseStates_DockingApproach_3:int;
	idChart_MissionPhaseStates_2:int;
	DockingApproach_2:bool;
	DockingApproachComplete_2:bool;
	DockingApproach_timer_2:int;
	idDockingApproach_DockingApproach_2:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_targetState_2:int;
	idDockingApproach_dockingSensor_2:int;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 966;
	

	DockingApproach_2 
	= if (not isInner) then true
	 else DockingApproach_1;
	

	DockingApproachComplete_2 
	= if (not isInner) then false
	 else DockingApproachComplete_1;
	

	
	(idDockingApproach_DockingApproach_2, idMissionPhaseStates_DockingApproach_2, DockingApproach_timer_2) 
	= DockingApproach_DockingApproach_en(idDockingApproach_DockingApproach_1, idMissionPhaseStates_DockingApproach_1, DockingApproach_timer_1, false);

	(idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_3, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2) 
	= DockingApproach_dockingSensor_en(idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_2, NONE, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, GOOD, POOR, false);


	(idMissionPhaseStates_DockingApproach, idChart_MissionPhaseStates, DockingApproach, DockingApproachComplete, DockingApproach_timer, idDockingApproach_DockingApproach, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_dockingSensor) 
	= (idMissionPhaseStates_DockingApproach_3, idChart_MissionPhaseStates_2, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_2, idDockingApproach_DockingApproach_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idDockingApproach_dockingSensor_2);
	

tel





-- Exit action for state :MissionPhaseStates_DockingApproach
node MissionPhaseStates_DockingApproach_ex(dockingSensor_timer_1:int;
	idDockingApproach_dockingSensor_1:int;
	idMissionPhaseStates_DockingApproach_1:int;
	DockingApproachComplete_1:bool;
	idDockingApproach_DockingApproach_1:int;
	DockingApproach_1:bool;
	idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (dockingSensor_timer:int;
	idDockingApproach_dockingSensor:int;
	idMissionPhaseStates_DockingApproach:int;
	DockingApproachComplete:bool;
	idDockingApproach_DockingApproach:int;
	DockingApproach:bool;
	idChart_MissionPhaseStates:int);


var 	dockingSensor_timer_2:int;
	idDockingApproach_dockingSensor_2:int;
	idMissionPhaseStates_DockingApproach_2, idMissionPhaseStates_DockingApproach_3, idMissionPhaseStates_DockingApproach_4:int;
	DockingApproachComplete_2:bool;
	idDockingApproach_DockingApproach_2:int;
	DockingApproach_2:bool;
	idChart_MissionPhaseStates_2:int;


let



	
	(dockingSensor_timer_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2) 
	= DockingApproach_dockingSensor_ex(dockingSensor_timer_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, false);

	(idDockingApproach_DockingApproach_2, DockingApproachComplete_2, idMissionPhaseStates_DockingApproach_3) 
	= DockingApproach_DockingApproach_ex(idDockingApproach_DockingApproach_1, DockingApproachComplete_1, idMissionPhaseStates_DockingApproach_2, false);


	DockingApproach_2 
	= if (not isInner) then false
	 else DockingApproach_1;
	

	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;

	idMissionPhaseStates_DockingApproach_4 
	= 0;
	

	(dockingSensor_timer, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach, DockingApproachComplete, idDockingApproach_DockingApproach, DockingApproach, idChart_MissionPhaseStates) 
	= (dockingSensor_timer_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_4, DockingApproachComplete_2, idDockingApproach_DockingApproach_2, DockingApproach_2, idChart_MissionPhaseStates_1);
	

tel






-- Entry action for state :MissionPhaseStates_FarApproach
node MissionPhaseStates_FarApproach_en(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 948;
	

	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_2);
	

tel





-- Exit action for state :MissionPhaseStates_FarApproach
node MissionPhaseStates_FarApproach_ex(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;


	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_1);
	

tel






-- Entry action for state :MissionPhaseStates_Start
node MissionPhaseStates_Start_en(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 951;
	

	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_2);
	

tel





-- Exit action for state :MissionPhaseStates_Start
node MissionPhaseStates_Start_ex(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;


	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_1);
	

tel






-- Entry action for state :MissionPhaseStates_ProximityOperations
node MissionPhaseStates_ProximityOperations_en(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 960;
	

	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_2);
	

tel





-- Exit action for state :MissionPhaseStates_ProximityOperations
node MissionPhaseStates_ProximityOperations_ex(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;


	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_1);
	

tel






-- Entry action for state :MissionPhaseStates_ApproachOrbit
node MissionPhaseStates_ApproachOrbit_en(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 958;
	

	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_2);
	

tel





-- Exit action for state :MissionPhaseStates_ApproachOrbit
node MissionPhaseStates_ApproachOrbit_ex(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;


	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_1);
	

tel






-- Entry action for state :Chart_MissionPhaseStates
node Chart_MissionPhaseStates_en(idChart_MissionPhaseStates_1:int;
	idChart_Chart_1:int;
	FailedApproach_1:bool;
	CaptureApproachFailed_1:bool;
	CaptureApproach_timer_1:int;
	GOOD:int;
	GPS_AbsolutePosition_1:int;
	GPS_AbsoluteTime_1:int;
	GPS_AbsoluteVelocity_1:int;
	GPS_timer_1:int;
	InertialNavigation_AbsoluteAttitude_1:int;
	InertialNavigation_AbsolutePosition_1:int;
	InertialNavigation_AbsoluteVelocity_1:int;
	InertialNavigation_timer_1:int;
	NONE:int;
	OrbitalState_Attitude_1:int;
	OrbitalState_Position_1:int;
	OrbitalState_Time_1:int;
	OrbitalState_Velocity_1:int;
	POOR:int;
	StarPlanetTracker_AbsoluteAttitude_1:int;
	StarPlanetTracker_AbsolutePosition_1:int;
	StarPlanetTracker_AbsoluteTime_1:int;
	StarPlanetTracker_AbsoluteVelocity_1:int;
	StarPlanetTracker_timer_1:int;
	idCaptureApproach_CaptureApproach_1:int;
	idCaptureApproach_OrbitalState_Active_1:int;
	idMissionPhaseStates_CaptureApproach_1:int;
	idOrbitalState_Active_GPS_1:int;
	idOrbitalState_Active_InertialNavigation_1:int;
	idOrbitalState_Active_OrbitalState_Complex_1:int;
	idOrbitalState_Active_StarPlanetTracker_1:int;
	idOrbitalState_Complex_OrbitalState_1:int;
	idOrbitalState_Complex_OrbitalState2_1:int;
	JointMission_1:bool;
	DockingApproach_1:bool;
	DockingApproachComplete_1:bool;
	DockingApproach_timer_1:int;
	dockingSensor_RelativeAttitude_1:int;
	dockingSensor_RelativePosition_1:int;
	dockingSensor_RelativeVelocity_1:int;
	dockingSensor_targetState_1:int;
	idDockingApproach_DockingApproach_1:int;
	idDockingApproach_dockingSensor_1:int;
	idMissionPhaseStates_DockingApproach_1:int;
	AttemptingToDock_1:bool;
	CLOSEDBUTUNMATED:int;
	INDETERMINATE:int;
	LatchCaptureComplete_1:bool;
	LatchCapture_timer_1:int;
	MATED:int;
	OPEN:int;
	idLatchCapture_LatchCaptureCheck_1:int;
	idLatchCapture_latch_1:int;
	idMissionPhaseStates_LatchCapture_1:int;
	latch_status_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int;
	idChart_Chart:int;
	FailedApproach:bool;
	CaptureApproachFailed:bool;
	CaptureApproach_timer:int;
	GPS_AbsolutePosition:int;
	GPS_AbsoluteTime:int;
	GPS_AbsoluteVelocity:int;
	GPS_timer:int;
	InertialNavigation_AbsoluteAttitude:int;
	InertialNavigation_AbsolutePosition:int;
	InertialNavigation_AbsoluteVelocity:int;
	InertialNavigation_timer:int;
	OrbitalState_Attitude:int;
	OrbitalState_Position:int;
	OrbitalState_Time:int;
	OrbitalState_Velocity:int;
	StarPlanetTracker_AbsoluteAttitude:int;
	StarPlanetTracker_AbsolutePosition:int;
	StarPlanetTracker_AbsoluteTime:int;
	StarPlanetTracker_AbsoluteVelocity:int;
	StarPlanetTracker_timer:int;
	idCaptureApproach_CaptureApproach:int;
	idCaptureApproach_OrbitalState_Active:int;
	idMissionPhaseStates_CaptureApproach:int;
	idOrbitalState_Active_GPS:int;
	idOrbitalState_Active_InertialNavigation:int;
	idOrbitalState_Active_OrbitalState_Complex:int;
	idOrbitalState_Active_StarPlanetTracker:int;
	idOrbitalState_Complex_OrbitalState:int;
	idOrbitalState_Complex_OrbitalState2:int;
	JointMission:bool;
	DockingApproach:bool;
	DockingApproachComplete:bool;
	DockingApproach_timer:int;
	dockingSensor_RelativeAttitude:int;
	dockingSensor_RelativePosition:int;
	dockingSensor_RelativeVelocity:int;
	dockingSensor_targetState:int;
	idDockingApproach_DockingApproach:int;
	idDockingApproach_dockingSensor:int;
	idMissionPhaseStates_DockingApproach:int;
	AttemptingToDock:bool;
	LatchCaptureComplete:bool;
	LatchCapture_timer:int;
	idLatchCapture_LatchCaptureCheck:int;
	idLatchCapture_latch:int;
	idMissionPhaseStates_LatchCapture:int;
	latch_status:int);


var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3, idChart_MissionPhaseStates_4, idChart_MissionPhaseStates_5, idChart_MissionPhaseStates_6, idChart_MissionPhaseStates_7, idChart_MissionPhaseStates_8, idChart_MissionPhaseStates_9, idChart_MissionPhaseStates_10, idChart_MissionPhaseStates_11, idChart_MissionPhaseStates_12, idChart_MissionPhaseStates_13, idChart_MissionPhaseStates_14, idChart_MissionPhaseStates_15, idChart_MissionPhaseStates_16:int;
	idChart_Chart_2, idChart_Chart_3, idChart_Chart_4:int;
	FailedApproach_2, FailedApproach_3:bool;
	CaptureApproachFailed_2, CaptureApproachFailed_3:bool;
	CaptureApproach_timer_2, CaptureApproach_timer_3:int;
	GPS_AbsolutePosition_2, GPS_AbsolutePosition_3:int;
	GPS_AbsoluteTime_2, GPS_AbsoluteTime_3:int;
	GPS_AbsoluteVelocity_2, GPS_AbsoluteVelocity_3:int;
	GPS_timer_2, GPS_timer_3:int;
	InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsoluteAttitude_3:int;
	InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsolutePosition_3:int;
	InertialNavigation_AbsoluteVelocity_2, InertialNavigation_AbsoluteVelocity_3:int;
	InertialNavigation_timer_2, InertialNavigation_timer_3:int;
	OrbitalState_Attitude_2, OrbitalState_Attitude_3:int;
	OrbitalState_Position_2, OrbitalState_Position_3:int;
	OrbitalState_Time_2, OrbitalState_Time_3:int;
	OrbitalState_Velocity_2, OrbitalState_Velocity_3:int;
	StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsoluteAttitude_3:int;
	StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsolutePosition_3:int;
	StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteTime_3:int;
	StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_AbsoluteVelocity_3:int;
	StarPlanetTracker_timer_2, StarPlanetTracker_timer_3:int;
	idCaptureApproach_CaptureApproach_2, idCaptureApproach_CaptureApproach_3:int;
	idCaptureApproach_OrbitalState_Active_2, idCaptureApproach_OrbitalState_Active_3:int;
	idMissionPhaseStates_CaptureApproach_2, idMissionPhaseStates_CaptureApproach_3:int;
	idOrbitalState_Active_GPS_2, idOrbitalState_Active_GPS_3:int;
	idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_InertialNavigation_3:int;
	idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_OrbitalState_Complex_3:int;
	idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Active_StarPlanetTracker_3:int;
	idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState_3:int;
	idOrbitalState_Complex_OrbitalState2_2, idOrbitalState_Complex_OrbitalState2_3:int;
	JointMission_2, JointMission_3:bool;
	DockingApproach_2, DockingApproach_3:bool;
	DockingApproachComplete_2, DockingApproachComplete_3:bool;
	DockingApproach_timer_2, DockingApproach_timer_3:int;
	dockingSensor_RelativeAttitude_2, dockingSensor_RelativeAttitude_3:int;
	dockingSensor_RelativePosition_2, dockingSensor_RelativePosition_3:int;
	dockingSensor_RelativeVelocity_2, dockingSensor_RelativeVelocity_3:int;
	dockingSensor_targetState_2, dockingSensor_targetState_3:int;
	idDockingApproach_DockingApproach_2, idDockingApproach_DockingApproach_3:int;
	idDockingApproach_dockingSensor_2, idDockingApproach_dockingSensor_3:int;
	idMissionPhaseStates_DockingApproach_2, idMissionPhaseStates_DockingApproach_3:int;
	AttemptingToDock_2, AttemptingToDock_3:bool;
	LatchCaptureComplete_2, LatchCaptureComplete_3:bool;
	LatchCapture_timer_2, LatchCapture_timer_3:int;
	idLatchCapture_LatchCaptureCheck_2, idLatchCapture_LatchCaptureCheck_3:int;
	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	idMissionPhaseStates_LatchCapture_2, idMissionPhaseStates_LatchCapture_3:int;
	latch_status_2, latch_status_3:int;


let



	-- set state as active 
	idChart_Chart_2 
	= 965;
	

	
-- transition trace :
	--POINT__To__MissionPhaseStates_Start_1
		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_Start_en(idChart_MissionPhaseStates_1, false);
		

	(idChart_MissionPhaseStates_3, idChart_Chart_3) 
	= 

	if ( idChart_MissionPhaseStates_1 = 0) then

	 (idChart_MissionPhaseStates_2, idChart_Chart_2)

	 else(idChart_MissionPhaseStates_1, idChart_Chart_2);

	

	(idChart_MissionPhaseStates_4) 
	= 
	if ( idChart_MissionPhaseStates_1 = 951) then
	MissionPhaseStates_Start_en(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_5) 
	= 
	if ( idChart_MissionPhaseStates_1 = 956) then
	MissionPhaseStates_CollisionAvoidanceManuever_en(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_6) 
	= 
	if ( idChart_MissionPhaseStates_1 = 958) then
	MissionPhaseStates_ApproachOrbit_en(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_7) 
	= 
	if ( idChart_MissionPhaseStates_1 = 960) then
	MissionPhaseStates_ProximityOperations_en(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_8) 
	= 
	if ( idChart_MissionPhaseStates_1 = 959) then
	MissionPhaseStates_Disengage_en(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_9) 
	= 
	if ( idChart_MissionPhaseStates_1 = 948) then
	MissionPhaseStates_FarApproach_en(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_10, FailedApproach_2) 
	= 
	if ( idChart_MissionPhaseStates_1 = 957) then
	MissionPhaseStates_FailedApproach_en(idChart_MissionPhaseStates_1, FailedApproach_1, false)
	 else (idChart_MissionPhaseStates_1, FailedApproach_1);

	

	(idMissionPhaseStates_CaptureApproach_2, idChart_MissionPhaseStates_11, CaptureApproachFailed_2, CaptureApproach_timer_2, idCaptureApproach_CaptureApproach_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idCaptureApproach_OrbitalState_Active_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2) 
	= 
	if ( idChart_MissionPhaseStates_1 = 976) then
	MissionPhaseStates_CaptureApproach_en(idMissionPhaseStates_CaptureApproach_1, idChart_MissionPhaseStates_1, CaptureApproachFailed_1, CaptureApproach_timer_1, idCaptureApproach_CaptureApproach_1, GOOD, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, NONE, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, POOR, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_OrbitalState_Active_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, false)
	 else (idMissionPhaseStates_CaptureApproach_1, idChart_MissionPhaseStates_1, CaptureApproachFailed_1, CaptureApproach_timer_1, idCaptureApproach_CaptureApproach_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_OrbitalState_Active_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1);

	

	(idChart_MissionPhaseStates_12, JointMission_2) 
	= 
	if ( idChart_MissionPhaseStates_1 = 961) then
	MissionPhaseStates_JointMission_en(idChart_MissionPhaseStates_1, JointMission_1, false)
	 else (idChart_MissionPhaseStates_1, JointMission_1);

	

	(idMissionPhaseStates_DockingApproach_2, idChart_MissionPhaseStates_13, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_2, idDockingApproach_DockingApproach_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idDockingApproach_dockingSensor_2) 
	= 
	if ( idChart_MissionPhaseStates_1 = 966) then
	MissionPhaseStates_DockingApproach_en(idMissionPhaseStates_DockingApproach_1, idChart_MissionPhaseStates_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, idDockingApproach_DockingApproach_1, GOOD, NONE, POOR, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_dockingSensor_1, false)
	 else (idMissionPhaseStates_DockingApproach_1, idChart_MissionPhaseStates_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, idDockingApproach_DockingApproach_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_dockingSensor_1);

	

	(idChart_MissionPhaseStates_14) 
	= 
	if ( idChart_MissionPhaseStates_1 = 950) then
	MissionPhaseStates_JointStabilize_en(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idMissionPhaseStates_LatchCapture_2, idChart_MissionPhaseStates_15, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, latch_status_2) 
	= 
	if ( idChart_MissionPhaseStates_1 = 1005) then
	MissionPhaseStates_LatchCapture_en(idMissionPhaseStates_LatchCapture_1, idChart_MissionPhaseStates_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, CLOSEDBUTUNMATED, INDETERMINATE, MATED, OPEN, idLatchCapture_latch_1, latch_status_1, false)
	 else (idMissionPhaseStates_LatchCapture_1, idChart_MissionPhaseStates_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, latch_status_1);

	

	(idChart_MissionPhaseStates_16, idChart_Chart_4, FailedApproach_3, CaptureApproachFailed_3, CaptureApproach_timer_3, GPS_AbsolutePosition_3, GPS_AbsoluteTime_3, GPS_AbsoluteVelocity_3, GPS_timer_3, InertialNavigation_AbsoluteAttitude_3, InertialNavigation_AbsolutePosition_3, InertialNavigation_AbsoluteVelocity_3, InertialNavigation_timer_3, OrbitalState_Attitude_3, OrbitalState_Position_3, OrbitalState_Time_3, OrbitalState_Velocity_3, StarPlanetTracker_AbsoluteAttitude_3, StarPlanetTracker_AbsolutePosition_3, StarPlanetTracker_AbsoluteTime_3, StarPlanetTracker_AbsoluteVelocity_3, StarPlanetTracker_timer_3, idCaptureApproach_CaptureApproach_3, idCaptureApproach_OrbitalState_Active_3, idMissionPhaseStates_CaptureApproach_3, idOrbitalState_Active_GPS_3, idOrbitalState_Active_InertialNavigation_3, idOrbitalState_Active_OrbitalState_Complex_3, idOrbitalState_Active_StarPlanetTracker_3, idOrbitalState_Complex_OrbitalState_3, idOrbitalState_Complex_OrbitalState2_3, JointMission_3, DockingApproach_3, DockingApproachComplete_3, DockingApproach_timer_3, dockingSensor_RelativeAttitude_3, dockingSensor_RelativePosition_3, dockingSensor_RelativeVelocity_3, dockingSensor_targetState_3, idDockingApproach_DockingApproach_3, idDockingApproach_dockingSensor_3, idMissionPhaseStates_DockingApproach_3, AttemptingToDock_3, LatchCaptureComplete_3, LatchCapture_timer_3, idLatchCapture_LatchCaptureCheck_3, idLatchCapture_latch_3, idMissionPhaseStates_LatchCapture_3, latch_status_3) 
	= 
		 if ( idChart_MissionPhaseStates_1 = 0) then 
		(idChart_MissionPhaseStates_3, idChart_Chart_3, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 951) then 
		(idChart_MissionPhaseStates_4, idChart_Chart_3, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 956) then 
		(idChart_MissionPhaseStates_5, idChart_Chart_3, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 958) then 
		(idChart_MissionPhaseStates_6, idChart_Chart_3, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 960) then 
		(idChart_MissionPhaseStates_7, idChart_Chart_3, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 959) then 
		(idChart_MissionPhaseStates_8, idChart_Chart_3, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 948) then 
		(idChart_MissionPhaseStates_9, idChart_Chart_3, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 957) then 
		(idChart_MissionPhaseStates_10, idChart_Chart_3, FailedApproach_2, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 976) then 
		(idChart_MissionPhaseStates_11, idChart_Chart_3, FailedApproach_2, CaptureApproachFailed_2, CaptureApproach_timer_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idCaptureApproach_CaptureApproach_2, idCaptureApproach_OrbitalState_Active_2, idMissionPhaseStates_CaptureApproach_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, JointMission_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 961) then 
		(idChart_MissionPhaseStates_12, idChart_Chart_3, FailedApproach_2, CaptureApproachFailed_2, CaptureApproach_timer_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idCaptureApproach_CaptureApproach_2, idCaptureApproach_OrbitalState_Active_2, idMissionPhaseStates_CaptureApproach_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, JointMission_2, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 966) then 
		(idChart_MissionPhaseStates_13, idChart_Chart_3, FailedApproach_2, CaptureApproachFailed_2, CaptureApproach_timer_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idCaptureApproach_CaptureApproach_2, idCaptureApproach_OrbitalState_Active_2, idMissionPhaseStates_CaptureApproach_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, JointMission_2, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idDockingApproach_DockingApproach_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 950) then 
		(idChart_MissionPhaseStates_14, idChart_Chart_3, FailedApproach_2, CaptureApproachFailed_2, CaptureApproach_timer_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idCaptureApproach_CaptureApproach_2, idCaptureApproach_OrbitalState_Active_2, idMissionPhaseStates_CaptureApproach_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, JointMission_2, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idDockingApproach_DockingApproach_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 1005) then 
		(idChart_MissionPhaseStates_15, idChart_Chart_3, FailedApproach_2, CaptureApproachFailed_2, CaptureApproach_timer_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idCaptureApproach_CaptureApproach_2, idCaptureApproach_OrbitalState_Active_2, idMissionPhaseStates_CaptureApproach_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, JointMission_2, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idDockingApproach_DockingApproach_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, latch_status_2)
		 else (idChart_MissionPhaseStates_1, idChart_Chart_2, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);


	(idChart_MissionPhaseStates, idChart_Chart, FailedApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, JointMission, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (idChart_MissionPhaseStates_16, idChart_Chart_4, FailedApproach_3, CaptureApproachFailed_3, CaptureApproach_timer_3, GPS_AbsolutePosition_3, GPS_AbsoluteTime_3, GPS_AbsoluteVelocity_3, GPS_timer_3, InertialNavigation_AbsoluteAttitude_3, InertialNavigation_AbsolutePosition_3, InertialNavigation_AbsoluteVelocity_3, InertialNavigation_timer_3, OrbitalState_Attitude_3, OrbitalState_Position_3, OrbitalState_Time_3, OrbitalState_Velocity_3, StarPlanetTracker_AbsoluteAttitude_3, StarPlanetTracker_AbsolutePosition_3, StarPlanetTracker_AbsoluteTime_3, StarPlanetTracker_AbsoluteVelocity_3, StarPlanetTracker_timer_3, idCaptureApproach_CaptureApproach_3, idCaptureApproach_OrbitalState_Active_3, idMissionPhaseStates_CaptureApproach_3, idOrbitalState_Active_GPS_3, idOrbitalState_Active_InertialNavigation_3, idOrbitalState_Active_OrbitalState_Complex_3, idOrbitalState_Active_StarPlanetTracker_3, idOrbitalState_Complex_OrbitalState_3, idOrbitalState_Complex_OrbitalState2_3, JointMission_3, DockingApproach_3, DockingApproachComplete_3, DockingApproach_timer_3, dockingSensor_RelativeAttitude_3, dockingSensor_RelativePosition_3, dockingSensor_RelativeVelocity_3, dockingSensor_targetState_3, idDockingApproach_DockingApproach_3, idDockingApproach_dockingSensor_3, idMissionPhaseStates_DockingApproach_3, AttemptingToDock_3, LatchCaptureComplete_3, LatchCapture_timer_3, idLatchCapture_LatchCaptureCheck_3, idLatchCapture_latch_3, idMissionPhaseStates_LatchCapture_3, latch_status_3);
	

tel





-- Exit action for state :Chart_MissionPhaseStates
node Chart_MissionPhaseStates_ex(idChart_MissionPhaseStates_1:int;
	ApproachOrbitComplete_1:bool;
	CaptureApproachComplete_1:bool;
	FarApproachComplete_1:bool;
	ProximityOperationsComplete_1:bool;
	idCaptureApproach_CaptureApproach_1:int;
	idCaptureApproach_OrbitalState_Active_1:int;
	idMissionPhaseStates_CaptureApproach_1:int;
	idOrbitalState_Active_GPS_1:int;
	idOrbitalState_Active_InertialNavigation_1:int;
	idOrbitalState_Active_OrbitalState_Complex_1:int;
	idOrbitalState_Active_StarPlanetTracker_1:int;
	idOrbitalState_Complex_OrbitalState_1:int;
	idOrbitalState_Complex_OrbitalState2_1:int;
	DockingApproach_1:bool;
	DockingApproachComplete_1:bool;
	dockingSensor_timer_1:int;
	idDockingApproach_DockingApproach_1:int;
	idDockingApproach_dockingSensor_1:int;
	idMissionPhaseStates_DockingApproach_1:int;
	AttemptingToDock_1:bool;
	idLatchCapture_LatchCaptureCheck_1:int;
	idLatchCapture_latch_1:int;
	idMissionPhaseStates_LatchCapture_1:int;
	idChart_Chart_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int;
	ApproachOrbitComplete:bool;
	CaptureApproachComplete:bool;
	FarApproachComplete:bool;
	ProximityOperationsComplete:bool;
	idCaptureApproach_CaptureApproach:int;
	idCaptureApproach_OrbitalState_Active:int;
	idMissionPhaseStates_CaptureApproach:int;
	idOrbitalState_Active_GPS:int;
	idOrbitalState_Active_InertialNavigation:int;
	idOrbitalState_Active_OrbitalState_Complex:int;
	idOrbitalState_Active_StarPlanetTracker:int;
	idOrbitalState_Complex_OrbitalState:int;
	idOrbitalState_Complex_OrbitalState2:int;
	DockingApproach:bool;
	DockingApproachComplete:bool;
	dockingSensor_timer:int;
	idDockingApproach_DockingApproach:int;
	idDockingApproach_dockingSensor:int;
	idMissionPhaseStates_DockingApproach:int;
	AttemptingToDock:bool;
	idLatchCapture_LatchCaptureCheck:int;
	idLatchCapture_latch:int;
	idMissionPhaseStates_LatchCapture:int;
	idChart_Chart:int);


var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3, idChart_MissionPhaseStates_4, idChart_MissionPhaseStates_5, idChart_MissionPhaseStates_6, idChart_MissionPhaseStates_7, idChart_MissionPhaseStates_8, idChart_MissionPhaseStates_9, idChart_MissionPhaseStates_10, idChart_MissionPhaseStates_11, idChart_MissionPhaseStates_12, idChart_MissionPhaseStates_13, idChart_MissionPhaseStates_14, idChart_MissionPhaseStates_15:int;
	ApproachOrbitComplete_2, ApproachOrbitComplete_3:bool;
	CaptureApproachComplete_2, CaptureApproachComplete_3, CaptureApproachComplete_4:bool;
	FarApproachComplete_2, FarApproachComplete_3:bool;
	ProximityOperationsComplete_2, ProximityOperationsComplete_3:bool;
	idCaptureApproach_CaptureApproach_2, idCaptureApproach_CaptureApproach_3:int;
	idCaptureApproach_OrbitalState_Active_2, idCaptureApproach_OrbitalState_Active_3:int;
	idMissionPhaseStates_CaptureApproach_2, idMissionPhaseStates_CaptureApproach_3:int;
	idOrbitalState_Active_GPS_2, idOrbitalState_Active_GPS_3:int;
	idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_InertialNavigation_3:int;
	idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_OrbitalState_Complex_3:int;
	idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Active_StarPlanetTracker_3:int;
	idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState_3:int;
	idOrbitalState_Complex_OrbitalState2_2, idOrbitalState_Complex_OrbitalState2_3:int;
	DockingApproach_2, DockingApproach_3:bool;
	DockingApproachComplete_2, DockingApproachComplete_3:bool;
	dockingSensor_timer_2, dockingSensor_timer_3:int;
	idDockingApproach_DockingApproach_2, idDockingApproach_DockingApproach_3:int;
	idDockingApproach_dockingSensor_2, idDockingApproach_dockingSensor_3:int;
	idMissionPhaseStates_DockingApproach_2, idMissionPhaseStates_DockingApproach_3:int;
	AttemptingToDock_2, AttemptingToDock_3:bool;
	idLatchCapture_LatchCaptureCheck_2, idLatchCapture_LatchCaptureCheck_3:int;
	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	idMissionPhaseStates_LatchCapture_2, idMissionPhaseStates_LatchCapture_3:int;
	idChart_Chart_2:int;


let



	
	(idChart_MissionPhaseStates_2) 
	= 
	if ( idChart_MissionPhaseStates_1 = 951) then
	MissionPhaseStates_Start_ex(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(ApproachOrbitComplete_2, ProximityOperationsComplete_2, FarApproachComplete_2, CaptureApproachComplete_2, idChart_MissionPhaseStates_3) 
	= 
	if ( idChart_MissionPhaseStates_1 = 956) then
	MissionPhaseStates_CollisionAvoidanceManuever_ex(ApproachOrbitComplete_1, ProximityOperationsComplete_1, FarApproachComplete_1, CaptureApproachComplete_1, idChart_MissionPhaseStates_1, false)
	 else (ApproachOrbitComplete_1, ProximityOperationsComplete_1, FarApproachComplete_1, CaptureApproachComplete_1, idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_4) 
	= 
	if ( idChart_MissionPhaseStates_1 = 958) then
	MissionPhaseStates_ApproachOrbit_ex(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_5) 
	= 
	if ( idChart_MissionPhaseStates_1 = 960) then
	MissionPhaseStates_ProximityOperations_ex(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_6) 
	= 
	if ( idChart_MissionPhaseStates_1 = 959) then
	MissionPhaseStates_Disengage_ex(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_7) 
	= 
	if ( idChart_MissionPhaseStates_1 = 948) then
	MissionPhaseStates_FarApproach_ex(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_8) 
	= 
	if ( idChart_MissionPhaseStates_1 = 957) then
	MissionPhaseStates_FailedApproach_ex(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idOrbitalState_Active_InertialNavigation_2, idCaptureApproach_OrbitalState_Active_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, idMissionPhaseStates_CaptureApproach_2, CaptureApproachComplete_3, idCaptureApproach_CaptureApproach_2, idChart_MissionPhaseStates_9) 
	= 
	if ( idChart_MissionPhaseStates_1 = 976) then
	MissionPhaseStates_CaptureApproach_ex(idOrbitalState_Active_InertialNavigation_1, idCaptureApproach_OrbitalState_Active_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, idMissionPhaseStates_CaptureApproach_1, CaptureApproachComplete_1, idCaptureApproach_CaptureApproach_1, idChart_MissionPhaseStates_1, false)
	 else (idOrbitalState_Active_InertialNavigation_1, idCaptureApproach_OrbitalState_Active_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, idMissionPhaseStates_CaptureApproach_1, CaptureApproachComplete_1, idCaptureApproach_CaptureApproach_1, idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_10) 
	= 
	if ( idChart_MissionPhaseStates_1 = 961) then
	MissionPhaseStates_JointMission_ex(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(dockingSensor_timer_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2, DockingApproachComplete_2, idDockingApproach_DockingApproach_2, DockingApproach_2, idChart_MissionPhaseStates_11) 
	= 
	if ( idChart_MissionPhaseStates_1 = 966) then
	MissionPhaseStates_DockingApproach_ex(dockingSensor_timer_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, DockingApproachComplete_1, idDockingApproach_DockingApproach_1, DockingApproach_1, idChart_MissionPhaseStates_1, false)
	 else (dockingSensor_timer_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, DockingApproachComplete_1, idDockingApproach_DockingApproach_1, DockingApproach_1, idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_12) 
	= 
	if ( idChart_MissionPhaseStates_1 = 950) then
	MissionPhaseStates_JointStabilize_ex(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, AttemptingToDock_2, idLatchCapture_LatchCaptureCheck_2, idChart_MissionPhaseStates_13) 
	= 
	if ( idChart_MissionPhaseStates_1 = 1005) then
	MissionPhaseStates_LatchCapture_ex(idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idChart_MissionPhaseStates_1, false)
	 else (idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_14, ApproachOrbitComplete_3, CaptureApproachComplete_4, FarApproachComplete_3, ProximityOperationsComplete_3, idCaptureApproach_CaptureApproach_3, idCaptureApproach_OrbitalState_Active_3, idMissionPhaseStates_CaptureApproach_3, idOrbitalState_Active_GPS_3, idOrbitalState_Active_InertialNavigation_3, idOrbitalState_Active_OrbitalState_Complex_3, idOrbitalState_Active_StarPlanetTracker_3, idOrbitalState_Complex_OrbitalState_3, idOrbitalState_Complex_OrbitalState2_3, DockingApproach_3, DockingApproachComplete_3, dockingSensor_timer_3, idDockingApproach_DockingApproach_3, idDockingApproach_dockingSensor_3, idMissionPhaseStates_DockingApproach_3, AttemptingToDock_3, idLatchCapture_LatchCaptureCheck_3, idLatchCapture_latch_3, idMissionPhaseStates_LatchCapture_3) 
	= 
		 if ( idChart_MissionPhaseStates_1 = 951) then 
		(idChart_MissionPhaseStates_2, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 956) then 
		(idChart_MissionPhaseStates_3, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 958) then 
		(idChart_MissionPhaseStates_4, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 960) then 
		(idChart_MissionPhaseStates_5, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 959) then 
		(idChart_MissionPhaseStates_6, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 948) then 
		(idChart_MissionPhaseStates_7, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 957) then 
		(idChart_MissionPhaseStates_8, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 976) then 
		(idChart_MissionPhaseStates_9, ApproachOrbitComplete_2, CaptureApproachComplete_3, FarApproachComplete_2, ProximityOperationsComplete_2, idCaptureApproach_CaptureApproach_2, idCaptureApproach_OrbitalState_Active_2, idMissionPhaseStates_CaptureApproach_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 961) then 
		(idChart_MissionPhaseStates_10, ApproachOrbitComplete_2, CaptureApproachComplete_3, FarApproachComplete_2, ProximityOperationsComplete_2, idCaptureApproach_CaptureApproach_2, idCaptureApproach_OrbitalState_Active_2, idMissionPhaseStates_CaptureApproach_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 966) then 
		(idChart_MissionPhaseStates_11, ApproachOrbitComplete_2, CaptureApproachComplete_3, FarApproachComplete_2, ProximityOperationsComplete_2, idCaptureApproach_CaptureApproach_2, idCaptureApproach_OrbitalState_Active_2, idMissionPhaseStates_CaptureApproach_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, DockingApproach_2, DockingApproachComplete_2, dockingSensor_timer_2, idDockingApproach_DockingApproach_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 950) then 
		(idChart_MissionPhaseStates_12, ApproachOrbitComplete_2, CaptureApproachComplete_3, FarApproachComplete_2, ProximityOperationsComplete_2, idCaptureApproach_CaptureApproach_2, idCaptureApproach_OrbitalState_Active_2, idMissionPhaseStates_CaptureApproach_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, DockingApproach_2, DockingApproachComplete_2, dockingSensor_timer_2, idDockingApproach_DockingApproach_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 1005) then 
		(idChart_MissionPhaseStates_13, ApproachOrbitComplete_2, CaptureApproachComplete_3, FarApproachComplete_2, ProximityOperationsComplete_2, idCaptureApproach_CaptureApproach_2, idCaptureApproach_OrbitalState_Active_2, idMissionPhaseStates_CaptureApproach_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, DockingApproach_2, DockingApproachComplete_2, dockingSensor_timer_2, idDockingApproach_DockingApproach_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2, AttemptingToDock_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2)
		 else (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1);


	-- set state as inactive 
	idChart_Chart_2
	 = if (not isInner) then 0 else idChart_Chart_1;

	idChart_MissionPhaseStates_15 
	= 0;
	

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, DockingApproach, DockingApproachComplete, dockingSensor_timer, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach, AttemptingToDock, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, idChart_Chart) 
	= (idChart_MissionPhaseStates_15, ApproachOrbitComplete_3, CaptureApproachComplete_4, FarApproachComplete_3, ProximityOperationsComplete_3, idCaptureApproach_CaptureApproach_3, idCaptureApproach_OrbitalState_Active_3, idMissionPhaseStates_CaptureApproach_3, idOrbitalState_Active_GPS_3, idOrbitalState_Active_InertialNavigation_3, idOrbitalState_Active_OrbitalState_Complex_3, idOrbitalState_Active_StarPlanetTracker_3, idOrbitalState_Complex_OrbitalState_3, idOrbitalState_Complex_OrbitalState2_3, DockingApproach_3, DockingApproachComplete_3, dockingSensor_timer_3, idDockingApproach_DockingApproach_3, idDockingApproach_dockingSensor_3, idMissionPhaseStates_DockingApproach_3, AttemptingToDock_3, idLatchCapture_LatchCaptureCheck_3, idLatchCapture_latch_3, idMissionPhaseStates_LatchCapture_3, idChart_Chart_1);
	

tel


--***************************************************State :LatchCapture_latch Automaton***************************************************

node LatchCapture_latch_node(idLatchCapture_latch_1:int;
	INDETERMINATE:int;
	latch_status_1:int;
	OPEN:int;
	MATED:int;
	CLOSEDBUTUNMATED:int)

returns (idLatchCapture_latch:int;
	latch_status:int);


let

	 automaton latchcapture_latch

	state POINTLatchCapture_latch:
	unless (idLatchCapture_latch_1=0) restart POINT__TO__LATCH_OPENING_1



	unless (idLatchCapture_latch_1=1012) restart LATCH_OPENING__TO__LATCH_OPEN_1



	unless (idLatchCapture_latch_1=1012) restart LATCH_OPENING__TO__LATCH_CLOSING_2



	unless (idLatchCapture_latch_1=1013) restart LATCH_OPEN__TO__LATCH_CLOSING_1



	unless (idLatchCapture_latch_1=1014) restart LATCH_CLOSING__TO__LATCH_MATED_1



	unless (idLatchCapture_latch_1=1014) restart LATCH_CLOSING__TO__CHART_CHARTJUNCTION1144_2



	unless (idLatchCapture_latch_1=1014) restart LATCH_CLOSING__TO__LATCH_CLOSEDBUTUNMATED_3



	unless (idLatchCapture_latch_1=1015) restart LATCH_MATED__TO__CHART_CHARTJUNCTION1144_1



	unless (idLatchCapture_latch_1=1016) restart LATCH_CLOSEDBUTUNMATED__TO__CHART_CHARTJUNCTION1144_1



	unless (idLatchCapture_latch_1=1012) restart LATCH_OPENING_IDL

	unless (idLatchCapture_latch_1=1013) restart LATCH_OPEN_IDL

	unless (idLatchCapture_latch_1=1014) restart LATCH_CLOSING_IDL

	unless (idLatchCapture_latch_1=1015) restart LATCH_MATED_IDL

	unless (idLatchCapture_latch_1=1016) restart LATCH_CLOSEDBUTUNMATED_IDL

	let

		(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_1, latch_status_1);
	

	tel



	state POINT__TO__LATCH_OPENING_1:

	 var 	idLatchCapture_latch_2:int;
	latch_status_2:int;
	let

		-- transition trace :
	--POINT__To__latch_Opening_1
		(idLatchCapture_latch_2, latch_status_2) 
	= latch_Opening_en(idLatchCapture_latch_1, INDETERMINATE, latch_status_1, false);
		

	(idLatchCapture_latch, latch_status) 
	=  (idLatchCapture_latch_2, latch_status_2);


	tel

	until true restart POINTLatchCapture_latch



	state LATCH_OPENING__TO__LATCH_OPEN_1:

	 var 	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	latch_status_2:int;
	let

		-- transition trace :
	--latch_Opening__To__latch_Open_1
		(idLatchCapture_latch_2) 
	= latch_Opening_ex(idLatchCapture_latch_1, false);
		

		(idLatchCapture_latch_3, latch_status_2) 
	= latch_Open_en(idLatchCapture_latch_2, OPEN, latch_status_1, false);
		

	(idLatchCapture_latch, latch_status) 
	=  (idLatchCapture_latch_3, latch_status_2);


	tel

	until true restart POINTLatchCapture_latch



	state LATCH_OPENING__TO__LATCH_CLOSING_2:

	 var 	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	latch_status_2:int;
	let

		-- transition trace :
	--latch_Opening__To__latch_Closing_2
		(idLatchCapture_latch_2) 
	= latch_Opening_ex(idLatchCapture_latch_1, false);
		

		(idLatchCapture_latch_3, latch_status_2) 
	= latch_Closing_en(idLatchCapture_latch_2, INDETERMINATE, latch_status_1, false);
		

	(idLatchCapture_latch, latch_status) 
	=  (idLatchCapture_latch_3, latch_status_2);


	tel

	until true restart POINTLatchCapture_latch



	state LATCH_OPEN__TO__LATCH_CLOSING_1:

	 var 	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	latch_status_2:int;
	let

		-- transition trace :
	--latch_Open__To__latch_Closing_1
		(idLatchCapture_latch_2) 
	= latch_Open_ex(idLatchCapture_latch_1, false);
		

		(idLatchCapture_latch_3, latch_status_2) 
	= latch_Closing_en(idLatchCapture_latch_2, INDETERMINATE, latch_status_1, false);
		

	(idLatchCapture_latch, latch_status) 
	=  (idLatchCapture_latch_3, latch_status_2);


	tel

	until true restart POINTLatchCapture_latch



	state LATCH_CLOSING__TO__LATCH_MATED_1:

	 var 	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	latch_status_2:int;
	let

		-- transition trace :
	--latch_Closing__To__latch_Mated_1
		(idLatchCapture_latch_2) 
	= latch_Closing_ex(idLatchCapture_latch_1, false);
		

		(idLatchCapture_latch_3, latch_status_2) 
	= latch_Mated_en(idLatchCapture_latch_2, MATED, latch_status_1, false);
		

	(idLatchCapture_latch, latch_status) 
	=  (idLatchCapture_latch_3, latch_status_2);


	tel

	until true restart POINTLatchCapture_latch



	state LATCH_CLOSING__TO__CHART_CHARTJUNCTION1144_2:

	 var 	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	latch_status_2:int;
	let

		

-- transition trace :
	--latch_Closing__To__Junction1144_2, Junction1144__To__latch_Opening_1
		(idLatchCapture_latch_2) 
	= latch_Closing_ex(idLatchCapture_latch_1, false);
		

		(idLatchCapture_latch_3, latch_status_2) 
	= latch_Opening_en(idLatchCapture_latch_2, INDETERMINATE, latch_status_1, false);
		

	(idLatchCapture_latch, latch_status) 
	=  (idLatchCapture_latch_3, latch_status_2);


	tel

	until true restart POINTLatchCapture_latch



	state LATCH_CLOSING__TO__LATCH_CLOSEDBUTUNMATED_3:

	 var 	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	latch_status_2:int;
	let

		-- transition trace :
	--latch_Closing__To__latch_ClosedButUnmated_3
		(idLatchCapture_latch_2) 
	= latch_Closing_ex(idLatchCapture_latch_1, false);
		

		(idLatchCapture_latch_3, latch_status_2) 
	= latch_ClosedButUnmated_en(idLatchCapture_latch_2, CLOSEDBUTUNMATED, latch_status_1, false);
		

	(idLatchCapture_latch, latch_status) 
	=  (idLatchCapture_latch_3, latch_status_2);


	tel

	until true restart POINTLatchCapture_latch



	state LATCH_MATED__TO__CHART_CHARTJUNCTION1144_1:

	 var 	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	latch_status_2:int;
	let

		

-- transition trace :
	--latch_Mated__To__Junction1144_1, Junction1144__To__latch_Opening_1
		(idLatchCapture_latch_2) 
	= latch_Mated_ex(idLatchCapture_latch_1, false);
		

		(idLatchCapture_latch_3, latch_status_2) 
	= latch_Opening_en(idLatchCapture_latch_2, INDETERMINATE, latch_status_1, false);
		

	(idLatchCapture_latch, latch_status) 
	=  (idLatchCapture_latch_3, latch_status_2);


	tel

	until true restart POINTLatchCapture_latch



	state LATCH_CLOSEDBUTUNMATED__TO__CHART_CHARTJUNCTION1144_1:

	 var 	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	latch_status_2:int;
	let

		

-- transition trace :
	--latch_ClosedButUnmated__To__Junction1144_1, Junction1144__To__latch_Opening_1
		(idLatchCapture_latch_2) 
	= latch_ClosedButUnmated_ex(idLatchCapture_latch_1, false);
		

		(idLatchCapture_latch_3, latch_status_2) 
	= latch_Opening_en(idLatchCapture_latch_2, INDETERMINATE, latch_status_1, false);
		

	(idLatchCapture_latch, latch_status) 
	=  (idLatchCapture_latch_3, latch_status_2);


	tel

	until true restart POINTLatchCapture_latch



	state LATCH_OPENING_IDL:

	 	let

		

	(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_1, latch_status_1);
	

	tel

	until true restart POINTLatchCapture_latch



	state LATCH_OPEN_IDL:

	 	let

		

	(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_1, latch_status_1);
	

	tel

	until true restart POINTLatchCapture_latch



	state LATCH_CLOSING_IDL:

	 	let

		

	(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_1, latch_status_1);
	

	tel

	until true restart POINTLatchCapture_latch



	state LATCH_MATED_IDL:

	 	let

		

	(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_1, latch_status_1);
	

	tel

	until true restart POINTLatchCapture_latch



	state LATCH_CLOSEDBUTUNMATED_IDL:

	 	let

		

	(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_1, latch_status_1);
	

	tel

	until true restart POINTLatchCapture_latch



tel


--***************************************************State :LatchCapture_LatchCaptureCheck Automaton***************************************************

node LatchCapture_LatchCaptureCheck_node(idLatchCapture_LatchCaptureCheck_1:int;
	LatchCapture_timer_1:int;
	latch_status_1:int;
	OPEN:int;
	LatchCapture_timer_upper_limit:int;
	MATED:int;
	LatchCaptureComplete_1:bool;
	CLOSEDBUTUNMATED:int;
	AttemptingToDock_1:bool;
	idChart_MissionPhaseStates_1:int;
	idLatchCapture_latch_1:int;
	idMissionPhaseStates_LatchCapture_1:int;
	idDockingApproach_DockingApproach_1:int;
	idMissionPhaseStates_DockingApproach_1:int;
	DockingApproach_1:bool;
	DockingApproachComplete_1:bool;
	DockingApproach_timer_1:int;
	GOOD:int;
	NONE:int;
	POOR:int;
	dockingSensor_RelativeAttitude_1:int;
	dockingSensor_RelativePosition_1:int;
	dockingSensor_RelativeVelocity_1:int;
	dockingSensor_targetState_1:int;
	idDockingApproach_dockingSensor_1:int)

returns (idLatchCapture_LatchCaptureCheck:int;
	LatchCapture_timer:int;
	LatchCaptureComplete:bool;
	AttemptingToDock:bool;
	idChart_MissionPhaseStates:int;
	idLatchCapture_latch:int;
	idMissionPhaseStates_LatchCapture:int;
	idDockingApproach_DockingApproach:int;
	idMissionPhaseStates_DockingApproach:int;
	DockingApproach:bool;
	DockingApproachComplete:bool;
	DockingApproach_timer:int;
	dockingSensor_RelativeAttitude:int;
	dockingSensor_RelativePosition:int;
	dockingSensor_RelativeVelocity:int;
	dockingSensor_targetState:int;
	idDockingApproach_dockingSensor:int);


let

	 automaton latchcapture_latchcapturecheck

	state POINTLatchCapture_LatchCaptureCheck:
	unless (idLatchCapture_LatchCaptureCheck_1=0) restart POINT__TO__LATCHCAPTURECHECK_CHECKLATCHOPEN_1



	unless (idLatchCapture_LatchCaptureCheck_1=1007) and (  latch_status_1 =OPEN ) restart LATCHCAPTURECHECK_CHECKLATCHOPEN__TO__LATCHCAPTURECHECK_CHECKLATCHMATED_1



	unless (idLatchCapture_LatchCaptureCheck_1=1007) and (  LatchCapture_timer_1 =LatchCapture_timer_upper_limit ) restart LATCHCAPTURECHECK_CHECKLATCHOPEN__TO__LATCHCAPTURECHECK_LATCHFAILED_2



	unless (idLatchCapture_LatchCaptureCheck_1=1008) and (  latch_status_1 =MATED ) restart LATCHCAPTURECHECK_CHECKLATCHMATED__TO__LATCHCAPTURECHECK_DOCKED_1



	unless (idLatchCapture_LatchCaptureCheck_1=1008) and (  latch_status_1 =CLOSEDBUTUNMATED ) restart LATCHCAPTURECHECK_CHECKLATCHMATED__TO__CHART_CHARTJUNCTION1136_2



	unless (idLatchCapture_LatchCaptureCheck_1=1008) and (  LatchCapture_timer_1 =LatchCapture_timer_upper_limit ) restart LATCHCAPTURECHECK_CHECKLATCHMATED__TO__CHART_CHARTJUNCTION1136_3



	unless (idLatchCapture_LatchCaptureCheck_1=1009) restart LATCHCAPTURECHECK_LATCHFAILED__TO__DOCKINGAPPROACH_CHECKTARGETRELATIVESTATE_1



	unless (idLatchCapture_LatchCaptureCheck_1=1010) restart LATCHCAPTURECHECK_DOCKED__TO__MISSIONPHASESTATES_JOINTSTABILIZE_1



	unless (idLatchCapture_LatchCaptureCheck_1=1007) restart LATCHCAPTURECHECK_CHECKLATCHOPEN_IDL

	unless (idLatchCapture_LatchCaptureCheck_1=1008) restart LATCHCAPTURECHECK_CHECKLATCHMATED_IDL

	unless (idLatchCapture_LatchCaptureCheck_1=1009) restart LATCHCAPTURECHECK_LATCHFAILED_IDL

	unless (idLatchCapture_LatchCaptureCheck_1=1010) restart LATCHCAPTURECHECK_DOCKED_IDL

	let

		(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, LatchCaptureComplete, AttemptingToDock, idChart_MissionPhaseStates, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, idDockingApproach_DockingApproach, idMissionPhaseStates_DockingApproach, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_dockingSensor) 
	= (idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_1, LatchCaptureComplete_1, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, idDockingApproach_DockingApproach_1, idMissionPhaseStates_DockingApproach_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_dockingSensor_1);
	

	tel



	state POINT__TO__LATCHCAPTURECHECK_CHECKLATCHOPEN_1:

	 var 	idLatchCapture_LatchCaptureCheck_2:int;
	LatchCapture_timer_2:int;
	let

		-- transition trace :
	--POINT__To__LatchCaptureCheck_CheckLatchOpen_1
		(idLatchCapture_LatchCaptureCheck_2, LatchCapture_timer_2) 
	= LatchCaptureCheck_CheckLatchOpen_en(idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_1, false);
		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer) 
	=  (idLatchCapture_LatchCaptureCheck_2, LatchCapture_timer_2);

	--add unused variables
	(AttemptingToDock, DockingApproach, DockingApproachComplete, DockingApproach_timer, LatchCaptureComplete, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_latch, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture) 
	= (AttemptingToDock_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, LatchCaptureComplete_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idChart_MissionPhaseStates_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_latch_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1);
	

	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_CHECKLATCHOPEN__TO__LATCHCAPTURECHECK_CHECKLATCHMATED_1:

	 var 	idLatchCapture_LatchCaptureCheck_2, idLatchCapture_LatchCaptureCheck_3:int;
	let

		-- transition trace :
	--LatchCaptureCheck_CheckLatchOpen__To__LatchCaptureCheck_CheckLatchMated_1
		(idLatchCapture_LatchCaptureCheck_2) 
	= LatchCaptureCheck_CheckLatchOpen_ex(idLatchCapture_LatchCaptureCheck_1, false);
		

		(idLatchCapture_LatchCaptureCheck_3) 
	= LatchCaptureCheck_CheckLatchMated_en(idLatchCapture_LatchCaptureCheck_2, false);
		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer) 
	=  (idLatchCapture_LatchCaptureCheck_3, LatchCapture_timer_1);

	--add unused variables
	(AttemptingToDock, DockingApproach, DockingApproachComplete, DockingApproach_timer, LatchCaptureComplete, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_latch, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture) 
	= (AttemptingToDock_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, LatchCaptureComplete_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idChart_MissionPhaseStates_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_latch_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1);
	

	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_CHECKLATCHOPEN__TO__LATCHCAPTURECHECK_LATCHFAILED_2:

	 var 	idLatchCapture_LatchCaptureCheck_2, idLatchCapture_LatchCaptureCheck_3:int;
	let

		-- transition trace :
	--LatchCaptureCheck_CheckLatchOpen__To__LatchCaptureCheck_LatchFailed_2
		(idLatchCapture_LatchCaptureCheck_2) 
	= LatchCaptureCheck_CheckLatchOpen_ex(idLatchCapture_LatchCaptureCheck_1, false);
		

		(idLatchCapture_LatchCaptureCheck_3) 
	= LatchCaptureCheck_LatchFailed_en(idLatchCapture_LatchCaptureCheck_2, false);
		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer) 
	=  (idLatchCapture_LatchCaptureCheck_3, LatchCapture_timer_1);

	--add unused variables
	(AttemptingToDock, DockingApproach, DockingApproachComplete, DockingApproach_timer, LatchCaptureComplete, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_latch, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture) 
	= (AttemptingToDock_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, LatchCaptureComplete_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idChart_MissionPhaseStates_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_latch_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1);
	

	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_CHECKLATCHMATED__TO__LATCHCAPTURECHECK_DOCKED_1:

	 var 	idLatchCapture_LatchCaptureCheck_2, idLatchCapture_LatchCaptureCheck_3:int;
	LatchCaptureComplete_2:bool;
	let

		-- transition trace :
	--LatchCaptureCheck_CheckLatchMated__To__LatchCaptureCheck_Docked_1
		(idLatchCapture_LatchCaptureCheck_2) 
	= LatchCaptureCheck_CheckLatchMated_ex(idLatchCapture_LatchCaptureCheck_1, false);
		

		(idLatchCapture_LatchCaptureCheck_3, LatchCaptureComplete_2) 
	= LatchCaptureCheck_Docked_en(idLatchCapture_LatchCaptureCheck_2, LatchCaptureComplete_1, false);
		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, LatchCaptureComplete) 
	=  (idLatchCapture_LatchCaptureCheck_3, LatchCapture_timer_1, LatchCaptureComplete_2);

	--add unused variables
	(AttemptingToDock, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_latch, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture) 
	= (AttemptingToDock_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idChart_MissionPhaseStates_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_latch_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1);
	

	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_CHECKLATCHMATED__TO__CHART_CHARTJUNCTION1136_2:

	 var 	idLatchCapture_LatchCaptureCheck_2, idLatchCapture_LatchCaptureCheck_3:int;
	let

		

-- transition trace :
	--LatchCaptureCheck_CheckLatchMated__To__Junction1136_2, Junction1136__To__LatchCaptureCheck_LatchFailed_1
		(idLatchCapture_LatchCaptureCheck_2) 
	= LatchCaptureCheck_CheckLatchMated_ex(idLatchCapture_LatchCaptureCheck_1, false);
		

		(idLatchCapture_LatchCaptureCheck_3) 
	= LatchCaptureCheck_LatchFailed_en(idLatchCapture_LatchCaptureCheck_2, false);
		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, LatchCaptureComplete) 
	=  (idLatchCapture_LatchCaptureCheck_3, LatchCapture_timer_1, LatchCaptureComplete_1);

	--add unused variables
	(AttemptingToDock, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_latch, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture) 
	= (AttemptingToDock_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idChart_MissionPhaseStates_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_latch_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1);
	

	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_CHECKLATCHMATED__TO__CHART_CHARTJUNCTION1136_3:

	 var 	idLatchCapture_LatchCaptureCheck_2, idLatchCapture_LatchCaptureCheck_3:int;
	let

		

-- transition trace :
	--LatchCaptureCheck_CheckLatchMated__To__Junction1136_3, Junction1136__To__LatchCaptureCheck_LatchFailed_1
		(idLatchCapture_LatchCaptureCheck_2) 
	= LatchCaptureCheck_CheckLatchMated_ex(idLatchCapture_LatchCaptureCheck_1, false);
		

		(idLatchCapture_LatchCaptureCheck_3) 
	= LatchCaptureCheck_LatchFailed_en(idLatchCapture_LatchCaptureCheck_2, false);
		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, LatchCaptureComplete) 
	=  (idLatchCapture_LatchCaptureCheck_3, LatchCapture_timer_1, LatchCaptureComplete_1);

	--add unused variables
	(AttemptingToDock, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_latch, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture) 
	= (AttemptingToDock_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idChart_MissionPhaseStates_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_latch_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1);
	

	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_LATCHFAILED__TO__DOCKINGAPPROACH_CHECKTARGETRELATIVESTATE_1:

	 var 	idLatchCapture_LatchCaptureCheck_2:int;
	AttemptingToDock_2:bool;
	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	idLatchCapture_latch_2:int;
	idMissionPhaseStates_LatchCapture_2:int;
	idDockingApproach_DockingApproach_2, idDockingApproach_DockingApproach_3:int;
	idMissionPhaseStates_DockingApproach_2, idMissionPhaseStates_DockingApproach_3:int;
	DockingApproach_2:bool;
	DockingApproachComplete_2:bool;
	DockingApproach_timer_2:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_targetState_2:int;
	idDockingApproach_dockingSensor_2:int;
	let

		-- transition trace :
	--LatchCaptureCheck_LatchFailed__To__DockingApproach_CheckTargetRelativeState_1
		(idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, AttemptingToDock_2, idLatchCapture_LatchCaptureCheck_2, idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_LatchCapture_ex(idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idChart_MissionPhaseStates_1, false);
		

		idDockingApproach_DockingApproach_2 
	= 971;
	
		idMissionPhaseStates_DockingApproach_2 
	= 967;
	
		(idMissionPhaseStates_DockingApproach_3, idChart_MissionPhaseStates_3, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_2, idDockingApproach_DockingApproach_3, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idDockingApproach_dockingSensor_2) 
	= MissionPhaseStates_DockingApproach_en(idMissionPhaseStates_DockingApproach_2, idChart_MissionPhaseStates_2, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, idDockingApproach_DockingApproach_2, GOOD, NONE, POOR, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_dockingSensor_1, false);
		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, LatchCaptureComplete, AttemptingToDock, idChart_MissionPhaseStates, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, idDockingApproach_DockingApproach, idMissionPhaseStates_DockingApproach, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_dockingSensor) 
	=  (idLatchCapture_LatchCaptureCheck_2, LatchCapture_timer_1, LatchCaptureComplete_1, AttemptingToDock_2, idChart_MissionPhaseStates_3, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, idDockingApproach_DockingApproach_3, idMissionPhaseStates_DockingApproach_3, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idDockingApproach_dockingSensor_2);


	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_DOCKED__TO__MISSIONPHASESTATES_JOINTSTABILIZE_1:

	 var 	idLatchCapture_LatchCaptureCheck_2:int;
	AttemptingToDock_2:bool;
	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	idLatchCapture_latch_2:int;
	idMissionPhaseStates_LatchCapture_2:int;
	let

		-- transition trace :
	--LatchCaptureCheck_Docked__To__MissionPhaseStates_JointStabilize_1
		(idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, AttemptingToDock_2, idLatchCapture_LatchCaptureCheck_2, idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_LatchCapture_ex(idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_JointStabilize_en(idChart_MissionPhaseStates_2, false);
		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, LatchCaptureComplete, AttemptingToDock, idChart_MissionPhaseStates, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, idDockingApproach_DockingApproach, idMissionPhaseStates_DockingApproach, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_dockingSensor) 
	=  (idLatchCapture_LatchCaptureCheck_2, LatchCapture_timer_1, LatchCaptureComplete_1, AttemptingToDock_2, idChart_MissionPhaseStates_3, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, idDockingApproach_DockingApproach_1, idMissionPhaseStates_DockingApproach_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_dockingSensor_1);


	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_CHECKLATCHOPEN_IDL:

	 	let

		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, LatchCaptureComplete, AttemptingToDock, idChart_MissionPhaseStates, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, idDockingApproach_DockingApproach, idMissionPhaseStates_DockingApproach, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_dockingSensor) 
	= (idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_1, LatchCaptureComplete_1, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, idDockingApproach_DockingApproach_1, idMissionPhaseStates_DockingApproach_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_dockingSensor_1);
	

	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_CHECKLATCHMATED_IDL:

	 	let

		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, LatchCaptureComplete, AttemptingToDock, idChart_MissionPhaseStates, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, idDockingApproach_DockingApproach, idMissionPhaseStates_DockingApproach, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_dockingSensor) 
	= (idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_1, LatchCaptureComplete_1, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, idDockingApproach_DockingApproach_1, idMissionPhaseStates_DockingApproach_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_dockingSensor_1);
	

	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_LATCHFAILED_IDL:

	 	let

		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, LatchCaptureComplete, AttemptingToDock, idChart_MissionPhaseStates, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, idDockingApproach_DockingApproach, idMissionPhaseStates_DockingApproach, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_dockingSensor) 
	= (idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_1, LatchCaptureComplete_1, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, idDockingApproach_DockingApproach_1, idMissionPhaseStates_DockingApproach_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_dockingSensor_1);
	

	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_DOCKED_IDL:

	 	let

		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, LatchCaptureComplete, AttemptingToDock, idChart_MissionPhaseStates, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, idDockingApproach_DockingApproach, idMissionPhaseStates_DockingApproach, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_dockingSensor) 
	= (idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_1, LatchCaptureComplete_1, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, idDockingApproach_DockingApproach_1, idMissionPhaseStates_DockingApproach_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_dockingSensor_1);
	

	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



tel


--***************************************************State :MissionPhaseStates_LatchCapture Automaton***************************************************

node MissionPhaseStates_LatchCapture_node(idMissionPhaseStates_LatchCapture_1:int;
	AttemptingToDock_1:bool;
	LatchCaptureComplete_1:bool;
	LatchCapture_timer_1:int;
	idLatchCapture_LatchCaptureCheck_1:int;
	CLOSEDBUTUNMATED:int;
	INDETERMINATE:int;
	MATED:int;
	OPEN:int;
	idLatchCapture_latch_1:int;
	latch_status_1:int;
	LatchCapture_timer_upper_limit:int;
	DockingApproach_1:bool;
	DockingApproachComplete_1:bool;
	DockingApproach_timer_1:int;
	GOOD:int;
	NONE:int;
	POOR:int;
	dockingSensor_RelativeAttitude_1:int;
	dockingSensor_RelativePosition_1:int;
	dockingSensor_RelativeVelocity_1:int;
	dockingSensor_targetState_1:int;
	idChart_MissionPhaseStates_1:int;
	idDockingApproach_DockingApproach_1:int;
	idDockingApproach_dockingSensor_1:int;
	idMissionPhaseStates_DockingApproach_1:int)

returns (idMissionPhaseStates_LatchCapture:int;
	AttemptingToDock:bool;
	LatchCaptureComplete:bool;
	LatchCapture_timer:int;
	idLatchCapture_LatchCaptureCheck:int;
	idLatchCapture_latch:int;
	latch_status:int;
	DockingApproach:bool;
	DockingApproachComplete:bool;
	DockingApproach_timer:int;
	dockingSensor_RelativeAttitude:int;
	dockingSensor_RelativePosition:int;
	dockingSensor_RelativeVelocity:int;
	dockingSensor_targetState:int;
	idChart_MissionPhaseStates:int;
	idDockingApproach_DockingApproach:int;
	idDockingApproach_dockingSensor:int;
	idMissionPhaseStates_DockingApproach:int);


let

	 automaton missionphasestates_latchcapture

	state POINTMissionPhaseStates_LatchCapture:
	unless (idMissionPhaseStates_LatchCapture_1=0) restart MISSIONPHASESTATES_LATCHCAPTURE_PARALLEL_ENTRY
	unless true  restart MISSIONPHASESTATES_LATCHCAPTURE_PARALLEL_IDL

	let

		(idMissionPhaseStates_LatchCapture, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, latch_status, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach) 
	= (idMissionPhaseStates_LatchCapture_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, latch_status_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idChart_MissionPhaseStates_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1);
	

	tel



	state MISSIONPHASESTATES_LATCHCAPTURE_PARALLEL_ENTRY:

	 var 	idMissionPhaseStates_LatchCapture_2, idMissionPhaseStates_LatchCapture_3:int;
	AttemptingToDock_2:bool;
	LatchCaptureComplete_2:bool;
	LatchCapture_timer_2:int;
	idLatchCapture_LatchCaptureCheck_2:int;
	idLatchCapture_latch_2:int;
	latch_status_2:int;
	let

		
	(idLatchCapture_LatchCaptureCheck_2, idMissionPhaseStates_LatchCapture_2, AttemptingToDock_2, LatchCapture_timer_2, LatchCaptureComplete_2) 
	= LatchCapture_LatchCaptureCheck_en(idLatchCapture_LatchCaptureCheck_1, idMissionPhaseStates_LatchCapture_1, AttemptingToDock_1, LatchCapture_timer_1, LatchCaptureComplete_1, false);

	(idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_3, latch_status_2) 
	= LatchCapture_latch_en(idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_2, INDETERMINATE, latch_status_1, OPEN, MATED, CLOSEDBUTUNMATED, false);


	(idMissionPhaseStates_LatchCapture, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, latch_status) 
	= (idMissionPhaseStates_LatchCapture_3, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, latch_status_2);
	
	--add unused variables
	(DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach) 
	= (DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idChart_MissionPhaseStates_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1);
	

	tel

	until true restart POINTMissionPhaseStates_LatchCapture



	state MISSIONPHASESTATES_LATCHCAPTURE_PARALLEL_IDL:

	 var 	idMissionPhaseStates_LatchCapture_2:int;
	AttemptingToDock_2:bool;
	LatchCaptureComplete_2:bool;
	LatchCapture_timer_2, LatchCapture_timer_3:int;
	idLatchCapture_LatchCaptureCheck_2:int;
	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	latch_status_2:int;
	DockingApproach_2:bool;
	DockingApproachComplete_2:bool;
	DockingApproach_timer_2:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_targetState_2:int;
	idChart_MissionPhaseStates_2:int;
	idDockingApproach_DockingApproach_2:int;
	idDockingApproach_dockingSensor_2:int;
	idMissionPhaseStates_DockingApproach_2:int;
	let

		
	(LatchCapture_timer_2) 
	= if not (idLatchCapture_LatchCaptureCheck_1= 0 ) then LatchCapture_LatchCaptureCheck_du(LatchCapture_timer_1, LatchCapture_timer_upper_limit)

		 else (LatchCapture_timer_1);

		


		(idLatchCapture_LatchCaptureCheck_2, LatchCapture_timer_3, LatchCaptureComplete_2, AttemptingToDock_2, idChart_MissionPhaseStates_2, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, idDockingApproach_DockingApproach_2, idMissionPhaseStates_DockingApproach_2, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idDockingApproach_dockingSensor_2)
	= if not (idLatchCapture_LatchCaptureCheck_1= 0 ) then LatchCapture_LatchCaptureCheck_node(idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_2, latch_status_1, OPEN, LatchCapture_timer_upper_limit, MATED, LatchCaptureComplete_1, CLOSEDBUTUNMATED, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, idDockingApproach_DockingApproach_1, idMissionPhaseStates_DockingApproach_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, GOOD, NONE, POOR, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_dockingSensor_1)

		 else (idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_2, LatchCaptureComplete_1, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, idDockingApproach_DockingApproach_1, idMissionPhaseStates_DockingApproach_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_dockingSensor_1);

		

		

		(idLatchCapture_latch_3, latch_status_2)
	= if not (idLatchCapture_latch_2= 0 ) then LatchCapture_latch_node(idLatchCapture_latch_2, INDETERMINATE, latch_status_1, OPEN, MATED, CLOSEDBUTUNMATED)

		 else (idLatchCapture_latch_2, latch_status_1);

		

		

	(idMissionPhaseStates_LatchCapture, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, latch_status, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach) 
	= (idMissionPhaseStates_LatchCapture_2, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_3, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_3, latch_status_2, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idChart_MissionPhaseStates_2, idDockingApproach_DockingApproach_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2);
	

	tel

	until true restart POINTMissionPhaseStates_LatchCapture



tel


--***************************************************State :OrbitalState_Active_InertialNavigation Automaton***************************************************

node OrbitalState_Active_InertialNavigation_node(idOrbitalState_Active_InertialNavigation_1:int;
	InertialNavigation_AbsoluteAttitude_1:int;
	InertialNavigation_AbsolutePosition_1:int;
	InertialNavigation_AbsoluteVelocity_1:int;
	NONE:int;
	callibrate:bool;
	GOOD:int;
	InertialNavigation_timer_1:int;
	InertialNavigation_timer_upper_limit:int;
	POOR:int;
	InertialNavigation_time:bool;
	VALID_1:bool)

returns (idOrbitalState_Active_InertialNavigation:int;
	InertialNavigation_AbsoluteAttitude:int;
	InertialNavigation_AbsolutePosition:int;
	InertialNavigation_AbsoluteVelocity:int;
	InertialNavigation_timer:int);


let

	 automaton orbitalstate_active_inertialnavigation

	state POINTOrbitalState_Active_InertialNavigation:
	unless (idOrbitalState_Active_InertialNavigation_1=0) restart POINT__TO__INERTIALNAVIGATION_ACQUIRING_1



	unless (idOrbitalState_Active_InertialNavigation_1=1003) and callibrate restart INERTIALNAVIGATION_ACQUIRING__TO__INERTIALNAVIGATION_GOOD_1



	unless (idOrbitalState_Active_InertialNavigation_1=1004) and (  InertialNavigation_timer_1 =InertialNavigation_timer_upper_limit ) restart INERTIALNAVIGATION_GOOD__TO__INERTIALNAVIGATION_POOR_1



	unless (idOrbitalState_Active_InertialNavigation_1=1004) and (  InertialNavigation_timer_1 <InertialNavigation_timer_upper_limit ) restart INERTIALNAVIGATION_GOOD__TO__INERTIALNAVIGATION_GOOD_2



	unless (idOrbitalState_Active_InertialNavigation_1=1004) restart INERTIALNAVIGATION_GOOD__TO__CHART_CHARTJUNCTION1125_3



	unless (idOrbitalState_Active_InertialNavigation_1=963) and callibrate restart INERTIALNAVIGATION_POOR__TO__INERTIALNAVIGATION_GOOD_1



	unless (idOrbitalState_Active_InertialNavigation_1=963) restart INERTIALNAVIGATION_POOR__TO__CHART_CHARTJUNCTION1125_2



	unless (idOrbitalState_Active_InertialNavigation_1=1003) restart INERTIALNAVIGATION_ACQUIRING_IDL

	unless (idOrbitalState_Active_InertialNavigation_1=1004) restart INERTIALNAVIGATION_GOOD_IDL

	unless (idOrbitalState_Active_InertialNavigation_1=963) restart INERTIALNAVIGATION_POOR_IDL

	let

		(idOrbitalState_Active_InertialNavigation, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer) 
	= (idOrbitalState_Active_InertialNavigation_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1);
	

	tel



	state POINT__TO__INERTIALNAVIGATION_ACQUIRING_1:

	 var 	idOrbitalState_Active_InertialNavigation_2:int;
	InertialNavigation_AbsoluteAttitude_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	let

		-- transition trace :
	--POINT__To__InertialNavigation_ACQUIRING_1
		(idOrbitalState_Active_InertialNavigation_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_AbsoluteAttitude_2) 
	= InertialNavigation_ACQUIRING_en(idOrbitalState_Active_InertialNavigation_1, NONE, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_AbsoluteAttitude_1, false);
		

	(idOrbitalState_Active_InertialNavigation, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity) 
	=  (idOrbitalState_Active_InertialNavigation_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2);

	--add unused variables
	(InertialNavigation_timer) 
	= (InertialNavigation_timer_1);
	

	tel

	until true restart POINTOrbitalState_Active_InertialNavigation



	state INERTIALNAVIGATION_ACQUIRING__TO__INERTIALNAVIGATION_GOOD_1:

	 var 	idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_InertialNavigation_3:int;
	InertialNavigation_AbsoluteAttitude_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	InertialNavigation_timer_2:int;
	let

		-- transition trace :
	--InertialNavigation_ACQUIRING__To__InertialNavigation_GOOD_1
		(idOrbitalState_Active_InertialNavigation_2) 
	= InertialNavigation_ACQUIRING_ex(idOrbitalState_Active_InertialNavigation_1, false);
		

		(idOrbitalState_Active_InertialNavigation_3, InertialNavigation_timer_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_AbsoluteAttitude_2) 
	= InertialNavigation_GOOD_en(idOrbitalState_Active_InertialNavigation_2, InertialNavigation_timer_1, GOOD, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_AbsoluteAttitude_1, false);
		

	(idOrbitalState_Active_InertialNavigation, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer) 
	=  (idOrbitalState_Active_InertialNavigation_3, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2);


	tel

	until true restart POINTOrbitalState_Active_InertialNavigation



	state INERTIALNAVIGATION_GOOD__TO__INERTIALNAVIGATION_POOR_1:

	 var 	idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_InertialNavigation_3:int;
	InertialNavigation_AbsoluteAttitude_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	let

		-- transition trace :
	--InertialNavigation_GOOD__To__InertialNavigation_POOR_1
		(idOrbitalState_Active_InertialNavigation_2) 
	= InertialNavigation_GOOD_ex(idOrbitalState_Active_InertialNavigation_1, false);
		

		(idOrbitalState_Active_InertialNavigation_3, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_AbsoluteAttitude_2) 
	= InertialNavigation_POOR_en(idOrbitalState_Active_InertialNavigation_2, POOR, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_AbsoluteAttitude_1, false);
		

	(idOrbitalState_Active_InertialNavigation, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer) 
	=  (idOrbitalState_Active_InertialNavigation_3, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_1);


	tel

	until true restart POINTOrbitalState_Active_InertialNavigation



	state INERTIALNAVIGATION_GOOD__TO__INERTIALNAVIGATION_GOOD_2:

	 var 	idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_InertialNavigation_3:int;
	InertialNavigation_AbsoluteAttitude_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	InertialNavigation_timer_2:int;
	let

		-- transition trace :
	--InertialNavigation_GOOD__To__InertialNavigation_GOOD_2
		(idOrbitalState_Active_InertialNavigation_2) 
	= InertialNavigation_GOOD_ex(idOrbitalState_Active_InertialNavigation_1, false);
		

		(idOrbitalState_Active_InertialNavigation_3, InertialNavigation_timer_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_AbsoluteAttitude_2) 
	= InertialNavigation_GOOD_en(idOrbitalState_Active_InertialNavigation_2, InertialNavigation_timer_1, GOOD, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_AbsoluteAttitude_1, false);
		

	(idOrbitalState_Active_InertialNavigation, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer) 
	=  (idOrbitalState_Active_InertialNavigation_3, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2);


	tel

	until true restart POINTOrbitalState_Active_InertialNavigation



	state INERTIALNAVIGATION_GOOD__TO__CHART_CHARTJUNCTION1125_3:

	 var 	idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_InertialNavigation_3:int;
	InertialNavigation_AbsoluteAttitude_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	let

		

-- transition trace :
	--InertialNavigation_GOOD__To__Junction1125_3, Junction1125__To__InertialNavigation_ACQUIRING_1
		(idOrbitalState_Active_InertialNavigation_2) 
	= 
		 if (( InertialNavigation_time!= VALID_1  )) then 
		InertialNavigation_GOOD_ex(idOrbitalState_Active_InertialNavigation_1, false)
		 else (idOrbitalState_Active_InertialNavigation_1);
		

		(idOrbitalState_Active_InertialNavigation_3, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_AbsoluteAttitude_2) 
	= 
		 if (( InertialNavigation_time!= VALID_1  )) then 
		InertialNavigation_ACQUIRING_en(idOrbitalState_Active_InertialNavigation_2, NONE, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_AbsoluteAttitude_1, false)
		 else (idOrbitalState_Active_InertialNavigation_2, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_AbsoluteAttitude_1);
		

	(idOrbitalState_Active_InertialNavigation, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer) 
	= 
		 if (( InertialNavigation_time!= VALID_1  )) then 
		(idOrbitalState_Active_InertialNavigation_3, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_1)
		 else (idOrbitalState_Active_InertialNavigation_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1);


	tel

	until true restart POINTOrbitalState_Active_InertialNavigation



	state INERTIALNAVIGATION_POOR__TO__INERTIALNAVIGATION_GOOD_1:

	 var 	idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_InertialNavigation_3:int;
	InertialNavigation_AbsoluteAttitude_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	InertialNavigation_timer_2:int;
	let

		-- transition trace :
	--InertialNavigation_POOR__To__InertialNavigation_GOOD_1
		(idOrbitalState_Active_InertialNavigation_2) 
	= InertialNavigation_POOR_ex(idOrbitalState_Active_InertialNavigation_1, false);
		

		(idOrbitalState_Active_InertialNavigation_3, InertialNavigation_timer_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_AbsoluteAttitude_2) 
	= InertialNavigation_GOOD_en(idOrbitalState_Active_InertialNavigation_2, InertialNavigation_timer_1, GOOD, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_AbsoluteAttitude_1, false);
		

	(idOrbitalState_Active_InertialNavigation, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer) 
	=  (idOrbitalState_Active_InertialNavigation_3, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2);


	tel

	until true restart POINTOrbitalState_Active_InertialNavigation



	state INERTIALNAVIGATION_POOR__TO__CHART_CHARTJUNCTION1125_2:

	 var 	idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_InertialNavigation_3:int;
	InertialNavigation_AbsoluteAttitude_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	let

		

-- transition trace :
	--InertialNavigation_POOR__To__Junction1125_2, Junction1125__To__InertialNavigation_ACQUIRING_1
		(idOrbitalState_Active_InertialNavigation_2) 
	= 
		 if (( InertialNavigation_time!= VALID_1  )) then 
		InertialNavigation_POOR_ex(idOrbitalState_Active_InertialNavigation_1, false)
		 else (idOrbitalState_Active_InertialNavigation_1);
		

		(idOrbitalState_Active_InertialNavigation_3, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_AbsoluteAttitude_2) 
	= 
		 if (( InertialNavigation_time!= VALID_1  )) then 
		InertialNavigation_ACQUIRING_en(idOrbitalState_Active_InertialNavigation_2, NONE, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_AbsoluteAttitude_1, false)
		 else (idOrbitalState_Active_InertialNavigation_2, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_AbsoluteAttitude_1);
		

	(idOrbitalState_Active_InertialNavigation, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer) 
	= 
		 if (( InertialNavigation_time!= VALID_1  )) then 
		(idOrbitalState_Active_InertialNavigation_3, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_1)
		 else (idOrbitalState_Active_InertialNavigation_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1);


	tel

	until true restart POINTOrbitalState_Active_InertialNavigation



	state INERTIALNAVIGATION_ACQUIRING_IDL:

	 	let

		

	(idOrbitalState_Active_InertialNavigation, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer) 
	= (idOrbitalState_Active_InertialNavigation_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1);
	

	tel

	until true restart POINTOrbitalState_Active_InertialNavigation



	state INERTIALNAVIGATION_GOOD_IDL:

	 	let

		

	(idOrbitalState_Active_InertialNavigation, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer) 
	= (idOrbitalState_Active_InertialNavigation_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1);
	

	tel

	until true restart POINTOrbitalState_Active_InertialNavigation



	state INERTIALNAVIGATION_POOR_IDL:

	 	let

		

	(idOrbitalState_Active_InertialNavigation, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer) 
	= (idOrbitalState_Active_InertialNavigation_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1);
	

	tel

	until true restart POINTOrbitalState_Active_InertialNavigation



tel


--***************************************************State :OrbitalState_Active_GPS Automaton***************************************************

node OrbitalState_Active_GPS_node(idOrbitalState_Active_GPS_1:int;
	GPS_AbsolutePosition_1:int;
	GPS_AbsoluteTime_1:int;
	GPS_AbsoluteVelocity_1:int;
	NONE:int;
	GPS_satelliteVisibility_status:int;
	GPS_receiverAvailability_status:bool;
	AVAILABLE:bool;
	GPS_timer_1:int;
	POOR:int;
	GPS_timer_upper_limit:int;
	GOOD:int;
	sunlight_status:bool;
	BRIGHT:bool)

returns (idOrbitalState_Active_GPS:int;
	GPS_AbsolutePosition:int;
	GPS_AbsoluteTime:int;
	GPS_AbsoluteVelocity:int;
	GPS_timer:int);


let

	 automaton orbitalstate_active_gps

	state POINTOrbitalState_Active_GPS:
	unless (idOrbitalState_Active_GPS_1=0) restart POINT__TO__GPS_ACQUIRING_1



	unless (idOrbitalState_Active_GPS_1=995) and ( GPS_satelliteVisibility_status!=NONE and GPS_receiverAvailability_status=AVAILABLE ) restart GPS_ACQUIRING__TO__GPS_POOR_1



	unless (idOrbitalState_Active_GPS_1=995) and ( GPS_satelliteVisibility_status=NONE or GPS_receiverAvailability_status!=AVAILABLE ) restart GPS_ACQUIRING__TO__GPS_ACQUIRING_2



	unless (idOrbitalState_Active_GPS_1=996) and ( ( GPS_timer_1 =GPS_timer_upper_limit) and (GPS_satelliteVisibility_status=NONE or GPS_receiverAvailability_status!=AVAILABLE) ) restart GPS_POOR__TO__GPS_ACQUIRING_1



	unless (idOrbitalState_Active_GPS_1=996) and ( ( GPS_timer_1 =GPS_timer_upper_limit) and GPS_satelliteVisibility_status=GOOD and GPS_receiverAvailability_status=AVAILABLE and sunlight_status!=BRIGHT ) restart GPS_POOR__TO__GPS_GOOD_2



	unless (idOrbitalState_Active_GPS_1=996) and ( ( GPS_timer_1 <GPS_timer_upper_limit) and (GPS_satelliteVisibility_status=NONE or GPS_receiverAvailability_status!=AVAILABLE) or (GPS_receiverAvailability_status=AVAILABLE and (GPS_satelliteVisibility_status=POOR or sunlight_status=BRIGHT)) ) restart GPS_POOR__TO__GPS_POOR_3



	unless (idOrbitalState_Active_GPS_1=997) and ( not (GPS_satelliteVisibility_status=GOOD and GPS_receiverAvailability_status=AVAILABLE) or sunlight_status=BRIGHT ) restart GPS_GOOD__TO__GPS_POOR_1



	unless (idOrbitalState_Active_GPS_1=997) and ( GPS_satelliteVisibility_status=GOOD and GPS_receiverAvailability_status=AVAILABLE and sunlight_status!=BRIGHT ) restart GPS_GOOD__TO__GPS_GOOD_2



	unless (idOrbitalState_Active_GPS_1=995) restart GPS_ACQUIRING_IDL

	unless (idOrbitalState_Active_GPS_1=996) restart GPS_POOR_IDL

	unless (idOrbitalState_Active_GPS_1=997) restart GPS_GOOD_IDL

	let

		(idOrbitalState_Active_GPS, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer) 
	= (idOrbitalState_Active_GPS_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1);
	

	tel



	state POINT__TO__GPS_ACQUIRING_1:

	 var 	idOrbitalState_Active_GPS_2:int;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteTime_2:int;
	GPS_AbsoluteVelocity_2:int;
	let

		-- transition trace :
	--POINT__To__GPS_ACQUIRING_1
		(idOrbitalState_Active_GPS_2, GPS_AbsolutePosition_2, GPS_AbsoluteVelocity_2, GPS_AbsoluteTime_2) 
	= GPS_ACQUIRING_en(idOrbitalState_Active_GPS_1, NONE, GPS_AbsolutePosition_1, GPS_AbsoluteVelocity_1, GPS_AbsoluteTime_1, false);
		

	(idOrbitalState_Active_GPS, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity) 
	=  (idOrbitalState_Active_GPS_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2);

	--add unused variables
	(GPS_timer) 
	= (GPS_timer_1);
	

	tel

	until true restart POINTOrbitalState_Active_GPS



	state GPS_ACQUIRING__TO__GPS_POOR_1:

	 var 	idOrbitalState_Active_GPS_2, idOrbitalState_Active_GPS_3:int;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteTime_2:int;
	GPS_AbsoluteVelocity_2:int;
	GPS_timer_2:int;
	let

		-- transition trace :
	--GPS_ACQUIRING__To__GPS_POOR_1
		(idOrbitalState_Active_GPS_2) 
	= GPS_ACQUIRING_ex(idOrbitalState_Active_GPS_1, false);
		

		(idOrbitalState_Active_GPS_3, GPS_timer_2, GPS_AbsolutePosition_2, GPS_AbsoluteVelocity_2, GPS_AbsoluteTime_2) 
	= GPS_POOR_en(idOrbitalState_Active_GPS_2, GPS_timer_1, POOR, GPS_AbsolutePosition_1, GPS_AbsoluteVelocity_1, GPS_AbsoluteTime_1, false);
		

	(idOrbitalState_Active_GPS, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer) 
	=  (idOrbitalState_Active_GPS_3, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2);


	tel

	until true restart POINTOrbitalState_Active_GPS



	state GPS_ACQUIRING__TO__GPS_ACQUIRING_2:

	 var 	idOrbitalState_Active_GPS_2, idOrbitalState_Active_GPS_3:int;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteTime_2:int;
	GPS_AbsoluteVelocity_2:int;
	let

		-- transition trace :
	--GPS_ACQUIRING__To__GPS_ACQUIRING_2
		(idOrbitalState_Active_GPS_2) 
	= GPS_ACQUIRING_ex(idOrbitalState_Active_GPS_1, false);
		

		(idOrbitalState_Active_GPS_3, GPS_AbsolutePosition_2, GPS_AbsoluteVelocity_2, GPS_AbsoluteTime_2) 
	= GPS_ACQUIRING_en(idOrbitalState_Active_GPS_2, NONE, GPS_AbsolutePosition_1, GPS_AbsoluteVelocity_1, GPS_AbsoluteTime_1, false);
		

	(idOrbitalState_Active_GPS, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer) 
	=  (idOrbitalState_Active_GPS_3, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_1);


	tel

	until true restart POINTOrbitalState_Active_GPS



	state GPS_POOR__TO__GPS_ACQUIRING_1:

	 var 	idOrbitalState_Active_GPS_2, idOrbitalState_Active_GPS_3:int;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteTime_2:int;
	GPS_AbsoluteVelocity_2:int;
	let

		-- transition trace :
	--GPS_POOR__To__GPS_ACQUIRING_1
		(idOrbitalState_Active_GPS_2) 
	= GPS_POOR_ex(idOrbitalState_Active_GPS_1, false);
		

		(idOrbitalState_Active_GPS_3, GPS_AbsolutePosition_2, GPS_AbsoluteVelocity_2, GPS_AbsoluteTime_2) 
	= GPS_ACQUIRING_en(idOrbitalState_Active_GPS_2, NONE, GPS_AbsolutePosition_1, GPS_AbsoluteVelocity_1, GPS_AbsoluteTime_1, false);
		

	(idOrbitalState_Active_GPS, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer) 
	=  (idOrbitalState_Active_GPS_3, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_1);


	tel

	until true restart POINTOrbitalState_Active_GPS



	state GPS_POOR__TO__GPS_GOOD_2:

	 var 	idOrbitalState_Active_GPS_2, idOrbitalState_Active_GPS_3:int;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteTime_2:int;
	GPS_AbsoluteVelocity_2:int;
	let

		-- transition trace :
	--GPS_POOR__To__GPS_GOOD_2
		(idOrbitalState_Active_GPS_2) 
	= GPS_POOR_ex(idOrbitalState_Active_GPS_1, false);
		

		(idOrbitalState_Active_GPS_3, GPS_AbsolutePosition_2, GPS_AbsoluteVelocity_2, GPS_AbsoluteTime_2) 
	= GPS_GOOD_en(idOrbitalState_Active_GPS_2, GOOD, GPS_AbsolutePosition_1, GPS_AbsoluteVelocity_1, GPS_AbsoluteTime_1, false);
		

	(idOrbitalState_Active_GPS, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer) 
	=  (idOrbitalState_Active_GPS_3, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_1);


	tel

	until true restart POINTOrbitalState_Active_GPS



	state GPS_POOR__TO__GPS_POOR_3:

	 var 	idOrbitalState_Active_GPS_2, idOrbitalState_Active_GPS_3:int;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteTime_2:int;
	GPS_AbsoluteVelocity_2:int;
	GPS_timer_2:int;
	let

		-- transition trace :
	--GPS_POOR__To__GPS_POOR_3
		(idOrbitalState_Active_GPS_2) 
	= GPS_POOR_ex(idOrbitalState_Active_GPS_1, false);
		

		(idOrbitalState_Active_GPS_3, GPS_timer_2, GPS_AbsolutePosition_2, GPS_AbsoluteVelocity_2, GPS_AbsoluteTime_2) 
	= GPS_POOR_en(idOrbitalState_Active_GPS_2, GPS_timer_1, POOR, GPS_AbsolutePosition_1, GPS_AbsoluteVelocity_1, GPS_AbsoluteTime_1, false);
		

	(idOrbitalState_Active_GPS, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer) 
	=  (idOrbitalState_Active_GPS_3, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2);


	tel

	until true restart POINTOrbitalState_Active_GPS



	state GPS_GOOD__TO__GPS_POOR_1:

	 var 	idOrbitalState_Active_GPS_2, idOrbitalState_Active_GPS_3:int;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteTime_2:int;
	GPS_AbsoluteVelocity_2:int;
	GPS_timer_2:int;
	let

		-- transition trace :
	--GPS_GOOD__To__GPS_POOR_1
		(idOrbitalState_Active_GPS_2) 
	= GPS_GOOD_ex(idOrbitalState_Active_GPS_1, false);
		

		(idOrbitalState_Active_GPS_3, GPS_timer_2, GPS_AbsolutePosition_2, GPS_AbsoluteVelocity_2, GPS_AbsoluteTime_2) 
	= GPS_POOR_en(idOrbitalState_Active_GPS_2, GPS_timer_1, POOR, GPS_AbsolutePosition_1, GPS_AbsoluteVelocity_1, GPS_AbsoluteTime_1, false);
		

	(idOrbitalState_Active_GPS, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer) 
	=  (idOrbitalState_Active_GPS_3, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2);


	tel

	until true restart POINTOrbitalState_Active_GPS



	state GPS_GOOD__TO__GPS_GOOD_2:

	 var 	idOrbitalState_Active_GPS_2, idOrbitalState_Active_GPS_3:int;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteTime_2:int;
	GPS_AbsoluteVelocity_2:int;
	let

		-- transition trace :
	--GPS_GOOD__To__GPS_GOOD_2
		(idOrbitalState_Active_GPS_2) 
	= GPS_GOOD_ex(idOrbitalState_Active_GPS_1, false);
		

		(idOrbitalState_Active_GPS_3, GPS_AbsolutePosition_2, GPS_AbsoluteVelocity_2, GPS_AbsoluteTime_2) 
	= GPS_GOOD_en(idOrbitalState_Active_GPS_2, GOOD, GPS_AbsolutePosition_1, GPS_AbsoluteVelocity_1, GPS_AbsoluteTime_1, false);
		

	(idOrbitalState_Active_GPS, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer) 
	=  (idOrbitalState_Active_GPS_3, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_1);


	tel

	until true restart POINTOrbitalState_Active_GPS



	state GPS_ACQUIRING_IDL:

	 	let

		

	(idOrbitalState_Active_GPS, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer) 
	= (idOrbitalState_Active_GPS_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1);
	

	tel

	until true restart POINTOrbitalState_Active_GPS



	state GPS_POOR_IDL:

	 	let

		

	(idOrbitalState_Active_GPS, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer) 
	= (idOrbitalState_Active_GPS_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1);
	

	tel

	until true restart POINTOrbitalState_Active_GPS



	state GPS_GOOD_IDL:

	 	let

		

	(idOrbitalState_Active_GPS, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer) 
	= (idOrbitalState_Active_GPS_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1);
	

	tel

	until true restart POINTOrbitalState_Active_GPS



tel


--***************************************************State :OrbitalState_Complex_OrbitalState2 Automaton***************************************************

node OrbitalState_Complex_OrbitalState2_node(idOrbitalState_Complex_OrbitalState2_1:int;
	OrbitalState_Time_1:int;
	POOR:int;
	GroundTrack_Time:int;
	GOOD:int;
	GPS_AbsoluteTime_1:int;
	StarPlanetTracker_AbsoluteTime_1:int;
	RealTimeClock_time:int)

returns (idOrbitalState_Complex_OrbitalState2:int;
	OrbitalState_Time:int);


let

	 automaton orbitalstate_complex_orbitalstate2

	state POINTOrbitalState_Complex_OrbitalState2:
	unless (idOrbitalState_Complex_OrbitalState2_1=0) restart POINT__TO__ORBITALSTATE2_POOR_1



	unless (idOrbitalState_Complex_OrbitalState2_1=992) and ( GroundTrack_Time=GOOD or  GPS_AbsoluteTime_1 =GOOD or  StarPlanetTracker_AbsoluteTime_1 =GOOD ) restart ORBITALSTATE2_POOR__TO__ORBITALSTATE2_GOOD_1



	unless (idOrbitalState_Complex_OrbitalState2_1=993) and ( RealTimeClock_time!=GOOD ) restart ORBITALSTATE2_GOOD__TO__ORBITALSTATE2_POOR_1



	unless (idOrbitalState_Complex_OrbitalState2_1=993) and ( GroundTrack_Time=GOOD or  GPS_AbsoluteTime_1 =GOOD or  StarPlanetTracker_AbsoluteTime_1 =GOOD ) restart ORBITALSTATE2_GOOD__TO__ORBITALSTATE2_GOOD_2



	unless (idOrbitalState_Complex_OrbitalState2_1=992) restart ORBITALSTATE2_POOR_IDL

	unless (idOrbitalState_Complex_OrbitalState2_1=993) restart ORBITALSTATE2_GOOD_IDL

	let

		(idOrbitalState_Complex_OrbitalState2, OrbitalState_Time) 
	= (idOrbitalState_Complex_OrbitalState2_1, OrbitalState_Time_1);
	

	tel



	state POINT__TO__ORBITALSTATE2_POOR_1:

	 var 	idOrbitalState_Complex_OrbitalState2_2:int;
	OrbitalState_Time_2:int;
	let

		-- transition trace :
	--POINT__To__OrbitalState2_POOR_1
		(idOrbitalState_Complex_OrbitalState2_2, OrbitalState_Time_2) 
	= OrbitalState2_POOR_en(idOrbitalState_Complex_OrbitalState2_1, POOR, OrbitalState_Time_1, false);
		

	(idOrbitalState_Complex_OrbitalState2, OrbitalState_Time) 
	=  (idOrbitalState_Complex_OrbitalState2_2, OrbitalState_Time_2);


	tel

	until true restart POINTOrbitalState_Complex_OrbitalState2



	state ORBITALSTATE2_POOR__TO__ORBITALSTATE2_GOOD_1:

	 var 	idOrbitalState_Complex_OrbitalState2_2, idOrbitalState_Complex_OrbitalState2_3:int;
	OrbitalState_Time_2:int;
	let

		-- transition trace :
	--OrbitalState2_POOR__To__OrbitalState2_GOOD_1
		(idOrbitalState_Complex_OrbitalState2_2) 
	= OrbitalState2_POOR_ex(idOrbitalState_Complex_OrbitalState2_1, false);
		

		(idOrbitalState_Complex_OrbitalState2_3, OrbitalState_Time_2) 
	= OrbitalState2_GOOD_en(idOrbitalState_Complex_OrbitalState2_2, GOOD, OrbitalState_Time_1, false);
		

	(idOrbitalState_Complex_OrbitalState2, OrbitalState_Time) 
	=  (idOrbitalState_Complex_OrbitalState2_3, OrbitalState_Time_2);


	tel

	until true restart POINTOrbitalState_Complex_OrbitalState2



	state ORBITALSTATE2_GOOD__TO__ORBITALSTATE2_POOR_1:

	 var 	idOrbitalState_Complex_OrbitalState2_2, idOrbitalState_Complex_OrbitalState2_3:int;
	OrbitalState_Time_2:int;
	let

		-- transition trace :
	--OrbitalState2_GOOD__To__OrbitalState2_POOR_1
		(idOrbitalState_Complex_OrbitalState2_2) 
	= OrbitalState2_GOOD_ex(idOrbitalState_Complex_OrbitalState2_1, false);
		

		(idOrbitalState_Complex_OrbitalState2_3, OrbitalState_Time_2) 
	= OrbitalState2_POOR_en(idOrbitalState_Complex_OrbitalState2_2, POOR, OrbitalState_Time_1, false);
		

	(idOrbitalState_Complex_OrbitalState2, OrbitalState_Time) 
	=  (idOrbitalState_Complex_OrbitalState2_3, OrbitalState_Time_2);


	tel

	until true restart POINTOrbitalState_Complex_OrbitalState2



	state ORBITALSTATE2_GOOD__TO__ORBITALSTATE2_GOOD_2:

	 var 	idOrbitalState_Complex_OrbitalState2_2, idOrbitalState_Complex_OrbitalState2_3:int;
	OrbitalState_Time_2:int;
	let

		-- transition trace :
	--OrbitalState2_GOOD__To__OrbitalState2_GOOD_2
		(idOrbitalState_Complex_OrbitalState2_2) 
	= OrbitalState2_GOOD_ex(idOrbitalState_Complex_OrbitalState2_1, false);
		

		(idOrbitalState_Complex_OrbitalState2_3, OrbitalState_Time_2) 
	= OrbitalState2_GOOD_en(idOrbitalState_Complex_OrbitalState2_2, GOOD, OrbitalState_Time_1, false);
		

	(idOrbitalState_Complex_OrbitalState2, OrbitalState_Time) 
	=  (idOrbitalState_Complex_OrbitalState2_3, OrbitalState_Time_2);


	tel

	until true restart POINTOrbitalState_Complex_OrbitalState2



	state ORBITALSTATE2_POOR_IDL:

	 	let

		

	(idOrbitalState_Complex_OrbitalState2, OrbitalState_Time) 
	= (idOrbitalState_Complex_OrbitalState2_1, OrbitalState_Time_1);
	

	tel

	until true restart POINTOrbitalState_Complex_OrbitalState2



	state ORBITALSTATE2_GOOD_IDL:

	 	let

		

	(idOrbitalState_Complex_OrbitalState2, OrbitalState_Time) 
	= (idOrbitalState_Complex_OrbitalState2_1, OrbitalState_Time_1);
	

	tel

	until true restart POINTOrbitalState_Complex_OrbitalState2



tel


--***************************************************State :OrbitalState_Complex_OrbitalState Automaton***************************************************

node OrbitalState_Complex_OrbitalState_node(idOrbitalState_Complex_OrbitalState_1:int;
	NONE:int;
	OrbitalState_Attitude_1:int;
	OrbitalState_Position_1:int;
	OrbitalState_Velocity_1:int;
	GPS_AbsolutePosition_1:int;
	StarPlanetTracker_AbsolutePosition_1:int;
	GroundTrack_OrbitalPosition:int;
	GPS_AbsoluteVelocity_1:int;
	StarPlanetTracker_AbsoluteVelocity_1:int;
	GroundTrack_OrbitalVelocity:int;
	POOR:int;
	GOOD:int;
	InertialNavigation_AbsolutePosition_1:int;
	InertialNavigation_AbsoluteVelocity_1:int;
	InertialNavigation_AbsoluteAttitude_1:int;
	StarPlanetTracker_AbsoluteAttitude_1:int)

returns (idOrbitalState_Complex_OrbitalState:int;
	OrbitalState_Attitude:int;
	OrbitalState_Position:int;
	OrbitalState_Velocity:int);


let

	 automaton orbitalstate_complex_orbitalstate

	state POINTOrbitalState_Complex_OrbitalState:
	unless (idOrbitalState_Complex_OrbitalState_1=0) restart POINT__TO__ORBITALSTATE_ACQUIRING_1



	unless (idOrbitalState_Complex_OrbitalState_1=986) and ( not ( GPS_AbsolutePosition_1 =NONE and  StarPlanetTracker_AbsolutePosition_1 =NONE and GroundTrack_OrbitalPosition=NONE) and not ( GPS_AbsoluteVelocity_1 =NONE and  StarPlanetTracker_AbsoluteVelocity_1 =NONE and GroundTrack_OrbitalVelocity=NONE) ) restart ORBITALSTATE_ACQUIRING__TO__ORBITALSTATE_POOR_1



	unless (idOrbitalState_Complex_OrbitalState_1=986) and (  GPS_AbsolutePosition_1 =NONE and  GPS_AbsoluteVelocity_1 =NONE and  StarPlanetTracker_AbsolutePosition_1 =NONE and  StarPlanetTracker_AbsoluteVelocity_1 =NONE and GroundTrack_OrbitalPosition=NONE and GroundTrack_OrbitalVelocity=NONE ) restart ORBITALSTATE_ACQUIRING__TO__ORBITALSTATE_ACQUIRING_2



	unless (idOrbitalState_Complex_OrbitalState_1=987) and ( (GroundTrack_OrbitalPosition=NONE and  GPS_AbsolutePosition_1 =NONE and  StarPlanetTracker_AbsolutePosition_1 =NONE) and (GroundTrack_OrbitalVelocity=NONE and  GPS_AbsoluteVelocity_1 =NONE and  StarPlanetTracker_AbsoluteVelocity_1 =NONE) ) restart ORBITALSTATE_POOR__TO__ORBITALSTATE_ACQUIRING_1



	unless (idOrbitalState_Complex_OrbitalState_1=987) and ( ((GroundTrack_OrbitalPosition=GOOD and  GPS_AbsolutePosition_1 =GOOD) or (GroundTrack_OrbitalPosition=GOOD and  StarPlanetTracker_AbsolutePosition_1 =GOOD) or ( StarPlanetTracker_AbsolutePosition_1 =GOOD and  GPS_AbsolutePosition_1 =GOOD) or ( InertialNavigation_AbsolutePosition_1 =GOOD and GroundTrack_OrbitalPosition=GOOD) or ( InertialNavigation_AbsolutePosition_1 =GOOD and  GPS_AbsolutePosition_1 =GOOD) or ( InertialNavigation_AbsolutePosition_1 =GOOD and  StarPlanetTracker_AbsolutePosition_1 =GOOD)) ) restart ORBITALSTATE_POOR__TO__CHART_CHARTJUNCTION1085_2



	unless (idOrbitalState_Complex_OrbitalState_1=988) and ( (GroundTrack_OrbitalPosition=GOOD or  GPS_AbsolutePosition_1 =GOOD or  StarPlanetTracker_AbsolutePosition_1 =GOOD) and (GroundTrack_OrbitalVelocity=GOOD or  GPS_AbsoluteVelocity_1 =GOOD or  StarPlanetTracker_AbsoluteVelocity_1 =GOOD) and  StarPlanetTracker_AbsoluteAttitude_1 =GOOD ) restart ORBITALSTATE_PVGOOD__TO__ORBITALSTATE_GOOD_1



	unless (idOrbitalState_Complex_OrbitalState_1=989) and ( not ((GroundTrack_OrbitalPosition=GOOD and  GPS_AbsolutePosition_1 =GOOD) or (GroundTrack_OrbitalPosition=GOOD and  StarPlanetTracker_AbsolutePosition_1 =GOOD) or ( StarPlanetTracker_AbsolutePosition_1 =GOOD and  GPS_AbsolutePosition_1 =GOOD) or ( InertialNavigation_AbsolutePosition_1 =GOOD and GroundTrack_OrbitalPosition=GOOD) or ( InertialNavigation_AbsolutePosition_1 =GOOD and  GPS_AbsolutePosition_1 =GOOD) or ( InertialNavigation_AbsolutePosition_1 =GOOD and  StarPlanetTracker_AbsolutePosition_1 =GOOD)) ) restart ORBITALSTATE_GOOD__TO__CHART_CHARTJUNCTION1088_1



	unless (idOrbitalState_Complex_OrbitalState_1=989) and ( (GroundTrack_OrbitalPosition=GOOD or  GPS_AbsolutePosition_1 =GOOD or  StarPlanetTracker_AbsolutePosition_1 =GOOD) and (GroundTrack_OrbitalVelocity=GOOD or  GPS_AbsoluteVelocity_1 =GOOD or  StarPlanetTracker_AbsoluteVelocity_1 =GOOD) and  StarPlanetTracker_AbsoluteAttitude_1 =GOOD ) restart ORBITALSTATE_GOOD__TO__ORBITALSTATE_GOOD_2



	unless (idOrbitalState_Complex_OrbitalState_1=986) restart ORBITALSTATE_ACQUIRING_IDL

	unless (idOrbitalState_Complex_OrbitalState_1=987) restart ORBITALSTATE_POOR_IDL

	unless (idOrbitalState_Complex_OrbitalState_1=988) restart ORBITALSTATE_PVGOOD_IDL

	unless (idOrbitalState_Complex_OrbitalState_1=989) restart ORBITALSTATE_GOOD_IDL

	let

		(idOrbitalState_Complex_OrbitalState, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Velocity) 
	= (idOrbitalState_Complex_OrbitalState_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Velocity_1);
	

	tel



	state POINT__TO__ORBITALSTATE_ACQUIRING_1:

	 var 	idOrbitalState_Complex_OrbitalState_2:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Velocity_2:int;
	let

		-- transition trace :
	--POINT__To__OrbitalState_Acquiring_1
		(idOrbitalState_Complex_OrbitalState_2, OrbitalState_Position_2, OrbitalState_Velocity_2, OrbitalState_Attitude_2) 
	= OrbitalState_Acquiring_en(idOrbitalState_Complex_OrbitalState_1, NONE, OrbitalState_Position_1, OrbitalState_Velocity_1, OrbitalState_Attitude_1, false);
		

	(idOrbitalState_Complex_OrbitalState, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Velocity) 
	=  (idOrbitalState_Complex_OrbitalState_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Velocity_2);


	tel

	until true restart POINTOrbitalState_Complex_OrbitalState



	state ORBITALSTATE_ACQUIRING__TO__ORBITALSTATE_POOR_1:

	 var 	idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState_3:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Velocity_2:int;
	let

		-- transition trace :
	--OrbitalState_Acquiring__To__OrbitalState_POOR_1
		(idOrbitalState_Complex_OrbitalState_2) 
	= OrbitalState_Acquiring_ex(idOrbitalState_Complex_OrbitalState_1, false);
		

		(idOrbitalState_Complex_OrbitalState_3, OrbitalState_Position_2, OrbitalState_Velocity_2, OrbitalState_Attitude_2) 
	= OrbitalState_POOR_en(idOrbitalState_Complex_OrbitalState_2, POOR, OrbitalState_Position_1, OrbitalState_Velocity_1, NONE, OrbitalState_Attitude_1, false);
		

	(idOrbitalState_Complex_OrbitalState, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Velocity) 
	=  (idOrbitalState_Complex_OrbitalState_3, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Velocity_2);


	tel

	until true restart POINTOrbitalState_Complex_OrbitalState



	state ORBITALSTATE_ACQUIRING__TO__ORBITALSTATE_ACQUIRING_2:

	 var 	idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState_3:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Velocity_2:int;
	let

		-- transition trace :
	--OrbitalState_Acquiring__To__OrbitalState_Acquiring_2
		(idOrbitalState_Complex_OrbitalState_2) 
	= OrbitalState_Acquiring_ex(idOrbitalState_Complex_OrbitalState_1, false);
		

		(idOrbitalState_Complex_OrbitalState_3, OrbitalState_Position_2, OrbitalState_Velocity_2, OrbitalState_Attitude_2) 
	= OrbitalState_Acquiring_en(idOrbitalState_Complex_OrbitalState_2, NONE, OrbitalState_Position_1, OrbitalState_Velocity_1, OrbitalState_Attitude_1, false);
		

	(idOrbitalState_Complex_OrbitalState, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Velocity) 
	=  (idOrbitalState_Complex_OrbitalState_3, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Velocity_2);


	tel

	until true restart POINTOrbitalState_Complex_OrbitalState



	state ORBITALSTATE_POOR__TO__ORBITALSTATE_ACQUIRING_1:

	 var 	idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState_3:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Velocity_2:int;
	let

		-- transition trace :
	--OrbitalState_POOR__To__OrbitalState_Acquiring_1
		(idOrbitalState_Complex_OrbitalState_2) 
	= OrbitalState_POOR_ex(idOrbitalState_Complex_OrbitalState_1, false);
		

		(idOrbitalState_Complex_OrbitalState_3, OrbitalState_Position_2, OrbitalState_Velocity_2, OrbitalState_Attitude_2) 
	= OrbitalState_Acquiring_en(idOrbitalState_Complex_OrbitalState_2, NONE, OrbitalState_Position_1, OrbitalState_Velocity_1, OrbitalState_Attitude_1, false);
		

	(idOrbitalState_Complex_OrbitalState, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Velocity) 
	=  (idOrbitalState_Complex_OrbitalState_3, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Velocity_2);


	tel

	until true restart POINTOrbitalState_Complex_OrbitalState



	state ORBITALSTATE_POOR__TO__CHART_CHARTJUNCTION1085_2:

	 var 	idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState_3:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Velocity_2:int;
	let

		



-- transition trace :
	--OrbitalState_POOR__To__Junction1085_2, Junction1085__To__Junction1087_1, Junction1087__To__OrbitalState_pvGOOD_1
		(idOrbitalState_Complex_OrbitalState_2) 
	= 
		 if (( ((GroundTrack_OrbitalVelocity=GOOD and  GPS_AbsoluteVelocity_1 =GOOD) or (GroundTrack_OrbitalVelocity=GOOD and  StarPlanetTracker_AbsoluteVelocity_1 =GOOD) or ( StarPlanetTracker_AbsoluteVelocity_1 =GOOD and  GPS_AbsoluteVelocity_1 =GOOD) or ( InertialNavigation_AbsoluteVelocity_1 =GOOD and GroundTrack_OrbitalVelocity=GOOD) or ( InertialNavigation_AbsoluteVelocity_1 =GOOD and  GPS_AbsoluteVelocity_1 =GOOD) or ( InertialNavigation_AbsoluteVelocity_1 =GOOD and  StarPlanetTracker_AbsoluteVelocity_1 =GOOD)) ) and (  InertialNavigation_AbsoluteAttitude_1 =GOOD or  StarPlanetTracker_AbsoluteAttitude_1 =GOOD )) then 
		OrbitalState_POOR_ex(idOrbitalState_Complex_OrbitalState_1, false)
		 else (idOrbitalState_Complex_OrbitalState_1);
		

		(idOrbitalState_Complex_OrbitalState_3, OrbitalState_Position_2, OrbitalState_Velocity_2, OrbitalState_Attitude_2) 
	= 
		 if (( ((GroundTrack_OrbitalVelocity=GOOD and  GPS_AbsoluteVelocity_1 =GOOD) or (GroundTrack_OrbitalVelocity=GOOD and  StarPlanetTracker_AbsoluteVelocity_1 =GOOD) or ( StarPlanetTracker_AbsoluteVelocity_1 =GOOD and  GPS_AbsoluteVelocity_1 =GOOD) or ( InertialNavigation_AbsoluteVelocity_1 =GOOD and GroundTrack_OrbitalVelocity=GOOD) or ( InertialNavigation_AbsoluteVelocity_1 =GOOD and  GPS_AbsoluteVelocity_1 =GOOD) or ( InertialNavigation_AbsoluteVelocity_1 =GOOD and  StarPlanetTracker_AbsoluteVelocity_1 =GOOD)) ) and (  InertialNavigation_AbsoluteAttitude_1 =GOOD or  StarPlanetTracker_AbsoluteAttitude_1 =GOOD )) then 
		OrbitalState_pvGOOD_en(idOrbitalState_Complex_OrbitalState_2, GOOD, OrbitalState_Position_1, OrbitalState_Velocity_1, POOR, OrbitalState_Attitude_1, false)
		 else (idOrbitalState_Complex_OrbitalState_2, OrbitalState_Position_1, OrbitalState_Velocity_1, OrbitalState_Attitude_1);
		

	(idOrbitalState_Complex_OrbitalState, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Velocity) 
	= 
		 if (( ((GroundTrack_OrbitalVelocity=GOOD and  GPS_AbsoluteVelocity_1 =GOOD) or (GroundTrack_OrbitalVelocity=GOOD and  StarPlanetTracker_AbsoluteVelocity_1 =GOOD) or ( StarPlanetTracker_AbsoluteVelocity_1 =GOOD and  GPS_AbsoluteVelocity_1 =GOOD) or ( InertialNavigation_AbsoluteVelocity_1 =GOOD and GroundTrack_OrbitalVelocity=GOOD) or ( InertialNavigation_AbsoluteVelocity_1 =GOOD and  GPS_AbsoluteVelocity_1 =GOOD) or ( InertialNavigation_AbsoluteVelocity_1 =GOOD and  StarPlanetTracker_AbsoluteVelocity_1 =GOOD)) ) and (  InertialNavigation_AbsoluteAttitude_1 =GOOD or  StarPlanetTracker_AbsoluteAttitude_1 =GOOD )) then 
		(idOrbitalState_Complex_OrbitalState_3, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Velocity_2)
		 else (idOrbitalState_Complex_OrbitalState_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Velocity_1);


	tel

	until true restart POINTOrbitalState_Complex_OrbitalState



	state ORBITALSTATE_PVGOOD__TO__ORBITALSTATE_GOOD_1:

	 var 	idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState_3:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Velocity_2:int;
	let

		-- transition trace :
	--OrbitalState_pvGOOD__To__OrbitalState_GOOD_1
		(idOrbitalState_Complex_OrbitalState_2) 
	= OrbitalState_pvGOOD_ex(idOrbitalState_Complex_OrbitalState_1, false);
		

		(idOrbitalState_Complex_OrbitalState_3, OrbitalState_Position_2, OrbitalState_Velocity_2, OrbitalState_Attitude_2) 
	= OrbitalState_GOOD_en(idOrbitalState_Complex_OrbitalState_2, GOOD, OrbitalState_Position_1, OrbitalState_Velocity_1, OrbitalState_Attitude_1, false);
		

	(idOrbitalState_Complex_OrbitalState, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Velocity) 
	=  (idOrbitalState_Complex_OrbitalState_3, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Velocity_2);


	tel

	until true restart POINTOrbitalState_Complex_OrbitalState



	state ORBITALSTATE_GOOD__TO__CHART_CHARTJUNCTION1088_1:

	 var 	idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState_3:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Velocity_2:int;
	let

		



-- transition trace :
	--OrbitalState_GOOD__To__Junction1088_1, Junction1088__To__Junction1086_1, Junction1086__To__OrbitalState_POOR_1
		(idOrbitalState_Complex_OrbitalState_2) 
	= 
		 if (( not ( InertialNavigation_AbsoluteAttitude_1 =GOOD or  StarPlanetTracker_AbsoluteAttitude_1 =GOOD) ) and ( not ((GroundTrack_OrbitalVelocity=GOOD and  GPS_AbsoluteVelocity_1 =GOOD) or (GroundTrack_OrbitalVelocity=GOOD and  StarPlanetTracker_AbsoluteVelocity_1 =GOOD) or ( StarPlanetTracker_AbsoluteVelocity_1 =GOOD and  GPS_AbsoluteVelocity_1 =GOOD) or ( InertialNavigation_AbsoluteVelocity_1 =GOOD and GroundTrack_OrbitalVelocity=GOOD) or ( InertialNavigation_AbsoluteVelocity_1 =GOOD and  GPS_AbsoluteVelocity_1 =GOOD) or ( InertialNavigation_AbsoluteVelocity_1 =GOOD and  StarPlanetTracker_AbsoluteVelocity_1 =GOOD)) )) then 
		OrbitalState_GOOD_ex(idOrbitalState_Complex_OrbitalState_1, false)
		 else (idOrbitalState_Complex_OrbitalState_1);
		

		(idOrbitalState_Complex_OrbitalState_3, OrbitalState_Position_2, OrbitalState_Velocity_2, OrbitalState_Attitude_2) 
	= 
		 if (( not ( InertialNavigation_AbsoluteAttitude_1 =GOOD or  StarPlanetTracker_AbsoluteAttitude_1 =GOOD) ) and ( not ((GroundTrack_OrbitalVelocity=GOOD and  GPS_AbsoluteVelocity_1 =GOOD) or (GroundTrack_OrbitalVelocity=GOOD and  StarPlanetTracker_AbsoluteVelocity_1 =GOOD) or ( StarPlanetTracker_AbsoluteVelocity_1 =GOOD and  GPS_AbsoluteVelocity_1 =GOOD) or ( InertialNavigation_AbsoluteVelocity_1 =GOOD and GroundTrack_OrbitalVelocity=GOOD) or ( InertialNavigation_AbsoluteVelocity_1 =GOOD and  GPS_AbsoluteVelocity_1 =GOOD) or ( InertialNavigation_AbsoluteVelocity_1 =GOOD and  StarPlanetTracker_AbsoluteVelocity_1 =GOOD)) )) then 
		OrbitalState_POOR_en(idOrbitalState_Complex_OrbitalState_2, POOR, OrbitalState_Position_1, OrbitalState_Velocity_1, NONE, OrbitalState_Attitude_1, false)
		 else (idOrbitalState_Complex_OrbitalState_2, OrbitalState_Position_1, OrbitalState_Velocity_1, OrbitalState_Attitude_1);
		

	(idOrbitalState_Complex_OrbitalState, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Velocity) 
	= 
		 if (( not ( InertialNavigation_AbsoluteAttitude_1 =GOOD or  StarPlanetTracker_AbsoluteAttitude_1 =GOOD) ) and ( not ((GroundTrack_OrbitalVelocity=GOOD and  GPS_AbsoluteVelocity_1 =GOOD) or (GroundTrack_OrbitalVelocity=GOOD and  StarPlanetTracker_AbsoluteVelocity_1 =GOOD) or ( StarPlanetTracker_AbsoluteVelocity_1 =GOOD and  GPS_AbsoluteVelocity_1 =GOOD) or ( InertialNavigation_AbsoluteVelocity_1 =GOOD and GroundTrack_OrbitalVelocity=GOOD) or ( InertialNavigation_AbsoluteVelocity_1 =GOOD and  GPS_AbsoluteVelocity_1 =GOOD) or ( InertialNavigation_AbsoluteVelocity_1 =GOOD and  StarPlanetTracker_AbsoluteVelocity_1 =GOOD)) )) then 
		(idOrbitalState_Complex_OrbitalState_3, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Velocity_2)
		 else (idOrbitalState_Complex_OrbitalState_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Velocity_1);


	tel

	until true restart POINTOrbitalState_Complex_OrbitalState



	state ORBITALSTATE_GOOD__TO__ORBITALSTATE_GOOD_2:

	 var 	idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState_3:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Velocity_2:int;
	let

		-- transition trace :
	--OrbitalState_GOOD__To__OrbitalState_GOOD_2
		(idOrbitalState_Complex_OrbitalState_2) 
	= OrbitalState_GOOD_ex(idOrbitalState_Complex_OrbitalState_1, false);
		

		(idOrbitalState_Complex_OrbitalState_3, OrbitalState_Position_2, OrbitalState_Velocity_2, OrbitalState_Attitude_2) 
	= OrbitalState_GOOD_en(idOrbitalState_Complex_OrbitalState_2, GOOD, OrbitalState_Position_1, OrbitalState_Velocity_1, OrbitalState_Attitude_1, false);
		

	(idOrbitalState_Complex_OrbitalState, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Velocity) 
	=  (idOrbitalState_Complex_OrbitalState_3, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Velocity_2);


	tel

	until true restart POINTOrbitalState_Complex_OrbitalState



	state ORBITALSTATE_ACQUIRING_IDL:

	 	let

		

	(idOrbitalState_Complex_OrbitalState, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Velocity) 
	= (idOrbitalState_Complex_OrbitalState_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Velocity_1);
	

	tel

	until true restart POINTOrbitalState_Complex_OrbitalState



	state ORBITALSTATE_POOR_IDL:

	 	let

		

	(idOrbitalState_Complex_OrbitalState, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Velocity) 
	= (idOrbitalState_Complex_OrbitalState_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Velocity_1);
	

	tel

	until true restart POINTOrbitalState_Complex_OrbitalState



	state ORBITALSTATE_PVGOOD_IDL:

	 	let

		

	(idOrbitalState_Complex_OrbitalState, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Velocity) 
	= (idOrbitalState_Complex_OrbitalState_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Velocity_1);
	

	tel

	until true restart POINTOrbitalState_Complex_OrbitalState



	state ORBITALSTATE_GOOD_IDL:

	 	let

		

	(idOrbitalState_Complex_OrbitalState, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Velocity) 
	= (idOrbitalState_Complex_OrbitalState_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Velocity_1);
	

	tel

	until true restart POINTOrbitalState_Complex_OrbitalState



tel


--***************************************************State :OrbitalState_Active_OrbitalState_Complex Automaton***************************************************

node OrbitalState_Active_OrbitalState_Complex_node(idOrbitalState_Active_OrbitalState_Complex_1:int;
	GOOD:int;
	NONE:int;
	OrbitalState_Attitude_1:int;
	OrbitalState_Position_1:int;
	OrbitalState_Velocity_1:int;
	POOR:int;
	idOrbitalState_Complex_OrbitalState_1:int;
	OrbitalState_Time_1:int;
	idOrbitalState_Complex_OrbitalState2_1:int;
	GPS_AbsolutePosition_1:int;
	GPS_AbsoluteVelocity_1:int;
	GroundTrack_OrbitalPosition:int;
	GroundTrack_OrbitalVelocity:int;
	InertialNavigation_AbsoluteAttitude_1:int;
	InertialNavigation_AbsolutePosition_1:int;
	InertialNavigation_AbsoluteVelocity_1:int;
	StarPlanetTracker_AbsoluteAttitude_1:int;
	StarPlanetTracker_AbsolutePosition_1:int;
	StarPlanetTracker_AbsoluteVelocity_1:int;
	GPS_AbsoluteTime_1:int;
	GroundTrack_Time:int;
	RealTimeClock_time:int;
	StarPlanetTracker_AbsoluteTime_1:int)

returns (idOrbitalState_Active_OrbitalState_Complex:int;
	OrbitalState_Attitude:int;
	OrbitalState_Position:int;
	OrbitalState_Velocity:int;
	idOrbitalState_Complex_OrbitalState:int;
	OrbitalState_Time:int;
	idOrbitalState_Complex_OrbitalState2:int);


let

	 automaton orbitalstate_active_orbitalstate_complex

	state POINTOrbitalState_Active_OrbitalState_Complex:
	unless (idOrbitalState_Active_OrbitalState_Complex_1=0) restart ORBITALSTATE_ACTIVE_ORBITALSTATE_COMPLEX_PARALLEL_ENTRY
	unless true  restart ORBITALSTATE_ACTIVE_ORBITALSTATE_COMPLEX_PARALLEL_IDL

	let

		(idOrbitalState_Active_OrbitalState_Complex, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Velocity, idOrbitalState_Complex_OrbitalState, OrbitalState_Time, idOrbitalState_Complex_OrbitalState2) 
	= (idOrbitalState_Active_OrbitalState_Complex_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Velocity_1, idOrbitalState_Complex_OrbitalState_1, OrbitalState_Time_1, idOrbitalState_Complex_OrbitalState2_1);
	

	tel



	state ORBITALSTATE_ACTIVE_ORBITALSTATE_COMPLEX_PARALLEL_ENTRY:

	 var 	idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_OrbitalState_Complex_3:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Velocity_2:int;
	idOrbitalState_Complex_OrbitalState_2:int;
	OrbitalState_Time_2:int;
	idOrbitalState_Complex_OrbitalState2_2:int;
	let

		
	(idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Active_OrbitalState_Complex_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Velocity_2) 
	= OrbitalState_Complex_OrbitalState_en(idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Active_OrbitalState_Complex_1, NONE, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Velocity_1, POOR, GOOD, false);

	(idOrbitalState_Complex_OrbitalState2_2, idOrbitalState_Active_OrbitalState_Complex_3, OrbitalState_Time_2) 
	= OrbitalState_Complex_OrbitalState2_en(idOrbitalState_Complex_OrbitalState2_1, idOrbitalState_Active_OrbitalState_Complex_2, OrbitalState_Time_1, POOR, GOOD, false);


	(idOrbitalState_Active_OrbitalState_Complex, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Velocity, idOrbitalState_Complex_OrbitalState, OrbitalState_Time, idOrbitalState_Complex_OrbitalState2) 
	= (idOrbitalState_Active_OrbitalState_Complex_3, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Velocity_2, idOrbitalState_Complex_OrbitalState_2, OrbitalState_Time_2, idOrbitalState_Complex_OrbitalState2_2);
	

	tel

	until true restart POINTOrbitalState_Active_OrbitalState_Complex



	state ORBITALSTATE_ACTIVE_ORBITALSTATE_COMPLEX_PARALLEL_IDL:

	 var 	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Velocity_2:int;
	idOrbitalState_Complex_OrbitalState_2:int;
	OrbitalState_Time_2:int;
	idOrbitalState_Complex_OrbitalState2_2:int;
	let

		

		(idOrbitalState_Complex_OrbitalState_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Velocity_2)
	= if not (idOrbitalState_Complex_OrbitalState_1= 0 ) then OrbitalState_Complex_OrbitalState_node(idOrbitalState_Complex_OrbitalState_1, NONE, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Velocity_1, GPS_AbsolutePosition_1, StarPlanetTracker_AbsolutePosition_1, GroundTrack_OrbitalPosition, GPS_AbsoluteVelocity_1, StarPlanetTracker_AbsoluteVelocity_1, GroundTrack_OrbitalVelocity, POOR, GOOD, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_AbsoluteAttitude_1, StarPlanetTracker_AbsoluteAttitude_1)

		 else (idOrbitalState_Complex_OrbitalState_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Velocity_1);

		

		

		(idOrbitalState_Complex_OrbitalState2_2, OrbitalState_Time_2)
	= if not (idOrbitalState_Complex_OrbitalState2_1= 0 ) then OrbitalState_Complex_OrbitalState2_node(idOrbitalState_Complex_OrbitalState2_1, OrbitalState_Time_1, POOR, GroundTrack_Time, GOOD, GPS_AbsoluteTime_1, StarPlanetTracker_AbsoluteTime_1, RealTimeClock_time)

		 else (idOrbitalState_Complex_OrbitalState2_1, OrbitalState_Time_1);

		

		

	(idOrbitalState_Active_OrbitalState_Complex, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Velocity, idOrbitalState_Complex_OrbitalState, OrbitalState_Time, idOrbitalState_Complex_OrbitalState2) 
	= (idOrbitalState_Active_OrbitalState_Complex_1, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Velocity_2, idOrbitalState_Complex_OrbitalState_2, OrbitalState_Time_2, idOrbitalState_Complex_OrbitalState2_2);
	

	tel

	until true restart POINTOrbitalState_Active_OrbitalState_Complex



tel


--***************************************************State :OrbitalState_Active_StarPlanetTracker Automaton***************************************************

node OrbitalState_Active_StarPlanetTracker_node(idOrbitalState_Active_StarPlanetTracker_1:int;
	NONE:int;
	StarPlanetTracker_AbsoluteAttitude_1:int;
	StarPlanetTracker_AbsolutePosition_1:int;
	StarPlanetTracker_AbsoluteTime_1:int;
	StarPlanetTracker_AbsoluteVelocity_1:int;
	StarPlanetTracker_planetVisibility:int;
	StarPlanetTracker_starVisibility:int;
	opticsAvailability_status:bool;
	AVAILABLE:bool;
	POOR:int;
	StarPlanetTracker_timer_1:int;
	StarPlanetTracker_timer_upper_limit:int;
	GOOD:int;
	sunlight_status:bool;
	BRIGHT:bool)

returns (idOrbitalState_Active_StarPlanetTracker:int;
	StarPlanetTracker_AbsoluteAttitude:int;
	StarPlanetTracker_AbsolutePosition:int;
	StarPlanetTracker_AbsoluteTime:int;
	StarPlanetTracker_AbsoluteVelocity:int;
	StarPlanetTracker_timer:int);


let

	 automaton orbitalstate_active_starplanettracker

	state POINTOrbitalState_Active_StarPlanetTracker:
	unless (idOrbitalState_Active_StarPlanetTracker_1=0) restart POINT__TO__STARPLANETTRACKER_ACQUIRING_1



	unless (idOrbitalState_Active_StarPlanetTracker_1=999) and ( not (StarPlanetTracker_planetVisibility=NONE or StarPlanetTracker_starVisibility=NONE) and opticsAvailability_status=AVAILABLE ) restart STARPLANETTRACKER_ACQUIRING__TO__STARPLANETTRACKER_POOR_1



	unless (idOrbitalState_Active_StarPlanetTracker_1=999) and ( StarPlanetTracker_planetVisibility=NONE or StarPlanetTracker_starVisibility=NONE or opticsAvailability_status!=AVAILABLE ) restart STARPLANETTRACKER_ACQUIRING__TO__STARPLANETTRACKER_ACQUIRING_2



	unless (idOrbitalState_Active_StarPlanetTracker_1=1000) and ( ( StarPlanetTracker_timer_1 =StarPlanetTracker_timer_upper_limit) and (StarPlanetTracker_planetVisibility=NONE or StarPlanetTracker_starVisibility=NONE or opticsAvailability_status!=AVAILABLE) ) restart STARPLANETTRACKER_POOR__TO__STARPLANETTRACKER_ACQUIRING_1



	unless (idOrbitalState_Active_StarPlanetTracker_1=1000) and ( ( StarPlanetTracker_timer_1 =StarPlanetTracker_timer_upper_limit) and StarPlanetTracker_planetVisibility=GOOD and StarPlanetTracker_starVisibility=GOOD and opticsAvailability_status=AVAILABLE and sunlight_status!=BRIGHT ) restart STARPLANETTRACKER_POOR__TO__STARPLANETTRACKER_GOOD_2



	unless (idOrbitalState_Active_StarPlanetTracker_1=1000) and (  StarPlanetTracker_timer_1 <StarPlanetTracker_timer_upper_limit and (StarPlanetTracker_planetVisibility=NONE or StarPlanetTracker_starVisibility=NONE or opticsAvailability_status!=AVAILABLE) or (opticsAvailability_status=AVAILABLE and (sunlight_status=BRIGHT or StarPlanetTracker_planetVisibility=POOR or StarPlanetTracker_starVisibility=POOR)) ) restart STARPLANETTRACKER_POOR__TO__STARPLANETTRACKER_POOR_3



	unless (idOrbitalState_Active_StarPlanetTracker_1=1001) and ( (StarPlanetTracker_planetVisibility!=GOOD and StarPlanetTracker_starVisibility!=GOOD and opticsAvailability_status!=AVAILABLE) or sunlight_status=BRIGHT ) restart STARPLANETTRACKER_GOOD__TO__STARPLANETTRACKER_POOR_1



	unless (idOrbitalState_Active_StarPlanetTracker_1=1001) and ( StarPlanetTracker_planetVisibility=GOOD and StarPlanetTracker_starVisibility=GOOD and opticsAvailability_status=AVAILABLE and sunlight_status!=BRIGHT ) restart STARPLANETTRACKER_GOOD__TO__STARPLANETTRACKER_GOOD_2



	unless (idOrbitalState_Active_StarPlanetTracker_1=999) restart STARPLANETTRACKER_ACQUIRING_IDL

	unless (idOrbitalState_Active_StarPlanetTracker_1=1000) restart STARPLANETTRACKER_POOR_IDL

	unless (idOrbitalState_Active_StarPlanetTracker_1=1001) restart STARPLANETTRACKER_GOOD_IDL

	let

		(idOrbitalState_Active_StarPlanetTracker, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer) 
	= (idOrbitalState_Active_StarPlanetTracker_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1);
	

	tel



	state POINT__TO__STARPLANETTRACKER_ACQUIRING_1:

	 var 	idOrbitalState_Active_StarPlanetTracker_2:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	let

		-- transition trace :
	--POINT__To__StarPlanetTracker_ACQUIRING_1
		(idOrbitalState_Active_StarPlanetTracker_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsoluteTime_2) 
	= StarPlanetTracker_ACQUIRING_en(idOrbitalState_Active_StarPlanetTracker_1, NONE, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsoluteTime_1, false);
		

	(idOrbitalState_Active_StarPlanetTracker, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity) 
	=  (idOrbitalState_Active_StarPlanetTracker_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2);

	--add unused variables
	(StarPlanetTracker_timer) 
	= (StarPlanetTracker_timer_1);
	

	tel

	until true restart POINTOrbitalState_Active_StarPlanetTracker



	state STARPLANETTRACKER_ACQUIRING__TO__STARPLANETTRACKER_POOR_1:

	 var 	idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Active_StarPlanetTracker_3:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	StarPlanetTracker_timer_2:int;
	let

		-- transition trace :
	--StarPlanetTracker_ACQUIRING__To__StarPlanetTracker_POOR_1
		(idOrbitalState_Active_StarPlanetTracker_2) 
	= StarPlanetTracker_ACQUIRING_ex(idOrbitalState_Active_StarPlanetTracker_1, false);
		

		(idOrbitalState_Active_StarPlanetTracker_3, StarPlanetTracker_timer_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsoluteTime_2) 
	= StarPlanetTracker_POOR_en(idOrbitalState_Active_StarPlanetTracker_2, StarPlanetTracker_timer_1, POOR, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsoluteTime_1, false);
		

	(idOrbitalState_Active_StarPlanetTracker, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer) 
	=  (idOrbitalState_Active_StarPlanetTracker_3, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2);


	tel

	until true restart POINTOrbitalState_Active_StarPlanetTracker



	state STARPLANETTRACKER_ACQUIRING__TO__STARPLANETTRACKER_ACQUIRING_2:

	 var 	idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Active_StarPlanetTracker_3:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	let

		-- transition trace :
	--StarPlanetTracker_ACQUIRING__To__StarPlanetTracker_ACQUIRING_2
		(idOrbitalState_Active_StarPlanetTracker_2) 
	= StarPlanetTracker_ACQUIRING_ex(idOrbitalState_Active_StarPlanetTracker_1, false);
		

		(idOrbitalState_Active_StarPlanetTracker_3, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsoluteTime_2) 
	= StarPlanetTracker_ACQUIRING_en(idOrbitalState_Active_StarPlanetTracker_2, NONE, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsoluteTime_1, false);
		

	(idOrbitalState_Active_StarPlanetTracker, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer) 
	=  (idOrbitalState_Active_StarPlanetTracker_3, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_1);


	tel

	until true restart POINTOrbitalState_Active_StarPlanetTracker



	state STARPLANETTRACKER_POOR__TO__STARPLANETTRACKER_ACQUIRING_1:

	 var 	idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Active_StarPlanetTracker_3:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	let

		-- transition trace :
	--StarPlanetTracker_POOR__To__StarPlanetTracker_ACQUIRING_1
		(idOrbitalState_Active_StarPlanetTracker_2) 
	= StarPlanetTracker_POOR_ex(idOrbitalState_Active_StarPlanetTracker_1, false);
		

		(idOrbitalState_Active_StarPlanetTracker_3, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsoluteTime_2) 
	= StarPlanetTracker_ACQUIRING_en(idOrbitalState_Active_StarPlanetTracker_2, NONE, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsoluteTime_1, false);
		

	(idOrbitalState_Active_StarPlanetTracker, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer) 
	=  (idOrbitalState_Active_StarPlanetTracker_3, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_1);


	tel

	until true restart POINTOrbitalState_Active_StarPlanetTracker



	state STARPLANETTRACKER_POOR__TO__STARPLANETTRACKER_GOOD_2:

	 var 	idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Active_StarPlanetTracker_3:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	let

		-- transition trace :
	--StarPlanetTracker_POOR__To__StarPlanetTracker_GOOD_2
		(idOrbitalState_Active_StarPlanetTracker_2) 
	= StarPlanetTracker_POOR_ex(idOrbitalState_Active_StarPlanetTracker_1, false);
		

		(idOrbitalState_Active_StarPlanetTracker_3, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsoluteTime_2) 
	= StarPlanetTracker_GOOD_en(idOrbitalState_Active_StarPlanetTracker_2, GOOD, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsoluteTime_1, false);
		

	(idOrbitalState_Active_StarPlanetTracker, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer) 
	=  (idOrbitalState_Active_StarPlanetTracker_3, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_1);


	tel

	until true restart POINTOrbitalState_Active_StarPlanetTracker



	state STARPLANETTRACKER_POOR__TO__STARPLANETTRACKER_POOR_3:

	 var 	idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Active_StarPlanetTracker_3:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	StarPlanetTracker_timer_2:int;
	let

		-- transition trace :
	--StarPlanetTracker_POOR__To__StarPlanetTracker_POOR_3
		(idOrbitalState_Active_StarPlanetTracker_2) 
	= StarPlanetTracker_POOR_ex(idOrbitalState_Active_StarPlanetTracker_1, false);
		

		(idOrbitalState_Active_StarPlanetTracker_3, StarPlanetTracker_timer_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsoluteTime_2) 
	= StarPlanetTracker_POOR_en(idOrbitalState_Active_StarPlanetTracker_2, StarPlanetTracker_timer_1, POOR, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsoluteTime_1, false);
		

	(idOrbitalState_Active_StarPlanetTracker, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer) 
	=  (idOrbitalState_Active_StarPlanetTracker_3, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2);


	tel

	until true restart POINTOrbitalState_Active_StarPlanetTracker



	state STARPLANETTRACKER_GOOD__TO__STARPLANETTRACKER_POOR_1:

	 var 	idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Active_StarPlanetTracker_3:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	StarPlanetTracker_timer_2:int;
	let

		-- transition trace :
	--StarPlanetTracker_GOOD__To__StarPlanetTracker_POOR_1
		(idOrbitalState_Active_StarPlanetTracker_2) 
	= StarPlanetTracker_GOOD_ex(idOrbitalState_Active_StarPlanetTracker_1, false);
		

		(idOrbitalState_Active_StarPlanetTracker_3, StarPlanetTracker_timer_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsoluteTime_2) 
	= StarPlanetTracker_POOR_en(idOrbitalState_Active_StarPlanetTracker_2, StarPlanetTracker_timer_1, POOR, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsoluteTime_1, false);
		

	(idOrbitalState_Active_StarPlanetTracker, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer) 
	=  (idOrbitalState_Active_StarPlanetTracker_3, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2);


	tel

	until true restart POINTOrbitalState_Active_StarPlanetTracker



	state STARPLANETTRACKER_GOOD__TO__STARPLANETTRACKER_GOOD_2:

	 var 	idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Active_StarPlanetTracker_3:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	let

		-- transition trace :
	--StarPlanetTracker_GOOD__To__StarPlanetTracker_GOOD_2
		(idOrbitalState_Active_StarPlanetTracker_2) 
	= StarPlanetTracker_GOOD_ex(idOrbitalState_Active_StarPlanetTracker_1, false);
		

		(idOrbitalState_Active_StarPlanetTracker_3, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsoluteTime_2) 
	= StarPlanetTracker_GOOD_en(idOrbitalState_Active_StarPlanetTracker_2, GOOD, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsoluteTime_1, false);
		

	(idOrbitalState_Active_StarPlanetTracker, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer) 
	=  (idOrbitalState_Active_StarPlanetTracker_3, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_1);


	tel

	until true restart POINTOrbitalState_Active_StarPlanetTracker



	state STARPLANETTRACKER_ACQUIRING_IDL:

	 	let

		

	(idOrbitalState_Active_StarPlanetTracker, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer) 
	= (idOrbitalState_Active_StarPlanetTracker_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1);
	

	tel

	until true restart POINTOrbitalState_Active_StarPlanetTracker



	state STARPLANETTRACKER_POOR_IDL:

	 	let

		

	(idOrbitalState_Active_StarPlanetTracker, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer) 
	= (idOrbitalState_Active_StarPlanetTracker_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1);
	

	tel

	until true restart POINTOrbitalState_Active_StarPlanetTracker



	state STARPLANETTRACKER_GOOD_IDL:

	 	let

		

	(idOrbitalState_Active_StarPlanetTracker, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer) 
	= (idOrbitalState_Active_StarPlanetTracker_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1);
	

	tel

	until true restart POINTOrbitalState_Active_StarPlanetTracker



tel


--***************************************************State :CaptureApproach_OrbitalState_Active Automaton***************************************************

node CaptureApproach_OrbitalState_Active_node(idCaptureApproach_OrbitalState_Active_1:int;
	GOOD:int;
	NONE:int;
	OrbitalState_Attitude_1:int;
	OrbitalState_Position_1:int;
	OrbitalState_Time_1:int;
	OrbitalState_Velocity_1:int;
	POOR:int;
	idOrbitalState_Active_OrbitalState_Complex_1:int;
	idOrbitalState_Complex_OrbitalState_1:int;
	idOrbitalState_Complex_OrbitalState2_1:int;
	GPS_AbsolutePosition_1:int;
	GPS_AbsoluteTime_1:int;
	GPS_AbsoluteVelocity_1:int;
	GPS_timer_1:int;
	idOrbitalState_Active_GPS_1:int;
	StarPlanetTracker_AbsoluteAttitude_1:int;
	StarPlanetTracker_AbsolutePosition_1:int;
	StarPlanetTracker_AbsoluteTime_1:int;
	StarPlanetTracker_AbsoluteVelocity_1:int;
	StarPlanetTracker_timer_1:int;
	idOrbitalState_Active_StarPlanetTracker_1:int;
	InertialNavigation_AbsoluteAttitude_1:int;
	InertialNavigation_AbsolutePosition_1:int;
	InertialNavigation_AbsoluteVelocity_1:int;
	InertialNavigation_timer_1:int;
	idOrbitalState_Active_InertialNavigation_1:int;
	GroundTrack_OrbitalPosition:int;
	GroundTrack_OrbitalVelocity:int;
	GroundTrack_Time:int;
	RealTimeClock_time:int;
	GPS_timer_upper_limit:int;
	AVAILABLE:bool;
	BRIGHT:bool;
	GPS_receiverAvailability_status:bool;
	GPS_satelliteVisibility_status:int;
	sunlight_status:bool;
	StarPlanetTracker_timer_upper_limit:int;
	StarPlanetTracker_planetVisibility:int;
	StarPlanetTracker_starVisibility:int;
	opticsAvailability_status:bool;
	InertialNavigation_timer_upper_limit:int;
	InertialNavigation_time:bool;
	VALID_1:bool;
	callibrate:bool)

returns (idCaptureApproach_OrbitalState_Active:int;
	OrbitalState_Attitude:int;
	OrbitalState_Position:int;
	OrbitalState_Time:int;
	OrbitalState_Velocity:int;
	idOrbitalState_Active_OrbitalState_Complex:int;
	idOrbitalState_Complex_OrbitalState:int;
	idOrbitalState_Complex_OrbitalState2:int;
	GPS_AbsolutePosition:int;
	GPS_AbsoluteTime:int;
	GPS_AbsoluteVelocity:int;
	GPS_timer:int;
	idOrbitalState_Active_GPS:int;
	StarPlanetTracker_AbsoluteAttitude:int;
	StarPlanetTracker_AbsolutePosition:int;
	StarPlanetTracker_AbsoluteTime:int;
	StarPlanetTracker_AbsoluteVelocity:int;
	StarPlanetTracker_timer:int;
	idOrbitalState_Active_StarPlanetTracker:int;
	InertialNavigation_AbsoluteAttitude:int;
	InertialNavigation_AbsolutePosition:int;
	InertialNavigation_AbsoluteVelocity:int;
	InertialNavigation_timer:int;
	idOrbitalState_Active_InertialNavigation:int);


let

	 automaton captureapproach_orbitalstate_active

	state POINTCaptureApproach_OrbitalState_Active:
	unless (idCaptureApproach_OrbitalState_Active_1=0) restart CAPTUREAPPROACH_ORBITALSTATE_ACTIVE_PARALLEL_ENTRY
	unless true  restart CAPTUREAPPROACH_ORBITALSTATE_ACTIVE_PARALLEL_IDL

	let

		(idCaptureApproach_OrbitalState_Active, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, idOrbitalState_Active_GPS, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idOrbitalState_Active_StarPlanetTracker, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, idOrbitalState_Active_InertialNavigation) 
	= (idCaptureApproach_OrbitalState_Active_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, idOrbitalState_Active_GPS_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idOrbitalState_Active_StarPlanetTracker_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, idOrbitalState_Active_InertialNavigation_1);
	

	tel



	state CAPTUREAPPROACH_ORBITALSTATE_ACTIVE_PARALLEL_ENTRY:

	 var 	idCaptureApproach_OrbitalState_Active_2, idCaptureApproach_OrbitalState_Active_3, idCaptureApproach_OrbitalState_Active_4, idCaptureApproach_OrbitalState_Active_5:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Time_2:int;
	OrbitalState_Velocity_2:int;
	idOrbitalState_Active_OrbitalState_Complex_2:int;
	idOrbitalState_Complex_OrbitalState_2:int;
	idOrbitalState_Complex_OrbitalState2_2:int;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteTime_2:int;
	GPS_AbsoluteVelocity_2:int;
	GPS_timer_2:int;
	idOrbitalState_Active_GPS_2:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	StarPlanetTracker_timer_2:int;
	idOrbitalState_Active_StarPlanetTracker_2:int;
	InertialNavigation_AbsoluteAttitude_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	InertialNavigation_timer_2:int;
	idOrbitalState_Active_InertialNavigation_2:int;
	let

		
	(idOrbitalState_Active_OrbitalState_Complex_2, idCaptureApproach_OrbitalState_Active_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Velocity_2, idOrbitalState_Complex_OrbitalState_2, OrbitalState_Time_2, idOrbitalState_Complex_OrbitalState2_2) 
	= OrbitalState_Active_OrbitalState_Complex_en(idOrbitalState_Active_OrbitalState_Complex_1, idCaptureApproach_OrbitalState_Active_1, GOOD, NONE, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Velocity_1, POOR, idOrbitalState_Complex_OrbitalState_1, OrbitalState_Time_1, idOrbitalState_Complex_OrbitalState2_1, false);

	(idOrbitalState_Active_GPS_2, idCaptureApproach_OrbitalState_Active_3, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2) 
	= OrbitalState_Active_GPS_en(idOrbitalState_Active_GPS_1, idCaptureApproach_OrbitalState_Active_2, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, NONE, GPS_timer_1, POOR, GOOD, false);

	(idOrbitalState_Active_StarPlanetTracker_2, idCaptureApproach_OrbitalState_Active_4, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2) 
	= OrbitalState_Active_StarPlanetTracker_en(idOrbitalState_Active_StarPlanetTracker_1, idCaptureApproach_OrbitalState_Active_3, NONE, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, POOR, StarPlanetTracker_timer_1, GOOD, false);

	(idOrbitalState_Active_InertialNavigation_2, idCaptureApproach_OrbitalState_Active_5, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2) 
	= OrbitalState_Active_InertialNavigation_en(idOrbitalState_Active_InertialNavigation_1, idCaptureApproach_OrbitalState_Active_4, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, NONE, GOOD, InertialNavigation_timer_1, POOR, false);


	(idCaptureApproach_OrbitalState_Active, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, idOrbitalState_Active_GPS, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idOrbitalState_Active_StarPlanetTracker, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, idOrbitalState_Active_InertialNavigation) 
	= (idCaptureApproach_OrbitalState_Active_5, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, idOrbitalState_Active_GPS_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idOrbitalState_Active_StarPlanetTracker_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, idOrbitalState_Active_InertialNavigation_2);
	

	tel

	until true restart POINTCaptureApproach_OrbitalState_Active



	state CAPTUREAPPROACH_ORBITALSTATE_ACTIVE_PARALLEL_IDL:

	 var 	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Time_2:int;
	OrbitalState_Velocity_2:int;
	idOrbitalState_Active_OrbitalState_Complex_2:int;
	idOrbitalState_Complex_OrbitalState_2:int;
	idOrbitalState_Complex_OrbitalState2_2:int;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteTime_2:int;
	GPS_AbsoluteVelocity_2:int;
	GPS_timer_2, GPS_timer_3:int;
	idOrbitalState_Active_GPS_2:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	StarPlanetTracker_timer_2, StarPlanetTracker_timer_3:int;
	idOrbitalState_Active_StarPlanetTracker_2:int;
	InertialNavigation_AbsoluteAttitude_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	InertialNavigation_timer_2, InertialNavigation_timer_3:int;
	idOrbitalState_Active_InertialNavigation_2:int;
	let

		

		(idOrbitalState_Active_OrbitalState_Complex_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Velocity_2, idOrbitalState_Complex_OrbitalState_2, OrbitalState_Time_2, idOrbitalState_Complex_OrbitalState2_2)
	= if not (idOrbitalState_Active_OrbitalState_Complex_1= 0 ) then OrbitalState_Active_OrbitalState_Complex_node(idOrbitalState_Active_OrbitalState_Complex_1, GOOD, NONE, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Velocity_1, POOR, idOrbitalState_Complex_OrbitalState_1, OrbitalState_Time_1, idOrbitalState_Complex_OrbitalState2_1, GPS_AbsolutePosition_1, GPS_AbsoluteVelocity_1, GroundTrack_OrbitalPosition, GroundTrack_OrbitalVelocity, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteVelocity_1, GPS_AbsoluteTime_1, GroundTrack_Time, RealTimeClock_time, StarPlanetTracker_AbsoluteTime_1)

		 else (idOrbitalState_Active_OrbitalState_Complex_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Velocity_1, idOrbitalState_Complex_OrbitalState_1, OrbitalState_Time_1, idOrbitalState_Complex_OrbitalState2_1);

		

		
	(GPS_timer_2) 
	= if not (idOrbitalState_Active_GPS_1= 0 ) then OrbitalState_Active_GPS_du(GPS_timer_1, GPS_timer_upper_limit)

		 else (GPS_timer_1);

		


		(idOrbitalState_Active_GPS_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_3)
	= if not (idOrbitalState_Active_GPS_1= 0 ) then OrbitalState_Active_GPS_node(idOrbitalState_Active_GPS_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, NONE, GPS_satelliteVisibility_status, GPS_receiverAvailability_status, AVAILABLE, GPS_timer_2, POOR, GPS_timer_upper_limit, GOOD, sunlight_status, BRIGHT)

		 else (idOrbitalState_Active_GPS_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_2);

		

		
	(StarPlanetTracker_timer_2) 
	= if not (idOrbitalState_Active_StarPlanetTracker_1= 0 ) then OrbitalState_Active_StarPlanetTracker_du(StarPlanetTracker_timer_1, StarPlanetTracker_timer_upper_limit)

		 else (StarPlanetTracker_timer_1);

		


		(idOrbitalState_Active_StarPlanetTracker_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_3)
	= if not (idOrbitalState_Active_StarPlanetTracker_1= 0 ) then OrbitalState_Active_StarPlanetTracker_node(idOrbitalState_Active_StarPlanetTracker_1, NONE, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_planetVisibility, StarPlanetTracker_starVisibility, opticsAvailability_status, AVAILABLE, POOR, StarPlanetTracker_timer_2, StarPlanetTracker_timer_upper_limit, GOOD, sunlight_status, BRIGHT)

		 else (idOrbitalState_Active_StarPlanetTracker_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_2);

		

		
	(InertialNavigation_timer_2) 
	= if not (idOrbitalState_Active_InertialNavigation_1= 0 ) then OrbitalState_Active_InertialNavigation_du(InertialNavigation_timer_1, InertialNavigation_timer_upper_limit)

		 else (InertialNavigation_timer_1);

		


		(idOrbitalState_Active_InertialNavigation_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_3)
	= if not (idOrbitalState_Active_InertialNavigation_1= 0 ) then OrbitalState_Active_InertialNavigation_node(idOrbitalState_Active_InertialNavigation_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, NONE, callibrate, GOOD, InertialNavigation_timer_2, InertialNavigation_timer_upper_limit, POOR, InertialNavigation_time, VALID_1)

		 else (idOrbitalState_Active_InertialNavigation_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_2);

		

		

	(idCaptureApproach_OrbitalState_Active, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, idOrbitalState_Active_GPS, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idOrbitalState_Active_StarPlanetTracker, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, idOrbitalState_Active_InertialNavigation) 
	= (idCaptureApproach_OrbitalState_Active_1, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_3, idOrbitalState_Active_GPS_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_3, idOrbitalState_Active_StarPlanetTracker_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_3, idOrbitalState_Active_InertialNavigation_2);
	

	tel

	until true restart POINTCaptureApproach_OrbitalState_Active



tel


--***************************************************State :CaptureApproach_CaptureApproach Automaton***************************************************

node CaptureApproach_CaptureApproach_node(idCaptureApproach_CaptureApproach_1:int;
	CaptureApproachFailed_1:bool;
	CaptureApproach_timer_1:int;
	OrbitalState_Position_1:int;
	NONE:int;
	OrbitalState_Velocity_1:int;
	OrbitalState_Attitude_1:int;
	OrbitalState_Time_1:int;
	CaptureApproach_timer_upper_limit:int;
	GOOD:int;
	POOR:int;
	thrust_status_1:int;
	EXIST:int;
	fuel_status_1:int;
	CaptureApproachComplete_1:bool;
	idCaptureApproach_OrbitalState_Active_1:int;
	idChart_MissionPhaseStates_1:int;
	idMissionPhaseStates_CaptureApproach_1:int;
	idOrbitalState_Active_GPS_1:int;
	idOrbitalState_Active_InertialNavigation_1:int;
	idOrbitalState_Active_OrbitalState_Complex_1:int;
	idOrbitalState_Active_StarPlanetTracker_1:int;
	idOrbitalState_Complex_OrbitalState_1:int;
	idOrbitalState_Complex_OrbitalState2_1:int;
	DockingApproach_1:bool;
	DockingApproachComplete_1:bool;
	DockingApproach_timer_1:int;
	dockingSensor_RelativeAttitude_1:int;
	dockingSensor_RelativePosition_1:int;
	dockingSensor_RelativeVelocity_1:int;
	dockingSensor_targetState_1:int;
	idDockingApproach_DockingApproach_1:int;
	idDockingApproach_dockingSensor_1:int;
	idMissionPhaseStates_DockingApproach_1:int)

returns (idCaptureApproach_CaptureApproach:int;
	CaptureApproachFailed:bool;
	CaptureApproach_timer:int;
	CaptureApproachComplete:bool;
	idCaptureApproach_OrbitalState_Active:int;
	idChart_MissionPhaseStates:int;
	idMissionPhaseStates_CaptureApproach:int;
	idOrbitalState_Active_GPS:int;
	idOrbitalState_Active_InertialNavigation:int;
	idOrbitalState_Active_OrbitalState_Complex:int;
	idOrbitalState_Active_StarPlanetTracker:int;
	idOrbitalState_Complex_OrbitalState:int;
	idOrbitalState_Complex_OrbitalState2:int;
	DockingApproach:bool;
	DockingApproachComplete:bool;
	DockingApproach_timer:int;
	dockingSensor_RelativeAttitude:int;
	dockingSensor_RelativePosition:int;
	dockingSensor_RelativeVelocity:int;
	dockingSensor_targetState:int;
	idDockingApproach_DockingApproach:int;
	idDockingApproach_dockingSensor:int;
	idMissionPhaseStates_DockingApproach:int);


let

	 automaton captureapproach_captureapproach

	state POINTCaptureApproach_CaptureApproach:
	unless (idCaptureApproach_CaptureApproach_1=0) restart POINT__TO__CAPTUREAPPROACH_STARTAPPROACH_1



	unless (idCaptureApproach_CaptureApproach_1=978) and (  OrbitalState_Position_1 !=NONE and  OrbitalState_Velocity_1 !=NONE and  OrbitalState_Attitude_1 !=NONE and  OrbitalState_Time_1 !=NONE and ( CaptureApproach_timer_1 <CaptureApproach_timer_upper_limit) ) restart CAPTUREAPPROACH_STARTAPPROACH__TO__CAPTUREAPPROACH_CHECKORBITALSTATE_1



	unless (idCaptureApproach_CaptureApproach_1=978) and (  CaptureApproach_timer_1 =CaptureApproach_timer_upper_limit ) restart CAPTUREAPPROACH_STARTAPPROACH__TO__CAPTUREAPPROACH_CAPTUREAPPROACHFAILED_2



	unless (idCaptureApproach_CaptureApproach_1=979) and (  OrbitalState_Position_1 =GOOD and  OrbitalState_Velocity_1 =GOOD and  OrbitalState_Attitude_1 !=NONE and  OrbitalState_Time_1 =GOOD ) restart CAPTUREAPPROACH_CHECKORBITALSTATE__TO__CAPTUREAPPROACH_ORIENTEDFORDOCKINGAPPROACH_1



	unless (idCaptureApproach_CaptureApproach_1=979) and (  OrbitalState_Position_1 =POOR and  OrbitalState_Velocity_1 =POOR and  OrbitalState_Attitude_1 =NONE and  OrbitalState_Time_1 =POOR ) restart CAPTUREAPPROACH_CHECKORBITALSTATE__TO__CAPTUREAPPROACH_COMPUTETHRUST_2



	unless (idCaptureApproach_CaptureApproach_1=979) and ( ( OrbitalState_Position_1 =NONE or  OrbitalState_Velocity_1 =NONE or  OrbitalState_Attitude_1 =NONE or  OrbitalState_Time_1 =NONE) or ( CaptureApproach_timer_1 =CaptureApproach_timer_upper_limit) ) restart CAPTUREAPPROACH_CHECKORBITALSTATE__TO__CAPTUREAPPROACH_CAPTUREAPPROACHFAILED_3



	unless (idCaptureApproach_CaptureApproach_1=980) and (  thrust_status_1 =EXIST and  fuel_status_1 =GOOD ) restart CAPTUREAPPROACH_COMPUTETHRUST__TO__CAPTUREAPPROACH_CHECKORBITALSTATE_1



	unless (idCaptureApproach_CaptureApproach_1=980) and ( not ( thrust_status_1 =EXIST and  fuel_status_1 =GOOD) or ( CaptureApproach_timer_1 =CaptureApproach_timer_upper_limit) ) restart CAPTUREAPPROACH_COMPUTETHRUST__TO__CAPTUREAPPROACH_CAPTUREAPPROACHFAILED_2



	unless (idCaptureApproach_CaptureApproach_1=981) restart CAPTUREAPPROACH_ORIENTEDFORDOCKINGAPPROACH__TO__MISSIONPHASESTATES_DOCKINGAPPROACH_1



	unless (idCaptureApproach_CaptureApproach_1=982) restart CAPTUREAPPROACH_CAPTUREAPPROACHFAILED__TO__MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER_1



	unless (idCaptureApproach_CaptureApproach_1=978) restart CAPTUREAPPROACH_STARTAPPROACH_IDL

	unless (idCaptureApproach_CaptureApproach_1=979) restart CAPTUREAPPROACH_CHECKORBITALSTATE_IDL

	unless (idCaptureApproach_CaptureApproach_1=980) restart CAPTUREAPPROACH_COMPUTETHRUST_IDL

	unless (idCaptureApproach_CaptureApproach_1=981) restart CAPTUREAPPROACH_ORIENTEDFORDOCKINGAPPROACH_IDL

	unless (idCaptureApproach_CaptureApproach_1=982) restart CAPTUREAPPROACH_CAPTUREAPPROACHFAILED_IDL

	let

		(idCaptureApproach_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer, CaptureApproachComplete, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach) 
	= (idCaptureApproach_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, CaptureApproachComplete_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1);
	

	tel



	state POINT__TO__CAPTUREAPPROACH_STARTAPPROACH_1:

	 var 	idCaptureApproach_CaptureApproach_2:int;
	CaptureApproachFailed_2:bool;
	CaptureApproach_timer_2:int;
	let

		-- transition trace :
	--POINT__To__CaptureApproach_StartApproach_1
		(idCaptureApproach_CaptureApproach_2, CaptureApproach_timer_2, CaptureApproachFailed_2) 
	= CaptureApproach_StartApproach_en(idCaptureApproach_CaptureApproach_1, CaptureApproach_timer_1, CaptureApproachFailed_1, false);
		

	(idCaptureApproach_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer) 
	=  (idCaptureApproach_CaptureApproach_2, CaptureApproachFailed_2, CaptureApproach_timer_2);

	--add unused variables
	(CaptureApproachComplete, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	= (CaptureApproachComplete_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1);
	

	tel

	until true restart POINTCaptureApproach_CaptureApproach



	state CAPTUREAPPROACH_STARTAPPROACH__TO__CAPTUREAPPROACH_CHECKORBITALSTATE_1:

	 var 	idCaptureApproach_CaptureApproach_2, idCaptureApproach_CaptureApproach_3:int;
	let

		-- transition trace :
	--CaptureApproach_StartApproach__To__CaptureApproach_CheckOrbitalState_1
		(idCaptureApproach_CaptureApproach_2) 
	= CaptureApproach_StartApproach_ex(idCaptureApproach_CaptureApproach_1, false);
		

		(idCaptureApproach_CaptureApproach_3) 
	= CaptureApproach_CheckOrbitalState_en(idCaptureApproach_CaptureApproach_2, false);
		

	(idCaptureApproach_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer) 
	=  (idCaptureApproach_CaptureApproach_3, CaptureApproachFailed_1, CaptureApproach_timer_1);

	--add unused variables
	(CaptureApproachComplete, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	= (CaptureApproachComplete_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1);
	

	tel

	until true restart POINTCaptureApproach_CaptureApproach



	state CAPTUREAPPROACH_STARTAPPROACH__TO__CAPTUREAPPROACH_CAPTUREAPPROACHFAILED_2:

	 var 	idCaptureApproach_CaptureApproach_2, idCaptureApproach_CaptureApproach_3:int;
	CaptureApproachFailed_2:bool;
	let

		-- transition trace :
	--CaptureApproach_StartApproach__To__CaptureApproach_CaptureApproachFailed_2
		(idCaptureApproach_CaptureApproach_2) 
	= CaptureApproach_StartApproach_ex(idCaptureApproach_CaptureApproach_1, false);
		

		(idCaptureApproach_CaptureApproach_3, CaptureApproachFailed_2) 
	= CaptureApproach_CaptureApproachFailed_en(idCaptureApproach_CaptureApproach_2, CaptureApproachFailed_1, false);
		

	(idCaptureApproach_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer) 
	=  (idCaptureApproach_CaptureApproach_3, CaptureApproachFailed_2, CaptureApproach_timer_1);

	--add unused variables
	(CaptureApproachComplete, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	= (CaptureApproachComplete_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1);
	

	tel

	until true restart POINTCaptureApproach_CaptureApproach



	state CAPTUREAPPROACH_CHECKORBITALSTATE__TO__CAPTUREAPPROACH_ORIENTEDFORDOCKINGAPPROACH_1:

	 var 	idCaptureApproach_CaptureApproach_2, idCaptureApproach_CaptureApproach_3:int;
	let

		-- transition trace :
	--CaptureApproach_CheckOrbitalState__To__CaptureApproach_OrientedForDockingApproach_1
		(idCaptureApproach_CaptureApproach_2) 
	= CaptureApproach_CheckOrbitalState_ex(idCaptureApproach_CaptureApproach_1, false);
		

		(idCaptureApproach_CaptureApproach_3) 
	= CaptureApproach_OrientedForDockingApproach_en(idCaptureApproach_CaptureApproach_2, false);
		

	(idCaptureApproach_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer) 
	=  (idCaptureApproach_CaptureApproach_3, CaptureApproachFailed_1, CaptureApproach_timer_1);

	--add unused variables
	(CaptureApproachComplete, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	= (CaptureApproachComplete_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1);
	

	tel

	until true restart POINTCaptureApproach_CaptureApproach



	state CAPTUREAPPROACH_CHECKORBITALSTATE__TO__CAPTUREAPPROACH_COMPUTETHRUST_2:

	 var 	idCaptureApproach_CaptureApproach_2, idCaptureApproach_CaptureApproach_3:int;
	let

		-- transition trace :
	--CaptureApproach_CheckOrbitalState__To__CaptureApproach_ComputeThrust_2
		(idCaptureApproach_CaptureApproach_2) 
	= CaptureApproach_CheckOrbitalState_ex(idCaptureApproach_CaptureApproach_1, false);
		

		(idCaptureApproach_CaptureApproach_3) 
	= CaptureApproach_ComputeThrust_en(idCaptureApproach_CaptureApproach_2, false);
		

	(idCaptureApproach_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer) 
	=  (idCaptureApproach_CaptureApproach_3, CaptureApproachFailed_1, CaptureApproach_timer_1);

	--add unused variables
	(CaptureApproachComplete, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	= (CaptureApproachComplete_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1);
	

	tel

	until true restart POINTCaptureApproach_CaptureApproach



	state CAPTUREAPPROACH_CHECKORBITALSTATE__TO__CAPTUREAPPROACH_CAPTUREAPPROACHFAILED_3:

	 var 	idCaptureApproach_CaptureApproach_2, idCaptureApproach_CaptureApproach_3:int;
	CaptureApproachFailed_2:bool;
	let

		-- transition trace :
	--CaptureApproach_CheckOrbitalState__To__CaptureApproach_CaptureApproachFailed_3
		(idCaptureApproach_CaptureApproach_2) 
	= CaptureApproach_CheckOrbitalState_ex(idCaptureApproach_CaptureApproach_1, false);
		

		(idCaptureApproach_CaptureApproach_3, CaptureApproachFailed_2) 
	= CaptureApproach_CaptureApproachFailed_en(idCaptureApproach_CaptureApproach_2, CaptureApproachFailed_1, false);
		

	(idCaptureApproach_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer) 
	=  (idCaptureApproach_CaptureApproach_3, CaptureApproachFailed_2, CaptureApproach_timer_1);

	--add unused variables
	(CaptureApproachComplete, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	= (CaptureApproachComplete_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1);
	

	tel

	until true restart POINTCaptureApproach_CaptureApproach



	state CAPTUREAPPROACH_COMPUTETHRUST__TO__CAPTUREAPPROACH_CHECKORBITALSTATE_1:

	 var 	idCaptureApproach_CaptureApproach_2, idCaptureApproach_CaptureApproach_3:int;
	let

		-- transition trace :
	--CaptureApproach_ComputeThrust__To__CaptureApproach_CheckOrbitalState_1
		(idCaptureApproach_CaptureApproach_2) 
	= CaptureApproach_ComputeThrust_ex(idCaptureApproach_CaptureApproach_1, false);
		

		(idCaptureApproach_CaptureApproach_3) 
	= CaptureApproach_CheckOrbitalState_en(idCaptureApproach_CaptureApproach_2, false);
		

	(idCaptureApproach_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer) 
	=  (idCaptureApproach_CaptureApproach_3, CaptureApproachFailed_1, CaptureApproach_timer_1);

	--add unused variables
	(CaptureApproachComplete, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	= (CaptureApproachComplete_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1);
	

	tel

	until true restart POINTCaptureApproach_CaptureApproach



	state CAPTUREAPPROACH_COMPUTETHRUST__TO__CAPTUREAPPROACH_CAPTUREAPPROACHFAILED_2:

	 var 	idCaptureApproach_CaptureApproach_2, idCaptureApproach_CaptureApproach_3:int;
	CaptureApproachFailed_2:bool;
	let

		-- transition trace :
	--CaptureApproach_ComputeThrust__To__CaptureApproach_CaptureApproachFailed_2
		(idCaptureApproach_CaptureApproach_2) 
	= CaptureApproach_ComputeThrust_ex(idCaptureApproach_CaptureApproach_1, false);
		

		(idCaptureApproach_CaptureApproach_3, CaptureApproachFailed_2) 
	= CaptureApproach_CaptureApproachFailed_en(idCaptureApproach_CaptureApproach_2, CaptureApproachFailed_1, false);
		

	(idCaptureApproach_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer) 
	=  (idCaptureApproach_CaptureApproach_3, CaptureApproachFailed_2, CaptureApproach_timer_1);

	--add unused variables
	(CaptureApproachComplete, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	= (CaptureApproachComplete_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1);
	

	tel

	until true restart POINTCaptureApproach_CaptureApproach



	state CAPTUREAPPROACH_ORIENTEDFORDOCKINGAPPROACH__TO__MISSIONPHASESTATES_DOCKINGAPPROACH_1:

	 var 	idCaptureApproach_CaptureApproach_2:int;
	CaptureApproachComplete_2:bool;
	idCaptureApproach_OrbitalState_Active_2:int;
	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	idMissionPhaseStates_CaptureApproach_2:int;
	idOrbitalState_Active_GPS_2:int;
	idOrbitalState_Active_InertialNavigation_2:int;
	idOrbitalState_Active_OrbitalState_Complex_2:int;
	idOrbitalState_Active_StarPlanetTracker_2:int;
	idOrbitalState_Complex_OrbitalState_2:int;
	idOrbitalState_Complex_OrbitalState2_2:int;
	DockingApproach_2:bool;
	DockingApproachComplete_2:bool;
	DockingApproach_timer_2:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_targetState_2:int;
	idDockingApproach_DockingApproach_2:int;
	idDockingApproach_dockingSensor_2:int;
	idMissionPhaseStates_DockingApproach_2:int;
	let

		-- transition trace :
	--CaptureApproach_OrientedForDockingApproach__To__MissionPhaseStates_DockingApproach_1
		(idOrbitalState_Active_InertialNavigation_2, idCaptureApproach_OrbitalState_Active_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, idMissionPhaseStates_CaptureApproach_2, CaptureApproachComplete_2, idCaptureApproach_CaptureApproach_2, idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_CaptureApproach_ex(idOrbitalState_Active_InertialNavigation_1, idCaptureApproach_OrbitalState_Active_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, idMissionPhaseStates_CaptureApproach_1, CaptureApproachComplete_1, idCaptureApproach_CaptureApproach_1, idChart_MissionPhaseStates_1, false);
		

		(idMissionPhaseStates_DockingApproach_2, idChart_MissionPhaseStates_3, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_2, idDockingApproach_DockingApproach_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idDockingApproach_dockingSensor_2) 
	= MissionPhaseStates_DockingApproach_en(idMissionPhaseStates_DockingApproach_1, idChart_MissionPhaseStates_2, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, idDockingApproach_DockingApproach_1, GOOD, NONE, POOR, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_dockingSensor_1, false);
		

	(idCaptureApproach_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer, CaptureApproachComplete, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach) 
	=  (idCaptureApproach_CaptureApproach_2, CaptureApproachFailed_1, CaptureApproach_timer_1, CaptureApproachComplete_2, idCaptureApproach_OrbitalState_Active_2, idChart_MissionPhaseStates_3, idMissionPhaseStates_CaptureApproach_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idDockingApproach_DockingApproach_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2);


	tel

	until true restart POINTCaptureApproach_CaptureApproach



	state CAPTUREAPPROACH_CAPTUREAPPROACHFAILED__TO__MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER_1:

	 var 	idCaptureApproach_CaptureApproach_2:int;
	CaptureApproachComplete_2:bool;
	idCaptureApproach_OrbitalState_Active_2:int;
	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	idMissionPhaseStates_CaptureApproach_2:int;
	idOrbitalState_Active_GPS_2:int;
	idOrbitalState_Active_InertialNavigation_2:int;
	idOrbitalState_Active_OrbitalState_Complex_2:int;
	idOrbitalState_Active_StarPlanetTracker_2:int;
	idOrbitalState_Complex_OrbitalState_2:int;
	idOrbitalState_Complex_OrbitalState2_2:int;
	let

		-- transition trace :
	--CaptureApproach_CaptureApproachFailed__To__MissionPhaseStates_CollisionAvoidanceManuever_1
		(idOrbitalState_Active_InertialNavigation_2, idCaptureApproach_OrbitalState_Active_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, idMissionPhaseStates_CaptureApproach_2, CaptureApproachComplete_2, idCaptureApproach_CaptureApproach_2, idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_CaptureApproach_ex(idOrbitalState_Active_InertialNavigation_1, idCaptureApproach_OrbitalState_Active_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, idMissionPhaseStates_CaptureApproach_1, CaptureApproachComplete_1, idCaptureApproach_CaptureApproach_1, idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_CollisionAvoidanceManuever_en(idChart_MissionPhaseStates_2, false);
		

	(idCaptureApproach_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer, CaptureApproachComplete, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach) 
	=  (idCaptureApproach_CaptureApproach_2, CaptureApproachFailed_1, CaptureApproach_timer_1, CaptureApproachComplete_2, idCaptureApproach_OrbitalState_Active_2, idChart_MissionPhaseStates_3, idMissionPhaseStates_CaptureApproach_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1);


	tel

	until true restart POINTCaptureApproach_CaptureApproach



	state CAPTUREAPPROACH_STARTAPPROACH_IDL:

	 	let

		

	(idCaptureApproach_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer, CaptureApproachComplete, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach) 
	= (idCaptureApproach_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, CaptureApproachComplete_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1);
	

	tel

	until true restart POINTCaptureApproach_CaptureApproach



	state CAPTUREAPPROACH_CHECKORBITALSTATE_IDL:

	 	let

		

	(idCaptureApproach_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer, CaptureApproachComplete, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach) 
	= (idCaptureApproach_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, CaptureApproachComplete_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1);
	

	tel

	until true restart POINTCaptureApproach_CaptureApproach



	state CAPTUREAPPROACH_COMPUTETHRUST_IDL:

	 	let

		

	(idCaptureApproach_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer, CaptureApproachComplete, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach) 
	= (idCaptureApproach_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, CaptureApproachComplete_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1);
	

	tel

	until true restart POINTCaptureApproach_CaptureApproach



	state CAPTUREAPPROACH_ORIENTEDFORDOCKINGAPPROACH_IDL:

	 	let

		

	(idCaptureApproach_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer, CaptureApproachComplete, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach) 
	= (idCaptureApproach_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, CaptureApproachComplete_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1);
	

	tel

	until true restart POINTCaptureApproach_CaptureApproach



	state CAPTUREAPPROACH_CAPTUREAPPROACHFAILED_IDL:

	 	let

		

	(idCaptureApproach_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer, CaptureApproachComplete, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach) 
	= (idCaptureApproach_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, CaptureApproachComplete_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1);
	

	tel

	until true restart POINTCaptureApproach_CaptureApproach



tel


--***************************************************State :MissionPhaseStates_CaptureApproach Automaton***************************************************

node MissionPhaseStates_CaptureApproach_node(idMissionPhaseStates_CaptureApproach_1:int;
	CaptureApproachFailed_1:bool;
	CaptureApproach_timer_1:int;
	idCaptureApproach_CaptureApproach_1:int;
	GOOD:int;
	GPS_AbsolutePosition_1:int;
	GPS_AbsoluteTime_1:int;
	GPS_AbsoluteVelocity_1:int;
	GPS_timer_1:int;
	InertialNavigation_AbsoluteAttitude_1:int;
	InertialNavigation_AbsolutePosition_1:int;
	InertialNavigation_AbsoluteVelocity_1:int;
	InertialNavigation_timer_1:int;
	NONE:int;
	OrbitalState_Attitude_1:int;
	OrbitalState_Position_1:int;
	OrbitalState_Time_1:int;
	OrbitalState_Velocity_1:int;
	POOR:int;
	StarPlanetTracker_AbsoluteAttitude_1:int;
	StarPlanetTracker_AbsolutePosition_1:int;
	StarPlanetTracker_AbsoluteTime_1:int;
	StarPlanetTracker_AbsoluteVelocity_1:int;
	StarPlanetTracker_timer_1:int;
	idCaptureApproach_OrbitalState_Active_1:int;
	idOrbitalState_Active_GPS_1:int;
	idOrbitalState_Active_InertialNavigation_1:int;
	idOrbitalState_Active_OrbitalState_Complex_1:int;
	idOrbitalState_Active_StarPlanetTracker_1:int;
	idOrbitalState_Complex_OrbitalState_1:int;
	idOrbitalState_Complex_OrbitalState2_1:int;
	CaptureApproach_timer_upper_limit:int;
	CaptureApproachComplete_1:bool;
	DockingApproach_1:bool;
	DockingApproachComplete_1:bool;
	DockingApproach_timer_1:int;
	EXIST:int;
	dockingSensor_RelativeAttitude_1:int;
	dockingSensor_RelativePosition_1:int;
	dockingSensor_RelativeVelocity_1:int;
	dockingSensor_targetState_1:int;
	fuel_status_1:int;
	idChart_MissionPhaseStates_1:int;
	idDockingApproach_DockingApproach_1:int;
	idDockingApproach_dockingSensor_1:int;
	idMissionPhaseStates_DockingApproach_1:int;
	thrust_status_1:int;
	AVAILABLE:bool;
	BRIGHT:bool;
	GPS_receiverAvailability_status:bool;
	GPS_satelliteVisibility_status:int;
	GPS_timer_upper_limit:int;
	GroundTrack_OrbitalPosition:int;
	GroundTrack_OrbitalVelocity:int;
	GroundTrack_Time:int;
	InertialNavigation_time:bool;
	InertialNavigation_timer_upper_limit:int;
	RealTimeClock_time:int;
	StarPlanetTracker_planetVisibility:int;
	StarPlanetTracker_starVisibility:int;
	StarPlanetTracker_timer_upper_limit:int;
	VALID_1:bool;
	callibrate:bool;
	opticsAvailability_status:bool;
	sunlight_status:bool)

returns (idMissionPhaseStates_CaptureApproach:int;
	CaptureApproachFailed:bool;
	CaptureApproach_timer:int;
	idCaptureApproach_CaptureApproach:int;
	GPS_AbsolutePosition:int;
	GPS_AbsoluteTime:int;
	GPS_AbsoluteVelocity:int;
	GPS_timer:int;
	InertialNavigation_AbsoluteAttitude:int;
	InertialNavigation_AbsolutePosition:int;
	InertialNavigation_AbsoluteVelocity:int;
	InertialNavigation_timer:int;
	OrbitalState_Attitude:int;
	OrbitalState_Position:int;
	OrbitalState_Time:int;
	OrbitalState_Velocity:int;
	StarPlanetTracker_AbsoluteAttitude:int;
	StarPlanetTracker_AbsolutePosition:int;
	StarPlanetTracker_AbsoluteTime:int;
	StarPlanetTracker_AbsoluteVelocity:int;
	StarPlanetTracker_timer:int;
	idCaptureApproach_OrbitalState_Active:int;
	idOrbitalState_Active_GPS:int;
	idOrbitalState_Active_InertialNavigation:int;
	idOrbitalState_Active_OrbitalState_Complex:int;
	idOrbitalState_Active_StarPlanetTracker:int;
	idOrbitalState_Complex_OrbitalState:int;
	idOrbitalState_Complex_OrbitalState2:int;
	CaptureApproachComplete:bool;
	DockingApproach:bool;
	DockingApproachComplete:bool;
	DockingApproach_timer:int;
	dockingSensor_RelativeAttitude:int;
	dockingSensor_RelativePosition:int;
	dockingSensor_RelativeVelocity:int;
	dockingSensor_targetState:int;
	idChart_MissionPhaseStates:int;
	idDockingApproach_DockingApproach:int;
	idDockingApproach_dockingSensor:int;
	idMissionPhaseStates_DockingApproach:int);


let

	 automaton missionphasestates_captureapproach

	state POINTMissionPhaseStates_CaptureApproach:
	unless (idMissionPhaseStates_CaptureApproach_1=0) restart MISSIONPHASESTATES_CAPTUREAPPROACH_PARALLEL_ENTRY
	unless true  restart MISSIONPHASESTATES_CAPTUREAPPROACH_PARALLEL_IDL

	let

		(idMissionPhaseStates_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer, idCaptureApproach_CaptureApproach, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_OrbitalState_Active, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, CaptureApproachComplete, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach) 
	= (idMissionPhaseStates_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, idCaptureApproach_CaptureApproach_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_OrbitalState_Active_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, CaptureApproachComplete_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idChart_MissionPhaseStates_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1);
	

	tel



	state MISSIONPHASESTATES_CAPTUREAPPROACH_PARALLEL_ENTRY:

	 var 	idMissionPhaseStates_CaptureApproach_2, idMissionPhaseStates_CaptureApproach_3:int;
	CaptureApproachFailed_2:bool;
	CaptureApproach_timer_2:int;
	idCaptureApproach_CaptureApproach_2:int;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteTime_2:int;
	GPS_AbsoluteVelocity_2:int;
	GPS_timer_2:int;
	InertialNavigation_AbsoluteAttitude_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	InertialNavigation_timer_2:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Time_2:int;
	OrbitalState_Velocity_2:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	StarPlanetTracker_timer_2:int;
	idCaptureApproach_OrbitalState_Active_2:int;
	idOrbitalState_Active_GPS_2:int;
	idOrbitalState_Active_InertialNavigation_2:int;
	idOrbitalState_Active_OrbitalState_Complex_2:int;
	idOrbitalState_Active_StarPlanetTracker_2:int;
	idOrbitalState_Complex_OrbitalState_2:int;
	idOrbitalState_Complex_OrbitalState2_2:int;
	let

		
	(idCaptureApproach_CaptureApproach_2, idMissionPhaseStates_CaptureApproach_2, CaptureApproachFailed_2, CaptureApproach_timer_2) 
	= CaptureApproach_CaptureApproach_en(idCaptureApproach_CaptureApproach_1, idMissionPhaseStates_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, false);

	(idCaptureApproach_OrbitalState_Active_2, idMissionPhaseStates_CaptureApproach_3, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, idOrbitalState_Active_GPS_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idOrbitalState_Active_StarPlanetTracker_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, idOrbitalState_Active_InertialNavigation_2) 
	= CaptureApproach_OrbitalState_Active_en(idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_2, GOOD, NONE, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, POOR, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, idOrbitalState_Active_GPS_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idOrbitalState_Active_StarPlanetTracker_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, idOrbitalState_Active_InertialNavigation_1, false);


	(idMissionPhaseStates_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer, idCaptureApproach_CaptureApproach, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_OrbitalState_Active, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	= (idMissionPhaseStates_CaptureApproach_3, CaptureApproachFailed_2, CaptureApproach_timer_2, idCaptureApproach_CaptureApproach_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idCaptureApproach_OrbitalState_Active_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2);
	
	--add unused variables
	(CaptureApproachComplete, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach) 
	= (CaptureApproachComplete_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idChart_MissionPhaseStates_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1);
	

	tel

	until true restart POINTMissionPhaseStates_CaptureApproach



	state MISSIONPHASESTATES_CAPTUREAPPROACH_PARALLEL_IDL:

	 var 	idMissionPhaseStates_CaptureApproach_2:int;
	CaptureApproachFailed_2:bool;
	CaptureApproach_timer_2, CaptureApproach_timer_3:int;
	idCaptureApproach_CaptureApproach_2:int;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteTime_2:int;
	GPS_AbsoluteVelocity_2:int;
	GPS_timer_2:int;
	InertialNavigation_AbsoluteAttitude_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	InertialNavigation_timer_2:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Time_2:int;
	OrbitalState_Velocity_2:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	StarPlanetTracker_timer_2:int;
	idCaptureApproach_OrbitalState_Active_2, idCaptureApproach_OrbitalState_Active_3:int;
	idOrbitalState_Active_GPS_2, idOrbitalState_Active_GPS_3:int;
	idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_InertialNavigation_3:int;
	idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_OrbitalState_Complex_3:int;
	idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Active_StarPlanetTracker_3:int;
	idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState_3:int;
	idOrbitalState_Complex_OrbitalState2_2, idOrbitalState_Complex_OrbitalState2_3:int;
	CaptureApproachComplete_2:bool;
	DockingApproach_2:bool;
	DockingApproachComplete_2:bool;
	DockingApproach_timer_2:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_targetState_2:int;
	idChart_MissionPhaseStates_2:int;
	idDockingApproach_DockingApproach_2:int;
	idDockingApproach_dockingSensor_2:int;
	idMissionPhaseStates_DockingApproach_2:int;
	let

		
	(CaptureApproach_timer_2) 
	= if not (idCaptureApproach_CaptureApproach_1= 0 ) then CaptureApproach_CaptureApproach_du(CaptureApproach_timer_1, CaptureApproach_timer_upper_limit)

		 else (CaptureApproach_timer_1);

		


		(idCaptureApproach_CaptureApproach_2, CaptureApproachFailed_2, CaptureApproach_timer_3, CaptureApproachComplete_2, idCaptureApproach_OrbitalState_Active_2, idChart_MissionPhaseStates_2, idMissionPhaseStates_CaptureApproach_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idDockingApproach_DockingApproach_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2)
	= if not (idCaptureApproach_CaptureApproach_1= 0 ) then CaptureApproach_CaptureApproach_node(idCaptureApproach_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_2, OrbitalState_Position_1, NONE, OrbitalState_Velocity_1, OrbitalState_Attitude_1, OrbitalState_Time_1, CaptureApproach_timer_upper_limit, GOOD, POOR, thrust_status_1, EXIST, fuel_status_1, CaptureApproachComplete_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1)

		 else (idCaptureApproach_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_2, CaptureApproachComplete_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1);

		

		

		(idCaptureApproach_OrbitalState_Active_3, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, idOrbitalState_Active_OrbitalState_Complex_3, idOrbitalState_Complex_OrbitalState_3, idOrbitalState_Complex_OrbitalState2_3, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, idOrbitalState_Active_GPS_3, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idOrbitalState_Active_StarPlanetTracker_3, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, idOrbitalState_Active_InertialNavigation_3)
	= if not (idCaptureApproach_OrbitalState_Active_2= 0 ) then CaptureApproach_OrbitalState_Active_node(idCaptureApproach_OrbitalState_Active_2, GOOD, NONE, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, POOR, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, idOrbitalState_Active_GPS_2, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idOrbitalState_Active_StarPlanetTracker_2, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, idOrbitalState_Active_InertialNavigation_2, GroundTrack_OrbitalPosition, GroundTrack_OrbitalVelocity, GroundTrack_Time, RealTimeClock_time, GPS_timer_upper_limit, AVAILABLE, BRIGHT, GPS_receiverAvailability_status, GPS_satelliteVisibility_status, sunlight_status, StarPlanetTracker_timer_upper_limit, StarPlanetTracker_planetVisibility, StarPlanetTracker_starVisibility, opticsAvailability_status, InertialNavigation_timer_upper_limit, InertialNavigation_time, VALID_1, callibrate)

		 else (idCaptureApproach_OrbitalState_Active_2, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, idOrbitalState_Active_GPS_2, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idOrbitalState_Active_StarPlanetTracker_2, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, idOrbitalState_Active_InertialNavigation_2);

		

		

	(idMissionPhaseStates_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer, idCaptureApproach_CaptureApproach, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_OrbitalState_Active, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, CaptureApproachComplete, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach) 
	= (idMissionPhaseStates_CaptureApproach_2, CaptureApproachFailed_2, CaptureApproach_timer_3, idCaptureApproach_CaptureApproach_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idCaptureApproach_OrbitalState_Active_3, idOrbitalState_Active_GPS_3, idOrbitalState_Active_InertialNavigation_3, idOrbitalState_Active_OrbitalState_Complex_3, idOrbitalState_Active_StarPlanetTracker_3, idOrbitalState_Complex_OrbitalState_3, idOrbitalState_Complex_OrbitalState2_3, CaptureApproachComplete_2, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idChart_MissionPhaseStates_2, idDockingApproach_DockingApproach_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2);
	

	tel

	until true restart POINTMissionPhaseStates_CaptureApproach



tel


--***************************************************State :DockingApproach_dockingSensor Automaton***************************************************

node DockingApproach_dockingSensor_node(idDockingApproach_dockingSensor_1:int;
	NONE:int;
	dockingSensor_RelativeAttitude_1:int;
	dockingSensor_RelativePosition_1:int;
	dockingSensor_RelativeVelocity_1:int;
	dockingSensor_targetState_1:int;
	dockVisibility_status:int;
	GOOD:int;
	opticsAvailability_status:bool;
	AVAILABLE:bool;
	sunlight_status:bool;
	BRIGHT:bool;
	dockingSensor_timer_1:int;
	POOR:int;
	dockingSensor_timer_upper_limit:int)

returns (idDockingApproach_dockingSensor:int;
	dockingSensor_RelativeAttitude:int;
	dockingSensor_RelativePosition:int;
	dockingSensor_RelativeVelocity:int;
	dockingSensor_targetState:int;
	dockingSensor_timer:int);


let

	 automaton dockingapproach_dockingsensor

	state POINTDockingApproach_dockingSensor:
	unless (idDockingApproach_dockingSensor_1=0) restart POINT__TO__DOCKINGSENSOR_ACQUIRING_1



	unless (idDockingApproach_dockingSensor_1=949) and ( (dockVisibility_status!=GOOD and opticsAvailability_status!=AVAILABLE) or sunlight_status=BRIGHT ) restart DOCKINGSENSOR_GOOD__TO__DOCKINGSENSOR_POOR_1



	unless (idDockingApproach_dockingSensor_1=949) and ( dockVisibility_status=GOOD and opticsAvailability_status=AVAILABLE and sunlight_status!=BRIGHT ) restart DOCKINGSENSOR_GOOD__TO__DOCKINGSENSOR_GOOD_2



	unless (idDockingApproach_dockingSensor_1=968) and ( ( dockingSensor_timer_1 =dockingSensor_timer_upper_limit) and (dockVisibility_status=NONE or opticsAvailability_status!=AVAILABLE) ) restart DOCKINGSENSOR_POOR__TO__DOCKINGSENSOR_ACQUIRING_1



	unless (idDockingApproach_dockingSensor_1=968) and ( ( dockingSensor_timer_1 <dockingSensor_timer_upper_limit) and dockVisibility_status=GOOD and opticsAvailability_status=AVAILABLE and sunlight_status!=BRIGHT ) restart DOCKINGSENSOR_POOR__TO__DOCKINGSENSOR_GOOD_2



	unless (idDockingApproach_dockingSensor_1=968) and ( ( dockingSensor_timer_1 <dockingSensor_timer_upper_limit) and (dockVisibility_status=NONE or opticsAvailability_status!=AVAILABLE) or (opticsAvailability_status=AVAILABLE and (dockVisibility_status=POOR or sunlight_status=BRIGHT)) ) restart DOCKINGSENSOR_POOR__TO__DOCKINGSENSOR_POOR_3



	unless (idDockingApproach_dockingSensor_1=970) and ( dockVisibility_status!=NONE and opticsAvailability_status=AVAILABLE ) restart DOCKINGSENSOR_ACQUIRING__TO__DOCKINGSENSOR_POOR_1



	unless (idDockingApproach_dockingSensor_1=970) and ( dockVisibility_status=NONE or opticsAvailability_status!=AVAILABLE ) restart DOCKINGSENSOR_ACQUIRING__TO__DOCKINGSENSOR_ACQUIRING_2



	unless (idDockingApproach_dockingSensor_1=949) restart DOCKINGSENSOR_GOOD_IDL

	unless (idDockingApproach_dockingSensor_1=968) restart DOCKINGSENSOR_POOR_IDL

	unless (idDockingApproach_dockingSensor_1=970) restart DOCKINGSENSOR_ACQUIRING_IDL

	let

		(idDockingApproach_dockingSensor, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer) 
	= (idDockingApproach_dockingSensor_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1);
	

	tel



	state POINT__TO__DOCKINGSENSOR_ACQUIRING_1:

	 var 	idDockingApproach_dockingSensor_2:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_targetState_2:int;
	let

		-- transition trace :
	--POINT__To__dockingSensor_Acquiring_1
		(idDockingApproach_dockingSensor_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_RelativeAttitude_2, dockingSensor_targetState_2) 
	= dockingSensor_Acquiring_en(idDockingApproach_dockingSensor_1, NONE, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_RelativeAttitude_1, dockingSensor_targetState_1, false);
		

	(idDockingApproach_dockingSensor, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState) 
	=  (idDockingApproach_dockingSensor_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2);

	--add unused variables
	(dockingSensor_timer) 
	= (dockingSensor_timer_1);
	

	tel

	until true restart POINTDockingApproach_dockingSensor



	state DOCKINGSENSOR_GOOD__TO__DOCKINGSENSOR_POOR_1:

	 var 	idDockingApproach_dockingSensor_2, idDockingApproach_dockingSensor_3:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_targetState_2:int;
	dockingSensor_timer_2:int;
	let

		-- transition trace :
	--dockingSensor_Good__To__dockingSensor_Poor_1
		(dockingSensor_timer_2, idDockingApproach_dockingSensor_2) 
	= dockingSensor_Good_ex(dockingSensor_timer_1, idDockingApproach_dockingSensor_1, false);
		

		(idDockingApproach_dockingSensor_3, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_RelativeAttitude_2, dockingSensor_targetState_2) 
	= dockingSensor_Poor_en(idDockingApproach_dockingSensor_2, POOR, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_RelativeAttitude_1, dockingSensor_targetState_1, false);
		

	(idDockingApproach_dockingSensor, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer) 
	=  (idDockingApproach_dockingSensor_3, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, dockingSensor_timer_2);


	tel

	until true restart POINTDockingApproach_dockingSensor



	state DOCKINGSENSOR_GOOD__TO__DOCKINGSENSOR_GOOD_2:

	 var 	idDockingApproach_dockingSensor_2, idDockingApproach_dockingSensor_3:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_targetState_2:int;
	dockingSensor_timer_2:int;
	let

		-- transition trace :
	--dockingSensor_Good__To__dockingSensor_Good_2
		(dockingSensor_timer_2, idDockingApproach_dockingSensor_2) 
	= dockingSensor_Good_ex(dockingSensor_timer_1, idDockingApproach_dockingSensor_1, false);
		

		(idDockingApproach_dockingSensor_3, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_RelativeAttitude_2, dockingSensor_targetState_2) 
	= dockingSensor_Good_en(idDockingApproach_dockingSensor_2, GOOD, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_RelativeAttitude_1, dockingSensor_targetState_1, false);
		

	(idDockingApproach_dockingSensor, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer) 
	=  (idDockingApproach_dockingSensor_3, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, dockingSensor_timer_2);


	tel

	until true restart POINTDockingApproach_dockingSensor



	state DOCKINGSENSOR_POOR__TO__DOCKINGSENSOR_ACQUIRING_1:

	 var 	idDockingApproach_dockingSensor_2, idDockingApproach_dockingSensor_3:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_targetState_2:int;
	let

		-- transition trace :
	--dockingSensor_Poor__To__dockingSensor_Acquiring_1
		(idDockingApproach_dockingSensor_2) 
	= dockingSensor_Poor_ex(idDockingApproach_dockingSensor_1, false);
		

		(idDockingApproach_dockingSensor_3, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_RelativeAttitude_2, dockingSensor_targetState_2) 
	= dockingSensor_Acquiring_en(idDockingApproach_dockingSensor_2, NONE, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_RelativeAttitude_1, dockingSensor_targetState_1, false);
		

	(idDockingApproach_dockingSensor, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer) 
	=  (idDockingApproach_dockingSensor_3, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, dockingSensor_timer_1);


	tel

	until true restart POINTDockingApproach_dockingSensor



	state DOCKINGSENSOR_POOR__TO__DOCKINGSENSOR_GOOD_2:

	 var 	idDockingApproach_dockingSensor_2, idDockingApproach_dockingSensor_3:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_targetState_2:int;
	let

		-- transition trace :
	--dockingSensor_Poor__To__dockingSensor_Good_2
		(idDockingApproach_dockingSensor_2) 
	= dockingSensor_Poor_ex(idDockingApproach_dockingSensor_1, false);
		

		(idDockingApproach_dockingSensor_3, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_RelativeAttitude_2, dockingSensor_targetState_2) 
	= dockingSensor_Good_en(idDockingApproach_dockingSensor_2, GOOD, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_RelativeAttitude_1, dockingSensor_targetState_1, false);
		

	(idDockingApproach_dockingSensor, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer) 
	=  (idDockingApproach_dockingSensor_3, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, dockingSensor_timer_1);


	tel

	until true restart POINTDockingApproach_dockingSensor



	state DOCKINGSENSOR_POOR__TO__DOCKINGSENSOR_POOR_3:

	 var 	idDockingApproach_dockingSensor_2, idDockingApproach_dockingSensor_3:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_targetState_2:int;
	let

		-- transition trace :
	--dockingSensor_Poor__To__dockingSensor_Poor_3
		(idDockingApproach_dockingSensor_2) 
	= dockingSensor_Poor_ex(idDockingApproach_dockingSensor_1, false);
		

		(idDockingApproach_dockingSensor_3, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_RelativeAttitude_2, dockingSensor_targetState_2) 
	= dockingSensor_Poor_en(idDockingApproach_dockingSensor_2, POOR, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_RelativeAttitude_1, dockingSensor_targetState_1, false);
		

	(idDockingApproach_dockingSensor, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer) 
	=  (idDockingApproach_dockingSensor_3, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, dockingSensor_timer_1);


	tel

	until true restart POINTDockingApproach_dockingSensor



	state DOCKINGSENSOR_ACQUIRING__TO__DOCKINGSENSOR_POOR_1:

	 var 	idDockingApproach_dockingSensor_2, idDockingApproach_dockingSensor_3:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_targetState_2:int;
	dockingSensor_timer_2:int;
	let

		-- transition trace :
	--dockingSensor_Acquiring__To__dockingSensor_Poor_1
		(dockingSensor_timer_2, idDockingApproach_dockingSensor_2) 
	= dockingSensor_Acquiring_ex(dockingSensor_timer_1, idDockingApproach_dockingSensor_1, false);
		

		(idDockingApproach_dockingSensor_3, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_RelativeAttitude_2, dockingSensor_targetState_2) 
	= dockingSensor_Poor_en(idDockingApproach_dockingSensor_2, POOR, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_RelativeAttitude_1, dockingSensor_targetState_1, false);
		

	(idDockingApproach_dockingSensor, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer) 
	=  (idDockingApproach_dockingSensor_3, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, dockingSensor_timer_2);


	tel

	until true restart POINTDockingApproach_dockingSensor



	state DOCKINGSENSOR_ACQUIRING__TO__DOCKINGSENSOR_ACQUIRING_2:

	 var 	idDockingApproach_dockingSensor_2, idDockingApproach_dockingSensor_3:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_targetState_2:int;
	dockingSensor_timer_2:int;
	let

		-- transition trace :
	--dockingSensor_Acquiring__To__dockingSensor_Acquiring_2
		(dockingSensor_timer_2, idDockingApproach_dockingSensor_2) 
	= dockingSensor_Acquiring_ex(dockingSensor_timer_1, idDockingApproach_dockingSensor_1, false);
		

		(idDockingApproach_dockingSensor_3, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_RelativeAttitude_2, dockingSensor_targetState_2) 
	= dockingSensor_Acquiring_en(idDockingApproach_dockingSensor_2, NONE, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_RelativeAttitude_1, dockingSensor_targetState_1, false);
		

	(idDockingApproach_dockingSensor, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer) 
	=  (idDockingApproach_dockingSensor_3, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, dockingSensor_timer_2);


	tel

	until true restart POINTDockingApproach_dockingSensor



	state DOCKINGSENSOR_GOOD_IDL:

	 	let

		

	(idDockingApproach_dockingSensor, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer) 
	= (idDockingApproach_dockingSensor_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1);
	

	tel

	until true restart POINTDockingApproach_dockingSensor



	state DOCKINGSENSOR_POOR_IDL:

	 	let

		

	(idDockingApproach_dockingSensor, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer) 
	= (idDockingApproach_dockingSensor_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1);
	

	tel

	until true restart POINTDockingApproach_dockingSensor



	state DOCKINGSENSOR_ACQUIRING_IDL:

	 	let

		

	(idDockingApproach_dockingSensor, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer) 
	= (idDockingApproach_dockingSensor_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1);
	

	tel

	until true restart POINTDockingApproach_dockingSensor



tel


--***************************************************State :DockingApproach_DockingApproach Automaton***************************************************

node DockingApproach_DockingApproach_node(idDockingApproach_DockingApproach_1:int;
	DockingApproach_timer_1:int;
	dockingSensor_RelativePosition_1:int;
	NONE:int;
	dockingSensor_RelativeVelocity_1:int;
	dockingSensor_RelativeAttitude_1:int;
	DockingApproach_timer_upper_limit:int;
	GOOD:int;
	dockingSensor_targetState_1:int;
	POOR:int;
	DockingApproach_1:bool;
	DockingApproachComplete_1:bool;
	dockingSensor_timer_1:int;
	idChart_MissionPhaseStates_1:int;
	idDockingApproach_dockingSensor_1:int;
	idMissionPhaseStates_DockingApproach_1:int;
	AttemptingToDock_1:bool;
	CLOSEDBUTUNMATED:int;
	INDETERMINATE:int;
	LatchCaptureComplete_1:bool;
	LatchCapture_timer_1:int;
	MATED:int;
	OPEN:int;
	idLatchCapture_LatchCaptureCheck_1:int;
	idLatchCapture_latch_1:int;
	idMissionPhaseStates_LatchCapture_1:int;
	latch_status_1:int;
	thrust_status_1:int;
	EXIST:int;
	fuel_status_1:int;
	idCaptureApproach_CaptureApproach_1:int;
	idMissionPhaseStates_CaptureApproach_1:int;
	CaptureApproachFailed_1:bool;
	CaptureApproach_timer_1:int;
	GPS_AbsolutePosition_1:int;
	GPS_AbsoluteTime_1:int;
	GPS_AbsoluteVelocity_1:int;
	GPS_timer_1:int;
	InertialNavigation_AbsoluteAttitude_1:int;
	InertialNavigation_AbsolutePosition_1:int;
	InertialNavigation_AbsoluteVelocity_1:int;
	InertialNavigation_timer_1:int;
	OrbitalState_Attitude_1:int;
	OrbitalState_Position_1:int;
	OrbitalState_Time_1:int;
	OrbitalState_Velocity_1:int;
	StarPlanetTracker_AbsoluteAttitude_1:int;
	StarPlanetTracker_AbsolutePosition_1:int;
	StarPlanetTracker_AbsoluteTime_1:int;
	StarPlanetTracker_AbsoluteVelocity_1:int;
	StarPlanetTracker_timer_1:int;
	idCaptureApproach_OrbitalState_Active_1:int;
	idOrbitalState_Active_GPS_1:int;
	idOrbitalState_Active_InertialNavigation_1:int;
	idOrbitalState_Active_OrbitalState_Complex_1:int;
	idOrbitalState_Active_StarPlanetTracker_1:int;
	idOrbitalState_Complex_OrbitalState_1:int;
	idOrbitalState_Complex_OrbitalState2_1:int)

returns (idDockingApproach_DockingApproach:int;
	DockingApproach_timer:int;
	DockingApproach:bool;
	DockingApproachComplete:bool;
	dockingSensor_timer:int;
	idChart_MissionPhaseStates:int;
	idDockingApproach_dockingSensor:int;
	idMissionPhaseStates_DockingApproach:int;
	AttemptingToDock:bool;
	LatchCaptureComplete:bool;
	LatchCapture_timer:int;
	idLatchCapture_LatchCaptureCheck:int;
	idLatchCapture_latch:int;
	idMissionPhaseStates_LatchCapture:int;
	latch_status:int;
	idCaptureApproach_CaptureApproach:int;
	idMissionPhaseStates_CaptureApproach:int;
	CaptureApproachFailed:bool;
	CaptureApproach_timer:int;
	GPS_AbsolutePosition:int;
	GPS_AbsoluteTime:int;
	GPS_AbsoluteVelocity:int;
	GPS_timer:int;
	InertialNavigation_AbsoluteAttitude:int;
	InertialNavigation_AbsolutePosition:int;
	InertialNavigation_AbsoluteVelocity:int;
	InertialNavigation_timer:int;
	OrbitalState_Attitude:int;
	OrbitalState_Position:int;
	OrbitalState_Time:int;
	OrbitalState_Velocity:int;
	StarPlanetTracker_AbsoluteAttitude:int;
	StarPlanetTracker_AbsolutePosition:int;
	StarPlanetTracker_AbsoluteTime:int;
	StarPlanetTracker_AbsoluteVelocity:int;
	StarPlanetTracker_timer:int;
	idCaptureApproach_OrbitalState_Active:int;
	idOrbitalState_Active_GPS:int;
	idOrbitalState_Active_InertialNavigation:int;
	idOrbitalState_Active_OrbitalState_Complex:int;
	idOrbitalState_Active_StarPlanetTracker:int;
	idOrbitalState_Complex_OrbitalState:int;
	idOrbitalState_Complex_OrbitalState2:int);


let

	 automaton dockingapproach_dockingapproach

	state POINTDockingApproach_DockingApproach:
	unless (idDockingApproach_DockingApproach_1=0) restart POINT__TO__DOCKINGAPPROACH_STARTAPPROACH_1



	unless (idDockingApproach_DockingApproach_1=969) and (  dockingSensor_RelativePosition_1 !=NONE and  dockingSensor_RelativeVelocity_1 !=NONE and  dockingSensor_RelativeAttitude_1 !=NONE and ( DockingApproach_timer_1 <DockingApproach_timer_upper_limit) ) restart DOCKINGAPPROACH_STARTAPPROACH__TO__DOCKINGAPPROACH_CHECKTARGETRELATIVESTATE_1



	unless (idDockingApproach_DockingApproach_1=969) and ( ( DockingApproach_timer_1 =DockingApproach_timer_upper_limit) ) restart DOCKINGAPPROACH_STARTAPPROACH__TO__DOCKINGAPPROACH_DOCKINGAPPROACHFAILED_2



	unless (idDockingApproach_DockingApproach_1=971) and (  dockingSensor_RelativePosition_1 =GOOD and  dockingSensor_RelativeVelocity_1 =GOOD and  dockingSensor_RelativeAttitude_1 =GOOD and  dockingSensor_targetState_1 =GOOD ) restart DOCKINGAPPROACH_CHECKTARGETRELATIVESTATE__TO__DOCKINGAPPROACH_READYTODOCK_1



	unless (idDockingApproach_DockingApproach_1=971) and (  dockingSensor_RelativePosition_1 =POOR and  dockingSensor_RelativeVelocity_1 =POOR and  dockingSensor_RelativeAttitude_1 =POOR and  dockingSensor_targetState_1 =POOR ) restart DOCKINGAPPROACH_CHECKTARGETRELATIVESTATE__TO__DOCKINGAPPROACH_COMPUTETHRUST_2



	unless (idDockingApproach_DockingApproach_1=971) and ( ( DockingApproach_timer_1 =DockingApproach_timer_upper_limit) ) restart DOCKINGAPPROACH_CHECKTARGETRELATIVESTATE__TO__DOCKINGAPPROACH_DOCKINGAPPROACHFAILED_3



	unless (idDockingApproach_DockingApproach_1=971) and (  dockingSensor_RelativePosition_1 =NONE or  dockingSensor_RelativeVelocity_1 =NONE or  dockingSensor_RelativeAttitude_1 =NONE ) restart DOCKINGAPPROACH_CHECKTARGETRELATIVESTATE__TO__DOCKINGAPPROACH_DOCKINGAPPROACHFAILED_4



	unless (idDockingApproach_DockingApproach_1=971) and (  dockingSensor_targetState_1 !=GOOD ) restart DOCKINGAPPROACH_CHECKTARGETRELATIVESTATE__TO__DOCKINGAPPROACH_DOCKINGAPPROACHFAILED_5



	unless (idDockingApproach_DockingApproach_1=972) restart DOCKINGAPPROACH_READYTODOCK__TO__MISSIONPHASESTATES_LATCHCAPTURE_1



	unless (idDockingApproach_DockingApproach_1=973) and (  thrust_status_1 =EXIST and  fuel_status_1 =GOOD ) restart DOCKINGAPPROACH_COMPUTETHRUST__TO__DOCKINGAPPROACH_CHECKTARGETRELATIVESTATE_1



	unless (idDockingApproach_DockingApproach_1=973) and ( not ( thrust_status_1 =EXIST and  fuel_status_1 =GOOD) or  DockingApproach_timer_1 =DockingApproach_timer_upper_limit ) restart DOCKINGAPPROACH_COMPUTETHRUST__TO__DOCKINGAPPROACH_DOCKINGAPPROACHFAILED_2



	unless (idDockingApproach_DockingApproach_1=974) restart DOCKINGAPPROACH_DOCKINGAPPROACHFAILED__TO__CAPTUREAPPROACH_CHECKORBITALSTATE_1



	unless (idDockingApproach_DockingApproach_1=969) restart DOCKINGAPPROACH_STARTAPPROACH_IDL

	unless (idDockingApproach_DockingApproach_1=971) restart DOCKINGAPPROACH_CHECKTARGETRELATIVESTATE_IDL

	unless (idDockingApproach_DockingApproach_1=972) restart DOCKINGAPPROACH_READYTODOCK_IDL

	unless (idDockingApproach_DockingApproach_1=973) restart DOCKINGAPPROACH_COMPUTETHRUST_IDL

	unless (idDockingApproach_DockingApproach_1=974) restart DOCKINGAPPROACH_DOCKINGAPPROACHFAILED_IDL

	let

		(idDockingApproach_DockingApproach, DockingApproach_timer, DockingApproach, DockingApproachComplete, dockingSensor_timer, idChart_MissionPhaseStates, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, idCaptureApproach_CaptureApproach, idMissionPhaseStates_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_OrbitalState_Active, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	= (idDockingApproach_DockingApproach_1, DockingApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idChart_MissionPhaseStates_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, idCaptureApproach_CaptureApproach_1, idMissionPhaseStates_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_OrbitalState_Active_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1);
	

	tel



	state POINT__TO__DOCKINGAPPROACH_STARTAPPROACH_1:

	 var 	idDockingApproach_DockingApproach_2:int;
	DockingApproach_timer_2:int;
	let

		-- transition trace :
	--POINT__To__DockingApproach_StartApproach_1
		(idDockingApproach_DockingApproach_2, DockingApproach_timer_2) 
	= DockingApproach_StartApproach_en(idDockingApproach_DockingApproach_1, DockingApproach_timer_1, false);
		

	(idDockingApproach_DockingApproach, DockingApproach_timer) 
	=  (idDockingApproach_DockingApproach_2, DockingApproach_timer_2);

	--add unused variables
	(AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status) 
	= (AttemptingToDock_1, CaptureApproachFailed_1, CaptureApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, LatchCaptureComplete_1, LatchCapture_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, dockingSensor_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, latch_status_1);
	

	tel

	until true restart POINTDockingApproach_DockingApproach



	state DOCKINGAPPROACH_STARTAPPROACH__TO__DOCKINGAPPROACH_CHECKTARGETRELATIVESTATE_1:

	 var 	idDockingApproach_DockingApproach_2, idDockingApproach_DockingApproach_3:int;
	let

		-- transition trace :
	--DockingApproach_StartApproach__To__DockingApproach_CheckTargetRelativeState_1
		(idDockingApproach_DockingApproach_2) 
	= DockingApproach_StartApproach_ex(idDockingApproach_DockingApproach_1, false);
		

		(idDockingApproach_DockingApproach_3) 
	= DockingApproach_CheckTargetRelativeState_en(idDockingApproach_DockingApproach_2, false);
		

	(idDockingApproach_DockingApproach, DockingApproach_timer) 
	=  (idDockingApproach_DockingApproach_3, DockingApproach_timer_1);

	--add unused variables
	(AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status) 
	= (AttemptingToDock_1, CaptureApproachFailed_1, CaptureApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, LatchCaptureComplete_1, LatchCapture_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, dockingSensor_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, latch_status_1);
	

	tel

	until true restart POINTDockingApproach_DockingApproach



	state DOCKINGAPPROACH_STARTAPPROACH__TO__DOCKINGAPPROACH_DOCKINGAPPROACHFAILED_2:

	 var 	idDockingApproach_DockingApproach_2, idDockingApproach_DockingApproach_3:int;
	let

		-- transition trace :
	--DockingApproach_StartApproach__To__DockingApproach_DockingApproachFailed_2
		(idDockingApproach_DockingApproach_2) 
	= DockingApproach_StartApproach_ex(idDockingApproach_DockingApproach_1, false);
		

		(idDockingApproach_DockingApproach_3) 
	= DockingApproach_DockingApproachFailed_en(idDockingApproach_DockingApproach_2, false);
		

	(idDockingApproach_DockingApproach, DockingApproach_timer) 
	=  (idDockingApproach_DockingApproach_3, DockingApproach_timer_1);

	--add unused variables
	(AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status) 
	= (AttemptingToDock_1, CaptureApproachFailed_1, CaptureApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, LatchCaptureComplete_1, LatchCapture_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, dockingSensor_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, latch_status_1);
	

	tel

	until true restart POINTDockingApproach_DockingApproach



	state DOCKINGAPPROACH_CHECKTARGETRELATIVESTATE__TO__DOCKINGAPPROACH_READYTODOCK_1:

	 var 	idDockingApproach_DockingApproach_2, idDockingApproach_DockingApproach_3:int;
	let

		-- transition trace :
	--DockingApproach_CheckTargetRelativeState__To__DockingApproach_ReadyToDock_1
		(idDockingApproach_DockingApproach_2) 
	= DockingApproach_CheckTargetRelativeState_ex(idDockingApproach_DockingApproach_1, false);
		

		(idDockingApproach_DockingApproach_3) 
	= DockingApproach_ReadyToDock_en(idDockingApproach_DockingApproach_2, false);
		

	(idDockingApproach_DockingApproach, DockingApproach_timer) 
	=  (idDockingApproach_DockingApproach_3, DockingApproach_timer_1);

	--add unused variables
	(AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status) 
	= (AttemptingToDock_1, CaptureApproachFailed_1, CaptureApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, LatchCaptureComplete_1, LatchCapture_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, dockingSensor_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, latch_status_1);
	

	tel

	until true restart POINTDockingApproach_DockingApproach



	state DOCKINGAPPROACH_CHECKTARGETRELATIVESTATE__TO__DOCKINGAPPROACH_COMPUTETHRUST_2:

	 var 	idDockingApproach_DockingApproach_2, idDockingApproach_DockingApproach_3:int;
	let

		-- transition trace :
	--DockingApproach_CheckTargetRelativeState__To__DockingApproach_ComputeThrust_2
		(idDockingApproach_DockingApproach_2) 
	= DockingApproach_CheckTargetRelativeState_ex(idDockingApproach_DockingApproach_1, false);
		

		(idDockingApproach_DockingApproach_3) 
	= DockingApproach_ComputeThrust_en(idDockingApproach_DockingApproach_2, false);
		

	(idDockingApproach_DockingApproach, DockingApproach_timer) 
	=  (idDockingApproach_DockingApproach_3, DockingApproach_timer_1);

	--add unused variables
	(AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status) 
	= (AttemptingToDock_1, CaptureApproachFailed_1, CaptureApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, LatchCaptureComplete_1, LatchCapture_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, dockingSensor_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, latch_status_1);
	

	tel

	until true restart POINTDockingApproach_DockingApproach



	state DOCKINGAPPROACH_CHECKTARGETRELATIVESTATE__TO__DOCKINGAPPROACH_DOCKINGAPPROACHFAILED_3:

	 var 	idDockingApproach_DockingApproach_2, idDockingApproach_DockingApproach_3:int;
	let

		-- transition trace :
	--DockingApproach_CheckTargetRelativeState__To__DockingApproach_DockingApproachFailed_3
		(idDockingApproach_DockingApproach_2) 
	= DockingApproach_CheckTargetRelativeState_ex(idDockingApproach_DockingApproach_1, false);
		

		(idDockingApproach_DockingApproach_3) 
	= DockingApproach_DockingApproachFailed_en(idDockingApproach_DockingApproach_2, false);
		

	(idDockingApproach_DockingApproach, DockingApproach_timer) 
	=  (idDockingApproach_DockingApproach_3, DockingApproach_timer_1);

	--add unused variables
	(AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status) 
	= (AttemptingToDock_1, CaptureApproachFailed_1, CaptureApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, LatchCaptureComplete_1, LatchCapture_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, dockingSensor_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, latch_status_1);
	

	tel

	until true restart POINTDockingApproach_DockingApproach



	state DOCKINGAPPROACH_CHECKTARGETRELATIVESTATE__TO__DOCKINGAPPROACH_DOCKINGAPPROACHFAILED_4:

	 var 	idDockingApproach_DockingApproach_2, idDockingApproach_DockingApproach_3:int;
	let

		-- transition trace :
	--DockingApproach_CheckTargetRelativeState__To__DockingApproach_DockingApproachFailed_4
		(idDockingApproach_DockingApproach_2) 
	= DockingApproach_CheckTargetRelativeState_ex(idDockingApproach_DockingApproach_1, false);
		

		(idDockingApproach_DockingApproach_3) 
	= DockingApproach_DockingApproachFailed_en(idDockingApproach_DockingApproach_2, false);
		

	(idDockingApproach_DockingApproach, DockingApproach_timer) 
	=  (idDockingApproach_DockingApproach_3, DockingApproach_timer_1);

	--add unused variables
	(AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status) 
	= (AttemptingToDock_1, CaptureApproachFailed_1, CaptureApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, LatchCaptureComplete_1, LatchCapture_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, dockingSensor_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, latch_status_1);
	

	tel

	until true restart POINTDockingApproach_DockingApproach



	state DOCKINGAPPROACH_CHECKTARGETRELATIVESTATE__TO__DOCKINGAPPROACH_DOCKINGAPPROACHFAILED_5:

	 var 	idDockingApproach_DockingApproach_2, idDockingApproach_DockingApproach_3:int;
	let

		-- transition trace :
	--DockingApproach_CheckTargetRelativeState__To__DockingApproach_DockingApproachFailed_5
		(idDockingApproach_DockingApproach_2) 
	= DockingApproach_CheckTargetRelativeState_ex(idDockingApproach_DockingApproach_1, false);
		

		(idDockingApproach_DockingApproach_3) 
	= DockingApproach_DockingApproachFailed_en(idDockingApproach_DockingApproach_2, false);
		

	(idDockingApproach_DockingApproach, DockingApproach_timer) 
	=  (idDockingApproach_DockingApproach_3, DockingApproach_timer_1);

	--add unused variables
	(AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status) 
	= (AttemptingToDock_1, CaptureApproachFailed_1, CaptureApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, LatchCaptureComplete_1, LatchCapture_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, dockingSensor_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, latch_status_1);
	

	tel

	until true restart POINTDockingApproach_DockingApproach



	state DOCKINGAPPROACH_READYTODOCK__TO__MISSIONPHASESTATES_LATCHCAPTURE_1:

	 var 	idDockingApproach_DockingApproach_2:int;
	DockingApproach_2:bool;
	DockingApproachComplete_2:bool;
	dockingSensor_timer_2:int;
	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	idDockingApproach_dockingSensor_2:int;
	idMissionPhaseStates_DockingApproach_2:int;
	AttemptingToDock_2:bool;
	LatchCaptureComplete_2:bool;
	LatchCapture_timer_2:int;
	idLatchCapture_LatchCaptureCheck_2:int;
	idLatchCapture_latch_2:int;
	idMissionPhaseStates_LatchCapture_2:int;
	latch_status_2:int;
	let

		-- transition trace :
	--DockingApproach_ReadyToDock__To__MissionPhaseStates_LatchCapture_1
		(dockingSensor_timer_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2, DockingApproachComplete_2, idDockingApproach_DockingApproach_2, DockingApproach_2, idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_DockingApproach_ex(dockingSensor_timer_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, DockingApproachComplete_1, idDockingApproach_DockingApproach_1, DockingApproach_1, idChart_MissionPhaseStates_1, false);
		

		(idMissionPhaseStates_LatchCapture_2, idChart_MissionPhaseStates_3, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, latch_status_2) 
	= MissionPhaseStates_LatchCapture_en(idMissionPhaseStates_LatchCapture_1, idChart_MissionPhaseStates_2, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, CLOSEDBUTUNMATED, INDETERMINATE, MATED, OPEN, idLatchCapture_latch_1, latch_status_1, false);
		

	(idDockingApproach_DockingApproach, DockingApproach_timer, DockingApproach, DockingApproachComplete, dockingSensor_timer, idChart_MissionPhaseStates, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	=  (idDockingApproach_DockingApproach_2, DockingApproach_timer_1, DockingApproach_2, DockingApproachComplete_2, dockingSensor_timer_2, idChart_MissionPhaseStates_3, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, latch_status_2);

	--add unused variables
	(CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	= (CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1);
	

	tel

	until true restart POINTDockingApproach_DockingApproach



	state DOCKINGAPPROACH_COMPUTETHRUST__TO__DOCKINGAPPROACH_CHECKTARGETRELATIVESTATE_1:

	 var 	idDockingApproach_DockingApproach_2, idDockingApproach_DockingApproach_3:int;
	let

		-- transition trace :
	--DockingApproach_ComputeThrust__To__DockingApproach_CheckTargetRelativeState_1
		(idDockingApproach_DockingApproach_2) 
	= DockingApproach_ComputeThrust_ex(idDockingApproach_DockingApproach_1, false);
		

		(idDockingApproach_DockingApproach_3) 
	= DockingApproach_CheckTargetRelativeState_en(idDockingApproach_DockingApproach_2, false);
		

	(idDockingApproach_DockingApproach, DockingApproach_timer, DockingApproach, DockingApproachComplete, dockingSensor_timer, idChart_MissionPhaseStates, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	=  (idDockingApproach_DockingApproach_3, DockingApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idChart_MissionPhaseStates_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);

	--add unused variables
	(CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	= (CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1);
	

	tel

	until true restart POINTDockingApproach_DockingApproach



	state DOCKINGAPPROACH_COMPUTETHRUST__TO__DOCKINGAPPROACH_DOCKINGAPPROACHFAILED_2:

	 var 	idDockingApproach_DockingApproach_2, idDockingApproach_DockingApproach_3:int;
	let

		-- transition trace :
	--DockingApproach_ComputeThrust__To__DockingApproach_DockingApproachFailed_2
		(idDockingApproach_DockingApproach_2) 
	= DockingApproach_ComputeThrust_ex(idDockingApproach_DockingApproach_1, false);
		

		(idDockingApproach_DockingApproach_3) 
	= DockingApproach_DockingApproachFailed_en(idDockingApproach_DockingApproach_2, false);
		

	(idDockingApproach_DockingApproach, DockingApproach_timer, DockingApproach, DockingApproachComplete, dockingSensor_timer, idChart_MissionPhaseStates, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	=  (idDockingApproach_DockingApproach_3, DockingApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idChart_MissionPhaseStates_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);

	--add unused variables
	(CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	= (CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1);
	

	tel

	until true restart POINTDockingApproach_DockingApproach



	state DOCKINGAPPROACH_DOCKINGAPPROACHFAILED__TO__CAPTUREAPPROACH_CHECKORBITALSTATE_1:

	 var 	idDockingApproach_DockingApproach_2:int;
	DockingApproach_2:bool;
	DockingApproachComplete_2:bool;
	dockingSensor_timer_2:int;
	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	idDockingApproach_dockingSensor_2:int;
	idMissionPhaseStates_DockingApproach_2:int;
	idCaptureApproach_CaptureApproach_2, idCaptureApproach_CaptureApproach_3:int;
	idMissionPhaseStates_CaptureApproach_2, idMissionPhaseStates_CaptureApproach_3:int;
	CaptureApproachFailed_2:bool;
	CaptureApproach_timer_2:int;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteTime_2:int;
	GPS_AbsoluteVelocity_2:int;
	GPS_timer_2:int;
	InertialNavigation_AbsoluteAttitude_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	InertialNavigation_timer_2:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Time_2:int;
	OrbitalState_Velocity_2:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	StarPlanetTracker_timer_2:int;
	idCaptureApproach_OrbitalState_Active_2:int;
	idOrbitalState_Active_GPS_2:int;
	idOrbitalState_Active_InertialNavigation_2:int;
	idOrbitalState_Active_OrbitalState_Complex_2:int;
	idOrbitalState_Active_StarPlanetTracker_2:int;
	idOrbitalState_Complex_OrbitalState_2:int;
	idOrbitalState_Complex_OrbitalState2_2:int;
	let

		-- transition trace :
	--DockingApproach_DockingApproachFailed__To__CaptureApproach_CheckOrbitalState_1
		(dockingSensor_timer_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2, DockingApproachComplete_2, idDockingApproach_DockingApproach_2, DockingApproach_2, idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_DockingApproach_ex(dockingSensor_timer_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, DockingApproachComplete_1, idDockingApproach_DockingApproach_1, DockingApproach_1, idChart_MissionPhaseStates_1, false);
		

		idCaptureApproach_CaptureApproach_2 
	= 979;
	
		idMissionPhaseStates_CaptureApproach_2 
	= 977;
	
		(idMissionPhaseStates_CaptureApproach_3, idChart_MissionPhaseStates_3, CaptureApproachFailed_2, CaptureApproach_timer_2, idCaptureApproach_CaptureApproach_3, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idCaptureApproach_OrbitalState_Active_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2) 
	= MissionPhaseStates_CaptureApproach_en(idMissionPhaseStates_CaptureApproach_2, idChart_MissionPhaseStates_2, CaptureApproachFailed_1, CaptureApproach_timer_1, idCaptureApproach_CaptureApproach_2, GOOD, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, NONE, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, POOR, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_OrbitalState_Active_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, false);
		

	(idDockingApproach_DockingApproach, DockingApproach_timer, DockingApproach, DockingApproachComplete, dockingSensor_timer, idChart_MissionPhaseStates, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, idCaptureApproach_CaptureApproach, idMissionPhaseStates_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_OrbitalState_Active, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	=  (idDockingApproach_DockingApproach_2, DockingApproach_timer_1, DockingApproach_2, DockingApproachComplete_2, dockingSensor_timer_2, idChart_MissionPhaseStates_3, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, idCaptureApproach_CaptureApproach_3, idMissionPhaseStates_CaptureApproach_3, CaptureApproachFailed_2, CaptureApproach_timer_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idCaptureApproach_OrbitalState_Active_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2);


	tel

	until true restart POINTDockingApproach_DockingApproach



	state DOCKINGAPPROACH_STARTAPPROACH_IDL:

	 	let

		

	(idDockingApproach_DockingApproach, DockingApproach_timer, DockingApproach, DockingApproachComplete, dockingSensor_timer, idChart_MissionPhaseStates, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, idCaptureApproach_CaptureApproach, idMissionPhaseStates_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_OrbitalState_Active, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	= (idDockingApproach_DockingApproach_1, DockingApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idChart_MissionPhaseStates_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, idCaptureApproach_CaptureApproach_1, idMissionPhaseStates_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_OrbitalState_Active_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1);
	

	tel

	until true restart POINTDockingApproach_DockingApproach



	state DOCKINGAPPROACH_CHECKTARGETRELATIVESTATE_IDL:

	 	let

		

	(idDockingApproach_DockingApproach, DockingApproach_timer, DockingApproach, DockingApproachComplete, dockingSensor_timer, idChart_MissionPhaseStates, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, idCaptureApproach_CaptureApproach, idMissionPhaseStates_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_OrbitalState_Active, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	= (idDockingApproach_DockingApproach_1, DockingApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idChart_MissionPhaseStates_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, idCaptureApproach_CaptureApproach_1, idMissionPhaseStates_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_OrbitalState_Active_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1);
	

	tel

	until true restart POINTDockingApproach_DockingApproach



	state DOCKINGAPPROACH_READYTODOCK_IDL:

	 	let

		

	(idDockingApproach_DockingApproach, DockingApproach_timer, DockingApproach, DockingApproachComplete, dockingSensor_timer, idChart_MissionPhaseStates, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, idCaptureApproach_CaptureApproach, idMissionPhaseStates_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_OrbitalState_Active, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	= (idDockingApproach_DockingApproach_1, DockingApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idChart_MissionPhaseStates_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, idCaptureApproach_CaptureApproach_1, idMissionPhaseStates_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_OrbitalState_Active_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1);
	

	tel

	until true restart POINTDockingApproach_DockingApproach



	state DOCKINGAPPROACH_COMPUTETHRUST_IDL:

	 	let

		

	(idDockingApproach_DockingApproach, DockingApproach_timer, DockingApproach, DockingApproachComplete, dockingSensor_timer, idChart_MissionPhaseStates, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, idCaptureApproach_CaptureApproach, idMissionPhaseStates_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_OrbitalState_Active, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	= (idDockingApproach_DockingApproach_1, DockingApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idChart_MissionPhaseStates_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, idCaptureApproach_CaptureApproach_1, idMissionPhaseStates_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_OrbitalState_Active_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1);
	

	tel

	until true restart POINTDockingApproach_DockingApproach



	state DOCKINGAPPROACH_DOCKINGAPPROACHFAILED_IDL:

	 	let

		

	(idDockingApproach_DockingApproach, DockingApproach_timer, DockingApproach, DockingApproachComplete, dockingSensor_timer, idChart_MissionPhaseStates, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, idCaptureApproach_CaptureApproach, idMissionPhaseStates_CaptureApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_OrbitalState_Active, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	= (idDockingApproach_DockingApproach_1, DockingApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idChart_MissionPhaseStates_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, idCaptureApproach_CaptureApproach_1, idMissionPhaseStates_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_OrbitalState_Active_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1);
	

	tel

	until true restart POINTDockingApproach_DockingApproach



tel


--***************************************************State :MissionPhaseStates_DockingApproach Automaton***************************************************

node MissionPhaseStates_DockingApproach_node(idMissionPhaseStates_DockingApproach_1:int;
	DockingApproach_timer_1:int;
	idDockingApproach_DockingApproach_1:int;
	GOOD:int;
	NONE:int;
	POOR:int;
	dockingSensor_RelativeAttitude_1:int;
	dockingSensor_RelativePosition_1:int;
	dockingSensor_RelativeVelocity_1:int;
	dockingSensor_targetState_1:int;
	idDockingApproach_dockingSensor_1:int;
	DockingApproach_timer_upper_limit:int;
	AttemptingToDock_1:bool;
	CLOSEDBUTUNMATED:int;
	CaptureApproachFailed_1:bool;
	CaptureApproach_timer_1:int;
	DockingApproach_1:bool;
	DockingApproachComplete_1:bool;
	EXIST:int;
	GPS_AbsolutePosition_1:int;
	GPS_AbsoluteTime_1:int;
	GPS_AbsoluteVelocity_1:int;
	GPS_timer_1:int;
	INDETERMINATE:int;
	InertialNavigation_AbsoluteAttitude_1:int;
	InertialNavigation_AbsolutePosition_1:int;
	InertialNavigation_AbsoluteVelocity_1:int;
	InertialNavigation_timer_1:int;
	LatchCaptureComplete_1:bool;
	LatchCapture_timer_1:int;
	MATED:int;
	OPEN:int;
	OrbitalState_Attitude_1:int;
	OrbitalState_Position_1:int;
	OrbitalState_Time_1:int;
	OrbitalState_Velocity_1:int;
	StarPlanetTracker_AbsoluteAttitude_1:int;
	StarPlanetTracker_AbsolutePosition_1:int;
	StarPlanetTracker_AbsoluteTime_1:int;
	StarPlanetTracker_AbsoluteVelocity_1:int;
	StarPlanetTracker_timer_1:int;
	dockingSensor_timer_1:int;
	fuel_status_1:int;
	idCaptureApproach_CaptureApproach_1:int;
	idCaptureApproach_OrbitalState_Active_1:int;
	idChart_MissionPhaseStates_1:int;
	idLatchCapture_LatchCaptureCheck_1:int;
	idLatchCapture_latch_1:int;
	idMissionPhaseStates_CaptureApproach_1:int;
	idMissionPhaseStates_LatchCapture_1:int;
	idOrbitalState_Active_GPS_1:int;
	idOrbitalState_Active_InertialNavigation_1:int;
	idOrbitalState_Active_OrbitalState_Complex_1:int;
	idOrbitalState_Active_StarPlanetTracker_1:int;
	idOrbitalState_Complex_OrbitalState_1:int;
	idOrbitalState_Complex_OrbitalState2_1:int;
	latch_status_1:int;
	thrust_status_1:int;
	dockingSensor_timer_upper_limit:int;
	AVAILABLE:bool;
	BRIGHT:bool;
	dockVisibility_status:int;
	opticsAvailability_status:bool;
	sunlight_status:bool)

returns (idMissionPhaseStates_DockingApproach:int;
	DockingApproach_timer:int;
	idDockingApproach_DockingApproach:int;
	dockingSensor_RelativeAttitude:int;
	dockingSensor_RelativePosition:int;
	dockingSensor_RelativeVelocity:int;
	dockingSensor_targetState:int;
	idDockingApproach_dockingSensor:int;
	AttemptingToDock:bool;
	CaptureApproachFailed:bool;
	CaptureApproach_timer:int;
	DockingApproach:bool;
	DockingApproachComplete:bool;
	GPS_AbsolutePosition:int;
	GPS_AbsoluteTime:int;
	GPS_AbsoluteVelocity:int;
	GPS_timer:int;
	InertialNavigation_AbsoluteAttitude:int;
	InertialNavigation_AbsolutePosition:int;
	InertialNavigation_AbsoluteVelocity:int;
	InertialNavigation_timer:int;
	LatchCaptureComplete:bool;
	LatchCapture_timer:int;
	OrbitalState_Attitude:int;
	OrbitalState_Position:int;
	OrbitalState_Time:int;
	OrbitalState_Velocity:int;
	StarPlanetTracker_AbsoluteAttitude:int;
	StarPlanetTracker_AbsolutePosition:int;
	StarPlanetTracker_AbsoluteTime:int;
	StarPlanetTracker_AbsoluteVelocity:int;
	StarPlanetTracker_timer:int;
	dockingSensor_timer:int;
	idCaptureApproach_CaptureApproach:int;
	idCaptureApproach_OrbitalState_Active:int;
	idChart_MissionPhaseStates:int;
	idLatchCapture_LatchCaptureCheck:int;
	idLatchCapture_latch:int;
	idMissionPhaseStates_CaptureApproach:int;
	idMissionPhaseStates_LatchCapture:int;
	idOrbitalState_Active_GPS:int;
	idOrbitalState_Active_InertialNavigation:int;
	idOrbitalState_Active_OrbitalState_Complex:int;
	idOrbitalState_Active_StarPlanetTracker:int;
	idOrbitalState_Complex_OrbitalState:int;
	idOrbitalState_Complex_OrbitalState2:int;
	latch_status:int);


let

	 automaton missionphasestates_dockingapproach

	state POINTMissionPhaseStates_DockingApproach:
	unless (idMissionPhaseStates_DockingApproach_1=0) restart MISSIONPHASESTATES_DOCKINGAPPROACH_PARALLEL_ENTRY
	unless true  restart MISSIONPHASESTATES_DOCKINGAPPROACH_PARALLEL_IDL

	let

		(idMissionPhaseStates_DockingApproach, DockingApproach_timer, idDockingApproach_DockingApproach, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_dockingSensor, AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status) 
	= (idMissionPhaseStates_DockingApproach_1, DockingApproach_timer_1, idDockingApproach_DockingApproach_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_dockingSensor_1, AttemptingToDock_1, CaptureApproachFailed_1, CaptureApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, LatchCaptureComplete_1, LatchCapture_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, dockingSensor_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_LatchCapture_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, latch_status_1);
	

	tel



	state MISSIONPHASESTATES_DOCKINGAPPROACH_PARALLEL_ENTRY:

	 var 	idMissionPhaseStates_DockingApproach_2, idMissionPhaseStates_DockingApproach_3:int;
	DockingApproach_timer_2:int;
	idDockingApproach_DockingApproach_2:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_targetState_2:int;
	idDockingApproach_dockingSensor_2:int;
	let

		
	(idDockingApproach_DockingApproach_2, idMissionPhaseStates_DockingApproach_2, DockingApproach_timer_2) 
	= DockingApproach_DockingApproach_en(idDockingApproach_DockingApproach_1, idMissionPhaseStates_DockingApproach_1, DockingApproach_timer_1, false);

	(idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_3, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2) 
	= DockingApproach_dockingSensor_en(idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_2, NONE, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, GOOD, POOR, false);


	(idMissionPhaseStates_DockingApproach, DockingApproach_timer, idDockingApproach_DockingApproach, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_dockingSensor) 
	= (idMissionPhaseStates_DockingApproach_3, DockingApproach_timer_2, idDockingApproach_DockingApproach_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idDockingApproach_dockingSensor_2);
	
	--add unused variables
	(AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status) 
	= (AttemptingToDock_1, CaptureApproachFailed_1, CaptureApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, LatchCaptureComplete_1, LatchCapture_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, dockingSensor_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_LatchCapture_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, latch_status_1);
	

	tel

	until true restart POINTMissionPhaseStates_DockingApproach



	state MISSIONPHASESTATES_DOCKINGAPPROACH_PARALLEL_IDL:

	 var 	idMissionPhaseStates_DockingApproach_2:int;
	DockingApproach_timer_2, DockingApproach_timer_3:int;
	idDockingApproach_DockingApproach_2:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_targetState_2:int;
	idDockingApproach_dockingSensor_2, idDockingApproach_dockingSensor_3:int;
	AttemptingToDock_2:bool;
	CaptureApproachFailed_2:bool;
	CaptureApproach_timer_2:int;
	DockingApproach_2:bool;
	DockingApproachComplete_2:bool;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteTime_2:int;
	GPS_AbsoluteVelocity_2:int;
	GPS_timer_2:int;
	InertialNavigation_AbsoluteAttitude_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	InertialNavigation_timer_2:int;
	LatchCaptureComplete_2:bool;
	LatchCapture_timer_2:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Time_2:int;
	OrbitalState_Velocity_2:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	StarPlanetTracker_timer_2:int;
	dockingSensor_timer_2, dockingSensor_timer_3, dockingSensor_timer_4:int;
	idCaptureApproach_CaptureApproach_2:int;
	idCaptureApproach_OrbitalState_Active_2:int;
	idChart_MissionPhaseStates_2:int;
	idLatchCapture_LatchCaptureCheck_2:int;
	idLatchCapture_latch_2:int;
	idMissionPhaseStates_CaptureApproach_2:int;
	idMissionPhaseStates_LatchCapture_2:int;
	idOrbitalState_Active_GPS_2:int;
	idOrbitalState_Active_InertialNavigation_2:int;
	idOrbitalState_Active_OrbitalState_Complex_2:int;
	idOrbitalState_Active_StarPlanetTracker_2:int;
	idOrbitalState_Complex_OrbitalState_2:int;
	idOrbitalState_Complex_OrbitalState2_2:int;
	latch_status_2:int;
	let

		
	(DockingApproach_timer_2) 
	= if not (idDockingApproach_DockingApproach_1= 0 ) then DockingApproach_DockingApproach_du(DockingApproach_timer_1, DockingApproach_timer_upper_limit)

		 else (DockingApproach_timer_1);

		


		(idDockingApproach_DockingApproach_2, DockingApproach_timer_3, DockingApproach_2, DockingApproachComplete_2, dockingSensor_timer_2, idChart_MissionPhaseStates_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, latch_status_2, idCaptureApproach_CaptureApproach_2, idMissionPhaseStates_CaptureApproach_2, CaptureApproachFailed_2, CaptureApproach_timer_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idCaptureApproach_OrbitalState_Active_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2)
	= if not (idDockingApproach_DockingApproach_1= 0 ) then DockingApproach_DockingApproach_node(idDockingApproach_DockingApproach_1, DockingApproach_timer_2, dockingSensor_RelativePosition_1, NONE, dockingSensor_RelativeVelocity_1, dockingSensor_RelativeAttitude_1, DockingApproach_timer_upper_limit, GOOD, dockingSensor_targetState_1, POOR, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idChart_MissionPhaseStates_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, CLOSEDBUTUNMATED, INDETERMINATE, LatchCaptureComplete_1, LatchCapture_timer_1, MATED, OPEN, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, thrust_status_1, EXIST, fuel_status_1, idCaptureApproach_CaptureApproach_1, idMissionPhaseStates_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_OrbitalState_Active_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1)

		 else (idDockingApproach_DockingApproach_1, DockingApproach_timer_2, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idChart_MissionPhaseStates_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, idCaptureApproach_CaptureApproach_1, idMissionPhaseStates_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_OrbitalState_Active_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1);

		

		
	(dockingSensor_timer_3) 
	= if not (idDockingApproach_dockingSensor_2= 0 ) then DockingApproach_dockingSensor_du(dockingSensor_timer_2, dockingSensor_timer_upper_limit)

		 else (dockingSensor_timer_2);

		


		(idDockingApproach_dockingSensor_3, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, dockingSensor_timer_4)
	= if not (idDockingApproach_dockingSensor_2= 0 ) then DockingApproach_dockingSensor_node(idDockingApproach_dockingSensor_2, NONE, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockVisibility_status, GOOD, opticsAvailability_status, AVAILABLE, sunlight_status, BRIGHT, dockingSensor_timer_3, POOR, dockingSensor_timer_upper_limit)

		 else (idDockingApproach_dockingSensor_2, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_3);

		

		

	(idMissionPhaseStates_DockingApproach, DockingApproach_timer, idDockingApproach_DockingApproach, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_dockingSensor, AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status) 
	= (idMissionPhaseStates_DockingApproach_2, DockingApproach_timer_3, idDockingApproach_DockingApproach_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idDockingApproach_dockingSensor_3, AttemptingToDock_2, CaptureApproachFailed_2, CaptureApproach_timer_2, DockingApproach_2, DockingApproachComplete_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, LatchCaptureComplete_2, LatchCapture_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, dockingSensor_timer_4, idCaptureApproach_CaptureApproach_2, idCaptureApproach_OrbitalState_Active_2, idChart_MissionPhaseStates_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, idMissionPhaseStates_CaptureApproach_2, idMissionPhaseStates_LatchCapture_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, latch_status_2);
	

	tel

	until true restart POINTMissionPhaseStates_DockingApproach



tel


--***************************************************State :Chart_MissionPhaseStates Automaton***************************************************

node Chart_MissionPhaseStates_node(idChart_MissionPhaseStates_1:int;
	StageTransition:int;
	ApproachOrbitComplete_1:bool;
	CaptureApproachComplete_1:bool;
	FarApproachComplete_1:bool;
	ProximityOperationsComplete_1:bool;
	FailedApproach_1:bool;
	CaptureApproachFailed_1:bool;
	CaptureApproach_timer_1:int;
	GOOD:int;
	GPS_AbsolutePosition_1:int;
	GPS_AbsoluteTime_1:int;
	GPS_AbsoluteVelocity_1:int;
	GPS_timer_1:int;
	InertialNavigation_AbsoluteAttitude_1:int;
	InertialNavigation_AbsolutePosition_1:int;
	InertialNavigation_AbsoluteVelocity_1:int;
	InertialNavigation_timer_1:int;
	NONE:int;
	OrbitalState_Attitude_1:int;
	OrbitalState_Position_1:int;
	OrbitalState_Time_1:int;
	OrbitalState_Velocity_1:int;
	POOR:int;
	StarPlanetTracker_AbsoluteAttitude_1:int;
	StarPlanetTracker_AbsolutePosition_1:int;
	StarPlanetTracker_AbsoluteTime_1:int;
	StarPlanetTracker_AbsoluteVelocity_1:int;
	StarPlanetTracker_timer_1:int;
	idCaptureApproach_CaptureApproach_1:int;
	idCaptureApproach_OrbitalState_Active_1:int;
	idMissionPhaseStates_CaptureApproach_1:int;
	idOrbitalState_Active_GPS_1:int;
	idOrbitalState_Active_InertialNavigation_1:int;
	idOrbitalState_Active_OrbitalState_Complex_1:int;
	idOrbitalState_Active_StarPlanetTracker_1:int;
	idOrbitalState_Complex_OrbitalState_1:int;
	idOrbitalState_Complex_OrbitalState2_1:int;
	JointMission_1:bool;
	CaptureApproach_timer_upper_limit:int;
	DockingApproach_1:bool;
	DockingApproachComplete_1:bool;
	DockingApproach_timer_1:int;
	EXIST:int;
	dockingSensor_RelativeAttitude_1:int;
	dockingSensor_RelativePosition_1:int;
	dockingSensor_RelativeVelocity_1:int;
	dockingSensor_targetState_1:int;
	fuel_status_1:int;
	idDockingApproach_DockingApproach_1:int;
	idDockingApproach_dockingSensor_1:int;
	idMissionPhaseStates_DockingApproach_1:int;
	thrust_status_1:int;
	AVAILABLE:bool;
	BRIGHT:bool;
	GPS_receiverAvailability_status:bool;
	GPS_satelliteVisibility_status:int;
	GPS_timer_upper_limit:int;
	GroundTrack_OrbitalPosition:int;
	GroundTrack_OrbitalVelocity:int;
	GroundTrack_Time:int;
	InertialNavigation_time:bool;
	InertialNavigation_timer_upper_limit:int;
	RealTimeClock_time:int;
	StarPlanetTracker_planetVisibility:int;
	StarPlanetTracker_starVisibility:int;
	StarPlanetTracker_timer_upper_limit:int;
	VALID_1:bool;
	callibrate:bool;
	opticsAvailability_status:bool;
	sunlight_status:bool;
	DockingApproach_timer_upper_limit:int;
	AttemptingToDock_1:bool;
	CLOSEDBUTUNMATED:int;
	INDETERMINATE:int;
	LatchCaptureComplete_1:bool;
	LatchCapture_timer_1:int;
	MATED:int;
	OPEN:int;
	dockingSensor_timer_1:int;
	idLatchCapture_LatchCaptureCheck_1:int;
	idLatchCapture_latch_1:int;
	idMissionPhaseStates_LatchCapture_1:int;
	latch_status_1:int;
	dockingSensor_timer_upper_limit:int;
	dockVisibility_status:int;
	LatchCapture_timer_upper_limit:int)

returns (idChart_MissionPhaseStates:int;
	ApproachOrbitComplete:bool;
	CaptureApproachComplete:bool;
	FarApproachComplete:bool;
	ProximityOperationsComplete:bool;
	FailedApproach:bool;
	CaptureApproachFailed:bool;
	CaptureApproach_timer:int;
	GPS_AbsolutePosition:int;
	GPS_AbsoluteTime:int;
	GPS_AbsoluteVelocity:int;
	GPS_timer:int;
	InertialNavigation_AbsoluteAttitude:int;
	InertialNavigation_AbsolutePosition:int;
	InertialNavigation_AbsoluteVelocity:int;
	InertialNavigation_timer:int;
	OrbitalState_Attitude:int;
	OrbitalState_Position:int;
	OrbitalState_Time:int;
	OrbitalState_Velocity:int;
	StarPlanetTracker_AbsoluteAttitude:int;
	StarPlanetTracker_AbsolutePosition:int;
	StarPlanetTracker_AbsoluteTime:int;
	StarPlanetTracker_AbsoluteVelocity:int;
	StarPlanetTracker_timer:int;
	idCaptureApproach_CaptureApproach:int;
	idCaptureApproach_OrbitalState_Active:int;
	idMissionPhaseStates_CaptureApproach:int;
	idOrbitalState_Active_GPS:int;
	idOrbitalState_Active_InertialNavigation:int;
	idOrbitalState_Active_OrbitalState_Complex:int;
	idOrbitalState_Active_StarPlanetTracker:int;
	idOrbitalState_Complex_OrbitalState:int;
	idOrbitalState_Complex_OrbitalState2:int;
	JointMission:bool;
	DockingApproach:bool;
	DockingApproachComplete:bool;
	DockingApproach_timer:int;
	dockingSensor_RelativeAttitude:int;
	dockingSensor_RelativePosition:int;
	dockingSensor_RelativeVelocity:int;
	dockingSensor_targetState:int;
	idDockingApproach_DockingApproach:int;
	idDockingApproach_dockingSensor:int;
	idMissionPhaseStates_DockingApproach:int;
	AttemptingToDock:bool;
	LatchCaptureComplete:bool;
	LatchCapture_timer:int;
	dockingSensor_timer:int;
	idLatchCapture_LatchCaptureCheck:int;
	idLatchCapture_latch:int;
	idMissionPhaseStates_LatchCapture:int;
	latch_status:int);


let

	 automaton chart_missionphasestates

	state POINTChart_MissionPhaseStates:
	unless (idChart_MissionPhaseStates_1=0) restart POINT__TO__MISSIONPHASESTATES_START_1



	unless (idChart_MissionPhaseStates_1=951) and ( StageTransition=0 ) restart MISSIONPHASESTATES_START__TO__MISSIONPHASESTATES_APPROACHORBIT_1



	unless (idChart_MissionPhaseStates_1=956) and ( StageTransition=8 ) restart MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER__TO__MISSIONPHASESTATES_FAILEDAPPROACH_1



	unless (idChart_MissionPhaseStates_1=956) and ( StageTransition=6 ) restart MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER__TO__MISSIONPHASESTATES_APPROACHORBIT_2



	unless (idChart_MissionPhaseStates_1=958) and ( StageTransition=2 ) restart MISSIONPHASESTATES_APPROACHORBIT__TO__MISSIONPHASESTATES_PROXIMITYOPERATIONS_1



	unless (idChart_MissionPhaseStates_1=960) and ( StageTransition=1 ) restart MISSIONPHASESTATES_PROXIMITYOPERATIONS__TO__MISSIONPHASESTATES_APPROACHORBIT_1



	unless (idChart_MissionPhaseStates_1=960) and ( StageTransition=3 ) restart MISSIONPHASESTATES_PROXIMITYOPERATIONS__TO__MISSIONPHASESTATES_FARAPPROACH_2



	unless (idChart_MissionPhaseStates_1=959) and ( StageTransition=7 ) restart MISSIONPHASESTATES_DISENGAGE__TO__MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER_1



	unless (idChart_MissionPhaseStates_1=948) and ( StageTransition=5 ) restart MISSIONPHASESTATES_FARAPPROACH__TO__MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER_1



	unless (idChart_MissionPhaseStates_1=948) and ( StageTransition=4 ) restart MISSIONPHASESTATES_FARAPPROACH__TO__MISSIONPHASESTATES_CAPTUREAPPROACH_2



	unless (idChart_MissionPhaseStates_1=950) and ( StageTransition=9 ) restart MISSIONPHASESTATES_JOINTSTABILIZE__TO__MISSIONPHASESTATES_DISENGAGE_1



	unless (idChart_MissionPhaseStates_1=950) and ( StageTransition=10 ) restart MISSIONPHASESTATES_JOINTSTABILIZE__TO__MISSIONPHASESTATES_JOINTMISSION_2



	unless (idChart_MissionPhaseStates_1=951) restart MISSIONPHASESTATES_START_IDL

	unless (idChart_MissionPhaseStates_1=956) restart MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER_IDL

	unless (idChart_MissionPhaseStates_1=958) restart MISSIONPHASESTATES_APPROACHORBIT_IDL

	unless (idChart_MissionPhaseStates_1=960) restart MISSIONPHASESTATES_PROXIMITYOPERATIONS_IDL

	unless (idChart_MissionPhaseStates_1=959) restart MISSIONPHASESTATES_DISENGAGE_IDL

	unless (idChart_MissionPhaseStates_1=948) restart MISSIONPHASESTATES_FARAPPROACH_IDL

	unless (idChart_MissionPhaseStates_1=957) restart MISSIONPHASESTATES_FAILEDAPPROACH_IDL

	unless (idChart_MissionPhaseStates_1=976) restart MISSIONPHASESTATES_CAPTUREAPPROACH_IDL

	unless (idChart_MissionPhaseStates_1=961) restart MISSIONPHASESTATES_JOINTMISSION_IDL

	unless (idChart_MissionPhaseStates_1=966) restart MISSIONPHASESTATES_DOCKINGAPPROACH_IDL

	unless (idChart_MissionPhaseStates_1=950) restart MISSIONPHASESTATES_JOINTSTABILIZE_IDL

	unless (idChart_MissionPhaseStates_1=1005) restart MISSIONPHASESTATES_LATCHCAPTURE_IDL

	let

		(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, JointMission, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, dockingSensor_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, dockingSensor_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel



	state POINT__TO__MISSIONPHASESTATES_START_1:

	 var 	idChart_MissionPhaseStates_2:int;
	let

		-- transition trace :
	--POINT__To__MissionPhaseStates_Start_1
		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_Start_en(idChart_MissionPhaseStates_1, false);
		

	(idChart_MissionPhaseStates) 
	=  (idChart_MissionPhaseStates_2);

	--add unused variables
	(ApproachOrbitComplete, AttemptingToDock, CaptureApproachComplete, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, DockingApproach_timer, FailedApproach, FarApproachComplete, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, JointMission, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, ProximityOperationsComplete, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status) 
	= (ApproachOrbitComplete_1, AttemptingToDock_1, CaptureApproachComplete_1, CaptureApproachFailed_1, CaptureApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, FailedApproach_1, FarApproachComplete_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, ProximityOperationsComplete_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_START__TO__MISSIONPHASESTATES_APPROACHORBIT_1:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	let

		-- transition trace :
	--MissionPhaseStates_Start__To__MissionPhaseStates_ApproachOrbit_1
		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_Start_ex(idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_ApproachOrbit_en(idChart_MissionPhaseStates_2, false);
		

	(idChart_MissionPhaseStates) 
	=  (idChart_MissionPhaseStates_3);

	--add unused variables
	(ApproachOrbitComplete, AttemptingToDock, CaptureApproachComplete, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, DockingApproach_timer, FailedApproach, FarApproachComplete, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, JointMission, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, ProximityOperationsComplete, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status) 
	= (ApproachOrbitComplete_1, AttemptingToDock_1, CaptureApproachComplete_1, CaptureApproachFailed_1, CaptureApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, FailedApproach_1, FarApproachComplete_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, ProximityOperationsComplete_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER__TO__MISSIONPHASESTATES_FAILEDAPPROACH_1:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	ApproachOrbitComplete_2:bool;
	CaptureApproachComplete_2:bool;
	FarApproachComplete_2:bool;
	ProximityOperationsComplete_2:bool;
	FailedApproach_2:bool;
	let

		-- transition trace :
	--MissionPhaseStates_CollisionAvoidanceManuever__To__MissionPhaseStates_FailedApproach_1
		(ApproachOrbitComplete_2, ProximityOperationsComplete_2, FarApproachComplete_2, CaptureApproachComplete_2, idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_CollisionAvoidanceManuever_ex(ApproachOrbitComplete_1, ProximityOperationsComplete_1, FarApproachComplete_1, CaptureApproachComplete_1, idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3, FailedApproach_2) 
	= MissionPhaseStates_FailedApproach_en(idChart_MissionPhaseStates_2, FailedApproach_1, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, FailedApproach_2);

	--add unused variables
	(AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, DockingApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, JointMission, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status) 
	= (AttemptingToDock_1, CaptureApproachFailed_1, CaptureApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER__TO__MISSIONPHASESTATES_APPROACHORBIT_2:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	ApproachOrbitComplete_2:bool;
	CaptureApproachComplete_2:bool;
	FarApproachComplete_2:bool;
	ProximityOperationsComplete_2:bool;
	let

		-- transition trace :
	--MissionPhaseStates_CollisionAvoidanceManuever__To__MissionPhaseStates_ApproachOrbit_2
		(ApproachOrbitComplete_2, ProximityOperationsComplete_2, FarApproachComplete_2, CaptureApproachComplete_2, idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_CollisionAvoidanceManuever_ex(ApproachOrbitComplete_1, ProximityOperationsComplete_1, FarApproachComplete_1, CaptureApproachComplete_1, idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_ApproachOrbit_en(idChart_MissionPhaseStates_2, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, FailedApproach_1);

	--add unused variables
	(AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, DockingApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, JointMission, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status) 
	= (AttemptingToDock_1, CaptureApproachFailed_1, CaptureApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_APPROACHORBIT__TO__MISSIONPHASESTATES_PROXIMITYOPERATIONS_1:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	ApproachOrbitComplete_2:bool;
	let

		-- transition trace :
	--MissionPhaseStates_ApproachOrbit__To__MissionPhaseStates_ProximityOperations_1
		-- condition Action : ApproachOrbitComplete=1
		
		(ApproachOrbitComplete_2) 
	= MissionPhaseStates_ApproachOrbit__To__MissionPhaseStates_ProximityOperations_1_Condition_Action(ApproachOrbitComplete_1);
		

		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_ApproachOrbit_ex(idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_ProximityOperations_en(idChart_MissionPhaseStates_2, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_2, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1);

	--add unused variables
	(AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, DockingApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, JointMission, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status) 
	= (AttemptingToDock_1, CaptureApproachFailed_1, CaptureApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_PROXIMITYOPERATIONS__TO__MISSIONPHASESTATES_APPROACHORBIT_1:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	ApproachOrbitComplete_2:bool;
	let

		-- transition trace :
	--MissionPhaseStates_ProximityOperations__To__MissionPhaseStates_ApproachOrbit_1
		-- condition Action : ApproachOrbitComplete=0;
		
		(ApproachOrbitComplete_2) 
	= MissionPhaseStates_ProximityOperations__To__MissionPhaseStates_ApproachOrbit_1_Condition_Action(ApproachOrbitComplete_1);
		

		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_ProximityOperations_ex(idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_ApproachOrbit_en(idChart_MissionPhaseStates_2, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_2, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1);

	--add unused variables
	(AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, DockingApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, JointMission, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status) 
	= (AttemptingToDock_1, CaptureApproachFailed_1, CaptureApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_PROXIMITYOPERATIONS__TO__MISSIONPHASESTATES_FARAPPROACH_2:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	ProximityOperationsComplete_2:bool;
	let

		-- transition trace :
	--MissionPhaseStates_ProximityOperations__To__MissionPhaseStates_FarApproach_2
		-- condition Action : ProximityOperationsComplete=1
		
		(ProximityOperationsComplete_2) 
	= MissionPhaseStates_ProximityOperations__To__MissionPhaseStates_FarApproach_2_Condition_Action(ProximityOperationsComplete_1);
		

		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_ProximityOperations_ex(idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_FarApproach_en(idChart_MissionPhaseStates_2, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_2, FailedApproach_1);

	--add unused variables
	(AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, DockingApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, JointMission, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status) 
	= (AttemptingToDock_1, CaptureApproachFailed_1, CaptureApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_DISENGAGE__TO__MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER_1:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	let

		-- transition trace :
	--MissionPhaseStates_Disengage__To__MissionPhaseStates_CollisionAvoidanceManuever_1
		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_Disengage_ex(idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_CollisionAvoidanceManuever_en(idChart_MissionPhaseStates_2, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1);

	--add unused variables
	(AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, DockingApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, JointMission, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status) 
	= (AttemptingToDock_1, CaptureApproachFailed_1, CaptureApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_FARAPPROACH__TO__MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER_1:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	let

		-- transition trace :
	--MissionPhaseStates_FarApproach__To__MissionPhaseStates_CollisionAvoidanceManuever_1
		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_FarApproach_ex(idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_CollisionAvoidanceManuever_en(idChart_MissionPhaseStates_2, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1);

	--add unused variables
	(AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, DockingApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, JointMission, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status) 
	= (AttemptingToDock_1, CaptureApproachFailed_1, CaptureApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_FARAPPROACH__TO__MISSIONPHASESTATES_CAPTUREAPPROACH_2:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	FarApproachComplete_2:bool;
	CaptureApproachFailed_2:bool;
	CaptureApproach_timer_2:int;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteTime_2:int;
	GPS_AbsoluteVelocity_2:int;
	GPS_timer_2:int;
	InertialNavigation_AbsoluteAttitude_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	InertialNavigation_timer_2:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Time_2:int;
	OrbitalState_Velocity_2:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	StarPlanetTracker_timer_2:int;
	idCaptureApproach_CaptureApproach_2:int;
	idCaptureApproach_OrbitalState_Active_2:int;
	idMissionPhaseStates_CaptureApproach_2:int;
	idOrbitalState_Active_GPS_2:int;
	idOrbitalState_Active_InertialNavigation_2:int;
	idOrbitalState_Active_OrbitalState_Complex_2:int;
	idOrbitalState_Active_StarPlanetTracker_2:int;
	idOrbitalState_Complex_OrbitalState_2:int;
	idOrbitalState_Complex_OrbitalState2_2:int;
	let

		-- transition trace :
	--MissionPhaseStates_FarApproach__To__MissionPhaseStates_CaptureApproach_2
		-- condition Action : FarApproachComplete=1
		
		(FarApproachComplete_2) 
	= MissionPhaseStates_FarApproach__To__MissionPhaseStates_CaptureApproach_2_Condition_Action(FarApproachComplete_1);
		

		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_FarApproach_ex(idChart_MissionPhaseStates_1, false);
		

		(idMissionPhaseStates_CaptureApproach_2, idChart_MissionPhaseStates_3, CaptureApproachFailed_2, CaptureApproach_timer_2, idCaptureApproach_CaptureApproach_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idCaptureApproach_OrbitalState_Active_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2) 
	= MissionPhaseStates_CaptureApproach_en(idMissionPhaseStates_CaptureApproach_1, idChart_MissionPhaseStates_2, CaptureApproachFailed_1, CaptureApproach_timer_1, idCaptureApproach_CaptureApproach_1, GOOD, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, NONE, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, POOR, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_OrbitalState_Active_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_2, ProximityOperationsComplete_1, FailedApproach_1, CaptureApproachFailed_2, CaptureApproach_timer_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idCaptureApproach_CaptureApproach_2, idCaptureApproach_OrbitalState_Active_2, idMissionPhaseStates_CaptureApproach_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2);

	--add unused variables
	(AttemptingToDock, DockingApproach, DockingApproachComplete, DockingApproach_timer, JointMission, LatchCaptureComplete, LatchCapture_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_JOINTSTABILIZE__TO__MISSIONPHASESTATES_DISENGAGE_1:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	let

		-- transition trace :
	--MissionPhaseStates_JointStabilize__To__MissionPhaseStates_Disengage_1
		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_JointStabilize_ex(idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_Disengage_en(idChart_MissionPhaseStates_2, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1);

	--add unused variables
	(AttemptingToDock, DockingApproach, DockingApproachComplete, DockingApproach_timer, JointMission, LatchCaptureComplete, LatchCapture_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_JOINTSTABILIZE__TO__MISSIONPHASESTATES_JOINTMISSION_2:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	JointMission_2:bool;
	let

		-- transition trace :
	--MissionPhaseStates_JointStabilize__To__MissionPhaseStates_JointMission_2
		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_JointStabilize_ex(idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3, JointMission_2) 
	= MissionPhaseStates_JointMission_en(idChart_MissionPhaseStates_2, JointMission_1, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, JointMission) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_2);

	--add unused variables
	(AttemptingToDock, DockingApproach, DockingApproachComplete, DockingApproach_timer, LatchCaptureComplete, LatchCapture_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, LatchCaptureComplete_1, LatchCapture_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_START_IDL:

	 	let

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, JointMission) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1);
	
	--add unused variables
	(AttemptingToDock, DockingApproach, DockingApproachComplete, DockingApproach_timer, LatchCaptureComplete, LatchCapture_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, LatchCaptureComplete_1, LatchCapture_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER_IDL:

	 	let

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, JointMission) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1);
	
	--add unused variables
	(AttemptingToDock, DockingApproach, DockingApproachComplete, DockingApproach_timer, LatchCaptureComplete, LatchCapture_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, LatchCaptureComplete_1, LatchCapture_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_APPROACHORBIT_IDL:

	 	let

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, JointMission) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1);
	
	--add unused variables
	(AttemptingToDock, DockingApproach, DockingApproachComplete, DockingApproach_timer, LatchCaptureComplete, LatchCapture_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, LatchCaptureComplete_1, LatchCapture_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_PROXIMITYOPERATIONS_IDL:

	 	let

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, JointMission) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1);
	
	--add unused variables
	(AttemptingToDock, DockingApproach, DockingApproachComplete, DockingApproach_timer, LatchCaptureComplete, LatchCapture_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, LatchCaptureComplete_1, LatchCapture_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_DISENGAGE_IDL:

	 	let

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, JointMission) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1);
	
	--add unused variables
	(AttemptingToDock, DockingApproach, DockingApproachComplete, DockingApproach_timer, LatchCaptureComplete, LatchCapture_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, LatchCaptureComplete_1, LatchCapture_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_FARAPPROACH_IDL:

	 	let

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, JointMission) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1);
	
	--add unused variables
	(AttemptingToDock, DockingApproach, DockingApproachComplete, DockingApproach_timer, LatchCaptureComplete, LatchCapture_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, LatchCaptureComplete_1, LatchCapture_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_FAILEDAPPROACH_IDL:

	 	let

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, JointMission) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1);
	
	--add unused variables
	(AttemptingToDock, DockingApproach, DockingApproachComplete, DockingApproach_timer, LatchCaptureComplete, LatchCapture_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, dockingSensor_timer, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, LatchCaptureComplete_1, LatchCapture_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_CAPTUREAPPROACH_IDL:

	 var 	idChart_MissionPhaseStates_2:int;
	CaptureApproachComplete_2:bool;
	CaptureApproachFailed_2:bool;
	CaptureApproach_timer_2, CaptureApproach_timer_3:int;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteTime_2:int;
	GPS_AbsoluteVelocity_2:int;
	GPS_timer_2:int;
	InertialNavigation_AbsoluteAttitude_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	InertialNavigation_timer_2:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Time_2:int;
	OrbitalState_Velocity_2:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	StarPlanetTracker_timer_2:int;
	idCaptureApproach_CaptureApproach_2:int;
	idCaptureApproach_OrbitalState_Active_2, idCaptureApproach_OrbitalState_Active_3:int;
	idMissionPhaseStates_CaptureApproach_2:int;
	idOrbitalState_Active_GPS_2, idOrbitalState_Active_GPS_3:int;
	idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_InertialNavigation_3:int;
	idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_OrbitalState_Complex_3:int;
	idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Active_StarPlanetTracker_3:int;
	idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState_3:int;
	idOrbitalState_Complex_OrbitalState2_2, idOrbitalState_Complex_OrbitalState2_3:int;
	DockingApproach_2:bool;
	DockingApproachComplete_2:bool;
	DockingApproach_timer_2:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_targetState_2:int;
	idDockingApproach_DockingApproach_2:int;
	idDockingApproach_dockingSensor_2:int;
	idMissionPhaseStates_DockingApproach_2:int;
	let

		
	(CaptureApproach_timer_2) 
	= if not (idCaptureApproach_CaptureApproach_1= 0 ) then CaptureApproach_CaptureApproach_du(CaptureApproach_timer_1, CaptureApproach_timer_upper_limit)

		 else (CaptureApproach_timer_1);

		


		(idCaptureApproach_CaptureApproach_2, CaptureApproachFailed_2, CaptureApproach_timer_3, CaptureApproachComplete_2, idCaptureApproach_OrbitalState_Active_2, idChart_MissionPhaseStates_2, idMissionPhaseStates_CaptureApproach_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idDockingApproach_DockingApproach_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2)
	= if not (idCaptureApproach_CaptureApproach_1= 0 ) then CaptureApproach_CaptureApproach_node(idCaptureApproach_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_2, OrbitalState_Position_1, NONE, OrbitalState_Velocity_1, OrbitalState_Attitude_1, OrbitalState_Time_1, CaptureApproach_timer_upper_limit, GOOD, POOR, thrust_status_1, EXIST, fuel_status_1, CaptureApproachComplete_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1)

		 else (idCaptureApproach_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_2, CaptureApproachComplete_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1);

		

		

		(idCaptureApproach_OrbitalState_Active_3, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, idOrbitalState_Active_OrbitalState_Complex_3, idOrbitalState_Complex_OrbitalState_3, idOrbitalState_Complex_OrbitalState2_3, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, idOrbitalState_Active_GPS_3, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idOrbitalState_Active_StarPlanetTracker_3, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, idOrbitalState_Active_InertialNavigation_3)
	= if not (idCaptureApproach_OrbitalState_Active_2= 0 ) then CaptureApproach_OrbitalState_Active_node(idCaptureApproach_OrbitalState_Active_2, GOOD, NONE, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, POOR, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, idOrbitalState_Active_GPS_2, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idOrbitalState_Active_StarPlanetTracker_2, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, idOrbitalState_Active_InertialNavigation_2, GroundTrack_OrbitalPosition, GroundTrack_OrbitalVelocity, GroundTrack_Time, RealTimeClock_time, GPS_timer_upper_limit, AVAILABLE, BRIGHT, GPS_receiverAvailability_status, GPS_satelliteVisibility_status, sunlight_status, StarPlanetTracker_timer_upper_limit, StarPlanetTracker_planetVisibility, StarPlanetTracker_starVisibility, opticsAvailability_status, InertialNavigation_timer_upper_limit, InertialNavigation_time, VALID_1, callibrate)

		 else (idCaptureApproach_OrbitalState_Active_2, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, idOrbitalState_Active_GPS_2, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idOrbitalState_Active_StarPlanetTracker_2, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, idOrbitalState_Active_InertialNavigation_2);

		

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, JointMission, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach) 
	= (idChart_MissionPhaseStates_2, ApproachOrbitComplete_1, CaptureApproachComplete_2, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, CaptureApproachFailed_2, CaptureApproach_timer_3, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idCaptureApproach_CaptureApproach_2, idCaptureApproach_OrbitalState_Active_3, idMissionPhaseStates_CaptureApproach_2, idOrbitalState_Active_GPS_3, idOrbitalState_Active_InertialNavigation_3, idOrbitalState_Active_OrbitalState_Complex_3, idOrbitalState_Active_StarPlanetTracker_3, idOrbitalState_Complex_OrbitalState_3, idOrbitalState_Complex_OrbitalState2_3, JointMission_1, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idDockingApproach_DockingApproach_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2);
	
	--add unused variables
	(AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, dockingSensor_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, dockingSensor_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_JOINTMISSION_IDL:

	 	let

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, JointMission, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1);
	
	--add unused variables
	(AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, dockingSensor_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, dockingSensor_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_DOCKINGAPPROACH_IDL:

	 var 	idChart_MissionPhaseStates_2:int;
	CaptureApproachFailed_2:bool;
	CaptureApproach_timer_2:int;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteTime_2:int;
	GPS_AbsoluteVelocity_2:int;
	GPS_timer_2:int;
	InertialNavigation_AbsoluteAttitude_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	InertialNavigation_timer_2:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Time_2:int;
	OrbitalState_Velocity_2:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	StarPlanetTracker_timer_2:int;
	idCaptureApproach_CaptureApproach_2:int;
	idCaptureApproach_OrbitalState_Active_2:int;
	idMissionPhaseStates_CaptureApproach_2:int;
	idOrbitalState_Active_GPS_2:int;
	idOrbitalState_Active_InertialNavigation_2:int;
	idOrbitalState_Active_OrbitalState_Complex_2:int;
	idOrbitalState_Active_StarPlanetTracker_2:int;
	idOrbitalState_Complex_OrbitalState_2:int;
	idOrbitalState_Complex_OrbitalState2_2:int;
	DockingApproach_2:bool;
	DockingApproachComplete_2:bool;
	DockingApproach_timer_2, DockingApproach_timer_3:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_targetState_2:int;
	idDockingApproach_DockingApproach_2:int;
	idDockingApproach_dockingSensor_2, idDockingApproach_dockingSensor_3:int;
	idMissionPhaseStates_DockingApproach_2:int;
	AttemptingToDock_2:bool;
	LatchCaptureComplete_2:bool;
	LatchCapture_timer_2:int;
	dockingSensor_timer_2, dockingSensor_timer_3, dockingSensor_timer_4:int;
	idLatchCapture_LatchCaptureCheck_2:int;
	idLatchCapture_latch_2:int;
	idMissionPhaseStates_LatchCapture_2:int;
	latch_status_2:int;
	let

		
	(DockingApproach_timer_2) 
	= if not (idDockingApproach_DockingApproach_1= 0 ) then DockingApproach_DockingApproach_du(DockingApproach_timer_1, DockingApproach_timer_upper_limit)

		 else (DockingApproach_timer_1);

		


		(idDockingApproach_DockingApproach_2, DockingApproach_timer_3, DockingApproach_2, DockingApproachComplete_2, dockingSensor_timer_2, idChart_MissionPhaseStates_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, latch_status_2, idCaptureApproach_CaptureApproach_2, idMissionPhaseStates_CaptureApproach_2, CaptureApproachFailed_2, CaptureApproach_timer_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idCaptureApproach_OrbitalState_Active_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2)
	= if not (idDockingApproach_DockingApproach_1= 0 ) then DockingApproach_DockingApproach_node(idDockingApproach_DockingApproach_1, DockingApproach_timer_2, dockingSensor_RelativePosition_1, NONE, dockingSensor_RelativeVelocity_1, dockingSensor_RelativeAttitude_1, DockingApproach_timer_upper_limit, GOOD, dockingSensor_targetState_1, POOR, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idChart_MissionPhaseStates_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, CLOSEDBUTUNMATED, INDETERMINATE, LatchCaptureComplete_1, LatchCapture_timer_1, MATED, OPEN, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, thrust_status_1, EXIST, fuel_status_1, idCaptureApproach_CaptureApproach_1, idMissionPhaseStates_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_OrbitalState_Active_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1)

		 else (idDockingApproach_DockingApproach_1, DockingApproach_timer_2, DockingApproach_1, DockingApproachComplete_1, dockingSensor_timer_1, idChart_MissionPhaseStates_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, idCaptureApproach_CaptureApproach_1, idMissionPhaseStates_CaptureApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_OrbitalState_Active_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1);

		

		
	(dockingSensor_timer_3) 
	= if not (idDockingApproach_dockingSensor_2= 0 ) then DockingApproach_dockingSensor_du(dockingSensor_timer_2, dockingSensor_timer_upper_limit)

		 else (dockingSensor_timer_2);

		


		(idDockingApproach_dockingSensor_3, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, dockingSensor_timer_4)
	= if not (idDockingApproach_dockingSensor_2= 0 ) then DockingApproach_dockingSensor_node(idDockingApproach_dockingSensor_2, NONE, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockVisibility_status, GOOD, opticsAvailability_status, AVAILABLE, sunlight_status, BRIGHT, dockingSensor_timer_3, POOR, dockingSensor_timer_upper_limit)

		 else (idDockingApproach_dockingSensor_2, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, dockingSensor_timer_3);

		

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, JointMission, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, dockingSensor_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (idChart_MissionPhaseStates_2, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, CaptureApproachFailed_2, CaptureApproach_timer_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idCaptureApproach_CaptureApproach_2, idCaptureApproach_OrbitalState_Active_2, idMissionPhaseStates_CaptureApproach_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, JointMission_1, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_3, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idDockingApproach_DockingApproach_2, idDockingApproach_dockingSensor_3, idMissionPhaseStates_DockingApproach_2, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_2, dockingSensor_timer_4, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, latch_status_2);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_JOINTSTABILIZE_IDL:

	 	let

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, JointMission, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, dockingSensor_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, dockingSensor_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_LATCHCAPTURE_IDL:

	 var 	idChart_MissionPhaseStates_2:int;
	DockingApproach_2:bool;
	DockingApproachComplete_2:bool;
	DockingApproach_timer_2:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_targetState_2:int;
	idDockingApproach_DockingApproach_2:int;
	idDockingApproach_dockingSensor_2:int;
	idMissionPhaseStates_DockingApproach_2:int;
	AttemptingToDock_2:bool;
	LatchCaptureComplete_2:bool;
	LatchCapture_timer_2, LatchCapture_timer_3:int;
	idLatchCapture_LatchCaptureCheck_2:int;
	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	idMissionPhaseStates_LatchCapture_2:int;
	latch_status_2:int;
	let

		
	(LatchCapture_timer_2) 
	= if not (idLatchCapture_LatchCaptureCheck_1= 0 ) then LatchCapture_LatchCaptureCheck_du(LatchCapture_timer_1, LatchCapture_timer_upper_limit)

		 else (LatchCapture_timer_1);

		


		(idLatchCapture_LatchCaptureCheck_2, LatchCapture_timer_3, LatchCaptureComplete_2, AttemptingToDock_2, idChart_MissionPhaseStates_2, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, idDockingApproach_DockingApproach_2, idMissionPhaseStates_DockingApproach_2, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idDockingApproach_dockingSensor_2)
	= if not (idLatchCapture_LatchCaptureCheck_1= 0 ) then LatchCapture_LatchCaptureCheck_node(idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_2, latch_status_1, OPEN, LatchCapture_timer_upper_limit, MATED, LatchCaptureComplete_1, CLOSEDBUTUNMATED, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, idDockingApproach_DockingApproach_1, idMissionPhaseStates_DockingApproach_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, GOOD, NONE, POOR, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_dockingSensor_1)

		 else (idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_2, LatchCaptureComplete_1, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, idDockingApproach_DockingApproach_1, idMissionPhaseStates_DockingApproach_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_dockingSensor_1);

		

		

		(idLatchCapture_latch_3, latch_status_2)
	= if not (idLatchCapture_latch_2= 0 ) then LatchCapture_latch_node(idLatchCapture_latch_2, INDETERMINATE, latch_status_1, OPEN, MATED, CLOSEDBUTUNMATED)

		 else (idLatchCapture_latch_2, latch_status_1);

		

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, CaptureApproachFailed, CaptureApproach_timer, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idMissionPhaseStates_CaptureApproach, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, JointMission, DockingApproach, DockingApproachComplete, DockingApproach_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idMissionPhaseStates_DockingApproach, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, dockingSensor_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (idChart_MissionPhaseStates_2, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idDockingApproach_DockingApproach_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_3, dockingSensor_timer_1, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_3, idMissionPhaseStates_LatchCapture_2, latch_status_2);
	

	tel

	until true restart POINTChart_MissionPhaseStates



tel


--***************************************************State :Chart_Chart Automaton***************************************************

node Chart_Chart_node(idChart_Chart_1:int;
	AttemptingToDock_1:bool;
	CLOSEDBUTUNMATED:int;
	CaptureApproachFailed_1:bool;
	CaptureApproach_timer_1:int;
	DockingApproach_1:bool;
	DockingApproachComplete_1:bool;
	DockingApproach_timer_1:int;
	FailedApproach_1:bool;
	GOOD:int;
	GPS_AbsolutePosition_1:int;
	GPS_AbsoluteTime_1:int;
	GPS_AbsoluteVelocity_1:int;
	GPS_timer_1:int;
	INDETERMINATE:int;
	InertialNavigation_AbsoluteAttitude_1:int;
	InertialNavigation_AbsolutePosition_1:int;
	InertialNavigation_AbsoluteVelocity_1:int;
	InertialNavigation_timer_1:int;
	JointMission_1:bool;
	LatchCaptureComplete_1:bool;
	LatchCapture_timer_1:int;
	MATED:int;
	NONE:int;
	OPEN:int;
	OrbitalState_Attitude_1:int;
	OrbitalState_Position_1:int;
	OrbitalState_Time_1:int;
	OrbitalState_Velocity_1:int;
	POOR:int;
	StarPlanetTracker_AbsoluteAttitude_1:int;
	StarPlanetTracker_AbsolutePosition_1:int;
	StarPlanetTracker_AbsoluteTime_1:int;
	StarPlanetTracker_AbsoluteVelocity_1:int;
	StarPlanetTracker_timer_1:int;
	dockingSensor_RelativeAttitude_1:int;
	dockingSensor_RelativePosition_1:int;
	dockingSensor_RelativeVelocity_1:int;
	dockingSensor_targetState_1:int;
	idCaptureApproach_CaptureApproach_1:int;
	idCaptureApproach_OrbitalState_Active_1:int;
	idChart_MissionPhaseStates_1:int;
	idDockingApproach_DockingApproach_1:int;
	idDockingApproach_dockingSensor_1:int;
	idLatchCapture_LatchCaptureCheck_1:int;
	idLatchCapture_latch_1:int;
	idMissionPhaseStates_CaptureApproach_1:int;
	idMissionPhaseStates_DockingApproach_1:int;
	idMissionPhaseStates_LatchCapture_1:int;
	idOrbitalState_Active_GPS_1:int;
	idOrbitalState_Active_InertialNavigation_1:int;
	idOrbitalState_Active_OrbitalState_Complex_1:int;
	idOrbitalState_Active_StarPlanetTracker_1:int;
	idOrbitalState_Complex_OrbitalState_1:int;
	idOrbitalState_Complex_OrbitalState2_1:int;
	latch_status_1:int;
	AVAILABLE:bool;
	ApproachOrbitComplete_1:bool;
	BRIGHT:bool;
	CaptureApproachComplete_1:bool;
	CaptureApproach_timer_upper_limit:int;
	DockingApproach_timer_upper_limit:int;
	EXIST:int;
	FarApproachComplete_1:bool;
	GPS_receiverAvailability_status:bool;
	GPS_satelliteVisibility_status:int;
	GPS_timer_upper_limit:int;
	GroundTrack_OrbitalPosition:int;
	GroundTrack_OrbitalVelocity:int;
	GroundTrack_Time:int;
	InertialNavigation_time:bool;
	InertialNavigation_timer_upper_limit:int;
	LatchCapture_timer_upper_limit:int;
	ProximityOperationsComplete_1:bool;
	RealTimeClock_time:int;
	StageTransition:int;
	StarPlanetTracker_planetVisibility:int;
	StarPlanetTracker_starVisibility:int;
	StarPlanetTracker_timer_upper_limit:int;
	VALID_1:bool;
	callibrate:bool;
	dockVisibility_status:int;
	dockingSensor_timer_1:int;
	dockingSensor_timer_upper_limit:int;
	fuel_status_1:int;
	opticsAvailability_status:bool;
	sunlight_status:bool;
	thrust_status_1:int)

returns (idChart_Chart:int;
	AttemptingToDock:bool;
	CaptureApproachFailed:bool;
	CaptureApproach_timer:int;
	DockingApproach:bool;
	DockingApproachComplete:bool;
	DockingApproach_timer:int;
	FailedApproach:bool;
	GPS_AbsolutePosition:int;
	GPS_AbsoluteTime:int;
	GPS_AbsoluteVelocity:int;
	GPS_timer:int;
	InertialNavigation_AbsoluteAttitude:int;
	InertialNavigation_AbsolutePosition:int;
	InertialNavigation_AbsoluteVelocity:int;
	InertialNavigation_timer:int;
	JointMission:bool;
	LatchCaptureComplete:bool;
	LatchCapture_timer:int;
	OrbitalState_Attitude:int;
	OrbitalState_Position:int;
	OrbitalState_Time:int;
	OrbitalState_Velocity:int;
	StarPlanetTracker_AbsoluteAttitude:int;
	StarPlanetTracker_AbsolutePosition:int;
	StarPlanetTracker_AbsoluteTime:int;
	StarPlanetTracker_AbsoluteVelocity:int;
	StarPlanetTracker_timer:int;
	dockingSensor_RelativeAttitude:int;
	dockingSensor_RelativePosition:int;
	dockingSensor_RelativeVelocity:int;
	dockingSensor_targetState:int;
	idCaptureApproach_CaptureApproach:int;
	idCaptureApproach_OrbitalState_Active:int;
	idChart_MissionPhaseStates:int;
	idDockingApproach_DockingApproach:int;
	idDockingApproach_dockingSensor:int;
	idLatchCapture_LatchCaptureCheck:int;
	idLatchCapture_latch:int;
	idMissionPhaseStates_CaptureApproach:int;
	idMissionPhaseStates_DockingApproach:int;
	idMissionPhaseStates_LatchCapture:int;
	idOrbitalState_Active_GPS:int;
	idOrbitalState_Active_InertialNavigation:int;
	idOrbitalState_Active_OrbitalState_Complex:int;
	idOrbitalState_Active_StarPlanetTracker:int;
	idOrbitalState_Complex_OrbitalState:int;
	idOrbitalState_Complex_OrbitalState2:int;
	latch_status:int;
	ApproachOrbitComplete:bool;
	CaptureApproachComplete:bool;
	FarApproachComplete:bool;
	ProximityOperationsComplete:bool;
	dockingSensor_timer:int);


let

	 automaton chart_chart

	state POINTChart_Chart:
	unless (idChart_Chart_1=0) restart CHART_CHART_PARALLEL_ENTRY
	unless true  restart CHART_CHART_PARALLEL_IDL

	let

		(idChart_Chart, AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, DockingApproach_timer, FailedApproach, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, JointMission, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, dockingSensor_timer) 
	= (idChart_Chart_1, AttemptingToDock_1, CaptureApproachFailed_1, CaptureApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, FailedApproach_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, latch_status_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, dockingSensor_timer_1);
	

	tel



	state CHART_CHART_PARALLEL_ENTRY:

	 var 	idChart_Chart_2, idChart_Chart_3, idChart_Chart_4:int;
	AttemptingToDock_2:bool;
	CaptureApproachFailed_2:bool;
	CaptureApproach_timer_2:int;
	DockingApproach_2:bool;
	DockingApproachComplete_2:bool;
	DockingApproach_timer_2:int;
	FailedApproach_2:bool;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteTime_2:int;
	GPS_AbsoluteVelocity_2:int;
	GPS_timer_2:int;
	InertialNavigation_AbsoluteAttitude_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	InertialNavigation_timer_2:int;
	JointMission_2:bool;
	LatchCaptureComplete_2:bool;
	LatchCapture_timer_2:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Time_2:int;
	OrbitalState_Velocity_2:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	StarPlanetTracker_timer_2:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_targetState_2:int;
	idCaptureApproach_CaptureApproach_2:int;
	idCaptureApproach_OrbitalState_Active_2:int;
	idChart_MissionPhaseStates_2:int;
	idDockingApproach_DockingApproach_2:int;
	idDockingApproach_dockingSensor_2:int;
	idLatchCapture_LatchCaptureCheck_2:int;
	idLatchCapture_latch_2:int;
	idMissionPhaseStates_CaptureApproach_2:int;
	idMissionPhaseStates_DockingApproach_2:int;
	idMissionPhaseStates_LatchCapture_2:int;
	idOrbitalState_Active_GPS_2:int;
	idOrbitalState_Active_InertialNavigation_2:int;
	idOrbitalState_Active_OrbitalState_Complex_2:int;
	idOrbitalState_Active_StarPlanetTracker_2:int;
	idOrbitalState_Complex_OrbitalState_2:int;
	idOrbitalState_Complex_OrbitalState2_2:int;
	latch_status_2:int;
	let

		
	(idChart_MissionPhaseStates_2, idChart_Chart_2, FailedApproach_2, CaptureApproachFailed_2, CaptureApproach_timer_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idCaptureApproach_CaptureApproach_2, idCaptureApproach_OrbitalState_Active_2, idMissionPhaseStates_CaptureApproach_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, JointMission_2, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idDockingApproach_DockingApproach_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, latch_status_2) 
	= Chart_MissionPhaseStates_en(idChart_MissionPhaseStates_1, idChart_Chart_1, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GOOD, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, NONE, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, POOR, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, CLOSEDBUTUNMATED, INDETERMINATE, LatchCaptureComplete_1, LatchCapture_timer_1, MATED, OPEN, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, false);

	(idChart_Chart_3) 
	= Chart_thrust_en(idChart_Chart_2, false);

	(idChart_Chart_4) 
	= Chart_fuel_en(idChart_Chart_3, false);


	(idChart_Chart, AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, DockingApproach_timer, FailedApproach, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, JointMission, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status) 
	= (idChart_Chart_4, AttemptingToDock_2, CaptureApproachFailed_2, CaptureApproach_timer_2, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_2, FailedApproach_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, JointMission_2, LatchCaptureComplete_2, LatchCapture_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idCaptureApproach_CaptureApproach_2, idCaptureApproach_OrbitalState_Active_2, idChart_MissionPhaseStates_2, idDockingApproach_DockingApproach_2, idDockingApproach_dockingSensor_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, idMissionPhaseStates_CaptureApproach_2, idMissionPhaseStates_DockingApproach_2, idMissionPhaseStates_LatchCapture_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, latch_status_2);
	
	--add unused variables
	(ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, dockingSensor_timer) 
	= (ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, dockingSensor_timer_1);
	

	tel

	until true restart POINTChart_Chart



	state CHART_CHART_PARALLEL_IDL:

	 var 	AttemptingToDock_2:bool;
	CaptureApproachFailed_2:bool;
	CaptureApproach_timer_2:int;
	DockingApproach_2:bool;
	DockingApproachComplete_2:bool;
	DockingApproach_timer_2:int;
	FailedApproach_2:bool;
	GPS_AbsolutePosition_2:int;
	GPS_AbsoluteTime_2:int;
	GPS_AbsoluteVelocity_2:int;
	GPS_timer_2:int;
	InertialNavigation_AbsoluteAttitude_2:int;
	InertialNavigation_AbsolutePosition_2:int;
	InertialNavigation_AbsoluteVelocity_2:int;
	InertialNavigation_timer_2:int;
	JointMission_2:bool;
	LatchCaptureComplete_2:bool;
	LatchCapture_timer_2:int;
	OrbitalState_Attitude_2:int;
	OrbitalState_Position_2:int;
	OrbitalState_Time_2:int;
	OrbitalState_Velocity_2:int;
	StarPlanetTracker_AbsoluteAttitude_2:int;
	StarPlanetTracker_AbsolutePosition_2:int;
	StarPlanetTracker_AbsoluteTime_2:int;
	StarPlanetTracker_AbsoluteVelocity_2:int;
	StarPlanetTracker_timer_2:int;
	dockingSensor_RelativeAttitude_2:int;
	dockingSensor_RelativePosition_2:int;
	dockingSensor_RelativeVelocity_2:int;
	dockingSensor_targetState_2:int;
	idCaptureApproach_CaptureApproach_2:int;
	idCaptureApproach_OrbitalState_Active_2:int;
	idChart_MissionPhaseStates_2:int;
	idDockingApproach_DockingApproach_2:int;
	idDockingApproach_dockingSensor_2:int;
	idLatchCapture_LatchCaptureCheck_2:int;
	idLatchCapture_latch_2:int;
	idMissionPhaseStates_CaptureApproach_2:int;
	idMissionPhaseStates_DockingApproach_2:int;
	idMissionPhaseStates_LatchCapture_2:int;
	idOrbitalState_Active_GPS_2:int;
	idOrbitalState_Active_InertialNavigation_2:int;
	idOrbitalState_Active_OrbitalState_Complex_2:int;
	idOrbitalState_Active_StarPlanetTracker_2:int;
	idOrbitalState_Complex_OrbitalState_2:int;
	idOrbitalState_Complex_OrbitalState2_2:int;
	latch_status_2:int;
	ApproachOrbitComplete_2:bool;
	CaptureApproachComplete_2:bool;
	FarApproachComplete_2:bool;
	ProximityOperationsComplete_2:bool;
	dockingSensor_timer_2:int;
	let

		

		(idChart_MissionPhaseStates_2, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, FailedApproach_2, CaptureApproachFailed_2, CaptureApproach_timer_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, idCaptureApproach_CaptureApproach_2, idCaptureApproach_OrbitalState_Active_2, idMissionPhaseStates_CaptureApproach_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, JointMission_2, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idDockingApproach_DockingApproach_2, idDockingApproach_dockingSensor_2, idMissionPhaseStates_DockingApproach_2, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_2, dockingSensor_timer_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, latch_status_2)
	= if not (idChart_MissionPhaseStates_1= 0 ) then Chart_MissionPhaseStates_node(idChart_MissionPhaseStates_1, StageTransition, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GOOD, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, NONE, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, POOR, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1, CaptureApproach_timer_upper_limit, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, EXIST, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, fuel_status_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, thrust_status_1, AVAILABLE, BRIGHT, GPS_receiverAvailability_status, GPS_satelliteVisibility_status, GPS_timer_upper_limit, GroundTrack_OrbitalPosition, GroundTrack_OrbitalVelocity, GroundTrack_Time, InertialNavigation_time, InertialNavigation_timer_upper_limit, RealTimeClock_time, StarPlanetTracker_planetVisibility, StarPlanetTracker_starVisibility, StarPlanetTracker_timer_upper_limit, VALID_1, callibrate, opticsAvailability_status, sunlight_status, DockingApproach_timer_upper_limit, AttemptingToDock_1, CLOSEDBUTUNMATED, INDETERMINATE, LatchCaptureComplete_1, LatchCapture_timer_1, MATED, OPEN, dockingSensor_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, dockingSensor_timer_upper_limit, dockVisibility_status, LatchCapture_timer_upper_limit)

		 else (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, CaptureApproachFailed_1, CaptureApproach_timer_1, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idMissionPhaseStates_CaptureApproach_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, JointMission_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idMissionPhaseStates_DockingApproach_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, dockingSensor_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);

		

		

	(idChart_Chart, AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, DockingApproach_timer, FailedApproach, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, JointMission, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, dockingSensor_timer) 
	= (idChart_Chart_1, AttemptingToDock_2, CaptureApproachFailed_2, CaptureApproach_timer_2, DockingApproach_2, DockingApproachComplete_2, DockingApproach_timer_2, FailedApproach_2, GPS_AbsolutePosition_2, GPS_AbsoluteTime_2, GPS_AbsoluteVelocity_2, GPS_timer_2, InertialNavigation_AbsoluteAttitude_2, InertialNavigation_AbsolutePosition_2, InertialNavigation_AbsoluteVelocity_2, InertialNavigation_timer_2, JointMission_2, LatchCaptureComplete_2, LatchCapture_timer_2, OrbitalState_Attitude_2, OrbitalState_Position_2, OrbitalState_Time_2, OrbitalState_Velocity_2, StarPlanetTracker_AbsoluteAttitude_2, StarPlanetTracker_AbsolutePosition_2, StarPlanetTracker_AbsoluteTime_2, StarPlanetTracker_AbsoluteVelocity_2, StarPlanetTracker_timer_2, dockingSensor_RelativeAttitude_2, dockingSensor_RelativePosition_2, dockingSensor_RelativeVelocity_2, dockingSensor_targetState_2, idCaptureApproach_CaptureApproach_2, idCaptureApproach_OrbitalState_Active_2, idChart_MissionPhaseStates_2, idDockingApproach_DockingApproach_2, idDockingApproach_dockingSensor_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, idMissionPhaseStates_CaptureApproach_2, idMissionPhaseStates_DockingApproach_2, idMissionPhaseStates_LatchCapture_2, idOrbitalState_Active_GPS_2, idOrbitalState_Active_InertialNavigation_2, idOrbitalState_Active_OrbitalState_Complex_2, idOrbitalState_Active_StarPlanetTracker_2, idOrbitalState_Complex_OrbitalState_2, idOrbitalState_Complex_OrbitalState2_2, latch_status_2, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, dockingSensor_timer_2);
	

	tel

	until true restart POINTChart_Chart



tel


--***************************************************State :Chart_Chart Automaton***************************************************

node DockingApproachExample_Ext_Chart(GroundTrack_OrbitalPosition:int;
	GroundTrack_OrbitalVelocity:int;
	dockVisibility_status:int;
	opticsAvailability_status:bool;
	sunlight_status:bool;
	GPS_satelliteVisibility_status:int;
	GPS_receiverAvailability_status:bool;
	StarPlanetTracker_planetVisibility:int;
	StarPlanetTracker_starVisibility:int;
	InertialNavigation_time:bool;
	GroundTrack_Time:int;
	RealTimeClock_time:int;
	StageTransition:int)

returns (CaptureApproachComplete:bool;
	DockingApproachComplete:bool;
	AttemptingToDock:bool;
	LatchCaptureComplete:bool;
	DockingApproach:bool;
	ApproachOrbitComplete:bool;
	FarApproachComplete:bool;
	ProximityOperationsComplete:bool;
	FailedApproach:bool;
	JointMission:bool;
	CaptureApproachFailed:bool;
	LatchCapture_timer:int);


var CaptureApproachComplete_1: bool;

	DockingApproachComplete_1: bool;

	AttemptingToDock_1: bool;

	LatchCaptureComplete_1: bool;

	DockingApproach_1: bool;

	ApproachOrbitComplete_1: bool;

	FarApproachComplete_1: bool;

	ProximityOperationsComplete_1: bool;

	FailedApproach_1: bool;

	JointMission_1: bool;

	CaptureApproachFailed_1: bool;

	LatchCapture_timer_1: int;

	CaptureApproach_timer, CaptureApproach_timer_1: int;

	DockingApproach_timer, DockingApproach_timer_1: int;

	GPS_AbsolutePosition, GPS_AbsolutePosition_1: int;

	GPS_AbsoluteTime, GPS_AbsoluteTime_1: int;

	GPS_AbsoluteVelocity, GPS_AbsoluteVelocity_1: int;

	GPS_timer, GPS_timer_1: int;

	InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsoluteAttitude_1: int;

	InertialNavigation_AbsolutePosition, InertialNavigation_AbsolutePosition_1: int;

	InertialNavigation_AbsoluteVelocity, InertialNavigation_AbsoluteVelocity_1: int;

	InertialNavigation_timer, InertialNavigation_timer_1: int;

	OrbitalState_Attitude, OrbitalState_Attitude_1: int;

	OrbitalState_Position, OrbitalState_Position_1: int;

	OrbitalState_Time, OrbitalState_Time_1: int;

	OrbitalState_Velocity, OrbitalState_Velocity_1: int;

	StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsoluteAttitude_1: int;

	StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsolutePosition_1: int;

	StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteTime_1: int;

	StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_AbsoluteVelocity_1: int;

	StarPlanetTracker_timer, StarPlanetTracker_timer_1: int;

	VALID, VALID_1: bool;

	dockingSensor_RelativeAttitude, dockingSensor_RelativeAttitude_1: int;

	dockingSensor_RelativePosition, dockingSensor_RelativePosition_1: int;

	dockingSensor_RelativeVelocity, dockingSensor_RelativeVelocity_1: int;

	dockingSensor_targetState, dockingSensor_targetState_1: int;

	dockingSensor_timer, dockingSensor_timer_1: int;

	fuel_status, fuel_status_1: int;

	latch_status, latch_status_1: int;

	targetState, targetState_1: int;

	thrust_status, thrust_status_1: int;

	callibrate, callibrate_1: bool;

	idChart_Chart, idChart_Chart_1: int;

	idChart_thrust, idChart_thrust_1: int;

	idLatchCapture_latch, idLatchCapture_latch_1: int;

	idLatchCapture_LatchCaptureCheck, idLatchCapture_LatchCaptureCheck_1: int;

	idMissionPhaseStates_LatchCapture, idMissionPhaseStates_LatchCapture_1: int;

	idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_InertialNavigation_1: int;

	idOrbitalState_Active_GPS, idOrbitalState_Active_GPS_1: int;

	idOrbitalState_Complex_OrbitalState2, idOrbitalState_Complex_OrbitalState2_1: int;

	idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState_1: int;

	idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_OrbitalState_Complex_1: int;

	idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Active_StarPlanetTracker_1: int;

	idCaptureApproach_OrbitalState_Active, idCaptureApproach_OrbitalState_Active_1: int;

	idCaptureApproach_CaptureApproach, idCaptureApproach_CaptureApproach_1: int;

	idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_CaptureApproach_1: int;

	idDockingApproach_dockingSensor, idDockingApproach_dockingSensor_1: int;

	idDockingApproach_DockingApproach, idDockingApproach_DockingApproach_1: int;

	idMissionPhaseStates_DockingApproach, idMissionPhaseStates_DockingApproach_1: int;

	idChart_MissionPhaseStates, idChart_MissionPhaseStates_1: int;

		POOR: int;

		INDETERMINATE: int;

		BRIGHT: bool;

		StarPlanetTracker_timer_upper_limit: int;

		OPEN: int;

		dockingSensor_timer_upper_limit: int;

		MATED: int;

		AVAILABLE: bool;

		CaptureApproach_timer_upper_limit: int;

		InertialNavigation_timer_upper_limit: int;

		DockingApproach_timer_upper_limit: int;

		CLOSEDBUTUNMATED: int;

		NONE: int;

		EXPIRED: bool;

		EXIST: int;

		LatchCapture_timer_upper_limit: int;

		GOOD: int;

		GPS_timer_upper_limit: int;

	let

	CaptureApproachComplete_1 = false -> pre CaptureApproachComplete;

	DockingApproachComplete_1 = false -> pre DockingApproachComplete;

	AttemptingToDock_1 = false -> pre AttemptingToDock;

	LatchCaptureComplete_1 = false -> pre LatchCaptureComplete;

	DockingApproach_1 = false -> pre DockingApproach;

	ApproachOrbitComplete_1 = false -> pre ApproachOrbitComplete;

	FarApproachComplete_1 = false -> pre FarApproachComplete;

	ProximityOperationsComplete_1 = false -> pre ProximityOperationsComplete;

	FailedApproach_1 = false -> pre FailedApproach;

	JointMission_1 = false -> pre JointMission;

	CaptureApproachFailed_1 = false -> pre CaptureApproachFailed;

	LatchCapture_timer_1 = 0 -> pre LatchCapture_timer;

	CaptureApproach_timer_1 = 0 -> pre CaptureApproach_timer;

	DockingApproach_timer_1 = 0 -> pre DockingApproach_timer;

	GPS_AbsolutePosition_1 = 0 -> pre GPS_AbsolutePosition;

	GPS_AbsoluteTime_1 = 0 -> pre GPS_AbsoluteTime;

	GPS_AbsoluteVelocity_1 = 0 -> pre GPS_AbsoluteVelocity;

	GPS_timer_1 = 0 -> pre GPS_timer;

	InertialNavigation_AbsoluteAttitude_1 = 0 -> pre InertialNavigation_AbsoluteAttitude;

	InertialNavigation_AbsolutePosition_1 = 0 -> pre InertialNavigation_AbsolutePosition;

	InertialNavigation_AbsoluteVelocity_1 = 0 -> pre InertialNavigation_AbsoluteVelocity;

	InertialNavigation_timer_1 = 0 -> pre InertialNavigation_timer;

	OrbitalState_Attitude_1 = 0 -> pre OrbitalState_Attitude;

	OrbitalState_Position_1 = 0 -> pre OrbitalState_Position;

	OrbitalState_Time_1 = 0 -> pre OrbitalState_Time;

	OrbitalState_Velocity_1 = 0 -> pre OrbitalState_Velocity;

	StarPlanetTracker_AbsoluteAttitude_1 = 0 -> pre StarPlanetTracker_AbsoluteAttitude;

	StarPlanetTracker_AbsolutePosition_1 = 0 -> pre StarPlanetTracker_AbsolutePosition;

	StarPlanetTracker_AbsoluteTime_1 = 0 -> pre StarPlanetTracker_AbsoluteTime;

	StarPlanetTracker_AbsoluteVelocity_1 = 0 -> pre StarPlanetTracker_AbsoluteVelocity;

	StarPlanetTracker_timer_1 = 0 -> pre StarPlanetTracker_timer;

	VALID_1 = false -> pre VALID;

	dockingSensor_RelativeAttitude_1 = 0 -> pre dockingSensor_RelativeAttitude;

	dockingSensor_RelativePosition_1 = 0 -> pre dockingSensor_RelativePosition;

	dockingSensor_RelativeVelocity_1 = 0 -> pre dockingSensor_RelativeVelocity;

	dockingSensor_targetState_1 = 0 -> pre dockingSensor_targetState;

	dockingSensor_timer_1 = 0 -> pre dockingSensor_timer;

	fuel_status_1 = 0 -> pre fuel_status;

	latch_status_1 = 0 -> pre latch_status;

	targetState_1 = 0 -> pre targetState;

	thrust_status_1 = 0 -> pre thrust_status;

	callibrate_1 = false -> pre callibrate;

	idChart_Chart_1 = 0 -> pre idChart_Chart;

	idChart_thrust_1 = 0 -> pre idChart_thrust;

	idLatchCapture_latch_1 = 0 -> pre idLatchCapture_latch;

	idLatchCapture_LatchCaptureCheck_1 = 0 -> pre idLatchCapture_LatchCaptureCheck;

	idMissionPhaseStates_LatchCapture_1 = 0 -> pre idMissionPhaseStates_LatchCapture;

	idOrbitalState_Active_InertialNavigation_1 = 0 -> pre idOrbitalState_Active_InertialNavigation;

	idOrbitalState_Active_GPS_1 = 0 -> pre idOrbitalState_Active_GPS;

	idOrbitalState_Complex_OrbitalState2_1 = 0 -> pre idOrbitalState_Complex_OrbitalState2;

	idOrbitalState_Complex_OrbitalState_1 = 0 -> pre idOrbitalState_Complex_OrbitalState;

	idOrbitalState_Active_OrbitalState_Complex_1 = 0 -> pre idOrbitalState_Active_OrbitalState_Complex;

	idOrbitalState_Active_StarPlanetTracker_1 = 0 -> pre idOrbitalState_Active_StarPlanetTracker;

	idCaptureApproach_OrbitalState_Active_1 = 0 -> pre idCaptureApproach_OrbitalState_Active;

	idCaptureApproach_CaptureApproach_1 = 0 -> pre idCaptureApproach_CaptureApproach;

	idMissionPhaseStates_CaptureApproach_1 = 0 -> pre idMissionPhaseStates_CaptureApproach;

	idDockingApproach_dockingSensor_1 = 0 -> pre idDockingApproach_dockingSensor;

	idDockingApproach_DockingApproach_1 = 0 -> pre idDockingApproach_DockingApproach;

	idMissionPhaseStates_DockingApproach_1 = 0 -> pre idMissionPhaseStates_DockingApproach;

	idChart_MissionPhaseStates_1 = 0 -> pre idChart_MissionPhaseStates;

	POOR = 1;

	INDETERMINATE = 0;

	BRIGHT = true;

	StarPlanetTracker_timer_upper_limit = 6;

	OPEN = 1;

	dockingSensor_timer_upper_limit = 6;

	MATED = 3;

	AVAILABLE = true;

	CaptureApproach_timer_upper_limit = 11;

	InertialNavigation_timer_upper_limit = 6;

	DockingApproach_timer_upper_limit = 9;

	CLOSEDBUTUNMATED = 2;

	NONE = 0;

	EXPIRED = true;

	EXIST = 1;

	LatchCapture_timer_upper_limit = 8;

	GOOD = 2;

	GPS_timer_upper_limit = 6;

	



	(idChart_Chart, AttemptingToDock, CaptureApproachFailed, CaptureApproach_timer, DockingApproach, DockingApproachComplete, DockingApproach_timer, FailedApproach, GPS_AbsolutePosition, GPS_AbsoluteTime, GPS_AbsoluteVelocity, GPS_timer, InertialNavigation_AbsoluteAttitude, InertialNavigation_AbsolutePosition, InertialNavigation_AbsoluteVelocity, InertialNavigation_timer, JointMission, LatchCaptureComplete, LatchCapture_timer, OrbitalState_Attitude, OrbitalState_Position, OrbitalState_Time, OrbitalState_Velocity, StarPlanetTracker_AbsoluteAttitude, StarPlanetTracker_AbsolutePosition, StarPlanetTracker_AbsoluteTime, StarPlanetTracker_AbsoluteVelocity, StarPlanetTracker_timer, dockingSensor_RelativeAttitude, dockingSensor_RelativePosition, dockingSensor_RelativeVelocity, dockingSensor_targetState, idCaptureApproach_CaptureApproach, idCaptureApproach_OrbitalState_Active, idChart_MissionPhaseStates, idDockingApproach_DockingApproach, idDockingApproach_dockingSensor, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_CaptureApproach, idMissionPhaseStates_DockingApproach, idMissionPhaseStates_LatchCapture, idOrbitalState_Active_GPS, idOrbitalState_Active_InertialNavigation, idOrbitalState_Active_OrbitalState_Complex, idOrbitalState_Active_StarPlanetTracker, idOrbitalState_Complex_OrbitalState, idOrbitalState_Complex_OrbitalState2, latch_status, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, dockingSensor_timer)
	 = Chart_Chart_node(idChart_Chart_1, AttemptingToDock_1, CLOSEDBUTUNMATED, CaptureApproachFailed_1, CaptureApproach_timer_1, DockingApproach_1, DockingApproachComplete_1, DockingApproach_timer_1, FailedApproach_1, GOOD, GPS_AbsolutePosition_1, GPS_AbsoluteTime_1, GPS_AbsoluteVelocity_1, GPS_timer_1, INDETERMINATE, InertialNavigation_AbsoluteAttitude_1, InertialNavigation_AbsolutePosition_1, InertialNavigation_AbsoluteVelocity_1, InertialNavigation_timer_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, MATED, NONE, OPEN, OrbitalState_Attitude_1, OrbitalState_Position_1, OrbitalState_Time_1, OrbitalState_Velocity_1, POOR, StarPlanetTracker_AbsoluteAttitude_1, StarPlanetTracker_AbsolutePosition_1, StarPlanetTracker_AbsoluteTime_1, StarPlanetTracker_AbsoluteVelocity_1, StarPlanetTracker_timer_1, dockingSensor_RelativeAttitude_1, dockingSensor_RelativePosition_1, dockingSensor_RelativeVelocity_1, dockingSensor_targetState_1, idCaptureApproach_CaptureApproach_1, idCaptureApproach_OrbitalState_Active_1, idChart_MissionPhaseStates_1, idDockingApproach_DockingApproach_1, idDockingApproach_dockingSensor_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_CaptureApproach_1, idMissionPhaseStates_DockingApproach_1, idMissionPhaseStates_LatchCapture_1, idOrbitalState_Active_GPS_1, idOrbitalState_Active_InertialNavigation_1, idOrbitalState_Active_OrbitalState_Complex_1, idOrbitalState_Active_StarPlanetTracker_1, idOrbitalState_Complex_OrbitalState_1, idOrbitalState_Complex_OrbitalState2_1, latch_status_1, AVAILABLE, ApproachOrbitComplete_1, BRIGHT, CaptureApproachComplete_1, CaptureApproach_timer_upper_limit, DockingApproach_timer_upper_limit, EXIST, FarApproachComplete_1, GPS_receiverAvailability_status, GPS_satelliteVisibility_status, GPS_timer_upper_limit, GroundTrack_OrbitalPosition, GroundTrack_OrbitalVelocity, GroundTrack_Time, InertialNavigation_time, InertialNavigation_timer_upper_limit, LatchCapture_timer_upper_limit, ProximityOperationsComplete_1, RealTimeClock_time, StageTransition, StarPlanetTracker_planetVisibility, StarPlanetTracker_starVisibility, StarPlanetTracker_timer_upper_limit, VALID_1, callibrate, dockVisibility_status, dockingSensor_timer_1, dockingSensor_timer_upper_limit, fuel_status_1, opticsAvailability_status, sunlight_status, thrust_status_1);


--unused outputs
	VALID = false;

	callibrate = false;

	fuel_status = 0;

	idChart_thrust = 0;

	targetState = 0;

	thrust_status = 0;

	

tel



node DockingApproachExample_Ext (GroundTrack_OrbitalPosition_1_1 : int; GroundTrack_OrbitalVelocity_1_1 : int; dockVisibility_status_1_1 : int; opticsAvailability_status_1_1 : bool; sunlight_status_1_1 : bool; GPS_satelliteVisibility_status_1_1 : int; GPS_receiverAvailability_status_1_1 : bool; StarPlanetTracker_planetVisibility_1_1 : int; StarPlanetTracker_starVisibility_1_1 : int; InertialNavigation_time_1_1 : bool; GroundTrack_Time_1_1 : int; RealTimeClock_time_1_1 : int; StageTransition_1_1 : int)
returns (CaptureApproachComplete_1_1 : bool;
	DockingApproachComplete_2_1 : bool;
	AttemptingToDock_3_1 : bool;
	LatchCaptureComplete_4_1 : bool;
	DockingApproach_5_1 : bool;
	ApproachOrbitComplete_6_1 : bool;
	FarApproachComplete_7_1 : bool;
	ProximityOperationsComplete_8_1 : bool;
	FailedApproach_9_1 : bool;
	JointMission_10_1 : bool;
	CaptureApproachFailed_11_1 : bool;
	LatchCapture_timer_12_1 : int); 
var
	Chart_1_1 : bool; Chart_2_1 : bool; Chart_3_1 : bool; Chart_4_1 : bool; Chart_5_1 : bool; Chart_6_1 : bool; Chart_7_1 : bool; Chart_8_1 : bool; Chart_9_1 : bool; Chart_10_1 : bool; Chart_11_1 : bool; Chart_12_1 : int;
let 
	(Chart_1_1, Chart_2_1, Chart_3_1, Chart_4_1, Chart_5_1, Chart_6_1, Chart_7_1, Chart_8_1, Chart_9_1, Chart_10_1, Chart_11_1, Chart_12_1) =  DockingApproachExample_Ext_Chart(GroundTrack_OrbitalPosition_1_1, GroundTrack_OrbitalVelocity_1_1, dockVisibility_status_1_1, opticsAvailability_status_1_1, sunlight_status_1_1, GPS_satelliteVisibility_status_1_1, GPS_receiverAvailability_status_1_1, StarPlanetTracker_planetVisibility_1_1, StarPlanetTracker_starVisibility_1_1, InertialNavigation_time_1_1, GroundTrack_Time_1_1, RealTimeClock_time_1_1, StageTransition_1_1);
	CaptureApproachComplete_1_1 = Chart_1_1;
	DockingApproachComplete_2_1 = Chart_2_1;
	AttemptingToDock_3_1 = Chart_3_1;
	LatchCaptureComplete_4_1 = Chart_4_1;
	DockingApproach_5_1 = Chart_5_1;
	ApproachOrbitComplete_6_1 = Chart_6_1;
	FarApproachComplete_7_1 = Chart_7_1;
	ProximityOperationsComplete_8_1 = Chart_8_1;
	FailedApproach_9_1 = Chart_9_1;
	JointMission_10_1 = Chart_10_1;
	CaptureApproachFailed_11_1 = Chart_11_1;
	LatchCapture_timer_12_1 = Chart_12_1;
tel

