-- This file has been generated by cocoSim


-- System nodes




node POINT__To__LogSubSystem_writeLogJunction639_1_Condition_Action(logging_OUT_Log_1:int)

returns (logging_OUT_Log:int);


var 	logging_OUT_Log_2:int;


let



	logging_OUT_Log_2 
	= 0;
	

	(logging_OUT_Log) 
	= (logging_OUT_Log_2);
	

tel






node LogSubSystem_writeLogJunction639__To__LogSubSystem_writeLogJunction640_1_Condition_Action(logging_OUT_Log_1:int)

returns (logging_OUT_Log:int);


var 	logging_OUT_Log_2:int;


let



	logging_OUT_Log_2 
	= 1;
	

	(logging_OUT_Log) 
	= (logging_OUT_Log_2);
	

tel


--***************************************************State :LogSubSystem_writeLog Automaton***************************************************

node LogSubSystem_writeLog_node(idLogSubSystem_writeLog_1:int;
	logging_OUT_Log_1:int;
	TLM_MODE_IN_Log_Message_ID:int;
	SYS_STAT_IN_Log_Message_ID:int;
	ALARM_IN_Log_Message_ID:int;
	CONFIG_IN_Log_Message_ID:int;
	IM_IN_Log_Message_ID:int)

returns (idLogSubSystem_writeLog:int;
	logging_OUT_Log:int);


let

	 automaton logsubsystem_writelog

	state POINTLogSubSystem_writeLog:
	unless (idLogSubSystem_writeLog_1=0) restart POINT__TO__LOGSUBSYSTEM_WRITELOGJUNCTION639_1



	let

		(idLogSubSystem_writeLog, logging_OUT_Log) 
	= (idLogSubSystem_writeLog_1, logging_OUT_Log_1);
	

	tel



	state POINT__TO__LOGSUBSYSTEM_WRITELOGJUNCTION639_1:

	 var 	logging_OUT_Log_2, logging_OUT_Log_3:int;
	let

		

-- transition trace :
	--POINT__To__Junction639_1, Junction639__To__Junction640_1
		-- condition Action : logging_OUT_Log=0;
		
		(logging_OUT_Log_2) 
	= POINT__To__LogSubSystem_writeLogJunction639_1_Condition_Action(logging_OUT_Log_1);
		

		-- condition Action : logging_OUT_Log=1;
		
		(logging_OUT_Log_3) 
	= 
		 if (( (TLM_MODE_IN_Log_Message_ID>0) or (SYS_STAT_IN_Log_Message_ID>0) or (ALARM_IN_Log_Message_ID>0) or (CONFIG_IN_Log_Message_ID>0) or (IM_IN_Log_Message_ID>0) )) then 
		LogSubSystem_writeLogJunction639__To__LogSubSystem_writeLogJunction640_1_Condition_Action(logging_OUT_Log_2)
		 else (logging_OUT_Log_2);
		

	(idLogSubSystem_writeLog, logging_OUT_Log) 
	= 
		 if (( (TLM_MODE_IN_Log_Message_ID>0) or (SYS_STAT_IN_Log_Message_ID>0) or (ALARM_IN_Log_Message_ID>0) or (CONFIG_IN_Log_Message_ID>0) or (IM_IN_Log_Message_ID>0) )) then 
		(idLogSubSystem_writeLog_1, logging_OUT_Log_3)
		 else (idLogSubSystem_writeLog_1, logging_OUT_Log_2);


	tel

	until true restart POINTLogSubSystem_writeLog



tel


--***************************************************State :LogSubSystem_writeLog Automaton***************************************************

node writeLog(TLM_MODE_IN_Log_Message_ID:int;
	SYS_STAT_IN_Log_Message_ID:int;
	ALARM_IN_Log_Message_ID:int;
	CONFIG_IN_Log_Message_ID:int;
	IM_IN_Log_Message_ID:int)

returns (logging_OUT_Log:int);


var logging_OUT_Log_1: int;

	idLogSubSystem_writeLog, idLogSubSystem_writeLog_1: int;

	let

	logging_OUT_Log_1 = 0 -> pre logging_OUT_Log;

	idLogSubSystem_writeLog_1 = 0 -> pre idLogSubSystem_writeLog;

	



	(idLogSubSystem_writeLog, logging_OUT_Log)
	 = LogSubSystem_writeLog_node(idLogSubSystem_writeLog_1, logging_OUT_Log_1, TLM_MODE_IN_Log_Message_ID, SYS_STAT_IN_Log_Message_ID, ALARM_IN_Log_Message_ID, CONFIG_IN_Log_Message_ID, IM_IN_Log_Message_ID);


--unused outputs
	

tel











-- Entry action for state :LogSubSystem_LOG
node LogSubSystem_LOG_en(idLogSubSystem_LogSubSystem_1:int;
	logging_OUT_Logging_Failed_1:bool;
	TLM_MODE_IN_Log_Message_ID:int;
	SYS_STAT_IN_Log_Message_ID:int;
	ALARM_IN_Log_Message_ID:int;
	CONFIG_IN_Log_Message_ID:int;
	IM_IN_Log_Message_ID:int;
	logging_OUT_Log_1:int;
	isInner:bool)

returns (idLogSubSystem_LogSubSystem:int;
	logging_OUT_Logging_Failed:bool;
	logging_OUT_Log:int);


var 	idLogSubSystem_LogSubSystem_2:int;
	logging_OUT_Logging_Failed_2:bool;
	logging_OUT_Log_2:int;


let



	-- set state as active 
	idLogSubSystem_LogSubSystem_2 
	= 630;
	

	logging_OUT_Logging_Failed_2 
	= if (not isInner) then false
	 else logging_OUT_Logging_Failed_1;
	

	logging_OUT_Log_2 
	= if (not isInner) then writeLog(TLM_MODE_IN_Log_Message_ID,SYS_STAT_IN_Log_Message_ID,ALARM_IN_Log_Message_ID,CONFIG_IN_Log_Message_ID,IM_IN_Log_Message_ID)
	 else logging_OUT_Log_1;
	

	(idLogSubSystem_LogSubSystem, logging_OUT_Logging_Failed, logging_OUT_Log) 
	= (idLogSubSystem_LogSubSystem_2, logging_OUT_Logging_Failed_2, logging_OUT_Log_2);
	

tel





--During action for state :LogSubSystem_LOG
node LogSubSystem_LOG_du(logging_OUT_Logging_Failed_1:bool;
	TLM_MODE_IN_Log_Message_ID:int;
	SYS_STAT_IN_Log_Message_ID:int;
	ALARM_IN_Log_Message_ID:int;
	CONFIG_IN_Log_Message_ID:int;
	IM_IN_Log_Message_ID:int;
	logging_OUT_Log_1:int)

returns (logging_OUT_Logging_Failed:bool;
	logging_OUT_Log:int);


var 	logging_OUT_Logging_Failed_2:bool;
	logging_OUT_Log_2:int;


let



	logging_OUT_Logging_Failed_2 
	= false;
	

	logging_OUT_Log_2 
	= writeLog(TLM_MODE_IN_Log_Message_ID,SYS_STAT_IN_Log_Message_ID,ALARM_IN_Log_Message_ID,CONFIG_IN_Log_Message_ID,IM_IN_Log_Message_ID);
	

	(logging_OUT_Logging_Failed, logging_OUT_Log) 
	= (logging_OUT_Logging_Failed_2, logging_OUT_Log_2);
	

tel





-- Exit action for state :LogSubSystem_LOG
node LogSubSystem_LOG_ex(logging_OUT_Logging_Failed_1:bool;
	TLM_MODE_IN_Log_Message_ID:int;
	SYS_STAT_IN_Log_Message_ID:int;
	ALARM_IN_Log_Message_ID:int;
	CONFIG_IN_Log_Message_ID:int;
	IM_IN_Log_Message_ID:int;
	logging_OUT_Log_1:int;
	idLogSubSystem_LogSubSystem_1:int;
	isInner:bool)

returns (logging_OUT_Logging_Failed:bool;
	logging_OUT_Log:int;
	idLogSubSystem_LogSubSystem:int);


var 	logging_OUT_Logging_Failed_2:bool;
	logging_OUT_Log_2:int;
	idLogSubSystem_LogSubSystem_2:int;


let



	logging_OUT_Logging_Failed_2 
	= if (not isInner) then false
	 else logging_OUT_Logging_Failed_1;
	

	logging_OUT_Log_2 
	= if (not isInner) then writeLog(TLM_MODE_IN_Log_Message_ID,SYS_STAT_IN_Log_Message_ID,ALARM_IN_Log_Message_ID,CONFIG_IN_Log_Message_ID,IM_IN_Log_Message_ID)
	 else logging_OUT_Log_1;
	

	-- set state as inactive 
	idLogSubSystem_LogSubSystem_2
	 = if (not isInner) then 0 else idLogSubSystem_LogSubSystem_1;


	(logging_OUT_Logging_Failed, logging_OUT_Log, idLogSubSystem_LogSubSystem) 
	= (logging_OUT_Logging_Failed_2, logging_OUT_Log_2, idLogSubSystem_LogSubSystem_1);
	

tel






-- Entry action for state :LogSubSystem_NOT_ON
node LogSubSystem_NOT_ON_en(idLogSubSystem_LogSubSystem_1:int;
	logging_OUT_Log_1:int;
	isInner:bool)

returns (idLogSubSystem_LogSubSystem:int;
	logging_OUT_Log:int);


var 	idLogSubSystem_LogSubSystem_2:int;
	logging_OUT_Log_2:int;


let



	-- set state as active 
	idLogSubSystem_LogSubSystem_2 
	= 629;
	

	logging_OUT_Log_2 
	= if (not isInner) then 0
	 else logging_OUT_Log_1;
	

	(idLogSubSystem_LogSubSystem, logging_OUT_Log) 
	= (idLogSubSystem_LogSubSystem_2, logging_OUT_Log_2);
	

tel





--During action for state :LogSubSystem_NOT_ON
node LogSubSystem_NOT_ON_du(logging_OUT_Log_1:int)

returns (logging_OUT_Log:int);


var 	logging_OUT_Log_2:int;


let



	logging_OUT_Log_2 
	= 0;
	

	(logging_OUT_Log) 
	= (logging_OUT_Log_2);
	

tel





-- Exit action for state :LogSubSystem_NOT_ON
node LogSubSystem_NOT_ON_ex(logging_OUT_Log_1:int;
	idLogSubSystem_LogSubSystem_1:int;
	isInner:bool)

returns (logging_OUT_Log:int;
	idLogSubSystem_LogSubSystem:int);


var 	logging_OUT_Log_2:int;
	idLogSubSystem_LogSubSystem_2:int;


let



	logging_OUT_Log_2 
	= if (not isInner) then 0
	 else logging_OUT_Log_1;
	

	-- set state as inactive 
	idLogSubSystem_LogSubSystem_2
	 = if (not isInner) then 0 else idLogSubSystem_LogSubSystem_1;


	(logging_OUT_Log, idLogSubSystem_LogSubSystem) 
	= (logging_OUT_Log_2, idLogSubSystem_LogSubSystem_1);
	

tel


--***************************************************State :LogSubSystem_LogSubSystem Automaton***************************************************

node LogSubSystem_LogSubSystem_node(idLogSubSystem_LogSubSystem_1:int;
	TLM_MODE_IN_System_On:bool;
	ALARM_IN_Log_Message_ID:int;
	CONFIG_IN_Log_Message_ID:int;
	IM_IN_Log_Message_ID:int;
	SYS_STAT_IN_Log_Message_ID:int;
	TLM_MODE_IN_Log_Message_ID:int;
	logging_OUT_Log_1:int;
	logging_OUT_Logging_Failed_1:bool)

returns (idLogSubSystem_LogSubSystem:int;
	logging_OUT_Log:int;
	logging_OUT_Logging_Failed:bool);


let

	 automaton logsubsystem_logsubsystem

	state POINTLogSubSystem_LogSubSystem:
	unless (idLogSubSystem_LogSubSystem_1=0) and ( TLM_MODE_IN_System_On ) restart POINT__TO__LOGSUBSYSTEM_LOG_1



	unless (idLogSubSystem_LogSubSystem_1=0) restart POINT__TO__LOGSUBSYSTEM_NOT_ON_2



	unless (idLogSubSystem_LogSubSystem_1=629) and ( TLM_MODE_IN_System_On ) restart LOGSUBSYSTEM_NOT_ON__TO__LOGSUBSYSTEM_LOG_1



	unless (idLogSubSystem_LogSubSystem_1=630) and ( not TLM_MODE_IN_System_On ) restart LOGSUBSYSTEM_LOG__TO__LOGSUBSYSTEM_NOT_ON_1



	unless (idLogSubSystem_LogSubSystem_1=629) restart LOGSUBSYSTEM_NOT_ON_IDL

	unless (idLogSubSystem_LogSubSystem_1=630) restart LOGSUBSYSTEM_LOG_IDL

	let

		(idLogSubSystem_LogSubSystem, logging_OUT_Log, logging_OUT_Logging_Failed) 
	= (idLogSubSystem_LogSubSystem_1, logging_OUT_Log_1, logging_OUT_Logging_Failed_1);
	

	tel



	state POINT__TO__LOGSUBSYSTEM_LOG_1:

	 var 	idLogSubSystem_LogSubSystem_2:int;
	logging_OUT_Log_2:int;
	logging_OUT_Logging_Failed_2:bool;
	let

		-- transition trace :
	--POINT__To__LogSubSystem_LOG_1
		(idLogSubSystem_LogSubSystem_2, logging_OUT_Logging_Failed_2, logging_OUT_Log_2) 
	= LogSubSystem_LOG_en(idLogSubSystem_LogSubSystem_1, logging_OUT_Logging_Failed_1, TLM_MODE_IN_Log_Message_ID, SYS_STAT_IN_Log_Message_ID, ALARM_IN_Log_Message_ID, CONFIG_IN_Log_Message_ID, IM_IN_Log_Message_ID, logging_OUT_Log_1, false);
		

	(idLogSubSystem_LogSubSystem, logging_OUT_Log, logging_OUT_Logging_Failed) 
	=  (idLogSubSystem_LogSubSystem_2, logging_OUT_Log_2, logging_OUT_Logging_Failed_2);


	tel

	until true restart POINTLogSubSystem_LogSubSystem



	state POINT__TO__LOGSUBSYSTEM_NOT_ON_2:

	 var 	idLogSubSystem_LogSubSystem_2:int;
	logging_OUT_Log_2:int;
	let

		-- transition trace :
	--POINT__To__LogSubSystem_NOT_ON_2
		(idLogSubSystem_LogSubSystem_2, logging_OUT_Log_2) 
	= LogSubSystem_NOT_ON_en(idLogSubSystem_LogSubSystem_1, logging_OUT_Log_1, false);
		

	(idLogSubSystem_LogSubSystem, logging_OUT_Log, logging_OUT_Logging_Failed) 
	=  (idLogSubSystem_LogSubSystem_2, logging_OUT_Log_2, logging_OUT_Logging_Failed_1);


	tel

	until true restart POINTLogSubSystem_LogSubSystem



	state LOGSUBSYSTEM_NOT_ON__TO__LOGSUBSYSTEM_LOG_1:

	 var 	idLogSubSystem_LogSubSystem_2, idLogSubSystem_LogSubSystem_3:int;
	logging_OUT_Log_2, logging_OUT_Log_3:int;
	logging_OUT_Logging_Failed_2:bool;
	let

		-- transition trace :
	--LogSubSystem_NOT_ON__To__LogSubSystem_LOG_1
		(logging_OUT_Log_2, idLogSubSystem_LogSubSystem_2) 
	= LogSubSystem_NOT_ON_ex(logging_OUT_Log_1, idLogSubSystem_LogSubSystem_1, false);
		

		(idLogSubSystem_LogSubSystem_3, logging_OUT_Logging_Failed_2, logging_OUT_Log_3) 
	= LogSubSystem_LOG_en(idLogSubSystem_LogSubSystem_2, logging_OUT_Logging_Failed_1, TLM_MODE_IN_Log_Message_ID, SYS_STAT_IN_Log_Message_ID, ALARM_IN_Log_Message_ID, CONFIG_IN_Log_Message_ID, IM_IN_Log_Message_ID, logging_OUT_Log_2, false);
		

	(idLogSubSystem_LogSubSystem, logging_OUT_Log, logging_OUT_Logging_Failed) 
	=  (idLogSubSystem_LogSubSystem_3, logging_OUT_Log_3, logging_OUT_Logging_Failed_2);


	tel

	until true restart POINTLogSubSystem_LogSubSystem



	state LOGSUBSYSTEM_LOG__TO__LOGSUBSYSTEM_NOT_ON_1:

	 var 	idLogSubSystem_LogSubSystem_2, idLogSubSystem_LogSubSystem_3:int;
	logging_OUT_Log_2, logging_OUT_Log_3:int;
	logging_OUT_Logging_Failed_2:bool;
	let

		-- transition trace :
	--LogSubSystem_LOG__To__LogSubSystem_NOT_ON_1
		(logging_OUT_Logging_Failed_2, logging_OUT_Log_2, idLogSubSystem_LogSubSystem_2) 
	= LogSubSystem_LOG_ex(logging_OUT_Logging_Failed_1, TLM_MODE_IN_Log_Message_ID, SYS_STAT_IN_Log_Message_ID, ALARM_IN_Log_Message_ID, CONFIG_IN_Log_Message_ID, IM_IN_Log_Message_ID, logging_OUT_Log_1, idLogSubSystem_LogSubSystem_1, false);
		

		(idLogSubSystem_LogSubSystem_3, logging_OUT_Log_3) 
	= LogSubSystem_NOT_ON_en(idLogSubSystem_LogSubSystem_2, logging_OUT_Log_2, false);
		

	(idLogSubSystem_LogSubSystem, logging_OUT_Log, logging_OUT_Logging_Failed) 
	=  (idLogSubSystem_LogSubSystem_3, logging_OUT_Log_3, logging_OUT_Logging_Failed_2);


	tel

	until true restart POINTLogSubSystem_LogSubSystem



	state LOGSUBSYSTEM_NOT_ON_IDL:

	 var 	logging_OUT_Log_2:int;
	let

		
	(logging_OUT_Log_2) 
	= LogSubSystem_NOT_ON_du(logging_OUT_Log_1);

		


	(idLogSubSystem_LogSubSystem, logging_OUT_Log, logging_OUT_Logging_Failed) 
	= (idLogSubSystem_LogSubSystem_1, logging_OUT_Log_2, logging_OUT_Logging_Failed_1);
	

	tel

	until true restart POINTLogSubSystem_LogSubSystem



	state LOGSUBSYSTEM_LOG_IDL:

	 var 	logging_OUT_Log_2:int;
	logging_OUT_Logging_Failed_2:bool;
	let

		
	(logging_OUT_Logging_Failed_2, logging_OUT_Log_2) 
	= LogSubSystem_LOG_du(logging_OUT_Logging_Failed_1, TLM_MODE_IN_Log_Message_ID, SYS_STAT_IN_Log_Message_ID, ALARM_IN_Log_Message_ID, CONFIG_IN_Log_Message_ID, IM_IN_Log_Message_ID, logging_OUT_Log_1);

		


	(idLogSubSystem_LogSubSystem, logging_OUT_Log, logging_OUT_Logging_Failed) 
	= (idLogSubSystem_LogSubSystem_1, logging_OUT_Log_2, logging_OUT_Logging_Failed_2);
	

	tel

	until true restart POINTLogSubSystem_LogSubSystem



tel


--***************************************************State :LogSubSystem_LogSubSystem Automaton***************************************************

node GPCA_Logging_LogSubSystem(TLM_MODE_IN_System_On:bool;
	TLM_MODE_IN_Log_Message_ID:int;
	SYS_STAT_IN_Log_Message_ID:int;
	ALARM_IN_Log_Message_ID:int;
	CONFIG_IN_Log_Message_ID:int;
	IM_IN_Log_Message_ID:int)

returns (logging_OUT_Log:int;
	logging_OUT_Logging_Failed:bool);


var logging_OUT_Log_1: int;

	logging_OUT_Logging_Failed_1: bool;

	idLogSubSystem_LogSubSystem, idLogSubSystem_LogSubSystem_1: int;

	let

	logging_OUT_Log_1 = 0 -> pre logging_OUT_Log;

	logging_OUT_Logging_Failed_1 = false -> pre logging_OUT_Logging_Failed;

	idLogSubSystem_LogSubSystem_1 = 0 -> pre idLogSubSystem_LogSubSystem;

	



	(idLogSubSystem_LogSubSystem, logging_OUT_Log, logging_OUT_Logging_Failed)
	 = LogSubSystem_LogSubSystem_node(idLogSubSystem_LogSubSystem_1, TLM_MODE_IN_System_On, ALARM_IN_Log_Message_ID, CONFIG_IN_Log_Message_ID, IM_IN_Log_Message_ID, SYS_STAT_IN_Log_Message_ID, TLM_MODE_IN_Log_Message_ID, logging_OUT_Log_1, logging_OUT_Logging_Failed_1);


--unused outputs
	

tel



node GPCA_Logging (In1_1_1 : bool; In2_1_1 : int; In3_1_1 : int; In4_1_1 : int; In5_1_1 : int; In6_1_1 : int)
returns (Out1_1_1 : int;
	Out2_2_1 : bool); 
var
	LogSubSystem_1_1 : int; LogSubSystem_2_1 : bool;
let 
	(LogSubSystem_1_1, LogSubSystem_2_1) =  GPCA_Logging_LogSubSystem(In1_1_1, In2_1_1, In3_1_1, In4_1_1, In5_1_1, In6_1_1);
	Out1_1_1 = LogSubSystem_1_1;
	Out2_2_1 = LogSubSystem_2_1;
tel

