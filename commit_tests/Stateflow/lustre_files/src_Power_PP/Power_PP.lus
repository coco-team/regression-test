-- This file has been generated by CoCoSim


-- System nodes










-- Entry action for state :Power_on_High655
node Power_on_High655_en(idHistory1_Power_on656_1:int;
	x_1:int;
	isInner:bool)

returns (idHistory1_Power_on656:int;
	x:int);


var 	idHistory1_Power_on656_2:int;
	x_2:int;


let



	-- set state as active 
	idHistory1_Power_on656_2 
	= 655;
	

	x_2 
	= if (not isInner) then 2
	 else x_1;
	

	(idHistory1_Power_on656, x) 
	= (idHistory1_Power_on656_2, x_2);
	

tel





-- Exit action for state :Power_on_High655
node Power_on_High655_ex(idHistory1_Power_on656_1:int;
	isInner:bool)

returns (idHistory1_Power_on656:int);


var 	idHistory1_Power_on656_2:int;


let



	-- set state as inactive 
	idHistory1_Power_on656_2
	 = if (not isInner) then 0 else idHistory1_Power_on656_1;


	(idHistory1_Power_on656) 
	= (idHistory1_Power_on656_1);
	

tel






-- Entry action for state :Power_on_Low654
node Power_on_Low654_en(idHistory1_Power_on656_1:int;
	x_1:int;
	isInner:bool)

returns (idHistory1_Power_on656:int;
	x:int);


var 	idHistory1_Power_on656_2:int;
	x_2:int;


let



	-- set state as active 
	idHistory1_Power_on656_2 
	= 654;
	

	x_2 
	= if (not isInner) then 1
	 else x_1;
	

	(idHistory1_Power_on656, x) 
	= (idHistory1_Power_on656_2, x_2);
	

tel





-- Exit action for state :Power_on_Low654
node Power_on_Low654_ex(idHistory1_Power_on656_1:int;
	isInner:bool)

returns (idHistory1_Power_on656:int);


var 	idHistory1_Power_on656_2:int;


let



	-- set state as inactive 
	idHistory1_Power_on656_2
	 = if (not isInner) then 0 else idHistory1_Power_on656_1;


	(idHistory1_Power_on656) 
	= (idHistory1_Power_on656_1);
	

tel






-- Entry action for state :History1_Power_on656
node History1_Power_on656_en(idHistory1_Power_on656_1:int;
	idHistory1_History1652_1:int;
	x_1:int;
	isInner:bool)

returns (idHistory1_Power_on656:int;
	idHistory1_History1652:int;
	x:int);


var 	idHistory1_Power_on656_2, idHistory1_Power_on656_3, idHistory1_Power_on656_4, idHistory1_Power_on656_5, idHistory1_Power_on656_6:int;
	idHistory1_History1652_2, idHistory1_History1652_3, idHistory1_History1652_4:int;
	x_2, x_3, x_4, x_5, x_6:int;


let



	-- set state as active 
	idHistory1_History1652_2 
	= 656;
	

	
-- transition trace :
	--POINT__To__Power_on_Low654_1
		(idHistory1_Power_on656_2, x_2) 
	= Power_on_Low654_en(idHistory1_Power_on656_1, x_1, false);
		

	(idHistory1_Power_on656_3, idHistory1_History1652_3, x_3) 
	= 

	if ( idHistory1_Power_on656_1 = 0) then

	 (idHistory1_Power_on656_2, idHistory1_History1652_2, x_2)

	 else(idHistory1_Power_on656_1, idHistory1_History1652_2, x_1);

	

	(idHistory1_Power_on656_4, x_4) 
	= 
	if ( idHistory1_Power_on656_1 = 654) then
	Power_on_Low654_en(idHistory1_Power_on656_1, x_1, false)
	 else (idHistory1_Power_on656_1, x_1);

	

	(idHistory1_Power_on656_5, x_5) 
	= 
	if ( idHistory1_Power_on656_1 = 655) then
	Power_on_High655_en(idHistory1_Power_on656_1, x_1, false)
	 else (idHistory1_Power_on656_1, x_1);

	

	(idHistory1_Power_on656_6, idHistory1_History1652_4, x_6) 
	= 
		 if ( idHistory1_Power_on656_1 = 0) then 
		(idHistory1_Power_on656_3, idHistory1_History1652_3, x_3)
		 else
		 if ( idHistory1_Power_on656_1 = 654) then 
		(idHistory1_Power_on656_4, idHistory1_History1652_3, x_4)
		 else
		 if ( idHistory1_Power_on656_1 = 655) then 
		(idHistory1_Power_on656_5, idHistory1_History1652_3, x_5)
		 else (idHistory1_Power_on656_1, idHistory1_History1652_2, x_1);


	(idHistory1_Power_on656, idHistory1_History1652, x) 
	= (idHistory1_Power_on656_6, idHistory1_History1652_4, x_6);
	

tel





-- Exit action for state :History1_Power_on656
node History1_Power_on656_ex(idHistory1_Power_on656_1:int;
	idHistory1_History1652_1:int;
	isInner:bool)

returns (idHistory1_Power_on656:int;
	idHistory1_History1652:int);


var 	idHistory1_Power_on656_2, idHistory1_Power_on656_3, idHistory1_Power_on656_4:int;
	idHistory1_History1652_2:int;


let



	
	(idHistory1_Power_on656_2) 
	= 
	if ( idHistory1_Power_on656_1 = 654) then
	Power_on_Low654_ex(idHistory1_Power_on656_1, false)
	 else (idHistory1_Power_on656_1);

	

	(idHistory1_Power_on656_3) 
	= 
	if ( idHistory1_Power_on656_1 = 655) then
	Power_on_High655_ex(idHistory1_Power_on656_1, false)
	 else (idHistory1_Power_on656_1);

	

	(idHistory1_Power_on656_4) 
	= 
		 if ( idHistory1_Power_on656_1 = 654) then 
		(idHistory1_Power_on656_2)
		 else
		 if ( idHistory1_Power_on656_1 = 655) then 
		(idHistory1_Power_on656_3)
		 else (idHistory1_Power_on656_1);


	-- set state as inactive 
	idHistory1_History1652_2
	 = if (not isInner) then 0 else idHistory1_History1652_1;


	(idHistory1_Power_on656, idHistory1_History1652) 
	= (idHistory1_Power_on656_4, idHistory1_History1652_1);
	

tel






-- Entry action for state :History1_Power_off653
node History1_Power_off653_en(idHistory1_History1652_1:int;
	x_1:int;
	isInner:bool)

returns (idHistory1_History1652:int;
	x:int);


var 	idHistory1_History1652_2:int;
	x_2:int;


let



	-- set state as active 
	idHistory1_History1652_2 
	= 653;
	

	x_2 
	= if (not isInner) then 0
	 else x_1;
	

	(idHistory1_History1652, x) 
	= (idHistory1_History1652_2, x_2);
	

tel





-- Exit action for state :History1_Power_off653
node History1_Power_off653_ex(idHistory1_History1652_1:int;
	isInner:bool)

returns (idHistory1_History1652:int);


var 	idHistory1_History1652_2:int;


let



	-- set state as inactive 
	idHistory1_History1652_2
	 = if (not isInner) then 0 else idHistory1_History1652_1;


	(idHistory1_History1652) 
	= (idHistory1_History1652_1);
	

tel


--***************************************************State :History1_Power_on656 Automaton***************************************************

node History1_Power_on656_node(idHistory1_Power_on656_1:int;
	x_1:int;
	switch_low:bool;
	switch_high:bool)

returns (idHistory1_Power_on656:int;
	x:int);


let

	 automaton history1_power_on656

	state POINTHistory1_Power_on656:
	unless (idHistory1_Power_on656_1=0) restart POINT__TO__POWER_ON_LOW654_1



	unless (idHistory1_Power_on656_1=654) and switch_low restart POWER_ON_LOW654__TO__POWER_ON_HIGH655_1



	unless (idHistory1_Power_on656_1=655) and switch_high restart POWER_ON_HIGH655__TO__POWER_ON_LOW654_1



	unless (idHistory1_Power_on656_1=654) restart POWER_ON_LOW654_IDL

	unless (idHistory1_Power_on656_1=655) restart POWER_ON_HIGH655_IDL

	let

		(idHistory1_Power_on656, x) 
	= (idHistory1_Power_on656_1, x_1);
	

	tel



	state POINT__TO__POWER_ON_LOW654_1:

	 var 	idHistory1_Power_on656_2:int;
	x_2:int;
	let

		-- transition trace :
	--POINT__To__Power_on_Low654_1
		(idHistory1_Power_on656_2, x_2) 
	= Power_on_Low654_en(idHistory1_Power_on656_1, x_1, false);
		

	(idHistory1_Power_on656, x) 
	=  (idHistory1_Power_on656_2, x_2);


	tel

	until true restart POINTHistory1_Power_on656



	state POWER_ON_LOW654__TO__POWER_ON_HIGH655_1:

	 var 	idHistory1_Power_on656_2, idHistory1_Power_on656_3:int;
	x_2:int;
	let

		-- transition trace :
	--Power_on_Low654__To__Power_on_High655_1
		(idHistory1_Power_on656_2) 
	= Power_on_Low654_ex(idHistory1_Power_on656_1, false);
		

		(idHistory1_Power_on656_3, x_2) 
	= Power_on_High655_en(idHistory1_Power_on656_2, x_1, false);
		

	(idHistory1_Power_on656, x) 
	=  (idHistory1_Power_on656_3, x_2);


	tel

	until true restart POINTHistory1_Power_on656



	state POWER_ON_HIGH655__TO__POWER_ON_LOW654_1:

	 var 	idHistory1_Power_on656_2, idHistory1_Power_on656_3:int;
	x_2:int;
	let

		-- transition trace :
	--Power_on_High655__To__Power_on_Low654_1
		(idHistory1_Power_on656_2) 
	= Power_on_High655_ex(idHistory1_Power_on656_1, false);
		

		(idHistory1_Power_on656_3, x_2) 
	= Power_on_Low654_en(idHistory1_Power_on656_2, x_1, false);
		

	(idHistory1_Power_on656, x) 
	=  (idHistory1_Power_on656_3, x_2);


	tel

	until true restart POINTHistory1_Power_on656



	state POWER_ON_LOW654_IDL:

	 	let

		

	(idHistory1_Power_on656, x) 
	= (idHistory1_Power_on656_1, x_1);
	

	tel

	until true restart POINTHistory1_Power_on656



	state POWER_ON_HIGH655_IDL:

	 	let

		

	(idHistory1_Power_on656, x) 
	= (idHistory1_Power_on656_1, x_1);
	

	tel

	until true restart POINTHistory1_Power_on656



tel


--***************************************************State :History1_History1652 Automaton***************************************************

node History1_History1652_node(idHistory1_History1652_1:int;
	x_1:int;
	switch_on:bool;
	idHistory1_Power_on656_1:int;
	switch_off:bool;
	switch_high:bool;
	switch_low:bool)

returns (idHistory1_History1652:int;
	x:int;
	idHistory1_Power_on656:int);


let

	 automaton history1_history1652

	state POINTHistory1_History1652:
	unless (idHistory1_History1652_1=0) restart POINT__TO__HISTORY1_POWER_OFF653_1



	unless (idHistory1_History1652_1=653) and switch_on restart HISTORY1_POWER_OFF653__TO__HISTORY1_POWER_ON656_1



	unless (idHistory1_History1652_1=656) and switch_off restart HISTORY1_POWER_ON656__TO__HISTORY1_POWER_OFF653_1



	unless (idHistory1_History1652_1=653) restart HISTORY1_POWER_OFF653_IDL

	unless (idHistory1_History1652_1=656) restart HISTORY1_POWER_ON656_IDL

	let

		(idHistory1_History1652, x, idHistory1_Power_on656) 
	= (idHistory1_History1652_1, x_1, idHistory1_Power_on656_1);
	

	tel



	state POINT__TO__HISTORY1_POWER_OFF653_1:

	 var 	idHistory1_History1652_2:int;
	x_2:int;
	let

		-- transition trace :
	--POINT__To__History1_Power_off653_1
		(idHistory1_History1652_2, x_2) 
	= History1_Power_off653_en(idHistory1_History1652_1, x_1, false);
		

	(idHistory1_History1652, x) 
	=  (idHistory1_History1652_2, x_2);

	--add unused variables
	(idHistory1_Power_on656) 
	= (idHistory1_Power_on656_1);
	

	tel

	until true restart POINTHistory1_History1652



	state HISTORY1_POWER_OFF653__TO__HISTORY1_POWER_ON656_1:

	 var 	idHistory1_History1652_2, idHistory1_History1652_3:int;
	x_2:int;
	idHistory1_Power_on656_2:int;
	let

		-- transition trace :
	--History1_Power_off653__To__History1_Power_on656_1
		(idHistory1_History1652_2) 
	= History1_Power_off653_ex(idHistory1_History1652_1, false);
		

		(idHistory1_Power_on656_2, idHistory1_History1652_3, x_2) 
	= History1_Power_on656_en(idHistory1_Power_on656_1, idHistory1_History1652_2, x_1, false);
		

	(idHistory1_History1652, x, idHistory1_Power_on656) 
	=  (idHistory1_History1652_3, x_2, idHistory1_Power_on656_2);


	tel

	until true restart POINTHistory1_History1652



	state HISTORY1_POWER_ON656__TO__HISTORY1_POWER_OFF653_1:

	 var 	idHistory1_History1652_2, idHistory1_History1652_3:int;
	x_2:int;
	idHistory1_Power_on656_2:int;
	let

		-- transition trace :
	--History1_Power_on656__To__History1_Power_off653_1
		(idHistory1_Power_on656_2, idHistory1_History1652_2) 
	= History1_Power_on656_ex(idHistory1_Power_on656_1, idHistory1_History1652_1, false);
		

		(idHistory1_History1652_3, x_2) 
	= History1_Power_off653_en(idHistory1_History1652_2, x_1, false);
		

	(idHistory1_History1652, x, idHistory1_Power_on656) 
	=  (idHistory1_History1652_3, x_2, idHistory1_Power_on656_2);


	tel

	until true restart POINTHistory1_History1652



	state HISTORY1_POWER_OFF653_IDL:

	 	let

		

	(idHistory1_History1652, x, idHistory1_Power_on656) 
	= (idHistory1_History1652_1, x_1, idHistory1_Power_on656_1);
	

	tel

	until true restart POINTHistory1_History1652



	state HISTORY1_POWER_ON656_IDL:

	 var 	x_2:int;
	idHistory1_Power_on656_2:int;
	let

		
	(idHistory1_Power_on656_2, x_2) 
	= History1_Power_on656_node(idHistory1_Power_on656_1, x_1, switch_low, switch_high);

		


	(idHistory1_History1652, x, idHistory1_Power_on656) 
	= (idHistory1_History1652_1, x_2, idHistory1_Power_on656_2);
	

	tel

	until true restart POINTHistory1_History1652



tel


--***************************************************State :History1_History1652 Automaton***************************************************

node Power_PP_History1(switch_on:bool;
	switch_off:bool;
	switch_high:bool;
	switch_low:bool)

returns (x:int);


var x_1: int;

	idHistory1_History1652, idHistory1_History1652_1: int;

	idHistory1_Power_on656, idHistory1_Power_on656_1: int;

		idHistory1_History1652_2, idHistory1_History1652_3, idHistory1_History1652_4:int;
	x_2, x_3, x_4:int;
	idHistory1_Power_on656_2, idHistory1_Power_on656_3, idHistory1_Power_on656_4:int;
let

	x_1 = 0 -> pre x;

	idHistory1_History1652_1 = 0 -> pre idHistory1_History1652;

	idHistory1_Power_on656_1 = 0 -> pre idHistory1_Power_on656;

	



	(idHistory1_History1652_2, x_2, idHistory1_Power_on656_2)
	 = 

	 if switch_on then History1_History1652_node(idHistory1_History1652_1, x_1, switch_on, idHistory1_Power_on656_1, false, false, false)

	 else (idHistory1_History1652_1, x_1, idHistory1_Power_on656_1);

	



	(idHistory1_History1652_3, x_3, idHistory1_Power_on656_3)
	 = 

	 if switch_off then History1_History1652_node(idHistory1_History1652_2, x_2, false, idHistory1_Power_on656_2, switch_off, false, false)

	 else (idHistory1_History1652_2, x_2, idHistory1_Power_on656_2);

	



	(idHistory1_History1652_4, x_4, idHistory1_Power_on656_4)
	 = 

	 if switch_high then History1_History1652_node(idHistory1_History1652_3, x_3, false, idHistory1_Power_on656_3, false, switch_high, false)

	 else (idHistory1_History1652_3, x_3, idHistory1_Power_on656_3);

	



	(idHistory1_History1652, x, idHistory1_Power_on656)
	 = 

	 if switch_low then History1_History1652_node(idHistory1_History1652_4, x_4, false, idHistory1_Power_on656_4, false, false, switch_low)

	 else (idHistory1_History1652_4, x_4, idHistory1_Power_on656_4);

	


--unused outputs
	

tel



node Power_PP (switch_on_1_1 : real; switch_high_1_1 : real; switch_low_1_1 : real; switch_off_1_1 : real)
returns (x_1_1 : int); 
var
	History1_1_1 : int;
	Mux_1_1 : real; Mux_1_2 : real; Mux_1_3 : real; Mux_1_4 : real;
	i_virtual_local : real;
	History1Mux_1_1_event: bool;
	History1Mux_1_2_event: bool;
	History1Mux_1_3_event: bool;
	History1Mux_1_4_event: bool;
let 
	History1Mux_1_1_event = false -> ((pre(Mux_1_1) > 0.0 and Mux_1_1 <= 0.0) or (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0));
	History1Mux_1_2_event = false -> ((pre(Mux_1_2) > 0.0 and Mux_1_2 <= 0.0) or (pre(Mux_1_2) <= 0.0 and Mux_1_2 > 0.0));
	History1Mux_1_3_event = false -> (pre(Mux_1_3) <= 0.0 and Mux_1_3 > 0.0);
	History1Mux_1_4_event = false -> (pre(Mux_1_4) <= 0.0 and Mux_1_4 > 0.0);
	History1_1_1 =  Power_PP_History1(History1Mux_1_1_event, History1Mux_1_2_event, History1Mux_1_3_event, History1Mux_1_4_event);
	Mux_1_1 = switch_on_1_1 ;
	Mux_1_2 = switch_high_1_1 ;
	Mux_1_3 = switch_low_1_1 ;
	Mux_1_4 = switch_off_1_1 ;
	x_1_1 = History1_1_1;
	i_virtual_local= 0.0 -> 1.0;
tel

