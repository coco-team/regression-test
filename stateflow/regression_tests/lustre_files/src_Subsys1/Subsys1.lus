-- This file has been generated by cocoSim


-- System nodes










-- Entry action for state :D_Da
node D_Da_en(idchart_D_1:int;
	x:int;
	d_1:int;
	isInner:bool)

returns (idchart_D:int;
	d:int);


var 	idchart_D_2:int;
	d_2:int;


let



	-- set state as active 
	idchart_D_2 
	= 666;
	

	d_2 
	= if (not isInner) then x+7
	 else d_1;
	

	(idchart_D, d) 
	= (idchart_D_2, d_2);
	

tel





-- Exit action for state :D_Da
node D_Da_ex(idchart_D_1:int;
	isInner:bool)

returns (idchart_D:int);


var 	idchart_D_2:int;


let



	-- set state as inactive 
	idchart_D_2
	 = if (not isInner) then 0 else idchart_D_1;


	(idchart_D) 
	= (idchart_D_1);
	

tel






-- Entry action for state :D_Db
node D_Db_en(idchart_D_1:int;
	x:int;
	d_1:int;
	isInner:bool)

returns (idchart_D:int;
	d:int);


var 	idchart_D_2:int;
	d_2:int;


let



	-- set state as active 
	idchart_D_2 
	= 667;
	

	d_2 
	= if (not isInner) then x+8
	 else d_1;
	

	(idchart_D, d) 
	= (idchart_D_2, d_2);
	

tel





-- Exit action for state :D_Db
node D_Db_ex(idchart_D_1:int;
	isInner:bool)

returns (idchart_D:int);


var 	idchart_D_2:int;


let



	-- set state as inactive 
	idchart_D_2
	 = if (not isInner) then 0 else idchart_D_1;


	(idchart_D) 
	= (idchart_D_1);
	

tel






-- Entry action for state :chart_D
node chart_D_en(idchart_D_1:int;
	idchart_chart_1:int;
	d_1:int;
	x:int;
	isInner:bool)

returns (idchart_D:int;
	idchart_chart:int;
	d:int);


var 	idchart_D_2, idchart_D_3, idchart_D_4, idchart_D_5, idchart_D_6:int;
	idchart_chart_2, idchart_chart_3, idchart_chart_4:int;
	d_2, d_3, d_4, d_5, d_6:int;


let



	-- set state as active 
	idchart_chart_2 
	= 663;
	

	
-- transition trace :
	--POINT__To__D_Da_1
		(idchart_D_2, d_2) 
	= D_Da_en(idchart_D_1, x, d_1, false);
		

	(idchart_D_3, idchart_chart_3, d_3) 
	= 

	if ( idchart_D_1 = 0) then

	 (idchart_D_2, idchart_chart_2, d_2)

	 else(idchart_D_1, idchart_chart_2, d_1);

	

	(idchart_D_4, d_4) 
	= 
	if ( idchart_D_1 = 666) then
	D_Da_en(idchart_D_1, x, d_1, false)
	 else (idchart_D_1, d_1);

	

	(idchart_D_5, d_5) 
	= 
	if ( idchart_D_1 = 667) then
	D_Db_en(idchart_D_1, x, d_1, false)
	 else (idchart_D_1, d_1);

	

	(idchart_D_6, idchart_chart_4, d_6) 
	= 
		 if ( idchart_D_1 = 0) then 
		(idchart_D_3, idchart_chart_3, d_3)
		 else
		 if ( idchart_D_1 = 666) then 
		(idchart_D_4, idchart_chart_3, d_4)
		 else
		 if ( idchart_D_1 = 667) then 
		(idchart_D_5, idchart_chart_3, d_5)
		 else (idchart_D_1, idchart_chart_2, d_1);


	(idchart_D, idchart_chart, d) 
	= (idchart_D_6, idchart_chart_4, d_6);
	

tel





-- Exit action for state :chart_D
node chart_D_ex(idchart_D_1:int;
	idchart_chart_1:int;
	isInner:bool)

returns (idchart_D:int;
	idchart_chart:int);


var 	idchart_D_2, idchart_D_3, idchart_D_4, idchart_D_5:int;
	idchart_chart_2:int;


let



	
	(idchart_D_2) 
	= 
	if ( idchart_D_1 = 666) then
	D_Da_ex(idchart_D_1, false)
	 else (idchart_D_1);

	

	(idchart_D_3) 
	= 
	if ( idchart_D_1 = 667) then
	D_Db_ex(idchart_D_1, false)
	 else (idchart_D_1);

	

	(idchart_D_4) 
	= 
		 if ( idchart_D_1 = 666) then 
		(idchart_D_2)
		 else
		 if ( idchart_D_1 = 667) then 
		(idchart_D_3)
		 else (idchart_D_1);


	-- set state as inactive 
	idchart_chart_2
	 = if (not isInner) then 0 else idchart_chart_1;

	idchart_D_5 
	= 0;
	

	(idchart_D, idchart_chart) 
	= (idchart_D_5, idchart_chart_1);
	

tel






-- Entry action for state :C_Ca
node C_Ca_en(idchart_C_1:int;
	x:int;
	c_1:int;
	isInner:bool)

returns (idchart_C:int;
	c:int);


var 	idchart_C_2:int;
	c_2:int;


let



	-- set state as active 
	idchart_C_2 
	= 664;
	

	c_2 
	= if (not isInner) then x+5
	 else c_1;
	

	(idchart_C, c) 
	= (idchart_C_2, c_2);
	

tel





-- Exit action for state :C_Ca
node C_Ca_ex(idchart_C_1:int;
	isInner:bool)

returns (idchart_C:int);


var 	idchart_C_2:int;


let



	-- set state as inactive 
	idchart_C_2
	 = if (not isInner) then 0 else idchart_C_1;


	(idchart_C) 
	= (idchart_C_1);
	

tel






-- Entry action for state :C_Cb
node C_Cb_en(idchart_C_1:int;
	x:int;
	c_1:int;
	isInner:bool)

returns (idchart_C:int;
	c:int);


var 	idchart_C_2:int;
	c_2:int;


let



	-- set state as active 
	idchart_C_2 
	= 665;
	

	c_2 
	= if (not isInner) then x+6
	 else c_1;
	

	(idchart_C, c) 
	= (idchart_C_2, c_2);
	

tel





-- Exit action for state :C_Cb
node C_Cb_ex(idchart_C_1:int;
	isInner:bool)

returns (idchart_C:int);


var 	idchart_C_2:int;


let



	-- set state as inactive 
	idchart_C_2
	 = if (not isInner) then 0 else idchart_C_1;


	(idchart_C) 
	= (idchart_C_1);
	

tel






-- Entry action for state :chart_C
node chart_C_en(idchart_C_1:int;
	idchart_chart_1:int;
	c_1:int;
	x:int;
	isInner:bool)

returns (idchart_C:int;
	idchart_chart:int;
	c:int);


var 	idchart_C_2, idchart_C_3, idchart_C_4, idchart_C_5, idchart_C_6:int;
	idchart_chart_2, idchart_chart_3, idchart_chart_4:int;
	c_2, c_3, c_4, c_5, c_6:int;


let



	-- set state as active 
	idchart_chart_2 
	= 660;
	

	
-- transition trace :
	--POINT__To__C_Ca_1
		(idchart_C_2, c_2) 
	= C_Ca_en(idchart_C_1, x, c_1, false);
		

	(idchart_C_3, idchart_chart_3, c_3) 
	= 

	if ( idchart_C_1 = 0) then

	 (idchart_C_2, idchart_chart_2, c_2)

	 else(idchart_C_1, idchart_chart_2, c_1);

	

	(idchart_C_4, c_4) 
	= 
	if ( idchart_C_1 = 664) then
	C_Ca_en(idchart_C_1, x, c_1, false)
	 else (idchart_C_1, c_1);

	

	(idchart_C_5, c_5) 
	= 
	if ( idchart_C_1 = 665) then
	C_Cb_en(idchart_C_1, x, c_1, false)
	 else (idchart_C_1, c_1);

	

	(idchart_C_6, idchart_chart_4, c_6) 
	= 
		 if ( idchart_C_1 = 0) then 
		(idchart_C_3, idchart_chart_3, c_3)
		 else
		 if ( idchart_C_1 = 664) then 
		(idchart_C_4, idchart_chart_3, c_4)
		 else
		 if ( idchart_C_1 = 665) then 
		(idchart_C_5, idchart_chart_3, c_5)
		 else (idchart_C_1, idchart_chart_2, c_1);


	(idchart_C, idchart_chart, c) 
	= (idchart_C_6, idchart_chart_4, c_6);
	

tel





-- Exit action for state :chart_C
node chart_C_ex(idchart_C_1:int;
	idchart_chart_1:int;
	isInner:bool)

returns (idchart_C:int;
	idchart_chart:int);


var 	idchart_C_2, idchart_C_3, idchart_C_4, idchart_C_5:int;
	idchart_chart_2:int;


let



	
	(idchart_C_2) 
	= 
	if ( idchart_C_1 = 664) then
	C_Ca_ex(idchart_C_1, false)
	 else (idchart_C_1);

	

	(idchart_C_3) 
	= 
	if ( idchart_C_1 = 665) then
	C_Cb_ex(idchart_C_1, false)
	 else (idchart_C_1);

	

	(idchart_C_4) 
	= 
		 if ( idchart_C_1 = 664) then 
		(idchart_C_2)
		 else
		 if ( idchart_C_1 = 665) then 
		(idchart_C_3)
		 else (idchart_C_1);


	-- set state as inactive 
	idchart_chart_2
	 = if (not isInner) then 0 else idchart_chart_1;

	idchart_C_5 
	= 0;
	

	(idchart_C, idchart_chart) 
	= (idchart_C_5, idchart_chart_1);
	

tel






-- Entry action for state :B_Ba
node B_Ba_en(idchart_B_1:int;
	x:int;
	b_1:int;
	isInner:bool)

returns (idchart_B:int;
	b:int);


var 	idchart_B_2:int;
	b_2:int;


let



	-- set state as active 
	idchart_B_2 
	= 661;
	

	b_2 
	= if (not isInner) then x+3
	 else b_1;
	

	(idchart_B, b) 
	= (idchart_B_2, b_2);
	

tel





-- Exit action for state :B_Ba
node B_Ba_ex(idchart_B_1:int;
	isInner:bool)

returns (idchart_B:int);


var 	idchart_B_2:int;


let



	-- set state as inactive 
	idchart_B_2
	 = if (not isInner) then 0 else idchart_B_1;


	(idchart_B) 
	= (idchart_B_1);
	

tel






-- Entry action for state :B_Bb
node B_Bb_en(idchart_B_1:int;
	x:int;
	b_1:int;
	isInner:bool)

returns (idchart_B:int;
	b:int);


var 	idchart_B_2:int;
	b_2:int;


let



	-- set state as active 
	idchart_B_2 
	= 662;
	

	b_2 
	= if (not isInner) then x+4
	 else b_1;
	

	(idchart_B, b) 
	= (idchart_B_2, b_2);
	

tel





-- Exit action for state :B_Bb
node B_Bb_ex(idchart_B_1:int;
	isInner:bool)

returns (idchart_B:int);


var 	idchart_B_2:int;


let



	-- set state as inactive 
	idchart_B_2
	 = if (not isInner) then 0 else idchart_B_1;


	(idchart_B) 
	= (idchart_B_1);
	

tel






-- Entry action for state :chart_B
node chart_B_en(idchart_B_1:int;
	idchart_chart_1:int;
	b_1:int;
	x:int;
	isInner:bool)

returns (idchart_B:int;
	idchart_chart:int;
	b:int);


var 	idchart_B_2, idchart_B_3, idchart_B_4, idchart_B_5, idchart_B_6:int;
	idchart_chart_2, idchart_chart_3, idchart_chart_4:int;
	b_2, b_3, b_4, b_5, b_6:int;


let



	-- set state as active 
	idchart_chart_2 
	= 657;
	

	
-- transition trace :
	--POINT__To__B_Ba_1
		(idchart_B_2, b_2) 
	= B_Ba_en(idchart_B_1, x, b_1, false);
		

	(idchart_B_3, idchart_chart_3, b_3) 
	= 

	if ( idchart_B_1 = 0) then

	 (idchart_B_2, idchart_chart_2, b_2)

	 else(idchart_B_1, idchart_chart_2, b_1);

	

	(idchart_B_4, b_4) 
	= 
	if ( idchart_B_1 = 661) then
	B_Ba_en(idchart_B_1, x, b_1, false)
	 else (idchart_B_1, b_1);

	

	(idchart_B_5, b_5) 
	= 
	if ( idchart_B_1 = 662) then
	B_Bb_en(idchart_B_1, x, b_1, false)
	 else (idchart_B_1, b_1);

	

	(idchart_B_6, idchart_chart_4, b_6) 
	= 
		 if ( idchart_B_1 = 0) then 
		(idchart_B_3, idchart_chart_3, b_3)
		 else
		 if ( idchart_B_1 = 661) then 
		(idchart_B_4, idchart_chart_3, b_4)
		 else
		 if ( idchart_B_1 = 662) then 
		(idchart_B_5, idchart_chart_3, b_5)
		 else (idchart_B_1, idchart_chart_2, b_1);


	(idchart_B, idchart_chart, b) 
	= (idchart_B_6, idchart_chart_4, b_6);
	

tel





-- Exit action for state :chart_B
node chart_B_ex(idchart_B_1:int;
	idchart_chart_1:int;
	isInner:bool)

returns (idchart_B:int;
	idchart_chart:int);


var 	idchart_B_2, idchart_B_3, idchart_B_4, idchart_B_5:int;
	idchart_chart_2:int;


let



	
	(idchart_B_2) 
	= 
	if ( idchart_B_1 = 661) then
	B_Ba_ex(idchart_B_1, false)
	 else (idchart_B_1);

	

	(idchart_B_3) 
	= 
	if ( idchart_B_1 = 662) then
	B_Bb_ex(idchart_B_1, false)
	 else (idchart_B_1);

	

	(idchart_B_4) 
	= 
		 if ( idchart_B_1 = 661) then 
		(idchart_B_2)
		 else
		 if ( idchart_B_1 = 662) then 
		(idchart_B_3)
		 else (idchart_B_1);


	-- set state as inactive 
	idchart_chart_2
	 = if (not isInner) then 0 else idchart_chart_1;

	idchart_B_5 
	= 0;
	

	(idchart_B, idchart_chart) 
	= (idchart_B_5, idchart_chart_1);
	

tel






-- Entry action for state :A_Aa
node A_Aa_en(idchart_A_1:int;
	x:int;
	a_1:int;
	isInner:bool)

returns (idchart_A:int;
	a:int);


var 	idchart_A_2:int;
	a_2:int;


let



	-- set state as active 
	idchart_A_2 
	= 658;
	

	a_2 
	= if (not isInner) then x+1
	 else a_1;
	

	(idchart_A, a) 
	= (idchart_A_2, a_2);
	

tel





-- Exit action for state :A_Aa
node A_Aa_ex(idchart_A_1:int;
	isInner:bool)

returns (idchart_A:int);


var 	idchart_A_2:int;


let



	-- set state as inactive 
	idchart_A_2
	 = if (not isInner) then 0 else idchart_A_1;


	(idchart_A) 
	= (idchart_A_1);
	

tel






-- Entry action for state :A_Ab
node A_Ab_en(idchart_A_1:int;
	x:int;
	a_1:int;
	isInner:bool)

returns (idchart_A:int;
	a:int);


var 	idchart_A_2:int;
	a_2:int;


let



	-- set state as active 
	idchart_A_2 
	= 659;
	

	a_2 
	= if (not isInner) then x+2
	 else a_1;
	

	(idchart_A, a) 
	= (idchart_A_2, a_2);
	

tel





-- Exit action for state :A_Ab
node A_Ab_ex(idchart_A_1:int;
	isInner:bool)

returns (idchart_A:int);


var 	idchart_A_2:int;


let



	-- set state as inactive 
	idchart_A_2
	 = if (not isInner) then 0 else idchart_A_1;


	(idchart_A) 
	= (idchart_A_1);
	

tel






-- Entry action for state :chart_A
node chart_A_en(idchart_A_1:int;
	idchart_chart_1:int;
	a_1:int;
	x:int;
	isInner:bool)

returns (idchart_A:int;
	idchart_chart:int;
	a:int);


var 	idchart_A_2, idchart_A_3, idchart_A_4, idchart_A_5, idchart_A_6:int;
	idchart_chart_2, idchart_chart_3, idchart_chart_4:int;
	a_2, a_3, a_4, a_5, a_6:int;


let



	-- set state as active 
	idchart_chart_2 
	= 656;
	

	
-- transition trace :
	--POINT__To__A_Aa_1
		(idchart_A_2, a_2) 
	= A_Aa_en(idchart_A_1, x, a_1, false);
		

	(idchart_A_3, idchart_chart_3, a_3) 
	= 

	if ( idchart_A_1 = 0) then

	 (idchart_A_2, idchart_chart_2, a_2)

	 else(idchart_A_1, idchart_chart_2, a_1);

	

	(idchart_A_4, a_4) 
	= 
	if ( idchart_A_1 = 658) then
	A_Aa_en(idchart_A_1, x, a_1, false)
	 else (idchart_A_1, a_1);

	

	(idchart_A_5, a_5) 
	= 
	if ( idchart_A_1 = 659) then
	A_Ab_en(idchart_A_1, x, a_1, false)
	 else (idchart_A_1, a_1);

	

	(idchart_A_6, idchart_chart_4, a_6) 
	= 
		 if ( idchart_A_1 = 0) then 
		(idchart_A_3, idchart_chart_3, a_3)
		 else
		 if ( idchart_A_1 = 658) then 
		(idchart_A_4, idchart_chart_3, a_4)
		 else
		 if ( idchart_A_1 = 659) then 
		(idchart_A_5, idchart_chart_3, a_5)
		 else (idchart_A_1, idchart_chart_2, a_1);


	(idchart_A, idchart_chart, a) 
	= (idchart_A_6, idchart_chart_4, a_6);
	

tel





-- Exit action for state :chart_A
node chart_A_ex(idchart_A_1:int;
	idchart_chart_1:int;
	isInner:bool)

returns (idchart_A:int;
	idchart_chart:int);


var 	idchart_A_2, idchart_A_3, idchart_A_4, idchart_A_5:int;
	idchart_chart_2:int;


let



	
	(idchart_A_2) 
	= 
	if ( idchart_A_1 = 658) then
	A_Aa_ex(idchart_A_1, false)
	 else (idchart_A_1);

	

	(idchart_A_3) 
	= 
	if ( idchart_A_1 = 659) then
	A_Ab_ex(idchart_A_1, false)
	 else (idchart_A_1);

	

	(idchart_A_4) 
	= 
		 if ( idchart_A_1 = 658) then 
		(idchart_A_2)
		 else
		 if ( idchart_A_1 = 659) then 
		(idchart_A_3)
		 else (idchart_A_1);


	-- set state as inactive 
	idchart_chart_2
	 = if (not isInner) then 0 else idchart_chart_1;

	idchart_A_5 
	= 0;
	

	(idchart_A, idchart_chart) 
	= (idchart_A_5, idchart_chart_1);
	

tel


--***************************************************State :chart_D Automaton***************************************************

node chart_D_node(idchart_D_1:int;
	d_1:int;
	x:int;
	S3:bool;
	R3:bool)

returns (idchart_D:int;
	d:int);


let

	 automaton chart_d

	state POINTchart_D:
	unless (idchart_D_1=0) restart POINT__TO__D_DA_1



	unless (idchart_D_1=666) and S3 restart D_DA__TO__D_DB_1



	unless (idchart_D_1=667) and R3 restart D_DB__TO__D_DA_1



	unless (idchart_D_1=666) restart D_DA_IDL

	unless (idchart_D_1=667) restart D_DB_IDL

	let

		(idchart_D, d) 
	= (idchart_D_1, d_1);
	

	tel



	state POINT__TO__D_DA_1:

	 var 	idchart_D_2:int;
	d_2:int;
	let

		-- transition trace :
	--POINT__To__D_Da_1
		(idchart_D_2, d_2) 
	= D_Da_en(idchart_D_1, x, d_1, false);
		

	(idchart_D, d) 
	=  (idchart_D_2, d_2);


	tel

	until true restart POINTchart_D



	state D_DA__TO__D_DB_1:

	 var 	idchart_D_2, idchart_D_3:int;
	d_2:int;
	let

		-- transition trace :
	--D_Da__To__D_Db_1
		(idchart_D_2) 
	= D_Da_ex(idchart_D_1, false);
		

		(idchart_D_3, d_2) 
	= D_Db_en(idchart_D_2, x, d_1, false);
		

	(idchart_D, d) 
	=  (idchart_D_3, d_2);


	tel

	until true restart POINTchart_D



	state D_DB__TO__D_DA_1:

	 var 	idchart_D_2, idchart_D_3:int;
	d_2:int;
	let

		-- transition trace :
	--D_Db__To__D_Da_1
		(idchart_D_2) 
	= D_Db_ex(idchart_D_1, false);
		

		(idchart_D_3, d_2) 
	= D_Da_en(idchart_D_2, x, d_1, false);
		

	(idchart_D, d) 
	=  (idchart_D_3, d_2);


	tel

	until true restart POINTchart_D



	state D_DA_IDL:

	 	let

		

	(idchart_D, d) 
	= (idchart_D_1, d_1);
	

	tel

	until true restart POINTchart_D



	state D_DB_IDL:

	 	let

		

	(idchart_D, d) 
	= (idchart_D_1, d_1);
	

	tel

	until true restart POINTchart_D



tel






node C_Cb__To__C_Ca_1_Transition_Action(idchart_D_1:int;
	d_1:int;
	x:int;
	S3:bool;
	R3:bool)

returns (idchart_D:int;
	d:int);


var 	idchart_D_2:int;
	d_2:int;


let



	(idchart_D_2, d_2) 
	= chart_D_node(idchart_D_1, d_1, x, S3, true);
	

	(idchart_D, d) 
	= (idchart_D_2, d_2);
	

tel






node C_Ca__To__C_Cb_1_Transition_Action(idchart_D_1:int;
	d_1:int;
	x:int;
	S3:bool;
	R3:bool)

returns (idchart_D:int;
	d:int);


var 	idchart_D_2:int;
	d_2:int;


let



	(idchart_D_2, d_2) 
	= chart_D_node(idchart_D_1, d_1, x, true, R3);
	

	(idchart_D, d) 
	= (idchart_D_2, d_2);
	

tel


--***************************************************State :chart_C Automaton***************************************************

node chart_C_node(idchart_C_1:int;
	c_1:int;
	x:int;
	S2:bool;
	R3:bool;
	S3:bool;
	d_1:int;
	idchart_D_1:int;
	R2:bool)

returns (idchart_C:int;
	c:int;
	d:int;
	idchart_D:int);


let

	 automaton chart_c

	state POINTchart_C:
	unless (idchart_C_1=0) restart POINT__TO__C_CA_1



	unless (idchart_C_1=664) and S2 restart C_CA__TO__C_CB_1



	unless (idchart_C_1=665) and R2 restart C_CB__TO__C_CA_1



	unless (idchart_C_1=664) restart C_CA_IDL

	unless (idchart_C_1=665) restart C_CB_IDL

	let

		(idchart_C, c, d, idchart_D) 
	= (idchart_C_1, c_1, d_1, idchart_D_1);
	

	tel



	state POINT__TO__C_CA_1:

	 var 	idchart_C_2:int;
	c_2:int;
	let

		-- transition trace :
	--POINT__To__C_Ca_1
		(idchart_C_2, c_2) 
	= C_Ca_en(idchart_C_1, x, c_1, false);
		

	(idchart_C, c) 
	=  (idchart_C_2, c_2);

	--add unused variables
	(d, idchart_D) 
	= (d_1, idchart_D_1);
	

	tel

	until true restart POINTchart_C



	state C_CA__TO__C_CB_1:

	 var 	idchart_C_2, idchart_C_3:int;
	c_2:int;
	d_2:int;
	idchart_D_2:int;
	let

		-- transition trace :
	--C_Ca__To__C_Cb_1
		(idchart_C_2) 
	= C_Ca_ex(idchart_C_1, false);
		

		(idchart_D_2, d_2) 
	= C_Ca__To__C_Cb_1_Transition_Action(idchart_D_1, d_1, x, S3, R3);
		

		(idchart_C_3, c_2) 
	= C_Cb_en(idchart_C_2, x, c_1, false);
		

	(idchart_C, c, d, idchart_D) 
	=  (idchart_C_3, c_2, d_2, idchart_D_2);


	tel

	until true restart POINTchart_C



	state C_CB__TO__C_CA_1:

	 var 	idchart_C_2, idchart_C_3:int;
	c_2:int;
	d_2:int;
	idchart_D_2:int;
	let

		-- transition trace :
	--C_Cb__To__C_Ca_1
		(idchart_C_2) 
	= C_Cb_ex(idchart_C_1, false);
		

		(idchart_D_2, d_2) 
	= C_Cb__To__C_Ca_1_Transition_Action(idchart_D_1, d_1, x, S3, R3);
		

		(idchart_C_3, c_2) 
	= C_Ca_en(idchart_C_2, x, c_1, false);
		

	(idchart_C, c, d, idchart_D) 
	=  (idchart_C_3, c_2, d_2, idchart_D_2);


	tel

	until true restart POINTchart_C



	state C_CA_IDL:

	 	let

		

	(idchart_C, c, d, idchart_D) 
	= (idchart_C_1, c_1, d_1, idchart_D_1);
	

	tel

	until true restart POINTchart_C



	state C_CB_IDL:

	 	let

		

	(idchart_C, c, d, idchart_D) 
	= (idchart_C_1, c_1, d_1, idchart_D_1);
	

	tel

	until true restart POINTchart_C



tel






node B_Ba__To__B_Bb_1_Transition_Action(idchart_C_1:int;
	c_1:int;
	x:int;
	S2:bool;
	R3:bool;
	S3:bool;
	d_1:int;
	idchart_D_1:int;
	R2:bool)

returns (idchart_C:int;
	c:int;
	d:int;
	idchart_D:int);


var 	idchart_C_2:int;
	c_2:int;
	d_2:int;
	idchart_D_2:int;


let



	(idchart_C_2, c_2, d_2, idchart_D_2) 
	= chart_C_node(idchart_C_1, c_1, x, true, R3, S3, d_1, idchart_D_1, R2);
	

	(idchart_C, c, d, idchart_D) 
	= (idchart_C_2, c_2, d_2, idchart_D_2);
	

tel






node B_Bb__To__B_Ba_1_Transition_Action(idchart_C_1:int;
	c_1:int;
	x:int;
	S2:bool;
	R3:bool;
	S3:bool;
	d_1:int;
	idchart_D_1:int;
	R2:bool)

returns (idchart_C:int;
	c:int;
	d:int;
	idchart_D:int);


var 	idchart_C_2:int;
	c_2:int;
	d_2:int;
	idchart_D_2:int;


let



	(idchart_C_2, c_2, d_2, idchart_D_2) 
	= chart_C_node(idchart_C_1, c_1, x, S2, R3, S3, d_1, idchart_D_1, true);
	

	(idchart_C, c, d, idchart_D) 
	= (idchart_C_2, c_2, d_2, idchart_D_2);
	

tel


--***************************************************State :chart_B Automaton***************************************************

node chart_B_node(idchart_B_1:int;
	b_1:int;
	x:int;
	S1:bool;
	R2:bool;
	R3:bool;
	S2:bool;
	S3:bool;
	c_1:int;
	d_1:int;
	idchart_C_1:int;
	idchart_D_1:int;
	R1:bool)

returns (idchart_B:int;
	b:int;
	c:int;
	d:int;
	idchart_C:int;
	idchart_D:int);


let

	 automaton chart_b

	state POINTchart_B:
	unless (idchart_B_1=0) restart POINT__TO__B_BA_1



	unless (idchart_B_1=661) and S1 restart B_BA__TO__B_BB_1



	unless (idchart_B_1=662) and R1 restart B_BB__TO__B_BA_1



	unless (idchart_B_1=661) restart B_BA_IDL

	unless (idchart_B_1=662) restart B_BB_IDL

	let

		(idchart_B, b, c, d, idchart_C, idchart_D) 
	= (idchart_B_1, b_1, c_1, d_1, idchart_C_1, idchart_D_1);
	

	tel



	state POINT__TO__B_BA_1:

	 var 	idchart_B_2:int;
	b_2:int;
	let

		-- transition trace :
	--POINT__To__B_Ba_1
		(idchart_B_2, b_2) 
	= B_Ba_en(idchart_B_1, x, b_1, false);
		

	(idchart_B, b) 
	=  (idchart_B_2, b_2);

	--add unused variables
	(c, d, idchart_C, idchart_D) 
	= (c_1, d_1, idchart_C_1, idchart_D_1);
	

	tel

	until true restart POINTchart_B



	state B_BA__TO__B_BB_1:

	 var 	idchart_B_2, idchart_B_3:int;
	b_2:int;
	c_2:int;
	d_2:int;
	idchart_C_2:int;
	idchart_D_2:int;
	let

		-- transition trace :
	--B_Ba__To__B_Bb_1
		(idchart_B_2) 
	= B_Ba_ex(idchart_B_1, false);
		

		(idchart_C_2, c_2, d_2, idchart_D_2) 
	= B_Ba__To__B_Bb_1_Transition_Action(idchart_C_1, c_1, x, S2, R3, S3, d_1, idchart_D_1, R2);
		

		(idchart_B_3, b_2) 
	= B_Bb_en(idchart_B_2, x, b_1, false);
		

	(idchart_B, b, c, d, idchart_C, idchart_D) 
	=  (idchart_B_3, b_2, c_2, d_2, idchart_C_2, idchart_D_2);


	tel

	until true restart POINTchart_B



	state B_BB__TO__B_BA_1:

	 var 	idchart_B_2, idchart_B_3:int;
	b_2:int;
	c_2:int;
	d_2:int;
	idchart_C_2:int;
	idchart_D_2:int;
	let

		-- transition trace :
	--B_Bb__To__B_Ba_1
		(idchart_B_2) 
	= B_Bb_ex(idchart_B_1, false);
		

		(idchart_C_2, c_2, d_2, idchart_D_2) 
	= B_Bb__To__B_Ba_1_Transition_Action(idchart_C_1, c_1, x, S2, R3, S3, d_1, idchart_D_1, R2);
		

		(idchart_B_3, b_2) 
	= B_Ba_en(idchart_B_2, x, b_1, false);
		

	(idchart_B, b, c, d, idchart_C, idchart_D) 
	=  (idchart_B_3, b_2, c_2, d_2, idchart_C_2, idchart_D_2);


	tel

	until true restart POINTchart_B



	state B_BA_IDL:

	 	let

		

	(idchart_B, b, c, d, idchart_C, idchart_D) 
	= (idchart_B_1, b_1, c_1, d_1, idchart_C_1, idchart_D_1);
	

	tel

	until true restart POINTchart_B



	state B_BB_IDL:

	 	let

		

	(idchart_B, b, c, d, idchart_C, idchart_D) 
	= (idchart_B_1, b_1, c_1, d_1, idchart_C_1, idchart_D_1);
	

	tel

	until true restart POINTchart_B



tel






node A_Ab__To__A_Aa_1_Transition_Action(idchart_B_1:int;
	b_1:int;
	x:int;
	S1:bool;
	R2:bool;
	R3:bool;
	S2:bool;
	S3:bool;
	c_1:int;
	d_1:int;
	idchart_C_1:int;
	idchart_D_1:int;
	R1:bool)

returns (idchart_B:int;
	b:int;
	c:int;
	d:int;
	idchart_C:int;
	idchart_D:int);


var 	idchart_B_2:int;
	b_2:int;
	c_2:int;
	d_2:int;
	idchart_C_2:int;
	idchart_D_2:int;


let



	(idchart_B_2, b_2, c_2, d_2, idchart_C_2, idchart_D_2) 
	= chart_B_node(idchart_B_1, b_1, x, S1, R2, R3, S2, S3, c_1, d_1, idchart_C_1, idchart_D_1, true);
	

	(idchart_B, b, c, d, idchart_C, idchart_D) 
	= (idchart_B_2, b_2, c_2, d_2, idchart_C_2, idchart_D_2);
	

tel






node A_Aa__To__A_Ab_1_Transition_Action(idchart_B_1:int;
	b_1:int;
	x:int;
	S1:bool;
	R2:bool;
	R3:bool;
	S2:bool;
	S3:bool;
	c_1:int;
	d_1:int;
	idchart_C_1:int;
	idchart_D_1:int;
	R1:bool)

returns (idchart_B:int;
	b:int;
	c:int;
	d:int;
	idchart_C:int;
	idchart_D:int);


var 	idchart_B_2:int;
	b_2:int;
	c_2:int;
	d_2:int;
	idchart_C_2:int;
	idchart_D_2:int;


let



	(idchart_B_2, b_2, c_2, d_2, idchart_C_2, idchart_D_2) 
	= chart_B_node(idchart_B_1, b_1, x, true, R2, R3, S2, S3, c_1, d_1, idchart_C_1, idchart_D_1, R1);
	

	(idchart_B, b, c, d, idchart_C, idchart_D) 
	= (idchart_B_2, b_2, c_2, d_2, idchart_C_2, idchart_D_2);
	

tel


--***************************************************State :chart_A Automaton***************************************************

node chart_A_node(idchart_A_1:int;
	a_1:int;
	x:int;
	S:bool;
	R1:bool;
	R2:bool;
	R3:bool;
	S1:bool;
	S2:bool;
	S3:bool;
	b_1:int;
	c_1:int;
	d_1:int;
	idchart_B_1:int;
	idchart_C_1:int;
	idchart_D_1:int;
	R:bool)

returns (idchart_A:int;
	a:int;
	b:int;
	c:int;
	d:int;
	idchart_B:int;
	idchart_C:int;
	idchart_D:int);


let

	 automaton chart_a

	state POINTchart_A:
	unless (idchart_A_1=0) restart POINT__TO__A_AA_1



	unless (idchart_A_1=658) and S restart A_AA__TO__A_AB_1



	unless (idchart_A_1=659) and R restart A_AB__TO__A_AA_1



	unless (idchart_A_1=658) restart A_AA_IDL

	unless (idchart_A_1=659) restart A_AB_IDL

	let

		(idchart_A, a, b, c, d, idchart_B, idchart_C, idchart_D) 
	= (idchart_A_1, a_1, b_1, c_1, d_1, idchart_B_1, idchart_C_1, idchart_D_1);
	

	tel



	state POINT__TO__A_AA_1:

	 var 	idchart_A_2:int;
	a_2:int;
	let

		-- transition trace :
	--POINT__To__A_Aa_1
		(idchart_A_2, a_2) 
	= A_Aa_en(idchart_A_1, x, a_1, false);
		

	(idchart_A, a) 
	=  (idchart_A_2, a_2);

	--add unused variables
	(b, c, d, idchart_B, idchart_C, idchart_D) 
	= (b_1, c_1, d_1, idchart_B_1, idchart_C_1, idchart_D_1);
	

	tel

	until true restart POINTchart_A



	state A_AA__TO__A_AB_1:

	 var 	idchart_A_2, idchart_A_3:int;
	a_2:int;
	b_2:int;
	c_2:int;
	d_2:int;
	idchart_B_2:int;
	idchart_C_2:int;
	idchart_D_2:int;
	let

		-- transition trace :
	--A_Aa__To__A_Ab_1
		(idchart_A_2) 
	= A_Aa_ex(idchart_A_1, false);
		

		(idchart_B_2, b_2, c_2, d_2, idchart_C_2, idchart_D_2) 
	= A_Aa__To__A_Ab_1_Transition_Action(idchart_B_1, b_1, x, S1, R2, R3, S2, S3, c_1, d_1, idchart_C_1, idchart_D_1, R1);
		

		(idchart_A_3, a_2) 
	= A_Ab_en(idchart_A_2, x, a_1, false);
		

	(idchart_A, a, b, c, d, idchart_B, idchart_C, idchart_D) 
	=  (idchart_A_3, a_2, b_2, c_2, d_2, idchart_B_2, idchart_C_2, idchart_D_2);


	tel

	until true restart POINTchart_A



	state A_AB__TO__A_AA_1:

	 var 	idchart_A_2, idchart_A_3:int;
	a_2:int;
	b_2:int;
	c_2:int;
	d_2:int;
	idchart_B_2:int;
	idchart_C_2:int;
	idchart_D_2:int;
	let

		-- transition trace :
	--A_Ab__To__A_Aa_1
		(idchart_A_2) 
	= A_Ab_ex(idchart_A_1, false);
		

		(idchart_B_2, b_2, c_2, d_2, idchart_C_2, idchart_D_2) 
	= A_Ab__To__A_Aa_1_Transition_Action(idchart_B_1, b_1, x, S1, R2, R3, S2, S3, c_1, d_1, idchart_C_1, idchart_D_1, R1);
		

		(idchart_A_3, a_2) 
	= A_Aa_en(idchart_A_2, x, a_1, false);
		

	(idchart_A, a, b, c, d, idchart_B, idchart_C, idchart_D) 
	=  (idchart_A_3, a_2, b_2, c_2, d_2, idchart_B_2, idchart_C_2, idchart_D_2);


	tel

	until true restart POINTchart_A



	state A_AA_IDL:

	 	let

		

	(idchart_A, a, b, c, d, idchart_B, idchart_C, idchart_D) 
	= (idchart_A_1, a_1, b_1, c_1, d_1, idchart_B_1, idchart_C_1, idchart_D_1);
	

	tel

	until true restart POINTchart_A



	state A_AB_IDL:

	 	let

		

	(idchart_A, a, b, c, d, idchart_B, idchart_C, idchart_D) 
	= (idchart_A_1, a_1, b_1, c_1, d_1, idchart_B_1, idchart_C_1, idchart_D_1);
	

	tel

	until true restart POINTchart_A



tel


--***************************************************State :chart_chart Automaton***************************************************

node chart_chart_node(idchart_chart_1:int;
	a_1:int;
	idchart_A_1:int;
	x:int;
	b_1:int;
	idchart_B_1:int;
	c_1:int;
	idchart_C_1:int;
	d_1:int;
	idchart_D_1:int;
	R:bool;
	R1:bool;
	R2:bool;
	R3:bool;
	S:bool;
	S1:bool;
	S2:bool;
	S3:bool)

returns (idchart_chart:int;
	a:int;
	idchart_A:int;
	b:int;
	idchart_B:int;
	c:int;
	idchart_C:int;
	d:int;
	idchart_D:int);


let

	 automaton chart_chart

	state POINTchart_chart:
	unless (idchart_chart_1=0) restart CHART_CHART_PARALLEL_ENTRY
	unless true  restart CHART_CHART_PARALLEL_IDL

	let

		(idchart_chart, a, idchart_A, b, idchart_B, c, idchart_C, d, idchart_D) 
	= (idchart_chart_1, a_1, idchart_A_1, b_1, idchart_B_1, c_1, idchart_C_1, d_1, idchart_D_1);
	

	tel



	state CHART_CHART_PARALLEL_ENTRY:

	 var 	idchart_chart_2, idchart_chart_3, idchart_chart_4, idchart_chart_5:int;
	a_2:int;
	idchart_A_2:int;
	b_2:int;
	idchart_B_2:int;
	c_2:int;
	idchart_C_2:int;
	d_2:int;
	idchart_D_2:int;
	let

		
	(idchart_A_2, idchart_chart_2, a_2) 
	= chart_A_en(idchart_A_1, idchart_chart_1, a_1, x, false);

	(idchart_B_2, idchart_chart_3, b_2) 
	= chart_B_en(idchart_B_1, idchart_chart_2, b_1, x, false);

	(idchart_C_2, idchart_chart_4, c_2) 
	= chart_C_en(idchart_C_1, idchart_chart_3, c_1, x, false);

	(idchart_D_2, idchart_chart_5, d_2) 
	= chart_D_en(idchart_D_1, idchart_chart_4, d_1, x, false);


	(idchart_chart, a, idchart_A, b, idchart_B, c, idchart_C, d, idchart_D) 
	= (idchart_chart_5, a_2, idchart_A_2, b_2, idchart_B_2, c_2, idchart_C_2, d_2, idchart_D_2);
	

	tel

	until true restart POINTchart_chart



	state CHART_CHART_PARALLEL_IDL:

	 var 	a_2:int;
	idchart_A_2:int;
	b_2, b_3:int;
	idchart_B_2, idchart_B_3:int;
	c_2, c_3, c_4:int;
	idchart_C_2, idchart_C_3, idchart_C_4:int;
	d_2, d_3, d_4, d_5:int;
	idchart_D_2, idchart_D_3, idchart_D_4, idchart_D_5:int;
	let

		

		(idchart_A_2, a_2, b_2, c_2, d_2, idchart_B_2, idchart_C_2, idchart_D_2)
	= if not (idchart_A_1= 0 ) then chart_A_node(idchart_A_1, a_1, x, S, R1, R2, R3, S1, S2, S3, b_1, c_1, d_1, idchart_B_1, idchart_C_1, idchart_D_1, R)

		 else (idchart_A_1, a_1, b_1, c_1, d_1, idchart_B_1, idchart_C_1, idchart_D_1);

		

		

		(idchart_B_3, b_3, c_3, d_3, idchart_C_3, idchart_D_3)
	= if not (idchart_B_2= 0 ) then chart_B_node(idchart_B_2, b_2, x, S1, R2, R3, S2, S3, c_2, d_2, idchart_C_2, idchart_D_2, R1)

		 else (idchart_B_2, b_2, c_2, d_2, idchart_C_2, idchart_D_2);

		

		

		(idchart_C_4, c_4, d_4, idchart_D_4)
	= if not (idchart_C_3= 0 ) then chart_C_node(idchart_C_3, c_3, x, S2, R3, S3, d_3, idchart_D_3, R2)

		 else (idchart_C_3, c_3, d_3, idchart_D_3);

		

		

		(idchart_D_5, d_5)
	= if not (idchart_D_4= 0 ) then chart_D_node(idchart_D_4, d_4, x, S3, R3)

		 else (idchart_D_4, d_4);

		

		

	(idchart_chart, a, idchart_A, b, idchart_B, c, idchart_C, d, idchart_D) 
	= (idchart_chart_1, a_2, idchart_A_2, b_3, idchart_B_3, c_4, idchart_C_4, d_5, idchart_D_5);
	

	tel

	until true restart POINTchart_chart



tel


--***************************************************State :chart_chart Automaton***************************************************

node Subsys1_Odysssubsys_chart(x:int;
	y:int;
	R:bool;
	S:bool)

returns (a:int;
	b:int;
	c:int;
	d:int);


var a_1: int;

	b_1: int;

	c_1: int;

	d_1: int;

	R1, R1_1: bool;

	R2, R2_1: bool;

	R3, R3_1: bool;

	S1, S1_1: bool;

	S2, S2_1: bool;

	S3, S3_1: bool;

	idchart_chart, idchart_chart_1: int;

	idchart_D, idchart_D_1: int;

	idchart_C, idchart_C_1: int;

	idchart_B, idchart_B_1: int;

	idchart_A, idchart_A_1: int;

		idchart_chart_2:int;
	a_2:int;
	idchart_A_2:int;
	b_2:int;
	idchart_B_2:int;
	c_2:int;
	idchart_C_2:int;
	d_2:int;
	idchart_D_2:int;
let

	a_1 = 0 -> pre a;

	b_1 = 0 -> pre b;

	c_1 = 0 -> pre c;

	d_1 = 0 -> pre d;

	R1_1 = false -> pre R1;

	R2_1 = false -> pre R2;

	R3_1 = false -> pre R3;

	S1_1 = false -> pre S1;

	S2_1 = false -> pre S2;

	S3_1 = false -> pre S3;

	idchart_chart_1 = 0 -> pre idchart_chart;

	idchart_D_1 = 0 -> pre idchart_D;

	idchart_C_1 = 0 -> pre idchart_C;

	idchart_B_1 = 0 -> pre idchart_B;

	idchart_A_1 = 0 -> pre idchart_A;

	



	(idchart_chart_2, a_2, idchart_A_2, b_2, idchart_B_2, c_2, idchart_C_2, d_2, idchart_D_2)
	 = 

	 if R then chart_chart_node(idchart_chart_1, a_1, idchart_A_1, x, b_1, idchart_B_1, c_1, idchart_C_1, d_1, idchart_D_1, R, R1, R2, R3, false, S1, S2, S3)

	 else (idchart_chart_1, a_1, idchart_A_1, b_1, idchart_B_1, c_1, idchart_C_1, d_1, idchart_D_1);

	



	(idchart_chart, a, idchart_A, b, idchart_B, c, idchart_C, d, idchart_D)
	 = 

	 if S then chart_chart_node(idchart_chart_2, a_2, idchart_A_2, x, b_2, idchart_B_2, c_2, idchart_C_2, d_2, idchart_D_2, false, R1, R2, R3, S, S1, S2, S3)

	 else (idchart_chart_2, a_2, idchart_A_2, b_2, idchart_B_2, c_2, idchart_C_2, d_2, idchart_D_2);

	


--unused outputs
	R1 = false;

	R2 = false;

	R3 = false;

	S1 = false;

	S2 = false;

	S3 = false;

	

tel



node Subsys1 (R_1_1 : real; S_1_1 : real; In3_1_1 : int; In4_1_1 : int)
returns (Out1_1_1 : int;
	Out2_2_1 : int;
	Out3_3_1 : int;
	Out4_4_1 : int); 
var
	Odysssubsys_Mux_1_1 : real; Odysssubsys_Mux_1_2 : real;
	Odysssubsys_UnitDelay_1_1 : int;
	Odysssubsys_chart_1_1 : int; Odysssubsys_chart_2_1 : int; Odysssubsys_chart_3_1 : int; Odysssubsys_chart_4_1 : int;
	Odysssubsys_Mux_1_1_event: bool;
	Odysssubsys_Mux_1_2_event: bool;
let 
	Out1_1_1 = Odysssubsys_chart_1_1;
	Out2_2_1 = Odysssubsys_chart_2_1;
	Odysssubsys_Mux_1_1 = R_1_1 ;
	Odysssubsys_Mux_1_2 = S_1_1 ;
	Odysssubsys_UnitDelay_1_1 = 0 -> pre In4_1_1;
	Odysssubsys_Mux_1_1_event = false -> (pre(Odysssubsys_Mux_1_1) <= 0.0 and Odysssubsys_Mux_1_1 > 0.0);
	Odysssubsys_Mux_1_2_event = false -> (pre(Odysssubsys_Mux_1_2) > 0.0 and Odysssubsys_Mux_1_2 <= 0.0);
	(Odysssubsys_chart_1_1, Odysssubsys_chart_2_1, Odysssubsys_chart_3_1, Odysssubsys_chart_4_1) =  Subsys1_Odysssubsys_chart(In3_1_1, Odysssubsys_UnitDelay_1_1, Odysssubsys_Mux_1_1_event, Odysssubsys_Mux_1_2_event);
	Out3_3_1 = Odysssubsys_chart_3_1;
	Out4_4_1 = Odysssubsys_chart_4_1;
tel

