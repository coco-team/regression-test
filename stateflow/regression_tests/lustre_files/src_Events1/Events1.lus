-- This file has been generated by cocoSim


-- System nodes





node B_B1__To__B_B2_1_Transition_Action(c_1:int)

returns (c:int);


var 	c_2:int;


let



	c_2 
	=  c_1  + 1;
	

	(c) 
	= (c_2);
	

tel










node B_B2__To__B_B1_1_Transition_Action(c_1:int)

returns (c:int);


var 	c_2:int;


let



	c_2 
	=  c_1  + 1;
	

	(c) 
	= (c_2);
	

tel











-- Entry action for state :B2_B2a
node B2_B2a_en(idB_B2_1:int;
	x:int;
	b_1:int;
	isInner:bool)

returns (idB_B2:int;
	b:int);


var 	idB_B2_2:int;
	b_2:int;


let



	-- set state as active 
	idB_B2_2 
	= 787;
	

	b_2 
	= if (not isInner) then x+7
	 else b_1;
	

	(idB_B2, b) 
	= (idB_B2_2, b_2);
	

tel





-- Exit action for state :B2_B2a
node B2_B2a_ex(idB_B2_1:int;
	isInner:bool)

returns (idB_B2:int);


var 	idB_B2_2:int;


let



	-- set state as inactive 
	idB_B2_2
	 = if (not isInner) then 0 else idB_B2_1;


	(idB_B2) 
	= (idB_B2_2);
	

tel






-- Entry action for state :B2_B2b
node B2_B2b_en(idB_B2_1:int;
	x:int;
	b_1:int;
	isInner:bool)

returns (idB_B2:int;
	b:int);


var 	idB_B2_2:int;
	b_2:int;


let



	-- set state as active 
	idB_B2_2 
	= 788;
	

	b_2 
	= if (not isInner) then x+8
	 else b_1;
	

	(idB_B2, b) 
	= (idB_B2_2, b_2);
	

tel





-- Exit action for state :B2_B2b
node B2_B2b_ex(idB_B2_1:int;
	isInner:bool)

returns (idB_B2:int);


var 	idB_B2_2:int;


let



	-- set state as inactive 
	idB_B2_2
	 = if (not isInner) then 0 else idB_B2_1;


	(idB_B2) 
	= (idB_B2_2);
	

tel






-- Entry action for state :B_B2
node B_B2_en(idB_B2_1:int;
	idEvents1_B_1:int;
	b_1:int;
	x:int;
	isInner:bool)

returns (idB_B2:int;
	idEvents1_B:int;
	b:int);


var 	idB_B2_2, idB_B2_3, idB_B2_4, idB_B2_5, idB_B2_6:int;
	idEvents1_B_2, idEvents1_B_3, idEvents1_B_4:int;
	b_2, b_3, b_4, b_5, b_6:int;


let



	-- set state as active 
	idEvents1_B_2 
	= 786;
	

	
-- transition trace :
	--POINT__To__B2_B2a_1
		(idB_B2_2, b_2) 
	= B2_B2a_en(idB_B2_1, x, b_1, false);
		

	(idB_B2_3, idEvents1_B_3, b_3) 
	= 

	if ( idB_B2_1 = 0) then

	 (idB_B2_2, idEvents1_B_2, b_2)

	 else(idB_B2_1, idEvents1_B_2, b_1);

	

	(idB_B2_4, b_4) 
	= 
	if ( idB_B2_1 = 787) then
	B2_B2a_en(idB_B2_1, x, b_1, false)
	 else (idB_B2_1, b_1);

	

	(idB_B2_5, b_5) 
	= 
	if ( idB_B2_1 = 788) then
	B2_B2b_en(idB_B2_1, x, b_1, false)
	 else (idB_B2_1, b_1);

	

	(idB_B2_6, idEvents1_B_4, b_6) 
	= 
		 if ( idB_B2_1 = 0) then 
		(idB_B2_3, idEvents1_B_3, b_3)
		 else
		 if ( idB_B2_1 = 787) then 
		(idB_B2_4, idEvents1_B_3, b_4)
		 else
		 if ( idB_B2_1 = 788) then 
		(idB_B2_5, idEvents1_B_3, b_5)
		 else (idB_B2_1, idEvents1_B_2, b_1);


	(idB_B2, idEvents1_B, b) 
	= (idB_B2_6, idEvents1_B_4, b_6);
	

tel





-- Exit action for state :B_B2
node B_B2_ex(idB_B2_1:int;
	idEvents1_B_1:int;
	isInner:bool)

returns (idB_B2:int;
	idEvents1_B:int);


var 	idB_B2_2, idB_B2_3, idB_B2_4, idB_B2_5:int;
	idEvents1_B_2:int;


let



	
	(idB_B2_2) 
	= 
	if ( idB_B2_1 = 787) then
	B2_B2a_ex(idB_B2_1, false)
	 else (idB_B2_1);

	

	(idB_B2_3) 
	= 
	if ( idB_B2_1 = 788) then
	B2_B2b_ex(idB_B2_1, false)
	 else (idB_B2_1);

	

	(idB_B2_4) 
	= 
		 if ( idB_B2_1 = 787) then 
		(idB_B2_2)
		 else
		 if ( idB_B2_1 = 788) then 
		(idB_B2_3)
		 else (idB_B2_1);


	-- set state as inactive 
	idEvents1_B_2
	 = if (not isInner) then 0 else idEvents1_B_1;

	idB_B2_5 
	= 0;
	

	(idB_B2, idEvents1_B) 
	= (idB_B2_5, idEvents1_B_2);
	

tel






-- Entry action for state :B1_B1a
node B1_B1a_en(idB_B1_1:int;
	x:int;
	b_1:int;
	isInner:bool)

returns (idB_B1:int;
	b:int);


var 	idB_B1_2:int;
	b_2:int;


let



	-- set state as active 
	idB_B1_2 
	= 790;
	

	b_2 
	= if (not isInner) then x+5
	 else b_1;
	

	(idB_B1, b) 
	= (idB_B1_2, b_2);
	

tel





-- Exit action for state :B1_B1a
node B1_B1a_ex(idB_B1_1:int;
	isInner:bool)

returns (idB_B1:int);


var 	idB_B1_2:int;


let



	-- set state as inactive 
	idB_B1_2
	 = if (not isInner) then 0 else idB_B1_1;


	(idB_B1) 
	= (idB_B1_2);
	

tel






-- Entry action for state :B1_B1b
node B1_B1b_en(idB_B1_1:int;
	x:int;
	b_1:int;
	isInner:bool)

returns (idB_B1:int;
	b:int);


var 	idB_B1_2:int;
	b_2:int;


let



	-- set state as active 
	idB_B1_2 
	= 791;
	

	b_2 
	= if (not isInner) then x+6
	 else b_1;
	

	(idB_B1, b) 
	= (idB_B1_2, b_2);
	

tel





-- Exit action for state :B1_B1b
node B1_B1b_ex(idB_B1_1:int;
	isInner:bool)

returns (idB_B1:int);


var 	idB_B1_2:int;


let



	-- set state as inactive 
	idB_B1_2
	 = if (not isInner) then 0 else idB_B1_1;


	(idB_B1) 
	= (idB_B1_2);
	

tel






-- Entry action for state :B_B1
node B_B1_en(idB_B1_1:int;
	idEvents1_B_1:int;
	b_1:int;
	x:int;
	isInner:bool)

returns (idB_B1:int;
	idEvents1_B:int;
	b:int);


var 	idB_B1_2, idB_B1_3, idB_B1_4, idB_B1_5, idB_B1_6:int;
	idEvents1_B_2, idEvents1_B_3, idEvents1_B_4:int;
	b_2, b_3, b_4, b_5, b_6:int;


let



	-- set state as active 
	idEvents1_B_2 
	= 789;
	

	
-- transition trace :
	--POINT__To__B1_B1a_1
		(idB_B1_2, b_2) 
	= B1_B1a_en(idB_B1_1, x, b_1, false);
		

	(idB_B1_3, idEvents1_B_3, b_3) 
	= 

	if ( idB_B1_1 = 0) then

	 (idB_B1_2, idEvents1_B_2, b_2)

	 else(idB_B1_1, idEvents1_B_2, b_1);

	

	(idB_B1_4, b_4) 
	= 
	if ( idB_B1_1 = 790) then
	B1_B1a_en(idB_B1_1, x, b_1, false)
	 else (idB_B1_1, b_1);

	

	(idB_B1_5, b_5) 
	= 
	if ( idB_B1_1 = 791) then
	B1_B1b_en(idB_B1_1, x, b_1, false)
	 else (idB_B1_1, b_1);

	

	(idB_B1_6, idEvents1_B_4, b_6) 
	= 
		 if ( idB_B1_1 = 0) then 
		(idB_B1_3, idEvents1_B_3, b_3)
		 else
		 if ( idB_B1_1 = 790) then 
		(idB_B1_4, idEvents1_B_3, b_4)
		 else
		 if ( idB_B1_1 = 791) then 
		(idB_B1_5, idEvents1_B_3, b_5)
		 else (idB_B1_1, idEvents1_B_2, b_1);


	(idB_B1, idEvents1_B, b) 
	= (idB_B1_6, idEvents1_B_4, b_6);
	

tel





-- Exit action for state :B_B1
node B_B1_ex(idB_B1_1:int;
	idEvents1_B_1:int;
	isInner:bool)

returns (idB_B1:int;
	idEvents1_B:int);


var 	idB_B1_2, idB_B1_3, idB_B1_4, idB_B1_5:int;
	idEvents1_B_2:int;


let



	
	(idB_B1_2) 
	= 
	if ( idB_B1_1 = 790) then
	B1_B1a_ex(idB_B1_1, false)
	 else (idB_B1_1);

	

	(idB_B1_3) 
	= 
	if ( idB_B1_1 = 791) then
	B1_B1b_ex(idB_B1_1, false)
	 else (idB_B1_1);

	

	(idB_B1_4) 
	= 
		 if ( idB_B1_1 = 790) then 
		(idB_B1_2)
		 else
		 if ( idB_B1_1 = 791) then 
		(idB_B1_3)
		 else (idB_B1_1);


	-- set state as inactive 
	idEvents1_B_2
	 = if (not isInner) then 0 else idEvents1_B_1;

	idB_B1_5 
	= 0;
	

	(idB_B1, idEvents1_B) 
	= (idB_B1_5, idEvents1_B_2);
	

tel






-- Entry action for state :Events1_B
node Events1_B_en(idEvents1_B_1:int;
	idEvents1_Events1_1:int;
	b_1:int;
	idB_B1_1:int;
	x:int;
	idB_B2_1:int;
	isInner:bool)

returns (idEvents1_B:int;
	idEvents1_Events1:int;
	b:int;
	idB_B1:int;
	idB_B2:int);


var 	idEvents1_B_2, idEvents1_B_3, idEvents1_B_4, idEvents1_B_5, idEvents1_B_6:int;
	idEvents1_Events1_2, idEvents1_Events1_3, idEvents1_Events1_4:int;
	b_2, b_3, b_4, b_5, b_6:int;
	idB_B1_2, idB_B1_3, idB_B1_4, idB_B1_5:int;
	idB_B2_2, idB_B2_3:int;


let



	-- set state as active 
	idEvents1_Events1_2 
	= 785;
	

	
-- transition trace :
	--POINT__To__B_B1_1
		(idB_B1_2, idEvents1_B_2, b_2) 
	= B_B1_en(idB_B1_1, idEvents1_B_1, b_1, x, false);
		

	(idEvents1_B_3, idEvents1_Events1_3, b_3, idB_B1_3) 
	= 

	if ( idEvents1_B_1 = 0) then

	 (idEvents1_B_2, idEvents1_Events1_2, b_2, idB_B1_2)

	 else(idEvents1_B_1, idEvents1_Events1_2, b_1, idB_B1_1);

	

	(idB_B2_2, idEvents1_B_4, b_4) 
	= 
	if ( idEvents1_B_1 = 786) then
	B_B2_en(idB_B2_1, idEvents1_B_1, b_1, x, false)
	 else (idB_B2_1, idEvents1_B_1, b_1);

	

	(idB_B1_4, idEvents1_B_5, b_5) 
	= 
	if ( idEvents1_B_1 = 789) then
	B_B1_en(idB_B1_1, idEvents1_B_1, b_1, x, false)
	 else (idB_B1_1, idEvents1_B_1, b_1);

	

	(idEvents1_B_6, idEvents1_Events1_4, b_6, idB_B1_5, idB_B2_3) 
	= 
		 if ( idEvents1_B_1 = 0) then 
		(idEvents1_B_3, idEvents1_Events1_3, b_3, idB_B1_3, idB_B2_1)
		 else
		 if ( idEvents1_B_1 = 786) then 
		(idEvents1_B_4, idEvents1_Events1_3, b_4, idB_B1_3, idB_B2_2)
		 else
		 if ( idEvents1_B_1 = 789) then 
		(idEvents1_B_5, idEvents1_Events1_3, b_5, idB_B1_4, idB_B2_2)
		 else (idEvents1_B_1, idEvents1_Events1_2, b_1, idB_B1_1, idB_B2_1);


	(idEvents1_B, idEvents1_Events1, b, idB_B1, idB_B2) 
	= (idEvents1_B_6, idEvents1_Events1_4, b_6, idB_B1_5, idB_B2_3);
	

tel





-- Exit action for state :Events1_B
node Events1_B_ex(idB_B2_1:int;
	idEvents1_B_1:int;
	idB_B1_1:int;
	idEvents1_Events1_1:int;
	isInner:bool)

returns (idB_B2:int;
	idEvents1_B:int;
	idB_B1:int;
	idEvents1_Events1:int);


var 	idB_B2_2, idB_B2_3:int;
	idEvents1_B_2, idEvents1_B_3, idEvents1_B_4, idEvents1_B_5:int;
	idB_B1_2, idB_B1_3:int;
	idEvents1_Events1_2:int;


let



	
	(idB_B2_2, idEvents1_B_2) 
	= 
	if ( idEvents1_B_1 = 786) then
	B_B2_ex(idB_B2_1, idEvents1_B_1, false)
	 else (idB_B2_1, idEvents1_B_1);

	

	(idB_B1_2, idEvents1_B_3) 
	= 
	if ( idEvents1_B_1 = 789) then
	B_B1_ex(idB_B1_1, idEvents1_B_1, false)
	 else (idB_B1_1, idEvents1_B_1);

	

	(idB_B2_3, idEvents1_B_4, idB_B1_3) 
	= 
		 if ( idEvents1_B_1 = 786) then 
		(idB_B2_2, idEvents1_B_2, idB_B1_1)
		 else
		 if ( idEvents1_B_1 = 789) then 
		(idB_B2_2, idEvents1_B_3, idB_B1_2)
		 else (idB_B2_1, idEvents1_B_1, idB_B1_1);


	-- set state as inactive 
	idEvents1_Events1_2
	 = if (not isInner) then 0 else idEvents1_Events1_1;

	idEvents1_B_5 
	= 0;
	

	(idB_B2, idEvents1_B, idB_B1, idEvents1_Events1) 
	= (idB_B2_3, idEvents1_B_5, idB_B1_3, idEvents1_Events1_2);
	

tel






-- Entry action for state :A2_A2a
node A2_A2a_en(idA_A2_1:int;
	x:int;
	a_1:int;
	isInner:bool)

returns (idA_A2:int;
	a:int);


var 	idA_A2_2:int;
	a_2:int;


let



	-- set state as active 
	idA_A2_2 
	= 780;
	

	a_2 
	= if (not isInner) then x+3
	 else a_1;
	

	(idA_A2, a) 
	= (idA_A2_2, a_2);
	

tel





-- Exit action for state :A2_A2a
node A2_A2a_ex(idA_A2_1:int;
	isInner:bool)

returns (idA_A2:int);


var 	idA_A2_2:int;


let



	-- set state as inactive 
	idA_A2_2
	 = if (not isInner) then 0 else idA_A2_1;


	(idA_A2) 
	= (idA_A2_2);
	

tel






-- Entry action for state :A2_A2b
node A2_A2b_en(idA_A2_1:int;
	x:int;
	a_1:int;
	isInner:bool)

returns (idA_A2:int;
	a:int);


var 	idA_A2_2:int;
	a_2:int;


let



	-- set state as active 
	idA_A2_2 
	= 781;
	

	a_2 
	= if (not isInner) then x+4
	 else a_1;
	

	(idA_A2, a) 
	= (idA_A2_2, a_2);
	

tel





-- Exit action for state :A2_A2b
node A2_A2b_ex(idA_A2_1:int;
	isInner:bool)

returns (idA_A2:int);


var 	idA_A2_2:int;


let



	-- set state as inactive 
	idA_A2_2
	 = if (not isInner) then 0 else idA_A2_1;


	(idA_A2) 
	= (idA_A2_2);
	

tel






-- Entry action for state :A_A2
node A_A2_en(idA_A2_1:int;
	idEvents1_A_1:int;
	a_1:int;
	x:int;
	isInner:bool)

returns (idA_A2:int;
	idEvents1_A:int;
	a:int);


var 	idA_A2_2, idA_A2_3, idA_A2_4, idA_A2_5, idA_A2_6:int;
	idEvents1_A_2, idEvents1_A_3, idEvents1_A_4:int;
	a_2, a_3, a_4, a_5, a_6:int;


let



	-- set state as active 
	idEvents1_A_2 
	= 779;
	

	
-- transition trace :
	--POINT__To__A2_A2a_1
		(idA_A2_2, a_2) 
	= A2_A2a_en(idA_A2_1, x, a_1, false);
		

	(idA_A2_3, idEvents1_A_3, a_3) 
	= 

	if ( idA_A2_1 = 0) then

	 (idA_A2_2, idEvents1_A_2, a_2)

	 else(idA_A2_1, idEvents1_A_2, a_1);

	

	(idA_A2_4, a_4) 
	= 
	if ( idA_A2_1 = 780) then
	A2_A2a_en(idA_A2_1, x, a_1, false)
	 else (idA_A2_1, a_1);

	

	(idA_A2_5, a_5) 
	= 
	if ( idA_A2_1 = 781) then
	A2_A2b_en(idA_A2_1, x, a_1, false)
	 else (idA_A2_1, a_1);

	

	(idA_A2_6, idEvents1_A_4, a_6) 
	= 
		 if ( idA_A2_1 = 0) then 
		(idA_A2_3, idEvents1_A_3, a_3)
		 else
		 if ( idA_A2_1 = 780) then 
		(idA_A2_4, idEvents1_A_3, a_4)
		 else
		 if ( idA_A2_1 = 781) then 
		(idA_A2_5, idEvents1_A_3, a_5)
		 else (idA_A2_1, idEvents1_A_2, a_1);


	(idA_A2, idEvents1_A, a) 
	= (idA_A2_6, idEvents1_A_4, a_6);
	

tel





-- Exit action for state :A_A2
node A_A2_ex(idA_A2_1:int;
	idEvents1_A_1:int;
	isInner:bool)

returns (idA_A2:int;
	idEvents1_A:int);


var 	idA_A2_2, idA_A2_3, idA_A2_4, idA_A2_5:int;
	idEvents1_A_2:int;


let



	
	(idA_A2_2) 
	= 
	if ( idA_A2_1 = 780) then
	A2_A2a_ex(idA_A2_1, false)
	 else (idA_A2_1);

	

	(idA_A2_3) 
	= 
	if ( idA_A2_1 = 781) then
	A2_A2b_ex(idA_A2_1, false)
	 else (idA_A2_1);

	

	(idA_A2_4) 
	= 
		 if ( idA_A2_1 = 780) then 
		(idA_A2_2)
		 else
		 if ( idA_A2_1 = 781) then 
		(idA_A2_3)
		 else (idA_A2_1);


	-- set state as inactive 
	idEvents1_A_2
	 = if (not isInner) then 0 else idEvents1_A_1;

	idA_A2_5 
	= 0;
	

	(idA_A2, idEvents1_A) 
	= (idA_A2_5, idEvents1_A_2);
	

tel






-- Entry action for state :A1_A1a
node A1_A1a_en(idA_A1_1:int;
	x:int;
	a_1:int;
	isInner:bool)

returns (idA_A1:int;
	a:int);


var 	idA_A1_2:int;
	a_2:int;


let



	-- set state as active 
	idA_A1_2 
	= 783;
	

	a_2 
	= if (not isInner) then x+1
	 else a_1;
	

	(idA_A1, a) 
	= (idA_A1_2, a_2);
	

tel





-- Exit action for state :A1_A1a
node A1_A1a_ex(idA_A1_1:int;
	isInner:bool)

returns (idA_A1:int);


var 	idA_A1_2:int;


let



	-- set state as inactive 
	idA_A1_2
	 = if (not isInner) then 0 else idA_A1_1;


	(idA_A1) 
	= (idA_A1_2);
	

tel






-- Entry action for state :A1_A1b
node A1_A1b_en(idA_A1_1:int;
	x:int;
	a_1:int;
	isInner:bool)

returns (idA_A1:int;
	a:int);


var 	idA_A1_2:int;
	a_2:int;


let



	-- set state as active 
	idA_A1_2 
	= 784;
	

	a_2 
	= if (not isInner) then x+2
	 else a_1;
	

	(idA_A1, a) 
	= (idA_A1_2, a_2);
	

tel





-- Exit action for state :A1_A1b
node A1_A1b_ex(idA_A1_1:int;
	isInner:bool)

returns (idA_A1:int);


var 	idA_A1_2:int;


let



	-- set state as inactive 
	idA_A1_2
	 = if (not isInner) then 0 else idA_A1_1;


	(idA_A1) 
	= (idA_A1_2);
	

tel






-- Entry action for state :A_A1
node A_A1_en(idA_A1_1:int;
	idEvents1_A_1:int;
	a_1:int;
	x:int;
	isInner:bool)

returns (idA_A1:int;
	idEvents1_A:int;
	a:int);


var 	idA_A1_2, idA_A1_3, idA_A1_4, idA_A1_5, idA_A1_6:int;
	idEvents1_A_2, idEvents1_A_3, idEvents1_A_4:int;
	a_2, a_3, a_4, a_5, a_6:int;


let



	-- set state as active 
	idEvents1_A_2 
	= 782;
	

	
-- transition trace :
	--POINT__To__A1_A1a_1
		(idA_A1_2, a_2) 
	= A1_A1a_en(idA_A1_1, x, a_1, false);
		

	(idA_A1_3, idEvents1_A_3, a_3) 
	= 

	if ( idA_A1_1 = 0) then

	 (idA_A1_2, idEvents1_A_2, a_2)

	 else(idA_A1_1, idEvents1_A_2, a_1);

	

	(idA_A1_4, a_4) 
	= 
	if ( idA_A1_1 = 783) then
	A1_A1a_en(idA_A1_1, x, a_1, false)
	 else (idA_A1_1, a_1);

	

	(idA_A1_5, a_5) 
	= 
	if ( idA_A1_1 = 784) then
	A1_A1b_en(idA_A1_1, x, a_1, false)
	 else (idA_A1_1, a_1);

	

	(idA_A1_6, idEvents1_A_4, a_6) 
	= 
		 if ( idA_A1_1 = 0) then 
		(idA_A1_3, idEvents1_A_3, a_3)
		 else
		 if ( idA_A1_1 = 783) then 
		(idA_A1_4, idEvents1_A_3, a_4)
		 else
		 if ( idA_A1_1 = 784) then 
		(idA_A1_5, idEvents1_A_3, a_5)
		 else (idA_A1_1, idEvents1_A_2, a_1);


	(idA_A1, idEvents1_A, a) 
	= (idA_A1_6, idEvents1_A_4, a_6);
	

tel





-- Exit action for state :A_A1
node A_A1_ex(idA_A1_1:int;
	idEvents1_A_1:int;
	isInner:bool)

returns (idA_A1:int;
	idEvents1_A:int);


var 	idA_A1_2, idA_A1_3, idA_A1_4, idA_A1_5:int;
	idEvents1_A_2:int;


let



	
	(idA_A1_2) 
	= 
	if ( idA_A1_1 = 783) then
	A1_A1a_ex(idA_A1_1, false)
	 else (idA_A1_1);

	

	(idA_A1_3) 
	= 
	if ( idA_A1_1 = 784) then
	A1_A1b_ex(idA_A1_1, false)
	 else (idA_A1_1);

	

	(idA_A1_4) 
	= 
		 if ( idA_A1_1 = 783) then 
		(idA_A1_2)
		 else
		 if ( idA_A1_1 = 784) then 
		(idA_A1_3)
		 else (idA_A1_1);


	-- set state as inactive 
	idEvents1_A_2
	 = if (not isInner) then 0 else idEvents1_A_1;

	idA_A1_5 
	= 0;
	

	(idA_A1, idEvents1_A) 
	= (idA_A1_5, idEvents1_A_2);
	

tel






-- Entry action for state :Events1_A
node Events1_A_en(idEvents1_A_1:int;
	idEvents1_Events1_1:int;
	a_1:int;
	idA_A1_1:int;
	x:int;
	idA_A2_1:int;
	isInner:bool)

returns (idEvents1_A:int;
	idEvents1_Events1:int;
	a:int;
	idA_A1:int;
	idA_A2:int);


var 	idEvents1_A_2, idEvents1_A_3, idEvents1_A_4, idEvents1_A_5, idEvents1_A_6:int;
	idEvents1_Events1_2, idEvents1_Events1_3, idEvents1_Events1_4:int;
	a_2, a_3, a_4, a_5, a_6:int;
	idA_A1_2, idA_A1_3, idA_A1_4, idA_A1_5:int;
	idA_A2_2, idA_A2_3:int;


let



	-- set state as active 
	idEvents1_Events1_2 
	= 778;
	

	
-- transition trace :
	--POINT__To__A_A1_1
		(idA_A1_2, idEvents1_A_2, a_2) 
	= A_A1_en(idA_A1_1, idEvents1_A_1, a_1, x, false);
		

	(idEvents1_A_3, idEvents1_Events1_3, a_3, idA_A1_3) 
	= 

	if ( idEvents1_A_1 = 0) then

	 (idEvents1_A_2, idEvents1_Events1_2, a_2, idA_A1_2)

	 else(idEvents1_A_1, idEvents1_Events1_2, a_1, idA_A1_1);

	

	(idA_A2_2, idEvents1_A_4, a_4) 
	= 
	if ( idEvents1_A_1 = 779) then
	A_A2_en(idA_A2_1, idEvents1_A_1, a_1, x, false)
	 else (idA_A2_1, idEvents1_A_1, a_1);

	

	(idA_A1_4, idEvents1_A_5, a_5) 
	= 
	if ( idEvents1_A_1 = 782) then
	A_A1_en(idA_A1_1, idEvents1_A_1, a_1, x, false)
	 else (idA_A1_1, idEvents1_A_1, a_1);

	

	(idEvents1_A_6, idEvents1_Events1_4, a_6, idA_A1_5, idA_A2_3) 
	= 
		 if ( idEvents1_A_1 = 0) then 
		(idEvents1_A_3, idEvents1_Events1_3, a_3, idA_A1_3, idA_A2_1)
		 else
		 if ( idEvents1_A_1 = 779) then 
		(idEvents1_A_4, idEvents1_Events1_3, a_4, idA_A1_3, idA_A2_2)
		 else
		 if ( idEvents1_A_1 = 782) then 
		(idEvents1_A_5, idEvents1_Events1_3, a_5, idA_A1_4, idA_A2_2)
		 else (idEvents1_A_1, idEvents1_Events1_2, a_1, idA_A1_1, idA_A2_1);


	(idEvents1_A, idEvents1_Events1, a, idA_A1, idA_A2) 
	= (idEvents1_A_6, idEvents1_Events1_4, a_6, idA_A1_5, idA_A2_3);
	

tel





-- Exit action for state :Events1_A
node Events1_A_ex(idA_A2_1:int;
	idEvents1_A_1:int;
	idA_A1_1:int;
	idEvents1_Events1_1:int;
	isInner:bool)

returns (idA_A2:int;
	idEvents1_A:int;
	idA_A1:int;
	idEvents1_Events1:int);


var 	idA_A2_2, idA_A2_3:int;
	idEvents1_A_2, idEvents1_A_3, idEvents1_A_4, idEvents1_A_5:int;
	idA_A1_2, idA_A1_3:int;
	idEvents1_Events1_2:int;


let



	
	(idA_A2_2, idEvents1_A_2) 
	= 
	if ( idEvents1_A_1 = 779) then
	A_A2_ex(idA_A2_1, idEvents1_A_1, false)
	 else (idA_A2_1, idEvents1_A_1);

	

	(idA_A1_2, idEvents1_A_3) 
	= 
	if ( idEvents1_A_1 = 782) then
	A_A1_ex(idA_A1_1, idEvents1_A_1, false)
	 else (idA_A1_1, idEvents1_A_1);

	

	(idA_A2_3, idEvents1_A_4, idA_A1_3) 
	= 
		 if ( idEvents1_A_1 = 779) then 
		(idA_A2_2, idEvents1_A_2, idA_A1_1)
		 else
		 if ( idEvents1_A_1 = 782) then 
		(idA_A2_2, idEvents1_A_3, idA_A1_2)
		 else (idA_A2_1, idEvents1_A_1, idA_A1_1);


	-- set state as inactive 
	idEvents1_Events1_2
	 = if (not isInner) then 0 else idEvents1_Events1_1;

	idEvents1_A_5 
	= 0;
	

	(idA_A2, idEvents1_A, idA_A1, idEvents1_Events1) 
	= (idA_A2_3, idEvents1_A_5, idA_A1_3, idEvents1_Events1_2);
	

tel


--***************************************************State :B_B2 Automaton***************************************************

node B_B2_node(idB_B2_1:int;
	b_1:int;
	x:int;
	S1:bool;
	R1:bool)

returns (idB_B2:int;
	b:int);


let

	 automaton b_b2

	state POINTB_B2:
	unless (idB_B2_1=0) restart POINT__TO__B2_B2A_1



	unless (idB_B2_1=787) and S1 restart B2_B2A__TO__B2_B2B_1



	unless (idB_B2_1=788) and R1 restart B2_B2B__TO__B2_B2A_1



	unless (idB_B2_1=787) restart B2_B2A_IDL

	unless (idB_B2_1=788) restart B2_B2B_IDL

	let

		(idB_B2, b) 
	= (idB_B2_1, b_1);
	

	tel



	state POINT__TO__B2_B2A_1:

	 var 	idB_B2_2:int;
	b_2:int;
	let

		-- transition trace :
	--POINT__To__B2_B2a_1
		(idB_B2_2, b_2) 
	= B2_B2a_en(idB_B2_1, x, b_1, false);
		

	(idB_B2, b) 
	=  (idB_B2_2, b_2);


	tel

	until true restart POINTB_B2



	state B2_B2A__TO__B2_B2B_1:

	 var 	idB_B2_2, idB_B2_3:int;
	b_2:int;
	let

		-- transition trace :
	--B2_B2a__To__B2_B2b_1
		(idB_B2_2) 
	= B2_B2a_ex(idB_B2_1, false);
		

		(idB_B2_3, b_2) 
	= B2_B2b_en(idB_B2_2, x, b_1, false);
		

	(idB_B2, b) 
	=  (idB_B2_3, b_2);


	tel

	until true restart POINTB_B2



	state B2_B2B__TO__B2_B2A_1:

	 var 	idB_B2_2, idB_B2_3:int;
	b_2:int;
	let

		-- transition trace :
	--B2_B2b__To__B2_B2a_1
		(idB_B2_2) 
	= B2_B2b_ex(idB_B2_1, false);
		

		(idB_B2_3, b_2) 
	= B2_B2a_en(idB_B2_2, x, b_1, false);
		

	(idB_B2, b) 
	=  (idB_B2_3, b_2);


	tel

	until true restart POINTB_B2



	state B2_B2A_IDL:

	 	let

		

	(idB_B2, b) 
	= (idB_B2_1, b_1);
	

	tel

	until true restart POINTB_B2



	state B2_B2B_IDL:

	 	let

		

	(idB_B2, b) 
	= (idB_B2_1, b_1);
	

	tel

	until true restart POINTB_B2



tel


--***************************************************State :B_B1 Automaton***************************************************

node B_B1_node(idB_B1_1:int;
	b_1:int;
	x:int;
	S1:bool;
	R1:bool)

returns (idB_B1:int;
	b:int);


let

	 automaton b_b1

	state POINTB_B1:
	unless (idB_B1_1=0) restart POINT__TO__B1_B1A_1



	unless (idB_B1_1=790) and S1 restart B1_B1A__TO__B1_B1B_1



	unless (idB_B1_1=791) and R1 restart B1_B1B__TO__B1_B1A_1



	unless (idB_B1_1=790) restart B1_B1A_IDL

	unless (idB_B1_1=791) restart B1_B1B_IDL

	let

		(idB_B1, b) 
	= (idB_B1_1, b_1);
	

	tel



	state POINT__TO__B1_B1A_1:

	 var 	idB_B1_2:int;
	b_2:int;
	let

		-- transition trace :
	--POINT__To__B1_B1a_1
		(idB_B1_2, b_2) 
	= B1_B1a_en(idB_B1_1, x, b_1, false);
		

	(idB_B1, b) 
	=  (idB_B1_2, b_2);


	tel

	until true restart POINTB_B1



	state B1_B1A__TO__B1_B1B_1:

	 var 	idB_B1_2, idB_B1_3:int;
	b_2:int;
	let

		-- transition trace :
	--B1_B1a__To__B1_B1b_1
		(idB_B1_2) 
	= B1_B1a_ex(idB_B1_1, false);
		

		(idB_B1_3, b_2) 
	= B1_B1b_en(idB_B1_2, x, b_1, false);
		

	(idB_B1, b) 
	=  (idB_B1_3, b_2);


	tel

	until true restart POINTB_B1



	state B1_B1B__TO__B1_B1A_1:

	 var 	idB_B1_2, idB_B1_3:int;
	b_2:int;
	let

		-- transition trace :
	--B1_B1b__To__B1_B1a_1
		(idB_B1_2) 
	= B1_B1b_ex(idB_B1_1, false);
		

		(idB_B1_3, b_2) 
	= B1_B1a_en(idB_B1_2, x, b_1, false);
		

	(idB_B1, b) 
	=  (idB_B1_3, b_2);


	tel

	until true restart POINTB_B1



	state B1_B1A_IDL:

	 	let

		

	(idB_B1, b) 
	= (idB_B1_1, b_1);
	

	tel

	until true restart POINTB_B1



	state B1_B1B_IDL:

	 	let

		

	(idB_B1, b) 
	= (idB_B1_1, b_1);
	

	tel

	until true restart POINTB_B1



tel


--***************************************************State :Events1_B Automaton***************************************************

node Events1_B_node(idEvents1_B_1:int;
	b_1:int;
	idB_B1_1:int;
	x:int;
	T1:bool;
	idB_B2_1:int;
	c_1:int;
	R1:bool;
	S1:bool)

returns (idEvents1_B:int;
	b:int;
	idB_B1:int;
	idB_B2:int;
	c:int);


let

	 automaton events1_b

	state POINTEvents1_B:
	unless (idEvents1_B_1=0) restart POINT__TO__B_B1_1



	unless (idEvents1_B_1=786) and T1 restart B_B2__TO__B_B1_1



	unless (idEvents1_B_1=789) and T1 restart B_B1__TO__B_B2_1



	unless (idEvents1_B_1=786) restart B_B2_IDL

	unless (idEvents1_B_1=789) restart B_B1_IDL

	let

		(idEvents1_B, b, idB_B1, idB_B2, c) 
	= (idEvents1_B_1, b_1, idB_B1_1, idB_B2_1, c_1);
	

	tel



	state POINT__TO__B_B1_1:

	 var 	idEvents1_B_2:int;
	b_2:int;
	idB_B1_2:int;
	let

		-- transition trace :
	--POINT__To__B_B1_1
		(idB_B1_2, idEvents1_B_2, b_2) 
	= B_B1_en(idB_B1_1, idEvents1_B_1, b_1, x, false);
		

	(idEvents1_B, b, idB_B1) 
	=  (idEvents1_B_2, b_2, idB_B1_2);

	--add unused variables
	(c, idB_B2) 
	= (c_1, idB_B2_1);
	

	tel

	until true restart POINTEvents1_B



	state B_B2__TO__B_B1_1:

	 var 	idEvents1_B_2, idEvents1_B_3:int;
	b_2:int;
	idB_B1_2:int;
	idB_B2_2:int;
	c_2:int;
	let

		-- transition trace :
	--B_B2__To__B_B1_1
		(idB_B2_2, idEvents1_B_2) 
	= B_B2_ex(idB_B2_1, idEvents1_B_1, false);
		

		(c_2) 
	= B_B2__To__B_B1_1_Transition_Action(c_1);
		

		(idB_B1_2, idEvents1_B_3, b_2) 
	= B_B1_en(idB_B1_1, idEvents1_B_2, b_1, x, false);
		

	(idEvents1_B, b, idB_B1, idB_B2, c) 
	=  (idEvents1_B_3, b_2, idB_B1_2, idB_B2_2, c_2);


	tel

	until true restart POINTEvents1_B



	state B_B1__TO__B_B2_1:

	 var 	idEvents1_B_2, idEvents1_B_3:int;
	b_2:int;
	idB_B1_2:int;
	idB_B2_2:int;
	c_2:int;
	let

		-- transition trace :
	--B_B1__To__B_B2_1
		(idB_B1_2, idEvents1_B_2) 
	= B_B1_ex(idB_B1_1, idEvents1_B_1, false);
		

		(c_2) 
	= B_B1__To__B_B2_1_Transition_Action(c_1);
		

		(idB_B2_2, idEvents1_B_3, b_2) 
	= B_B2_en(idB_B2_1, idEvents1_B_2, b_1, x, false);
		

	(idEvents1_B, b, idB_B1, idB_B2, c) 
	=  (idEvents1_B_3, b_2, idB_B1_2, idB_B2_2, c_2);


	tel

	until true restart POINTEvents1_B



	state B_B2_IDL:

	 var 	b_2:int;
	idB_B2_2:int;
	let

		
	(idB_B2_2, b_2) 
	= B_B2_node(idB_B2_1, b_1, x, S1, R1);

		


	(idEvents1_B, b, idB_B1, idB_B2, c) 
	= (idEvents1_B_1, b_2, idB_B1_1, idB_B2_2, c_1);
	

	tel

	until true restart POINTEvents1_B



	state B_B1_IDL:

	 var 	b_2:int;
	idB_B1_2:int;
	let

		
	(idB_B1_2, b_2) 
	= B_B1_node(idB_B1_1, b_1, x, S1, R1);

		


	(idEvents1_B, b, idB_B1, idB_B2, c) 
	= (idEvents1_B_1, b_2, idB_B1_2, idB_B2_1, c_1);
	

	tel

	until true restart POINTEvents1_B



tel






node A2_A2a__To__A2_A2b_1_Transition_Action(idEvents1_B_1:int;
	b_1:int;
	idB_B1_1:int;
	x:int;
	T1:bool;
	idB_B2_1:int;
	c_1:int;
	R1:bool;
	S1:bool)

returns (idEvents1_B:int;
	b:int;
	idB_B1:int;
	idB_B2:int;
	c:int);


var 	idEvents1_B_2:int;
	b_2:int;
	idB_B1_2:int;
	idB_B2_2:int;
	c_2:int;


let



	(idEvents1_B_2, b_2, idB_B1_2, idB_B2_2, c_2) 
	= Events1_B_node(idEvents1_B_1, b_1, idB_B1_1, x, T1, idB_B2_1, c_1, R1, true);
	

	(idEvents1_B, b, idB_B1, idB_B2, c) 
	= (idEvents1_B_2, b_2, idB_B1_2, idB_B2_2, c_2);
	

tel






node A2_A2b__To__A2_A2a_1_Transition_Action(idEvents1_B_1:int;
	b_1:int;
	idB_B1_1:int;
	x:int;
	T1:bool;
	idB_B2_1:int;
	c_1:int;
	R1:bool;
	S1:bool)

returns (idEvents1_B:int;
	b:int;
	idB_B1:int;
	idB_B2:int;
	c:int);


var 	idEvents1_B_2:int;
	b_2:int;
	idB_B1_2:int;
	idB_B2_2:int;
	c_2:int;


let



	(idEvents1_B_2, b_2, idB_B1_2, idB_B2_2, c_2) 
	= Events1_B_node(idEvents1_B_1, b_1, idB_B1_1, x, T1, idB_B2_1, c_1, true, S1);
	

	(idEvents1_B, b, idB_B1, idB_B2, c) 
	= (idEvents1_B_2, b_2, idB_B1_2, idB_B2_2, c_2);
	

tel


--***************************************************State :A_A2 Automaton***************************************************

node A_A2_node(idA_A2_1:int;
	a_1:int;
	x:int;
	S:bool;
	R1:bool;
	S1:bool;
	T1:bool;
	b_1:int;
	c_1:int;
	idB_B1_1:int;
	idB_B2_1:int;
	idEvents1_B_1:int;
	R:bool)

returns (idA_A2:int;
	a:int;
	b:int;
	c:int;
	idB_B1:int;
	idB_B2:int;
	idEvents1_B:int);


let

	 automaton a_a2

	state POINTA_A2:
	unless (idA_A2_1=0) restart POINT__TO__A2_A2A_1



	unless (idA_A2_1=780) and S restart A2_A2A__TO__A2_A2B_1



	unless (idA_A2_1=781) and R restart A2_A2B__TO__A2_A2A_1



	unless (idA_A2_1=780) restart A2_A2A_IDL

	unless (idA_A2_1=781) restart A2_A2B_IDL

	let

		(idA_A2, a, b, c, idB_B1, idB_B2, idEvents1_B) 
	= (idA_A2_1, a_1, b_1, c_1, idB_B1_1, idB_B2_1, idEvents1_B_1);
	

	tel



	state POINT__TO__A2_A2A_1:

	 var 	idA_A2_2:int;
	a_2:int;
	let

		-- transition trace :
	--POINT__To__A2_A2a_1
		(idA_A2_2, a_2) 
	= A2_A2a_en(idA_A2_1, x, a_1, false);
		

	(idA_A2, a) 
	=  (idA_A2_2, a_2);

	--add unused variables
	(b, c, idB_B1, idB_B2, idEvents1_B) 
	= (b_1, c_1, idB_B1_1, idB_B2_1, idEvents1_B_1);
	

	tel

	until true restart POINTA_A2



	state A2_A2A__TO__A2_A2B_1:

	 var 	idA_A2_2, idA_A2_3:int;
	a_2:int;
	b_2:int;
	c_2:int;
	idB_B1_2:int;
	idB_B2_2:int;
	idEvents1_B_2:int;
	let

		-- transition trace :
	--A2_A2a__To__A2_A2b_1
		(idA_A2_2) 
	= A2_A2a_ex(idA_A2_1, false);
		

		(idEvents1_B_2, b_2, idB_B1_2, idB_B2_2, c_2) 
	= A2_A2a__To__A2_A2b_1_Transition_Action(idEvents1_B_1, b_1, idB_B1_1, x, T1, idB_B2_1, c_1, R1, S1);
		

		(idA_A2_3, a_2) 
	= A2_A2b_en(idA_A2_2, x, a_1, false);
		

	(idA_A2, a, b, c, idB_B1, idB_B2, idEvents1_B) 
	=  (idA_A2_3, a_2, b_2, c_2, idB_B1_2, idB_B2_2, idEvents1_B_2);


	tel

	until true restart POINTA_A2



	state A2_A2B__TO__A2_A2A_1:

	 var 	idA_A2_2, idA_A2_3:int;
	a_2:int;
	b_2:int;
	c_2:int;
	idB_B1_2:int;
	idB_B2_2:int;
	idEvents1_B_2:int;
	let

		-- transition trace :
	--A2_A2b__To__A2_A2a_1
		(idA_A2_2) 
	= A2_A2b_ex(idA_A2_1, false);
		

		(idEvents1_B_2, b_2, idB_B1_2, idB_B2_2, c_2) 
	= A2_A2b__To__A2_A2a_1_Transition_Action(idEvents1_B_1, b_1, idB_B1_1, x, T1, idB_B2_1, c_1, R1, S1);
		

		(idA_A2_3, a_2) 
	= A2_A2a_en(idA_A2_2, x, a_1, false);
		

	(idA_A2, a, b, c, idB_B1, idB_B2, idEvents1_B) 
	=  (idA_A2_3, a_2, b_2, c_2, idB_B1_2, idB_B2_2, idEvents1_B_2);


	tel

	until true restart POINTA_A2



	state A2_A2A_IDL:

	 	let

		

	(idA_A2, a, b, c, idB_B1, idB_B2, idEvents1_B) 
	= (idA_A2_1, a_1, b_1, c_1, idB_B1_1, idB_B2_1, idEvents1_B_1);
	

	tel

	until true restart POINTA_A2



	state A2_A2B_IDL:

	 	let

		

	(idA_A2, a, b, c, idB_B1, idB_B2, idEvents1_B) 
	= (idA_A2_1, a_1, b_1, c_1, idB_B1_1, idB_B2_1, idEvents1_B_1);
	

	tel

	until true restart POINTA_A2



tel






node A1_A1b__To__A1_A1a_1_Transition_Action(idEvents1_B_1:int;
	b_1:int;
	idB_B1_1:int;
	x:int;
	T1:bool;
	idB_B2_1:int;
	c_1:int;
	R1:bool;
	S1:bool)

returns (idEvents1_B:int;
	b:int;
	idB_B1:int;
	idB_B2:int;
	c:int);


var 	idEvents1_B_2:int;
	b_2:int;
	idB_B1_2:int;
	idB_B2_2:int;
	c_2:int;


let



	(idEvents1_B_2, b_2, idB_B1_2, idB_B2_2, c_2) 
	= Events1_B_node(idEvents1_B_1, b_1, idB_B1_1, x, T1, idB_B2_1, c_1, true, S1);
	

	(idEvents1_B, b, idB_B1, idB_B2, c) 
	= (idEvents1_B_2, b_2, idB_B1_2, idB_B2_2, c_2);
	

tel






node A1_A1a__To__A1_A1b_1_Transition_Action(idEvents1_B_1:int;
	b_1:int;
	idB_B1_1:int;
	x:int;
	T1:bool;
	idB_B2_1:int;
	c_1:int;
	R1:bool;
	S1:bool)

returns (idEvents1_B:int;
	b:int;
	idB_B1:int;
	idB_B2:int;
	c:int);


var 	idEvents1_B_2:int;
	b_2:int;
	idB_B1_2:int;
	idB_B2_2:int;
	c_2:int;


let



	(idEvents1_B_2, b_2, idB_B1_2, idB_B2_2, c_2) 
	= Events1_B_node(idEvents1_B_1, b_1, idB_B1_1, x, T1, idB_B2_1, c_1, R1, true);
	

	(idEvents1_B, b, idB_B1, idB_B2, c) 
	= (idEvents1_B_2, b_2, idB_B1_2, idB_B2_2, c_2);
	

tel


--***************************************************State :A_A1 Automaton***************************************************

node A_A1_node(idA_A1_1:int;
	a_1:int;
	x:int;
	S:bool;
	R1:bool;
	S1:bool;
	T1:bool;
	b_1:int;
	c_1:int;
	idB_B1_1:int;
	idB_B2_1:int;
	idEvents1_B_1:int;
	R:bool)

returns (idA_A1:int;
	a:int;
	b:int;
	c:int;
	idB_B1:int;
	idB_B2:int;
	idEvents1_B:int);


let

	 automaton a_a1

	state POINTA_A1:
	unless (idA_A1_1=0) restart POINT__TO__A1_A1A_1



	unless (idA_A1_1=783) and S restart A1_A1A__TO__A1_A1B_1



	unless (idA_A1_1=784) and R restart A1_A1B__TO__A1_A1A_1



	unless (idA_A1_1=783) restart A1_A1A_IDL

	unless (idA_A1_1=784) restart A1_A1B_IDL

	let

		(idA_A1, a, b, c, idB_B1, idB_B2, idEvents1_B) 
	= (idA_A1_1, a_1, b_1, c_1, idB_B1_1, idB_B2_1, idEvents1_B_1);
	

	tel



	state POINT__TO__A1_A1A_1:

	 var 	idA_A1_2:int;
	a_2:int;
	let

		-- transition trace :
	--POINT__To__A1_A1a_1
		(idA_A1_2, a_2) 
	= A1_A1a_en(idA_A1_1, x, a_1, false);
		

	(idA_A1, a) 
	=  (idA_A1_2, a_2);

	--add unused variables
	(b, c, idB_B1, idB_B2, idEvents1_B) 
	= (b_1, c_1, idB_B1_1, idB_B2_1, idEvents1_B_1);
	

	tel

	until true restart POINTA_A1



	state A1_A1A__TO__A1_A1B_1:

	 var 	idA_A1_2, idA_A1_3:int;
	a_2:int;
	b_2:int;
	c_2:int;
	idB_B1_2:int;
	idB_B2_2:int;
	idEvents1_B_2:int;
	let

		-- transition trace :
	--A1_A1a__To__A1_A1b_1
		(idA_A1_2) 
	= A1_A1a_ex(idA_A1_1, false);
		

		(idEvents1_B_2, b_2, idB_B1_2, idB_B2_2, c_2) 
	= A1_A1a__To__A1_A1b_1_Transition_Action(idEvents1_B_1, b_1, idB_B1_1, x, T1, idB_B2_1, c_1, R1, S1);
		

		(idA_A1_3, a_2) 
	= A1_A1b_en(idA_A1_2, x, a_1, false);
		

	(idA_A1, a, b, c, idB_B1, idB_B2, idEvents1_B) 
	=  (idA_A1_3, a_2, b_2, c_2, idB_B1_2, idB_B2_2, idEvents1_B_2);


	tel

	until true restart POINTA_A1



	state A1_A1B__TO__A1_A1A_1:

	 var 	idA_A1_2, idA_A1_3:int;
	a_2:int;
	b_2:int;
	c_2:int;
	idB_B1_2:int;
	idB_B2_2:int;
	idEvents1_B_2:int;
	let

		-- transition trace :
	--A1_A1b__To__A1_A1a_1
		(idA_A1_2) 
	= A1_A1b_ex(idA_A1_1, false);
		

		(idEvents1_B_2, b_2, idB_B1_2, idB_B2_2, c_2) 
	= A1_A1b__To__A1_A1a_1_Transition_Action(idEvents1_B_1, b_1, idB_B1_1, x, T1, idB_B2_1, c_1, R1, S1);
		

		(idA_A1_3, a_2) 
	= A1_A1a_en(idA_A1_2, x, a_1, false);
		

	(idA_A1, a, b, c, idB_B1, idB_B2, idEvents1_B) 
	=  (idA_A1_3, a_2, b_2, c_2, idB_B1_2, idB_B2_2, idEvents1_B_2);


	tel

	until true restart POINTA_A1



	state A1_A1A_IDL:

	 	let

		

	(idA_A1, a, b, c, idB_B1, idB_B2, idEvents1_B) 
	= (idA_A1_1, a_1, b_1, c_1, idB_B1_1, idB_B2_1, idEvents1_B_1);
	

	tel

	until true restart POINTA_A1



	state A1_A1B_IDL:

	 	let

		

	(idA_A1, a, b, c, idB_B1, idB_B2, idEvents1_B) 
	= (idA_A1_1, a_1, b_1, c_1, idB_B1_1, idB_B2_1, idEvents1_B_1);
	

	tel

	until true restart POINTA_A1



tel






node A_A1__To__A_A2_1_Transition_Action(idEvents1_B_1:int;
	b_1:int;
	idB_B1_1:int;
	x:int;
	T1:bool;
	idB_B2_1:int;
	c_1:int;
	R1:bool;
	S1:bool)

returns (idEvents1_B:int;
	b:int;
	idB_B1:int;
	idB_B2:int;
	c:int);


var 	idEvents1_B_2:int;
	b_2:int;
	idB_B1_2:int;
	idB_B2_2:int;
	c_2:int;


let



	(idEvents1_B_2, b_2, idB_B1_2, idB_B2_2, c_2) 
	= Events1_B_node(idEvents1_B_1, b_1, idB_B1_1, x, true, idB_B2_1, c_1, R1, S1);
	

	(idEvents1_B, b, idB_B1, idB_B2, c) 
	= (idEvents1_B_2, b_2, idB_B1_2, idB_B2_2, c_2);
	

tel






node A_A2__To__A_A1_1_Transition_Action(idEvents1_B_1:int;
	b_1:int;
	idB_B1_1:int;
	x:int;
	T1:bool;
	idB_B2_1:int;
	c_1:int;
	R1:bool;
	S1:bool)

returns (idEvents1_B:int;
	b:int;
	idB_B1:int;
	idB_B2:int;
	c:int);


var 	idEvents1_B_2:int;
	b_2:int;
	idB_B1_2:int;
	idB_B2_2:int;
	c_2:int;


let



	(idEvents1_B_2, b_2, idB_B1_2, idB_B2_2, c_2) 
	= Events1_B_node(idEvents1_B_1, b_1, idB_B1_1, x, true, idB_B2_1, c_1, R1, S1);
	

	(idEvents1_B, b, idB_B1, idB_B2, c) 
	= (idEvents1_B_2, b_2, idB_B1_2, idB_B2_2, c_2);
	

tel


--***************************************************State :Events1_A Automaton***************************************************

node Events1_A_node(idEvents1_A_1:int;
	a_1:int;
	idA_A1_1:int;
	x:int;
	T:bool;
	idA_A2_1:int;
	R1:bool;
	S1:bool;
	T1:bool;
	b_1:int;
	c_1:int;
	idB_B1_1:int;
	idB_B2_1:int;
	idEvents1_B_1:int;
	R:bool;
	S:bool)

returns (idEvents1_A:int;
	a:int;
	idA_A1:int;
	idA_A2:int;
	b:int;
	c:int;
	idB_B1:int;
	idB_B2:int;
	idEvents1_B:int);


let

	 automaton events1_a

	state POINTEvents1_A:
	unless (idEvents1_A_1=0) restart POINT__TO__A_A1_1



	unless (idEvents1_A_1=779) and T restart A_A2__TO__A_A1_1



	unless (idEvents1_A_1=782) and T restart A_A1__TO__A_A2_1



	unless (idEvents1_A_1=779) restart A_A2_IDL

	unless (idEvents1_A_1=782) restart A_A1_IDL

	let

		(idEvents1_A, a, idA_A1, idA_A2, b, c, idB_B1, idB_B2, idEvents1_B) 
	= (idEvents1_A_1, a_1, idA_A1_1, idA_A2_1, b_1, c_1, idB_B1_1, idB_B2_1, idEvents1_B_1);
	

	tel



	state POINT__TO__A_A1_1:

	 var 	idEvents1_A_2:int;
	a_2:int;
	idA_A1_2:int;
	let

		-- transition trace :
	--POINT__To__A_A1_1
		(idA_A1_2, idEvents1_A_2, a_2) 
	= A_A1_en(idA_A1_1, idEvents1_A_1, a_1, x, false);
		

	(idEvents1_A, a, idA_A1) 
	=  (idEvents1_A_2, a_2, idA_A1_2);

	--add unused variables
	(b, c, idA_A2, idB_B1, idB_B2, idEvents1_B) 
	= (b_1, c_1, idA_A2_1, idB_B1_1, idB_B2_1, idEvents1_B_1);
	

	tel

	until true restart POINTEvents1_A



	state A_A2__TO__A_A1_1:

	 var 	idEvents1_A_2, idEvents1_A_3:int;
	a_2:int;
	idA_A1_2:int;
	idA_A2_2:int;
	b_2:int;
	c_2:int;
	idB_B1_2:int;
	idB_B2_2:int;
	idEvents1_B_2:int;
	let

		-- transition trace :
	--A_A2__To__A_A1_1
		(idA_A2_2, idEvents1_A_2) 
	= A_A2_ex(idA_A2_1, idEvents1_A_1, false);
		

		(idEvents1_B_2, b_2, idB_B1_2, idB_B2_2, c_2) 
	= A_A2__To__A_A1_1_Transition_Action(idEvents1_B_1, b_1, idB_B1_1, x, T1, idB_B2_1, c_1, R1, S1);
		

		(idA_A1_2, idEvents1_A_3, a_2) 
	= A_A1_en(idA_A1_1, idEvents1_A_2, a_1, x, false);
		

	(idEvents1_A, a, idA_A1, idA_A2, b, c, idB_B1, idB_B2, idEvents1_B) 
	=  (idEvents1_A_3, a_2, idA_A1_2, idA_A2_2, b_2, c_2, idB_B1_2, idB_B2_2, idEvents1_B_2);


	tel

	until true restart POINTEvents1_A



	state A_A1__TO__A_A2_1:

	 var 	idEvents1_A_2, idEvents1_A_3:int;
	a_2:int;
	idA_A1_2:int;
	idA_A2_2:int;
	b_2:int;
	c_2:int;
	idB_B1_2:int;
	idB_B2_2:int;
	idEvents1_B_2:int;
	let

		-- transition trace :
	--A_A1__To__A_A2_1
		(idA_A1_2, idEvents1_A_2) 
	= A_A1_ex(idA_A1_1, idEvents1_A_1, false);
		

		(idEvents1_B_2, b_2, idB_B1_2, idB_B2_2, c_2) 
	= A_A1__To__A_A2_1_Transition_Action(idEvents1_B_1, b_1, idB_B1_1, x, T1, idB_B2_1, c_1, R1, S1);
		

		(idA_A2_2, idEvents1_A_3, a_2) 
	= A_A2_en(idA_A2_1, idEvents1_A_2, a_1, x, false);
		

	(idEvents1_A, a, idA_A1, idA_A2, b, c, idB_B1, idB_B2, idEvents1_B) 
	=  (idEvents1_A_3, a_2, idA_A1_2, idA_A2_2, b_2, c_2, idB_B1_2, idB_B2_2, idEvents1_B_2);


	tel

	until true restart POINTEvents1_A



	state A_A2_IDL:

	 var 	a_2:int;
	idA_A2_2:int;
	b_2:int;
	c_2:int;
	idB_B1_2:int;
	idB_B2_2:int;
	idEvents1_B_2:int;
	let

		
	(idA_A2_2, a_2, b_2, c_2, idB_B1_2, idB_B2_2, idEvents1_B_2) 
	= A_A2_node(idA_A2_1, a_1, x, S, R1, S1, T1, b_1, c_1, idB_B1_1, idB_B2_1, idEvents1_B_1, R);

		


	(idEvents1_A, a, idA_A1, idA_A2, b, c, idB_B1, idB_B2, idEvents1_B) 
	= (idEvents1_A_1, a_2, idA_A1_1, idA_A2_2, b_2, c_2, idB_B1_2, idB_B2_2, idEvents1_B_2);
	

	tel

	until true restart POINTEvents1_A



	state A_A1_IDL:

	 var 	a_2:int;
	idA_A1_2:int;
	b_2:int;
	c_2:int;
	idB_B1_2:int;
	idB_B2_2:int;
	idEvents1_B_2:int;
	let

		
	(idA_A1_2, a_2, b_2, c_2, idB_B1_2, idB_B2_2, idEvents1_B_2) 
	= A_A1_node(idA_A1_1, a_1, x, S, R1, S1, T1, b_1, c_1, idB_B1_1, idB_B2_1, idEvents1_B_1, R);

		


	(idEvents1_A, a, idA_A1, idA_A2, b, c, idB_B1, idB_B2, idEvents1_B) 
	= (idEvents1_A_1, a_2, idA_A1_2, idA_A2_1, b_2, c_2, idB_B1_2, idB_B2_2, idEvents1_B_2);
	

	tel

	until true restart POINTEvents1_A



tel


--***************************************************State :Events1_Events1 Automaton***************************************************

node Events1_Events1_node(idEvents1_Events1_1:int;
	a_1:int;
	idA_A1_1:int;
	idA_A2_1:int;
	idEvents1_A_1:int;
	x:int;
	b_1:int;
	idB_B1_1:int;
	idB_B2_1:int;
	idEvents1_B_1:int;
	R:bool;
	R1:bool;
	S:bool;
	S1:bool;
	T:bool;
	T1:bool;
	c_1:int)

returns (idEvents1_Events1:int;
	a:int;
	idA_A1:int;
	idA_A2:int;
	idEvents1_A:int;
	b:int;
	idB_B1:int;
	idB_B2:int;
	idEvents1_B:int;
	c:int);


let

	 automaton events1_events1

	state POINTEvents1_Events1:
	unless (idEvents1_Events1_1=0) restart EVENTS1_EVENTS1_PARALLEL_ENTRY
	unless true  restart EVENTS1_EVENTS1_PARALLEL_IDL

	let

		(idEvents1_Events1, a, idA_A1, idA_A2, idEvents1_A, b, idB_B1, idB_B2, idEvents1_B, c) 
	= (idEvents1_Events1_1, a_1, idA_A1_1, idA_A2_1, idEvents1_A_1, b_1, idB_B1_1, idB_B2_1, idEvents1_B_1, c_1);
	

	tel



	state EVENTS1_EVENTS1_PARALLEL_ENTRY:

	 var 	idEvents1_Events1_2, idEvents1_Events1_3:int;
	a_2:int;
	idA_A1_2:int;
	idA_A2_2:int;
	idEvents1_A_2:int;
	b_2:int;
	idB_B1_2:int;
	idB_B2_2:int;
	idEvents1_B_2:int;
	let

		
	(idEvents1_A_2, idEvents1_Events1_2, a_2, idA_A1_2, idA_A2_2) 
	= Events1_A_en(idEvents1_A_1, idEvents1_Events1_1, a_1, idA_A1_1, x, idA_A2_1, false);

	(idEvents1_B_2, idEvents1_Events1_3, b_2, idB_B1_2, idB_B2_2) 
	= Events1_B_en(idEvents1_B_1, idEvents1_Events1_2, b_1, idB_B1_1, x, idB_B2_1, false);


	(idEvents1_Events1, a, idA_A1, idA_A2, idEvents1_A, b, idB_B1, idB_B2, idEvents1_B) 
	= (idEvents1_Events1_3, a_2, idA_A1_2, idA_A2_2, idEvents1_A_2, b_2, idB_B1_2, idB_B2_2, idEvents1_B_2);
	
	--add unused variables
	(c) 
	= (c_1);
	

	tel

	until true restart POINTEvents1_Events1



	state EVENTS1_EVENTS1_PARALLEL_IDL:

	 var 	a_2:int;
	idA_A1_2:int;
	idA_A2_2:int;
	idEvents1_A_2:int;
	b_2, b_3:int;
	idB_B1_2, idB_B1_3:int;
	idB_B2_2, idB_B2_3:int;
	idEvents1_B_2, idEvents1_B_3:int;
	c_2, c_3:int;
	let

		

		(idEvents1_A_2, a_2, idA_A1_2, idA_A2_2, b_2, c_2, idB_B1_2, idB_B2_2, idEvents1_B_2)
	= if not (idEvents1_A_1= 0 ) then Events1_A_node(idEvents1_A_1, a_1, idA_A1_1, x, T, idA_A2_1, R1, S1, T1, b_1, c_1, idB_B1_1, idB_B2_1, idEvents1_B_1, R, S)

		 else (idEvents1_A_1, a_1, idA_A1_1, idA_A2_1, b_1, c_1, idB_B1_1, idB_B2_1, idEvents1_B_1);

		

		

		(idEvents1_B_3, b_3, idB_B1_3, idB_B2_3, c_3)
	= if not (idEvents1_B_2= 0 ) then Events1_B_node(idEvents1_B_2, b_2, idB_B1_2, x, T1, idB_B2_2, c_2, R1, S1)

		 else (idEvents1_B_2, b_2, idB_B1_2, idB_B2_2, c_2);

		

		

	(idEvents1_Events1, a, idA_A1, idA_A2, idEvents1_A, b, idB_B1, idB_B2, idEvents1_B, c) 
	= (idEvents1_Events1_1, a_2, idA_A1_2, idA_A2_2, idEvents1_A_2, b_3, idB_B1_3, idB_B2_3, idEvents1_B_3, c_3);
	

	tel

	until true restart POINTEvents1_Events1



tel


--***************************************************State :Events1_Events1 Automaton***************************************************

node Events1_Events1(x:int;
	R:bool;
	S:bool;
	T:bool)

returns (a:int;
	b:int;
	c:int);


var a_1: int;

	b_1: int;

	c_1: int;

	R1, R1_1: bool;

	S1, S1_1: bool;

	T1, T1_1: bool;

	idEvents1_Events1, idEvents1_Events1_1: int;

	idB_B2, idB_B2_1: int;

	idB_B1, idB_B1_1: int;

	idEvents1_B, idEvents1_B_1: int;

	idA_A2, idA_A2_1: int;

	idA_A1, idA_A1_1: int;

	idEvents1_A, idEvents1_A_1: int;

		idEvents1_Events1_2, idEvents1_Events1_3:int;
	a_2, a_3:int;
	idA_A1_2, idA_A1_3:int;
	idA_A2_2, idA_A2_3:int;
	idEvents1_A_2, idEvents1_A_3:int;
	b_2, b_3:int;
	idB_B1_2, idB_B1_3:int;
	idB_B2_2, idB_B2_3:int;
	idEvents1_B_2, idEvents1_B_3:int;
	c_2, c_3:int;
let

	a_1 = 0 -> pre a;

	b_1 = 0 -> pre b;

	c_1 = 0 -> pre c;

	R1_1 = false -> pre R1;

	S1_1 = false -> pre S1;

	T1_1 = false -> pre T1;

	idEvents1_Events1_1 = 0 -> pre idEvents1_Events1;

	idB_B2_1 = 0 -> pre idB_B2;

	idB_B1_1 = 0 -> pre idB_B1;

	idEvents1_B_1 = 0 -> pre idEvents1_B;

	idA_A2_1 = 0 -> pre idA_A2;

	idA_A1_1 = 0 -> pre idA_A1;

	idEvents1_A_1 = 0 -> pre idEvents1_A;

	



	(idEvents1_Events1_2, a_2, idA_A1_2, idA_A2_2, idEvents1_A_2, b_2, idB_B1_2, idB_B2_2, idEvents1_B_2, c_2)
	 = 

	 if R then Events1_Events1_node(idEvents1_Events1_1, a_1, idA_A1_1, idA_A2_1, idEvents1_A_1, x, b_1, idB_B1_1, idB_B2_1, idEvents1_B_1, R, R1, false, S1, false, T1, c_1)

	 else (idEvents1_Events1_1, a_1, idA_A1_1, idA_A2_1, idEvents1_A_1, b_1, idB_B1_1, idB_B2_1, idEvents1_B_1, c_1);

	



	(idEvents1_Events1_3, a_3, idA_A1_3, idA_A2_3, idEvents1_A_3, b_3, idB_B1_3, idB_B2_3, idEvents1_B_3, c_3)
	 = 

	 if S then Events1_Events1_node(idEvents1_Events1_2, a_2, idA_A1_2, idA_A2_2, idEvents1_A_2, x, b_2, idB_B1_2, idB_B2_2, idEvents1_B_2, false, R1, S, S1, false, T1, c_2)

	 else (idEvents1_Events1_2, a_2, idA_A1_2, idA_A2_2, idEvents1_A_2, b_2, idB_B1_2, idB_B2_2, idEvents1_B_2, c_2);

	



	(idEvents1_Events1, a, idA_A1, idA_A2, idEvents1_A, b, idB_B1, idB_B2, idEvents1_B, c)
	 = 

	 if T then Events1_Events1_node(idEvents1_Events1_3, a_3, idA_A1_3, idA_A2_3, idEvents1_A_3, x, b_3, idB_B1_3, idB_B2_3, idEvents1_B_3, false, R1, false, S1, T, T1, c_3)

	 else (idEvents1_Events1_3, a_3, idA_A1_3, idA_A2_3, idEvents1_A_3, b_3, idB_B1_3, idB_B2_3, idEvents1_B_3, c_3);

	


--unused outputs
	R1 = false;

	S1 = false;

	T1 = false;

	

tel



node Events1 (x_1_1 : int; R_1_1 : real; S_1_1 : real; T_1_1 : real)
returns (a_1_1 : int;
	b_2_1 : int;
	c_3_1 : int); 
var
	Events1_1_1 : int; Events1_2_1 : int; Events1_3_1 : int;
	Mux_1_1 : real; Mux_1_2 : real; Mux_1_3 : real;
	Mux_1_1_event: bool;
	Mux_1_2_event: bool;
	Mux_1_3_event: bool;
let 
	Mux_1_1_event = false -> ((pre(Mux_1_1) > 0.0 and Mux_1_1 <= 0.0) or (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0));
	Mux_1_2_event = false -> ((pre(Mux_1_2) > 0.0 and Mux_1_2 <= 0.0) or (pre(Mux_1_2) <= 0.0 and Mux_1_2 > 0.0));
	Mux_1_3_event = false -> ((pre(Mux_1_3) > 0.0 and Mux_1_3 <= 0.0) or (pre(Mux_1_3) <= 0.0 and Mux_1_3 > 0.0));
	(Events1_1_1, Events1_2_1, Events1_3_1) =  Events1_Events1(x_1_1, Mux_1_1_event, Mux_1_2_event, Mux_1_3_event);
	Mux_1_1 = R_1_1 ;
	Mux_1_2 = S_1_1 ;
	Mux_1_3 = T_1_1 ;
	a_1_1 = Events1_1_1;
	b_2_1 = Events1_2_1;
	c_3_1 = Events1_3_1;
tel

