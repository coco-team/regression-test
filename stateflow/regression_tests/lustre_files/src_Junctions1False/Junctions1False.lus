-- This file has been generated by cocoSim


-- System nodes






node Chart_ChartJunction472__To__Chart_C_3_Condition_Action(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel





node Chart_ChartJunction472__To__Chart_C_3_Transition_Action(y_1:int;
	z_1:int)

returns (y:int;
	z:int);


var 	z_2:int;


let



	z_2 
	=  z_1  + 1;
	

	(y, z) 
	= (y_1, z_2);
	

tel






node Chart_A__To__Chart_ChartJunction472_1_Condition_Action(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel





node Chart_A__To__Chart_ChartJunction472_1_Transition_Action(y_1:int;
	z_1:int)

returns (y:int;
	z:int);


var 	z_2:int;


let



	z_2 
	=  z_1 +2;
	

	(y, z) 
	= (y_1, z_2);
	

tel






node Chart_ChartJunction472__To__Chart_ChartJunction473_2_Condition_Action(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel





node Chart_ChartJunction472__To__Chart_ChartJunction473_2_Transition_Action(y_1:int;
	z_1:int)

returns (y:int;
	z:int);


var 	z_2:int;


let



	z_2 
	=  z_1  + 1;
	

	(y, z) 
	= (y_1, z_2);
	

tel








node Chart_ChartJunction472__To__Chart_B_1_Condition_Action(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1 +2;
	

	(y) 
	= (y_2);
	

tel





node Chart_ChartJunction472__To__Chart_B_1_Transition_Action(y_1:int;
	z_1:int)

returns (y:int;
	z:int);


var 	z_2:int;


let



	z_2 
	=  z_1  + 1;
	

	(y, z) 
	= (y_1, z_2);
	

tel






node Chart_ChartJunction471__To__Chart_C_1_Transition_Action(z_1:int)

returns (z:int);


var 	z_2:int;


let



	z_2 
	=  z_1  + 1;
	

	(z) 
	= (z_2);
	

tel






node Chart_ChartJunction473__To__Chart_B_1_Condition_Action(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1 +2;
	

	(y) 
	= (y_2);
	

tel





node Chart_ChartJunction473__To__Chart_B_1_Transition_Action(y_1:int;
	z_1:int)

returns (y:int;
	z:int);


var 	z_2:int;


let



	z_2 
	=  z_1  + 1;
	

	(y, z) 
	= (y_1, z_2);
	

tel






node Chart_ChartJunction473__To__Chart_C_2_Condition_Action(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel






-- Entry action for state :Chart_B
node Chart_B_en(idChart_Chart_1:int;
	isInner:bool)

returns (idChart_Chart:int);


var 	idChart_Chart_2:int;


let



	-- set state as active 
	idChart_Chart_2 
	= 466;
	

	(idChart_Chart) 
	= (idChart_Chart_2);
	

tel





-- Exit action for state :Chart_B
node Chart_B_ex(idChart_Chart_1:int;
	isInner:bool)

returns (idChart_Chart:int);


var 	idChart_Chart_2:int;


let



	-- set state as inactive 
	idChart_Chart_2
	 = if (not isInner) then 0 else idChart_Chart_1;


	(idChart_Chart) 
	= (idChart_Chart_2);
	

tel






-- Exit action for state :Chart_A
node Chart_A_ex(y_1:int;
	idChart_Chart_1:int;
	isInner:bool)

returns (y:int;
	idChart_Chart:int);


var 	y_2:int;
	idChart_Chart_2:int;


let



	y_2 
	= if (not isInner) then  y_1 *2
	 else y_1;
	

	-- set state as inactive 
	idChart_Chart_2
	 = if (not isInner) then 0 else idChart_Chart_1;


	(y, idChart_Chart) 
	= (y_2, idChart_Chart_2);
	

tel





-- Entry action for state :Chart_A
node Chart_A_en(idChart_Chart_1:int;
	isInner:bool)

returns (idChart_Chart:int);


var 	idChart_Chart_2:int;


let



	-- set state as active 
	idChart_Chart_2 
	= 464;
	

	(idChart_Chart) 
	= (idChart_Chart_2);
	

tel






-- Entry action for state :Chart_C
node Chart_C_en(idChart_Chart_1:int;
	isInner:bool)

returns (idChart_Chart:int);


var 	idChart_Chart_2:int;


let



	-- set state as active 
	idChart_Chart_2 
	= 465;
	

	(idChart_Chart) 
	= (idChart_Chart_2);
	

tel





-- Exit action for state :Chart_C
node Chart_C_ex(idChart_Chart_1:int;
	isInner:bool)

returns (idChart_Chart:int);


var 	idChart_Chart_2:int;


let



	-- set state as inactive 
	idChart_Chart_2
	 = if (not isInner) then 0 else idChart_Chart_1;


	(idChart_Chart) 
	= (idChart_Chart_2);
	

tel


--***************************************************State :Chart_Chart Automaton***************************************************

node Chart_Chart_node(idChart_Chart_1:int;
	E1:bool;
	x:int;
	y_1:int;
	z_1:int)

returns (idChart_Chart:int;
	y:int;
	z:int);


let

	 automaton chart_chart

	state POINTChart_Chart:
	unless (idChart_Chart_1=0) restart POINT__TO__CHART_A_1



	unless (idChart_Chart_1=464) and E1 and ( x>0 ) restart CHART_A__TO__CHART_CHARTJUNCTION472_1



	unless (idChart_Chart_1=464) and (  y_1 >1 ) restart CHART_A__TO__CHART_CHARTJUNCTION471_2



	unless (idChart_Chart_1=465) and ( x>3 ) restart CHART_C__TO__CHART_A_1



	unless (idChart_Chart_1=466) and ( x>3 ) restart CHART_B__TO__CHART_A_1



	unless (idChart_Chart_1=464) restart CHART_A_IDL

	unless (idChart_Chart_1=465) restart CHART_C_IDL

	unless (idChart_Chart_1=466) restart CHART_B_IDL

	let

		(idChart_Chart, y, z) 
	= (idChart_Chart_1, y_1, z_1);
	

	tel



	state POINT__TO__CHART_A_1:

	 var 	idChart_Chart_2:int;
	let

		-- transition trace :
	--POINT__To__Chart_A_1
		(idChart_Chart_2) 
	= Chart_A_en(idChart_Chart_1, false);
		

	(idChart_Chart) 
	=  (idChart_Chart_2);

	--add unused variables
	(y, z) 
	= (y_1, z_1);
	

	tel

	until true restart POINTChart_Chart



	state CHART_A__TO__CHART_CHARTJUNCTION472_1:

	 var 	idChart_Chart_2, idChart_Chart_3, idChart_Chart_4, idChart_Chart_5, idChart_Chart_6, idChart_Chart_7, idChart_Chart_8, idChart_Chart_9:int;
	y_2, y_3, y_4, y_5, y_6, y_7, y_8, y_9, y_10, y_11, y_12, y_13, y_14, y_15, y_16, y_17, y_18, y_19, y_20, y_21, y_22, y_23, y_24:int;
	z_2, z_3, z_4, z_5, z_6, z_7, z_8, z_9, z_10:int;
	let

		

-- transition trace :
	--Chart_A__To__Junction472_1, Junction472__To__Chart_B_1
		-- condition Action : y++
		
		(y_2) 
	= Chart_A__To__Chart_ChartJunction472_1_Condition_Action(y_1);
		

		-- condition Action : y+=2
		
		(y_3) 
	= 
		 if (( x>2 )) then 
		Chart_ChartJunction472__To__Chart_B_1_Condition_Action(y_2)
		 else (y_2);
		

		(y_4, idChart_Chart_2) 
	= 
		 if (( x>2 )) then 
		Chart_A_ex(y_3, idChart_Chart_1, false)
		 else (y_3, idChart_Chart_1);
		

		(y_5, z_2) 
	= 
		 if (( x>2 )) then 
		Chart_A__To__Chart_ChartJunction472_1_Transition_Action(y_4, z_1)
		 else (y_4, z_1);
		

		(y_6, z_3) 
	= 
		 if (( x>2 )) then 
		Chart_ChartJunction472__To__Chart_B_1_Transition_Action(y_5, z_2)
		 else (y_5, z_2);
		

		(idChart_Chart_3) 
	= 
		 if (( x>2 )) then 
		Chart_B_en(idChart_Chart_2, false)
		 else (idChart_Chart_2);
		




-- transition trace :
	--Chart_A__To__Junction472_1, Junction472__To__Junction473_2, Junction473__To__Chart_B_1
		-- condition Action : y++
		
		(y_7) 
	= Chart_A__To__Chart_ChartJunction472_1_Condition_Action(y_1);
		

		-- condition Action : y++
		
		(y_8) 
	= 
		 if (( x=2 )) then 
		Chart_ChartJunction472__To__Chart_ChartJunction473_2_Condition_Action(y_7)
		 else (y_7);
		

		-- condition Action : y+=2
		
		(y_9) 
	= 
		 if (( x=2 ) and (  y_8 > z_3  )) then 
		Chart_ChartJunction473__To__Chart_B_1_Condition_Action(y_8)
		 else (y_8);
		

		(y_10, idChart_Chart_4) 
	= 
		 if (( x=2 ) and (  y_8 > z_3  )) then 
		Chart_A_ex(y_9, idChart_Chart_3, false)
		 else (y_9, idChart_Chart_3);
		

		(y_11, z_4) 
	= 
		 if (( x=2 ) and (  y_8 > z_3  )) then 
		Chart_A__To__Chart_ChartJunction472_1_Transition_Action(y_10, z_3)
		 else (y_10, z_3);
		

		(y_12, z_5) 
	= 
		 if (( x=2 ) and (  y_8 > z_3  )) then 
		Chart_ChartJunction472__To__Chart_ChartJunction473_2_Transition_Action(y_11, z_4)
		 else (y_11, z_4);
		

		(y_13, z_6) 
	= 
		 if (( x=2 ) and (  y_8 > z_3  )) then 
		Chart_ChartJunction473__To__Chart_B_1_Transition_Action(y_12, z_5)
		 else (y_12, z_5);
		

		(idChart_Chart_5) 
	= 
		 if (( x=2 ) and (  y_8 > z_3  )) then 
		Chart_B_en(idChart_Chart_4, false)
		 else (idChart_Chart_4);
		


-- transition trace :
	--Chart_A__To__Junction472_1, Junction472__To__Junction473_2, Junction473__To__Chart_C_2
		-- condition Action : y++
		
		(y_14) 
	= Chart_A__To__Chart_ChartJunction472_1_Condition_Action(y_1);
		

		-- condition Action : y++
		
		(y_15) 
	= 
		 if (( x=2 )) then 
		Chart_ChartJunction472__To__Chart_ChartJunction473_2_Condition_Action(y_14)
		 else (y_14);
		

		-- condition Action : y++
		
		(y_16) 
	= 
		 if (( x=2 ) and (  y_15 <= z_6  )) then 
		Chart_ChartJunction473__To__Chart_C_2_Condition_Action(y_15)
		 else (y_15);
		

		(y_17, idChart_Chart_6) 
	= 
		 if (( x=2 ) and (  y_15 <= z_6  )) then 
		Chart_A_ex(y_16, idChart_Chart_5, false)
		 else (y_16, idChart_Chart_5);
		

		(y_18, z_7) 
	= 
		 if (( x=2 ) and (  y_15 <= z_6  )) then 
		Chart_A__To__Chart_ChartJunction472_1_Transition_Action(y_17, z_6)
		 else (y_17, z_6);
		

		(y_19, z_8) 
	= 
		 if (( x=2 ) and (  y_15 <= z_6  )) then 
		Chart_ChartJunction472__To__Chart_ChartJunction473_2_Transition_Action(y_18, z_7)
		 else (y_18, z_7);
		

		(idChart_Chart_7) 
	= 
		 if (( x=2 ) and (  y_15 <= z_6  )) then 
		Chart_C_en(idChart_Chart_6, false)
		 else (idChart_Chart_6);
		


-- transition trace :
	--Chart_A__To__Junction472_1, Junction472__To__Chart_C_3
		-- condition Action : y++
		
		(y_20) 
	= Chart_A__To__Chart_ChartJunction472_1_Condition_Action(y_1);
		

		-- condition Action : y++
		
		(y_21) 
	= 
		 if (( x<2 )) then 
		Chart_ChartJunction472__To__Chart_C_3_Condition_Action(y_20)
		 else (y_20);
		

		(y_22, idChart_Chart_8) 
	= 
		 if (( x<2 )) then 
		Chart_A_ex(y_21, idChart_Chart_7, false)
		 else (y_21, idChart_Chart_7);
		

		(y_23, z_9) 
	= 
		 if (( x<2 )) then 
		Chart_A__To__Chart_ChartJunction472_1_Transition_Action(y_22, z_8)
		 else (y_22, z_8);
		

		(y_24, z_10) 
	= 
		 if (( x<2 )) then 
		Chart_ChartJunction472__To__Chart_C_3_Transition_Action(y_23, z_9)
		 else (y_23, z_9);
		

		(idChart_Chart_9) 
	= 
		 if (( x<2 )) then 
		Chart_C_en(idChart_Chart_8, false)
		 else (idChart_Chart_8);
		

	(idChart_Chart, y, z) 
	= 
		 if (( x>2 )) then 
		(idChart_Chart_3, y_6, z_3)
		 else
		 if (( x=2 ) and (  y_8 > z_3  )) then 
		(idChart_Chart_5, y_13, z_6)
		 else
		 if (( x=2 ) and (  y_15 <= z_6  )) then 
		(idChart_Chart_7, y_19, z_8)
		 else
		 if (( x=2 )) then 
		(idChart_Chart_5, y_15, z_6)
		 else
		 if (( x<2 )) then 
		(idChart_Chart_9, y_24, z_10)
		 else (idChart_Chart_7, y_20, z_8);


	tel

	until true restart POINTChart_Chart



	state CHART_A__TO__CHART_CHARTJUNCTION471_2:

	 var 	idChart_Chart_2, idChart_Chart_3:int;
	y_2:int;
	z_2:int;
	let

		

-- transition trace :
	--Chart_A__To__Junction471_2, Junction471__To__Chart_C_1
		(y_2, idChart_Chart_2) 
	= 
		 if (( x=2 )) then 
		Chart_A_ex(y_1, idChart_Chart_1, false)
		 else (y_1, idChart_Chart_1);
		

		(z_2) 
	= 
		 if (( x=2 )) then 
		Chart_ChartJunction471__To__Chart_C_1_Transition_Action(z_1)
		 else (z_1);
		

		(idChart_Chart_3) 
	= 
		 if (( x=2 )) then 
		Chart_C_en(idChart_Chart_2, false)
		 else (idChart_Chart_2);
		

	(idChart_Chart, y, z) 
	= 
		 if (( x=2 )) then 
		(idChart_Chart_3, y_2, z_2)
		 else (idChart_Chart_1, y_1, z_1);


	tel

	until true restart POINTChart_Chart



	state CHART_C__TO__CHART_A_1:

	 var 	idChart_Chart_2, idChart_Chart_3:int;
	let

		-- transition trace :
	--Chart_C__To__Chart_A_1
		(idChart_Chart_2) 
	= Chart_C_ex(idChart_Chart_1, false);
		

		(idChart_Chart_3) 
	= Chart_A_en(idChart_Chart_2, false);
		

	(idChart_Chart, y, z) 
	=  (idChart_Chart_3, y_1, z_1);


	tel

	until true restart POINTChart_Chart



	state CHART_B__TO__CHART_A_1:

	 var 	idChart_Chart_2, idChart_Chart_3:int;
	let

		-- transition trace :
	--Chart_B__To__Chart_A_1
		(idChart_Chart_2) 
	= Chart_B_ex(idChart_Chart_1, false);
		

		(idChart_Chart_3) 
	= Chart_A_en(idChart_Chart_2, false);
		

	(idChart_Chart, y, z) 
	=  (idChart_Chart_3, y_1, z_1);


	tel

	until true restart POINTChart_Chart



	state CHART_A_IDL:

	 	let

		

	(idChart_Chart, y, z) 
	= (idChart_Chart_1, y_1, z_1);
	

	tel

	until true restart POINTChart_Chart



	state CHART_C_IDL:

	 	let

		

	(idChart_Chart, y, z) 
	= (idChart_Chart_1, y_1, z_1);
	

	tel

	until true restart POINTChart_Chart



	state CHART_B_IDL:

	 	let

		

	(idChart_Chart, y, z) 
	= (idChart_Chart_1, y_1, z_1);
	

	tel

	until true restart POINTChart_Chart



tel


--***************************************************State :Chart_Chart Automaton***************************************************

node Junctions1False_Chart(x:int;
	E1:bool)

returns (y:int;
	z:int);


var y_1: int;

	z_1: int;

	idChart_Chart, idChart_Chart_1: int;

	let

	y_1 = 1 -> pre y;

	z_1 = 2 -> pre z;

	idChart_Chart_1 = 0 -> pre idChart_Chart;

	



	(idChart_Chart, y, z)
	 = 

	 if E1 then Chart_Chart_node(idChart_Chart_1, E1, x, y_1, z_1)

	 else (idChart_Chart_1, y_1, z_1);

	


--unused outputs
	

tel



node Junctions1False (x_1_1 : int; E1_1_1 : real)
returns (y_1_1 : int;
	z_2_1 : int); 
var
	Chart_1_1 : int; Chart_2_1 : int;
	E1_1_1_event: bool;
let 
	E1_1_1_event = false -> ((pre(E1_1_1) > 0.0 and E1_1_1 <= 0.0) or (pre(E1_1_1) <= 0.0 and E1_1_1 > 0.0));
	(Chart_1_1, Chart_2_1) =  Junctions1False_Chart(x_1_1, E1_1_1_event);
	y_1_1 = Chart_1_1;
	z_2_1 = Chart_2_1;
tel

