-- This file has been generated by cocoSim


-- System nodes




node Active_State_Active_StateJunction137__To__Active_State_Active_StateJunction139_2_Condition_Action(pre_Active:bool;
	Active_1:bool)

returns (Active:bool);


var 	Active_2:bool;


let



	Active_2 
	= pre_Active;
	

	(Active) 
	= (Active_2);
	

tel






node Active_State_Active_StateJunction138__To__Active_State_Active_StateJunction140_1_Condition_Action(Active_1:bool)

returns (Active:bool);


var 	Active_2:bool;


let



	Active_2 
	= true;
	

	(Active) 
	= (Active_2);
	

tel










node Active_State_Active_StateJunction134__To__Active_State_Active_StateJunction142_1_Condition_Action(Active_1:bool)

returns (Active:bool);


var 	Active_2:bool;


let



	Active_2 
	= false;
	

	(Active) 
	= (Active_2);
	

tel












node Active_State_Active_StateJunction136__To__Active_State_Active_StateJunction141_1_Condition_Action(Active_1:bool)

returns (Active:bool);


var 	Active_2:bool;


let



	Active_2 
	= false;
	

	(Active) 
	= (Active_2);
	

tel


--***************************************************State :Active_State_Active_State Automaton***************************************************

node Active_State_Active_State_node(idActive_State_Active_State_1:int;
	Error:bool;
	Active_1:bool;
	pre_Active:bool;
	Sync_From_Active:bool;
	Sync_From_Error:bool;
	Primary_Side:bool)

returns (idActive_State_Active_State:int;
	Active:bool);


let

	 automaton active_state_active_state

	state POINTActive_State_Active_State:
	unless (idActive_State_Active_State_1=0) restart POINT__TO__ACTIVE_STATE_ACTIVE_STATEJUNCTION133_1



	let

		(idActive_State_Active_State, Active) 
	= (idActive_State_Active_State_1, Active_1);
	

	tel



	state POINT__TO__ACTIVE_STATE_ACTIVE_STATEJUNCTION133_1:

	 var 	Active_2, Active_3, Active_4, Active_5:bool;
	let

		











-- transition trace :
	--POINT__To__Junction133_1, Junction133__To__Junction134_1, Junction134__To__Junction142_1, Junction142__To__Junction141_1, Junction141__To__Junction140_1, Junction140__To__Junction139_1, Junction139__To__Junction143_1
		-- condition Action : Active=false;
		
		(Active_2) 
	= 
		 if (( Error )) then 
		Active_State_Active_StateJunction134__To__Active_State_Active_StateJunction142_1_Condition_Action(Active_1)
		 else (Active_1);
		












-- transition trace :
	--POINT__To__Junction133_1, Junction133__To__Junction135_2, Junction135__To__Junction136_1, Junction136__To__Junction141_1, Junction141__To__Junction140_1, Junction140__To__Junction139_1, Junction139__To__Junction143_1
		-- condition Action : Active=false;
		
		(Active_3) 
	= 
		 if (( pre_Active and Sync_From_Active and (not Sync_From_Error) and (not Primary_Side) )) then 
		Active_State_Active_StateJunction136__To__Active_State_Active_StateJunction141_1_Condition_Action(Active_1)
		 else (Active_1);
		










-- transition trace :
	--POINT__To__Junction133_1, Junction133__To__Junction135_2, Junction135__To__Junction137_2, Junction137__To__Junction138_1, Junction138__To__Junction140_1, Junction140__To__Junction139_1, Junction139__To__Junction143_1
		-- condition Action : Active=true;
		
		(Active_4) 
	= 
		 if (( (not pre_Active) and ((not Sync_From_Active) or Sync_From_Error) )) then 
		Active_State_Active_StateJunction138__To__Active_State_Active_StateJunction140_1_Condition_Action(Active_1)
		 else (Active_1);
		




-- transition trace :
	--POINT__To__Junction133_1, Junction133__To__Junction135_2, Junction135__To__Junction137_2, Junction137__To__Junction139_2, Junction139__To__Junction143_1
		-- condition Action : Active=pre_Active;
		
		(Active_5) 
	= Active_State_Active_StateJunction137__To__Active_State_Active_StateJunction139_2_Condition_Action(pre_Active, Active_1);
		

	(idActive_State_Active_State, Active) 
	= 
		 if (( Error )) then 
		(idActive_State_Active_State_1, Active_2)
		 else
		 if (( Error )) then 
		(idActive_State_Active_State_1, Active_2)
		 else
		 if (( pre_Active and Sync_From_Active and (not Sync_From_Error) and (not Primary_Side) )) then 
		(idActive_State_Active_State_1, Active_3)
		 else
		 if (( pre_Active and Sync_From_Active and (not Sync_From_Error) and (not Primary_Side) )) then 
		(idActive_State_Active_State_1, Active_3)
		 else
		 if (( (not pre_Active) and ((not Sync_From_Active) or Sync_From_Error) )) then 
		(idActive_State_Active_State_1, Active_4)
		 else
		 if (( (not pre_Active) and ((not Sync_From_Active) or Sync_From_Error) )) then 
		(idActive_State_Active_State_1, Active_4)
		 else (idActive_State_Active_State_1, Active_5);


	tel

	until true restart POINTActive_State_Active_State



tel


--***************************************************State :Active_State_Active_State Automaton***************************************************

node BSCU_Active_State_Active_State(Sync_From_Active:bool;
	pre_Active:bool;
	Error:bool;
	Sync_From_Error:bool)

returns (Active:bool);


var Active_1: bool;

	idActive_State_Active_State, idActive_State_Active_State_1: int;

		Primary_Side: bool;

	let

	Active_1 = false -> pre Active;

	idActive_State_Active_State_1 = 0 -> pre idActive_State_Active_State;

	Primary_Side = false;

	



	(idActive_State_Active_State, Active)
	 = Active_State_Active_State_node(idActive_State_Active_State_1, Error, Active_1, pre_Active, Sync_From_Active, Sync_From_Error, Primary_Side);


--unused outputs
	

tel



node BSCU_Active_State (In1_1_1 : bool; In2_1_1 : bool; In3_1_1 : bool; In4_1_1 : bool)
returns (Active_1_1 : bool); 
var
	Active_State_1_1 : bool;
let 
	Active_State_1_1 =  BSCU_Active_State_Active_State(In1_1_1, In2_1_1, In3_1_1, In4_1_1);
	Active_1_1 = Active_State_1_1;
tel

