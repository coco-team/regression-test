-- This file has been generated by cocoSim


-- System nodes




node Junctions3_Junctions3Junction357__To__Junctions3_Junctions3Junction358_1_Condition_Action(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel






node Junctions3_Junctions3Junction358__To__Junctions3_Junctions3Junction359_1_Condition_Action(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel






node Junctions3_A__To__Junctions3_Junctions3Junction356_1_Condition_Action(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	= 0;
	

	(y) 
	= (y_2);
	

tel






node Junctions3_Junctions3Junction356__To__Junctions3_Junctions3Junction357_1_Condition_Action(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel






node Junctions3_Junctions3Junction359__To__Junctions3_B_1_Condition_Action(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel







-- Entry action for state :Junctions3_B
node Junctions3_B_en(idJunctions3_Junctions3_1:int;
	isInner:bool)

returns (idJunctions3_Junctions3:int);


var 	idJunctions3_Junctions3_2:int;


let



	-- set state as active 
	idJunctions3_Junctions3_2 
	= 353;
	

	(idJunctions3_Junctions3) 
	= (idJunctions3_Junctions3_2);
	

tel





-- Exit action for state :Junctions3_B
node Junctions3_B_ex(idJunctions3_Junctions3_1:int;
	isInner:bool)

returns (idJunctions3_Junctions3:int);


var 	idJunctions3_Junctions3_2:int;


let



	-- set state as inactive 
	idJunctions3_Junctions3_2
	 = if (not isInner) then 0 else idJunctions3_Junctions3_1;


	(idJunctions3_Junctions3) 
	= (idJunctions3_Junctions3_1);
	

tel






-- Entry action for state :Junctions3_A
node Junctions3_A_en(idJunctions3_Junctions3_1:int;
	isInner:bool)

returns (idJunctions3_Junctions3:int);


var 	idJunctions3_Junctions3_2:int;


let



	-- set state as active 
	idJunctions3_Junctions3_2 
	= 352;
	

	(idJunctions3_Junctions3) 
	= (idJunctions3_Junctions3_2);
	

tel





-- Exit action for state :Junctions3_A
node Junctions3_A_ex(idJunctions3_Junctions3_1:int;
	isInner:bool)

returns (idJunctions3_Junctions3:int);


var 	idJunctions3_Junctions3_2:int;


let



	-- set state as inactive 
	idJunctions3_Junctions3_2
	 = if (not isInner) then 0 else idJunctions3_Junctions3_1;


	(idJunctions3_Junctions3) 
	= (idJunctions3_Junctions3_1);
	

tel


--***************************************************State :Junctions3_Junctions3 Automaton***************************************************

node Junctions3_Junctions3_node(idJunctions3_Junctions3_1:int;
	x:int;
	y_1:int)

returns (idJunctions3_Junctions3:int;
	y:int);


let

	 automaton junctions3_junctions3

	state POINTJunctions3_Junctions3:
	unless (idJunctions3_Junctions3_1=0) restart POINT__TO__JUNCTIONS3_A_1



	unless (idJunctions3_Junctions3_1=352) and ( x=0 ) restart JUNCTIONS3_A__TO__JUNCTIONS3_JUNCTIONS3JUNCTION356_1



	unless (idJunctions3_Junctions3_1=352) restart JUNCTIONS3_A_IDL

	unless (idJunctions3_Junctions3_1=353) restart JUNCTIONS3_B_IDL

	let

		(idJunctions3_Junctions3, y) 
	= (idJunctions3_Junctions3_1, y_1);
	

	tel



	state POINT__TO__JUNCTIONS3_A_1:

	 var 	idJunctions3_Junctions3_2:int;
	let

		-- transition trace :
	--POINT__To__Junctions3_A_1
		(idJunctions3_Junctions3_2) 
	= Junctions3_A_en(idJunctions3_Junctions3_1, false);
		

	(idJunctions3_Junctions3) 
	=  (idJunctions3_Junctions3_2);

	--add unused variables
	(y) 
	= (y_1);
	

	tel

	until true restart POINTJunctions3_Junctions3



	state JUNCTIONS3_A__TO__JUNCTIONS3_JUNCTIONS3JUNCTION356_1:

	 var 	idJunctions3_Junctions3_2, idJunctions3_Junctions3_3:int;
	y_2, y_3, y_4, y_5, y_6:int;
	let

		







-- transition trace :
	--Junctions3_A__To__Junction356_1, Junction356__To__Junction357_1, Junction357__To__Junction358_1, Junction358__To__Junction359_1, Junction359__To__Junctions3_B_1
		-- condition Action : y=0
		
		(y_2) 
	= Junctions3_A__To__Junctions3_Junctions3Junction356_1_Condition_Action(y_1);
		

		-- condition Action : y++
		
		(y_3) 
	= 
		 if ((  y_2 =0 )) then 
		Junctions3_Junctions3Junction356__To__Junctions3_Junctions3Junction357_1_Condition_Action(y_2)
		 else (y_2);
		

		-- condition Action : y++
		
		(y_4) 
	= 
		 if ((  y_2 =0 ) and (  y_3 =1 )) then 
		Junctions3_Junctions3Junction357__To__Junctions3_Junctions3Junction358_1_Condition_Action(y_3)
		 else (y_3);
		

		-- condition Action : y++
		
		(y_5) 
	= 
		 if ((  y_2 =0 ) and (  y_3 =1 ) and (  y_4 =2 )) then 
		Junctions3_Junctions3Junction358__To__Junctions3_Junctions3Junction359_1_Condition_Action(y_4)
		 else (y_4);
		

		-- condition Action : y++
		
		(y_6) 
	= 
		 if ((  y_2 =0 ) and (  y_3 =1 ) and (  y_4 =2 )) then 
		Junctions3_Junctions3Junction359__To__Junctions3_B_1_Condition_Action(y_5)
		 else (y_5);
		

		(idJunctions3_Junctions3_2) 
	= 
		 if ((  y_2 =0 ) and (  y_3 =1 ) and (  y_4 =2 )) then 
		Junctions3_A_ex(idJunctions3_Junctions3_1, false)
		 else (idJunctions3_Junctions3_1);
		

		(idJunctions3_Junctions3_3) 
	= 
		 if ((  y_2 =0 ) and (  y_3 =1 ) and (  y_4 =2 )) then 
		Junctions3_B_en(idJunctions3_Junctions3_2, false)
		 else (idJunctions3_Junctions3_2);
		

	(idJunctions3_Junctions3, y) 
	= 
		 if ((  y_2 =0 ) and (  y_3 =1 ) and (  y_4 =2 )) then 
		(idJunctions3_Junctions3_3, y_6)
		 else
		 if ((  y_2 =0 ) and (  y_3 =1 ) and (  y_4 =2 )) then 
		(idJunctions3_Junctions3_1, y_5)
		 else
		 if ((  y_2 =0 ) and (  y_3 =1 )) then 
		(idJunctions3_Junctions3_1, y_4)
		 else
		 if ((  y_2 =0 )) then 
		(idJunctions3_Junctions3_1, y_3)
		 else (idJunctions3_Junctions3_1, y_2);


	tel

	until true restart POINTJunctions3_Junctions3



	state JUNCTIONS3_A_IDL:

	 	let

		

	(idJunctions3_Junctions3, y) 
	= (idJunctions3_Junctions3_1, y_1);
	

	tel

	until true restart POINTJunctions3_Junctions3



	state JUNCTIONS3_B_IDL:

	 	let

		

	(idJunctions3_Junctions3, y) 
	= (idJunctions3_Junctions3_1, y_1);
	

	tel

	until true restart POINTJunctions3_Junctions3



tel


--***************************************************State :Junctions3_Junctions3 Automaton***************************************************

node Junctions3_Junctions3(x:int)

returns (y:int);


var y_1: int;

	idJunctions3_Junctions3, idJunctions3_Junctions3_1: int;

	let

	y_1 = 111111 -> pre y;

	idJunctions3_Junctions3_1 = 0 -> pre idJunctions3_Junctions3;

	



	(idJunctions3_Junctions3, y)
	 = Junctions3_Junctions3_node(idJunctions3_Junctions3_1, x, y_1);


--unused outputs
	

tel



node Junctions3 (x_1_1 : int)
returns (y_1_1 : int); 
var
	Junctions3_1_1 : int;
	i_virtual_local : real;
let 
	Junctions3_1_1 =  Junctions3_Junctions3(x_1_1);
	y_1_1 = Junctions3_1_1;
	i_virtual_local= 0.0 -> 1.0;
tel

