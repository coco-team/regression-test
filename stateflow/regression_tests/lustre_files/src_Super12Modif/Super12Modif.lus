-- This file has been generated by cocoSim


-- System nodes














-- Entry action for state :B_B0
node B_B0_en(idSuper12_B_1:int;
	isInner:bool)

returns (idSuper12_B:int);


var 	idSuper12_B_2:int;


let



	-- set state as active 
	idSuper12_B_2 
	= 798;
	

	(idSuper12_B) 
	= (idSuper12_B_2);
	

tel





-- Exit action for state :B_B0
node B_B0_ex(idSuper12_B_1:int;
	isInner:bool)

returns (idSuper12_B:int);


var 	idSuper12_B_2:int;


let



	-- set state as inactive 
	idSuper12_B_2
	 = if (not isInner) then 0 else idSuper12_B_1;


	(idSuper12_B) 
	= (idSuper12_B_2);
	

tel






-- Entry action for state :B_B1
node B_B1_en(idSuper12_B_1:int;
	enB1_1:int;
	isInner:bool)

returns (idSuper12_B:int;
	enB1:int);


var 	idSuper12_B_2:int;
	enB1_2:int;


let



	-- set state as active 
	idSuper12_B_2 
	= 797;
	

	enB1_2 
	= if (not isInner) then  enB1_1  + 1
	 else enB1_1;
	

	(idSuper12_B, enB1) 
	= (idSuper12_B_2, enB1_2);
	

tel





--During action for state :B_B1
node B_B1_du(durB1_1:int)

returns (durB1:int);


var 	durB1_2:int;


let



	durB1_2 
	=  durB1_1  + 1;
	

	(durB1) 
	= (durB1_2);
	

tel





-- Exit action for state :B_B1
node B_B1_ex(exB1_1:int;
	idSuper12_B_1:int;
	isInner:bool)

returns (exB1:int;
	idSuper12_B:int);


var 	exB1_2:int;
	idSuper12_B_2:int;


let



	exB1_2 
	= if (not isInner) then  exB1_1  + 1
	 else exB1_1;
	

	-- set state as inactive 
	idSuper12_B_2
	 = if (not isInner) then 0 else idSuper12_B_1;


	(exB1, idSuper12_B) 
	= (exB1_2, idSuper12_B_2);
	

tel






-- Entry action for state :Super12_B
node Super12_B_en(idSuper12_B_1:int;
	idSuper12_Super12_1:int;
	enB_1:int;
	enB1_1:int;
	isInner:bool)

returns (idSuper12_B:int;
	idSuper12_Super12:int;
	enB:int;
	enB1:int);


var 	idSuper12_B_2, idSuper12_B_3, idSuper12_B_4, idSuper12_B_5, idSuper12_B_6:int;
	idSuper12_Super12_2, idSuper12_Super12_3, idSuper12_Super12_4:int;
	enB_2, enB_3, enB_4:int;
	enB1_2, enB1_3:int;


let



	-- set state as active 
	idSuper12_Super12_2 
	= 796;
	

	enB_2 
	= if (not isInner) then  enB_1  + 1
	 else enB_1;
	

	
-- transition trace :
	--POINT__To__B_B0_1
		(idSuper12_B_2) 
	= B_B0_en(idSuper12_B_1, false);
		

	(idSuper12_B_3, idSuper12_Super12_3, enB_3) 
	= 

	if ( idSuper12_B_1 = 0) then

	 (idSuper12_B_2, idSuper12_Super12_2, enB_2)

	 else(idSuper12_B_1, idSuper12_Super12_2, enB_2);

	

	(idSuper12_B_4) 
	= 
	if ( idSuper12_B_1 = 798) then
	B_B0_en(idSuper12_B_1, false)
	 else (idSuper12_B_1);

	

	(idSuper12_B_5, enB1_2) 
	= 
	if ( idSuper12_B_1 = 797) then
	B_B1_en(idSuper12_B_1, enB1_1, false)
	 else (idSuper12_B_1, enB1_1);

	

	(idSuper12_B_6, idSuper12_Super12_4, enB_4, enB1_3) 
	= 
		 if ( idSuper12_B_1 = 0) then 
		(idSuper12_B_3, idSuper12_Super12_3, enB_3, enB1_1)
		 else
		 if ( idSuper12_B_1 = 798) then 
		(idSuper12_B_4, idSuper12_Super12_3, enB_3, enB1_1)
		 else
		 if ( idSuper12_B_1 = 797) then 
		(idSuper12_B_5, idSuper12_Super12_3, enB_3, enB1_2)
		 else (idSuper12_B_1, idSuper12_Super12_2, enB_2, enB1_1);


	(idSuper12_B, idSuper12_Super12, enB, enB1) 
	= (idSuper12_B_6, idSuper12_Super12_4, enB_4, enB1_3);
	

tel





--During action for state :Super12_B
node Super12_B_du(durB_1:int)

returns (durB:int);


var 	durB_2:int;


let



	durB_2 
	=  durB_1  + 1;
	

	(durB) 
	= (durB_2);
	

tel





-- Exit action for state :Super12_B
node Super12_B_ex(idSuper12_B_1:int;
	exB1_1:int;
	exB_1:int;
	idSuper12_Super12_1:int;
	isInner:bool)

returns (idSuper12_B:int;
	exB1:int;
	exB:int;
	idSuper12_Super12:int);


var 	idSuper12_B_2, idSuper12_B_3, idSuper12_B_4, idSuper12_B_5:int;
	exB1_2, exB1_3:int;
	exB_2:int;
	idSuper12_Super12_2:int;


let



	
	(idSuper12_B_2) 
	= 
	if ( idSuper12_B_1 = 798) then
	B_B0_ex(idSuper12_B_1, false)
	 else (idSuper12_B_1);

	

	(exB1_2, idSuper12_B_3) 
	= 
	if ( idSuper12_B_1 = 797) then
	B_B1_ex(exB1_1, idSuper12_B_1, false)
	 else (exB1_1, idSuper12_B_1);

	

	(idSuper12_B_4, exB1_3) 
	= 
		 if ( idSuper12_B_1 = 798) then 
		(idSuper12_B_2, exB1_1)
		 else
		 if ( idSuper12_B_1 = 797) then 
		(idSuper12_B_3, exB1_2)
		 else (idSuper12_B_1, exB1_1);


	exB_2 
	= if (not isInner) then  exB_1  + 1
	 else exB_1;
	

	-- set state as inactive 
	idSuper12_Super12_2
	 = if (not isInner) then 0 else idSuper12_Super12_1;

	idSuper12_B_5 
	= 0;
	

	(idSuper12_B, exB1, exB, idSuper12_Super12) 
	= (idSuper12_B_5, exB1_3, exB_2, idSuper12_Super12_2);
	

tel






-- Entry action for state :A_A1
node A_A1_en(idSuper12_A_1:int;
	isInner:bool)

returns (idSuper12_A:int);


var 	idSuper12_A_2:int;


let



	-- set state as active 
	idSuper12_A_2 
	= 799;
	

	(idSuper12_A) 
	= (idSuper12_A_2);
	

tel





-- Exit action for state :A_A1
node A_A1_ex(idSuper12_A_1:int;
	isInner:bool)

returns (idSuper12_A:int);


var 	idSuper12_A_2:int;


let



	-- set state as inactive 
	idSuper12_A_2
	 = if (not isInner) then 0 else idSuper12_A_1;


	(idSuper12_A) 
	= (idSuper12_A_2);
	

tel






-- Entry action for state :A_A0
node A_A0_en(idSuper12_A_1:int;
	enA0_1:int;
	isInner:bool)

returns (idSuper12_A:int;
	enA0:int);


var 	idSuper12_A_2:int;
	enA0_2:int;


let



	-- set state as active 
	idSuper12_A_2 
	= 794;
	

	enA0_2 
	= if (not isInner) then  enA0_1  + 1
	 else enA0_1;
	

	(idSuper12_A, enA0) 
	= (idSuper12_A_2, enA0_2);
	

tel





--During action for state :A_A0
node A_A0_du(durA0_1:int)

returns (durA0:int);


var 	durA0_2:int;


let



	durA0_2 
	=  durA0_1  + 1;
	

	(durA0) 
	= (durA0_2);
	

tel





-- Exit action for state :A_A0
node A_A0_ex(exA0_1:int;
	idSuper12_A_1:int;
	isInner:bool)

returns (exA0:int;
	idSuper12_A:int);


var 	exA0_2:int;
	idSuper12_A_2:int;


let



	exA0_2 
	= if (not isInner) then  exA0_1  + 1
	 else exA0_1;
	

	-- set state as inactive 
	idSuper12_A_2
	 = if (not isInner) then 0 else idSuper12_A_1;


	(exA0, idSuper12_A) 
	= (exA0_2, idSuper12_A_2);
	

tel






-- Entry action for state :Super12_A
node Super12_A_en(idSuper12_A_1:int;
	idSuper12_Super12_1:int;
	enA_1:int;
	enA0_1:int;
	isInner:bool)

returns (idSuper12_A:int;
	idSuper12_Super12:int;
	enA:int;
	enA0:int);


var 	idSuper12_A_2, idSuper12_A_3, idSuper12_A_4, idSuper12_A_5, idSuper12_A_6:int;
	idSuper12_Super12_2, idSuper12_Super12_3, idSuper12_Super12_4:int;
	enA_2, enA_3, enA_4:int;
	enA0_2, enA0_3, enA0_4, enA0_5:int;


let



	-- set state as active 
	idSuper12_Super12_2 
	= 795;
	

	enA_2 
	= if (not isInner) then  enA_1  + 1
	 else enA_1;
	

	
-- transition trace :
	--POINT__To__A_A0_1
		(idSuper12_A_2, enA0_2) 
	= A_A0_en(idSuper12_A_1, enA0_1, false);
		

	(idSuper12_A_3, idSuper12_Super12_3, enA_3, enA0_3) 
	= 

	if ( idSuper12_A_1 = 0) then

	 (idSuper12_A_2, idSuper12_Super12_2, enA_2, enA0_2)

	 else(idSuper12_A_1, idSuper12_Super12_2, enA_2, enA0_1);

	

	(idSuper12_A_4) 
	= 
	if ( idSuper12_A_1 = 799) then
	A_A1_en(idSuper12_A_1, false)
	 else (idSuper12_A_1);

	

	(idSuper12_A_5, enA0_4) 
	= 
	if ( idSuper12_A_1 = 794) then
	A_A0_en(idSuper12_A_1, enA0_1, false)
	 else (idSuper12_A_1, enA0_1);

	

	(idSuper12_A_6, idSuper12_Super12_4, enA_4, enA0_5) 
	= 
		 if ( idSuper12_A_1 = 0) then 
		(idSuper12_A_3, idSuper12_Super12_3, enA_3, enA0_3)
		 else
		 if ( idSuper12_A_1 = 799) then 
		(idSuper12_A_4, idSuper12_Super12_3, enA_3, enA0_3)
		 else
		 if ( idSuper12_A_1 = 794) then 
		(idSuper12_A_5, idSuper12_Super12_3, enA_3, enA0_4)
		 else (idSuper12_A_1, idSuper12_Super12_2, enA_2, enA0_1);


	(idSuper12_A, idSuper12_Super12, enA, enA0) 
	= (idSuper12_A_6, idSuper12_Super12_4, enA_4, enA0_5);
	

tel





-- Exit action for state :Super12_A
node Super12_A_ex(idSuper12_A_1:int;
	exA0_1:int;
	exA_1:int;
	idSuper12_Super12_1:int;
	isInner:bool)

returns (idSuper12_A:int;
	exA0:int;
	exA:int;
	idSuper12_Super12:int);


var 	idSuper12_A_2, idSuper12_A_3, idSuper12_A_4, idSuper12_A_5:int;
	exA0_2, exA0_3:int;
	exA_2:int;
	idSuper12_Super12_2:int;


let



	
	(idSuper12_A_2) 
	= 
	if ( idSuper12_A_1 = 799) then
	A_A1_ex(idSuper12_A_1, false)
	 else (idSuper12_A_1);

	

	(exA0_2, idSuper12_A_3) 
	= 
	if ( idSuper12_A_1 = 794) then
	A_A0_ex(exA0_1, idSuper12_A_1, false)
	 else (exA0_1, idSuper12_A_1);

	

	(idSuper12_A_4, exA0_3) 
	= 
		 if ( idSuper12_A_1 = 799) then 
		(idSuper12_A_2, exA0_1)
		 else
		 if ( idSuper12_A_1 = 794) then 
		(idSuper12_A_3, exA0_2)
		 else (idSuper12_A_1, exA0_1);


	exA_2 
	= if (not isInner) then  exA_1  + 1
	 else exA_1;
	

	-- set state as inactive 
	idSuper12_Super12_2
	 = if (not isInner) then 0 else idSuper12_Super12_1;

	idSuper12_A_5 
	= 0;
	

	(idSuper12_A, exA0, exA, idSuper12_Super12) 
	= (idSuper12_A_5, exA0_3, exA_2, idSuper12_Super12_2);
	

tel





--During action for state :Super12_A
node Super12_A_du(durA_1:int)

returns (durA:int);


var 	durA_2:int;


let



	durA_2 
	=  durA_1  + 1;
	

	(durA) 
	= (durA_2);
	

tel


--***************************************************State :Super12_B Automaton***************************************************

node Super12_B_node(idSuper12_B_1:int;
	E:bool;
	enB1_1:int;
	F:bool;
	exB_1:int;
	exB1_1:int;
	idSuper12_Super12_1:int;
	idSuper12_A_1:int;
	enA_1:int;
	enA0_1:int;
	durB1_1:int)

returns (idSuper12_B:int;
	enB1:int;
	exB:int;
	exB1:int;
	idSuper12_Super12:int;
	idSuper12_A:int;
	enA:int;
	enA0:int;
	durB1:int);


let

	 automaton super12_b

	state POINTSuper12_B:
	unless (idSuper12_B_1=0) restart POINT__TO__B_B0_1



	unless (idSuper12_B_1=798) and E restart B_B0__TO__B_B1_1



	unless (idSuper12_B_1=797) and F restart B_B1__TO__A_A0_1



	unless (idSuper12_B_1=797) and E restart B_B1__TO__B_B0_2



	unless (idSuper12_B_1=798) restart B_B0_IDL

	unless (idSuper12_B_1=797) restart B_B1_IDL

	let

		(idSuper12_B, enB1, exB, exB1, idSuper12_Super12, idSuper12_A, enA, enA0, durB1) 
	= (idSuper12_B_1, enB1_1, exB_1, exB1_1, idSuper12_Super12_1, idSuper12_A_1, enA_1, enA0_1, durB1_1);
	

	tel



	state POINT__TO__B_B0_1:

	 var 	idSuper12_B_2:int;
	let

		-- transition trace :
	--POINT__To__B_B0_1
		(idSuper12_B_2) 
	= B_B0_en(idSuper12_B_1, false);
		

	(idSuper12_B) 
	=  (idSuper12_B_2);

	--add unused variables
	(durB1, enA, enA0, enB1, exB, exB1, idSuper12_A, idSuper12_Super12) 
	= (durB1_1, enA_1, enA0_1, enB1_1, exB_1, exB1_1, idSuper12_A_1, idSuper12_Super12_1);
	

	tel

	until true restart POINTSuper12_B



	state B_B0__TO__B_B1_1:

	 var 	idSuper12_B_2, idSuper12_B_3:int;
	enB1_2:int;
	let

		-- transition trace :
	--B_B0__To__B_B1_1
		(idSuper12_B_2) 
	= B_B0_ex(idSuper12_B_1, false);
		

		(idSuper12_B_3, enB1_2) 
	= B_B1_en(idSuper12_B_2, enB1_1, false);
		

	(idSuper12_B, enB1) 
	=  (idSuper12_B_3, enB1_2);

	--add unused variables
	(durB1, enA, enA0, exB, exB1, idSuper12_A, idSuper12_Super12) 
	= (durB1_1, enA_1, enA0_1, exB_1, exB1_1, idSuper12_A_1, idSuper12_Super12_1);
	

	tel

	until true restart POINTSuper12_B



	state B_B1__TO__A_A0_1:

	 var 	idSuper12_B_2:int;
	exB_2:int;
	exB1_2:int;
	idSuper12_Super12_2, idSuper12_Super12_3:int;
	idSuper12_A_2, idSuper12_A_3:int;
	enA_2:int;
	enA0_2:int;
	let

		-- transition trace :
	--B_B1__To__A_A0_1
		(idSuper12_B_2, exB1_2, exB_2, idSuper12_Super12_2) 
	= Super12_B_ex(idSuper12_B_1, exB1_1, exB_1, idSuper12_Super12_1, false);
		

		idSuper12_A_2 
	= 794;
	
		(idSuper12_A_3, idSuper12_Super12_3, enA_2, enA0_2) 
	= Super12_A_en(idSuper12_A_2, idSuper12_Super12_2, enA_1, enA0_1, false);
		

	(idSuper12_B, enB1, exB, exB1, idSuper12_Super12, idSuper12_A, enA, enA0) 
	=  (idSuper12_B_2, enB1_1, exB_2, exB1_2, idSuper12_Super12_3, idSuper12_A_3, enA_2, enA0_2);

	--add unused variables
	(durB1) 
	= (durB1_1);
	

	tel

	until true restart POINTSuper12_B



	state B_B1__TO__B_B0_2:

	 var 	idSuper12_B_2, idSuper12_B_3:int;
	exB1_2:int;
	let

		-- transition trace :
	--B_B1__To__B_B0_2
		(exB1_2, idSuper12_B_2) 
	= B_B1_ex(exB1_1, idSuper12_B_1, false);
		

		(idSuper12_B_3) 
	= B_B0_en(idSuper12_B_2, false);
		

	(idSuper12_B, enB1, exB, exB1, idSuper12_Super12, idSuper12_A, enA, enA0) 
	=  (idSuper12_B_3, enB1_1, exB_1, exB1_2, idSuper12_Super12_1, idSuper12_A_1, enA_1, enA0_1);

	--add unused variables
	(durB1) 
	= (durB1_1);
	

	tel

	until true restart POINTSuper12_B



	state B_B0_IDL:

	 	let

		

	(idSuper12_B, enB1, exB, exB1, idSuper12_Super12, idSuper12_A, enA, enA0) 
	= (idSuper12_B_1, enB1_1, exB_1, exB1_1, idSuper12_Super12_1, idSuper12_A_1, enA_1, enA0_1);
	
	--add unused variables
	(durB1) 
	= (durB1_1);
	

	tel

	until true restart POINTSuper12_B



	state B_B1_IDL:

	 var 	durB1_2:int;
	let

		
	(durB1_2) 
	= B_B1_du(durB1_1);

		


	(idSuper12_B, enB1, exB, exB1, idSuper12_Super12, idSuper12_A, enA, enA0, durB1) 
	= (idSuper12_B_1, enB1_1, exB_1, exB1_1, idSuper12_Super12_1, idSuper12_A_1, enA_1, enA0_1, durB1_2);
	

	tel

	until true restart POINTSuper12_B



tel


--***************************************************State :Super12_A Automaton***************************************************

node Super12_A_node(idSuper12_A_1:int;
	enA0_1:int;
	F:bool;
	E:bool;
	exA_1:int;
	exA0_1:int;
	idSuper12_Super12_1:int;
	idSuper12_B_1:int;
	enB_1:int;
	enB1_1:int;
	durA0_1:int)

returns (idSuper12_A:int;
	enA0:int;
	exA:int;
	exA0:int;
	idSuper12_Super12:int;
	idSuper12_B:int;
	enB:int;
	enB1:int;
	durA0:int);


let

	 automaton super12_a

	state POINTSuper12_A:
	unless (idSuper12_A_1=0) restart POINT__TO__A_A0_1



	unless (idSuper12_A_1=799) and F restart A_A1__TO__A_A0_1



	unless (idSuper12_A_1=794) and E restart A_A0__TO__B_B1_1



	unless (idSuper12_A_1=794) and F restart A_A0__TO__A_A1_2



	unless (idSuper12_A_1=799) restart A_A1_IDL

	unless (idSuper12_A_1=794) restart A_A0_IDL

	let

		(idSuper12_A, enA0, exA, exA0, idSuper12_Super12, idSuper12_B, enB, enB1, durA0) 
	= (idSuper12_A_1, enA0_1, exA_1, exA0_1, idSuper12_Super12_1, idSuper12_B_1, enB_1, enB1_1, durA0_1);
	

	tel



	state POINT__TO__A_A0_1:

	 var 	idSuper12_A_2:int;
	enA0_2:int;
	let

		-- transition trace :
	--POINT__To__A_A0_1
		(idSuper12_A_2, enA0_2) 
	= A_A0_en(idSuper12_A_1, enA0_1, false);
		

	(idSuper12_A, enA0) 
	=  (idSuper12_A_2, enA0_2);

	--add unused variables
	(durA0, enB, enB1, exA, exA0, idSuper12_B, idSuper12_Super12) 
	= (durA0_1, enB_1, enB1_1, exA_1, exA0_1, idSuper12_B_1, idSuper12_Super12_1);
	

	tel

	until true restart POINTSuper12_A



	state A_A1__TO__A_A0_1:

	 var 	idSuper12_A_2, idSuper12_A_3:int;
	enA0_2:int;
	let

		-- transition trace :
	--A_A1__To__A_A0_1
		(idSuper12_A_2) 
	= A_A1_ex(idSuper12_A_1, false);
		

		(idSuper12_A_3, enA0_2) 
	= A_A0_en(idSuper12_A_2, enA0_1, false);
		

	(idSuper12_A, enA0) 
	=  (idSuper12_A_3, enA0_2);

	--add unused variables
	(durA0, enB, enB1, exA, exA0, idSuper12_B, idSuper12_Super12) 
	= (durA0_1, enB_1, enB1_1, exA_1, exA0_1, idSuper12_B_1, idSuper12_Super12_1);
	

	tel

	until true restart POINTSuper12_A



	state A_A0__TO__B_B1_1:

	 var 	idSuper12_A_2:int;
	exA_2:int;
	exA0_2:int;
	idSuper12_Super12_2, idSuper12_Super12_3:int;
	idSuper12_B_2, idSuper12_B_3:int;
	enB_2:int;
	enB1_2:int;
	let

		-- transition trace :
	--A_A0__To__B_B1_1
		(idSuper12_A_2, exA0_2, exA_2, idSuper12_Super12_2) 
	= Super12_A_ex(idSuper12_A_1, exA0_1, exA_1, idSuper12_Super12_1, false);
		

		idSuper12_B_2 
	= 797;
	
		(idSuper12_B_3, idSuper12_Super12_3, enB_2, enB1_2) 
	= Super12_B_en(idSuper12_B_2, idSuper12_Super12_2, enB_1, enB1_1, false);
		

	(idSuper12_A, enA0, exA, exA0, idSuper12_Super12, idSuper12_B, enB, enB1) 
	=  (idSuper12_A_2, enA0_1, exA_2, exA0_2, idSuper12_Super12_3, idSuper12_B_3, enB_2, enB1_2);

	--add unused variables
	(durA0) 
	= (durA0_1);
	

	tel

	until true restart POINTSuper12_A



	state A_A0__TO__A_A1_2:

	 var 	idSuper12_A_2, idSuper12_A_3:int;
	exA0_2:int;
	let

		-- transition trace :
	--A_A0__To__A_A1_2
		(exA0_2, idSuper12_A_2) 
	= A_A0_ex(exA0_1, idSuper12_A_1, false);
		

		(idSuper12_A_3) 
	= A_A1_en(idSuper12_A_2, false);
		

	(idSuper12_A, enA0, exA, exA0, idSuper12_Super12, idSuper12_B, enB, enB1) 
	=  (idSuper12_A_3, enA0_1, exA_1, exA0_2, idSuper12_Super12_1, idSuper12_B_1, enB_1, enB1_1);

	--add unused variables
	(durA0) 
	= (durA0_1);
	

	tel

	until true restart POINTSuper12_A



	state A_A1_IDL:

	 	let

		

	(idSuper12_A, enA0, exA, exA0, idSuper12_Super12, idSuper12_B, enB, enB1) 
	= (idSuper12_A_1, enA0_1, exA_1, exA0_1, idSuper12_Super12_1, idSuper12_B_1, enB_1, enB1_1);
	
	--add unused variables
	(durA0) 
	= (durA0_1);
	

	tel

	until true restart POINTSuper12_A



	state A_A0_IDL:

	 var 	durA0_2:int;
	let

		
	(durA0_2) 
	= A_A0_du(durA0_1);

		


	(idSuper12_A, enA0, exA, exA0, idSuper12_Super12, idSuper12_B, enB, enB1, durA0) 
	= (idSuper12_A_1, enA0_1, exA_1, exA0_1, idSuper12_Super12_1, idSuper12_B_1, enB_1, enB1_1, durA0_2);
	

	tel

	until true restart POINTSuper12_A



tel


--***************************************************State :Super12_Super12 Automaton***************************************************

node Super12_Super12_node(idSuper12_Super12_1:int;
	enA_1:int;
	enA0_1:int;
	idSuper12_A_1:int;
	F:bool;
	exA_1:int;
	exA0_1:int;
	enB_1:int;
	enB1_1:int;
	idSuper12_B_1:int;
	durA_1:int;
	E:bool;
	durA0_1:int;
	durB_1:int;
	durB1_1:int;
	exB_1:int;
	exB1_1:int)

returns (idSuper12_Super12:int;
	enA:int;
	enA0:int;
	idSuper12_A:int;
	exA:int;
	exA0:int;
	enB:int;
	enB1:int;
	idSuper12_B:int;
	durA:int;
	durA0:int;
	durB:int;
	durB1:int;
	exB:int;
	exB1:int);


let

	 automaton super12_super12

	state POINTSuper12_Super12:
	unless (idSuper12_Super12_1=0) restart POINT__TO__SUPER12_A_1



	unless (idSuper12_Super12_1=795) and F restart SUPER12_A__TO__SUPER12_B_1



	unless (idSuper12_Super12_1=795) restart SUPER12_A_IDL

	unless (idSuper12_Super12_1=796) restart SUPER12_B_IDL

	let

		(idSuper12_Super12, enA, enA0, idSuper12_A, exA, exA0, enB, enB1, idSuper12_B, durA, durA0, durB, durB1, exB, exB1) 
	= (idSuper12_Super12_1, enA_1, enA0_1, idSuper12_A_1, exA_1, exA0_1, enB_1, enB1_1, idSuper12_B_1, durA_1, durA0_1, durB_1, durB1_1, exB_1, exB1_1);
	

	tel



	state POINT__TO__SUPER12_A_1:

	 var 	idSuper12_Super12_2:int;
	enA_2:int;
	enA0_2:int;
	idSuper12_A_2:int;
	let

		-- transition trace :
	--POINT__To__Super12_A_1
		(idSuper12_A_2, idSuper12_Super12_2, enA_2, enA0_2) 
	= Super12_A_en(idSuper12_A_1, idSuper12_Super12_1, enA_1, enA0_1, false);
		

	(idSuper12_Super12, enA, enA0, idSuper12_A) 
	=  (idSuper12_Super12_2, enA_2, enA0_2, idSuper12_A_2);

	--add unused variables
	(durA, durA0, durB, durB1, enB, enB1, exA, exA0, exB, exB1, idSuper12_B) 
	= (durA_1, durA0_1, durB_1, durB1_1, enB_1, enB1_1, exA_1, exA0_1, exB_1, exB1_1, idSuper12_B_1);
	

	tel

	until true restart POINTSuper12_Super12



	state SUPER12_A__TO__SUPER12_B_1:

	 var 	idSuper12_Super12_2, idSuper12_Super12_3:int;
	idSuper12_A_2:int;
	exA_2:int;
	exA0_2:int;
	enB_2:int;
	enB1_2:int;
	idSuper12_B_2:int;
	let

		-- transition trace :
	--Super12_A__To__Super12_B_1
		(idSuper12_A_2, exA0_2, exA_2, idSuper12_Super12_2) 
	= Super12_A_ex(idSuper12_A_1, exA0_1, exA_1, idSuper12_Super12_1, false);
		

		(idSuper12_B_2, idSuper12_Super12_3, enB_2, enB1_2) 
	= Super12_B_en(idSuper12_B_1, idSuper12_Super12_2, enB_1, enB1_1, false);
		

	(idSuper12_Super12, enA, enA0, idSuper12_A, exA, exA0, enB, enB1, idSuper12_B) 
	=  (idSuper12_Super12_3, enA_1, enA0_1, idSuper12_A_2, exA_2, exA0_2, enB_2, enB1_2, idSuper12_B_2);

	--add unused variables
	(durA, durA0, durB, durB1, exB, exB1) 
	= (durA_1, durA0_1, durB_1, durB1_1, exB_1, exB1_1);
	

	tel

	until true restart POINTSuper12_Super12



	state SUPER12_A_IDL:

	 var 	idSuper12_Super12_2:int;
	enA0_2:int;
	idSuper12_A_2:int;
	exA_2:int;
	exA0_2:int;
	enB_2:int;
	enB1_2:int;
	idSuper12_B_2:int;
	durA_2:int;
	durA0_2:int;
	let

		
	(durA_2) 
	= Super12_A_du(durA_1);

		

	(idSuper12_A_2, enA0_2, exA_2, exA0_2, idSuper12_Super12_2, idSuper12_B_2, enB_2, enB1_2, durA0_2) 
	= Super12_A_node(idSuper12_A_1, enA0_1, F, E, exA_1, exA0_1, idSuper12_Super12_1, idSuper12_B_1, enB_1, enB1_1, durA0_1);

		


	(idSuper12_Super12, enA, enA0, idSuper12_A, exA, exA0, enB, enB1, idSuper12_B, durA, durA0) 
	= (idSuper12_Super12_2, enA_1, enA0_2, idSuper12_A_2, exA_2, exA0_2, enB_2, enB1_2, idSuper12_B_2, durA_2, durA0_2);
	
	--add unused variables
	(durB, durB1, exB, exB1) 
	= (durB_1, durB1_1, exB_1, exB1_1);
	

	tel

	until true restart POINTSuper12_Super12



	state SUPER12_B_IDL:

	 var 	idSuper12_Super12_2:int;
	enA_2:int;
	enA0_2:int;
	idSuper12_A_2:int;
	enB1_2:int;
	idSuper12_B_2:int;
	durB_2:int;
	durB1_2:int;
	exB_2:int;
	exB1_2:int;
	let

		
	(durB_2) 
	= Super12_B_du(durB_1);

		

	(idSuper12_B_2, enB1_2, exB_2, exB1_2, idSuper12_Super12_2, idSuper12_A_2, enA_2, enA0_2, durB1_2) 
	= Super12_B_node(idSuper12_B_1, E, enB1_1, F, exB_1, exB1_1, idSuper12_Super12_1, idSuper12_A_1, enA_1, enA0_1, durB1_1);

		


	(idSuper12_Super12, enA, enA0, idSuper12_A, exA, exA0, enB, enB1, idSuper12_B, durA, durA0, durB, durB1, exB, exB1) 
	= (idSuper12_Super12_2, enA_2, enA0_2, idSuper12_A_2, exA_1, exA0_1, enB_1, enB1_2, idSuper12_B_2, durA_1, durA0_1, durB_2, durB1_2, exB_2, exB1_2);
	

	tel

	until true restart POINTSuper12_Super12



tel


--***************************************************State :Super12_Super12 Automaton***************************************************

node Super12Modif_Super12(E:bool;
	F:bool)

returns (durA:int;
	durA0:int;
	durB:int;
	durB1:int;
	enA:int;
	enA0:int;
	enB:int;
	enB1:int;
	exA:int;
	exA0:int;
	exB:int;
	exB1:int);


var durA_1: int;

	durA0_1: int;

	durB_1: int;

	durB1_1: int;

	enA_1: int;

	enA0_1: int;

	enB_1: int;

	enB1_1: int;

	exA_1: int;

	exA0_1: int;

	exB_1: int;

	exB1_1: int;

	idSuper12_Super12, idSuper12_Super12_1: int;

	idSuper12_B, idSuper12_B_1: int;

	idSuper12_A, idSuper12_A_1: int;

		idSuper12_Super12_2:int;
	enA_2:int;
	enA0_2:int;
	idSuper12_A_2:int;
	exA_2:int;
	exA0_2:int;
	enB_2:int;
	enB1_2:int;
	idSuper12_B_2:int;
	durA_2:int;
	durA0_2:int;
	durB_2:int;
	durB1_2:int;
	exB_2:int;
	exB1_2:int;
let

	durA_1 = 0 -> pre durA;

	durA0_1 = 0 -> pre durA0;

	durB_1 = 0 -> pre durB;

	durB1_1 = 0 -> pre durB1;

	enA_1 = 0 -> pre enA;

	enA0_1 = 0 -> pre enA0;

	enB_1 = 0 -> pre enB;

	enB1_1 = 0 -> pre enB1;

	exA_1 = 0 -> pre exA;

	exA0_1 = 0 -> pre exA0;

	exB_1 = 0 -> pre exB;

	exB1_1 = 0 -> pre exB1;

	idSuper12_Super12_1 = 0 -> pre idSuper12_Super12;

	idSuper12_B_1 = 0 -> pre idSuper12_B;

	idSuper12_A_1 = 0 -> pre idSuper12_A;

	



	(idSuper12_Super12_2, enA_2, enA0_2, idSuper12_A_2, exA_2, exA0_2, enB_2, enB1_2, idSuper12_B_2, durA_2, durA0_2, durB_2, durB1_2, exB_2, exB1_2)
	 = 

	 if E then Super12_Super12_node(idSuper12_Super12_1, enA_1, enA0_1, idSuper12_A_1, false, exA_1, exA0_1, enB_1, enB1_1, idSuper12_B_1, durA_1, E, durA0_1, durB_1, durB1_1, exB_1, exB1_1)

	 else (idSuper12_Super12_1, enA_1, enA0_1, idSuper12_A_1, exA_1, exA0_1, enB_1, enB1_1, idSuper12_B_1, durA_1, durA0_1, durB_1, durB1_1, exB_1, exB1_1);

	



	(idSuper12_Super12, enA, enA0, idSuper12_A, exA, exA0, enB, enB1, idSuper12_B, durA, durA0, durB, durB1, exB, exB1)
	 = 

	 if F then Super12_Super12_node(idSuper12_Super12_2, enA_2, enA0_2, idSuper12_A_2, F, exA_2, exA0_2, enB_2, enB1_2, idSuper12_B_2, durA_2, false, durA0_2, durB_2, durB1_2, exB_2, exB1_2)

	 else (idSuper12_Super12_2, enA_2, enA0_2, idSuper12_A_2, exA_2, exA0_2, enB_2, enB1_2, idSuper12_B_2, durA_2, durA0_2, durB_2, durB1_2, exB_2, exB1_2);

	


--unused outputs
	

tel



node Super12Modif (E_1_1 : real; F_1_1 : real)
returns (duA_1_1 : int;
	durA0_2_1 : int;
	durB_3_1 : int;
	durB1_4_1 : int;
	enA_5_1 : int;
	enA0_6_1 : int;
	enB_7_1 : int;
	enB1_8_1 : int;
	exA_9_1 : int;
	exA0_10_1 : int;
	exB_11_1 : int;
	exB1_12_1 : int); 
var
	Mux_1_1 : real; Mux_1_2 : real;
	Super12_1_1 : int; Super12_2_1 : int; Super12_3_1 : int; Super12_4_1 : int; Super12_5_1 : int; Super12_6_1 : int; Super12_7_1 : int; Super12_8_1 : int; Super12_9_1 : int; Super12_10_1 : int; Super12_11_1 : int; Super12_12_1 : int;
	Mux_1_1_event: bool;
	Mux_1_2_event: bool;
let 
	Mux_1_1 = E_1_1 ;
	Mux_1_2 = F_1_1 ;
	Mux_1_1_event = false -> ((pre(Mux_1_1) > 0.0 and Mux_1_1 <= 0.0) or (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0));
	Mux_1_2_event = false -> ((pre(Mux_1_2) > 0.0 and Mux_1_2 <= 0.0) or (pre(Mux_1_2) <= 0.0 and Mux_1_2 > 0.0));
	(Super12_1_1, Super12_2_1, Super12_3_1, Super12_4_1, Super12_5_1, Super12_6_1, Super12_7_1, Super12_8_1, Super12_9_1, Super12_10_1, Super12_11_1, Super12_12_1) =  Super12Modif_Super12(Mux_1_1_event, Mux_1_2_event);
	duA_1_1 = Super12_1_1;
	durA0_2_1 = Super12_2_1;
	durB_3_1 = Super12_3_1;
	durB1_4_1 = Super12_4_1;
	enA_5_1 = Super12_5_1;
	enA0_6_1 = Super12_6_1;
	enB_7_1 = Super12_7_1;
	enB1_8_1 = Super12_8_1;
	exA_9_1 = Super12_9_1;
	exA0_10_1 = Super12_10_1;
	exB_11_1 = Super12_11_1;
	exB1_12_1 = Super12_12_1;
tel

