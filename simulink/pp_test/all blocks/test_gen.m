function [] = test_gen(file_name, constant_file)
% TEST_GENERATOR allow to generate some tests models for the specified
% block.
% When called as test_gen('','') it creates a model compatible with Matlab
% r2008b version of each block found in test_generator.slx. These models
% are stored in the 'Verification' directory.
% If a file with the name of the block already exists in 'Verification', it
% update the blocks in this model with the block generated by the process
% script.
% The user can also specify the file_name of the simulink model containing
% the blocks to process, with a constant_file containing any usefull
% constant declaration related to the blocks.

% Change the directory to run the script properly
clc
script_path = which('test_gen.m');
script_path = strrep(script_path,'/test_gen.m','');
actual_directory = pwd;
if not(strcmp(script_path,actual_directory))
    cd(script_path)
end

if isempty(file_name)
    file_name = 'test_generator.slx';
end

if isempty(constant_file)
    cocosim_pp(file_name);
else
    cocosim_pp(file_name, constant_file);
end

% Support for both '.mdl' and '.slx' extensions
if isempty(strfind(file_name,'.mdl'))
    ext = '.slx';
else
    ext = '.mdl';
end
model = strrep(file_name,ext,'');
model_p = strcat(model,'_PP');

disp('Generating verification models...');
load_system(model);

block_list = find_system(model);

for i=2:length(block_list)
    % Get the type of masked subsystems
    block_type = get_param(block_list{i},'MaskType');
    if isempty(block_type)
        % If the block is not a mask subsystem
        block_type = get_param(block_list{i},'BlockType');
    end
    block_name = get_param(block_list{i},'Name');
    newline = sprintf('\n');
    fname = strrep(block_name,newline,'_');
    fname = strrep(fname,'-','_');
    fname = strrep(fname,' ','_');
    disp([block_type ' - ' fname]);
    tmp_model = strcat(fname,'_verif_tmp');
    verif_file = strcat('Verification/',fname,'_verif.mdl');
    if exist(verif_file)==0
        % If the file doesn't exist, we generate a new one
        tmp_file = strcat(tmp_model,'.slx');
        copyfile('verification_template.slx',tmp_file);
        
        load_system(tmp_model);
        replace_one_block(strcat(tmp_model,'/original'),block_list{i});
        set_param(strcat(tmp_model,'/original'),'Name',block_type);
        replace_one_block(strcat(tmp_model,'/generated'),...
            strcat(model_p,'/',block_name));
        set_param(strcat(tmp_model,'/generated'),'Name',...
            strcat(block_type,'_generated'));
    else
        tmp_file = strcat(tmp_model,'.mdl');
        copyfile(verif_file,tmp_file);
        load_system(tmp_model);
        replace_one_block(strcat(tmp_model,'/',block_type),block_list{i});
        replace_one_block(strcat(tmp_model,'/',block_type,'_generated'),...
            strcat(model_p,'/',block_name));
    end
    save_system(tmp_model);
    save_system(tmp_model,verif_file,'ExportToVersion','R2014b');
    close_system(tmp_model);
    delete(tmp_file);
end
close_system(model_p,1);
delete(strcat(model_p,'.slx'));
% delete(strcat(model,'_r2014b.mdl'));
cd(actual_directory);
fprintf('Done\n\n');

end

