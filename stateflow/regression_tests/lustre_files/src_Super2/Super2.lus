-- This file has been generated by cocoSim


-- System nodes











-- Entry action for state :Super2_B
node Super2_B_en(idSuper2_Super2_1:int;
	s_1:real;
	isInner:bool)

returns (idSuper2_Super2:int;
	s:real);


var 	idSuper2_Super2_2:int;
	s_2:real;


let



	-- set state as active 
	idSuper2_Super2_2 
	= 870;
	

	s_2 
	= if (not isInner) then 3.
	 else s_1;
	

	(idSuper2_Super2, s) 
	= (idSuper2_Super2_2, s_2);
	

tel





-- Exit action for state :Super2_B
node Super2_B_ex(idSuper2_Super2_1:int;
	isInner:bool)

returns (idSuper2_Super2:int);


var 	idSuper2_Super2_2:int;


let



	-- set state as inactive 
	idSuper2_Super2_2
	 = if (not isInner) then 0 else idSuper2_Super2_1;


	(idSuper2_Super2) 
	= (idSuper2_Super2_2);
	

tel






-- Entry action for state :C_C1
node C_C1_en(idSuper2_C_1:int;
	s_1:real;
	isInner:bool)

returns (idSuper2_C:int;
	s:real);


var 	idSuper2_C_2:int;
	s_2:real;


let



	-- set state as active 
	idSuper2_C_2 
	= 871;
	

	s_2 
	= if (not isInner) then 2.
	 else s_1;
	

	(idSuper2_C, s) 
	= (idSuper2_C_2, s_2);
	

tel





-- Exit action for state :C_C1
node C_C1_ex(idSuper2_C_1:int;
	isInner:bool)

returns (idSuper2_C:int);


var 	idSuper2_C_2:int;


let



	-- set state as inactive 
	idSuper2_C_2
	 = if (not isInner) then 0 else idSuper2_C_1;


	(idSuper2_C) 
	= (idSuper2_C_2);
	

tel






-- Entry action for state :Super2_C
node Super2_C_en(idSuper2_C_1:int;
	idSuper2_Super2_1:int;
	s_1:real;
	isInner:bool)

returns (idSuper2_C:int;
	idSuper2_Super2:int;
	s:real);


var 	idSuper2_C_2, idSuper2_C_3, idSuper2_C_4, idSuper2_C_5:int;
	idSuper2_Super2_2, idSuper2_Super2_3, idSuper2_Super2_4:int;
	s_2, s_3, s_4, s_5:real;


let



	-- set state as active 
	idSuper2_Super2_2 
	= 872;
	

	
-- transition trace :
	--POINT__To__C_C1_1
		(idSuper2_C_2, s_2) 
	= C_C1_en(idSuper2_C_1, s_1, false);
		

	(idSuper2_C_3, idSuper2_Super2_3, s_3) 
	= 

	if ( idSuper2_C_1 = 0) then

	 (idSuper2_C_2, idSuper2_Super2_2, s_2)

	 else(idSuper2_C_1, idSuper2_Super2_2, s_1);

	

	(idSuper2_C_4, s_4) 
	= 
	if ( idSuper2_C_1 = 871) then
	C_C1_en(idSuper2_C_1, s_1, false)
	 else (idSuper2_C_1, s_1);

	

	(idSuper2_C_5, idSuper2_Super2_4, s_5) 
	= 
		 if ( idSuper2_C_1 = 0) then 
		(idSuper2_C_3, idSuper2_Super2_3, s_3)
		 else
		 if ( idSuper2_C_1 = 871) then 
		(idSuper2_C_4, idSuper2_Super2_3, s_4)
		 else (idSuper2_C_1, idSuper2_Super2_2, s_1);


	(idSuper2_C, idSuper2_Super2, s) 
	= (idSuper2_C_5, idSuper2_Super2_4, s_5);
	

tel





-- Exit action for state :Super2_C
node Super2_C_ex(idSuper2_C_1:int;
	idSuper2_Super2_1:int;
	isInner:bool)

returns (idSuper2_C:int;
	idSuper2_Super2:int);


var 	idSuper2_C_2, idSuper2_C_3, idSuper2_C_4:int;
	idSuper2_Super2_2:int;


let



	
	(idSuper2_C_2) 
	= 
	if ( idSuper2_C_1 = 871) then
	C_C1_ex(idSuper2_C_1, false)
	 else (idSuper2_C_1);

	

	(idSuper2_C_3) 
	= 
		 if ( idSuper2_C_1 = 871) then 
		(idSuper2_C_2)
		 else (idSuper2_C_1);


	-- set state as inactive 
	idSuper2_Super2_2
	 = if (not isInner) then 0 else idSuper2_Super2_1;

	idSuper2_C_4 
	= 0;
	

	(idSuper2_C, idSuper2_Super2) 
	= (idSuper2_C_4, idSuper2_Super2_2);
	

tel






-- Entry action for state :Super2_A
node Super2_A_en(idSuper2_Super2_1:int;
	s_1:real;
	isInner:bool)

returns (idSuper2_Super2:int;
	s:real);


var 	idSuper2_Super2_2:int;
	s_2:real;


let



	-- set state as active 
	idSuper2_Super2_2 
	= 869;
	

	s_2 
	= if (not isInner) then 1.
	 else s_1;
	

	(idSuper2_Super2, s) 
	= (idSuper2_Super2_2, s_2);
	

tel





-- Exit action for state :Super2_A
node Super2_A_ex(idSuper2_Super2_1:int;
	isInner:bool)

returns (idSuper2_Super2:int);


var 	idSuper2_Super2_2:int;


let



	-- set state as inactive 
	idSuper2_Super2_2
	 = if (not isInner) then 0 else idSuper2_Super2_1;


	(idSuper2_Super2) 
	= (idSuper2_Super2_2);
	

tel


--***************************************************State :Super2_C Automaton***************************************************

node Super2_C_node(idSuper2_C_1:int;
	s_1:real;
	E:bool;
	idSuper2_Super2_1:int)

returns (idSuper2_C:int;
	s:real;
	idSuper2_Super2:int);


let

	 automaton super2_c

	state POINTSuper2_C:
	unless (idSuper2_C_1=0) restart POINT__TO__C_C1_1



	unless (idSuper2_C_1=871) and E restart C_C1__TO__SUPER2_B_1



	unless (idSuper2_C_1=871) restart C_C1_IDL

	let

		(idSuper2_C, s, idSuper2_Super2) 
	= (idSuper2_C_1, s_1, idSuper2_Super2_1);
	

	tel



	state POINT__TO__C_C1_1:

	 var 	idSuper2_C_2:int;
	s_2:real;
	let

		-- transition trace :
	--POINT__To__C_C1_1
		(idSuper2_C_2, s_2) 
	= C_C1_en(idSuper2_C_1, s_1, false);
		

	(idSuper2_C, s) 
	=  (idSuper2_C_2, s_2);

	--add unused variables
	(idSuper2_Super2) 
	= (idSuper2_Super2_1);
	

	tel

	until true restart POINTSuper2_C



	state C_C1__TO__SUPER2_B_1:

	 var 	idSuper2_C_2:int;
	s_2:real;
	idSuper2_Super2_2, idSuper2_Super2_3:int;
	let

		-- transition trace :
	--C_C1__To__Super2_B_1
		(idSuper2_C_2, idSuper2_Super2_2) 
	= Super2_C_ex(idSuper2_C_1, idSuper2_Super2_1, false);
		

		(idSuper2_Super2_3, s_2) 
	= Super2_B_en(idSuper2_Super2_2, s_1, false);
		

	(idSuper2_C, s, idSuper2_Super2) 
	=  (idSuper2_C_2, s_2, idSuper2_Super2_3);


	tel

	until true restart POINTSuper2_C



	state C_C1_IDL:

	 	let

		

	(idSuper2_C, s, idSuper2_Super2) 
	= (idSuper2_C_1, s_1, idSuper2_Super2_1);
	

	tel

	until true restart POINTSuper2_C



tel


--***************************************************State :Super2_Super2 Automaton***************************************************

node Super2_Super2_node(idSuper2_Super2_1:int;
	s_1:real;
	F:bool;
	idSuper2_C_1:int;
	E:bool;
	G:bool)

returns (idSuper2_Super2:int;
	s:real;
	idSuper2_C:int);


let

	 automaton super2_super2

	state POINTSuper2_Super2:
	unless (idSuper2_Super2_1=0) restart POINT__TO__SUPER2_A_1



	unless (idSuper2_Super2_1=869) and F restart SUPER2_A__TO__SUPER2_C_1



	unless (idSuper2_Super2_1=869) and E restart SUPER2_A__TO__C_C1_2



	unless (idSuper2_Super2_1=870) and G restart SUPER2_B__TO__SUPER2_A_1



	unless (idSuper2_Super2_1=872) and F restart SUPER2_C__TO__SUPER2_B_1



	unless (idSuper2_Super2_1=869) restart SUPER2_A_IDL

	unless (idSuper2_Super2_1=870) restart SUPER2_B_IDL

	unless (idSuper2_Super2_1=872) restart SUPER2_C_IDL

	let

		(idSuper2_Super2, s, idSuper2_C) 
	= (idSuper2_Super2_1, s_1, idSuper2_C_1);
	

	tel



	state POINT__TO__SUPER2_A_1:

	 var 	idSuper2_Super2_2:int;
	s_2:real;
	let

		-- transition trace :
	--POINT__To__Super2_A_1
		(idSuper2_Super2_2, s_2) 
	= Super2_A_en(idSuper2_Super2_1, s_1, false);
		

	(idSuper2_Super2, s) 
	=  (idSuper2_Super2_2, s_2);

	--add unused variables
	(idSuper2_C) 
	= (idSuper2_C_1);
	

	tel

	until true restart POINTSuper2_Super2



	state SUPER2_A__TO__SUPER2_C_1:

	 var 	idSuper2_Super2_2, idSuper2_Super2_3:int;
	s_2:real;
	idSuper2_C_2:int;
	let

		-- transition trace :
	--Super2_A__To__Super2_C_1
		(idSuper2_Super2_2) 
	= Super2_A_ex(idSuper2_Super2_1, false);
		

		(idSuper2_C_2, idSuper2_Super2_3, s_2) 
	= Super2_C_en(idSuper2_C_1, idSuper2_Super2_2, s_1, false);
		

	(idSuper2_Super2, s, idSuper2_C) 
	=  (idSuper2_Super2_3, s_2, idSuper2_C_2);


	tel

	until true restart POINTSuper2_Super2



	state SUPER2_A__TO__C_C1_2:

	 var 	idSuper2_Super2_2, idSuper2_Super2_3:int;
	s_2:real;
	idSuper2_C_2, idSuper2_C_3:int;
	let

		-- transition trace :
	--Super2_A__To__C_C1_2
		(idSuper2_Super2_2) 
	= Super2_A_ex(idSuper2_Super2_1, false);
		

		idSuper2_C_2 
	= 871;
	
		(idSuper2_C_3, idSuper2_Super2_3, s_2) 
	= Super2_C_en(idSuper2_C_2, idSuper2_Super2_2, s_1, false);
		

	(idSuper2_Super2, s, idSuper2_C) 
	=  (idSuper2_Super2_3, s_2, idSuper2_C_3);


	tel

	until true restart POINTSuper2_Super2



	state SUPER2_B__TO__SUPER2_A_1:

	 var 	idSuper2_Super2_2, idSuper2_Super2_3:int;
	s_2:real;
	let

		-- transition trace :
	--Super2_B__To__Super2_A_1
		(idSuper2_Super2_2) 
	= Super2_B_ex(idSuper2_Super2_1, false);
		

		(idSuper2_Super2_3, s_2) 
	= Super2_A_en(idSuper2_Super2_2, s_1, false);
		

	(idSuper2_Super2, s, idSuper2_C) 
	=  (idSuper2_Super2_3, s_2, idSuper2_C_1);


	tel

	until true restart POINTSuper2_Super2



	state SUPER2_C__TO__SUPER2_B_1:

	 var 	idSuper2_Super2_2, idSuper2_Super2_3:int;
	s_2:real;
	idSuper2_C_2:int;
	let

		-- transition trace :
	--Super2_C__To__Super2_B_1
		(idSuper2_C_2, idSuper2_Super2_2) 
	= Super2_C_ex(idSuper2_C_1, idSuper2_Super2_1, false);
		

		(idSuper2_Super2_3, s_2) 
	= Super2_B_en(idSuper2_Super2_2, s_1, false);
		

	(idSuper2_Super2, s, idSuper2_C) 
	=  (idSuper2_Super2_3, s_2, idSuper2_C_2);


	tel

	until true restart POINTSuper2_Super2



	state SUPER2_A_IDL:

	 	let

		

	(idSuper2_Super2, s, idSuper2_C) 
	= (idSuper2_Super2_1, s_1, idSuper2_C_1);
	

	tel

	until true restart POINTSuper2_Super2



	state SUPER2_B_IDL:

	 	let

		

	(idSuper2_Super2, s, idSuper2_C) 
	= (idSuper2_Super2_1, s_1, idSuper2_C_1);
	

	tel

	until true restart POINTSuper2_Super2



	state SUPER2_C_IDL:

	 var 	idSuper2_Super2_2:int;
	s_2:real;
	idSuper2_C_2:int;
	let

		
	(idSuper2_C_2, s_2, idSuper2_Super2_2) 
	= Super2_C_node(idSuper2_C_1, s_1, E, idSuper2_Super2_1);

		


	(idSuper2_Super2, s, idSuper2_C) 
	= (idSuper2_Super2_2, s_2, idSuper2_C_2);
	

	tel

	until true restart POINTSuper2_Super2



tel


--***************************************************State :Super2_Super2 Automaton***************************************************

node Super2_Super2(x:int;
	E:bool;
	F:bool;
	G:bool)

returns (s:real);


var s_1: real;

	idSuper2_Super2, idSuper2_Super2_1: int;

	idSuper2_C, idSuper2_C_1: int;

		idSuper2_Super2_2, idSuper2_Super2_3:int;
	s_2, s_3:real;
	idSuper2_C_2, idSuper2_C_3:int;
let

	s_1 = 0.0 -> pre s;

	idSuper2_Super2_1 = 0 -> pre idSuper2_Super2;

	idSuper2_C_1 = 0 -> pre idSuper2_C;

	



	(idSuper2_Super2_2, s_2, idSuper2_C_2)
	 = 

	 if E then Super2_Super2_node(idSuper2_Super2_1, s_1, false, idSuper2_C_1, E, false)

	 else (idSuper2_Super2_1, s_1, idSuper2_C_1);

	



	(idSuper2_Super2_3, s_3, idSuper2_C_3)
	 = 

	 if F then Super2_Super2_node(idSuper2_Super2_2, s_2, F, idSuper2_C_2, false, false)

	 else (idSuper2_Super2_2, s_2, idSuper2_C_2);

	



	(idSuper2_Super2, s, idSuper2_C)
	 = 

	 if G then Super2_Super2_node(idSuper2_Super2_3, s_3, false, idSuper2_C_3, false, G)

	 else (idSuper2_Super2_3, s_3, idSuper2_C_3);

	


--unused outputs
	

tel



node Super2 (x_1_1 : int; E_1_1 : real; F_1_1 : real; G_1_1 : real)
returns (state_1_1 : real); 
var
	Mux_1_1 : real; Mux_1_2 : real; Mux_1_3 : real;
	Super2_1_1 : real;
	Mux_1_1_event: bool;
	Mux_1_2_event: bool;
	Mux_1_3_event: bool;
let 
	Mux_1_1 = E_1_1 ;
	Mux_1_2 = F_1_1 ;
	Mux_1_3 = G_1_1 ;
	Mux_1_1_event = false -> ((pre(Mux_1_1) > 0.0 and Mux_1_1 <= 0.0) or (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0));
	Mux_1_2_event = false -> ((pre(Mux_1_2) > 0.0 and Mux_1_2 <= 0.0) or (pre(Mux_1_2) <= 0.0 and Mux_1_2 > 0.0));
	Mux_1_3_event = false -> ((pre(Mux_1_3) > 0.0 and Mux_1_3 <= 0.0) or (pre(Mux_1_3) <= 0.0 and Mux_1_3 > 0.0));
	Super2_1_1 =  Super2_Super2(x_1_1, Mux_1_1_event, Mux_1_2_event, Mux_1_3_event);
	state_1_1 = Super2_1_1;
tel

