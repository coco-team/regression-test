-- This file has been generated by cocoSim


-- System nodes




node POINT__To__Flowchart1_Flowchart1Junction1240_1_Condition_Action(x_1:int)

returns (x:int);


var 	x_2:int;


let



	x_2 
	=  x_1  + 1;
	

	(x) 
	= (x_2);
	

tel






-- Entry action for state :Flowchart1_A
node Flowchart1_A_en(idFlowchart1_A_1:int;
	idFlowchart1_Flowchart1_1:int;
	x_1:int;
	isInner:bool)

returns (idFlowchart1_A:int;
	idFlowchart1_Flowchart1:int;
	x:int);


var 	idFlowchart1_A_2, idFlowchart1_A_3, idFlowchart1_A_4:int;
	idFlowchart1_Flowchart1_2, idFlowchart1_Flowchart1_3, idFlowchart1_Flowchart1_4:int;
	x_2, x_3, x_4:int;


let



	-- set state as active 
	idFlowchart1_Flowchart1_2 
	= 1239;
	

	
-- transition trace :
	--POINT__To__Junction1240_1
		-- condition Action : x++;
		
		(x_2) 
	= POINT__To__Flowchart1_Flowchart1Junction1240_1_Condition_Action(x_1);
		

	(idFlowchart1_A_2, idFlowchart1_Flowchart1_3, x_3) 
	= 

	if ( idFlowchart1_A_1 = 0) then

	 (idFlowchart1_A_1, idFlowchart1_Flowchart1_2, x_2)

	 else(idFlowchart1_A_1, idFlowchart1_Flowchart1_2, x_1);

	

	(idFlowchart1_A_3, idFlowchart1_Flowchart1_4, x_4) 
	= 
		 if ( idFlowchart1_A_1 = 0) then 
		(idFlowchart1_A_2, idFlowchart1_Flowchart1_3, x_3)
		 else (idFlowchart1_A_1, idFlowchart1_Flowchart1_2, x_1);
-- case of state without states but contains transitions 
	idFlowchart1_A_4 
	= -1;
	

	(idFlowchart1_A, idFlowchart1_Flowchart1, x) 
	= (idFlowchart1_A_4, idFlowchart1_Flowchart1_4, x_4);
	

tel





-- Exit action for state :Flowchart1_A
node Flowchart1_A_ex(idFlowchart1_Flowchart1_1:int;
	isInner:bool)

returns (idFlowchart1_Flowchart1:int);


var 	idFlowchart1_Flowchart1_2:int;


let



	-- set state as inactive 
	idFlowchart1_Flowchart1_2
	 = if (not isInner) then 0 else idFlowchart1_Flowchart1_1;


	(idFlowchart1_Flowchart1) 
	= (idFlowchart1_Flowchart1_2);
	

tel


--***************************************************State :Flowchart1_A Automaton***************************************************

node Flowchart1_A_node(idFlowchart1_A_1:int;
	x_1:int)

returns (idFlowchart1_A:int;
	x:int);


let

	 automaton flowchart1_a

	state POINTFlowchart1_A:
	unless (idFlowchart1_A_1=0) restart POINT__TO__FLOWCHART1_FLOWCHART1JUNCTION1240_1



	let

		(idFlowchart1_A, x) 
	= (idFlowchart1_A_1, x_1);
	

	tel



	state POINT__TO__FLOWCHART1_FLOWCHART1JUNCTION1240_1:

	 var 	x_2:int;
	let

		-- transition trace :
	--POINT__To__Junction1240_1
		-- condition Action : x++;
		
		(x_2) 
	= POINT__To__Flowchart1_Flowchart1Junction1240_1_Condition_Action(x_1);
		

	(idFlowchart1_A, x) 
	=  (idFlowchart1_A_1, x_2);


	tel

	until true restart POINTFlowchart1_A



tel


--***************************************************State :Flowchart1_Flowchart1 Automaton***************************************************

node Flowchart1_Flowchart1_node(idFlowchart1_Flowchart1_1:int;
	idFlowchart1_A_1:int;
	x_1:int)

returns (idFlowchart1_Flowchart1:int;
	idFlowchart1_A:int;
	x:int);


let

	 automaton flowchart1_flowchart1

	state POINTFlowchart1_Flowchart1:
	unless (idFlowchart1_Flowchart1_1=0) restart POINT__TO__FLOWCHART1_A_1



	unless true  restart FLOWCHART1_FLOWCHART1_PARALLEL_IDL

	let

		(idFlowchart1_Flowchart1, idFlowchart1_A, x) 
	= (idFlowchart1_Flowchart1_1, idFlowchart1_A_1, x_1);
	

	tel



	state POINT__TO__FLOWCHART1_A_1:

	 var 	idFlowchart1_Flowchart1_2:int;
	idFlowchart1_A_2:int;
	x_2:int;
	let

		-- transition trace :
	--POINT__To__Flowchart1_A_1
		(idFlowchart1_A_2, idFlowchart1_Flowchart1_2, x_2) 
	= Flowchart1_A_en(idFlowchart1_A_1, idFlowchart1_Flowchart1_1, x_1, false);
		

	(idFlowchart1_Flowchart1, idFlowchart1_A, x) 
	=  (idFlowchart1_Flowchart1_2, idFlowchart1_A_2, x_2);


	tel

	until true restart POINTFlowchart1_Flowchart1



	state FLOWCHART1_FLOWCHART1_PARALLEL_IDL:

	 var 	idFlowchart1_A_2:int;
	x_2:int;
	let

		

		(idFlowchart1_A_2, x_2)
	= if not (idFlowchart1_A_1= 0 ) then Flowchart1_A_node(idFlowchart1_A_1, x_1)

		 else (idFlowchart1_A_1, x_1);

		

		

	(idFlowchart1_Flowchart1, idFlowchart1_A, x) 
	= (idFlowchart1_Flowchart1_1, idFlowchart1_A_2, x_2);
	

	tel

	until true restart POINTFlowchart1_Flowchart1



tel


--***************************************************State :Flowchart1_Flowchart1 Automaton***************************************************

node Flowchart1_Flowchart1(noInput :bool)

returns (x:int);


var x_1: int;

	idFlowchart1_Flowchart1, idFlowchart1_Flowchart1_1: int;

	idFlowchart1_A, idFlowchart1_A_1: int;

	let

	x_1 = 0 -> pre x;

	idFlowchart1_Flowchart1_1 = 0 -> pre idFlowchart1_Flowchart1;

	idFlowchart1_A_1 = 0 -> pre idFlowchart1_A;

	



	(idFlowchart1_Flowchart1, idFlowchart1_A, x)
	 = Flowchart1_Flowchart1_node(idFlowchart1_Flowchart1_1, idFlowchart1_A_1, x_1);


--unused outputs
	

tel



node Flowchart1 (i_virtual : real)
returns (Out1_1_1 : int); 
var
	Flowchart1_1_1 : int;
let 
	Flowchart1_1_1 =  Flowchart1_Flowchart1(true);
	Out1_1_1 = Flowchart1_1_1;
tel

