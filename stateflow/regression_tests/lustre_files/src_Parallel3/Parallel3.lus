-- This file has been generated by cocoSim


-- System nodes








































-- Entry action for state :B2_B2a
node B2_B2a_en(idB_B2_1:int;
	x:int;
	b_1:int;
	isInner:bool)

returns (idB_B2:int;
	b:int);


var 	idB_B2_2:int;
	b_2:int;


let



	-- set state as active 
	idB_B2_2 
	= 1573;
	

	b_2 
	= if (not isInner) then x+7
	 else b_1;
	

	(idB_B2, b) 
	= (idB_B2_2, b_2);
	

tel





-- Exit action for state :B2_B2a
node B2_B2a_ex(idB_B2_1:int;
	isInner:bool)

returns (idB_B2:int);


var 	idB_B2_2:int;


let



	-- set state as inactive 
	idB_B2_2
	 = if (not isInner) then 0 else idB_B2_1;


	(idB_B2) 
	= (idB_B2_2);
	

tel






-- Entry action for state :B2_B2b
node B2_B2b_en(idB_B2_1:int;
	x:int;
	b_1:int;
	isInner:bool)

returns (idB_B2:int;
	b:int);


var 	idB_B2_2:int;
	b_2:int;


let



	-- set state as active 
	idB_B2_2 
	= 1574;
	

	b_2 
	= if (not isInner) then x+8
	 else b_1;
	

	(idB_B2, b) 
	= (idB_B2_2, b_2);
	

tel





-- Exit action for state :B2_B2b
node B2_B2b_ex(idB_B2_1:int;
	isInner:bool)

returns (idB_B2:int);


var 	idB_B2_2:int;


let



	-- set state as inactive 
	idB_B2_2
	 = if (not isInner) then 0 else idB_B2_1;


	(idB_B2) 
	= (idB_B2_2);
	

tel






-- Entry action for state :B_B2
node B_B2_en(idB_B2_1:int;
	idParallel3_B_1:int;
	b_1:int;
	x:int;
	isInner:bool)

returns (idB_B2:int;
	idParallel3_B:int;
	b:int);


var 	idB_B2_2, idB_B2_3, idB_B2_4, idB_B2_5, idB_B2_6:int;
	idParallel3_B_2, idParallel3_B_3, idParallel3_B_4:int;
	b_2, b_3, b_4, b_5, b_6:int;


let



	-- set state as active 
	idParallel3_B_2 
	= 1572;
	

	
-- transition trace :
	--POINT__To__B2_B2a_1
		(idB_B2_2, b_2) 
	= B2_B2a_en(idB_B2_1, x, b_1, false);
		

	(idB_B2_3, idParallel3_B_3, b_3) 
	= 

	if ( idB_B2_1 = 0) then

	 (idB_B2_2, idParallel3_B_2, b_2)

	 else(idB_B2_1, idParallel3_B_2, b_1);

	

	(idB_B2_4, b_4) 
	= 
	if ( idB_B2_1 = 1573) then
	B2_B2a_en(idB_B2_1, x, b_1, false)
	 else (idB_B2_1, b_1);

	

	(idB_B2_5, b_5) 
	= 
	if ( idB_B2_1 = 1574) then
	B2_B2b_en(idB_B2_1, x, b_1, false)
	 else (idB_B2_1, b_1);

	

	(idB_B2_6, idParallel3_B_4, b_6) 
	= 
		 if ( idB_B2_1 = 0) then 
		(idB_B2_3, idParallel3_B_3, b_3)
		 else
		 if ( idB_B2_1 = 1573) then 
		(idB_B2_4, idParallel3_B_3, b_4)
		 else
		 if ( idB_B2_1 = 1574) then 
		(idB_B2_5, idParallel3_B_3, b_5)
		 else (idB_B2_1, idParallel3_B_2, b_1);


	(idB_B2, idParallel3_B, b) 
	= (idB_B2_6, idParallel3_B_4, b_6);
	

tel





-- Exit action for state :B_B2
node B_B2_ex(idB_B2_1:int;
	idParallel3_B_1:int;
	isInner:bool)

returns (idB_B2:int;
	idParallel3_B:int);


var 	idB_B2_2, idB_B2_3, idB_B2_4, idB_B2_5:int;
	idParallel3_B_2:int;


let



	
	(idB_B2_2) 
	= 
	if ( idB_B2_1 = 1573) then
	B2_B2a_ex(idB_B2_1, false)
	 else (idB_B2_1);

	

	(idB_B2_3) 
	= 
	if ( idB_B2_1 = 1574) then
	B2_B2b_ex(idB_B2_1, false)
	 else (idB_B2_1);

	

	(idB_B2_4) 
	= 
		 if ( idB_B2_1 = 1573) then 
		(idB_B2_2)
		 else
		 if ( idB_B2_1 = 1574) then 
		(idB_B2_3)
		 else (idB_B2_1);


	-- set state as inactive 
	idParallel3_B_2
	 = if (not isInner) then 0 else idParallel3_B_1;

	idB_B2_5 
	= 0;
	

	(idB_B2, idParallel3_B) 
	= (idB_B2_5, idParallel3_B_2);
	

tel






-- Entry action for state :B1_B1a
node B1_B1a_en(idB_B1_1:int;
	x:int;
	b_1:int;
	isInner:bool)

returns (idB_B1:int;
	b:int);


var 	idB_B1_2:int;
	b_2:int;


let



	-- set state as active 
	idB_B1_2 
	= 1576;
	

	b_2 
	= if (not isInner) then x+5
	 else b_1;
	

	(idB_B1, b) 
	= (idB_B1_2, b_2);
	

tel





-- Exit action for state :B1_B1a
node B1_B1a_ex(idB_B1_1:int;
	isInner:bool)

returns (idB_B1:int);


var 	idB_B1_2:int;


let



	-- set state as inactive 
	idB_B1_2
	 = if (not isInner) then 0 else idB_B1_1;


	(idB_B1) 
	= (idB_B1_2);
	

tel






-- Entry action for state :B1_B1b
node B1_B1b_en(idB_B1_1:int;
	x:int;
	b_1:int;
	isInner:bool)

returns (idB_B1:int;
	b:int);


var 	idB_B1_2:int;
	b_2:int;


let



	-- set state as active 
	idB_B1_2 
	= 1577;
	

	b_2 
	= if (not isInner) then x+6
	 else b_1;
	

	(idB_B1, b) 
	= (idB_B1_2, b_2);
	

tel





-- Exit action for state :B1_B1b
node B1_B1b_ex(idB_B1_1:int;
	isInner:bool)

returns (idB_B1:int);


var 	idB_B1_2:int;


let



	-- set state as inactive 
	idB_B1_2
	 = if (not isInner) then 0 else idB_B1_1;


	(idB_B1) 
	= (idB_B1_2);
	

tel






-- Entry action for state :B_B1
node B_B1_en(idB_B1_1:int;
	idParallel3_B_1:int;
	b_1:int;
	x:int;
	isInner:bool)

returns (idB_B1:int;
	idParallel3_B:int;
	b:int);


var 	idB_B1_2, idB_B1_3, idB_B1_4, idB_B1_5, idB_B1_6:int;
	idParallel3_B_2, idParallel3_B_3, idParallel3_B_4:int;
	b_2, b_3, b_4, b_5, b_6:int;


let



	-- set state as active 
	idParallel3_B_2 
	= 1575;
	

	
-- transition trace :
	--POINT__To__B1_B1a_1
		(idB_B1_2, b_2) 
	= B1_B1a_en(idB_B1_1, x, b_1, false);
		

	(idB_B1_3, idParallel3_B_3, b_3) 
	= 

	if ( idB_B1_1 = 0) then

	 (idB_B1_2, idParallel3_B_2, b_2)

	 else(idB_B1_1, idParallel3_B_2, b_1);

	

	(idB_B1_4, b_4) 
	= 
	if ( idB_B1_1 = 1576) then
	B1_B1a_en(idB_B1_1, x, b_1, false)
	 else (idB_B1_1, b_1);

	

	(idB_B1_5, b_5) 
	= 
	if ( idB_B1_1 = 1577) then
	B1_B1b_en(idB_B1_1, x, b_1, false)
	 else (idB_B1_1, b_1);

	

	(idB_B1_6, idParallel3_B_4, b_6) 
	= 
		 if ( idB_B1_1 = 0) then 
		(idB_B1_3, idParallel3_B_3, b_3)
		 else
		 if ( idB_B1_1 = 1576) then 
		(idB_B1_4, idParallel3_B_3, b_4)
		 else
		 if ( idB_B1_1 = 1577) then 
		(idB_B1_5, idParallel3_B_3, b_5)
		 else (idB_B1_1, idParallel3_B_2, b_1);


	(idB_B1, idParallel3_B, b) 
	= (idB_B1_6, idParallel3_B_4, b_6);
	

tel





-- Exit action for state :B_B1
node B_B1_ex(idB_B1_1:int;
	idParallel3_B_1:int;
	isInner:bool)

returns (idB_B1:int;
	idParallel3_B:int);


var 	idB_B1_2, idB_B1_3, idB_B1_4, idB_B1_5:int;
	idParallel3_B_2:int;


let



	
	(idB_B1_2) 
	= 
	if ( idB_B1_1 = 1576) then
	B1_B1a_ex(idB_B1_1, false)
	 else (idB_B1_1);

	

	(idB_B1_3) 
	= 
	if ( idB_B1_1 = 1577) then
	B1_B1b_ex(idB_B1_1, false)
	 else (idB_B1_1);

	

	(idB_B1_4) 
	= 
		 if ( idB_B1_1 = 1576) then 
		(idB_B1_2)
		 else
		 if ( idB_B1_1 = 1577) then 
		(idB_B1_3)
		 else (idB_B1_1);


	-- set state as inactive 
	idParallel3_B_2
	 = if (not isInner) then 0 else idParallel3_B_1;

	idB_B1_5 
	= 0;
	

	(idB_B1, idParallel3_B) 
	= (idB_B1_5, idParallel3_B_2);
	

tel






-- Entry action for state :Parallel3_B
node Parallel3_B_en(idParallel3_B_1:int;
	idParallel3_Parallel3_1:int;
	b_1:int;
	idB_B1_1:int;
	x:int;
	idB_B2_1:int;
	isInner:bool)

returns (idParallel3_B:int;
	idParallel3_Parallel3:int;
	b:int;
	idB_B1:int;
	idB_B2:int);


var 	idParallel3_B_2, idParallel3_B_3, idParallel3_B_4, idParallel3_B_5, idParallel3_B_6:int;
	idParallel3_Parallel3_2, idParallel3_Parallel3_3, idParallel3_Parallel3_4:int;
	b_2, b_3, b_4, b_5, b_6:int;
	idB_B1_2, idB_B1_3, idB_B1_4, idB_B1_5:int;
	idB_B2_2, idB_B2_3:int;


let



	-- set state as active 
	idParallel3_Parallel3_2 
	= 1571;
	

	
-- transition trace :
	--POINT__To__B_B1_1
		(idB_B1_2, idParallel3_B_2, b_2) 
	= B_B1_en(idB_B1_1, idParallel3_B_1, b_1, x, false);
		

	(idParallel3_B_3, idParallel3_Parallel3_3, b_3, idB_B1_3) 
	= 

	if ( idParallel3_B_1 = 0) then

	 (idParallel3_B_2, idParallel3_Parallel3_2, b_2, idB_B1_2)

	 else(idParallel3_B_1, idParallel3_Parallel3_2, b_1, idB_B1_1);

	

	(idB_B2_2, idParallel3_B_4, b_4) 
	= 
	if ( idParallel3_B_1 = 1572) then
	B_B2_en(idB_B2_1, idParallel3_B_1, b_1, x, false)
	 else (idB_B2_1, idParallel3_B_1, b_1);

	

	(idB_B1_4, idParallel3_B_5, b_5) 
	= 
	if ( idParallel3_B_1 = 1575) then
	B_B1_en(idB_B1_1, idParallel3_B_1, b_1, x, false)
	 else (idB_B1_1, idParallel3_B_1, b_1);

	

	(idParallel3_B_6, idParallel3_Parallel3_4, b_6, idB_B1_5, idB_B2_3) 
	= 
		 if ( idParallel3_B_1 = 0) then 
		(idParallel3_B_3, idParallel3_Parallel3_3, b_3, idB_B1_3, idB_B2_1)
		 else
		 if ( idParallel3_B_1 = 1572) then 
		(idParallel3_B_4, idParallel3_Parallel3_3, b_4, idB_B1_3, idB_B2_2)
		 else
		 if ( idParallel3_B_1 = 1575) then 
		(idParallel3_B_5, idParallel3_Parallel3_3, b_5, idB_B1_4, idB_B2_2)
		 else (idParallel3_B_1, idParallel3_Parallel3_2, b_1, idB_B1_1, idB_B2_1);


	(idParallel3_B, idParallel3_Parallel3, b, idB_B1, idB_B2) 
	= (idParallel3_B_6, idParallel3_Parallel3_4, b_6, idB_B1_5, idB_B2_3);
	

tel





-- Exit action for state :Parallel3_B
node Parallel3_B_ex(idB_B2_1:int;
	idParallel3_B_1:int;
	idB_B1_1:int;
	idParallel3_Parallel3_1:int;
	isInner:bool)

returns (idB_B2:int;
	idParallel3_B:int;
	idB_B1:int;
	idParallel3_Parallel3:int);


var 	idB_B2_2, idB_B2_3:int;
	idParallel3_B_2, idParallel3_B_3, idParallel3_B_4, idParallel3_B_5:int;
	idB_B1_2, idB_B1_3:int;
	idParallel3_Parallel3_2:int;


let



	
	(idB_B2_2, idParallel3_B_2) 
	= 
	if ( idParallel3_B_1 = 1572) then
	B_B2_ex(idB_B2_1, idParallel3_B_1, false)
	 else (idB_B2_1, idParallel3_B_1);

	

	(idB_B1_2, idParallel3_B_3) 
	= 
	if ( idParallel3_B_1 = 1575) then
	B_B1_ex(idB_B1_1, idParallel3_B_1, false)
	 else (idB_B1_1, idParallel3_B_1);

	

	(idB_B2_3, idParallel3_B_4, idB_B1_3) 
	= 
		 if ( idParallel3_B_1 = 1572) then 
		(idB_B2_2, idParallel3_B_2, idB_B1_1)
		 else
		 if ( idParallel3_B_1 = 1575) then 
		(idB_B2_2, idParallel3_B_3, idB_B1_2)
		 else (idB_B2_1, idParallel3_B_1, idB_B1_1);


	-- set state as inactive 
	idParallel3_Parallel3_2
	 = if (not isInner) then 0 else idParallel3_Parallel3_1;

	idParallel3_B_5 
	= 0;
	

	(idB_B2, idParallel3_B, idB_B1, idParallel3_Parallel3) 
	= (idB_B2_3, idParallel3_B_5, idB_B1_3, idParallel3_Parallel3_2);
	

tel






-- Entry action for state :D2_D2a
node D2_D2a_en(idD_D2_1:int;
	y:int;
	dd_1:int;
	isInner:bool)

returns (idD_D2:int;
	dd:int);


var 	idD_D2_2:int;
	dd_2:int;


let



	-- set state as active 
	idD_D2_2 
	= 1587;
	

	dd_2 
	= if (not isInner) then y+7
	 else dd_1;
	

	(idD_D2, dd) 
	= (idD_D2_2, dd_2);
	

tel





-- Exit action for state :D2_D2a
node D2_D2a_ex(idD_D2_1:int;
	isInner:bool)

returns (idD_D2:int);


var 	idD_D2_2:int;


let



	-- set state as inactive 
	idD_D2_2
	 = if (not isInner) then 0 else idD_D2_1;


	(idD_D2) 
	= (idD_D2_2);
	

tel






-- Entry action for state :D2_D2b
node D2_D2b_en(idD_D2_1:int;
	y:int;
	dd_1:int;
	isInner:bool)

returns (idD_D2:int;
	dd:int);


var 	idD_D2_2:int;
	dd_2:int;


let



	-- set state as active 
	idD_D2_2 
	= 1588;
	

	dd_2 
	= if (not isInner) then y+8
	 else dd_1;
	

	(idD_D2, dd) 
	= (idD_D2_2, dd_2);
	

tel





-- Exit action for state :D2_D2b
node D2_D2b_ex(idD_D2_1:int;
	isInner:bool)

returns (idD_D2:int);


var 	idD_D2_2:int;


let



	-- set state as inactive 
	idD_D2_2
	 = if (not isInner) then 0 else idD_D2_1;


	(idD_D2) 
	= (idD_D2_2);
	

tel






-- Entry action for state :D_D2
node D_D2_en(idD_D2_1:int;
	idParallel3_D_1:int;
	dd_1:int;
	y:int;
	isInner:bool)

returns (idD_D2:int;
	idParallel3_D:int;
	dd:int);


var 	idD_D2_2, idD_D2_3, idD_D2_4, idD_D2_5, idD_D2_6:int;
	idParallel3_D_2, idParallel3_D_3, idParallel3_D_4:int;
	dd_2, dd_3, dd_4, dd_5, dd_6:int;


let



	-- set state as active 
	idParallel3_D_2 
	= 1586;
	

	
-- transition trace :
	--POINT__To__D2_D2a_1
		(idD_D2_2, dd_2) 
	= D2_D2a_en(idD_D2_1, y, dd_1, false);
		

	(idD_D2_3, idParallel3_D_3, dd_3) 
	= 

	if ( idD_D2_1 = 0) then

	 (idD_D2_2, idParallel3_D_2, dd_2)

	 else(idD_D2_1, idParallel3_D_2, dd_1);

	

	(idD_D2_4, dd_4) 
	= 
	if ( idD_D2_1 = 1587) then
	D2_D2a_en(idD_D2_1, y, dd_1, false)
	 else (idD_D2_1, dd_1);

	

	(idD_D2_5, dd_5) 
	= 
	if ( idD_D2_1 = 1588) then
	D2_D2b_en(idD_D2_1, y, dd_1, false)
	 else (idD_D2_1, dd_1);

	

	(idD_D2_6, idParallel3_D_4, dd_6) 
	= 
		 if ( idD_D2_1 = 0) then 
		(idD_D2_3, idParallel3_D_3, dd_3)
		 else
		 if ( idD_D2_1 = 1587) then 
		(idD_D2_4, idParallel3_D_3, dd_4)
		 else
		 if ( idD_D2_1 = 1588) then 
		(idD_D2_5, idParallel3_D_3, dd_5)
		 else (idD_D2_1, idParallel3_D_2, dd_1);


	(idD_D2, idParallel3_D, dd) 
	= (idD_D2_6, idParallel3_D_4, dd_6);
	

tel





-- Exit action for state :D_D2
node D_D2_ex(idD_D2_1:int;
	idParallel3_D_1:int;
	isInner:bool)

returns (idD_D2:int;
	idParallel3_D:int);


var 	idD_D2_2, idD_D2_3, idD_D2_4, idD_D2_5:int;
	idParallel3_D_2:int;


let



	
	(idD_D2_2) 
	= 
	if ( idD_D2_1 = 1587) then
	D2_D2a_ex(idD_D2_1, false)
	 else (idD_D2_1);

	

	(idD_D2_3) 
	= 
	if ( idD_D2_1 = 1588) then
	D2_D2b_ex(idD_D2_1, false)
	 else (idD_D2_1);

	

	(idD_D2_4) 
	= 
		 if ( idD_D2_1 = 1587) then 
		(idD_D2_2)
		 else
		 if ( idD_D2_1 = 1588) then 
		(idD_D2_3)
		 else (idD_D2_1);


	-- set state as inactive 
	idParallel3_D_2
	 = if (not isInner) then 0 else idParallel3_D_1;

	idD_D2_5 
	= 0;
	

	(idD_D2, idParallel3_D) 
	= (idD_D2_5, idParallel3_D_2);
	

tel






-- Entry action for state :D1_D1a
node D1_D1a_en(idD_D1_1:int;
	y:int;
	dd_1:int;
	isInner:bool)

returns (idD_D1:int;
	dd:int);


var 	idD_D1_2:int;
	dd_2:int;


let



	-- set state as active 
	idD_D1_2 
	= 1590;
	

	dd_2 
	= if (not isInner) then y+5
	 else dd_1;
	

	(idD_D1, dd) 
	= (idD_D1_2, dd_2);
	

tel





-- Exit action for state :D1_D1a
node D1_D1a_ex(idD_D1_1:int;
	isInner:bool)

returns (idD_D1:int);


var 	idD_D1_2:int;


let



	-- set state as inactive 
	idD_D1_2
	 = if (not isInner) then 0 else idD_D1_1;


	(idD_D1) 
	= (idD_D1_2);
	

tel






-- Entry action for state :D1_D1b
node D1_D1b_en(idD_D1_1:int;
	y:int;
	dd_1:int;
	isInner:bool)

returns (idD_D1:int;
	dd:int);


var 	idD_D1_2:int;
	dd_2:int;


let



	-- set state as active 
	idD_D1_2 
	= 1591;
	

	dd_2 
	= if (not isInner) then y+6
	 else dd_1;
	

	(idD_D1, dd) 
	= (idD_D1_2, dd_2);
	

tel





-- Exit action for state :D1_D1b
node D1_D1b_ex(idD_D1_1:int;
	isInner:bool)

returns (idD_D1:int);


var 	idD_D1_2:int;


let



	-- set state as inactive 
	idD_D1_2
	 = if (not isInner) then 0 else idD_D1_1;


	(idD_D1) 
	= (idD_D1_2);
	

tel






-- Entry action for state :D_D1
node D_D1_en(idD_D1_1:int;
	idParallel3_D_1:int;
	dd_1:int;
	y:int;
	isInner:bool)

returns (idD_D1:int;
	idParallel3_D:int;
	dd:int);


var 	idD_D1_2, idD_D1_3, idD_D1_4, idD_D1_5, idD_D1_6:int;
	idParallel3_D_2, idParallel3_D_3, idParallel3_D_4:int;
	dd_2, dd_3, dd_4, dd_5, dd_6:int;


let



	-- set state as active 
	idParallel3_D_2 
	= 1589;
	

	
-- transition trace :
	--POINT__To__D1_D1a_1
		(idD_D1_2, dd_2) 
	= D1_D1a_en(idD_D1_1, y, dd_1, false);
		

	(idD_D1_3, idParallel3_D_3, dd_3) 
	= 

	if ( idD_D1_1 = 0) then

	 (idD_D1_2, idParallel3_D_2, dd_2)

	 else(idD_D1_1, idParallel3_D_2, dd_1);

	

	(idD_D1_4, dd_4) 
	= 
	if ( idD_D1_1 = 1590) then
	D1_D1a_en(idD_D1_1, y, dd_1, false)
	 else (idD_D1_1, dd_1);

	

	(idD_D1_5, dd_5) 
	= 
	if ( idD_D1_1 = 1591) then
	D1_D1b_en(idD_D1_1, y, dd_1, false)
	 else (idD_D1_1, dd_1);

	

	(idD_D1_6, idParallel3_D_4, dd_6) 
	= 
		 if ( idD_D1_1 = 0) then 
		(idD_D1_3, idParallel3_D_3, dd_3)
		 else
		 if ( idD_D1_1 = 1590) then 
		(idD_D1_4, idParallel3_D_3, dd_4)
		 else
		 if ( idD_D1_1 = 1591) then 
		(idD_D1_5, idParallel3_D_3, dd_5)
		 else (idD_D1_1, idParallel3_D_2, dd_1);


	(idD_D1, idParallel3_D, dd) 
	= (idD_D1_6, idParallel3_D_4, dd_6);
	

tel





-- Exit action for state :D_D1
node D_D1_ex(idD_D1_1:int;
	idParallel3_D_1:int;
	isInner:bool)

returns (idD_D1:int;
	idParallel3_D:int);


var 	idD_D1_2, idD_D1_3, idD_D1_4, idD_D1_5:int;
	idParallel3_D_2:int;


let



	
	(idD_D1_2) 
	= 
	if ( idD_D1_1 = 1590) then
	D1_D1a_ex(idD_D1_1, false)
	 else (idD_D1_1);

	

	(idD_D1_3) 
	= 
	if ( idD_D1_1 = 1591) then
	D1_D1b_ex(idD_D1_1, false)
	 else (idD_D1_1);

	

	(idD_D1_4) 
	= 
		 if ( idD_D1_1 = 1590) then 
		(idD_D1_2)
		 else
		 if ( idD_D1_1 = 1591) then 
		(idD_D1_3)
		 else (idD_D1_1);


	-- set state as inactive 
	idParallel3_D_2
	 = if (not isInner) then 0 else idParallel3_D_1;

	idD_D1_5 
	= 0;
	

	(idD_D1, idParallel3_D) 
	= (idD_D1_5, idParallel3_D_2);
	

tel






-- Entry action for state :Parallel3_D
node Parallel3_D_en(idParallel3_D_1:int;
	idParallel3_Parallel3_1:int;
	dd_1:int;
	idD_D1_1:int;
	y:int;
	idD_D2_1:int;
	isInner:bool)

returns (idParallel3_D:int;
	idParallel3_Parallel3:int;
	dd:int;
	idD_D1:int;
	idD_D2:int);


var 	idParallel3_D_2, idParallel3_D_3, idParallel3_D_4, idParallel3_D_5, idParallel3_D_6:int;
	idParallel3_Parallel3_2, idParallel3_Parallel3_3, idParallel3_Parallel3_4:int;
	dd_2, dd_3, dd_4, dd_5, dd_6:int;
	idD_D1_2, idD_D1_3, idD_D1_4, idD_D1_5:int;
	idD_D2_2, idD_D2_3:int;


let



	-- set state as active 
	idParallel3_Parallel3_2 
	= 1585;
	

	
-- transition trace :
	--POINT__To__D_D1_1
		(idD_D1_2, idParallel3_D_2, dd_2) 
	= D_D1_en(idD_D1_1, idParallel3_D_1, dd_1, y, false);
		

	(idParallel3_D_3, idParallel3_Parallel3_3, dd_3, idD_D1_3) 
	= 

	if ( idParallel3_D_1 = 0) then

	 (idParallel3_D_2, idParallel3_Parallel3_2, dd_2, idD_D1_2)

	 else(idParallel3_D_1, idParallel3_Parallel3_2, dd_1, idD_D1_1);

	

	(idD_D2_2, idParallel3_D_4, dd_4) 
	= 
	if ( idParallel3_D_1 = 1586) then
	D_D2_en(idD_D2_1, idParallel3_D_1, dd_1, y, false)
	 else (idD_D2_1, idParallel3_D_1, dd_1);

	

	(idD_D1_4, idParallel3_D_5, dd_5) 
	= 
	if ( idParallel3_D_1 = 1589) then
	D_D1_en(idD_D1_1, idParallel3_D_1, dd_1, y, false)
	 else (idD_D1_1, idParallel3_D_1, dd_1);

	

	(idParallel3_D_6, idParallel3_Parallel3_4, dd_6, idD_D1_5, idD_D2_3) 
	= 
		 if ( idParallel3_D_1 = 0) then 
		(idParallel3_D_3, idParallel3_Parallel3_3, dd_3, idD_D1_3, idD_D2_1)
		 else
		 if ( idParallel3_D_1 = 1586) then 
		(idParallel3_D_4, idParallel3_Parallel3_3, dd_4, idD_D1_3, idD_D2_2)
		 else
		 if ( idParallel3_D_1 = 1589) then 
		(idParallel3_D_5, idParallel3_Parallel3_3, dd_5, idD_D1_4, idD_D2_2)
		 else (idParallel3_D_1, idParallel3_Parallel3_2, dd_1, idD_D1_1, idD_D2_1);


	(idParallel3_D, idParallel3_Parallel3, dd, idD_D1, idD_D2) 
	= (idParallel3_D_6, idParallel3_Parallel3_4, dd_6, idD_D1_5, idD_D2_3);
	

tel





-- Exit action for state :Parallel3_D
node Parallel3_D_ex(idD_D2_1:int;
	idParallel3_D_1:int;
	idD_D1_1:int;
	idParallel3_Parallel3_1:int;
	isInner:bool)

returns (idD_D2:int;
	idParallel3_D:int;
	idD_D1:int;
	idParallel3_Parallel3:int);


var 	idD_D2_2, idD_D2_3:int;
	idParallel3_D_2, idParallel3_D_3, idParallel3_D_4, idParallel3_D_5:int;
	idD_D1_2, idD_D1_3:int;
	idParallel3_Parallel3_2:int;


let



	
	(idD_D2_2, idParallel3_D_2) 
	= 
	if ( idParallel3_D_1 = 1586) then
	D_D2_ex(idD_D2_1, idParallel3_D_1, false)
	 else (idD_D2_1, idParallel3_D_1);

	

	(idD_D1_2, idParallel3_D_3) 
	= 
	if ( idParallel3_D_1 = 1589) then
	D_D1_ex(idD_D1_1, idParallel3_D_1, false)
	 else (idD_D1_1, idParallel3_D_1);

	

	(idD_D2_3, idParallel3_D_4, idD_D1_3) 
	= 
		 if ( idParallel3_D_1 = 1586) then 
		(idD_D2_2, idParallel3_D_2, idD_D1_1)
		 else
		 if ( idParallel3_D_1 = 1589) then 
		(idD_D2_2, idParallel3_D_3, idD_D1_2)
		 else (idD_D2_1, idParallel3_D_1, idD_D1_1);


	-- set state as inactive 
	idParallel3_Parallel3_2
	 = if (not isInner) then 0 else idParallel3_Parallel3_1;

	idParallel3_D_5 
	= 0;
	

	(idD_D2, idParallel3_D, idD_D1, idParallel3_Parallel3) 
	= (idD_D2_3, idParallel3_D_5, idD_D1_3, idParallel3_Parallel3_2);
	

tel






-- Entry action for state :C2_C2a
node C2_C2a_en(idC_C2_1:int;
	y:int;
	c_1:int;
	isInner:bool)

returns (idC_C2:int;
	c:int);


var 	idC_C2_2:int;
	c_2:int;


let



	-- set state as active 
	idC_C2_2 
	= 1580;
	

	c_2 
	= if (not isInner) then y+3
	 else c_1;
	

	(idC_C2, c) 
	= (idC_C2_2, c_2);
	

tel





-- Exit action for state :C2_C2a
node C2_C2a_ex(idC_C2_1:int;
	isInner:bool)

returns (idC_C2:int);


var 	idC_C2_2:int;


let



	-- set state as inactive 
	idC_C2_2
	 = if (not isInner) then 0 else idC_C2_1;


	(idC_C2) 
	= (idC_C2_2);
	

tel






-- Entry action for state :C2_C2b
node C2_C2b_en(idC_C2_1:int;
	y:int;
	c_1:int;
	isInner:bool)

returns (idC_C2:int;
	c:int);


var 	idC_C2_2:int;
	c_2:int;


let



	-- set state as active 
	idC_C2_2 
	= 1581;
	

	c_2 
	= if (not isInner) then y+4
	 else c_1;
	

	(idC_C2, c) 
	= (idC_C2_2, c_2);
	

tel





-- Exit action for state :C2_C2b
node C2_C2b_ex(idC_C2_1:int;
	isInner:bool)

returns (idC_C2:int);


var 	idC_C2_2:int;


let



	-- set state as inactive 
	idC_C2_2
	 = if (not isInner) then 0 else idC_C2_1;


	(idC_C2) 
	= (idC_C2_2);
	

tel






-- Entry action for state :C_C2
node C_C2_en(idC_C2_1:int;
	idParallel3_C_1:int;
	c_1:int;
	y:int;
	isInner:bool)

returns (idC_C2:int;
	idParallel3_C:int;
	c:int);


var 	idC_C2_2, idC_C2_3, idC_C2_4, idC_C2_5, idC_C2_6:int;
	idParallel3_C_2, idParallel3_C_3, idParallel3_C_4:int;
	c_2, c_3, c_4, c_5, c_6:int;


let



	-- set state as active 
	idParallel3_C_2 
	= 1579;
	

	
-- transition trace :
	--POINT__To__C2_C2a_1
		(idC_C2_2, c_2) 
	= C2_C2a_en(idC_C2_1, y, c_1, false);
		

	(idC_C2_3, idParallel3_C_3, c_3) 
	= 

	if ( idC_C2_1 = 0) then

	 (idC_C2_2, idParallel3_C_2, c_2)

	 else(idC_C2_1, idParallel3_C_2, c_1);

	

	(idC_C2_4, c_4) 
	= 
	if ( idC_C2_1 = 1580) then
	C2_C2a_en(idC_C2_1, y, c_1, false)
	 else (idC_C2_1, c_1);

	

	(idC_C2_5, c_5) 
	= 
	if ( idC_C2_1 = 1581) then
	C2_C2b_en(idC_C2_1, y, c_1, false)
	 else (idC_C2_1, c_1);

	

	(idC_C2_6, idParallel3_C_4, c_6) 
	= 
		 if ( idC_C2_1 = 0) then 
		(idC_C2_3, idParallel3_C_3, c_3)
		 else
		 if ( idC_C2_1 = 1580) then 
		(idC_C2_4, idParallel3_C_3, c_4)
		 else
		 if ( idC_C2_1 = 1581) then 
		(idC_C2_5, idParallel3_C_3, c_5)
		 else (idC_C2_1, idParallel3_C_2, c_1);


	(idC_C2, idParallel3_C, c) 
	= (idC_C2_6, idParallel3_C_4, c_6);
	

tel





-- Exit action for state :C_C2
node C_C2_ex(idC_C2_1:int;
	idParallel3_C_1:int;
	isInner:bool)

returns (idC_C2:int;
	idParallel3_C:int);


var 	idC_C2_2, idC_C2_3, idC_C2_4, idC_C2_5:int;
	idParallel3_C_2:int;


let



	
	(idC_C2_2) 
	= 
	if ( idC_C2_1 = 1580) then
	C2_C2a_ex(idC_C2_1, false)
	 else (idC_C2_1);

	

	(idC_C2_3) 
	= 
	if ( idC_C2_1 = 1581) then
	C2_C2b_ex(idC_C2_1, false)
	 else (idC_C2_1);

	

	(idC_C2_4) 
	= 
		 if ( idC_C2_1 = 1580) then 
		(idC_C2_2)
		 else
		 if ( idC_C2_1 = 1581) then 
		(idC_C2_3)
		 else (idC_C2_1);


	-- set state as inactive 
	idParallel3_C_2
	 = if (not isInner) then 0 else idParallel3_C_1;

	idC_C2_5 
	= 0;
	

	(idC_C2, idParallel3_C) 
	= (idC_C2_5, idParallel3_C_2);
	

tel






-- Entry action for state :C1_C1a
node C1_C1a_en(idC_C1_1:int;
	y:int;
	c_1:int;
	isInner:bool)

returns (idC_C1:int;
	c:int);


var 	idC_C1_2:int;
	c_2:int;


let



	-- set state as active 
	idC_C1_2 
	= 1583;
	

	c_2 
	= if (not isInner) then y+1
	 else c_1;
	

	(idC_C1, c) 
	= (idC_C1_2, c_2);
	

tel





-- Exit action for state :C1_C1a
node C1_C1a_ex(idC_C1_1:int;
	isInner:bool)

returns (idC_C1:int);


var 	idC_C1_2:int;


let



	-- set state as inactive 
	idC_C1_2
	 = if (not isInner) then 0 else idC_C1_1;


	(idC_C1) 
	= (idC_C1_2);
	

tel






-- Entry action for state :C1_C1b
node C1_C1b_en(idC_C1_1:int;
	y:int;
	c_1:int;
	isInner:bool)

returns (idC_C1:int;
	c:int);


var 	idC_C1_2:int;
	c_2:int;


let



	-- set state as active 
	idC_C1_2 
	= 1584;
	

	c_2 
	= if (not isInner) then y+2
	 else c_1;
	

	(idC_C1, c) 
	= (idC_C1_2, c_2);
	

tel





-- Exit action for state :C1_C1b
node C1_C1b_ex(idC_C1_1:int;
	isInner:bool)

returns (idC_C1:int);


var 	idC_C1_2:int;


let



	-- set state as inactive 
	idC_C1_2
	 = if (not isInner) then 0 else idC_C1_1;


	(idC_C1) 
	= (idC_C1_2);
	

tel






-- Entry action for state :C_C1
node C_C1_en(idC_C1_1:int;
	idParallel3_C_1:int;
	c_1:int;
	y:int;
	isInner:bool)

returns (idC_C1:int;
	idParallel3_C:int;
	c:int);


var 	idC_C1_2, idC_C1_3, idC_C1_4, idC_C1_5, idC_C1_6:int;
	idParallel3_C_2, idParallel3_C_3, idParallel3_C_4:int;
	c_2, c_3, c_4, c_5, c_6:int;


let



	-- set state as active 
	idParallel3_C_2 
	= 1582;
	

	
-- transition trace :
	--POINT__To__C1_C1a_1
		(idC_C1_2, c_2) 
	= C1_C1a_en(idC_C1_1, y, c_1, false);
		

	(idC_C1_3, idParallel3_C_3, c_3) 
	= 

	if ( idC_C1_1 = 0) then

	 (idC_C1_2, idParallel3_C_2, c_2)

	 else(idC_C1_1, idParallel3_C_2, c_1);

	

	(idC_C1_4, c_4) 
	= 
	if ( idC_C1_1 = 1583) then
	C1_C1a_en(idC_C1_1, y, c_1, false)
	 else (idC_C1_1, c_1);

	

	(idC_C1_5, c_5) 
	= 
	if ( idC_C1_1 = 1584) then
	C1_C1b_en(idC_C1_1, y, c_1, false)
	 else (idC_C1_1, c_1);

	

	(idC_C1_6, idParallel3_C_4, c_6) 
	= 
		 if ( idC_C1_1 = 0) then 
		(idC_C1_3, idParallel3_C_3, c_3)
		 else
		 if ( idC_C1_1 = 1583) then 
		(idC_C1_4, idParallel3_C_3, c_4)
		 else
		 if ( idC_C1_1 = 1584) then 
		(idC_C1_5, idParallel3_C_3, c_5)
		 else (idC_C1_1, idParallel3_C_2, c_1);


	(idC_C1, idParallel3_C, c) 
	= (idC_C1_6, idParallel3_C_4, c_6);
	

tel





-- Exit action for state :C_C1
node C_C1_ex(idC_C1_1:int;
	idParallel3_C_1:int;
	isInner:bool)

returns (idC_C1:int;
	idParallel3_C:int);


var 	idC_C1_2, idC_C1_3, idC_C1_4, idC_C1_5:int;
	idParallel3_C_2:int;


let



	
	(idC_C1_2) 
	= 
	if ( idC_C1_1 = 1583) then
	C1_C1a_ex(idC_C1_1, false)
	 else (idC_C1_1);

	

	(idC_C1_3) 
	= 
	if ( idC_C1_1 = 1584) then
	C1_C1b_ex(idC_C1_1, false)
	 else (idC_C1_1);

	

	(idC_C1_4) 
	= 
		 if ( idC_C1_1 = 1583) then 
		(idC_C1_2)
		 else
		 if ( idC_C1_1 = 1584) then 
		(idC_C1_3)
		 else (idC_C1_1);


	-- set state as inactive 
	idParallel3_C_2
	 = if (not isInner) then 0 else idParallel3_C_1;

	idC_C1_5 
	= 0;
	

	(idC_C1, idParallel3_C) 
	= (idC_C1_5, idParallel3_C_2);
	

tel






-- Entry action for state :Parallel3_C
node Parallel3_C_en(idParallel3_C_1:int;
	idParallel3_Parallel3_1:int;
	c_1:int;
	idC_C1_1:int;
	y:int;
	idC_C2_1:int;
	isInner:bool)

returns (idParallel3_C:int;
	idParallel3_Parallel3:int;
	c:int;
	idC_C1:int;
	idC_C2:int);


var 	idParallel3_C_2, idParallel3_C_3, idParallel3_C_4, idParallel3_C_5, idParallel3_C_6:int;
	idParallel3_Parallel3_2, idParallel3_Parallel3_3, idParallel3_Parallel3_4:int;
	c_2, c_3, c_4, c_5, c_6:int;
	idC_C1_2, idC_C1_3, idC_C1_4, idC_C1_5:int;
	idC_C2_2, idC_C2_3:int;


let



	-- set state as active 
	idParallel3_Parallel3_2 
	= 1578;
	

	
-- transition trace :
	--POINT__To__C_C1_1
		(idC_C1_2, idParallel3_C_2, c_2) 
	= C_C1_en(idC_C1_1, idParallel3_C_1, c_1, y, false);
		

	(idParallel3_C_3, idParallel3_Parallel3_3, c_3, idC_C1_3) 
	= 

	if ( idParallel3_C_1 = 0) then

	 (idParallel3_C_2, idParallel3_Parallel3_2, c_2, idC_C1_2)

	 else(idParallel3_C_1, idParallel3_Parallel3_2, c_1, idC_C1_1);

	

	(idC_C2_2, idParallel3_C_4, c_4) 
	= 
	if ( idParallel3_C_1 = 1579) then
	C_C2_en(idC_C2_1, idParallel3_C_1, c_1, y, false)
	 else (idC_C2_1, idParallel3_C_1, c_1);

	

	(idC_C1_4, idParallel3_C_5, c_5) 
	= 
	if ( idParallel3_C_1 = 1582) then
	C_C1_en(idC_C1_1, idParallel3_C_1, c_1, y, false)
	 else (idC_C1_1, idParallel3_C_1, c_1);

	

	(idParallel3_C_6, idParallel3_Parallel3_4, c_6, idC_C1_5, idC_C2_3) 
	= 
		 if ( idParallel3_C_1 = 0) then 
		(idParallel3_C_3, idParallel3_Parallel3_3, c_3, idC_C1_3, idC_C2_1)
		 else
		 if ( idParallel3_C_1 = 1579) then 
		(idParallel3_C_4, idParallel3_Parallel3_3, c_4, idC_C1_3, idC_C2_2)
		 else
		 if ( idParallel3_C_1 = 1582) then 
		(idParallel3_C_5, idParallel3_Parallel3_3, c_5, idC_C1_4, idC_C2_2)
		 else (idParallel3_C_1, idParallel3_Parallel3_2, c_1, idC_C1_1, idC_C2_1);


	(idParallel3_C, idParallel3_Parallel3, c, idC_C1, idC_C2) 
	= (idParallel3_C_6, idParallel3_Parallel3_4, c_6, idC_C1_5, idC_C2_3);
	

tel





-- Exit action for state :Parallel3_C
node Parallel3_C_ex(idC_C2_1:int;
	idParallel3_C_1:int;
	idC_C1_1:int;
	idParallel3_Parallel3_1:int;
	isInner:bool)

returns (idC_C2:int;
	idParallel3_C:int;
	idC_C1:int;
	idParallel3_Parallel3:int);


var 	idC_C2_2, idC_C2_3:int;
	idParallel3_C_2, idParallel3_C_3, idParallel3_C_4, idParallel3_C_5:int;
	idC_C1_2, idC_C1_3:int;
	idParallel3_Parallel3_2:int;


let



	
	(idC_C2_2, idParallel3_C_2) 
	= 
	if ( idParallel3_C_1 = 1579) then
	C_C2_ex(idC_C2_1, idParallel3_C_1, false)
	 else (idC_C2_1, idParallel3_C_1);

	

	(idC_C1_2, idParallel3_C_3) 
	= 
	if ( idParallel3_C_1 = 1582) then
	C_C1_ex(idC_C1_1, idParallel3_C_1, false)
	 else (idC_C1_1, idParallel3_C_1);

	

	(idC_C2_3, idParallel3_C_4, idC_C1_3) 
	= 
		 if ( idParallel3_C_1 = 1579) then 
		(idC_C2_2, idParallel3_C_2, idC_C1_1)
		 else
		 if ( idParallel3_C_1 = 1582) then 
		(idC_C2_2, idParallel3_C_3, idC_C1_2)
		 else (idC_C2_1, idParallel3_C_1, idC_C1_1);


	-- set state as inactive 
	idParallel3_Parallel3_2
	 = if (not isInner) then 0 else idParallel3_Parallel3_1;

	idParallel3_C_5 
	= 0;
	

	(idC_C2, idParallel3_C, idC_C1, idParallel3_Parallel3) 
	= (idC_C2_3, idParallel3_C_5, idC_C1_3, idParallel3_Parallel3_2);
	

tel






-- Entry action for state :A2_A2a
node A2_A2a_en(idA_A2_1:int;
	x:int;
	a_1:int;
	isInner:bool)

returns (idA_A2:int;
	a:int);


var 	idA_A2_2:int;
	a_2:int;


let



	-- set state as active 
	idA_A2_2 
	= 1569;
	

	a_2 
	= if (not isInner) then x+3
	 else a_1;
	

	(idA_A2, a) 
	= (idA_A2_2, a_2);
	

tel





-- Exit action for state :A2_A2a
node A2_A2a_ex(idA_A2_1:int;
	isInner:bool)

returns (idA_A2:int);


var 	idA_A2_2:int;


let



	-- set state as inactive 
	idA_A2_2
	 = if (not isInner) then 0 else idA_A2_1;


	(idA_A2) 
	= (idA_A2_2);
	

tel






-- Entry action for state :A2_A2b
node A2_A2b_en(idA_A2_1:int;
	x:int;
	a_1:int;
	isInner:bool)

returns (idA_A2:int;
	a:int);


var 	idA_A2_2:int;
	a_2:int;


let



	-- set state as active 
	idA_A2_2 
	= 1570;
	

	a_2 
	= if (not isInner) then x+4
	 else a_1;
	

	(idA_A2, a) 
	= (idA_A2_2, a_2);
	

tel





-- Exit action for state :A2_A2b
node A2_A2b_ex(idA_A2_1:int;
	isInner:bool)

returns (idA_A2:int);


var 	idA_A2_2:int;


let



	-- set state as inactive 
	idA_A2_2
	 = if (not isInner) then 0 else idA_A2_1;


	(idA_A2) 
	= (idA_A2_2);
	

tel






-- Entry action for state :A_A2
node A_A2_en(idA_A2_1:int;
	idParallel3_A_1:int;
	a_1:int;
	x:int;
	isInner:bool)

returns (idA_A2:int;
	idParallel3_A:int;
	a:int);


var 	idA_A2_2, idA_A2_3, idA_A2_4, idA_A2_5, idA_A2_6:int;
	idParallel3_A_2, idParallel3_A_3, idParallel3_A_4:int;
	a_2, a_3, a_4, a_5, a_6:int;


let



	-- set state as active 
	idParallel3_A_2 
	= 1568;
	

	
-- transition trace :
	--POINT__To__A2_A2a_1
		(idA_A2_2, a_2) 
	= A2_A2a_en(idA_A2_1, x, a_1, false);
		

	(idA_A2_3, idParallel3_A_3, a_3) 
	= 

	if ( idA_A2_1 = 0) then

	 (idA_A2_2, idParallel3_A_2, a_2)

	 else(idA_A2_1, idParallel3_A_2, a_1);

	

	(idA_A2_4, a_4) 
	= 
	if ( idA_A2_1 = 1569) then
	A2_A2a_en(idA_A2_1, x, a_1, false)
	 else (idA_A2_1, a_1);

	

	(idA_A2_5, a_5) 
	= 
	if ( idA_A2_1 = 1570) then
	A2_A2b_en(idA_A2_1, x, a_1, false)
	 else (idA_A2_1, a_1);

	

	(idA_A2_6, idParallel3_A_4, a_6) 
	= 
		 if ( idA_A2_1 = 0) then 
		(idA_A2_3, idParallel3_A_3, a_3)
		 else
		 if ( idA_A2_1 = 1569) then 
		(idA_A2_4, idParallel3_A_3, a_4)
		 else
		 if ( idA_A2_1 = 1570) then 
		(idA_A2_5, idParallel3_A_3, a_5)
		 else (idA_A2_1, idParallel3_A_2, a_1);


	(idA_A2, idParallel3_A, a) 
	= (idA_A2_6, idParallel3_A_4, a_6);
	

tel





-- Exit action for state :A_A2
node A_A2_ex(idA_A2_1:int;
	idParallel3_A_1:int;
	isInner:bool)

returns (idA_A2:int;
	idParallel3_A:int);


var 	idA_A2_2, idA_A2_3, idA_A2_4, idA_A2_5:int;
	idParallel3_A_2:int;


let



	
	(idA_A2_2) 
	= 
	if ( idA_A2_1 = 1569) then
	A2_A2a_ex(idA_A2_1, false)
	 else (idA_A2_1);

	

	(idA_A2_3) 
	= 
	if ( idA_A2_1 = 1570) then
	A2_A2b_ex(idA_A2_1, false)
	 else (idA_A2_1);

	

	(idA_A2_4) 
	= 
		 if ( idA_A2_1 = 1569) then 
		(idA_A2_2)
		 else
		 if ( idA_A2_1 = 1570) then 
		(idA_A2_3)
		 else (idA_A2_1);


	-- set state as inactive 
	idParallel3_A_2
	 = if (not isInner) then 0 else idParallel3_A_1;

	idA_A2_5 
	= 0;
	

	(idA_A2, idParallel3_A) 
	= (idA_A2_5, idParallel3_A_2);
	

tel






-- Entry action for state :A1_A1a
node A1_A1a_en(idA_A1_1:int;
	x:int;
	a_1:int;
	isInner:bool)

returns (idA_A1:int;
	a:int);


var 	idA_A1_2:int;
	a_2:int;


let



	-- set state as active 
	idA_A1_2 
	= 1566;
	

	a_2 
	= if (not isInner) then x+1
	 else a_1;
	

	(idA_A1, a) 
	= (idA_A1_2, a_2);
	

tel





-- Exit action for state :A1_A1a
node A1_A1a_ex(idA_A1_1:int;
	isInner:bool)

returns (idA_A1:int);


var 	idA_A1_2:int;


let



	-- set state as inactive 
	idA_A1_2
	 = if (not isInner) then 0 else idA_A1_1;


	(idA_A1) 
	= (idA_A1_2);
	

tel






-- Entry action for state :A1_A1b
node A1_A1b_en(idA_A1_1:int;
	x:int;
	a_1:int;
	isInner:bool)

returns (idA_A1:int;
	a:int);


var 	idA_A1_2:int;
	a_2:int;


let



	-- set state as active 
	idA_A1_2 
	= 1567;
	

	a_2 
	= if (not isInner) then x+2
	 else a_1;
	

	(idA_A1, a) 
	= (idA_A1_2, a_2);
	

tel





-- Exit action for state :A1_A1b
node A1_A1b_ex(idA_A1_1:int;
	isInner:bool)

returns (idA_A1:int);


var 	idA_A1_2:int;


let



	-- set state as inactive 
	idA_A1_2
	 = if (not isInner) then 0 else idA_A1_1;


	(idA_A1) 
	= (idA_A1_2);
	

tel






-- Entry action for state :A_A1
node A_A1_en(idA_A1_1:int;
	idParallel3_A_1:int;
	a_1:int;
	x:int;
	isInner:bool)

returns (idA_A1:int;
	idParallel3_A:int;
	a:int);


var 	idA_A1_2, idA_A1_3, idA_A1_4, idA_A1_5, idA_A1_6:int;
	idParallel3_A_2, idParallel3_A_3, idParallel3_A_4:int;
	a_2, a_3, a_4, a_5, a_6:int;


let



	-- set state as active 
	idParallel3_A_2 
	= 1565;
	

	
-- transition trace :
	--POINT__To__A1_A1a_1
		(idA_A1_2, a_2) 
	= A1_A1a_en(idA_A1_1, x, a_1, false);
		

	(idA_A1_3, idParallel3_A_3, a_3) 
	= 

	if ( idA_A1_1 = 0) then

	 (idA_A1_2, idParallel3_A_2, a_2)

	 else(idA_A1_1, idParallel3_A_2, a_1);

	

	(idA_A1_4, a_4) 
	= 
	if ( idA_A1_1 = 1566) then
	A1_A1a_en(idA_A1_1, x, a_1, false)
	 else (idA_A1_1, a_1);

	

	(idA_A1_5, a_5) 
	= 
	if ( idA_A1_1 = 1567) then
	A1_A1b_en(idA_A1_1, x, a_1, false)
	 else (idA_A1_1, a_1);

	

	(idA_A1_6, idParallel3_A_4, a_6) 
	= 
		 if ( idA_A1_1 = 0) then 
		(idA_A1_3, idParallel3_A_3, a_3)
		 else
		 if ( idA_A1_1 = 1566) then 
		(idA_A1_4, idParallel3_A_3, a_4)
		 else
		 if ( idA_A1_1 = 1567) then 
		(idA_A1_5, idParallel3_A_3, a_5)
		 else (idA_A1_1, idParallel3_A_2, a_1);


	(idA_A1, idParallel3_A, a) 
	= (idA_A1_6, idParallel3_A_4, a_6);
	

tel





-- Exit action for state :A_A1
node A_A1_ex(idA_A1_1:int;
	idParallel3_A_1:int;
	isInner:bool)

returns (idA_A1:int;
	idParallel3_A:int);


var 	idA_A1_2, idA_A1_3, idA_A1_4, idA_A1_5:int;
	idParallel3_A_2:int;


let



	
	(idA_A1_2) 
	= 
	if ( idA_A1_1 = 1566) then
	A1_A1a_ex(idA_A1_1, false)
	 else (idA_A1_1);

	

	(idA_A1_3) 
	= 
	if ( idA_A1_1 = 1567) then
	A1_A1b_ex(idA_A1_1, false)
	 else (idA_A1_1);

	

	(idA_A1_4) 
	= 
		 if ( idA_A1_1 = 1566) then 
		(idA_A1_2)
		 else
		 if ( idA_A1_1 = 1567) then 
		(idA_A1_3)
		 else (idA_A1_1);


	-- set state as inactive 
	idParallel3_A_2
	 = if (not isInner) then 0 else idParallel3_A_1;

	idA_A1_5 
	= 0;
	

	(idA_A1, idParallel3_A) 
	= (idA_A1_5, idParallel3_A_2);
	

tel






-- Entry action for state :Parallel3_A
node Parallel3_A_en(idParallel3_A_1:int;
	idParallel3_Parallel3_1:int;
	a_1:int;
	idA_A1_1:int;
	x:int;
	idA_A2_1:int;
	isInner:bool)

returns (idParallel3_A:int;
	idParallel3_Parallel3:int;
	a:int;
	idA_A1:int;
	idA_A2:int);


var 	idParallel3_A_2, idParallel3_A_3, idParallel3_A_4, idParallel3_A_5, idParallel3_A_6:int;
	idParallel3_Parallel3_2, idParallel3_Parallel3_3, idParallel3_Parallel3_4:int;
	a_2, a_3, a_4, a_5, a_6:int;
	idA_A1_2, idA_A1_3, idA_A1_4, idA_A1_5:int;
	idA_A2_2, idA_A2_3:int;


let



	-- set state as active 
	idParallel3_Parallel3_2 
	= 1564;
	

	
-- transition trace :
	--POINT__To__A_A1_1
		(idA_A1_2, idParallel3_A_2, a_2) 
	= A_A1_en(idA_A1_1, idParallel3_A_1, a_1, x, false);
		

	(idParallel3_A_3, idParallel3_Parallel3_3, a_3, idA_A1_3) 
	= 

	if ( idParallel3_A_1 = 0) then

	 (idParallel3_A_2, idParallel3_Parallel3_2, a_2, idA_A1_2)

	 else(idParallel3_A_1, idParallel3_Parallel3_2, a_1, idA_A1_1);

	

	(idA_A1_4, idParallel3_A_4, a_4) 
	= 
	if ( idParallel3_A_1 = 1565) then
	A_A1_en(idA_A1_1, idParallel3_A_1, a_1, x, false)
	 else (idA_A1_1, idParallel3_A_1, a_1);

	

	(idA_A2_2, idParallel3_A_5, a_5) 
	= 
	if ( idParallel3_A_1 = 1568) then
	A_A2_en(idA_A2_1, idParallel3_A_1, a_1, x, false)
	 else (idA_A2_1, idParallel3_A_1, a_1);

	

	(idParallel3_A_6, idParallel3_Parallel3_4, a_6, idA_A1_5, idA_A2_3) 
	= 
		 if ( idParallel3_A_1 = 0) then 
		(idParallel3_A_3, idParallel3_Parallel3_3, a_3, idA_A1_3, idA_A2_1)
		 else
		 if ( idParallel3_A_1 = 1565) then 
		(idParallel3_A_4, idParallel3_Parallel3_3, a_4, idA_A1_4, idA_A2_1)
		 else
		 if ( idParallel3_A_1 = 1568) then 
		(idParallel3_A_5, idParallel3_Parallel3_3, a_5, idA_A1_4, idA_A2_2)
		 else (idParallel3_A_1, idParallel3_Parallel3_2, a_1, idA_A1_1, idA_A2_1);


	(idParallel3_A, idParallel3_Parallel3, a, idA_A1, idA_A2) 
	= (idParallel3_A_6, idParallel3_Parallel3_4, a_6, idA_A1_5, idA_A2_3);
	

tel





-- Exit action for state :Parallel3_A
node Parallel3_A_ex(idA_A1_1:int;
	idParallel3_A_1:int;
	idA_A2_1:int;
	idParallel3_Parallel3_1:int;
	isInner:bool)

returns (idA_A1:int;
	idParallel3_A:int;
	idA_A2:int;
	idParallel3_Parallel3:int);


var 	idA_A1_2, idA_A1_3:int;
	idParallel3_A_2, idParallel3_A_3, idParallel3_A_4, idParallel3_A_5:int;
	idA_A2_2, idA_A2_3:int;
	idParallel3_Parallel3_2:int;


let



	
	(idA_A1_2, idParallel3_A_2) 
	= 
	if ( idParallel3_A_1 = 1565) then
	A_A1_ex(idA_A1_1, idParallel3_A_1, false)
	 else (idA_A1_1, idParallel3_A_1);

	

	(idA_A2_2, idParallel3_A_3) 
	= 
	if ( idParallel3_A_1 = 1568) then
	A_A2_ex(idA_A2_1, idParallel3_A_1, false)
	 else (idA_A2_1, idParallel3_A_1);

	

	(idA_A1_3, idParallel3_A_4, idA_A2_3) 
	= 
		 if ( idParallel3_A_1 = 1565) then 
		(idA_A1_2, idParallel3_A_2, idA_A2_1)
		 else
		 if ( idParallel3_A_1 = 1568) then 
		(idA_A1_2, idParallel3_A_3, idA_A2_2)
		 else (idA_A1_1, idParallel3_A_1, idA_A2_1);


	-- set state as inactive 
	idParallel3_Parallel3_2
	 = if (not isInner) then 0 else idParallel3_Parallel3_1;

	idParallel3_A_5 
	= 0;
	

	(idA_A1, idParallel3_A, idA_A2, idParallel3_Parallel3) 
	= (idA_A1_3, idParallel3_A_5, idA_A2_3, idParallel3_Parallel3_2);
	

tel


--***************************************************State :B_B2 Automaton***************************************************

node B_B2_node(idB_B2_1:int;
	b_1:int;
	x:int;
	S:bool;
	R:bool)

returns (idB_B2:int;
	b:int);


let

	 automaton b_b2

	state POINTB_B2:
	unless (idB_B2_1=0) restart POINT__TO__B2_B2A_1



	unless (idB_B2_1=1573) and S restart B2_B2A__TO__B2_B2B_1



	unless (idB_B2_1=1574) and R restart B2_B2B__TO__B2_B2A_1



	unless (idB_B2_1=1573) restart B2_B2A_IDL

	unless (idB_B2_1=1574) restart B2_B2B_IDL

	let

		(idB_B2, b) 
	= (idB_B2_1, b_1);
	

	tel



	state POINT__TO__B2_B2A_1:

	 var 	idB_B2_2:int;
	b_2:int;
	let

		-- transition trace :
	--POINT__To__B2_B2a_1
		(idB_B2_2, b_2) 
	= B2_B2a_en(idB_B2_1, x, b_1, false);
		

	(idB_B2, b) 
	=  (idB_B2_2, b_2);


	tel

	until true restart POINTB_B2



	state B2_B2A__TO__B2_B2B_1:

	 var 	idB_B2_2, idB_B2_3:int;
	b_2:int;
	let

		-- transition trace :
	--B2_B2a__To__B2_B2b_1
		(idB_B2_2) 
	= B2_B2a_ex(idB_B2_1, false);
		

		(idB_B2_3, b_2) 
	= B2_B2b_en(idB_B2_2, x, b_1, false);
		

	(idB_B2, b) 
	=  (idB_B2_3, b_2);


	tel

	until true restart POINTB_B2



	state B2_B2B__TO__B2_B2A_1:

	 var 	idB_B2_2, idB_B2_3:int;
	b_2:int;
	let

		-- transition trace :
	--B2_B2b__To__B2_B2a_1
		(idB_B2_2) 
	= B2_B2b_ex(idB_B2_1, false);
		

		(idB_B2_3, b_2) 
	= B2_B2a_en(idB_B2_2, x, b_1, false);
		

	(idB_B2, b) 
	=  (idB_B2_3, b_2);


	tel

	until true restart POINTB_B2



	state B2_B2A_IDL:

	 	let

		

	(idB_B2, b) 
	= (idB_B2_1, b_1);
	

	tel

	until true restart POINTB_B2



	state B2_B2B_IDL:

	 	let

		

	(idB_B2, b) 
	= (idB_B2_1, b_1);
	

	tel

	until true restart POINTB_B2



tel


--***************************************************State :B_B1 Automaton***************************************************

node B_B1_node(idB_B1_1:int;
	b_1:int;
	x:int;
	S:bool;
	R:bool)

returns (idB_B1:int;
	b:int);


let

	 automaton b_b1

	state POINTB_B1:
	unless (idB_B1_1=0) restart POINT__TO__B1_B1A_1



	unless (idB_B1_1=1576) and S restart B1_B1A__TO__B1_B1B_1



	unless (idB_B1_1=1577) and R restart B1_B1B__TO__B1_B1A_1



	unless (idB_B1_1=1576) restart B1_B1A_IDL

	unless (idB_B1_1=1577) restart B1_B1B_IDL

	let

		(idB_B1, b) 
	= (idB_B1_1, b_1);
	

	tel



	state POINT__TO__B1_B1A_1:

	 var 	idB_B1_2:int;
	b_2:int;
	let

		-- transition trace :
	--POINT__To__B1_B1a_1
		(idB_B1_2, b_2) 
	= B1_B1a_en(idB_B1_1, x, b_1, false);
		

	(idB_B1, b) 
	=  (idB_B1_2, b_2);


	tel

	until true restart POINTB_B1



	state B1_B1A__TO__B1_B1B_1:

	 var 	idB_B1_2, idB_B1_3:int;
	b_2:int;
	let

		-- transition trace :
	--B1_B1a__To__B1_B1b_1
		(idB_B1_2) 
	= B1_B1a_ex(idB_B1_1, false);
		

		(idB_B1_3, b_2) 
	= B1_B1b_en(idB_B1_2, x, b_1, false);
		

	(idB_B1, b) 
	=  (idB_B1_3, b_2);


	tel

	until true restart POINTB_B1



	state B1_B1B__TO__B1_B1A_1:

	 var 	idB_B1_2, idB_B1_3:int;
	b_2:int;
	let

		-- transition trace :
	--B1_B1b__To__B1_B1a_1
		(idB_B1_2) 
	= B1_B1b_ex(idB_B1_1, false);
		

		(idB_B1_3, b_2) 
	= B1_B1a_en(idB_B1_2, x, b_1, false);
		

	(idB_B1, b) 
	=  (idB_B1_3, b_2);


	tel

	until true restart POINTB_B1



	state B1_B1A_IDL:

	 	let

		

	(idB_B1, b) 
	= (idB_B1_1, b_1);
	

	tel

	until true restart POINTB_B1



	state B1_B1B_IDL:

	 	let

		

	(idB_B1, b) 
	= (idB_B1_1, b_1);
	

	tel

	until true restart POINTB_B1



tel


--***************************************************State :Parallel3_B Automaton***************************************************

node Parallel3_B_node(idParallel3_B_1:int;
	b_1:int;
	idB_B1_1:int;
	x:int;
	T:bool;
	idB_B2_1:int;
	R:bool;
	S:bool)

returns (idParallel3_B:int;
	b:int;
	idB_B1:int;
	idB_B2:int);


let

	 automaton parallel3_b

	state POINTParallel3_B:
	unless (idParallel3_B_1=0) restart POINT__TO__B_B1_1



	unless (idParallel3_B_1=1572) and T restart B_B2__TO__B_B1_1



	unless (idParallel3_B_1=1575) and T restart B_B1__TO__B_B2_1



	unless (idParallel3_B_1=1572) restart B_B2_IDL

	unless (idParallel3_B_1=1575) restart B_B1_IDL

	let

		(idParallel3_B, b, idB_B1, idB_B2) 
	= (idParallel3_B_1, b_1, idB_B1_1, idB_B2_1);
	

	tel



	state POINT__TO__B_B1_1:

	 var 	idParallel3_B_2:int;
	b_2:int;
	idB_B1_2:int;
	let

		-- transition trace :
	--POINT__To__B_B1_1
		(idB_B1_2, idParallel3_B_2, b_2) 
	= B_B1_en(idB_B1_1, idParallel3_B_1, b_1, x, false);
		

	(idParallel3_B, b, idB_B1) 
	=  (idParallel3_B_2, b_2, idB_B1_2);

	--add unused variables
	(idB_B2) 
	= (idB_B2_1);
	

	tel

	until true restart POINTParallel3_B



	state B_B2__TO__B_B1_1:

	 var 	idParallel3_B_2, idParallel3_B_3:int;
	b_2:int;
	idB_B1_2:int;
	idB_B2_2:int;
	let

		-- transition trace :
	--B_B2__To__B_B1_1
		(idB_B2_2, idParallel3_B_2) 
	= B_B2_ex(idB_B2_1, idParallel3_B_1, false);
		

		(idB_B1_2, idParallel3_B_3, b_2) 
	= B_B1_en(idB_B1_1, idParallel3_B_2, b_1, x, false);
		

	(idParallel3_B, b, idB_B1, idB_B2) 
	=  (idParallel3_B_3, b_2, idB_B1_2, idB_B2_2);


	tel

	until true restart POINTParallel3_B



	state B_B1__TO__B_B2_1:

	 var 	idParallel3_B_2, idParallel3_B_3:int;
	b_2:int;
	idB_B1_2:int;
	idB_B2_2:int;
	let

		-- transition trace :
	--B_B1__To__B_B2_1
		(idB_B1_2, idParallel3_B_2) 
	= B_B1_ex(idB_B1_1, idParallel3_B_1, false);
		

		(idB_B2_2, idParallel3_B_3, b_2) 
	= B_B2_en(idB_B2_1, idParallel3_B_2, b_1, x, false);
		

	(idParallel3_B, b, idB_B1, idB_B2) 
	=  (idParallel3_B_3, b_2, idB_B1_2, idB_B2_2);


	tel

	until true restart POINTParallel3_B



	state B_B2_IDL:

	 var 	b_2:int;
	idB_B2_2:int;
	let

		
	(idB_B2_2, b_2) 
	= B_B2_node(idB_B2_1, b_1, x, S, R);

		


	(idParallel3_B, b, idB_B1, idB_B2) 
	= (idParallel3_B_1, b_2, idB_B1_1, idB_B2_2);
	

	tel

	until true restart POINTParallel3_B



	state B_B1_IDL:

	 var 	b_2:int;
	idB_B1_2:int;
	let

		
	(idB_B1_2, b_2) 
	= B_B1_node(idB_B1_1, b_1, x, S, R);

		


	(idParallel3_B, b, idB_B1, idB_B2) 
	= (idParallel3_B_1, b_2, idB_B1_2, idB_B2_1);
	

	tel

	until true restart POINTParallel3_B



tel


--***************************************************State :D_D2 Automaton***************************************************

node D_D2_node(idD_D2_1:int;
	dd_1:int;
	y:int;
	S:bool;
	R:bool)

returns (idD_D2:int;
	dd:int);


let

	 automaton d_d2

	state POINTD_D2:
	unless (idD_D2_1=0) restart POINT__TO__D2_D2A_1



	unless (idD_D2_1=1587) and S restart D2_D2A__TO__D2_D2B_1



	unless (idD_D2_1=1588) and R restart D2_D2B__TO__D2_D2A_1



	unless (idD_D2_1=1587) restart D2_D2A_IDL

	unless (idD_D2_1=1588) restart D2_D2B_IDL

	let

		(idD_D2, dd) 
	= (idD_D2_1, dd_1);
	

	tel



	state POINT__TO__D2_D2A_1:

	 var 	idD_D2_2:int;
	dd_2:int;
	let

		-- transition trace :
	--POINT__To__D2_D2a_1
		(idD_D2_2, dd_2) 
	= D2_D2a_en(idD_D2_1, y, dd_1, false);
		

	(idD_D2, dd) 
	=  (idD_D2_2, dd_2);


	tel

	until true restart POINTD_D2



	state D2_D2A__TO__D2_D2B_1:

	 var 	idD_D2_2, idD_D2_3:int;
	dd_2:int;
	let

		-- transition trace :
	--D2_D2a__To__D2_D2b_1
		(idD_D2_2) 
	= D2_D2a_ex(idD_D2_1, false);
		

		(idD_D2_3, dd_2) 
	= D2_D2b_en(idD_D2_2, y, dd_1, false);
		

	(idD_D2, dd) 
	=  (idD_D2_3, dd_2);


	tel

	until true restart POINTD_D2



	state D2_D2B__TO__D2_D2A_1:

	 var 	idD_D2_2, idD_D2_3:int;
	dd_2:int;
	let

		-- transition trace :
	--D2_D2b__To__D2_D2a_1
		(idD_D2_2) 
	= D2_D2b_ex(idD_D2_1, false);
		

		(idD_D2_3, dd_2) 
	= D2_D2a_en(idD_D2_2, y, dd_1, false);
		

	(idD_D2, dd) 
	=  (idD_D2_3, dd_2);


	tel

	until true restart POINTD_D2



	state D2_D2A_IDL:

	 	let

		

	(idD_D2, dd) 
	= (idD_D2_1, dd_1);
	

	tel

	until true restart POINTD_D2



	state D2_D2B_IDL:

	 	let

		

	(idD_D2, dd) 
	= (idD_D2_1, dd_1);
	

	tel

	until true restart POINTD_D2



tel


--***************************************************State :D_D1 Automaton***************************************************

node D_D1_node(idD_D1_1:int;
	dd_1:int;
	y:int;
	S:bool;
	R:bool)

returns (idD_D1:int;
	dd:int);


let

	 automaton d_d1

	state POINTD_D1:
	unless (idD_D1_1=0) restart POINT__TO__D1_D1A_1



	unless (idD_D1_1=1590) and S restart D1_D1A__TO__D1_D1B_1



	unless (idD_D1_1=1591) and R restart D1_D1B__TO__D1_D1A_1



	unless (idD_D1_1=1590) restart D1_D1A_IDL

	unless (idD_D1_1=1591) restart D1_D1B_IDL

	let

		(idD_D1, dd) 
	= (idD_D1_1, dd_1);
	

	tel



	state POINT__TO__D1_D1A_1:

	 var 	idD_D1_2:int;
	dd_2:int;
	let

		-- transition trace :
	--POINT__To__D1_D1a_1
		(idD_D1_2, dd_2) 
	= D1_D1a_en(idD_D1_1, y, dd_1, false);
		

	(idD_D1, dd) 
	=  (idD_D1_2, dd_2);


	tel

	until true restart POINTD_D1



	state D1_D1A__TO__D1_D1B_1:

	 var 	idD_D1_2, idD_D1_3:int;
	dd_2:int;
	let

		-- transition trace :
	--D1_D1a__To__D1_D1b_1
		(idD_D1_2) 
	= D1_D1a_ex(idD_D1_1, false);
		

		(idD_D1_3, dd_2) 
	= D1_D1b_en(idD_D1_2, y, dd_1, false);
		

	(idD_D1, dd) 
	=  (idD_D1_3, dd_2);


	tel

	until true restart POINTD_D1



	state D1_D1B__TO__D1_D1A_1:

	 var 	idD_D1_2, idD_D1_3:int;
	dd_2:int;
	let

		-- transition trace :
	--D1_D1b__To__D1_D1a_1
		(idD_D1_2) 
	= D1_D1b_ex(idD_D1_1, false);
		

		(idD_D1_3, dd_2) 
	= D1_D1a_en(idD_D1_2, y, dd_1, false);
		

	(idD_D1, dd) 
	=  (idD_D1_3, dd_2);


	tel

	until true restart POINTD_D1



	state D1_D1A_IDL:

	 	let

		

	(idD_D1, dd) 
	= (idD_D1_1, dd_1);
	

	tel

	until true restart POINTD_D1



	state D1_D1B_IDL:

	 	let

		

	(idD_D1, dd) 
	= (idD_D1_1, dd_1);
	

	tel

	until true restart POINTD_D1



tel


--***************************************************State :Parallel3_D Automaton***************************************************

node Parallel3_D_node(idParallel3_D_1:int;
	dd_1:int;
	idD_D1_1:int;
	y:int;
	T:bool;
	idD_D2_1:int;
	R:bool;
	S:bool)

returns (idParallel3_D:int;
	dd:int;
	idD_D1:int;
	idD_D2:int);


let

	 automaton parallel3_d

	state POINTParallel3_D:
	unless (idParallel3_D_1=0) restart POINT__TO__D_D1_1



	unless (idParallel3_D_1=1586) and T restart D_D2__TO__D_D1_1



	unless (idParallel3_D_1=1589) and T restart D_D1__TO__D_D2_1



	unless (idParallel3_D_1=1586) restart D_D2_IDL

	unless (idParallel3_D_1=1589) restart D_D1_IDL

	let

		(idParallel3_D, dd, idD_D1, idD_D2) 
	= (idParallel3_D_1, dd_1, idD_D1_1, idD_D2_1);
	

	tel



	state POINT__TO__D_D1_1:

	 var 	idParallel3_D_2:int;
	dd_2:int;
	idD_D1_2:int;
	let

		-- transition trace :
	--POINT__To__D_D1_1
		(idD_D1_2, idParallel3_D_2, dd_2) 
	= D_D1_en(idD_D1_1, idParallel3_D_1, dd_1, y, false);
		

	(idParallel3_D, dd, idD_D1) 
	=  (idParallel3_D_2, dd_2, idD_D1_2);

	--add unused variables
	(idD_D2) 
	= (idD_D2_1);
	

	tel

	until true restart POINTParallel3_D



	state D_D2__TO__D_D1_1:

	 var 	idParallel3_D_2, idParallel3_D_3:int;
	dd_2:int;
	idD_D1_2:int;
	idD_D2_2:int;
	let

		-- transition trace :
	--D_D2__To__D_D1_1
		(idD_D2_2, idParallel3_D_2) 
	= D_D2_ex(idD_D2_1, idParallel3_D_1, false);
		

		(idD_D1_2, idParallel3_D_3, dd_2) 
	= D_D1_en(idD_D1_1, idParallel3_D_2, dd_1, y, false);
		

	(idParallel3_D, dd, idD_D1, idD_D2) 
	=  (idParallel3_D_3, dd_2, idD_D1_2, idD_D2_2);


	tel

	until true restart POINTParallel3_D



	state D_D1__TO__D_D2_1:

	 var 	idParallel3_D_2, idParallel3_D_3:int;
	dd_2:int;
	idD_D1_2:int;
	idD_D2_2:int;
	let

		-- transition trace :
	--D_D1__To__D_D2_1
		(idD_D1_2, idParallel3_D_2) 
	= D_D1_ex(idD_D1_1, idParallel3_D_1, false);
		

		(idD_D2_2, idParallel3_D_3, dd_2) 
	= D_D2_en(idD_D2_1, idParallel3_D_2, dd_1, y, false);
		

	(idParallel3_D, dd, idD_D1, idD_D2) 
	=  (idParallel3_D_3, dd_2, idD_D1_2, idD_D2_2);


	tel

	until true restart POINTParallel3_D



	state D_D2_IDL:

	 var 	dd_2:int;
	idD_D2_2:int;
	let

		
	(idD_D2_2, dd_2) 
	= D_D2_node(idD_D2_1, dd_1, y, S, R);

		


	(idParallel3_D, dd, idD_D1, idD_D2) 
	= (idParallel3_D_1, dd_2, idD_D1_1, idD_D2_2);
	

	tel

	until true restart POINTParallel3_D



	state D_D1_IDL:

	 var 	dd_2:int;
	idD_D1_2:int;
	let

		
	(idD_D1_2, dd_2) 
	= D_D1_node(idD_D1_1, dd_1, y, S, R);

		


	(idParallel3_D, dd, idD_D1, idD_D2) 
	= (idParallel3_D_1, dd_2, idD_D1_2, idD_D2_1);
	

	tel

	until true restart POINTParallel3_D



tel


--***************************************************State :C_C2 Automaton***************************************************

node C_C2_node(idC_C2_1:int;
	c_1:int;
	y:int;
	S:bool;
	R:bool)

returns (idC_C2:int;
	c:int);


let

	 automaton c_c2

	state POINTC_C2:
	unless (idC_C2_1=0) restart POINT__TO__C2_C2A_1



	unless (idC_C2_1=1580) and S restart C2_C2A__TO__C2_C2B_1



	unless (idC_C2_1=1581) and R restart C2_C2B__TO__C2_C2A_1



	unless (idC_C2_1=1580) restart C2_C2A_IDL

	unless (idC_C2_1=1581) restart C2_C2B_IDL

	let

		(idC_C2, c) 
	= (idC_C2_1, c_1);
	

	tel



	state POINT__TO__C2_C2A_1:

	 var 	idC_C2_2:int;
	c_2:int;
	let

		-- transition trace :
	--POINT__To__C2_C2a_1
		(idC_C2_2, c_2) 
	= C2_C2a_en(idC_C2_1, y, c_1, false);
		

	(idC_C2, c) 
	=  (idC_C2_2, c_2);


	tel

	until true restart POINTC_C2



	state C2_C2A__TO__C2_C2B_1:

	 var 	idC_C2_2, idC_C2_3:int;
	c_2:int;
	let

		-- transition trace :
	--C2_C2a__To__C2_C2b_1
		(idC_C2_2) 
	= C2_C2a_ex(idC_C2_1, false);
		

		(idC_C2_3, c_2) 
	= C2_C2b_en(idC_C2_2, y, c_1, false);
		

	(idC_C2, c) 
	=  (idC_C2_3, c_2);


	tel

	until true restart POINTC_C2



	state C2_C2B__TO__C2_C2A_1:

	 var 	idC_C2_2, idC_C2_3:int;
	c_2:int;
	let

		-- transition trace :
	--C2_C2b__To__C2_C2a_1
		(idC_C2_2) 
	= C2_C2b_ex(idC_C2_1, false);
		

		(idC_C2_3, c_2) 
	= C2_C2a_en(idC_C2_2, y, c_1, false);
		

	(idC_C2, c) 
	=  (idC_C2_3, c_2);


	tel

	until true restart POINTC_C2



	state C2_C2A_IDL:

	 	let

		

	(idC_C2, c) 
	= (idC_C2_1, c_1);
	

	tel

	until true restart POINTC_C2



	state C2_C2B_IDL:

	 	let

		

	(idC_C2, c) 
	= (idC_C2_1, c_1);
	

	tel

	until true restart POINTC_C2



tel


--***************************************************State :C_C1 Automaton***************************************************

node C_C1_node(idC_C1_1:int;
	c_1:int;
	y:int;
	S:bool;
	R:bool)

returns (idC_C1:int;
	c:int);


let

	 automaton c_c1

	state POINTC_C1:
	unless (idC_C1_1=0) restart POINT__TO__C1_C1A_1



	unless (idC_C1_1=1583) and S restart C1_C1A__TO__C1_C1B_1



	unless (idC_C1_1=1584) and R restart C1_C1B__TO__C1_C1A_1



	unless (idC_C1_1=1583) restart C1_C1A_IDL

	unless (idC_C1_1=1584) restart C1_C1B_IDL

	let

		(idC_C1, c) 
	= (idC_C1_1, c_1);
	

	tel



	state POINT__TO__C1_C1A_1:

	 var 	idC_C1_2:int;
	c_2:int;
	let

		-- transition trace :
	--POINT__To__C1_C1a_1
		(idC_C1_2, c_2) 
	= C1_C1a_en(idC_C1_1, y, c_1, false);
		

	(idC_C1, c) 
	=  (idC_C1_2, c_2);


	tel

	until true restart POINTC_C1



	state C1_C1A__TO__C1_C1B_1:

	 var 	idC_C1_2, idC_C1_3:int;
	c_2:int;
	let

		-- transition trace :
	--C1_C1a__To__C1_C1b_1
		(idC_C1_2) 
	= C1_C1a_ex(idC_C1_1, false);
		

		(idC_C1_3, c_2) 
	= C1_C1b_en(idC_C1_2, y, c_1, false);
		

	(idC_C1, c) 
	=  (idC_C1_3, c_2);


	tel

	until true restart POINTC_C1



	state C1_C1B__TO__C1_C1A_1:

	 var 	idC_C1_2, idC_C1_3:int;
	c_2:int;
	let

		-- transition trace :
	--C1_C1b__To__C1_C1a_1
		(idC_C1_2) 
	= C1_C1b_ex(idC_C1_1, false);
		

		(idC_C1_3, c_2) 
	= C1_C1a_en(idC_C1_2, y, c_1, false);
		

	(idC_C1, c) 
	=  (idC_C1_3, c_2);


	tel

	until true restart POINTC_C1



	state C1_C1A_IDL:

	 	let

		

	(idC_C1, c) 
	= (idC_C1_1, c_1);
	

	tel

	until true restart POINTC_C1



	state C1_C1B_IDL:

	 	let

		

	(idC_C1, c) 
	= (idC_C1_1, c_1);
	

	tel

	until true restart POINTC_C1



tel


--***************************************************State :Parallel3_C Automaton***************************************************

node Parallel3_C_node(idParallel3_C_1:int;
	c_1:int;
	idC_C1_1:int;
	y:int;
	T:bool;
	idC_C2_1:int;
	R:bool;
	S:bool)

returns (idParallel3_C:int;
	c:int;
	idC_C1:int;
	idC_C2:int);


let

	 automaton parallel3_c

	state POINTParallel3_C:
	unless (idParallel3_C_1=0) restart POINT__TO__C_C1_1



	unless (idParallel3_C_1=1579) and T restart C_C2__TO__C_C1_1



	unless (idParallel3_C_1=1582) and T restart C_C1__TO__C_C2_1



	unless (idParallel3_C_1=1579) restart C_C2_IDL

	unless (idParallel3_C_1=1582) restart C_C1_IDL

	let

		(idParallel3_C, c, idC_C1, idC_C2) 
	= (idParallel3_C_1, c_1, idC_C1_1, idC_C2_1);
	

	tel



	state POINT__TO__C_C1_1:

	 var 	idParallel3_C_2:int;
	c_2:int;
	idC_C1_2:int;
	let

		-- transition trace :
	--POINT__To__C_C1_1
		(idC_C1_2, idParallel3_C_2, c_2) 
	= C_C1_en(idC_C1_1, idParallel3_C_1, c_1, y, false);
		

	(idParallel3_C, c, idC_C1) 
	=  (idParallel3_C_2, c_2, idC_C1_2);

	--add unused variables
	(idC_C2) 
	= (idC_C2_1);
	

	tel

	until true restart POINTParallel3_C



	state C_C2__TO__C_C1_1:

	 var 	idParallel3_C_2, idParallel3_C_3:int;
	c_2:int;
	idC_C1_2:int;
	idC_C2_2:int;
	let

		-- transition trace :
	--C_C2__To__C_C1_1
		(idC_C2_2, idParallel3_C_2) 
	= C_C2_ex(idC_C2_1, idParallel3_C_1, false);
		

		(idC_C1_2, idParallel3_C_3, c_2) 
	= C_C1_en(idC_C1_1, idParallel3_C_2, c_1, y, false);
		

	(idParallel3_C, c, idC_C1, idC_C2) 
	=  (idParallel3_C_3, c_2, idC_C1_2, idC_C2_2);


	tel

	until true restart POINTParallel3_C



	state C_C1__TO__C_C2_1:

	 var 	idParallel3_C_2, idParallel3_C_3:int;
	c_2:int;
	idC_C1_2:int;
	idC_C2_2:int;
	let

		-- transition trace :
	--C_C1__To__C_C2_1
		(idC_C1_2, idParallel3_C_2) 
	= C_C1_ex(idC_C1_1, idParallel3_C_1, false);
		

		(idC_C2_2, idParallel3_C_3, c_2) 
	= C_C2_en(idC_C2_1, idParallel3_C_2, c_1, y, false);
		

	(idParallel3_C, c, idC_C1, idC_C2) 
	=  (idParallel3_C_3, c_2, idC_C1_2, idC_C2_2);


	tel

	until true restart POINTParallel3_C



	state C_C2_IDL:

	 var 	c_2:int;
	idC_C2_2:int;
	let

		
	(idC_C2_2, c_2) 
	= C_C2_node(idC_C2_1, c_1, y, S, R);

		


	(idParallel3_C, c, idC_C1, idC_C2) 
	= (idParallel3_C_1, c_2, idC_C1_1, idC_C2_2);
	

	tel

	until true restart POINTParallel3_C



	state C_C1_IDL:

	 var 	c_2:int;
	idC_C1_2:int;
	let

		
	(idC_C1_2, c_2) 
	= C_C1_node(idC_C1_1, c_1, y, S, R);

		


	(idParallel3_C, c, idC_C1, idC_C2) 
	= (idParallel3_C_1, c_2, idC_C1_2, idC_C2_1);
	

	tel

	until true restart POINTParallel3_C



tel


--***************************************************State :A_A2 Automaton***************************************************

node A_A2_node(idA_A2_1:int;
	a_1:int;
	x:int;
	S:bool;
	R:bool)

returns (idA_A2:int;
	a:int);


let

	 automaton a_a2

	state POINTA_A2:
	unless (idA_A2_1=0) restart POINT__TO__A2_A2A_1



	unless (idA_A2_1=1569) and S restart A2_A2A__TO__A2_A2B_1



	unless (idA_A2_1=1570) and R restart A2_A2B__TO__A2_A2A_1



	unless (idA_A2_1=1569) restart A2_A2A_IDL

	unless (idA_A2_1=1570) restart A2_A2B_IDL

	let

		(idA_A2, a) 
	= (idA_A2_1, a_1);
	

	tel



	state POINT__TO__A2_A2A_1:

	 var 	idA_A2_2:int;
	a_2:int;
	let

		-- transition trace :
	--POINT__To__A2_A2a_1
		(idA_A2_2, a_2) 
	= A2_A2a_en(idA_A2_1, x, a_1, false);
		

	(idA_A2, a) 
	=  (idA_A2_2, a_2);


	tel

	until true restart POINTA_A2



	state A2_A2A__TO__A2_A2B_1:

	 var 	idA_A2_2, idA_A2_3:int;
	a_2:int;
	let

		-- transition trace :
	--A2_A2a__To__A2_A2b_1
		(idA_A2_2) 
	= A2_A2a_ex(idA_A2_1, false);
		

		(idA_A2_3, a_2) 
	= A2_A2b_en(idA_A2_2, x, a_1, false);
		

	(idA_A2, a) 
	=  (idA_A2_3, a_2);


	tel

	until true restart POINTA_A2



	state A2_A2B__TO__A2_A2A_1:

	 var 	idA_A2_2, idA_A2_3:int;
	a_2:int;
	let

		-- transition trace :
	--A2_A2b__To__A2_A2a_1
		(idA_A2_2) 
	= A2_A2b_ex(idA_A2_1, false);
		

		(idA_A2_3, a_2) 
	= A2_A2a_en(idA_A2_2, x, a_1, false);
		

	(idA_A2, a) 
	=  (idA_A2_3, a_2);


	tel

	until true restart POINTA_A2



	state A2_A2A_IDL:

	 	let

		

	(idA_A2, a) 
	= (idA_A2_1, a_1);
	

	tel

	until true restart POINTA_A2



	state A2_A2B_IDL:

	 	let

		

	(idA_A2, a) 
	= (idA_A2_1, a_1);
	

	tel

	until true restart POINTA_A2



tel


--***************************************************State :A_A1 Automaton***************************************************

node A_A1_node(idA_A1_1:int;
	a_1:int;
	x:int;
	S:bool;
	R:bool)

returns (idA_A1:int;
	a:int);


let

	 automaton a_a1

	state POINTA_A1:
	unless (idA_A1_1=0) restart POINT__TO__A1_A1A_1



	unless (idA_A1_1=1566) and S restart A1_A1A__TO__A1_A1B_1



	unless (idA_A1_1=1567) and R restart A1_A1B__TO__A1_A1A_1



	unless (idA_A1_1=1566) restart A1_A1A_IDL

	unless (idA_A1_1=1567) restart A1_A1B_IDL

	let

		(idA_A1, a) 
	= (idA_A1_1, a_1);
	

	tel



	state POINT__TO__A1_A1A_1:

	 var 	idA_A1_2:int;
	a_2:int;
	let

		-- transition trace :
	--POINT__To__A1_A1a_1
		(idA_A1_2, a_2) 
	= A1_A1a_en(idA_A1_1, x, a_1, false);
		

	(idA_A1, a) 
	=  (idA_A1_2, a_2);


	tel

	until true restart POINTA_A1



	state A1_A1A__TO__A1_A1B_1:

	 var 	idA_A1_2, idA_A1_3:int;
	a_2:int;
	let

		-- transition trace :
	--A1_A1a__To__A1_A1b_1
		(idA_A1_2) 
	= A1_A1a_ex(idA_A1_1, false);
		

		(idA_A1_3, a_2) 
	= A1_A1b_en(idA_A1_2, x, a_1, false);
		

	(idA_A1, a) 
	=  (idA_A1_3, a_2);


	tel

	until true restart POINTA_A1



	state A1_A1B__TO__A1_A1A_1:

	 var 	idA_A1_2, idA_A1_3:int;
	a_2:int;
	let

		-- transition trace :
	--A1_A1b__To__A1_A1a_1
		(idA_A1_2) 
	= A1_A1b_ex(idA_A1_1, false);
		

		(idA_A1_3, a_2) 
	= A1_A1a_en(idA_A1_2, x, a_1, false);
		

	(idA_A1, a) 
	=  (idA_A1_3, a_2);


	tel

	until true restart POINTA_A1



	state A1_A1A_IDL:

	 	let

		

	(idA_A1, a) 
	= (idA_A1_1, a_1);
	

	tel

	until true restart POINTA_A1



	state A1_A1B_IDL:

	 	let

		

	(idA_A1, a) 
	= (idA_A1_1, a_1);
	

	tel

	until true restart POINTA_A1



tel


--***************************************************State :Parallel3_A Automaton***************************************************

node Parallel3_A_node(idParallel3_A_1:int;
	a_1:int;
	idA_A1_1:int;
	x:int;
	T:bool;
	idA_A2_1:int;
	R:bool;
	S:bool)

returns (idParallel3_A:int;
	a:int;
	idA_A1:int;
	idA_A2:int);


let

	 automaton parallel3_a

	state POINTParallel3_A:
	unless (idParallel3_A_1=0) restart POINT__TO__A_A1_1



	unless (idParallel3_A_1=1565) and T restart A_A1__TO__A_A2_1



	unless (idParallel3_A_1=1568) and T restart A_A2__TO__A_A1_1



	unless (idParallel3_A_1=1565) restart A_A1_IDL

	unless (idParallel3_A_1=1568) restart A_A2_IDL

	let

		(idParallel3_A, a, idA_A1, idA_A2) 
	= (idParallel3_A_1, a_1, idA_A1_1, idA_A2_1);
	

	tel



	state POINT__TO__A_A1_1:

	 var 	idParallel3_A_2:int;
	a_2:int;
	idA_A1_2:int;
	let

		-- transition trace :
	--POINT__To__A_A1_1
		(idA_A1_2, idParallel3_A_2, a_2) 
	= A_A1_en(idA_A1_1, idParallel3_A_1, a_1, x, false);
		

	(idParallel3_A, a, idA_A1) 
	=  (idParallel3_A_2, a_2, idA_A1_2);

	--add unused variables
	(idA_A2) 
	= (idA_A2_1);
	

	tel

	until true restart POINTParallel3_A



	state A_A1__TO__A_A2_1:

	 var 	idParallel3_A_2, idParallel3_A_3:int;
	a_2:int;
	idA_A1_2:int;
	idA_A2_2:int;
	let

		-- transition trace :
	--A_A1__To__A_A2_1
		(idA_A1_2, idParallel3_A_2) 
	= A_A1_ex(idA_A1_1, idParallel3_A_1, false);
		

		(idA_A2_2, idParallel3_A_3, a_2) 
	= A_A2_en(idA_A2_1, idParallel3_A_2, a_1, x, false);
		

	(idParallel3_A, a, idA_A1, idA_A2) 
	=  (idParallel3_A_3, a_2, idA_A1_2, idA_A2_2);


	tel

	until true restart POINTParallel3_A



	state A_A2__TO__A_A1_1:

	 var 	idParallel3_A_2, idParallel3_A_3:int;
	a_2:int;
	idA_A1_2:int;
	idA_A2_2:int;
	let

		-- transition trace :
	--A_A2__To__A_A1_1
		(idA_A2_2, idParallel3_A_2) 
	= A_A2_ex(idA_A2_1, idParallel3_A_1, false);
		

		(idA_A1_2, idParallel3_A_3, a_2) 
	= A_A1_en(idA_A1_1, idParallel3_A_2, a_1, x, false);
		

	(idParallel3_A, a, idA_A1, idA_A2) 
	=  (idParallel3_A_3, a_2, idA_A1_2, idA_A2_2);


	tel

	until true restart POINTParallel3_A



	state A_A1_IDL:

	 var 	a_2:int;
	idA_A1_2:int;
	let

		
	(idA_A1_2, a_2) 
	= A_A1_node(idA_A1_1, a_1, x, S, R);

		


	(idParallel3_A, a, idA_A1, idA_A2) 
	= (idParallel3_A_1, a_2, idA_A1_2, idA_A2_1);
	

	tel

	until true restart POINTParallel3_A



	state A_A2_IDL:

	 var 	a_2:int;
	idA_A2_2:int;
	let

		
	(idA_A2_2, a_2) 
	= A_A2_node(idA_A2_1, a_1, x, S, R);

		


	(idParallel3_A, a, idA_A1, idA_A2) 
	= (idParallel3_A_1, a_2, idA_A1_1, idA_A2_2);
	

	tel

	until true restart POINTParallel3_A



tel


--***************************************************State :Parallel3_Parallel3 Automaton***************************************************

node Parallel3_Parallel3_node(idParallel3_Parallel3_1:int;
	a_1:int;
	idA_A1_1:int;
	idA_A2_1:int;
	idParallel3_A_1:int;
	x:int;
	b_1:int;
	idB_B1_1:int;
	idB_B2_1:int;
	idParallel3_B_1:int;
	c_1:int;
	idC_C1_1:int;
	idC_C2_1:int;
	idParallel3_C_1:int;
	y:int;
	dd_1:int;
	idD_D1_1:int;
	idD_D2_1:int;
	idParallel3_D_1:int;
	R:bool;
	S:bool;
	T:bool)

returns (idParallel3_Parallel3:int;
	a:int;
	idA_A1:int;
	idA_A2:int;
	idParallel3_A:int;
	b:int;
	idB_B1:int;
	idB_B2:int;
	idParallel3_B:int;
	c:int;
	idC_C1:int;
	idC_C2:int;
	idParallel3_C:int;
	dd:int;
	idD_D1:int;
	idD_D2:int;
	idParallel3_D:int);


let

	 automaton parallel3_parallel3

	state POINTParallel3_Parallel3:
	unless (idParallel3_Parallel3_1=0) restart PARALLEL3_PARALLEL3_PARALLEL_ENTRY
	unless true  restart PARALLEL3_PARALLEL3_PARALLEL_IDL

	let

		(idParallel3_Parallel3, a, idA_A1, idA_A2, idParallel3_A, b, idB_B1, idB_B2, idParallel3_B, c, idC_C1, idC_C2, idParallel3_C, dd, idD_D1, idD_D2, idParallel3_D) 
	= (idParallel3_Parallel3_1, a_1, idA_A1_1, idA_A2_1, idParallel3_A_1, b_1, idB_B1_1, idB_B2_1, idParallel3_B_1, c_1, idC_C1_1, idC_C2_1, idParallel3_C_1, dd_1, idD_D1_1, idD_D2_1, idParallel3_D_1);
	

	tel



	state PARALLEL3_PARALLEL3_PARALLEL_ENTRY:

	 var 	idParallel3_Parallel3_2, idParallel3_Parallel3_3, idParallel3_Parallel3_4, idParallel3_Parallel3_5:int;
	a_2:int;
	idA_A1_2:int;
	idA_A2_2:int;
	idParallel3_A_2:int;
	b_2:int;
	idB_B1_2:int;
	idB_B2_2:int;
	idParallel3_B_2:int;
	c_2:int;
	idC_C1_2:int;
	idC_C2_2:int;
	idParallel3_C_2:int;
	dd_2:int;
	idD_D1_2:int;
	idD_D2_2:int;
	idParallel3_D_2:int;
	let

		
	(idParallel3_A_2, idParallel3_Parallel3_2, a_2, idA_A1_2, idA_A2_2) 
	= Parallel3_A_en(idParallel3_A_1, idParallel3_Parallel3_1, a_1, idA_A1_1, x, idA_A2_1, false);

	(idParallel3_B_2, idParallel3_Parallel3_3, b_2, idB_B1_2, idB_B2_2) 
	= Parallel3_B_en(idParallel3_B_1, idParallel3_Parallel3_2, b_1, idB_B1_1, x, idB_B2_1, false);

	(idParallel3_C_2, idParallel3_Parallel3_4, c_2, idC_C1_2, idC_C2_2) 
	= Parallel3_C_en(idParallel3_C_1, idParallel3_Parallel3_3, c_1, idC_C1_1, y, idC_C2_1, false);

	(idParallel3_D_2, idParallel3_Parallel3_5, dd_2, idD_D1_2, idD_D2_2) 
	= Parallel3_D_en(idParallel3_D_1, idParallel3_Parallel3_4, dd_1, idD_D1_1, y, idD_D2_1, false);


	(idParallel3_Parallel3, a, idA_A1, idA_A2, idParallel3_A, b, idB_B1, idB_B2, idParallel3_B, c, idC_C1, idC_C2, idParallel3_C, dd, idD_D1, idD_D2, idParallel3_D) 
	= (idParallel3_Parallel3_5, a_2, idA_A1_2, idA_A2_2, idParallel3_A_2, b_2, idB_B1_2, idB_B2_2, idParallel3_B_2, c_2, idC_C1_2, idC_C2_2, idParallel3_C_2, dd_2, idD_D1_2, idD_D2_2, idParallel3_D_2);
	

	tel

	until true restart POINTParallel3_Parallel3



	state PARALLEL3_PARALLEL3_PARALLEL_IDL:

	 var 	a_2:int;
	idA_A1_2:int;
	idA_A2_2:int;
	idParallel3_A_2:int;
	b_2:int;
	idB_B1_2:int;
	idB_B2_2:int;
	idParallel3_B_2:int;
	c_2:int;
	idC_C1_2:int;
	idC_C2_2:int;
	idParallel3_C_2:int;
	dd_2:int;
	idD_D1_2:int;
	idD_D2_2:int;
	idParallel3_D_2:int;
	let

		

		(idParallel3_A_2, a_2, idA_A1_2, idA_A2_2)
	= if not (idParallel3_A_1= 0 ) then Parallel3_A_node(idParallel3_A_1, a_1, idA_A1_1, x, T, idA_A2_1, R, S)

		 else (idParallel3_A_1, a_1, idA_A1_1, idA_A2_1);

		

		

		(idParallel3_B_2, b_2, idB_B1_2, idB_B2_2)
	= if not (idParallel3_B_1= 0 ) then Parallel3_B_node(idParallel3_B_1, b_1, idB_B1_1, x, T, idB_B2_1, R, S)

		 else (idParallel3_B_1, b_1, idB_B1_1, idB_B2_1);

		

		

		(idParallel3_C_2, c_2, idC_C1_2, idC_C2_2)
	= if not (idParallel3_C_1= 0 ) then Parallel3_C_node(idParallel3_C_1, c_1, idC_C1_1, y, T, idC_C2_1, R, S)

		 else (idParallel3_C_1, c_1, idC_C1_1, idC_C2_1);

		

		

		(idParallel3_D_2, dd_2, idD_D1_2, idD_D2_2)
	= if not (idParallel3_D_1= 0 ) then Parallel3_D_node(idParallel3_D_1, dd_1, idD_D1_1, y, T, idD_D2_1, R, S)

		 else (idParallel3_D_1, dd_1, idD_D1_1, idD_D2_1);

		

		

	(idParallel3_Parallel3, a, idA_A1, idA_A2, idParallel3_A, b, idB_B1, idB_B2, idParallel3_B, c, idC_C1, idC_C2, idParallel3_C, dd, idD_D1, idD_D2, idParallel3_D) 
	= (idParallel3_Parallel3_1, a_2, idA_A1_2, idA_A2_2, idParallel3_A_2, b_2, idB_B1_2, idB_B2_2, idParallel3_B_2, c_2, idC_C1_2, idC_C2_2, idParallel3_C_2, dd_2, idD_D1_2, idD_D2_2, idParallel3_D_2);
	

	tel

	until true restart POINTParallel3_Parallel3



tel


--***************************************************State :Parallel3_Parallel3 Automaton***************************************************

node Parallel3_Parallel3(x:int;
	y:int;
	R:bool;
	S:bool;
	T:bool)

returns (a:int;
	b:int;
	dd:int;
	c:int);


var a_1: int;

	b_1: int;

	dd_1: int;

	c_1: int;

	idParallel3_Parallel3, idParallel3_Parallel3_1: int;

	idB_B2, idB_B2_1: int;

	idB_B1, idB_B1_1: int;

	idParallel3_B, idParallel3_B_1: int;

	idD_D2, idD_D2_1: int;

	idD_D1, idD_D1_1: int;

	idParallel3_D, idParallel3_D_1: int;

	idC_C2, idC_C2_1: int;

	idC_C1, idC_C1_1: int;

	idParallel3_C, idParallel3_C_1: int;

	idA_A2, idA_A2_1: int;

	idA_A1, idA_A1_1: int;

	idParallel3_A, idParallel3_A_1: int;

		idParallel3_Parallel3_2, idParallel3_Parallel3_3:int;
	a_2, a_3:int;
	idA_A1_2, idA_A1_3:int;
	idA_A2_2, idA_A2_3:int;
	idParallel3_A_2, idParallel3_A_3:int;
	b_2, b_3:int;
	idB_B1_2, idB_B1_3:int;
	idB_B2_2, idB_B2_3:int;
	idParallel3_B_2, idParallel3_B_3:int;
	c_2, c_3:int;
	idC_C1_2, idC_C1_3:int;
	idC_C2_2, idC_C2_3:int;
	idParallel3_C_2, idParallel3_C_3:int;
	dd_2, dd_3:int;
	idD_D1_2, idD_D1_3:int;
	idD_D2_2, idD_D2_3:int;
	idParallel3_D_2, idParallel3_D_3:int;
let

	a_1 = 0 -> pre a;

	b_1 = 0 -> pre b;

	dd_1 = 0 -> pre dd;

	c_1 = 0 -> pre c;

	idParallel3_Parallel3_1 = 0 -> pre idParallel3_Parallel3;

	idB_B2_1 = 0 -> pre idB_B2;

	idB_B1_1 = 0 -> pre idB_B1;

	idParallel3_B_1 = 0 -> pre idParallel3_B;

	idD_D2_1 = 0 -> pre idD_D2;

	idD_D1_1 = 0 -> pre idD_D1;

	idParallel3_D_1 = 0 -> pre idParallel3_D;

	idC_C2_1 = 0 -> pre idC_C2;

	idC_C1_1 = 0 -> pre idC_C1;

	idParallel3_C_1 = 0 -> pre idParallel3_C;

	idA_A2_1 = 0 -> pre idA_A2;

	idA_A1_1 = 0 -> pre idA_A1;

	idParallel3_A_1 = 0 -> pre idParallel3_A;

	



	(idParallel3_Parallel3_2, a_2, idA_A1_2, idA_A2_2, idParallel3_A_2, b_2, idB_B1_2, idB_B2_2, idParallel3_B_2, c_2, idC_C1_2, idC_C2_2, idParallel3_C_2, dd_2, idD_D1_2, idD_D2_2, idParallel3_D_2)
	 = 

	 if R then Parallel3_Parallel3_node(idParallel3_Parallel3_1, a_1, idA_A1_1, idA_A2_1, idParallel3_A_1, x, b_1, idB_B1_1, idB_B2_1, idParallel3_B_1, c_1, idC_C1_1, idC_C2_1, idParallel3_C_1, y, dd_1, idD_D1_1, idD_D2_1, idParallel3_D_1, R, false, false)

	 else (idParallel3_Parallel3_1, a_1, idA_A1_1, idA_A2_1, idParallel3_A_1, b_1, idB_B1_1, idB_B2_1, idParallel3_B_1, c_1, idC_C1_1, idC_C2_1, idParallel3_C_1, dd_1, idD_D1_1, idD_D2_1, idParallel3_D_1);

	



	(idParallel3_Parallel3_3, a_3, idA_A1_3, idA_A2_3, idParallel3_A_3, b_3, idB_B1_3, idB_B2_3, idParallel3_B_3, c_3, idC_C1_3, idC_C2_3, idParallel3_C_3, dd_3, idD_D1_3, idD_D2_3, idParallel3_D_3)
	 = 

	 if S then Parallel3_Parallel3_node(idParallel3_Parallel3_2, a_2, idA_A1_2, idA_A2_2, idParallel3_A_2, x, b_2, idB_B1_2, idB_B2_2, idParallel3_B_2, c_2, idC_C1_2, idC_C2_2, idParallel3_C_2, y, dd_2, idD_D1_2, idD_D2_2, idParallel3_D_2, false, S, false)

	 else (idParallel3_Parallel3_2, a_2, idA_A1_2, idA_A2_2, idParallel3_A_2, b_2, idB_B1_2, idB_B2_2, idParallel3_B_2, c_2, idC_C1_2, idC_C2_2, idParallel3_C_2, dd_2, idD_D1_2, idD_D2_2, idParallel3_D_2);

	



	(idParallel3_Parallel3, a, idA_A1, idA_A2, idParallel3_A, b, idB_B1, idB_B2, idParallel3_B, c, idC_C1, idC_C2, idParallel3_C, dd, idD_D1, idD_D2, idParallel3_D)
	 = 

	 if T then Parallel3_Parallel3_node(idParallel3_Parallel3_3, a_3, idA_A1_3, idA_A2_3, idParallel3_A_3, x, b_3, idB_B1_3, idB_B2_3, idParallel3_B_3, c_3, idC_C1_3, idC_C2_3, idParallel3_C_3, y, dd_3, idD_D1_3, idD_D2_3, idParallel3_D_3, false, false, T)

	 else (idParallel3_Parallel3_3, a_3, idA_A1_3, idA_A2_3, idParallel3_A_3, b_3, idB_B1_3, idB_B2_3, idParallel3_B_3, c_3, idC_C1_3, idC_C2_3, idParallel3_C_3, dd_3, idD_D1_3, idD_D2_3, idParallel3_D_3);

	


--unused outputs
	

tel



node Parallel3 (x_1_1 : int; R_1_1 : real; y_1_1 : int; S_1_1 : real; T_1_1 : real)
returns (a_1_1 : int;
	b_2_1 : int;
	dd_3_1 : int;
	c_4_1 : int); 
var
	Mux_1_1 : real; Mux_1_2 : real; Mux_1_3 : real;
	Parallel3_1_1 : int; Parallel3_2_1 : int; Parallel3_3_1 : int; Parallel3_4_1 : int;
	Mux_1_1_event: bool;
	Mux_1_2_event: bool;
	Mux_1_3_event: bool;
let 
	Mux_1_1 = R_1_1 ;
	Mux_1_2 = S_1_1 ;
	Mux_1_3 = T_1_1 ;
	Mux_1_1_event = false -> ((pre(Mux_1_1) > 0.0 and Mux_1_1 <= 0.0) or (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0));
	Mux_1_2_event = false -> ((pre(Mux_1_2) > 0.0 and Mux_1_2 <= 0.0) or (pre(Mux_1_2) <= 0.0 and Mux_1_2 > 0.0));
	Mux_1_3_event = false -> ((pre(Mux_1_3) > 0.0 and Mux_1_3 <= 0.0) or (pre(Mux_1_3) <= 0.0 and Mux_1_3 > 0.0));
	(Parallel3_1_1, Parallel3_2_1, Parallel3_3_1, Parallel3_4_1) =  Parallel3_Parallel3(x_1_1, y_1_1, Mux_1_1_event, Mux_1_2_event, Mux_1_3_event);
	a_1_1 = Parallel3_1_1;
	b_2_1 = Parallel3_2_1;
	dd_3_1 = Parallel3_3_1;
	c_4_1 = Parallel3_4_1;
tel

