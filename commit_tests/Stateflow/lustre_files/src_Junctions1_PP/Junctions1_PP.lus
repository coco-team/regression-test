-- This file has been generated by CoCoSim


-- System nodes




node Chart_Chart490Junction498__To__Chart_C492_2_Condition_Action(y_1:int;
	z_1:int)

returns (y:int;
	z:int);


var 	y_2:int;
	z_2:int;


let



	y_2 
	=  y_1  + 1;
	

	z_2 
	=  z_1  + 1;
	

	(y, z) 
	= (y_2, z_2);
	

tel








node Chart_Chart490Junction498__To__Chart_B493_1_Condition_Action(y_1:int;
	z_1:int)

returns (y:int;
	z:int);


var 	y_2:int;
	z_2:int;


let



	y_2 
	=  y_1 +2;
	

	z_2 
	=  z_1  + 1;
	

	(y, z) 
	= (y_2, z_2);
	

tel






node Chart_A491__To__Chart_Chart490Junction498_1_Condition_Action(y_1:int;
	z_1:int)

returns (y:int;
	z:int);


var 	y_2:int;
	z_2:int;


let



	y_2 
	=  y_1  + 1;
	

	z_2 
	=  z_1 +2;
	

	(y, z) 
	= (y_2, z_2);
	

tel







-- Entry action for state :Chart_B493
node Chart_B493_en(idChart_Chart490_1:int;
	isInner:bool)

returns (idChart_Chart490:int);


var 	idChart_Chart490_2:int;


let



	-- set state as active 
	idChart_Chart490_2 
	= 493;
	

	(idChart_Chart490) 
	= (idChart_Chart490_2);
	

tel





-- Exit action for state :Chart_B493
node Chart_B493_ex(idChart_Chart490_1:int;
	isInner:bool)

returns (idChart_Chart490:int);


var 	idChart_Chart490_2:int;


let



	-- set state as inactive 
	idChart_Chart490_2
	 = if (not isInner) then 0 else idChart_Chart490_1;


	(idChart_Chart490) 
	= (idChart_Chart490_1);
	

tel






-- Exit action for state :Chart_A491
node Chart_A491_ex(y_1:int;
	idChart_Chart490_1:int;
	isInner:bool)

returns (y:int;
	idChart_Chart490:int);


var 	y_2:int;
	idChart_Chart490_2:int;


let



	y_2 
	= if (not isInner) then  y_1 *2
	 else y_1;
	

	-- set state as inactive 
	idChart_Chart490_2
	 = if (not isInner) then 0 else idChart_Chart490_1;


	(y, idChart_Chart490) 
	= (y_2, idChart_Chart490_1);
	

tel





-- Entry action for state :Chart_A491
node Chart_A491_en(idChart_Chart490_1:int;
	isInner:bool)

returns (idChart_Chart490:int);


var 	idChart_Chart490_2:int;


let



	-- set state as active 
	idChart_Chart490_2 
	= 491;
	

	(idChart_Chart490) 
	= (idChart_Chart490_2);
	

tel






-- Entry action for state :Chart_C492
node Chart_C492_en(idChart_Chart490_1:int;
	isInner:bool)

returns (idChart_Chart490:int);


var 	idChart_Chart490_2:int;


let



	-- set state as active 
	idChart_Chart490_2 
	= 492;
	

	(idChart_Chart490) 
	= (idChart_Chart490_2);
	

tel





-- Exit action for state :Chart_C492
node Chart_C492_ex(idChart_Chart490_1:int;
	isInner:bool)

returns (idChart_Chart490:int);


var 	idChart_Chart490_2:int;


let



	-- set state as inactive 
	idChart_Chart490_2
	 = if (not isInner) then 0 else idChart_Chart490_1;


	(idChart_Chart490) 
	= (idChart_Chart490_1);
	

tel


--***************************************************State :Chart_Chart490 Automaton***************************************************

node Chart_Chart490_node(idChart_Chart490_1:int;
	E1:bool;
	x:int;
	y_1:int;
	z_1:int)

returns (idChart_Chart490:int;
	y:int;
	z:int);


let

	 automaton chart_chart490

	state POINTChart_Chart490:
	unless (idChart_Chart490_1=0) restart POINT__TO__CHART_A491_1



	unless (idChart_Chart490_1=491) and E1 and ( x>0 ) restart CHART_A491__TO__CHART_CHART490JUNCTION498_1



	unless (idChart_Chart490_1=492) and ( x>3 ) restart CHART_C492__TO__CHART_A491_1



	unless (idChart_Chart490_1=493) and ( x>3 ) restart CHART_B493__TO__CHART_A491_1



	unless (idChart_Chart490_1=491) restart CHART_A491_IDL

	unless (idChart_Chart490_1=492) restart CHART_C492_IDL

	unless (idChart_Chart490_1=493) restart CHART_B493_IDL

	let

		(idChart_Chart490, y, z) 
	= (idChart_Chart490_1, y_1, z_1);
	

	tel



	state POINT__TO__CHART_A491_1:

	 var 	idChart_Chart490_2:int;
	let

		-- transition trace :
	--POINT__To__Chart_A491_1
		(idChart_Chart490_2) 
	= Chart_A491_en(idChart_Chart490_1, false);
		

	(idChart_Chart490) 
	=  (idChart_Chart490_2);

	--add unused variables
	(y, z) 
	= (y_1, z_1);
	

	tel

	until true restart POINTChart_Chart490



	state CHART_A491__TO__CHART_CHART490JUNCTION498_1:

	 var 	idChart_Chart490_2, idChart_Chart490_3, idChart_Chart490_4, idChart_Chart490_5:int;
	y_2, y_3, y_4, y_5, y_6, y_7:int;
	z_2, z_3, z_4, z_5:int;
	let

		

-- transition trace :
	--Chart_A491__To__Junction498_1, Junction498__To__Chart_B493_1
		-- condition Action : y++;z+=2
		
		(y_2, z_2) 
	= Chart_A491__To__Chart_Chart490Junction498_1_Condition_Action(y_1, z_1);
		

		-- condition Action : y+=2;z++
		
		(y_3, z_3) 
	= 
		 if (( x>=2 )) then 
		Chart_Chart490Junction498__To__Chart_B493_1_Condition_Action(y_2, z_2)
		 else (y_2, z_2);
		

		(y_4, idChart_Chart490_2) 
	= 
		 if (( x>=2 )) then 
		Chart_A491_ex(y_3, idChart_Chart490_1, false)
		 else (y_3, idChart_Chart490_1);
		

		(idChart_Chart490_3) 
	= 
		 if (( x>=2 )) then 
		Chart_B493_en(idChart_Chart490_2, false)
		 else (idChart_Chart490_2);
		


-- transition trace :
	--Chart_A491__To__Junction498_1, Junction498__To__Chart_C492_2
		-- condition Action : y++;z+=2
		
		(y_5, z_4) 
	= Chart_A491__To__Chart_Chart490Junction498_1_Condition_Action(y_1, z_1);
		

		-- condition Action : y++;z++
		
		(y_6, z_5) 
	= 
		 if (( x<2 )) then 
		Chart_Chart490Junction498__To__Chart_C492_2_Condition_Action(y_5, z_4)
		 else (y_5, z_4);
		

		(y_7, idChart_Chart490_4) 
	= 
		 if (( x<2 )) then 
		Chart_A491_ex(y_6, idChart_Chart490_1, false)
		 else (y_6, idChart_Chart490_1);
		

		(idChart_Chart490_5) 
	= 
		 if (( x<2 )) then 
		Chart_C492_en(idChart_Chart490_4, false)
		 else (idChart_Chart490_4);
		

	(idChart_Chart490, y, z) 
	= 
		 if (( x>=2 )) then 
		(idChart_Chart490_3, y_4, z_3)
		 else
		 if (( x<2 )) then 
		(idChart_Chart490_5, y_7, z_5)
		 else (idChart_Chart490_1, y_5, z_4);


	tel

	until true restart POINTChart_Chart490



	state CHART_C492__TO__CHART_A491_1:

	 var 	idChart_Chart490_2, idChart_Chart490_3:int;
	let

		-- transition trace :
	--Chart_C492__To__Chart_A491_1
		(idChart_Chart490_2) 
	= Chart_C492_ex(idChart_Chart490_1, false);
		

		(idChart_Chart490_3) 
	= Chart_A491_en(idChart_Chart490_2, false);
		

	(idChart_Chart490, y, z) 
	=  (idChart_Chart490_3, y_1, z_1);


	tel

	until true restart POINTChart_Chart490



	state CHART_B493__TO__CHART_A491_1:

	 var 	idChart_Chart490_2, idChart_Chart490_3:int;
	let

		-- transition trace :
	--Chart_B493__To__Chart_A491_1
		(idChart_Chart490_2) 
	= Chart_B493_ex(idChart_Chart490_1, false);
		

		(idChart_Chart490_3) 
	= Chart_A491_en(idChart_Chart490_2, false);
		

	(idChart_Chart490, y, z) 
	=  (idChart_Chart490_3, y_1, z_1);


	tel

	until true restart POINTChart_Chart490



	state CHART_A491_IDL:

	 	let

		

	(idChart_Chart490, y, z) 
	= (idChart_Chart490_1, y_1, z_1);
	

	tel

	until true restart POINTChart_Chart490



	state CHART_C492_IDL:

	 	let

		

	(idChart_Chart490, y, z) 
	= (idChart_Chart490_1, y_1, z_1);
	

	tel

	until true restart POINTChart_Chart490



	state CHART_B493_IDL:

	 	let

		

	(idChart_Chart490, y, z) 
	= (idChart_Chart490_1, y_1, z_1);
	

	tel

	until true restart POINTChart_Chart490



tel


--***************************************************State :Chart_Chart490 Automaton***************************************************

node Junctions1_PP_Chart(x:int;
	E1:bool)

returns (y:int;
	z:int);


var y_1: int;

	z_1: int;

	idChart_Chart490, idChart_Chart490_1: int;

	let

	y_1 = 1 -> pre y;

	z_1 = 2 -> pre z;

	idChart_Chart490_1 = 0 -> pre idChart_Chart490;

	



	(idChart_Chart490, y, z)
	 = 

	 if E1 then Chart_Chart490_node(idChart_Chart490_1, E1, x, y_1, z_1)

	 else (idChart_Chart490_1, y_1, z_1);

	


--unused outputs
	

tel



node Junctions1_PP (x_1_1 : int; E1_1_1 : real)
returns (y_1_1 : int;
	z_2_1 : int); 
var
	Chart_1_1 : int; Chart_2_1 : int;
	i_virtual_local : real;
	ChartE1_1_1_event: bool;
let 
	ChartE1_1_1_event = false -> ((pre(E1_1_1) > 0.0 and E1_1_1 <= 0.0) or (pre(E1_1_1) <= 0.0 and E1_1_1 > 0.0));
	(Chart_1_1, Chart_2_1) =  Junctions1_PP_Chart(x_1_1, ChartE1_1_1_event);
	y_1_1 = Chart_1_1;
	z_2_1 = Chart_2_1;
	i_virtual_local= 0.0 -> 1.0;
tel

