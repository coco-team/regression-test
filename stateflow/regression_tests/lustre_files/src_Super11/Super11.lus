-- This file has been generated by cocoSim


-- System nodes














--During action for state :B2_B2a
node B2_B2a_du(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel





-- Entry action for state :B2_B2a
node B2_B2a_en(idB_B2_1:int;
	isInner:bool)

returns (idB_B2:int);


var 	idB_B2_2:int;


let



	-- set state as active 
	idB_B2_2 
	= 784;
	

	(idB_B2) 
	= (idB_B2_2);
	

tel





-- Exit action for state :B2_B2a
node B2_B2a_ex(idB_B2_1:int;
	isInner:bool)

returns (idB_B2:int);


var 	idB_B2_2:int;


let



	-- set state as inactive 
	idB_B2_2
	 = if (not isInner) then 0 else idB_B2_1;


	(idB_B2) 
	= (idB_B2_1);
	

tel






--During action for state :B_B2
node B_B2_du(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel





-- Entry action for state :B_B2
node B_B2_en(idB_B2_1:int;
	idSuper11_B_1:int;
	isInner:bool)

returns (idB_B2:int;
	idSuper11_B:int);


var 	idB_B2_2, idB_B2_3, idB_B2_4, idB_B2_5:int;
	idSuper11_B_2, idSuper11_B_3, idSuper11_B_4:int;


let



	-- set state as active 
	idSuper11_B_2 
	= 783;
	

	
-- transition trace :
	--POINT__To__B2_B2a_1
		(idB_B2_2) 
	= B2_B2a_en(idB_B2_1, false);
		

	(idB_B2_3, idSuper11_B_3) 
	= 

	if ( idB_B2_1 = 0) then

	 (idB_B2_2, idSuper11_B_2)

	 else(idB_B2_1, idSuper11_B_2);

	

	(idB_B2_4) 
	= 
	if ( idB_B2_1 = 784) then
	B2_B2a_en(idB_B2_1, false)
	 else (idB_B2_1);

	

	(idB_B2_5, idSuper11_B_4) 
	= 
		 if ( idB_B2_1 = 0) then 
		(idB_B2_3, idSuper11_B_3)
		 else
		 if ( idB_B2_1 = 784) then 
		(idB_B2_4, idSuper11_B_3)
		 else (idB_B2_1, idSuper11_B_2);


	(idB_B2, idSuper11_B) 
	= (idB_B2_5, idSuper11_B_4);
	

tel





-- Exit action for state :B_B2
node B_B2_ex(idB_B2_1:int;
	idSuper11_B_1:int;
	isInner:bool)

returns (idB_B2:int;
	idSuper11_B:int);


var 	idB_B2_2, idB_B2_3, idB_B2_4:int;
	idSuper11_B_2:int;


let



	
	(idB_B2_2) 
	= 
	if ( idB_B2_1 = 784) then
	B2_B2a_ex(idB_B2_1, false)
	 else (idB_B2_1);

	

	(idB_B2_3) 
	= 
		 if ( idB_B2_1 = 784) then 
		(idB_B2_2)
		 else (idB_B2_1);


	-- set state as inactive 
	idSuper11_B_2
	 = if (not isInner) then 0 else idSuper11_B_1;

	idB_B2_4 
	= 0;
	

	(idB_B2, idSuper11_B) 
	= (idB_B2_4, idSuper11_B_1);
	

tel






--During action for state :B_B1
node B_B1_du(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel





-- Entry action for state :B_B1
node B_B1_en(idSuper11_B_1:int;
	isInner:bool)

returns (idSuper11_B:int);


var 	idSuper11_B_2:int;


let



	-- set state as active 
	idSuper11_B_2 
	= 782;
	

	(idSuper11_B) 
	= (idSuper11_B_2);
	

tel





-- Exit action for state :B_B1
node B_B1_ex(idSuper11_B_1:int;
	isInner:bool)

returns (idSuper11_B:int);


var 	idSuper11_B_2:int;


let



	-- set state as inactive 
	idSuper11_B_2
	 = if (not isInner) then 0 else idSuper11_B_1;


	(idSuper11_B) 
	= (idSuper11_B_1);
	

tel






--During action for state :Super11_B
node Super11_B_du(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel





-- Entry action for state :Super11_B
node Super11_B_en(idSuper11_B_1:int;
	idSuper11_Super11_1:int;
	idB_B2_1:int;
	isInner:bool)

returns (idSuper11_B:int;
	idSuper11_Super11:int;
	idB_B2:int);


var 	idSuper11_B_2, idSuper11_B_3, idSuper11_B_4, idSuper11_B_5, idSuper11_B_6:int;
	idSuper11_Super11_2, idSuper11_Super11_3, idSuper11_Super11_4:int;
	idB_B2_2, idB_B2_3:int;


let



	-- set state as active 
	idSuper11_Super11_2 
	= 781;
	

	
-- transition trace :
	--POINT__To__B_B1_1
		(idSuper11_B_2) 
	= B_B1_en(idSuper11_B_1, false);
		

	(idSuper11_B_3, idSuper11_Super11_3) 
	= 

	if ( idSuper11_B_1 = 0) then

	 (idSuper11_B_2, idSuper11_Super11_2)

	 else(idSuper11_B_1, idSuper11_Super11_2);

	

	(idSuper11_B_4) 
	= 
	if ( idSuper11_B_1 = 782) then
	B_B1_en(idSuper11_B_1, false)
	 else (idSuper11_B_1);

	

	(idB_B2_2, idSuper11_B_5) 
	= 
	if ( idSuper11_B_1 = 783) then
	B_B2_en(idB_B2_1, idSuper11_B_1, false)
	 else (idB_B2_1, idSuper11_B_1);

	

	(idSuper11_B_6, idSuper11_Super11_4, idB_B2_3) 
	= 
		 if ( idSuper11_B_1 = 0) then 
		(idSuper11_B_3, idSuper11_Super11_3, idB_B2_1)
		 else
		 if ( idSuper11_B_1 = 782) then 
		(idSuper11_B_4, idSuper11_Super11_3, idB_B2_1)
		 else
		 if ( idSuper11_B_1 = 783) then 
		(idSuper11_B_5, idSuper11_Super11_3, idB_B2_2)
		 else (idSuper11_B_1, idSuper11_Super11_2, idB_B2_1);


	(idSuper11_B, idSuper11_Super11, idB_B2) 
	= (idSuper11_B_6, idSuper11_Super11_4, idB_B2_3);
	

tel





-- Exit action for state :Super11_B
node Super11_B_ex(idSuper11_B_1:int;
	idB_B2_1:int;
	idSuper11_Super11_1:int;
	isInner:bool)

returns (idSuper11_B:int;
	idB_B2:int;
	idSuper11_Super11:int);


var 	idSuper11_B_2, idSuper11_B_3, idSuper11_B_4, idSuper11_B_5:int;
	idB_B2_2, idB_B2_3:int;
	idSuper11_Super11_2:int;


let



	
	(idSuper11_B_2) 
	= 
	if ( idSuper11_B_1 = 782) then
	B_B1_ex(idSuper11_B_1, false)
	 else (idSuper11_B_1);

	

	(idB_B2_2, idSuper11_B_3) 
	= 
	if ( idSuper11_B_1 = 783) then
	B_B2_ex(idB_B2_1, idSuper11_B_1, false)
	 else (idB_B2_1, idSuper11_B_1);

	

	(idSuper11_B_4, idB_B2_3) 
	= 
		 if ( idSuper11_B_1 = 782) then 
		(idSuper11_B_2, idB_B2_1)
		 else
		 if ( idSuper11_B_1 = 783) then 
		(idSuper11_B_3, idB_B2_2)
		 else (idSuper11_B_1, idB_B2_1);


	-- set state as inactive 
	idSuper11_Super11_2
	 = if (not isInner) then 0 else idSuper11_Super11_1;

	idSuper11_B_5 
	= 0;
	

	(idSuper11_B, idB_B2, idSuper11_Super11) 
	= (idSuper11_B_5, idB_B2_3, idSuper11_Super11_1);
	

tel






--During action for state :Super11_A
node Super11_A_du(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel





-- Entry action for state :Super11_A
node Super11_A_en(idSuper11_Super11_1:int;
	isInner:bool)

returns (idSuper11_Super11:int);


var 	idSuper11_Super11_2:int;


let



	-- set state as active 
	idSuper11_Super11_2 
	= 780;
	

	(idSuper11_Super11) 
	= (idSuper11_Super11_2);
	

tel





-- Exit action for state :Super11_A
node Super11_A_ex(idSuper11_Super11_1:int;
	isInner:bool)

returns (idSuper11_Super11:int);


var 	idSuper11_Super11_2:int;


let



	-- set state as inactive 
	idSuper11_Super11_2
	 = if (not isInner) then 0 else idSuper11_Super11_1;


	(idSuper11_Super11) 
	= (idSuper11_Super11_1);
	

tel


--***************************************************State :B_B2 Automaton***************************************************

node B_B2_node(idB_B2_1:int;
	E:bool;
	x:int;
	idSuper11_B_1:int;
	idSuper11_Super11_1:int;
	y_1:int)

returns (idB_B2:int;
	idSuper11_B:int;
	idSuper11_Super11:int;
	y:int);


let

	 automaton b_b2

	state POINTB_B2:
	unless (idB_B2_1=0) restart POINT__TO__B2_B2A_1



	unless (idB_B2_1=784) and E restart B2_B2A__TO__SUPER11_SUPER11JUNCTION788_1



	unless (idB_B2_1=784) restart B2_B2A_IDL

	let

		(idB_B2, idSuper11_B, idSuper11_Super11, y) 
	= (idB_B2_1, idSuper11_B_1, idSuper11_Super11_1, y_1);
	

	tel



	state POINT__TO__B2_B2A_1:

	 var 	idB_B2_2:int;
	let

		-- transition trace :
	--POINT__To__B2_B2a_1
		(idB_B2_2) 
	= B2_B2a_en(idB_B2_1, false);
		

	(idB_B2) 
	=  (idB_B2_2);

	--add unused variables
	(idSuper11_B, idSuper11_Super11, y) 
	= (idSuper11_B_1, idSuper11_Super11_1, y_1);
	

	tel

	until true restart POINTB_B2



	state B2_B2A__TO__SUPER11_SUPER11JUNCTION788_1:

	 var 	idB_B2_2, idB_B2_3:int;
	idSuper11_B_2, idSuper11_B_3, idSuper11_B_4:int;
	idSuper11_Super11_2, idSuper11_Super11_3:int;
	let

		

-- transition trace :
	--B2_B2a__To__Junction788_1, Junction788__To__Super11_A_1
		(idSuper11_B_2, idB_B2_2, idSuper11_Super11_2) 
	= 
		 if (( x=0 )) then 
		Super11_B_ex(idSuper11_B_1, idB_B2_1, idSuper11_Super11_1, false)
		 else (idSuper11_B_1, idB_B2_1, idSuper11_Super11_1);
		

		(idSuper11_Super11_3) 
	= 
		 if (( x=0 )) then 
		Super11_A_en(idSuper11_Super11_2, false)
		 else (idSuper11_Super11_2);
		


-- transition trace :
	--B2_B2a__To__Junction788_1, Junction788__To__B_B1_2
		(idB_B2_3, idSuper11_B_3) 
	= 
		 if (( x!=0 )) then 
		B_B2_ex(idB_B2_1, idSuper11_B_1, false)
		 else (idB_B2_1, idSuper11_B_1);
		

		(idSuper11_B_4) 
	= 
		 if (( x!=0 )) then 
		B_B1_en(idSuper11_B_3, false)
		 else (idSuper11_B_3);
		

	(idB_B2, idSuper11_B, idSuper11_Super11) 
	= 
		 if (( x=0 )) then 
		(idB_B2_2, idSuper11_B_2, idSuper11_Super11_3)
		 else
		 if (( x!=0 )) then 
		(idB_B2_3, idSuper11_B_4, idSuper11_Super11_1)
		 else (idB_B2_1, idSuper11_B_1, idSuper11_Super11_1);

	--add unused variables
	(y) 
	= (y_1);
	

	tel

	until true restart POINTB_B2



	state B2_B2A_IDL:

	 var 	y_2:int;
	let

		
	(y_2) 
	= B2_B2a_du(y_1);

		


	(idB_B2, idSuper11_B, idSuper11_Super11, y) 
	= (idB_B2_1, idSuper11_B_1, idSuper11_Super11_1, y_2);
	

	tel

	until true restart POINTB_B2



tel


--***************************************************State :Super11_B Automaton***************************************************

node Super11_B_node(idSuper11_B_1:int;
	E:bool;
	idB_B2_1:int;
	y_1:int;
	idSuper11_Super11_1:int;
	x:int)

returns (idSuper11_B:int;
	idB_B2:int;
	y:int;
	idSuper11_Super11:int);


let

	 automaton super11_b

	state POINTSuper11_B:
	unless (idSuper11_B_1=0) restart POINT__TO__B_B1_1



	unless (idSuper11_B_1=782) and E restart B_B1__TO__B_B2_1



	unless (idSuper11_B_1=782) restart B_B1_IDL

	unless (idSuper11_B_1=783) restart B_B2_IDL

	let

		(idSuper11_B, idB_B2, y, idSuper11_Super11) 
	= (idSuper11_B_1, idB_B2_1, y_1, idSuper11_Super11_1);
	

	tel



	state POINT__TO__B_B1_1:

	 var 	idSuper11_B_2:int;
	let

		-- transition trace :
	--POINT__To__B_B1_1
		(idSuper11_B_2) 
	= B_B1_en(idSuper11_B_1, false);
		

	(idSuper11_B) 
	=  (idSuper11_B_2);

	--add unused variables
	(idB_B2, idSuper11_Super11, y) 
	= (idB_B2_1, idSuper11_Super11_1, y_1);
	

	tel

	until true restart POINTSuper11_B



	state B_B1__TO__B_B2_1:

	 var 	idSuper11_B_2, idSuper11_B_3:int;
	idB_B2_2:int;
	let

		-- transition trace :
	--B_B1__To__B_B2_1
		(idSuper11_B_2) 
	= B_B1_ex(idSuper11_B_1, false);
		

		(idB_B2_2, idSuper11_B_3) 
	= B_B2_en(idB_B2_1, idSuper11_B_2, false);
		

	(idSuper11_B, idB_B2) 
	=  (idSuper11_B_3, idB_B2_2);

	--add unused variables
	(idSuper11_Super11, y) 
	= (idSuper11_Super11_1, y_1);
	

	tel

	until true restart POINTSuper11_B



	state B_B1_IDL:

	 var 	y_2:int;
	let

		
	(y_2) 
	= B_B1_du(y_1);

		


	(idSuper11_B, idB_B2, y) 
	= (idSuper11_B_1, idB_B2_1, y_2);
	
	--add unused variables
	(idSuper11_Super11) 
	= (idSuper11_Super11_1);
	

	tel

	until true restart POINTSuper11_B



	state B_B2_IDL:

	 var 	idSuper11_B_2:int;
	idB_B2_2:int;
	y_2, y_3:int;
	idSuper11_Super11_2:int;
	let

		
	(y_2) 
	= B_B2_du(y_1);

		

	(idB_B2_2, idSuper11_B_2, idSuper11_Super11_2, y_3) 
	= B_B2_node(idB_B2_1, E, x, idSuper11_B_1, idSuper11_Super11_1, y_2);

		


	(idSuper11_B, idB_B2, y, idSuper11_Super11) 
	= (idSuper11_B_2, idB_B2_2, y_3, idSuper11_Super11_2);
	

	tel

	until true restart POINTSuper11_B



tel


--***************************************************State :Super11_Super11 Automaton***************************************************

node Super11_Super11_node(idSuper11_Super11_1:int;
	E:bool;
	x:int;
	idB_B2_1:int;
	idSuper11_B_1:int;
	y_1:int)

returns (idSuper11_Super11:int;
	idB_B2:int;
	idSuper11_B:int;
	y:int);


let

	 automaton super11_super11

	state POINTSuper11_Super11:
	unless (idSuper11_Super11_1=0) restart POINT__TO__SUPER11_A_1



	unless (idSuper11_Super11_1=780) and E restart SUPER11_A__TO__SUPER11_SUPER11JUNCTION794_1



	unless (idSuper11_Super11_1=780) restart SUPER11_A_IDL

	unless (idSuper11_Super11_1=781) restart SUPER11_B_IDL

	let

		(idSuper11_Super11, idB_B2, idSuper11_B, y) 
	= (idSuper11_Super11_1, idB_B2_1, idSuper11_B_1, y_1);
	

	tel



	state POINT__TO__SUPER11_A_1:

	 var 	idSuper11_Super11_2:int;
	let

		-- transition trace :
	--POINT__To__Super11_A_1
		(idSuper11_Super11_2) 
	= Super11_A_en(idSuper11_Super11_1, false);
		

	(idSuper11_Super11) 
	=  (idSuper11_Super11_2);

	--add unused variables
	(idB_B2, idSuper11_B, y) 
	= (idB_B2_1, idSuper11_B_1, y_1);
	

	tel

	until true restart POINTSuper11_Super11



	state SUPER11_A__TO__SUPER11_SUPER11JUNCTION794_1:

	 var 	idSuper11_Super11_2, idSuper11_Super11_3, idSuper11_Super11_4, idSuper11_Super11_5:int;
	idB_B2_2, idB_B2_3, idB_B2_4:int;
	idSuper11_B_2, idSuper11_B_3, idSuper11_B_4:int;
	let

		

-- transition trace :
	--Super11_A__To__Junction794_1, Junction794__To__Super11_B_1
		(idSuper11_Super11_2) 
	= 
		 if (( x=0 )) then 
		Super11_A_ex(idSuper11_Super11_1, false)
		 else (idSuper11_Super11_1);
		

		(idSuper11_B_2, idSuper11_Super11_3, idB_B2_2) 
	= 
		 if (( x=0 )) then 
		Super11_B_en(idSuper11_B_1, idSuper11_Super11_2, idB_B2_1, false)
		 else (idSuper11_B_1, idSuper11_Super11_2, idB_B2_1);
		


-- transition trace :
	--Super11_A__To__Junction794_1, Junction794__To__B2_B2a_2
		(idSuper11_Super11_4) 
	= 
		 if (( x!=0 )) then 
		Super11_A_ex(idSuper11_Super11_1, false)
		 else (idSuper11_Super11_1);
		

		idB_B2_3 
	= 784;
	
		idSuper11_B_3 
	= 783;
	
		(idSuper11_B_4, idSuper11_Super11_5, idB_B2_4) 
	= 
		 if (( x!=0 )) then 
		Super11_B_en(idSuper11_B_3, idSuper11_Super11_4, idB_B2_3, false)
		 else (idSuper11_B_3, idSuper11_Super11_4, idB_B2_3);
		

	(idSuper11_Super11, idB_B2, idSuper11_B) 
	= 
		 if (( x=0 )) then 
		(idSuper11_Super11_3, idB_B2_2, idSuper11_B_2)
		 else
		 if (( x!=0 )) then 
		(idSuper11_Super11_5, idB_B2_4, idSuper11_B_4)
		 else (idSuper11_Super11_1, idB_B2_1, idSuper11_B_1);

	--add unused variables
	(y) 
	= (y_1);
	

	tel

	until true restart POINTSuper11_Super11



	state SUPER11_A_IDL:

	 var 	y_2:int;
	let

		
	(y_2) 
	= Super11_A_du(y_1);

		


	(idSuper11_Super11, idB_B2, idSuper11_B, y) 
	= (idSuper11_Super11_1, idB_B2_1, idSuper11_B_1, y_2);
	

	tel

	until true restart POINTSuper11_Super11



	state SUPER11_B_IDL:

	 var 	idSuper11_Super11_2:int;
	idB_B2_2:int;
	idSuper11_B_2:int;
	y_2, y_3:int;
	let

		
	(y_2) 
	= Super11_B_du(y_1);

		

	(idSuper11_B_2, idB_B2_2, y_3, idSuper11_Super11_2) 
	= Super11_B_node(idSuper11_B_1, E, idB_B2_1, y_2, idSuper11_Super11_1, x);

		


	(idSuper11_Super11, idB_B2, idSuper11_B, y) 
	= (idSuper11_Super11_2, idB_B2_2, idSuper11_B_2, y_3);
	

	tel

	until true restart POINTSuper11_Super11



tel


--***************************************************State :Super11_Super11 Automaton***************************************************

node Super11_Super11(x:int;
	E:bool)

returns (y:int);


var y_1: int;

	idSuper11_Super11, idSuper11_Super11_1: int;

	idB_B2, idB_B2_1: int;

	idSuper11_B, idSuper11_B_1: int;

	let

	y_1 = 0 -> pre y;

	idSuper11_Super11_1 = 0 -> pre idSuper11_Super11;

	idB_B2_1 = 0 -> pre idB_B2;

	idSuper11_B_1 = 0 -> pre idSuper11_B;

	



	(idSuper11_Super11, idB_B2, idSuper11_B, y)
	 = 

	 if E then Super11_Super11_node(idSuper11_Super11_1, E, x, idB_B2_1, idSuper11_B_1, y_1)

	 else (idSuper11_Super11_1, idB_B2_1, idSuper11_B_1, y_1);

	


--unused outputs
	

tel



node Super11 (x_1_1 : int; E_1_1 : real)
returns (y_1_1 : int); 
var
	Super11_1_1 : int;
	E_1_1_event: bool;
let 
	E_1_1_event = false -> ((pre(E_1_1) > 0.0 and E_1_1 <= 0.0) or (pre(E_1_1) <= 0.0 and E_1_1 > 0.0));
	Super11_1_1 =  Super11_Super11(x_1_1, E_1_1_event);
	y_1_1 = Super11_1_1;
tel

