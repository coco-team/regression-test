-- This file has been generated by cocoSim

-- External Stateflow functions
node min(x,y:int) 
 returns (z:int) 
let 
	 z=if x<y then x else y; 
tel

-- System nodes








node MissionPhaseStates_DockingApproach__To__MissionPhaseStates_LatchCapture_1_Condition_Action(DockingApproachComplete_1:bool)

returns (DockingApproachComplete:bool);


var 	DockingApproachComplete_2:bool;


let



	DockingApproachComplete_2 
	= true;
	

	(DockingApproachComplete) 
	= (DockingApproachComplete_2);
	

tel






node MissionPhaseStates_FarApproach__To__MissionPhaseStates_CaptureApproach_2_Condition_Action(FarApproachComplete_1:bool)

returns (FarApproachComplete:bool);


var 	FarApproachComplete_2:bool;


let



	FarApproachComplete_2 
	= true;
	

	(FarApproachComplete) 
	= (FarApproachComplete_2);
	

tel









node MissionPhaseStates_CaptureApproach__To__MissionPhaseStates_DockingApproach_1_Condition_Action(CaptureApproachComplete_1:bool)

returns (CaptureApproachComplete:bool);


var 	CaptureApproachComplete_2:bool;


let



	CaptureApproachComplete_2 
	= true;
	

	(CaptureApproachComplete) 
	= (CaptureApproachComplete_2);
	

tel








node MissionPhaseStates_ApproachOrbit__To__MissionPhaseStates_ProximityOperations_1_Condition_Action(ApproachOrbitComplete_1:bool)

returns (ApproachOrbitComplete:bool);


var 	ApproachOrbitComplete_2:bool;


let



	ApproachOrbitComplete_2 
	= true;
	

	(ApproachOrbitComplete) 
	= (ApproachOrbitComplete_2);
	

tel











node MissionPhaseStates_ProximityOperations__To__MissionPhaseStates_FarApproach_2_Condition_Action(ProximityOperationsComplete_1:bool)

returns (ProximityOperationsComplete:bool);


var 	ProximityOperationsComplete_2:bool;


let



	ProximityOperationsComplete_2 
	= true;
	

	(ProximityOperationsComplete) 
	= (ProximityOperationsComplete_2);
	

tel




















node MissionPhaseStates_ProximityOperations__To__MissionPhaseStates_ApproachOrbit_1_Condition_Action(ApproachOrbitComplete_1:bool)

returns (ApproachOrbitComplete:bool);


var 	ApproachOrbitComplete_2:bool;


let



	ApproachOrbitComplete_2 
	= false;
	

	(ApproachOrbitComplete) 
	= (ApproachOrbitComplete_2);
	

tel







-- Entry action for state :MissionPhaseStates_JointMission
node MissionPhaseStates_JointMission_en(idChart_MissionPhaseStates_1:int;
	JointMission_1:bool;
	isInner:bool)

returns (idChart_MissionPhaseStates:int;
	JointMission:bool);


var 	idChart_MissionPhaseStates_2:int;
	JointMission_2:bool;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 568;
	

	JointMission_2 
	= if (not isInner) then true
	 else JointMission_1;
	

	(idChart_MissionPhaseStates, JointMission) 
	= (idChart_MissionPhaseStates_2, JointMission_2);
	

tel





-- Exit action for state :MissionPhaseStates_JointMission
node MissionPhaseStates_JointMission_ex(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;


	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_1);
	

tel






-- Entry action for state :MissionPhaseStates_FailedApproach
node MissionPhaseStates_FailedApproach_en(idChart_MissionPhaseStates_1:int;
	FailedApproach_1:bool;
	isInner:bool)

returns (idChart_MissionPhaseStates:int;
	FailedApproach:bool);


var 	idChart_MissionPhaseStates_2:int;
	FailedApproach_2:bool;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 576;
	

	FailedApproach_2 
	= if (not isInner) then true
	 else FailedApproach_1;
	

	(idChart_MissionPhaseStates, FailedApproach) 
	= (idChart_MissionPhaseStates_2, FailedApproach_2);
	

tel





-- Exit action for state :MissionPhaseStates_FailedApproach
node MissionPhaseStates_FailedApproach_ex(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;


	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_1);
	

tel






-- Entry action for state :MissionPhaseStates_JointStabilize
node MissionPhaseStates_JointStabilize_en(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 557;
	

	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_2);
	

tel





-- Exit action for state :MissionPhaseStates_JointStabilize
node MissionPhaseStates_JointStabilize_ex(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;


	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_1);
	

tel






-- Entry action for state :MissionPhaseStates_Disengage
node MissionPhaseStates_Disengage_en(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 566;
	

	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_2);
	

tel





-- Exit action for state :MissionPhaseStates_Disengage
node MissionPhaseStates_Disengage_ex(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;


	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_1);
	

tel






-- Exit action for state :MissionPhaseStates_CollisionAvoidanceManuever
node MissionPhaseStates_CollisionAvoidanceManuever_ex(ApproachOrbitComplete_1:bool;
	ProximityOperationsComplete_1:bool;
	FarApproachComplete_1:bool;
	CaptureApproachComplete_1:bool;
	idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (ApproachOrbitComplete:bool;
	ProximityOperationsComplete:bool;
	FarApproachComplete:bool;
	CaptureApproachComplete:bool;
	idChart_MissionPhaseStates:int);


var 	ApproachOrbitComplete_2:bool;
	ProximityOperationsComplete_2:bool;
	FarApproachComplete_2:bool;
	CaptureApproachComplete_2:bool;
	idChart_MissionPhaseStates_2:int;


let



	ApproachOrbitComplete_2 
	= if (not isInner) then false
	 else ApproachOrbitComplete_1;
	

	ProximityOperationsComplete_2 
	= if (not isInner) then false
	 else ProximityOperationsComplete_1;
	

	FarApproachComplete_2 
	= if (not isInner) then false
	 else FarApproachComplete_1;
	

	CaptureApproachComplete_2 
	= if (not isInner) then false
	 else CaptureApproachComplete_1;
	

	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;


	(ApproachOrbitComplete, ProximityOperationsComplete, FarApproachComplete, CaptureApproachComplete, idChart_MissionPhaseStates) 
	= (ApproachOrbitComplete_2, ProximityOperationsComplete_2, FarApproachComplete_2, CaptureApproachComplete_2, idChart_MissionPhaseStates_1);
	

tel





-- Entry action for state :MissionPhaseStates_CollisionAvoidanceManuever
node MissionPhaseStates_CollisionAvoidanceManuever_en(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 563;
	

	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_2);
	

tel






-- Entry action for state :MissionPhaseStates_DockingApproach
node MissionPhaseStates_DockingApproach_en(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 560;
	

	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_2);
	

tel





-- Exit action for state :MissionPhaseStates_DockingApproach
node MissionPhaseStates_DockingApproach_ex(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;


	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_1);
	

tel






-- Entry action for state :latch_Open
node latch_Open_en(idLatchCapture_latch_1:int;
	OPEN:int;
	latch_status_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int;
	latch_status:int);


var 	idLatchCapture_latch_2:int;
	latch_status_2:int;


let



	-- set state as active 
	idLatchCapture_latch_2 
	= 564;
	

	latch_status_2 
	= if (not isInner) then OPEN
	 else latch_status_1;
	

	(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_2, latch_status_2);
	

tel





-- Exit action for state :latch_Open
node latch_Open_ex(idLatchCapture_latch_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int);


var 	idLatchCapture_latch_2:int;


let



	-- set state as inactive 
	idLatchCapture_latch_2
	 = if (not isInner) then 0 else idLatchCapture_latch_1;


	(idLatchCapture_latch) 
	= (idLatchCapture_latch_1);
	

tel






-- Entry action for state :latch_Opening
node latch_Opening_en(idLatchCapture_latch_1:int;
	INDETERMINATE:int;
	latch_status_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int;
	latch_status:int);


var 	idLatchCapture_latch_2:int;
	latch_status_2:int;


let



	-- set state as active 
	idLatchCapture_latch_2 
	= 574;
	

	latch_status_2 
	= if (not isInner) then INDETERMINATE
	 else latch_status_1;
	

	(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_2, latch_status_2);
	

tel





-- Exit action for state :latch_Opening
node latch_Opening_ex(idLatchCapture_latch_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int);


var 	idLatchCapture_latch_2:int;


let



	-- set state as inactive 
	idLatchCapture_latch_2
	 = if (not isInner) then 0 else idLatchCapture_latch_1;


	(idLatchCapture_latch) 
	= (idLatchCapture_latch_1);
	

tel






-- Entry action for state :latch_Mated
node latch_Mated_en(idLatchCapture_latch_1:int;
	MATED:int;
	latch_status_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int;
	latch_status:int);


var 	idLatchCapture_latch_2:int;
	latch_status_2:int;


let



	-- set state as active 
	idLatchCapture_latch_2 
	= 571;
	

	latch_status_2 
	= if (not isInner) then MATED
	 else latch_status_1;
	

	(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_2, latch_status_2);
	

tel





-- Exit action for state :latch_Mated
node latch_Mated_ex(idLatchCapture_latch_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int);


var 	idLatchCapture_latch_2:int;


let



	-- set state as inactive 
	idLatchCapture_latch_2
	 = if (not isInner) then 0 else idLatchCapture_latch_1;


	(idLatchCapture_latch) 
	= (idLatchCapture_latch_1);
	

tel






-- Entry action for state :latch_Closing
node latch_Closing_en(idLatchCapture_latch_1:int;
	INDETERMINATE:int;
	latch_status_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int;
	latch_status:int);


var 	idLatchCapture_latch_2:int;
	latch_status_2:int;


let



	-- set state as active 
	idLatchCapture_latch_2 
	= 570;
	

	latch_status_2 
	= if (not isInner) then INDETERMINATE
	 else latch_status_1;
	

	(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_2, latch_status_2);
	

tel





-- Exit action for state :latch_Closing
node latch_Closing_ex(idLatchCapture_latch_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int);


var 	idLatchCapture_latch_2:int;


let



	-- set state as inactive 
	idLatchCapture_latch_2
	 = if (not isInner) then 0 else idLatchCapture_latch_1;


	(idLatchCapture_latch) 
	= (idLatchCapture_latch_1);
	

tel






-- Entry action for state :latch_ClosedButUnmated
node latch_ClosedButUnmated_en(idLatchCapture_latch_1:int;
	CLOSEDBUTUNMATED:int;
	latch_status_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int;
	latch_status:int);


var 	idLatchCapture_latch_2:int;
	latch_status_2:int;


let



	-- set state as active 
	idLatchCapture_latch_2 
	= 556;
	

	latch_status_2 
	= if (not isInner) then CLOSEDBUTUNMATED
	 else latch_status_1;
	

	(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_2, latch_status_2);
	

tel





-- Exit action for state :latch_ClosedButUnmated
node latch_ClosedButUnmated_ex(idLatchCapture_latch_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int);


var 	idLatchCapture_latch_2:int;


let



	-- set state as inactive 
	idLatchCapture_latch_2
	 = if (not isInner) then 0 else idLatchCapture_latch_1;


	(idLatchCapture_latch) 
	= (idLatchCapture_latch_1);
	

tel






-- Entry action for state :LatchCapture_latch
node LatchCapture_latch_en(idLatchCapture_latch_1:int;
	idMissionPhaseStates_LatchCapture_1:int;
	INDETERMINATE:int;
	latch_status_1:int;
	CLOSEDBUTUNMATED:int;
	OPEN:int;
	MATED:int;
	isInner:bool)

returns (idLatchCapture_latch:int;
	idMissionPhaseStates_LatchCapture:int;
	latch_status:int);


var 	idLatchCapture_latch_2, idLatchCapture_latch_3, idLatchCapture_latch_4, idLatchCapture_latch_5, idLatchCapture_latch_6, idLatchCapture_latch_7, idLatchCapture_latch_8, idLatchCapture_latch_9:int;
	idMissionPhaseStates_LatchCapture_2, idMissionPhaseStates_LatchCapture_3, idMissionPhaseStates_LatchCapture_4:int;
	latch_status_2, latch_status_3, latch_status_4, latch_status_5, latch_status_6, latch_status_7, latch_status_8, latch_status_9:int;


let



	-- set state as active 
	idMissionPhaseStates_LatchCapture_2 
	= 578;
	

	
-- transition trace :
	--POINT__To__latch_Opening_1
		(idLatchCapture_latch_2, latch_status_2) 
	= latch_Opening_en(idLatchCapture_latch_1, INDETERMINATE, latch_status_1, false);
		

	(idLatchCapture_latch_3, idMissionPhaseStates_LatchCapture_3, latch_status_3) 
	= 

	if ( idLatchCapture_latch_1 = 0) then

	 (idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, latch_status_2)

	 else(idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_2, latch_status_1);

	

	(idLatchCapture_latch_4, latch_status_4) 
	= 
	if ( idLatchCapture_latch_1 = 556) then
	latch_ClosedButUnmated_en(idLatchCapture_latch_1, CLOSEDBUTUNMATED, latch_status_1, false)
	 else (idLatchCapture_latch_1, latch_status_1);

	

	(idLatchCapture_latch_5, latch_status_5) 
	= 
	if ( idLatchCapture_latch_1 = 564) then
	latch_Open_en(idLatchCapture_latch_1, OPEN, latch_status_1, false)
	 else (idLatchCapture_latch_1, latch_status_1);

	

	(idLatchCapture_latch_6, latch_status_6) 
	= 
	if ( idLatchCapture_latch_1 = 570) then
	latch_Closing_en(idLatchCapture_latch_1, INDETERMINATE, latch_status_1, false)
	 else (idLatchCapture_latch_1, latch_status_1);

	

	(idLatchCapture_latch_7, latch_status_7) 
	= 
	if ( idLatchCapture_latch_1 = 571) then
	latch_Mated_en(idLatchCapture_latch_1, MATED, latch_status_1, false)
	 else (idLatchCapture_latch_1, latch_status_1);

	

	(idLatchCapture_latch_8, latch_status_8) 
	= 
	if ( idLatchCapture_latch_1 = 574) then
	latch_Opening_en(idLatchCapture_latch_1, INDETERMINATE, latch_status_1, false)
	 else (idLatchCapture_latch_1, latch_status_1);

	

	(idLatchCapture_latch_9, idMissionPhaseStates_LatchCapture_4, latch_status_9) 
	= 
		 if ( idLatchCapture_latch_1 = 0) then 
		(idLatchCapture_latch_3, idMissionPhaseStates_LatchCapture_3, latch_status_3)
		 else
		 if ( idLatchCapture_latch_1 = 556) then 
		(idLatchCapture_latch_4, idMissionPhaseStates_LatchCapture_3, latch_status_4)
		 else
		 if ( idLatchCapture_latch_1 = 564) then 
		(idLatchCapture_latch_5, idMissionPhaseStates_LatchCapture_3, latch_status_5)
		 else
		 if ( idLatchCapture_latch_1 = 570) then 
		(idLatchCapture_latch_6, idMissionPhaseStates_LatchCapture_3, latch_status_6)
		 else
		 if ( idLatchCapture_latch_1 = 571) then 
		(idLatchCapture_latch_7, idMissionPhaseStates_LatchCapture_3, latch_status_7)
		 else
		 if ( idLatchCapture_latch_1 = 574) then 
		(idLatchCapture_latch_8, idMissionPhaseStates_LatchCapture_3, latch_status_8)
		 else (idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_2, latch_status_1);


	(idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (idLatchCapture_latch_9, idMissionPhaseStates_LatchCapture_4, latch_status_9);
	

tel





-- Exit action for state :LatchCapture_latch
node LatchCapture_latch_ex(idLatchCapture_latch_1:int;
	idMissionPhaseStates_LatchCapture_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int;
	idMissionPhaseStates_LatchCapture:int);


var 	idLatchCapture_latch_2, idLatchCapture_latch_3, idLatchCapture_latch_4, idLatchCapture_latch_5, idLatchCapture_latch_6, idLatchCapture_latch_7, idLatchCapture_latch_8:int;
	idMissionPhaseStates_LatchCapture_2:int;


let



	
	(idLatchCapture_latch_2) 
	= 
	if ( idLatchCapture_latch_1 = 556) then
	latch_ClosedButUnmated_ex(idLatchCapture_latch_1, false)
	 else (idLatchCapture_latch_1);

	

	(idLatchCapture_latch_3) 
	= 
	if ( idLatchCapture_latch_1 = 564) then
	latch_Open_ex(idLatchCapture_latch_1, false)
	 else (idLatchCapture_latch_1);

	

	(idLatchCapture_latch_4) 
	= 
	if ( idLatchCapture_latch_1 = 570) then
	latch_Closing_ex(idLatchCapture_latch_1, false)
	 else (idLatchCapture_latch_1);

	

	(idLatchCapture_latch_5) 
	= 
	if ( idLatchCapture_latch_1 = 571) then
	latch_Mated_ex(idLatchCapture_latch_1, false)
	 else (idLatchCapture_latch_1);

	

	(idLatchCapture_latch_6) 
	= 
	if ( idLatchCapture_latch_1 = 574) then
	latch_Opening_ex(idLatchCapture_latch_1, false)
	 else (idLatchCapture_latch_1);

	

	(idLatchCapture_latch_7) 
	= 
		 if ( idLatchCapture_latch_1 = 556) then 
		(idLatchCapture_latch_2)
		 else
		 if ( idLatchCapture_latch_1 = 564) then 
		(idLatchCapture_latch_3)
		 else
		 if ( idLatchCapture_latch_1 = 570) then 
		(idLatchCapture_latch_4)
		 else
		 if ( idLatchCapture_latch_1 = 571) then 
		(idLatchCapture_latch_5)
		 else
		 if ( idLatchCapture_latch_1 = 574) then 
		(idLatchCapture_latch_6)
		 else (idLatchCapture_latch_1);


	-- set state as inactive 
	idMissionPhaseStates_LatchCapture_2
	 = if (not isInner) then 0 else idMissionPhaseStates_LatchCapture_1;

	idLatchCapture_latch_8 
	= 0;
	

	(idLatchCapture_latch, idMissionPhaseStates_LatchCapture) 
	= (idLatchCapture_latch_8, idMissionPhaseStates_LatchCapture_1);
	

tel






-- Entry action for state :LatchCaptureCheck_CheckLatchMated
node LatchCaptureCheck_CheckLatchMated_en(idLatchCapture_LatchCaptureCheck_1:int;
	isInner:bool)

returns (idLatchCapture_LatchCaptureCheck:int);


var 	idLatchCapture_LatchCaptureCheck_2:int;


let



	-- set state as active 
	idLatchCapture_LatchCaptureCheck_2 
	= 569;
	

	(idLatchCapture_LatchCaptureCheck) 
	= (idLatchCapture_LatchCaptureCheck_2);
	

tel





-- Exit action for state :LatchCaptureCheck_CheckLatchMated
node LatchCaptureCheck_CheckLatchMated_ex(idLatchCapture_LatchCaptureCheck_1:int;
	isInner:bool)

returns (idLatchCapture_LatchCaptureCheck:int);


var 	idLatchCapture_LatchCaptureCheck_2:int;


let



	-- set state as inactive 
	idLatchCapture_LatchCaptureCheck_2
	 = if (not isInner) then 0 else idLatchCapture_LatchCaptureCheck_1;


	(idLatchCapture_LatchCaptureCheck) 
	= (idLatchCapture_LatchCaptureCheck_1);
	

tel






-- Entry action for state :LatchCaptureCheck_Docked
node LatchCaptureCheck_Docked_en(idLatchCapture_LatchCaptureCheck_1:int;
	LatchCaptureComplete_1:bool;
	isInner:bool)

returns (idLatchCapture_LatchCaptureCheck:int;
	LatchCaptureComplete:bool);


var 	idLatchCapture_LatchCaptureCheck_2:int;
	LatchCaptureComplete_2:bool;


let



	-- set state as active 
	idLatchCapture_LatchCaptureCheck_2 
	= 559;
	

	LatchCaptureComplete_2 
	= if (not isInner) then true
	 else LatchCaptureComplete_1;
	

	(idLatchCapture_LatchCaptureCheck, LatchCaptureComplete) 
	= (idLatchCapture_LatchCaptureCheck_2, LatchCaptureComplete_2);
	

tel





-- Exit action for state :LatchCaptureCheck_Docked
node LatchCaptureCheck_Docked_ex(idLatchCapture_LatchCaptureCheck_1:int;
	isInner:bool)

returns (idLatchCapture_LatchCaptureCheck:int);


var 	idLatchCapture_LatchCaptureCheck_2:int;


let



	-- set state as inactive 
	idLatchCapture_LatchCaptureCheck_2
	 = if (not isInner) then 0 else idLatchCapture_LatchCaptureCheck_1;


	(idLatchCapture_LatchCaptureCheck) 
	= (idLatchCapture_LatchCaptureCheck_1);
	

tel






-- Entry action for state :LatchCaptureCheck_LatchFailed
node LatchCaptureCheck_LatchFailed_en(idLatchCapture_LatchCaptureCheck_1:int;
	isInner:bool)

returns (idLatchCapture_LatchCaptureCheck:int);


var 	idLatchCapture_LatchCaptureCheck_2:int;


let



	-- set state as active 
	idLatchCapture_LatchCaptureCheck_2 
	= 561;
	

	(idLatchCapture_LatchCaptureCheck) 
	= (idLatchCapture_LatchCaptureCheck_2);
	

tel





-- Exit action for state :LatchCaptureCheck_LatchFailed
node LatchCaptureCheck_LatchFailed_ex(idLatchCapture_LatchCaptureCheck_1:int;
	isInner:bool)

returns (idLatchCapture_LatchCaptureCheck:int);


var 	idLatchCapture_LatchCaptureCheck_2:int;


let



	-- set state as inactive 
	idLatchCapture_LatchCaptureCheck_2
	 = if (not isInner) then 0 else idLatchCapture_LatchCaptureCheck_1;


	(idLatchCapture_LatchCaptureCheck) 
	= (idLatchCapture_LatchCaptureCheck_1);
	

tel






-- Entry action for state :LatchCaptureCheck_CheckLatchOpen
node LatchCaptureCheck_CheckLatchOpen_en(idLatchCapture_LatchCaptureCheck_1:int;
	LatchCapture_timer_1:int;
	isInner:bool)

returns (idLatchCapture_LatchCaptureCheck:int;
	LatchCapture_timer:int);


var 	idLatchCapture_LatchCaptureCheck_2:int;
	LatchCapture_timer_2:int;


let



	-- set state as active 
	idLatchCapture_LatchCaptureCheck_2 
	= 562;
	

	LatchCapture_timer_2 
	= if (not isInner) then 0
	 else LatchCapture_timer_1;
	

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer) 
	= (idLatchCapture_LatchCaptureCheck_2, LatchCapture_timer_2);
	

tel





-- Exit action for state :LatchCaptureCheck_CheckLatchOpen
node LatchCaptureCheck_CheckLatchOpen_ex(idLatchCapture_LatchCaptureCheck_1:int;
	isInner:bool)

returns (idLatchCapture_LatchCaptureCheck:int);


var 	idLatchCapture_LatchCaptureCheck_2:int;


let



	-- set state as inactive 
	idLatchCapture_LatchCaptureCheck_2
	 = if (not isInner) then 0 else idLatchCapture_LatchCaptureCheck_1;


	(idLatchCapture_LatchCaptureCheck) 
	= (idLatchCapture_LatchCaptureCheck_1);
	

tel






-- Entry action for state :LatchCapture_LatchCaptureCheck
node LatchCapture_LatchCaptureCheck_en(idLatchCapture_LatchCaptureCheck_1:int;
	idMissionPhaseStates_LatchCapture_1:int;
	AttemptingToDock_1:bool;
	LatchCapture_timer_1:int;
	LatchCaptureComplete_1:bool;
	isInner:bool)

returns (idLatchCapture_LatchCaptureCheck:int;
	idMissionPhaseStates_LatchCapture:int;
	AttemptingToDock:bool;
	LatchCapture_timer:int;
	LatchCaptureComplete:bool);


var 	idLatchCapture_LatchCaptureCheck_2, idLatchCapture_LatchCaptureCheck_3, idLatchCapture_LatchCaptureCheck_4, idLatchCapture_LatchCaptureCheck_5, idLatchCapture_LatchCaptureCheck_6, idLatchCapture_LatchCaptureCheck_7, idLatchCapture_LatchCaptureCheck_8:int;
	idMissionPhaseStates_LatchCapture_2, idMissionPhaseStates_LatchCapture_3, idMissionPhaseStates_LatchCapture_4:int;
	AttemptingToDock_2, AttemptingToDock_3, AttemptingToDock_4:bool;
	LatchCapture_timer_2, LatchCapture_timer_3, LatchCapture_timer_4, LatchCapture_timer_5:int;
	LatchCaptureComplete_2, LatchCaptureComplete_3:bool;


let



	-- set state as active 
	idMissionPhaseStates_LatchCapture_2 
	= 577;
	

	AttemptingToDock_2 
	= if (not isInner) then true
	 else AttemptingToDock_1;
	

	
-- transition trace :
	--POINT__To__LatchCaptureCheck_CheckLatchOpen_1
		(idLatchCapture_LatchCaptureCheck_2, LatchCapture_timer_2) 
	= LatchCaptureCheck_CheckLatchOpen_en(idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_1, false);
		

	(idLatchCapture_LatchCaptureCheck_3, idMissionPhaseStates_LatchCapture_3, AttemptingToDock_3, LatchCapture_timer_3) 
	= 

	if ( idLatchCapture_LatchCaptureCheck_1 = 0) then

	 (idLatchCapture_LatchCaptureCheck_2, idMissionPhaseStates_LatchCapture_2, AttemptingToDock_2, LatchCapture_timer_2)

	 else(idLatchCapture_LatchCaptureCheck_1, idMissionPhaseStates_LatchCapture_2, AttemptingToDock_2, LatchCapture_timer_1);

	

	(idLatchCapture_LatchCaptureCheck_4, LatchCaptureComplete_2) 
	= 
	if ( idLatchCapture_LatchCaptureCheck_1 = 559) then
	LatchCaptureCheck_Docked_en(idLatchCapture_LatchCaptureCheck_1, LatchCaptureComplete_1, false)
	 else (idLatchCapture_LatchCaptureCheck_1, LatchCaptureComplete_1);

	

	(idLatchCapture_LatchCaptureCheck_5) 
	= 
	if ( idLatchCapture_LatchCaptureCheck_1 = 561) then
	LatchCaptureCheck_LatchFailed_en(idLatchCapture_LatchCaptureCheck_1, false)
	 else (idLatchCapture_LatchCaptureCheck_1);

	

	(idLatchCapture_LatchCaptureCheck_6, LatchCapture_timer_4) 
	= 
	if ( idLatchCapture_LatchCaptureCheck_1 = 562) then
	LatchCaptureCheck_CheckLatchOpen_en(idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_1, false)
	 else (idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_1);

	

	(idLatchCapture_LatchCaptureCheck_7) 
	= 
	if ( idLatchCapture_LatchCaptureCheck_1 = 569) then
	LatchCaptureCheck_CheckLatchMated_en(idLatchCapture_LatchCaptureCheck_1, false)
	 else (idLatchCapture_LatchCaptureCheck_1);

	

	(idLatchCapture_LatchCaptureCheck_8, idMissionPhaseStates_LatchCapture_4, AttemptingToDock_4, LatchCapture_timer_5, LatchCaptureComplete_3) 
	= 
		 if ( idLatchCapture_LatchCaptureCheck_1 = 0) then 
		(idLatchCapture_LatchCaptureCheck_3, idMissionPhaseStates_LatchCapture_3, AttemptingToDock_3, LatchCapture_timer_3, LatchCaptureComplete_1)
		 else
		 if ( idLatchCapture_LatchCaptureCheck_1 = 559) then 
		(idLatchCapture_LatchCaptureCheck_4, idMissionPhaseStates_LatchCapture_3, AttemptingToDock_3, LatchCapture_timer_3, LatchCaptureComplete_2)
		 else
		 if ( idLatchCapture_LatchCaptureCheck_1 = 561) then 
		(idLatchCapture_LatchCaptureCheck_5, idMissionPhaseStates_LatchCapture_3, AttemptingToDock_3, LatchCapture_timer_3, LatchCaptureComplete_2)
		 else
		 if ( idLatchCapture_LatchCaptureCheck_1 = 562) then 
		(idLatchCapture_LatchCaptureCheck_6, idMissionPhaseStates_LatchCapture_3, AttemptingToDock_3, LatchCapture_timer_4, LatchCaptureComplete_2)
		 else
		 if ( idLatchCapture_LatchCaptureCheck_1 = 569) then 
		(idLatchCapture_LatchCaptureCheck_7, idMissionPhaseStates_LatchCapture_3, AttemptingToDock_3, LatchCapture_timer_4, LatchCaptureComplete_2)
		 else (idLatchCapture_LatchCaptureCheck_1, idMissionPhaseStates_LatchCapture_2, AttemptingToDock_2, LatchCapture_timer_1, LatchCaptureComplete_1);


	(idLatchCapture_LatchCaptureCheck, idMissionPhaseStates_LatchCapture, AttemptingToDock, LatchCapture_timer, LatchCaptureComplete) 
	= (idLatchCapture_LatchCaptureCheck_8, idMissionPhaseStates_LatchCapture_4, AttemptingToDock_4, LatchCapture_timer_5, LatchCaptureComplete_3);
	

tel





--During action for state :LatchCapture_LatchCaptureCheck
node LatchCapture_LatchCaptureCheck_du(LatchCapture_timer_1:int;
	LatchCapture_timer_upper_limit:int)

returns (LatchCapture_timer:int);


var 	LatchCapture_timer_2:int;


let



	LatchCapture_timer_2 
	= min( LatchCapture_timer_1 +1,LatchCapture_timer_upper_limit+1);
	

	(LatchCapture_timer) 
	= (LatchCapture_timer_2);
	

tel





-- Exit action for state :LatchCapture_LatchCaptureCheck
node LatchCapture_LatchCaptureCheck_ex(idLatchCapture_LatchCaptureCheck_1:int;
	AttemptingToDock_1:bool;
	idMissionPhaseStates_LatchCapture_1:int;
	isInner:bool)

returns (idLatchCapture_LatchCaptureCheck:int;
	AttemptingToDock:bool;
	idMissionPhaseStates_LatchCapture:int);


var 	idLatchCapture_LatchCaptureCheck_2, idLatchCapture_LatchCaptureCheck_3, idLatchCapture_LatchCaptureCheck_4, idLatchCapture_LatchCaptureCheck_5, idLatchCapture_LatchCaptureCheck_6, idLatchCapture_LatchCaptureCheck_7:int;
	AttemptingToDock_2:bool;
	idMissionPhaseStates_LatchCapture_2:int;


let



	
	(idLatchCapture_LatchCaptureCheck_2) 
	= 
	if ( idLatchCapture_LatchCaptureCheck_1 = 559) then
	LatchCaptureCheck_Docked_ex(idLatchCapture_LatchCaptureCheck_1, false)
	 else (idLatchCapture_LatchCaptureCheck_1);

	

	(idLatchCapture_LatchCaptureCheck_3) 
	= 
	if ( idLatchCapture_LatchCaptureCheck_1 = 561) then
	LatchCaptureCheck_LatchFailed_ex(idLatchCapture_LatchCaptureCheck_1, false)
	 else (idLatchCapture_LatchCaptureCheck_1);

	

	(idLatchCapture_LatchCaptureCheck_4) 
	= 
	if ( idLatchCapture_LatchCaptureCheck_1 = 562) then
	LatchCaptureCheck_CheckLatchOpen_ex(idLatchCapture_LatchCaptureCheck_1, false)
	 else (idLatchCapture_LatchCaptureCheck_1);

	

	(idLatchCapture_LatchCaptureCheck_5) 
	= 
	if ( idLatchCapture_LatchCaptureCheck_1 = 569) then
	LatchCaptureCheck_CheckLatchMated_ex(idLatchCapture_LatchCaptureCheck_1, false)
	 else (idLatchCapture_LatchCaptureCheck_1);

	

	(idLatchCapture_LatchCaptureCheck_6) 
	= 
		 if ( idLatchCapture_LatchCaptureCheck_1 = 559) then 
		(idLatchCapture_LatchCaptureCheck_2)
		 else
		 if ( idLatchCapture_LatchCaptureCheck_1 = 561) then 
		(idLatchCapture_LatchCaptureCheck_3)
		 else
		 if ( idLatchCapture_LatchCaptureCheck_1 = 562) then 
		(idLatchCapture_LatchCaptureCheck_4)
		 else
		 if ( idLatchCapture_LatchCaptureCheck_1 = 569) then 
		(idLatchCapture_LatchCaptureCheck_5)
		 else (idLatchCapture_LatchCaptureCheck_1);


	AttemptingToDock_2 
	= if (not isInner) then false
	 else AttemptingToDock_1;
	

	-- set state as inactive 
	idMissionPhaseStates_LatchCapture_2
	 = if (not isInner) then 0 else idMissionPhaseStates_LatchCapture_1;

	idLatchCapture_LatchCaptureCheck_7 
	= 0;
	

	(idLatchCapture_LatchCaptureCheck, AttemptingToDock, idMissionPhaseStates_LatchCapture) 
	= (idLatchCapture_LatchCaptureCheck_7, AttemptingToDock_2, idMissionPhaseStates_LatchCapture_1);
	

tel






-- Entry action for state :MissionPhaseStates_LatchCapture
node MissionPhaseStates_LatchCapture_en(idMissionPhaseStates_LatchCapture_1:int;
	idChart_MissionPhaseStates_1:int;
	AttemptingToDock_1:bool;
	LatchCaptureComplete_1:bool;
	LatchCapture_timer_1:int;
	idLatchCapture_LatchCaptureCheck_1:int;
	CLOSEDBUTUNMATED:int;
	INDETERMINATE:int;
	MATED:int;
	OPEN:int;
	idLatchCapture_latch_1:int;
	latch_status_1:int;
	isInner:bool)

returns (idMissionPhaseStates_LatchCapture:int;
	idChart_MissionPhaseStates:int;
	AttemptingToDock:bool;
	LatchCaptureComplete:bool;
	LatchCapture_timer:int;
	idLatchCapture_LatchCaptureCheck:int;
	idLatchCapture_latch:int;
	latch_status:int);


var 	idMissionPhaseStates_LatchCapture_2, idMissionPhaseStates_LatchCapture_3:int;
	idChart_MissionPhaseStates_2:int;
	AttemptingToDock_2:bool;
	LatchCaptureComplete_2:bool;
	LatchCapture_timer_2:int;
	idLatchCapture_LatchCaptureCheck_2:int;
	idLatchCapture_latch_2:int;
	latch_status_2:int;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 575;
	

	
	(idLatchCapture_LatchCaptureCheck_2, idMissionPhaseStates_LatchCapture_2, AttemptingToDock_2, LatchCapture_timer_2, LatchCaptureComplete_2) 
	= LatchCapture_LatchCaptureCheck_en(idLatchCapture_LatchCaptureCheck_1, idMissionPhaseStates_LatchCapture_1, AttemptingToDock_1, LatchCapture_timer_1, LatchCaptureComplete_1, false);

	(idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_3, latch_status_2) 
	= LatchCapture_latch_en(idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_2, INDETERMINATE, latch_status_1, CLOSEDBUTUNMATED, OPEN, MATED, false);


	(idMissionPhaseStates_LatchCapture, idChart_MissionPhaseStates, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, latch_status) 
	= (idMissionPhaseStates_LatchCapture_3, idChart_MissionPhaseStates_2, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, latch_status_2);
	

tel





-- Exit action for state :MissionPhaseStates_LatchCapture
node MissionPhaseStates_LatchCapture_ex(idLatchCapture_latch_1:int;
	idMissionPhaseStates_LatchCapture_1:int;
	AttemptingToDock_1:bool;
	idLatchCapture_LatchCaptureCheck_1:int;
	idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idLatchCapture_latch:int;
	idMissionPhaseStates_LatchCapture:int;
	AttemptingToDock:bool;
	idLatchCapture_LatchCaptureCheck:int;
	idChart_MissionPhaseStates:int);


var 	idLatchCapture_latch_2:int;
	idMissionPhaseStates_LatchCapture_2, idMissionPhaseStates_LatchCapture_3, idMissionPhaseStates_LatchCapture_4:int;
	AttemptingToDock_2:bool;
	idLatchCapture_LatchCaptureCheck_2:int;
	idChart_MissionPhaseStates_2:int;


let



	
	(idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2) 
	= LatchCapture_latch_ex(idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, false);

	(idLatchCapture_LatchCaptureCheck_2, AttemptingToDock_2, idMissionPhaseStates_LatchCapture_3) 
	= LatchCapture_LatchCaptureCheck_ex(idLatchCapture_LatchCaptureCheck_1, AttemptingToDock_1, idMissionPhaseStates_LatchCapture_2, false);


	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;

	idMissionPhaseStates_LatchCapture_4 
	= 0;
	

	(idLatchCapture_latch, idMissionPhaseStates_LatchCapture, AttemptingToDock, idLatchCapture_LatchCaptureCheck, idChart_MissionPhaseStates) 
	= (idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_4, AttemptingToDock_2, idLatchCapture_LatchCaptureCheck_2, idChart_MissionPhaseStates_1);
	

tel






-- Entry action for state :MissionPhaseStates_CaptureApproach
node MissionPhaseStates_CaptureApproach_en(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 573;
	

	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_2);
	

tel





-- Exit action for state :MissionPhaseStates_CaptureApproach
node MissionPhaseStates_CaptureApproach_ex(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;


	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_1);
	

tel






-- Entry action for state :MissionPhaseStates_FarApproach
node MissionPhaseStates_FarApproach_en(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 555;
	

	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_2);
	

tel





-- Exit action for state :MissionPhaseStates_FarApproach
node MissionPhaseStates_FarApproach_ex(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;


	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_1);
	

tel






-- Entry action for state :MissionPhaseStates_Start
node MissionPhaseStates_Start_en(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 558;
	

	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_2);
	

tel





-- Exit action for state :MissionPhaseStates_Start
node MissionPhaseStates_Start_ex(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;


	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_1);
	

tel






-- Entry action for state :MissionPhaseStates_ProximityOperations
node MissionPhaseStates_ProximityOperations_en(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 567;
	

	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_2);
	

tel





-- Exit action for state :MissionPhaseStates_ProximityOperations
node MissionPhaseStates_ProximityOperations_ex(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;


	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_1);
	

tel






-- Entry action for state :MissionPhaseStates_ApproachOrbit
node MissionPhaseStates_ApproachOrbit_en(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as active 
	idChart_MissionPhaseStates_2 
	= 565;
	

	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_2);
	

tel





-- Exit action for state :MissionPhaseStates_ApproachOrbit
node MissionPhaseStates_ApproachOrbit_ex(idChart_MissionPhaseStates_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int);


var 	idChart_MissionPhaseStates_2:int;


let



	-- set state as inactive 
	idChart_MissionPhaseStates_2
	 = if (not isInner) then 0 else idChart_MissionPhaseStates_1;


	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_1);
	

tel






-- Entry action for state :Chart_MissionPhaseStates
node Chart_MissionPhaseStates_en(idChart_MissionPhaseStates_1:int;
	idChart_Chart_1:int;
	FailedApproach_1:bool;
	JointMission_1:bool;
	AttemptingToDock_1:bool;
	CLOSEDBUTUNMATED:int;
	INDETERMINATE:int;
	LatchCaptureComplete_1:bool;
	LatchCapture_timer_1:int;
	MATED:int;
	OPEN:int;
	idLatchCapture_LatchCaptureCheck_1:int;
	idLatchCapture_latch_1:int;
	idMissionPhaseStates_LatchCapture_1:int;
	latch_status_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int;
	idChart_Chart:int;
	FailedApproach:bool;
	JointMission:bool;
	AttemptingToDock:bool;
	LatchCaptureComplete:bool;
	LatchCapture_timer:int;
	idLatchCapture_LatchCaptureCheck:int;
	idLatchCapture_latch:int;
	idMissionPhaseStates_LatchCapture:int;
	latch_status:int);


var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3, idChart_MissionPhaseStates_4, idChart_MissionPhaseStates_5, idChart_MissionPhaseStates_6, idChart_MissionPhaseStates_7, idChart_MissionPhaseStates_8, idChart_MissionPhaseStates_9, idChart_MissionPhaseStates_10, idChart_MissionPhaseStates_11, idChart_MissionPhaseStates_12, idChart_MissionPhaseStates_13, idChart_MissionPhaseStates_14, idChart_MissionPhaseStates_15, idChart_MissionPhaseStates_16:int;
	idChart_Chart_2, idChart_Chart_3, idChart_Chart_4:int;
	FailedApproach_2, FailedApproach_3:bool;
	JointMission_2, JointMission_3:bool;
	AttemptingToDock_2, AttemptingToDock_3:bool;
	LatchCaptureComplete_2, LatchCaptureComplete_3:bool;
	LatchCapture_timer_2, LatchCapture_timer_3:int;
	idLatchCapture_LatchCaptureCheck_2, idLatchCapture_LatchCaptureCheck_3:int;
	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	idMissionPhaseStates_LatchCapture_2, idMissionPhaseStates_LatchCapture_3:int;
	latch_status_2, latch_status_3:int;


let



	-- set state as active 
	idChart_Chart_2 
	= 572;
	

	
-- transition trace :
	--POINT__To__MissionPhaseStates_Start_1
		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_Start_en(idChart_MissionPhaseStates_1, false);
		

	(idChart_MissionPhaseStates_3, idChart_Chart_3) 
	= 

	if ( idChart_MissionPhaseStates_1 = 0) then

	 (idChart_MissionPhaseStates_2, idChart_Chart_2)

	 else(idChart_MissionPhaseStates_1, idChart_Chart_2);

	

	(idChart_MissionPhaseStates_4) 
	= 
	if ( idChart_MissionPhaseStates_1 = 558) then
	MissionPhaseStates_Start_en(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_5) 
	= 
	if ( idChart_MissionPhaseStates_1 = 563) then
	MissionPhaseStates_CollisionAvoidanceManuever_en(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_6) 
	= 
	if ( idChart_MissionPhaseStates_1 = 565) then
	MissionPhaseStates_ApproachOrbit_en(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_7) 
	= 
	if ( idChart_MissionPhaseStates_1 = 567) then
	MissionPhaseStates_ProximityOperations_en(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_8) 
	= 
	if ( idChart_MissionPhaseStates_1 = 566) then
	MissionPhaseStates_Disengage_en(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_9) 
	= 
	if ( idChart_MissionPhaseStates_1 = 555) then
	MissionPhaseStates_FarApproach_en(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_10, FailedApproach_2) 
	= 
	if ( idChart_MissionPhaseStates_1 = 576) then
	MissionPhaseStates_FailedApproach_en(idChart_MissionPhaseStates_1, FailedApproach_1, false)
	 else (idChart_MissionPhaseStates_1, FailedApproach_1);

	

	(idChart_MissionPhaseStates_11, JointMission_2) 
	= 
	if ( idChart_MissionPhaseStates_1 = 568) then
	MissionPhaseStates_JointMission_en(idChart_MissionPhaseStates_1, JointMission_1, false)
	 else (idChart_MissionPhaseStates_1, JointMission_1);

	

	(idChart_MissionPhaseStates_12) 
	= 
	if ( idChart_MissionPhaseStates_1 = 573) then
	MissionPhaseStates_CaptureApproach_en(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_13) 
	= 
	if ( idChart_MissionPhaseStates_1 = 560) then
	MissionPhaseStates_DockingApproach_en(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_14) 
	= 
	if ( idChart_MissionPhaseStates_1 = 557) then
	MissionPhaseStates_JointStabilize_en(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idMissionPhaseStates_LatchCapture_2, idChart_MissionPhaseStates_15, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, latch_status_2) 
	= 
	if ( idChart_MissionPhaseStates_1 = 575) then
	MissionPhaseStates_LatchCapture_en(idMissionPhaseStates_LatchCapture_1, idChart_MissionPhaseStates_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, CLOSEDBUTUNMATED, INDETERMINATE, MATED, OPEN, idLatchCapture_latch_1, latch_status_1, false)
	 else (idMissionPhaseStates_LatchCapture_1, idChart_MissionPhaseStates_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, latch_status_1);

	

	(idChart_MissionPhaseStates_16, idChart_Chart_4, FailedApproach_3, JointMission_3, AttemptingToDock_3, LatchCaptureComplete_3, LatchCapture_timer_3, idLatchCapture_LatchCaptureCheck_3, idLatchCapture_latch_3, idMissionPhaseStates_LatchCapture_3, latch_status_3) 
	= 
		 if ( idChart_MissionPhaseStates_1 = 0) then 
		(idChart_MissionPhaseStates_3, idChart_Chart_3, FailedApproach_1, JointMission_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 558) then 
		(idChart_MissionPhaseStates_4, idChart_Chart_3, FailedApproach_1, JointMission_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 563) then 
		(idChart_MissionPhaseStates_5, idChart_Chart_3, FailedApproach_1, JointMission_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 565) then 
		(idChart_MissionPhaseStates_6, idChart_Chart_3, FailedApproach_1, JointMission_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 567) then 
		(idChart_MissionPhaseStates_7, idChart_Chart_3, FailedApproach_1, JointMission_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 566) then 
		(idChart_MissionPhaseStates_8, idChart_Chart_3, FailedApproach_1, JointMission_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 555) then 
		(idChart_MissionPhaseStates_9, idChart_Chart_3, FailedApproach_1, JointMission_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 576) then 
		(idChart_MissionPhaseStates_10, idChart_Chart_3, FailedApproach_2, JointMission_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 568) then 
		(idChart_MissionPhaseStates_11, idChart_Chart_3, FailedApproach_2, JointMission_2, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 573) then 
		(idChart_MissionPhaseStates_12, idChart_Chart_3, FailedApproach_2, JointMission_2, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 560) then 
		(idChart_MissionPhaseStates_13, idChart_Chart_3, FailedApproach_2, JointMission_2, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 557) then 
		(idChart_MissionPhaseStates_14, idChart_Chart_3, FailedApproach_2, JointMission_2, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 575) then 
		(idChart_MissionPhaseStates_15, idChart_Chart_3, FailedApproach_2, JointMission_2, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, latch_status_2)
		 else (idChart_MissionPhaseStates_1, idChart_Chart_2, FailedApproach_1, JointMission_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);


	(idChart_MissionPhaseStates, idChart_Chart, FailedApproach, JointMission, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (idChart_MissionPhaseStates_16, idChart_Chart_4, FailedApproach_3, JointMission_3, AttemptingToDock_3, LatchCaptureComplete_3, LatchCapture_timer_3, idLatchCapture_LatchCaptureCheck_3, idLatchCapture_latch_3, idMissionPhaseStates_LatchCapture_3, latch_status_3);
	

tel





-- Exit action for state :Chart_MissionPhaseStates
node Chart_MissionPhaseStates_ex(idChart_MissionPhaseStates_1:int;
	ApproachOrbitComplete_1:bool;
	CaptureApproachComplete_1:bool;
	FarApproachComplete_1:bool;
	ProximityOperationsComplete_1:bool;
	AttemptingToDock_1:bool;
	idLatchCapture_LatchCaptureCheck_1:int;
	idLatchCapture_latch_1:int;
	idMissionPhaseStates_LatchCapture_1:int;
	idChart_Chart_1:int;
	isInner:bool)

returns (idChart_MissionPhaseStates:int;
	ApproachOrbitComplete:bool;
	CaptureApproachComplete:bool;
	FarApproachComplete:bool;
	ProximityOperationsComplete:bool;
	AttemptingToDock:bool;
	idLatchCapture_LatchCaptureCheck:int;
	idLatchCapture_latch:int;
	idMissionPhaseStates_LatchCapture:int;
	idChart_Chart:int);


var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3, idChart_MissionPhaseStates_4, idChart_MissionPhaseStates_5, idChart_MissionPhaseStates_6, idChart_MissionPhaseStates_7, idChart_MissionPhaseStates_8, idChart_MissionPhaseStates_9, idChart_MissionPhaseStates_10, idChart_MissionPhaseStates_11, idChart_MissionPhaseStates_12, idChart_MissionPhaseStates_13, idChart_MissionPhaseStates_14, idChart_MissionPhaseStates_15:int;
	ApproachOrbitComplete_2, ApproachOrbitComplete_3:bool;
	CaptureApproachComplete_2, CaptureApproachComplete_3:bool;
	FarApproachComplete_2, FarApproachComplete_3:bool;
	ProximityOperationsComplete_2, ProximityOperationsComplete_3:bool;
	AttemptingToDock_2, AttemptingToDock_3:bool;
	idLatchCapture_LatchCaptureCheck_2, idLatchCapture_LatchCaptureCheck_3:int;
	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	idMissionPhaseStates_LatchCapture_2, idMissionPhaseStates_LatchCapture_3:int;
	idChart_Chart_2:int;


let



	
	(idChart_MissionPhaseStates_2) 
	= 
	if ( idChart_MissionPhaseStates_1 = 558) then
	MissionPhaseStates_Start_ex(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(ApproachOrbitComplete_2, ProximityOperationsComplete_2, FarApproachComplete_2, CaptureApproachComplete_2, idChart_MissionPhaseStates_3) 
	= 
	if ( idChart_MissionPhaseStates_1 = 563) then
	MissionPhaseStates_CollisionAvoidanceManuever_ex(ApproachOrbitComplete_1, ProximityOperationsComplete_1, FarApproachComplete_1, CaptureApproachComplete_1, idChart_MissionPhaseStates_1, false)
	 else (ApproachOrbitComplete_1, ProximityOperationsComplete_1, FarApproachComplete_1, CaptureApproachComplete_1, idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_4) 
	= 
	if ( idChart_MissionPhaseStates_1 = 565) then
	MissionPhaseStates_ApproachOrbit_ex(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_5) 
	= 
	if ( idChart_MissionPhaseStates_1 = 567) then
	MissionPhaseStates_ProximityOperations_ex(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_6) 
	= 
	if ( idChart_MissionPhaseStates_1 = 566) then
	MissionPhaseStates_Disengage_ex(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_7) 
	= 
	if ( idChart_MissionPhaseStates_1 = 555) then
	MissionPhaseStates_FarApproach_ex(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_8) 
	= 
	if ( idChart_MissionPhaseStates_1 = 576) then
	MissionPhaseStates_FailedApproach_ex(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_9) 
	= 
	if ( idChart_MissionPhaseStates_1 = 568) then
	MissionPhaseStates_JointMission_ex(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_10) 
	= 
	if ( idChart_MissionPhaseStates_1 = 573) then
	MissionPhaseStates_CaptureApproach_ex(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_11) 
	= 
	if ( idChart_MissionPhaseStates_1 = 560) then
	MissionPhaseStates_DockingApproach_ex(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_12) 
	= 
	if ( idChart_MissionPhaseStates_1 = 557) then
	MissionPhaseStates_JointStabilize_ex(idChart_MissionPhaseStates_1, false)
	 else (idChart_MissionPhaseStates_1);

	

	(idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, AttemptingToDock_2, idLatchCapture_LatchCaptureCheck_2, idChart_MissionPhaseStates_13) 
	= 
	if ( idChart_MissionPhaseStates_1 = 575) then
	MissionPhaseStates_LatchCapture_ex(idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idChart_MissionPhaseStates_1, false)
	 else (idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idChart_MissionPhaseStates_1);

	

	(idChart_MissionPhaseStates_14, ApproachOrbitComplete_3, CaptureApproachComplete_3, FarApproachComplete_3, ProximityOperationsComplete_3, AttemptingToDock_3, idLatchCapture_LatchCaptureCheck_3, idLatchCapture_latch_3, idMissionPhaseStates_LatchCapture_3) 
	= 
		 if ( idChart_MissionPhaseStates_1 = 558) then 
		(idChart_MissionPhaseStates_2, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 563) then 
		(idChart_MissionPhaseStates_3, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 565) then 
		(idChart_MissionPhaseStates_4, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 567) then 
		(idChart_MissionPhaseStates_5, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 566) then 
		(idChart_MissionPhaseStates_6, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 555) then 
		(idChart_MissionPhaseStates_7, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 576) then 
		(idChart_MissionPhaseStates_8, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 568) then 
		(idChart_MissionPhaseStates_9, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 573) then 
		(idChart_MissionPhaseStates_10, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 560) then 
		(idChart_MissionPhaseStates_11, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 557) then 
		(idChart_MissionPhaseStates_12, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1)
		 else
		 if ( idChart_MissionPhaseStates_1 = 575) then 
		(idChart_MissionPhaseStates_13, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, AttemptingToDock_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2)
		 else (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1);


	-- set state as inactive 
	idChart_Chart_2
	 = if (not isInner) then 0 else idChart_Chart_1;

	idChart_MissionPhaseStates_15 
	= 0;
	

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, AttemptingToDock, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, idChart_Chart) 
	= (idChart_MissionPhaseStates_15, ApproachOrbitComplete_3, CaptureApproachComplete_3, FarApproachComplete_3, ProximityOperationsComplete_3, AttemptingToDock_3, idLatchCapture_LatchCaptureCheck_3, idLatchCapture_latch_3, idMissionPhaseStates_LatchCapture_3, idChart_Chart_1);
	

tel


--***************************************************State :LatchCapture_latch Automaton***************************************************

node LatchCapture_latch_node(idLatchCapture_latch_1:int;
	INDETERMINATE:int;
	latch_status_1:int;
	MATED:int;
	CLOSEDBUTUNMATED:int;
	OPEN:int)

returns (idLatchCapture_latch:int;
	latch_status:int);


let

	 automaton latchcapture_latch

	state POINTLatchCapture_latch:
	unless (idLatchCapture_latch_1=0) restart POINT__TO__LATCH_OPENING_1



	unless (idLatchCapture_latch_1=556) restart LATCH_CLOSEDBUTUNMATED__TO__CHART_CHARTJUNCTION609_1



	unless (idLatchCapture_latch_1=564) restart LATCH_OPEN__TO__LATCH_CLOSING_1



	unless (idLatchCapture_latch_1=570) restart LATCH_CLOSING__TO__LATCH_MATED_1



	unless (idLatchCapture_latch_1=570) restart LATCH_CLOSING__TO__CHART_CHARTJUNCTION609_2



	unless (idLatchCapture_latch_1=570) restart LATCH_CLOSING__TO__LATCH_CLOSEDBUTUNMATED_3



	unless (idLatchCapture_latch_1=571) restart LATCH_MATED__TO__CHART_CHARTJUNCTION609_1



	unless (idLatchCapture_latch_1=574) restart LATCH_OPENING__TO__LATCH_OPEN_1



	unless (idLatchCapture_latch_1=574) restart LATCH_OPENING__TO__LATCH_CLOSING_2



	unless (idLatchCapture_latch_1=556) restart LATCH_CLOSEDBUTUNMATED_IDL

	unless (idLatchCapture_latch_1=564) restart LATCH_OPEN_IDL

	unless (idLatchCapture_latch_1=570) restart LATCH_CLOSING_IDL

	unless (idLatchCapture_latch_1=571) restart LATCH_MATED_IDL

	unless (idLatchCapture_latch_1=574) restart LATCH_OPENING_IDL

	let

		(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_1, latch_status_1);
	

	tel



	state POINT__TO__LATCH_OPENING_1:

	 var 	idLatchCapture_latch_2:int;
	latch_status_2:int;
	let

		-- transition trace :
	--POINT__To__latch_Opening_1
		(idLatchCapture_latch_2, latch_status_2) 
	= latch_Opening_en(idLatchCapture_latch_1, INDETERMINATE, latch_status_1, false);
		

	(idLatchCapture_latch, latch_status) 
	=  (idLatchCapture_latch_2, latch_status_2);


	tel

	until true restart POINTLatchCapture_latch



	state LATCH_CLOSEDBUTUNMATED__TO__CHART_CHARTJUNCTION609_1:

	 var 	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	latch_status_2:int;
	let

		

-- transition trace :
	--latch_ClosedButUnmated__To__Junction609_1, Junction609__To__latch_Opening_1
		(idLatchCapture_latch_2) 
	= latch_ClosedButUnmated_ex(idLatchCapture_latch_1, false);
		

		(idLatchCapture_latch_3, latch_status_2) 
	= latch_Opening_en(idLatchCapture_latch_2, INDETERMINATE, latch_status_1, false);
		

	(idLatchCapture_latch, latch_status) 
	=  (idLatchCapture_latch_3, latch_status_2);


	tel

	until true restart POINTLatchCapture_latch



	state LATCH_OPEN__TO__LATCH_CLOSING_1:

	 var 	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	latch_status_2:int;
	let

		-- transition trace :
	--latch_Open__To__latch_Closing_1
		(idLatchCapture_latch_2) 
	= latch_Open_ex(idLatchCapture_latch_1, false);
		

		(idLatchCapture_latch_3, latch_status_2) 
	= latch_Closing_en(idLatchCapture_latch_2, INDETERMINATE, latch_status_1, false);
		

	(idLatchCapture_latch, latch_status) 
	=  (idLatchCapture_latch_3, latch_status_2);


	tel

	until true restart POINTLatchCapture_latch



	state LATCH_CLOSING__TO__LATCH_MATED_1:

	 var 	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	latch_status_2:int;
	let

		-- transition trace :
	--latch_Closing__To__latch_Mated_1
		(idLatchCapture_latch_2) 
	= latch_Closing_ex(idLatchCapture_latch_1, false);
		

		(idLatchCapture_latch_3, latch_status_2) 
	= latch_Mated_en(idLatchCapture_latch_2, MATED, latch_status_1, false);
		

	(idLatchCapture_latch, latch_status) 
	=  (idLatchCapture_latch_3, latch_status_2);


	tel

	until true restart POINTLatchCapture_latch



	state LATCH_CLOSING__TO__CHART_CHARTJUNCTION609_2:

	 var 	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	latch_status_2:int;
	let

		

-- transition trace :
	--latch_Closing__To__Junction609_2, Junction609__To__latch_Opening_1
		(idLatchCapture_latch_2) 
	= latch_Closing_ex(idLatchCapture_latch_1, false);
		

		(idLatchCapture_latch_3, latch_status_2) 
	= latch_Opening_en(idLatchCapture_latch_2, INDETERMINATE, latch_status_1, false);
		

	(idLatchCapture_latch, latch_status) 
	=  (idLatchCapture_latch_3, latch_status_2);


	tel

	until true restart POINTLatchCapture_latch



	state LATCH_CLOSING__TO__LATCH_CLOSEDBUTUNMATED_3:

	 var 	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	latch_status_2:int;
	let

		-- transition trace :
	--latch_Closing__To__latch_ClosedButUnmated_3
		(idLatchCapture_latch_2) 
	= latch_Closing_ex(idLatchCapture_latch_1, false);
		

		(idLatchCapture_latch_3, latch_status_2) 
	= latch_ClosedButUnmated_en(idLatchCapture_latch_2, CLOSEDBUTUNMATED, latch_status_1, false);
		

	(idLatchCapture_latch, latch_status) 
	=  (idLatchCapture_latch_3, latch_status_2);


	tel

	until true restart POINTLatchCapture_latch



	state LATCH_MATED__TO__CHART_CHARTJUNCTION609_1:

	 var 	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	latch_status_2:int;
	let

		

-- transition trace :
	--latch_Mated__To__Junction609_1, Junction609__To__latch_Opening_1
		(idLatchCapture_latch_2) 
	= latch_Mated_ex(idLatchCapture_latch_1, false);
		

		(idLatchCapture_latch_3, latch_status_2) 
	= latch_Opening_en(idLatchCapture_latch_2, INDETERMINATE, latch_status_1, false);
		

	(idLatchCapture_latch, latch_status) 
	=  (idLatchCapture_latch_3, latch_status_2);


	tel

	until true restart POINTLatchCapture_latch



	state LATCH_OPENING__TO__LATCH_OPEN_1:

	 var 	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	latch_status_2:int;
	let

		-- transition trace :
	--latch_Opening__To__latch_Open_1
		(idLatchCapture_latch_2) 
	= latch_Opening_ex(idLatchCapture_latch_1, false);
		

		(idLatchCapture_latch_3, latch_status_2) 
	= latch_Open_en(idLatchCapture_latch_2, OPEN, latch_status_1, false);
		

	(idLatchCapture_latch, latch_status) 
	=  (idLatchCapture_latch_3, latch_status_2);


	tel

	until true restart POINTLatchCapture_latch



	state LATCH_OPENING__TO__LATCH_CLOSING_2:

	 var 	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	latch_status_2:int;
	let

		-- transition trace :
	--latch_Opening__To__latch_Closing_2
		(idLatchCapture_latch_2) 
	= latch_Opening_ex(idLatchCapture_latch_1, false);
		

		(idLatchCapture_latch_3, latch_status_2) 
	= latch_Closing_en(idLatchCapture_latch_2, INDETERMINATE, latch_status_1, false);
		

	(idLatchCapture_latch, latch_status) 
	=  (idLatchCapture_latch_3, latch_status_2);


	tel

	until true restart POINTLatchCapture_latch



	state LATCH_CLOSEDBUTUNMATED_IDL:

	 	let

		

	(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_1, latch_status_1);
	

	tel

	until true restart POINTLatchCapture_latch



	state LATCH_OPEN_IDL:

	 	let

		

	(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_1, latch_status_1);
	

	tel

	until true restart POINTLatchCapture_latch



	state LATCH_CLOSING_IDL:

	 	let

		

	(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_1, latch_status_1);
	

	tel

	until true restart POINTLatchCapture_latch



	state LATCH_MATED_IDL:

	 	let

		

	(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_1, latch_status_1);
	

	tel

	until true restart POINTLatchCapture_latch



	state LATCH_OPENING_IDL:

	 	let

		

	(idLatchCapture_latch, latch_status) 
	= (idLatchCapture_latch_1, latch_status_1);
	

	tel

	until true restart POINTLatchCapture_latch



tel


--***************************************************State :LatchCapture_LatchCaptureCheck Automaton***************************************************

node LatchCapture_LatchCaptureCheck_node(idLatchCapture_LatchCaptureCheck_1:int;
	LatchCapture_timer_1:int;
	AttemptingToDock_1:bool;
	idChart_MissionPhaseStates_1:int;
	idLatchCapture_latch_1:int;
	idMissionPhaseStates_LatchCapture_1:int;
	latch_status_1:int;
	OPEN:int;
	LatchCapture_timer_upper_limit:int;
	MATED:int;
	LatchCaptureComplete_1:bool;
	CLOSEDBUTUNMATED:int)

returns (idLatchCapture_LatchCaptureCheck:int;
	LatchCapture_timer:int;
	AttemptingToDock:bool;
	idChart_MissionPhaseStates:int;
	idLatchCapture_latch:int;
	idMissionPhaseStates_LatchCapture:int;
	LatchCaptureComplete:bool);


let

	 automaton latchcapture_latchcapturecheck

	state POINTLatchCapture_LatchCaptureCheck:
	unless (idLatchCapture_LatchCaptureCheck_1=0) restart POINT__TO__LATCHCAPTURECHECK_CHECKLATCHOPEN_1



	unless (idLatchCapture_LatchCaptureCheck_1=559) restart LATCHCAPTURECHECK_DOCKED__TO__MISSIONPHASESTATES_JOINTSTABILIZE_1



	unless (idLatchCapture_LatchCaptureCheck_1=561) restart LATCHCAPTURECHECK_LATCHFAILED__TO__MISSIONPHASESTATES_DOCKINGAPPROACH_1



	unless (idLatchCapture_LatchCaptureCheck_1=562) and (  latch_status_1 =OPEN ) restart LATCHCAPTURECHECK_CHECKLATCHOPEN__TO__LATCHCAPTURECHECK_CHECKLATCHMATED_1



	unless (idLatchCapture_LatchCaptureCheck_1=562) and (  LatchCapture_timer_1 =LatchCapture_timer_upper_limit ) restart LATCHCAPTURECHECK_CHECKLATCHOPEN__TO__LATCHCAPTURECHECK_LATCHFAILED_2



	unless (idLatchCapture_LatchCaptureCheck_1=569) and (  latch_status_1 =MATED ) restart LATCHCAPTURECHECK_CHECKLATCHMATED__TO__LATCHCAPTURECHECK_DOCKED_1



	unless (idLatchCapture_LatchCaptureCheck_1=569) and (  latch_status_1 =CLOSEDBUTUNMATED ) restart LATCHCAPTURECHECK_CHECKLATCHMATED__TO__CHART_CHARTJUNCTION601_2



	unless (idLatchCapture_LatchCaptureCheck_1=569) and (  LatchCapture_timer_1 =LatchCapture_timer_upper_limit ) restart LATCHCAPTURECHECK_CHECKLATCHMATED__TO__CHART_CHARTJUNCTION601_3



	unless (idLatchCapture_LatchCaptureCheck_1=559) restart LATCHCAPTURECHECK_DOCKED_IDL

	unless (idLatchCapture_LatchCaptureCheck_1=561) restart LATCHCAPTURECHECK_LATCHFAILED_IDL

	unless (idLatchCapture_LatchCaptureCheck_1=562) restart LATCHCAPTURECHECK_CHECKLATCHOPEN_IDL

	unless (idLatchCapture_LatchCaptureCheck_1=569) restart LATCHCAPTURECHECK_CHECKLATCHMATED_IDL

	let

		(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, AttemptingToDock, idChart_MissionPhaseStates, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, LatchCaptureComplete) 
	= (idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_1, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, LatchCaptureComplete_1);
	

	tel



	state POINT__TO__LATCHCAPTURECHECK_CHECKLATCHOPEN_1:

	 var 	idLatchCapture_LatchCaptureCheck_2:int;
	LatchCapture_timer_2:int;
	let

		-- transition trace :
	--POINT__To__LatchCaptureCheck_CheckLatchOpen_1
		(idLatchCapture_LatchCaptureCheck_2, LatchCapture_timer_2) 
	= LatchCaptureCheck_CheckLatchOpen_en(idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_1, false);
		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer) 
	=  (idLatchCapture_LatchCaptureCheck_2, LatchCapture_timer_2);

	--add unused variables
	(AttemptingToDock, LatchCaptureComplete, idChart_MissionPhaseStates, idLatchCapture_latch, idMissionPhaseStates_LatchCapture) 
	= (AttemptingToDock_1, LatchCaptureComplete_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1);
	

	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_DOCKED__TO__MISSIONPHASESTATES_JOINTSTABILIZE_1:

	 var 	idLatchCapture_LatchCaptureCheck_2:int;
	AttemptingToDock_2:bool;
	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	idLatchCapture_latch_2:int;
	idMissionPhaseStates_LatchCapture_2:int;
	let

		-- transition trace :
	--LatchCaptureCheck_Docked__To__MissionPhaseStates_JointStabilize_1
		(idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, AttemptingToDock_2, idLatchCapture_LatchCaptureCheck_2, idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_LatchCapture_ex(idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_JointStabilize_en(idChart_MissionPhaseStates_2, false);
		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, AttemptingToDock, idChart_MissionPhaseStates, idLatchCapture_latch, idMissionPhaseStates_LatchCapture) 
	=  (idLatchCapture_LatchCaptureCheck_2, LatchCapture_timer_1, AttemptingToDock_2, idChart_MissionPhaseStates_3, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2);

	--add unused variables
	(LatchCaptureComplete) 
	= (LatchCaptureComplete_1);
	

	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_LATCHFAILED__TO__MISSIONPHASESTATES_DOCKINGAPPROACH_1:

	 var 	idLatchCapture_LatchCaptureCheck_2:int;
	AttemptingToDock_2:bool;
	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	idLatchCapture_latch_2:int;
	idMissionPhaseStates_LatchCapture_2:int;
	let

		-- transition trace :
	--LatchCaptureCheck_LatchFailed__To__MissionPhaseStates_DockingApproach_1
		(idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, AttemptingToDock_2, idLatchCapture_LatchCaptureCheck_2, idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_LatchCapture_ex(idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, AttemptingToDock_1, idLatchCapture_LatchCaptureCheck_1, idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_DockingApproach_en(idChart_MissionPhaseStates_2, false);
		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, AttemptingToDock, idChart_MissionPhaseStates, idLatchCapture_latch, idMissionPhaseStates_LatchCapture) 
	=  (idLatchCapture_LatchCaptureCheck_2, LatchCapture_timer_1, AttemptingToDock_2, idChart_MissionPhaseStates_3, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2);

	--add unused variables
	(LatchCaptureComplete) 
	= (LatchCaptureComplete_1);
	

	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_CHECKLATCHOPEN__TO__LATCHCAPTURECHECK_CHECKLATCHMATED_1:

	 var 	idLatchCapture_LatchCaptureCheck_2, idLatchCapture_LatchCaptureCheck_3:int;
	let

		-- transition trace :
	--LatchCaptureCheck_CheckLatchOpen__To__LatchCaptureCheck_CheckLatchMated_1
		(idLatchCapture_LatchCaptureCheck_2) 
	= LatchCaptureCheck_CheckLatchOpen_ex(idLatchCapture_LatchCaptureCheck_1, false);
		

		(idLatchCapture_LatchCaptureCheck_3) 
	= LatchCaptureCheck_CheckLatchMated_en(idLatchCapture_LatchCaptureCheck_2, false);
		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, AttemptingToDock, idChart_MissionPhaseStates, idLatchCapture_latch, idMissionPhaseStates_LatchCapture) 
	=  (idLatchCapture_LatchCaptureCheck_3, LatchCapture_timer_1, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1);

	--add unused variables
	(LatchCaptureComplete) 
	= (LatchCaptureComplete_1);
	

	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_CHECKLATCHOPEN__TO__LATCHCAPTURECHECK_LATCHFAILED_2:

	 var 	idLatchCapture_LatchCaptureCheck_2, idLatchCapture_LatchCaptureCheck_3:int;
	let

		-- transition trace :
	--LatchCaptureCheck_CheckLatchOpen__To__LatchCaptureCheck_LatchFailed_2
		(idLatchCapture_LatchCaptureCheck_2) 
	= LatchCaptureCheck_CheckLatchOpen_ex(idLatchCapture_LatchCaptureCheck_1, false);
		

		(idLatchCapture_LatchCaptureCheck_3) 
	= LatchCaptureCheck_LatchFailed_en(idLatchCapture_LatchCaptureCheck_2, false);
		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, AttemptingToDock, idChart_MissionPhaseStates, idLatchCapture_latch, idMissionPhaseStates_LatchCapture) 
	=  (idLatchCapture_LatchCaptureCheck_3, LatchCapture_timer_1, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1);

	--add unused variables
	(LatchCaptureComplete) 
	= (LatchCaptureComplete_1);
	

	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_CHECKLATCHMATED__TO__LATCHCAPTURECHECK_DOCKED_1:

	 var 	idLatchCapture_LatchCaptureCheck_2, idLatchCapture_LatchCaptureCheck_3:int;
	LatchCaptureComplete_2:bool;
	let

		-- transition trace :
	--LatchCaptureCheck_CheckLatchMated__To__LatchCaptureCheck_Docked_1
		(idLatchCapture_LatchCaptureCheck_2) 
	= LatchCaptureCheck_CheckLatchMated_ex(idLatchCapture_LatchCaptureCheck_1, false);
		

		(idLatchCapture_LatchCaptureCheck_3, LatchCaptureComplete_2) 
	= LatchCaptureCheck_Docked_en(idLatchCapture_LatchCaptureCheck_2, LatchCaptureComplete_1, false);
		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, AttemptingToDock, idChart_MissionPhaseStates, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, LatchCaptureComplete) 
	=  (idLatchCapture_LatchCaptureCheck_3, LatchCapture_timer_1, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, LatchCaptureComplete_2);


	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_CHECKLATCHMATED__TO__CHART_CHARTJUNCTION601_2:

	 var 	idLatchCapture_LatchCaptureCheck_2, idLatchCapture_LatchCaptureCheck_3:int;
	let

		

-- transition trace :
	--LatchCaptureCheck_CheckLatchMated__To__Junction601_2, Junction601__To__LatchCaptureCheck_LatchFailed_1
		(idLatchCapture_LatchCaptureCheck_2) 
	= LatchCaptureCheck_CheckLatchMated_ex(idLatchCapture_LatchCaptureCheck_1, false);
		

		(idLatchCapture_LatchCaptureCheck_3) 
	= LatchCaptureCheck_LatchFailed_en(idLatchCapture_LatchCaptureCheck_2, false);
		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, AttemptingToDock, idChart_MissionPhaseStates, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, LatchCaptureComplete) 
	=  (idLatchCapture_LatchCaptureCheck_3, LatchCapture_timer_1, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, LatchCaptureComplete_1);


	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_CHECKLATCHMATED__TO__CHART_CHARTJUNCTION601_3:

	 var 	idLatchCapture_LatchCaptureCheck_2, idLatchCapture_LatchCaptureCheck_3:int;
	let

		

-- transition trace :
	--LatchCaptureCheck_CheckLatchMated__To__Junction601_3, Junction601__To__LatchCaptureCheck_LatchFailed_1
		(idLatchCapture_LatchCaptureCheck_2) 
	= LatchCaptureCheck_CheckLatchMated_ex(idLatchCapture_LatchCaptureCheck_1, false);
		

		(idLatchCapture_LatchCaptureCheck_3) 
	= LatchCaptureCheck_LatchFailed_en(idLatchCapture_LatchCaptureCheck_2, false);
		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, AttemptingToDock, idChart_MissionPhaseStates, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, LatchCaptureComplete) 
	=  (idLatchCapture_LatchCaptureCheck_3, LatchCapture_timer_1, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, LatchCaptureComplete_1);


	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_DOCKED_IDL:

	 	let

		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, AttemptingToDock, idChart_MissionPhaseStates, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, LatchCaptureComplete) 
	= (idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_1, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, LatchCaptureComplete_1);
	

	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_LATCHFAILED_IDL:

	 	let

		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, AttemptingToDock, idChart_MissionPhaseStates, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, LatchCaptureComplete) 
	= (idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_1, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, LatchCaptureComplete_1);
	

	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_CHECKLATCHOPEN_IDL:

	 	let

		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, AttemptingToDock, idChart_MissionPhaseStates, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, LatchCaptureComplete) 
	= (idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_1, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, LatchCaptureComplete_1);
	

	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



	state LATCHCAPTURECHECK_CHECKLATCHMATED_IDL:

	 	let

		

	(idLatchCapture_LatchCaptureCheck, LatchCapture_timer, AttemptingToDock, idChart_MissionPhaseStates, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, LatchCaptureComplete) 
	= (idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_1, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, LatchCaptureComplete_1);
	

	tel

	until true restart POINTLatchCapture_LatchCaptureCheck



tel


--***************************************************State :MissionPhaseStates_LatchCapture Automaton***************************************************

node MissionPhaseStates_LatchCapture_node(idMissionPhaseStates_LatchCapture_1:int;
	AttemptingToDock_1:bool;
	LatchCaptureComplete_1:bool;
	LatchCapture_timer_1:int;
	idLatchCapture_LatchCaptureCheck_1:int;
	CLOSEDBUTUNMATED:int;
	INDETERMINATE:int;
	MATED:int;
	OPEN:int;
	idLatchCapture_latch_1:int;
	latch_status_1:int;
	LatchCapture_timer_upper_limit:int;
	idChart_MissionPhaseStates_1:int)

returns (idMissionPhaseStates_LatchCapture:int;
	AttemptingToDock:bool;
	LatchCaptureComplete:bool;
	LatchCapture_timer:int;
	idLatchCapture_LatchCaptureCheck:int;
	idLatchCapture_latch:int;
	latch_status:int;
	idChart_MissionPhaseStates:int);


let

	 automaton missionphasestates_latchcapture

	state POINTMissionPhaseStates_LatchCapture:
	unless (idMissionPhaseStates_LatchCapture_1=0) restart MISSIONPHASESTATES_LATCHCAPTURE_PARALLEL_ENTRY
	unless true  restart MISSIONPHASESTATES_LATCHCAPTURE_PARALLEL_IDL

	let

		(idMissionPhaseStates_LatchCapture, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, latch_status, idChart_MissionPhaseStates) 
	= (idMissionPhaseStates_LatchCapture_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, latch_status_1, idChart_MissionPhaseStates_1);
	

	tel



	state MISSIONPHASESTATES_LATCHCAPTURE_PARALLEL_ENTRY:

	 var 	idMissionPhaseStates_LatchCapture_2, idMissionPhaseStates_LatchCapture_3:int;
	AttemptingToDock_2:bool;
	LatchCaptureComplete_2:bool;
	LatchCapture_timer_2:int;
	idLatchCapture_LatchCaptureCheck_2:int;
	idLatchCapture_latch_2:int;
	latch_status_2:int;
	let

		
	(idLatchCapture_LatchCaptureCheck_2, idMissionPhaseStates_LatchCapture_2, AttemptingToDock_2, LatchCapture_timer_2, LatchCaptureComplete_2) 
	= LatchCapture_LatchCaptureCheck_en(idLatchCapture_LatchCaptureCheck_1, idMissionPhaseStates_LatchCapture_1, AttemptingToDock_1, LatchCapture_timer_1, LatchCaptureComplete_1, false);

	(idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_3, latch_status_2) 
	= LatchCapture_latch_en(idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_2, INDETERMINATE, latch_status_1, CLOSEDBUTUNMATED, OPEN, MATED, false);


	(idMissionPhaseStates_LatchCapture, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, latch_status) 
	= (idMissionPhaseStates_LatchCapture_3, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, latch_status_2);
	
	--add unused variables
	(idChart_MissionPhaseStates) 
	= (idChart_MissionPhaseStates_1);
	

	tel

	until true restart POINTMissionPhaseStates_LatchCapture



	state MISSIONPHASESTATES_LATCHCAPTURE_PARALLEL_IDL:

	 var 	idMissionPhaseStates_LatchCapture_2:int;
	AttemptingToDock_2:bool;
	LatchCaptureComplete_2:bool;
	LatchCapture_timer_2, LatchCapture_timer_3:int;
	idLatchCapture_LatchCaptureCheck_2:int;
	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	latch_status_2:int;
	idChart_MissionPhaseStates_2:int;
	let

		
	(LatchCapture_timer_2) 
	= if not (idLatchCapture_LatchCaptureCheck_1= 0 ) then LatchCapture_LatchCaptureCheck_du(LatchCapture_timer_1, LatchCapture_timer_upper_limit)

		 else (LatchCapture_timer_1);

		


		(idLatchCapture_LatchCaptureCheck_2, LatchCapture_timer_3, AttemptingToDock_2, idChart_MissionPhaseStates_2, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, LatchCaptureComplete_2)
	= if not (idLatchCapture_LatchCaptureCheck_1= 0 ) then LatchCapture_LatchCaptureCheck_node(idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_2, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, OPEN, LatchCapture_timer_upper_limit, MATED, LatchCaptureComplete_1, CLOSEDBUTUNMATED)

		 else (idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_2, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, LatchCaptureComplete_1);

		

		

		(idLatchCapture_latch_3, latch_status_2)
	= if not (idLatchCapture_latch_2= 0 ) then LatchCapture_latch_node(idLatchCapture_latch_2, INDETERMINATE, latch_status_1, MATED, CLOSEDBUTUNMATED, OPEN)

		 else (idLatchCapture_latch_2, latch_status_1);

		

		

	(idMissionPhaseStates_LatchCapture, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, latch_status, idChart_MissionPhaseStates) 
	= (idMissionPhaseStates_LatchCapture_2, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_3, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_3, latch_status_2, idChart_MissionPhaseStates_2);
	

	tel

	until true restart POINTMissionPhaseStates_LatchCapture



tel


--***************************************************State :Chart_MissionPhaseStates Automaton***************************************************

node Chart_MissionPhaseStates_node(idChart_MissionPhaseStates_1:int;
	StageTransition:int;
	ApproachOrbitComplete_1:bool;
	CaptureApproachComplete_1:bool;
	FarApproachComplete_1:bool;
	ProximityOperationsComplete_1:bool;
	FailedApproach_1:bool;
	DockingApproachComplete_1:bool;
	AttemptingToDock_1:bool;
	CLOSEDBUTUNMATED:int;
	INDETERMINATE:int;
	LatchCaptureComplete_1:bool;
	LatchCapture_timer_1:int;
	MATED:int;
	OPEN:int;
	idLatchCapture_LatchCaptureCheck_1:int;
	idLatchCapture_latch_1:int;
	idMissionPhaseStates_LatchCapture_1:int;
	latch_status_1:int;
	JointMission_1:bool;
	LatchCapture_timer_upper_limit:int)

returns (idChart_MissionPhaseStates:int;
	ApproachOrbitComplete:bool;
	CaptureApproachComplete:bool;
	FarApproachComplete:bool;
	ProximityOperationsComplete:bool;
	FailedApproach:bool;
	DockingApproachComplete:bool;
	AttemptingToDock:bool;
	LatchCaptureComplete:bool;
	LatchCapture_timer:int;
	idLatchCapture_LatchCaptureCheck:int;
	idLatchCapture_latch:int;
	idMissionPhaseStates_LatchCapture:int;
	latch_status:int;
	JointMission:bool);


let

	 automaton chart_missionphasestates

	state POINTChart_MissionPhaseStates:
	unless (idChart_MissionPhaseStates_1=0) restart POINT__TO__MISSIONPHASESTATES_START_1



	unless (idChart_MissionPhaseStates_1=558) and ( StageTransition=0 ) restart MISSIONPHASESTATES_START__TO__MISSIONPHASESTATES_APPROACHORBIT_1



	unless (idChart_MissionPhaseStates_1=563) and ( StageTransition=8 ) restart MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER__TO__MISSIONPHASESTATES_FAILEDAPPROACH_1



	unless (idChart_MissionPhaseStates_1=563) and ( StageTransition=6 ) restart MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER__TO__MISSIONPHASESTATES_APPROACHORBIT_2



	unless (idChart_MissionPhaseStates_1=565) and ( StageTransition=2 ) restart MISSIONPHASESTATES_APPROACHORBIT__TO__MISSIONPHASESTATES_PROXIMITYOPERATIONS_1



	unless (idChart_MissionPhaseStates_1=567) and ( StageTransition=1 ) restart MISSIONPHASESTATES_PROXIMITYOPERATIONS__TO__MISSIONPHASESTATES_APPROACHORBIT_1



	unless (idChart_MissionPhaseStates_1=567) and ( StageTransition=3 ) restart MISSIONPHASESTATES_PROXIMITYOPERATIONS__TO__MISSIONPHASESTATES_FARAPPROACH_2



	unless (idChart_MissionPhaseStates_1=566) and ( StageTransition=7 ) restart MISSIONPHASESTATES_DISENGAGE__TO__MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER_1



	unless (idChart_MissionPhaseStates_1=555) and ( StageTransition=5 ) restart MISSIONPHASESTATES_FARAPPROACH__TO__MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER_1



	unless (idChart_MissionPhaseStates_1=555) and ( StageTransition=4 ) restart MISSIONPHASESTATES_FARAPPROACH__TO__MISSIONPHASESTATES_CAPTUREAPPROACH_2



	unless (idChart_MissionPhaseStates_1=573) and ( StageTransition=5 ) restart MISSIONPHASESTATES_CAPTUREAPPROACH__TO__MISSIONPHASESTATES_DOCKINGAPPROACH_1



	unless (idChart_MissionPhaseStates_1=573) restart MISSIONPHASESTATES_CAPTUREAPPROACH__TO__MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER_2



	unless (idChart_MissionPhaseStates_1=560) and ( StageTransition=6 ) restart MISSIONPHASESTATES_DOCKINGAPPROACH__TO__MISSIONPHASESTATES_LATCHCAPTURE_1



	unless (idChart_MissionPhaseStates_1=560) restart MISSIONPHASESTATES_DOCKINGAPPROACH__TO__MISSIONPHASESTATES_CAPTUREAPPROACH_2



	unless (idChart_MissionPhaseStates_1=557) and ( StageTransition=9 ) restart MISSIONPHASESTATES_JOINTSTABILIZE__TO__MISSIONPHASESTATES_DISENGAGE_1



	unless (idChart_MissionPhaseStates_1=557) and ( StageTransition=10 ) restart MISSIONPHASESTATES_JOINTSTABILIZE__TO__MISSIONPHASESTATES_JOINTMISSION_2



	unless (idChart_MissionPhaseStates_1=558) restart MISSIONPHASESTATES_START_IDL

	unless (idChart_MissionPhaseStates_1=563) restart MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER_IDL

	unless (idChart_MissionPhaseStates_1=565) restart MISSIONPHASESTATES_APPROACHORBIT_IDL

	unless (idChart_MissionPhaseStates_1=567) restart MISSIONPHASESTATES_PROXIMITYOPERATIONS_IDL

	unless (idChart_MissionPhaseStates_1=566) restart MISSIONPHASESTATES_DISENGAGE_IDL

	unless (idChart_MissionPhaseStates_1=555) restart MISSIONPHASESTATES_FARAPPROACH_IDL

	unless (idChart_MissionPhaseStates_1=576) restart MISSIONPHASESTATES_FAILEDAPPROACH_IDL

	unless (idChart_MissionPhaseStates_1=568) restart MISSIONPHASESTATES_JOINTMISSION_IDL

	unless (idChart_MissionPhaseStates_1=573) restart MISSIONPHASESTATES_CAPTUREAPPROACH_IDL

	unless (idChart_MissionPhaseStates_1=560) restart MISSIONPHASESTATES_DOCKINGAPPROACH_IDL

	unless (idChart_MissionPhaseStates_1=557) restart MISSIONPHASESTATES_JOINTSTABILIZE_IDL

	unless (idChart_MissionPhaseStates_1=575) restart MISSIONPHASESTATES_LATCHCAPTURE_IDL

	let

		(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, DockingApproachComplete, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, JointMission) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, DockingApproachComplete_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, JointMission_1);
	

	tel



	state POINT__TO__MISSIONPHASESTATES_START_1:

	 var 	idChart_MissionPhaseStates_2:int;
	let

		-- transition trace :
	--POINT__To__MissionPhaseStates_Start_1
		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_Start_en(idChart_MissionPhaseStates_1, false);
		

	(idChart_MissionPhaseStates) 
	=  (idChart_MissionPhaseStates_2);

	--add unused variables
	(ApproachOrbitComplete, AttemptingToDock, CaptureApproachComplete, DockingApproachComplete, FailedApproach, FarApproachComplete, JointMission, LatchCaptureComplete, LatchCapture_timer, ProximityOperationsComplete, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (ApproachOrbitComplete_1, AttemptingToDock_1, CaptureApproachComplete_1, DockingApproachComplete_1, FailedApproach_1, FarApproachComplete_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, ProximityOperationsComplete_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_START__TO__MISSIONPHASESTATES_APPROACHORBIT_1:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	let

		-- transition trace :
	--MissionPhaseStates_Start__To__MissionPhaseStates_ApproachOrbit_1
		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_Start_ex(idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_ApproachOrbit_en(idChart_MissionPhaseStates_2, false);
		

	(idChart_MissionPhaseStates) 
	=  (idChart_MissionPhaseStates_3);

	--add unused variables
	(ApproachOrbitComplete, AttemptingToDock, CaptureApproachComplete, DockingApproachComplete, FailedApproach, FarApproachComplete, JointMission, LatchCaptureComplete, LatchCapture_timer, ProximityOperationsComplete, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (ApproachOrbitComplete_1, AttemptingToDock_1, CaptureApproachComplete_1, DockingApproachComplete_1, FailedApproach_1, FarApproachComplete_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, ProximityOperationsComplete_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER__TO__MISSIONPHASESTATES_FAILEDAPPROACH_1:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	ApproachOrbitComplete_2:bool;
	CaptureApproachComplete_2:bool;
	FarApproachComplete_2:bool;
	ProximityOperationsComplete_2:bool;
	FailedApproach_2:bool;
	let

		-- transition trace :
	--MissionPhaseStates_CollisionAvoidanceManuever__To__MissionPhaseStates_FailedApproach_1
		(ApproachOrbitComplete_2, ProximityOperationsComplete_2, FarApproachComplete_2, CaptureApproachComplete_2, idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_CollisionAvoidanceManuever_ex(ApproachOrbitComplete_1, ProximityOperationsComplete_1, FarApproachComplete_1, CaptureApproachComplete_1, idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3, FailedApproach_2) 
	= MissionPhaseStates_FailedApproach_en(idChart_MissionPhaseStates_2, FailedApproach_1, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, FailedApproach_2);

	--add unused variables
	(AttemptingToDock, DockingApproachComplete, JointMission, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, DockingApproachComplete_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER__TO__MISSIONPHASESTATES_APPROACHORBIT_2:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	ApproachOrbitComplete_2:bool;
	CaptureApproachComplete_2:bool;
	FarApproachComplete_2:bool;
	ProximityOperationsComplete_2:bool;
	let

		-- transition trace :
	--MissionPhaseStates_CollisionAvoidanceManuever__To__MissionPhaseStates_ApproachOrbit_2
		(ApproachOrbitComplete_2, ProximityOperationsComplete_2, FarApproachComplete_2, CaptureApproachComplete_2, idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_CollisionAvoidanceManuever_ex(ApproachOrbitComplete_1, ProximityOperationsComplete_1, FarApproachComplete_1, CaptureApproachComplete_1, idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_ApproachOrbit_en(idChart_MissionPhaseStates_2, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, FailedApproach_1);

	--add unused variables
	(AttemptingToDock, DockingApproachComplete, JointMission, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, DockingApproachComplete_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_APPROACHORBIT__TO__MISSIONPHASESTATES_PROXIMITYOPERATIONS_1:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	ApproachOrbitComplete_2:bool;
	let

		-- transition trace :
	--MissionPhaseStates_ApproachOrbit__To__MissionPhaseStates_ProximityOperations_1
		-- condition Action : ApproachOrbitComplete=1
		
		(ApproachOrbitComplete_2) 
	= MissionPhaseStates_ApproachOrbit__To__MissionPhaseStates_ProximityOperations_1_Condition_Action(ApproachOrbitComplete_1);
		

		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_ApproachOrbit_ex(idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_ProximityOperations_en(idChart_MissionPhaseStates_2, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_2, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1);

	--add unused variables
	(AttemptingToDock, DockingApproachComplete, JointMission, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, DockingApproachComplete_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_PROXIMITYOPERATIONS__TO__MISSIONPHASESTATES_APPROACHORBIT_1:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	ApproachOrbitComplete_2:bool;
	let

		-- transition trace :
	--MissionPhaseStates_ProximityOperations__To__MissionPhaseStates_ApproachOrbit_1
		-- condition Action : ApproachOrbitComplete=0;
		
		(ApproachOrbitComplete_2) 
	= MissionPhaseStates_ProximityOperations__To__MissionPhaseStates_ApproachOrbit_1_Condition_Action(ApproachOrbitComplete_1);
		

		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_ProximityOperations_ex(idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_ApproachOrbit_en(idChart_MissionPhaseStates_2, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_2, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1);

	--add unused variables
	(AttemptingToDock, DockingApproachComplete, JointMission, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, DockingApproachComplete_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_PROXIMITYOPERATIONS__TO__MISSIONPHASESTATES_FARAPPROACH_2:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	ProximityOperationsComplete_2:bool;
	let

		-- transition trace :
	--MissionPhaseStates_ProximityOperations__To__MissionPhaseStates_FarApproach_2
		-- condition Action : ProximityOperationsComplete=1
		
		(ProximityOperationsComplete_2) 
	= MissionPhaseStates_ProximityOperations__To__MissionPhaseStates_FarApproach_2_Condition_Action(ProximityOperationsComplete_1);
		

		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_ProximityOperations_ex(idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_FarApproach_en(idChart_MissionPhaseStates_2, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_2, FailedApproach_1);

	--add unused variables
	(AttemptingToDock, DockingApproachComplete, JointMission, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, DockingApproachComplete_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_DISENGAGE__TO__MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER_1:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	let

		-- transition trace :
	--MissionPhaseStates_Disengage__To__MissionPhaseStates_CollisionAvoidanceManuever_1
		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_Disengage_ex(idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_CollisionAvoidanceManuever_en(idChart_MissionPhaseStates_2, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1);

	--add unused variables
	(AttemptingToDock, DockingApproachComplete, JointMission, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, DockingApproachComplete_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_FARAPPROACH__TO__MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER_1:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	let

		-- transition trace :
	--MissionPhaseStates_FarApproach__To__MissionPhaseStates_CollisionAvoidanceManuever_1
		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_FarApproach_ex(idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_CollisionAvoidanceManuever_en(idChart_MissionPhaseStates_2, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1);

	--add unused variables
	(AttemptingToDock, DockingApproachComplete, JointMission, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, DockingApproachComplete_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_FARAPPROACH__TO__MISSIONPHASESTATES_CAPTUREAPPROACH_2:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	FarApproachComplete_2:bool;
	let

		-- transition trace :
	--MissionPhaseStates_FarApproach__To__MissionPhaseStates_CaptureApproach_2
		-- condition Action : FarApproachComplete=1
		
		(FarApproachComplete_2) 
	= MissionPhaseStates_FarApproach__To__MissionPhaseStates_CaptureApproach_2_Condition_Action(FarApproachComplete_1);
		

		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_FarApproach_ex(idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_CaptureApproach_en(idChart_MissionPhaseStates_2, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_2, ProximityOperationsComplete_1, FailedApproach_1);

	--add unused variables
	(AttemptingToDock, DockingApproachComplete, JointMission, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, DockingApproachComplete_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_CAPTUREAPPROACH__TO__MISSIONPHASESTATES_DOCKINGAPPROACH_1:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	CaptureApproachComplete_2:bool;
	let

		-- transition trace :
	--MissionPhaseStates_CaptureApproach__To__MissionPhaseStates_DockingApproach_1
		-- condition Action : CaptureApproachComplete=1
		
		(CaptureApproachComplete_2) 
	= MissionPhaseStates_CaptureApproach__To__MissionPhaseStates_DockingApproach_1_Condition_Action(CaptureApproachComplete_1);
		

		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_CaptureApproach_ex(idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_DockingApproach_en(idChart_MissionPhaseStates_2, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_1, CaptureApproachComplete_2, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1);

	--add unused variables
	(AttemptingToDock, DockingApproachComplete, JointMission, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, DockingApproachComplete_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_CAPTUREAPPROACH__TO__MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER_2:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	let

		-- transition trace :
	--MissionPhaseStates_CaptureApproach__To__MissionPhaseStates_CollisionAvoidanceManuever_2
		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_CaptureApproach_ex(idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_CollisionAvoidanceManuever_en(idChart_MissionPhaseStates_2, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1);

	--add unused variables
	(AttemptingToDock, DockingApproachComplete, JointMission, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	= (AttemptingToDock_1, DockingApproachComplete_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_DOCKINGAPPROACH__TO__MISSIONPHASESTATES_LATCHCAPTURE_1:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	DockingApproachComplete_2:bool;
	AttemptingToDock_2:bool;
	LatchCaptureComplete_2:bool;
	LatchCapture_timer_2:int;
	idLatchCapture_LatchCaptureCheck_2:int;
	idLatchCapture_latch_2:int;
	idMissionPhaseStates_LatchCapture_2:int;
	latch_status_2:int;
	let

		-- transition trace :
	--MissionPhaseStates_DockingApproach__To__MissionPhaseStates_LatchCapture_1
		-- condition Action : DockingApproachComplete=1
		
		(DockingApproachComplete_2) 
	= MissionPhaseStates_DockingApproach__To__MissionPhaseStates_LatchCapture_1_Condition_Action(DockingApproachComplete_1);
		

		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_DockingApproach_ex(idChart_MissionPhaseStates_1, false);
		

		(idMissionPhaseStates_LatchCapture_2, idChart_MissionPhaseStates_3, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, latch_status_2) 
	= MissionPhaseStates_LatchCapture_en(idMissionPhaseStates_LatchCapture_1, idChart_MissionPhaseStates_2, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, CLOSEDBUTUNMATED, INDETERMINATE, MATED, OPEN, idLatchCapture_latch_1, latch_status_1, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, DockingApproachComplete, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, DockingApproachComplete_2, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, latch_status_2);

	--add unused variables
	(JointMission) 
	= (JointMission_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_DOCKINGAPPROACH__TO__MISSIONPHASESTATES_CAPTUREAPPROACH_2:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	let

		-- transition trace :
	--MissionPhaseStates_DockingApproach__To__MissionPhaseStates_CaptureApproach_2
		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_DockingApproach_ex(idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_CaptureApproach_en(idChart_MissionPhaseStates_2, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, DockingApproachComplete, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, DockingApproachComplete_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);

	--add unused variables
	(JointMission) 
	= (JointMission_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_JOINTSTABILIZE__TO__MISSIONPHASESTATES_DISENGAGE_1:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	let

		-- transition trace :
	--MissionPhaseStates_JointStabilize__To__MissionPhaseStates_Disengage_1
		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_JointStabilize_ex(idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3) 
	= MissionPhaseStates_Disengage_en(idChart_MissionPhaseStates_2, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, DockingApproachComplete, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, DockingApproachComplete_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1);

	--add unused variables
	(JointMission) 
	= (JointMission_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_JOINTSTABILIZE__TO__MISSIONPHASESTATES_JOINTMISSION_2:

	 var 	idChart_MissionPhaseStates_2, idChart_MissionPhaseStates_3:int;
	JointMission_2:bool;
	let

		-- transition trace :
	--MissionPhaseStates_JointStabilize__To__MissionPhaseStates_JointMission_2
		(idChart_MissionPhaseStates_2) 
	= MissionPhaseStates_JointStabilize_ex(idChart_MissionPhaseStates_1, false);
		

		(idChart_MissionPhaseStates_3, JointMission_2) 
	= MissionPhaseStates_JointMission_en(idChart_MissionPhaseStates_2, JointMission_1, false);
		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, DockingApproachComplete, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, JointMission) 
	=  (idChart_MissionPhaseStates_3, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, DockingApproachComplete_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, JointMission_2);


	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_START_IDL:

	 	let

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, DockingApproachComplete, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, JointMission) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, DockingApproachComplete_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, JointMission_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_COLLISIONAVOIDANCEMANUEVER_IDL:

	 	let

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, DockingApproachComplete, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, JointMission) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, DockingApproachComplete_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, JointMission_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_APPROACHORBIT_IDL:

	 	let

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, DockingApproachComplete, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, JointMission) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, DockingApproachComplete_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, JointMission_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_PROXIMITYOPERATIONS_IDL:

	 	let

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, DockingApproachComplete, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, JointMission) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, DockingApproachComplete_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, JointMission_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_DISENGAGE_IDL:

	 	let

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, DockingApproachComplete, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, JointMission) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, DockingApproachComplete_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, JointMission_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_FARAPPROACH_IDL:

	 	let

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, DockingApproachComplete, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, JointMission) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, DockingApproachComplete_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, JointMission_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_FAILEDAPPROACH_IDL:

	 	let

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, DockingApproachComplete, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, JointMission) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, DockingApproachComplete_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, JointMission_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_JOINTMISSION_IDL:

	 	let

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, DockingApproachComplete, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, JointMission) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, DockingApproachComplete_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, JointMission_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_CAPTUREAPPROACH_IDL:

	 	let

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, DockingApproachComplete, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, JointMission) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, DockingApproachComplete_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, JointMission_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_DOCKINGAPPROACH_IDL:

	 	let

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, DockingApproachComplete, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, JointMission) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, DockingApproachComplete_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, JointMission_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_JOINTSTABILIZE_IDL:

	 	let

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, DockingApproachComplete, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, JointMission) 
	= (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, DockingApproachComplete_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, JointMission_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



	state MISSIONPHASESTATES_LATCHCAPTURE_IDL:

	 var 	idChart_MissionPhaseStates_2:int;
	AttemptingToDock_2:bool;
	LatchCaptureComplete_2:bool;
	LatchCapture_timer_2, LatchCapture_timer_3:int;
	idLatchCapture_LatchCaptureCheck_2:int;
	idLatchCapture_latch_2, idLatchCapture_latch_3:int;
	idMissionPhaseStates_LatchCapture_2:int;
	latch_status_2:int;
	let

		
	(LatchCapture_timer_2) 
	= if not (idLatchCapture_LatchCaptureCheck_1= 0 ) then LatchCapture_LatchCaptureCheck_du(LatchCapture_timer_1, LatchCapture_timer_upper_limit)

		 else (LatchCapture_timer_1);

		


		(idLatchCapture_LatchCaptureCheck_2, LatchCapture_timer_3, AttemptingToDock_2, idChart_MissionPhaseStates_2, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, LatchCaptureComplete_2)
	= if not (idLatchCapture_LatchCaptureCheck_1= 0 ) then LatchCapture_LatchCaptureCheck_node(idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_2, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, OPEN, LatchCapture_timer_upper_limit, MATED, LatchCaptureComplete_1, CLOSEDBUTUNMATED)

		 else (idLatchCapture_LatchCaptureCheck_1, LatchCapture_timer_2, AttemptingToDock_1, idChart_MissionPhaseStates_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, LatchCaptureComplete_1);

		

		

		(idLatchCapture_latch_3, latch_status_2)
	= if not (idLatchCapture_latch_2= 0 ) then LatchCapture_latch_node(idLatchCapture_latch_2, INDETERMINATE, latch_status_1, MATED, CLOSEDBUTUNMATED, OPEN)

		 else (idLatchCapture_latch_2, latch_status_1);

		

		

	(idChart_MissionPhaseStates, ApproachOrbitComplete, CaptureApproachComplete, FarApproachComplete, ProximityOperationsComplete, FailedApproach, DockingApproachComplete, AttemptingToDock, LatchCaptureComplete, LatchCapture_timer, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, JointMission) 
	= (idChart_MissionPhaseStates_2, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, DockingApproachComplete_1, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_3, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_3, idMissionPhaseStates_LatchCapture_2, latch_status_2, JointMission_1);
	

	tel

	until true restart POINTChart_MissionPhaseStates



tel


--***************************************************State :Chart_Chart Automaton***************************************************

node Chart_Chart_node(idChart_Chart_1:int;
	AttemptingToDock_1:bool;
	CLOSEDBUTUNMATED:int;
	FailedApproach_1:bool;
	INDETERMINATE:int;
	JointMission_1:bool;
	LatchCaptureComplete_1:bool;
	LatchCapture_timer_1:int;
	MATED:int;
	OPEN:int;
	idChart_MissionPhaseStates_1:int;
	idLatchCapture_LatchCaptureCheck_1:int;
	idLatchCapture_latch_1:int;
	idMissionPhaseStates_LatchCapture_1:int;
	latch_status_1:int;
	ApproachOrbitComplete_1:bool;
	CaptureApproachComplete_1:bool;
	DockingApproachComplete_1:bool;
	FarApproachComplete_1:bool;
	LatchCapture_timer_upper_limit:int;
	ProximityOperationsComplete_1:bool;
	StageTransition:int)

returns (idChart_Chart:int;
	AttemptingToDock:bool;
	FailedApproach:bool;
	JointMission:bool;
	LatchCaptureComplete:bool;
	LatchCapture_timer:int;
	idChart_MissionPhaseStates:int;
	idLatchCapture_LatchCaptureCheck:int;
	idLatchCapture_latch:int;
	idMissionPhaseStates_LatchCapture:int;
	latch_status:int;
	ApproachOrbitComplete:bool;
	CaptureApproachComplete:bool;
	DockingApproachComplete:bool;
	FarApproachComplete:bool;
	ProximityOperationsComplete:bool);


let

	 automaton chart_chart

	state POINTChart_Chart:
	unless (idChart_Chart_1=0) restart POINT__TO__CHART_MISSIONPHASESTATES_1



	unless true  restart CHART_CHART_PARALLEL_IDL

	let

		(idChart_Chart, AttemptingToDock, FailedApproach, JointMission, LatchCaptureComplete, LatchCapture_timer, idChart_MissionPhaseStates, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, ApproachOrbitComplete, CaptureApproachComplete, DockingApproachComplete, FarApproachComplete, ProximityOperationsComplete) 
	= (idChart_Chart_1, AttemptingToDock_1, FailedApproach_1, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, idChart_MissionPhaseStates_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, DockingApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1);
	

	tel



	state POINT__TO__CHART_MISSIONPHASESTATES_1:

	 var 	idChart_Chart_2:int;
	AttemptingToDock_2:bool;
	FailedApproach_2:bool;
	JointMission_2:bool;
	LatchCaptureComplete_2:bool;
	LatchCapture_timer_2:int;
	idChart_MissionPhaseStates_2:int;
	idLatchCapture_LatchCaptureCheck_2:int;
	idLatchCapture_latch_2:int;
	idMissionPhaseStates_LatchCapture_2:int;
	latch_status_2:int;
	let

		-- transition trace :
	--POINT__To__Chart_MissionPhaseStates_1
		(idChart_MissionPhaseStates_2, idChart_Chart_2, FailedApproach_2, JointMission_2, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, latch_status_2) 
	= Chart_MissionPhaseStates_en(idChart_MissionPhaseStates_1, idChart_Chart_1, FailedApproach_1, JointMission_1, AttemptingToDock_1, CLOSEDBUTUNMATED, INDETERMINATE, LatchCaptureComplete_1, LatchCapture_timer_1, MATED, OPEN, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, false);
		

	(idChart_Chart, AttemptingToDock, FailedApproach, JointMission, LatchCaptureComplete, LatchCapture_timer, idChart_MissionPhaseStates, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status) 
	=  (idChart_Chart_2, AttemptingToDock_2, FailedApproach_2, JointMission_2, LatchCaptureComplete_2, LatchCapture_timer_2, idChart_MissionPhaseStates_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, latch_status_2);

	--add unused variables
	(ApproachOrbitComplete, CaptureApproachComplete, DockingApproachComplete, FarApproachComplete, ProximityOperationsComplete) 
	= (ApproachOrbitComplete_1, CaptureApproachComplete_1, DockingApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1);
	

	tel

	until true restart POINTChart_Chart



	state CHART_CHART_PARALLEL_IDL:

	 var 	AttemptingToDock_2:bool;
	FailedApproach_2:bool;
	JointMission_2:bool;
	LatchCaptureComplete_2:bool;
	LatchCapture_timer_2:int;
	idChart_MissionPhaseStates_2:int;
	idLatchCapture_LatchCaptureCheck_2:int;
	idLatchCapture_latch_2:int;
	idMissionPhaseStates_LatchCapture_2:int;
	latch_status_2:int;
	ApproachOrbitComplete_2:bool;
	CaptureApproachComplete_2:bool;
	DockingApproachComplete_2:bool;
	FarApproachComplete_2:bool;
	ProximityOperationsComplete_2:bool;
	let

		

		(idChart_MissionPhaseStates_2, ApproachOrbitComplete_2, CaptureApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2, FailedApproach_2, DockingApproachComplete_2, AttemptingToDock_2, LatchCaptureComplete_2, LatchCapture_timer_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, latch_status_2, JointMission_2)
	= if not (idChart_MissionPhaseStates_1= 0 ) then Chart_MissionPhaseStates_node(idChart_MissionPhaseStates_1, StageTransition, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, DockingApproachComplete_1, AttemptingToDock_1, CLOSEDBUTUNMATED, INDETERMINATE, LatchCaptureComplete_1, LatchCapture_timer_1, MATED, OPEN, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, JointMission_1, LatchCapture_timer_upper_limit)

		 else (idChart_MissionPhaseStates_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, FarApproachComplete_1, ProximityOperationsComplete_1, FailedApproach_1, DockingApproachComplete_1, AttemptingToDock_1, LatchCaptureComplete_1, LatchCapture_timer_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, JointMission_1);

		

		

	(idChart_Chart, AttemptingToDock, FailedApproach, JointMission, LatchCaptureComplete, LatchCapture_timer, idChart_MissionPhaseStates, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, ApproachOrbitComplete, CaptureApproachComplete, DockingApproachComplete, FarApproachComplete, ProximityOperationsComplete) 
	= (idChart_Chart_1, AttemptingToDock_2, FailedApproach_2, JointMission_2, LatchCaptureComplete_2, LatchCapture_timer_2, idChart_MissionPhaseStates_2, idLatchCapture_LatchCaptureCheck_2, idLatchCapture_latch_2, idMissionPhaseStates_LatchCapture_2, latch_status_2, ApproachOrbitComplete_2, CaptureApproachComplete_2, DockingApproachComplete_2, FarApproachComplete_2, ProximityOperationsComplete_2);
	

	tel

	until true restart POINTChart_Chart



tel


--***************************************************State :Chart_Chart Automaton***************************************************

node DA1_Chart(GroundTrack_OrbitalPosition:int;
	GroundTrack_OrbitalVelocity:int;
	dockVisibility_status:int;
	opticsAvailability_status:bool;
	sunlight_status:bool;
	GPS_satelliteVisibility_status:int;
	GPS_receiverAvailability_status:bool;
	StarPlanetTracker_planetVisibility:int;
	StarPlanetTracker_starVisibility:int;
	InertialNavigation_time:bool;
	GroundTrack_Time:int;
	RealTimeClock_time:int;
	StageTransition:int)

returns (CaptureApproachComplete:bool;
	DockingApproachComplete:bool;
	AttemptingToDock:bool;
	LatchCaptureComplete:bool;
	ApproachOrbitComplete:bool;
	FarApproachComplete:bool;
	ProximityOperationsComplete:bool;
	FailedApproach:bool;
	JointMission:bool);


var CaptureApproachComplete_1: bool;

	DockingApproachComplete_1: bool;

	AttemptingToDock_1: bool;

	LatchCaptureComplete_1: bool;

	ApproachOrbitComplete_1: bool;

	FarApproachComplete_1: bool;

	ProximityOperationsComplete_1: bool;

	FailedApproach_1: bool;

	JointMission_1: bool;

	LatchCapture_timer, LatchCapture_timer_1: int;

	latch_status, latch_status_1: int;

	idChart_Chart, idChart_Chart_1: int;

	idLatchCapture_latch, idLatchCapture_latch_1: int;

	idLatchCapture_LatchCaptureCheck, idLatchCapture_LatchCaptureCheck_1: int;

	idMissionPhaseStates_LatchCapture, idMissionPhaseStates_LatchCapture_1: int;

	idChart_MissionPhaseStates, idChart_MissionPhaseStates_1: int;

		MATED: int;

		LatchCapture_timer_upper_limit: int;

		INDETERMINATE: int;

		CaptureApproach_timer_upper_limit: int;

		DockingApproach_timer_upper_limit: int;

		CLOSEDBUTUNMATED: int;

		InertialNavigation_timer_upper_limit: int;

		dockingSensor_timer_upper_limit: int;

		EXPIRED: bool;

		POOR: int;

		AVAILABLE: bool;

		GPS_timer_upper_limit: int;

		EXIST: bool;

		OPEN: int;

		NONE: int;

		GOOD: int;

		BRIGHT: bool;

		StarPlanetTracker_timer_upper_limit: int;

	let

	CaptureApproachComplete_1 = false -> pre CaptureApproachComplete;

	DockingApproachComplete_1 = false -> pre DockingApproachComplete;

	AttemptingToDock_1 = false -> pre AttemptingToDock;

	LatchCaptureComplete_1 = false -> pre LatchCaptureComplete;

	ApproachOrbitComplete_1 = false -> pre ApproachOrbitComplete;

	FarApproachComplete_1 = false -> pre FarApproachComplete;

	ProximityOperationsComplete_1 = false -> pre ProximityOperationsComplete;

	FailedApproach_1 = false -> pre FailedApproach;

	JointMission_1 = false -> pre JointMission;

	LatchCapture_timer_1 = 0 -> pre LatchCapture_timer;

	latch_status_1 = 0 -> pre latch_status;

	idChart_Chart_1 = 0 -> pre idChart_Chart;

	idLatchCapture_latch_1 = 0 -> pre idLatchCapture_latch;

	idLatchCapture_LatchCaptureCheck_1 = 0 -> pre idLatchCapture_LatchCaptureCheck;

	idMissionPhaseStates_LatchCapture_1 = 0 -> pre idMissionPhaseStates_LatchCapture;

	idChart_MissionPhaseStates_1 = 0 -> pre idChart_MissionPhaseStates;

	MATED = 3;

	LatchCapture_timer_upper_limit = 8;

	INDETERMINATE = 0;

	CaptureApproach_timer_upper_limit = 11;

	DockingApproach_timer_upper_limit = 9;

	CLOSEDBUTUNMATED = 2;

	InertialNavigation_timer_upper_limit = 6;

	dockingSensor_timer_upper_limit = 6;

	EXPIRED = true;

	POOR = 1;

	AVAILABLE = true;

	GPS_timer_upper_limit = 6;

	EXIST = true;

	OPEN = 1;

	NONE = 0;

	GOOD = 2;

	BRIGHT = true;

	StarPlanetTracker_timer_upper_limit = 6;

	



	(idChart_Chart, AttemptingToDock, FailedApproach, JointMission, LatchCaptureComplete, LatchCapture_timer, idChart_MissionPhaseStates, idLatchCapture_LatchCaptureCheck, idLatchCapture_latch, idMissionPhaseStates_LatchCapture, latch_status, ApproachOrbitComplete, CaptureApproachComplete, DockingApproachComplete, FarApproachComplete, ProximityOperationsComplete)
	 = Chart_Chart_node(idChart_Chart_1, AttemptingToDock_1, CLOSEDBUTUNMATED, FailedApproach_1, INDETERMINATE, JointMission_1, LatchCaptureComplete_1, LatchCapture_timer_1, MATED, OPEN, idChart_MissionPhaseStates_1, idLatchCapture_LatchCaptureCheck_1, idLatchCapture_latch_1, idMissionPhaseStates_LatchCapture_1, latch_status_1, ApproachOrbitComplete_1, CaptureApproachComplete_1, DockingApproachComplete_1, FarApproachComplete_1, LatchCapture_timer_upper_limit, ProximityOperationsComplete_1, StageTransition);


--unused outputs
	

tel



node DA1 (GroundTrack_OrbitalPosition_1_1 : int; GroundTrack_OrbitalVelocity_1_1 : int; dockVisibility_status_1_1 : int; opticsAvailability_status_1_1 : bool; sunlight_status_1_1 : bool; GPS_satelliteVisibility_status_1_1 : int; GPS_receiverAvailability_status_1_1 : bool; StarPlanetTracker_planetVisibility_1_1 : int; StarPlanetTracker_starVisibility_1_1 : int; InertialNavigation_time_1_1 : bool; GroundTrack_Time_1_1 : int; RealTimeClock_time_1_1 : int; StageTransition_1_1 : int)
returns (CaptureApproachComplete_1_1 : bool;
	DockingApproachComplete_2_1 : bool;
	AttemptingToDock_3_1 : bool;
	LatchCaptureComplete_4_1 : bool;
	ApproachOrbitComplete_5_1 : bool;
	FarApproachComplete_6_1 : bool;
	ProximityOperationsComplete_7_1 : bool;
	FailedApproach_8_1 : bool;
	JointMission_9_1 : bool); 
var
	Chart_1_1 : bool; Chart_2_1 : bool; Chart_3_1 : bool; Chart_4_1 : bool; Chart_5_1 : bool; Chart_6_1 : bool; Chart_7_1 : bool; Chart_8_1 : bool; Chart_9_1 : bool;
let 
	(Chart_1_1, Chart_2_1, Chart_3_1, Chart_4_1, Chart_5_1, Chart_6_1, Chart_7_1, Chart_8_1, Chart_9_1) =  DA1_Chart(GroundTrack_OrbitalPosition_1_1, GroundTrack_OrbitalVelocity_1_1, dockVisibility_status_1_1, opticsAvailability_status_1_1, sunlight_status_1_1, GPS_satelliteVisibility_status_1_1, GPS_receiverAvailability_status_1_1, StarPlanetTracker_planetVisibility_1_1, StarPlanetTracker_starVisibility_1_1, InertialNavigation_time_1_1, GroundTrack_Time_1_1, RealTimeClock_time_1_1, StageTransition_1_1);
	CaptureApproachComplete_1_1 = Chart_1_1;
	DockingApproachComplete_2_1 = Chart_2_1;
	AttemptingToDock_3_1 = Chart_3_1;
	LatchCaptureComplete_4_1 = Chart_4_1;
	ApproachOrbitComplete_5_1 = Chart_5_1;
	FarApproachComplete_6_1 = Chart_6_1;
	ProximityOperationsComplete_7_1 = Chart_7_1;
	FailedApproach_8_1 = Chart_8_1;
	JointMission_9_1 = Chart_9_1;
tel

