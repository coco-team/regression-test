-- This file has been generated by cocoSim


-- System nodes








-- Entry action for state :Top2_C
node Top2_C_en(idEvents5_Top2_1:int;
	x_1:real;
	isInner:bool)

returns (idEvents5_Top2:int;
	x:real);


var 	idEvents5_Top2_2:int;
	x_2:real;


let



	-- set state as active 
	idEvents5_Top2_2 
	= 995;
	

	x_2 
	= if (not isInner) then  x_1  + 1.
	 else x_1;
	

	(idEvents5_Top2, x) 
	= (idEvents5_Top2_2, x_2);
	

tel





-- Exit action for state :Top2_C
node Top2_C_ex(idEvents5_Top2_1:int;
	isInner:bool)

returns (idEvents5_Top2:int);


var 	idEvents5_Top2_2:int;


let



	-- set state as inactive 
	idEvents5_Top2_2
	 = if (not isInner) then 0 else idEvents5_Top2_1;


	(idEvents5_Top2) 
	= (idEvents5_Top2_2);
	

tel






-- Entry action for state :Top2_B
node Top2_B_en(idEvents5_Top2_1:int;
	x_1:real;
	isInner:bool)

returns (idEvents5_Top2:int;
	x:real);


var 	idEvents5_Top2_2:int;
	x_2:real;


let



	-- set state as active 
	idEvents5_Top2_2 
	= 994;
	

	x_2 
	= if (not isInner) then  x_1  + 1.
	 else x_1;
	

	(idEvents5_Top2, x) 
	= (idEvents5_Top2_2, x_2);
	

tel





-- Exit action for state :Top2_B
node Top2_B_ex(idEvents5_Top2_1:int;
	isInner:bool)

returns (idEvents5_Top2:int);


var 	idEvents5_Top2_2:int;


let



	-- set state as inactive 
	idEvents5_Top2_2
	 = if (not isInner) then 0 else idEvents5_Top2_1;


	(idEvents5_Top2) 
	= (idEvents5_Top2_2);
	

tel






-- Entry action for state :Events5_Top2
node Events5_Top2_en(idEvents5_Top2_1:int;
	idEvents5_Events5_1:int;
	x_1:real;
	isInner:bool)

returns (idEvents5_Top2:int;
	idEvents5_Events5:int;
	x:real);


var 	idEvents5_Top2_2, idEvents5_Top2_3, idEvents5_Top2_4, idEvents5_Top2_5, idEvents5_Top2_6:int;
	idEvents5_Events5_2, idEvents5_Events5_3, idEvents5_Events5_4:int;
	x_2, x_3, x_4, x_5, x_6:real;


let



	-- set state as active 
	idEvents5_Events5_2 
	= 997;
	

	
-- transition trace :
	--POINT__To__Top2_B_1
		(idEvents5_Top2_2, x_2) 
	= Top2_B_en(idEvents5_Top2_1, x_1, false);
		

	(idEvents5_Top2_3, idEvents5_Events5_3, x_3) 
	= 

	if ( idEvents5_Top2_1 = 0) then

	 (idEvents5_Top2_2, idEvents5_Events5_2, x_2)

	 else(idEvents5_Top2_1, idEvents5_Events5_2, x_1);

	

	(idEvents5_Top2_4, x_4) 
	= 
	if ( idEvents5_Top2_1 = 994) then
	Top2_B_en(idEvents5_Top2_1, x_1, false)
	 else (idEvents5_Top2_1, x_1);

	

	(idEvents5_Top2_5, x_5) 
	= 
	if ( idEvents5_Top2_1 = 995) then
	Top2_C_en(idEvents5_Top2_1, x_1, false)
	 else (idEvents5_Top2_1, x_1);

	

	(idEvents5_Top2_6, idEvents5_Events5_4, x_6) 
	= 
		 if ( idEvents5_Top2_1 = 0) then 
		(idEvents5_Top2_3, idEvents5_Events5_3, x_3)
		 else
		 if ( idEvents5_Top2_1 = 994) then 
		(idEvents5_Top2_4, idEvents5_Events5_3, x_4)
		 else
		 if ( idEvents5_Top2_1 = 995) then 
		(idEvents5_Top2_5, idEvents5_Events5_3, x_5)
		 else (idEvents5_Top2_1, idEvents5_Events5_2, x_1);


	(idEvents5_Top2, idEvents5_Events5, x) 
	= (idEvents5_Top2_6, idEvents5_Events5_4, x_6);
	

tel





-- Exit action for state :Events5_Top2
node Events5_Top2_ex(idEvents5_Top2_1:int;
	idEvents5_Events5_1:int;
	isInner:bool)

returns (idEvents5_Top2:int;
	idEvents5_Events5:int);


var 	idEvents5_Top2_2, idEvents5_Top2_3, idEvents5_Top2_4, idEvents5_Top2_5:int;
	idEvents5_Events5_2:int;


let



	
	(idEvents5_Top2_2) 
	= 
	if ( idEvents5_Top2_1 = 994) then
	Top2_B_ex(idEvents5_Top2_1, false)
	 else (idEvents5_Top2_1);

	

	(idEvents5_Top2_3) 
	= 
	if ( idEvents5_Top2_1 = 995) then
	Top2_C_ex(idEvents5_Top2_1, false)
	 else (idEvents5_Top2_1);

	

	(idEvents5_Top2_4) 
	= 
		 if ( idEvents5_Top2_1 = 994) then 
		(idEvents5_Top2_2)
		 else
		 if ( idEvents5_Top2_1 = 995) then 
		(idEvents5_Top2_3)
		 else (idEvents5_Top2_1);


	-- set state as inactive 
	idEvents5_Events5_2
	 = if (not isInner) then 0 else idEvents5_Events5_1;

	idEvents5_Top2_5 
	= 0;
	

	(idEvents5_Top2, idEvents5_Events5) 
	= (idEvents5_Top2_5, idEvents5_Events5_2);
	

tel






-- Entry action for state :Top1_E
node Top1_E_en(idEvents5_Top1_1:int;
	y_1:real;
	isInner:bool)

returns (idEvents5_Top1:int;
	y:real);


var 	idEvents5_Top1_2:int;
	y_2:real;


let



	-- set state as active 
	idEvents5_Top1_2 
	= 999;
	

	y_2 
	= if (not isInner) then  y_1  + 1.
	 else y_1;
	

	(idEvents5_Top1, y) 
	= (idEvents5_Top1_2, y_2);
	

tel





-- Exit action for state :Top1_E
node Top1_E_ex(idEvents5_Top1_1:int;
	isInner:bool)

returns (idEvents5_Top1:int);


var 	idEvents5_Top1_2:int;


let



	-- set state as inactive 
	idEvents5_Top1_2
	 = if (not isInner) then 0 else idEvents5_Top1_1;


	(idEvents5_Top1) 
	= (idEvents5_Top1_2);
	

tel






-- Entry action for state :Top1_D
node Top1_D_en(idEvents5_Top1_1:int;
	y_1:real;
	isInner:bool)

returns (idEvents5_Top1:int;
	y:real);


var 	idEvents5_Top1_2:int;
	y_2:real;


let



	-- set state as active 
	idEvents5_Top1_2 
	= 998;
	

	y_2 
	= if (not isInner) then  y_1  + 1.
	 else y_1;
	

	(idEvents5_Top1, y) 
	= (idEvents5_Top1_2, y_2);
	

tel





-- Exit action for state :Top1_D
node Top1_D_ex(idEvents5_Top1_1:int;
	isInner:bool)

returns (idEvents5_Top1:int);


var 	idEvents5_Top1_2:int;


let



	-- set state as inactive 
	idEvents5_Top1_2
	 = if (not isInner) then 0 else idEvents5_Top1_1;


	(idEvents5_Top1) 
	= (idEvents5_Top1_2);
	

tel






-- Entry action for state :Top1_A
node Top1_A_en(idEvents5_Top1_1:int;
	y_1:real;
	isInner:bool)

returns (idEvents5_Top1:int;
	y:real);


var 	idEvents5_Top1_2:int;
	y_2:real;


let



	-- set state as active 
	idEvents5_Top1_2 
	= 993;
	

	y_2 
	= if (not isInner) then  y_1  + 1.
	 else y_1;
	

	(idEvents5_Top1, y) 
	= (idEvents5_Top1_2, y_2);
	

tel





-- Exit action for state :Top1_A
node Top1_A_ex(idEvents5_Top1_1:int;
	isInner:bool)

returns (idEvents5_Top1:int);


var 	idEvents5_Top1_2:int;


let



	-- set state as inactive 
	idEvents5_Top1_2
	 = if (not isInner) then 0 else idEvents5_Top1_1;


	(idEvents5_Top1) 
	= (idEvents5_Top1_2);
	

tel






-- Entry action for state :Events5_Top1
node Events5_Top1_en(idEvents5_Top1_1:int;
	idEvents5_Events5_1:int;
	y_1:real;
	isInner:bool)

returns (idEvents5_Top1:int;
	idEvents5_Events5:int;
	y:real);


var 	idEvents5_Top1_2, idEvents5_Top1_3, idEvents5_Top1_4, idEvents5_Top1_5, idEvents5_Top1_6, idEvents5_Top1_7:int;
	idEvents5_Events5_2, idEvents5_Events5_3, idEvents5_Events5_4:int;
	y_2, y_3, y_4, y_5, y_6, y_7:real;


let



	-- set state as active 
	idEvents5_Events5_2 
	= 996;
	

	
-- transition trace :
	--POINT__To__Top1_A_1
		(idEvents5_Top1_2, y_2) 
	= Top1_A_en(idEvents5_Top1_1, y_1, false);
		

	(idEvents5_Top1_3, idEvents5_Events5_3, y_3) 
	= 

	if ( idEvents5_Top1_1 = 0) then

	 (idEvents5_Top1_2, idEvents5_Events5_2, y_2)

	 else(idEvents5_Top1_1, idEvents5_Events5_2, y_1);

	

	(idEvents5_Top1_4, y_4) 
	= 
	if ( idEvents5_Top1_1 = 993) then
	Top1_A_en(idEvents5_Top1_1, y_1, false)
	 else (idEvents5_Top1_1, y_1);

	

	(idEvents5_Top1_5, y_5) 
	= 
	if ( idEvents5_Top1_1 = 999) then
	Top1_E_en(idEvents5_Top1_1, y_1, false)
	 else (idEvents5_Top1_1, y_1);

	

	(idEvents5_Top1_6, y_6) 
	= 
	if ( idEvents5_Top1_1 = 998) then
	Top1_D_en(idEvents5_Top1_1, y_1, false)
	 else (idEvents5_Top1_1, y_1);

	

	(idEvents5_Top1_7, idEvents5_Events5_4, y_7) 
	= 
		 if ( idEvents5_Top1_1 = 0) then 
		(idEvents5_Top1_3, idEvents5_Events5_3, y_3)
		 else
		 if ( idEvents5_Top1_1 = 993) then 
		(idEvents5_Top1_4, idEvents5_Events5_3, y_4)
		 else
		 if ( idEvents5_Top1_1 = 999) then 
		(idEvents5_Top1_5, idEvents5_Events5_3, y_5)
		 else
		 if ( idEvents5_Top1_1 = 998) then 
		(idEvents5_Top1_6, idEvents5_Events5_3, y_6)
		 else (idEvents5_Top1_1, idEvents5_Events5_2, y_1);


	(idEvents5_Top1, idEvents5_Events5, y) 
	= (idEvents5_Top1_7, idEvents5_Events5_4, y_7);
	

tel





-- Exit action for state :Events5_Top1
node Events5_Top1_ex(idEvents5_Top1_1:int;
	idEvents5_Events5_1:int;
	isInner:bool)

returns (idEvents5_Top1:int;
	idEvents5_Events5:int);


var 	idEvents5_Top1_2, idEvents5_Top1_3, idEvents5_Top1_4, idEvents5_Top1_5, idEvents5_Top1_6:int;
	idEvents5_Events5_2:int;


let



	
	(idEvents5_Top1_2) 
	= 
	if ( idEvents5_Top1_1 = 993) then
	Top1_A_ex(idEvents5_Top1_1, false)
	 else (idEvents5_Top1_1);

	

	(idEvents5_Top1_3) 
	= 
	if ( idEvents5_Top1_1 = 999) then
	Top1_E_ex(idEvents5_Top1_1, false)
	 else (idEvents5_Top1_1);

	

	(idEvents5_Top1_4) 
	= 
	if ( idEvents5_Top1_1 = 998) then
	Top1_D_ex(idEvents5_Top1_1, false)
	 else (idEvents5_Top1_1);

	

	(idEvents5_Top1_5) 
	= 
		 if ( idEvents5_Top1_1 = 993) then 
		(idEvents5_Top1_2)
		 else
		 if ( idEvents5_Top1_1 = 999) then 
		(idEvents5_Top1_3)
		 else
		 if ( idEvents5_Top1_1 = 998) then 
		(idEvents5_Top1_4)
		 else (idEvents5_Top1_1);


	-- set state as inactive 
	idEvents5_Events5_2
	 = if (not isInner) then 0 else idEvents5_Events5_1;

	idEvents5_Top1_6 
	= 0;
	

	(idEvents5_Top1, idEvents5_Events5) 
	= (idEvents5_Top1_6, idEvents5_Events5_2);
	

tel


--***************************************************State :Events5_Top2 Automaton***************************************************

node Events5_Top2_node(idEvents5_Top2_1:int;
	x_1:real;
	F:bool)

returns (idEvents5_Top2:int;
	x:real);


let

	 automaton events5_top2

	state POINTEvents5_Top2:
	unless (idEvents5_Top2_1=0) restart POINT__TO__TOP2_B_1



	unless (idEvents5_Top2_1=994) and F restart TOP2_B__TO__TOP2_C_1



	unless (idEvents5_Top2_1=995) and F restart TOP2_C__TO__TOP2_B_1



	unless (idEvents5_Top2_1=994) restart TOP2_B_IDL

	unless (idEvents5_Top2_1=995) restart TOP2_C_IDL

	let

		(idEvents5_Top2, x) 
	= (idEvents5_Top2_1, x_1);
	

	tel



	state POINT__TO__TOP2_B_1:

	 var 	idEvents5_Top2_2:int;
	x_2:real;
	let

		-- transition trace :
	--POINT__To__Top2_B_1
		(idEvents5_Top2_2, x_2) 
	= Top2_B_en(idEvents5_Top2_1, x_1, false);
		

	(idEvents5_Top2, x) 
	=  (idEvents5_Top2_2, x_2);


	tel

	until true restart POINTEvents5_Top2



	state TOP2_B__TO__TOP2_C_1:

	 var 	idEvents5_Top2_2, idEvents5_Top2_3:int;
	x_2:real;
	let

		-- transition trace :
	--Top2_B__To__Top2_C_1
		(idEvents5_Top2_2) 
	= Top2_B_ex(idEvents5_Top2_1, false);
		

		(idEvents5_Top2_3, x_2) 
	= Top2_C_en(idEvents5_Top2_2, x_1, false);
		

	(idEvents5_Top2, x) 
	=  (idEvents5_Top2_3, x_2);


	tel

	until true restart POINTEvents5_Top2



	state TOP2_C__TO__TOP2_B_1:

	 var 	idEvents5_Top2_2, idEvents5_Top2_3:int;
	x_2:real;
	let

		-- transition trace :
	--Top2_C__To__Top2_B_1
		(idEvents5_Top2_2) 
	= Top2_C_ex(idEvents5_Top2_1, false);
		

		(idEvents5_Top2_3, x_2) 
	= Top2_B_en(idEvents5_Top2_2, x_1, false);
		

	(idEvents5_Top2, x) 
	=  (idEvents5_Top2_3, x_2);


	tel

	until true restart POINTEvents5_Top2



	state TOP2_B_IDL:

	 	let

		

	(idEvents5_Top2, x) 
	= (idEvents5_Top2_1, x_1);
	

	tel

	until true restart POINTEvents5_Top2



	state TOP2_C_IDL:

	 	let

		

	(idEvents5_Top2, x) 
	= (idEvents5_Top2_1, x_1);
	

	tel

	until true restart POINTEvents5_Top2



tel






node Top1_D__To__Top1_E_1_Transition_Action(idEvents5_Top2_1:int;
	x_1:real;
	F:bool;
	z_1:real)

returns (idEvents5_Top2:int;
	x:real;
	z:real);


var 	idEvents5_Top2_2:int;
	x_2:real;
	z_2:real;


let



	(idEvents5_Top2_2, x_2) 
	= Events5_Top2_node(idEvents5_Top2_1, x_1, true);
	

	z_2 
	=  z_1  + 1.;
	

	(idEvents5_Top2, x, z) 
	= (idEvents5_Top2_2, x_2, z_2);
	

tel






node Top1_A__To__Top1_D_1_Transition_Action(idEvents5_Top2_1:int;
	x_1:real;
	F:bool;
	z_1:real)

returns (idEvents5_Top2:int;
	x:real;
	z:real);


var 	idEvents5_Top2_2:int;
	x_2:real;
	z_2:real;


let



	(idEvents5_Top2_2, x_2) 
	= Events5_Top2_node(idEvents5_Top2_1, x_1, true);
	

	z_2 
	=  z_1  + 1.;
	

	(idEvents5_Top2, x, z) 
	= (idEvents5_Top2_2, x_2, z_2);
	

tel






node Top1_E__To__Top1_A_1_Transition_Action(idEvents5_Top2_1:int;
	x_1:real;
	F:bool;
	z_1:real)

returns (idEvents5_Top2:int;
	x:real;
	z:real);


var 	idEvents5_Top2_2:int;
	x_2:real;
	z_2:real;


let



	(idEvents5_Top2_2, x_2) 
	= Events5_Top2_node(idEvents5_Top2_1, x_1, true);
	

	z_2 
	=  z_1  + 1.;
	

	(idEvents5_Top2, x, z) 
	= (idEvents5_Top2_2, x_2, z_2);
	

tel


--***************************************************State :Events5_Top1 Automaton***************************************************

node Events5_Top1_node(idEvents5_Top1_1:int;
	y_1:real;
	E:bool;
	F:bool;
	idEvents5_Top2_1:int;
	x_1:real;
	z_1:real)

returns (idEvents5_Top1:int;
	y:real;
	idEvents5_Top2:int;
	x:real;
	z:real);


let

	 automaton events5_top1

	state POINTEvents5_Top1:
	unless (idEvents5_Top1_1=0) restart POINT__TO__TOP1_A_1



	unless (idEvents5_Top1_1=993) and E restart TOP1_A__TO__TOP1_D_1



	unless (idEvents5_Top1_1=999) and E restart TOP1_E__TO__TOP1_A_1



	unless (idEvents5_Top1_1=998) and E restart TOP1_D__TO__TOP1_E_1



	unless (idEvents5_Top1_1=993) restart TOP1_A_IDL

	unless (idEvents5_Top1_1=999) restart TOP1_E_IDL

	unless (idEvents5_Top1_1=998) restart TOP1_D_IDL

	let

		(idEvents5_Top1, y, idEvents5_Top2, x, z) 
	= (idEvents5_Top1_1, y_1, idEvents5_Top2_1, x_1, z_1);
	

	tel



	state POINT__TO__TOP1_A_1:

	 var 	idEvents5_Top1_2:int;
	y_2:real;
	let

		-- transition trace :
	--POINT__To__Top1_A_1
		(idEvents5_Top1_2, y_2) 
	= Top1_A_en(idEvents5_Top1_1, y_1, false);
		

	(idEvents5_Top1, y) 
	=  (idEvents5_Top1_2, y_2);

	--add unused variables
	(idEvents5_Top2, x, z) 
	= (idEvents5_Top2_1, x_1, z_1);
	

	tel

	until true restart POINTEvents5_Top1



	state TOP1_A__TO__TOP1_D_1:

	 var 	idEvents5_Top1_2, idEvents5_Top1_3:int;
	y_2:real;
	idEvents5_Top2_2:int;
	x_2:real;
	z_2:real;
	let

		-- transition trace :
	--Top1_A__To__Top1_D_1
		(idEvents5_Top1_2) 
	= Top1_A_ex(idEvents5_Top1_1, false);
		

		(idEvents5_Top2_2, x_2, z_2) 
	= Top1_A__To__Top1_D_1_Transition_Action(idEvents5_Top2_1, x_1, F, z_1);
		

		(idEvents5_Top1_3, y_2) 
	= Top1_D_en(idEvents5_Top1_2, y_1, false);
		

	(idEvents5_Top1, y, idEvents5_Top2, x, z) 
	=  (idEvents5_Top1_3, y_2, idEvents5_Top2_2, x_2, z_2);


	tel

	until true restart POINTEvents5_Top1



	state TOP1_E__TO__TOP1_A_1:

	 var 	idEvents5_Top1_2, idEvents5_Top1_3:int;
	y_2:real;
	idEvents5_Top2_2:int;
	x_2:real;
	z_2:real;
	let

		-- transition trace :
	--Top1_E__To__Top1_A_1
		(idEvents5_Top1_2) 
	= Top1_E_ex(idEvents5_Top1_1, false);
		

		(idEvents5_Top2_2, x_2, z_2) 
	= Top1_E__To__Top1_A_1_Transition_Action(idEvents5_Top2_1, x_1, F, z_1);
		

		(idEvents5_Top1_3, y_2) 
	= Top1_A_en(idEvents5_Top1_2, y_1, false);
		

	(idEvents5_Top1, y, idEvents5_Top2, x, z) 
	=  (idEvents5_Top1_3, y_2, idEvents5_Top2_2, x_2, z_2);


	tel

	until true restart POINTEvents5_Top1



	state TOP1_D__TO__TOP1_E_1:

	 var 	idEvents5_Top1_2, idEvents5_Top1_3:int;
	y_2:real;
	idEvents5_Top2_2:int;
	x_2:real;
	z_2:real;
	let

		-- transition trace :
	--Top1_D__To__Top1_E_1
		(idEvents5_Top1_2) 
	= Top1_D_ex(idEvents5_Top1_1, false);
		

		(idEvents5_Top2_2, x_2, z_2) 
	= Top1_D__To__Top1_E_1_Transition_Action(idEvents5_Top2_1, x_1, F, z_1);
		

		(idEvents5_Top1_3, y_2) 
	= Top1_E_en(idEvents5_Top1_2, y_1, false);
		

	(idEvents5_Top1, y, idEvents5_Top2, x, z) 
	=  (idEvents5_Top1_3, y_2, idEvents5_Top2_2, x_2, z_2);


	tel

	until true restart POINTEvents5_Top1



	state TOP1_A_IDL:

	 	let

		

	(idEvents5_Top1, y, idEvents5_Top2, x, z) 
	= (idEvents5_Top1_1, y_1, idEvents5_Top2_1, x_1, z_1);
	

	tel

	until true restart POINTEvents5_Top1



	state TOP1_E_IDL:

	 	let

		

	(idEvents5_Top1, y, idEvents5_Top2, x, z) 
	= (idEvents5_Top1_1, y_1, idEvents5_Top2_1, x_1, z_1);
	

	tel

	until true restart POINTEvents5_Top1



	state TOP1_D_IDL:

	 	let

		

	(idEvents5_Top1, y, idEvents5_Top2, x, z) 
	= (idEvents5_Top1_1, y_1, idEvents5_Top2_1, x_1, z_1);
	

	tel

	until true restart POINTEvents5_Top1



tel


--***************************************************State :Events5_Events5 Automaton***************************************************

node Events5_Events5_node(idEvents5_Events5_1:int;
	idEvents5_Top1_1:int;
	y_1:real;
	idEvents5_Top2_1:int;
	x_1:real;
	E:bool;
	F:bool;
	z_1:real)

returns (idEvents5_Events5:int;
	idEvents5_Top1:int;
	y:real;
	idEvents5_Top2:int;
	x:real;
	z:real);


let

	 automaton events5_events5

	state POINTEvents5_Events5:
	unless (idEvents5_Events5_1=0) restart EVENTS5_EVENTS5_PARALLEL_ENTRY
	unless true  restart EVENTS5_EVENTS5_PARALLEL_IDL

	let

		(idEvents5_Events5, idEvents5_Top1, y, idEvents5_Top2, x, z) 
	= (idEvents5_Events5_1, idEvents5_Top1_1, y_1, idEvents5_Top2_1, x_1, z_1);
	

	tel



	state EVENTS5_EVENTS5_PARALLEL_ENTRY:

	 var 	idEvents5_Events5_2, idEvents5_Events5_3:int;
	idEvents5_Top1_2:int;
	y_2:real;
	idEvents5_Top2_2:int;
	x_2:real;
	let

		
	(idEvents5_Top1_2, idEvents5_Events5_2, y_2) 
	= Events5_Top1_en(idEvents5_Top1_1, idEvents5_Events5_1, y_1, false);

	(idEvents5_Top2_2, idEvents5_Events5_3, x_2) 
	= Events5_Top2_en(idEvents5_Top2_1, idEvents5_Events5_2, x_1, false);


	(idEvents5_Events5, idEvents5_Top1, y, idEvents5_Top2, x) 
	= (idEvents5_Events5_3, idEvents5_Top1_2, y_2, idEvents5_Top2_2, x_2);
	
	--add unused variables
	(z) 
	= (z_1);
	

	tel

	until true restart POINTEvents5_Events5



	state EVENTS5_EVENTS5_PARALLEL_IDL:

	 var 	idEvents5_Top1_2:int;
	y_2:real;
	idEvents5_Top2_2, idEvents5_Top2_3:int;
	x_2, x_3:real;
	z_2:real;
	let

		

		(idEvents5_Top1_2, y_2, idEvents5_Top2_2, x_2, z_2)
	= if not (idEvents5_Top1_1= 0 ) then Events5_Top1_node(idEvents5_Top1_1, y_1, E, F, idEvents5_Top2_1, x_1, z_1)

		 else (idEvents5_Top1_1, y_1, idEvents5_Top2_1, x_1, z_1);

		

		

		(idEvents5_Top2_3, x_3)
	= if not (idEvents5_Top2_2= 0 ) then Events5_Top2_node(idEvents5_Top2_2, x_2, F)

		 else (idEvents5_Top2_2, x_2);

		

		

	(idEvents5_Events5, idEvents5_Top1, y, idEvents5_Top2, x, z) 
	= (idEvents5_Events5_1, idEvents5_Top1_2, y_2, idEvents5_Top2_3, x_3, z_2);
	

	tel

	until true restart POINTEvents5_Events5



tel


--***************************************************State :Events5_Events5 Automaton***************************************************

node Events5_Events5(E:bool)

returns (y:real;
	x:real;
	z:real);


var y_1: real;

	x_1: real;

	z_1: real;

	F, F_1: bool;

	idEvents5_Events5, idEvents5_Events5_1: int;

	idEvents5_Top2, idEvents5_Top2_1: int;

	idEvents5_Top1, idEvents5_Top1_1: int;

	let

	y_1 = 0.0 -> pre y;

	x_1 = 0.0 -> pre x;

	z_1 = 0.0 -> pre z;

	F_1 = false -> pre F;

	idEvents5_Events5_1 = 0 -> pre idEvents5_Events5;

	idEvents5_Top2_1 = 0 -> pre idEvents5_Top2;

	idEvents5_Top1_1 = 0 -> pre idEvents5_Top1;

	



	(idEvents5_Events5, idEvents5_Top1, y, idEvents5_Top2, x, z)
	 = 

	 if E then Events5_Events5_node(idEvents5_Events5_1, idEvents5_Top1_1, y_1, idEvents5_Top2_1, x_1, E, F, z_1)

	 else (idEvents5_Events5_1, idEvents5_Top1_1, y_1, idEvents5_Top2_1, x_1, z_1);

	


--unused outputs
	F = false;

	

tel



node Events5 (E_1_1 : real)
returns (y_1_1 : real;
	x_2_1 : real;
	z_3_1 : real); 
var
	Events5_1_1 : real; Events5_2_1 : real; Events5_3_1 : real;
	E_1_1_event: bool;
let 
	E_1_1_event = false -> ((pre(E_1_1) > 0.0 and E_1_1 <= 0.0) or (pre(E_1_1) <= 0.0 and E_1_1 > 0.0));
	(Events5_1_1, Events5_2_1, Events5_3_1) =  Events5_Events5(E_1_1_event);
	y_1_1 = Events5_1_1;
	x_2_1 = Events5_2_1;
	z_3_1 = Events5_3_1;
tel

