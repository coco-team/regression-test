-- This file has been generated by cocoSim


-- System nodes




node Duration_DurationJunction1514__To__Duration_DurationJunction1516_1_Condition_Action(pre_c:int;
	c_1:int)

returns (c:int);


var 	c_2:int;


let



	c_2 
	= pre_c+1;
	

	(c) 
	= (c_2);
	

tel









node Duration_DurationJunction1513__To__Duration_DurationJunction1515_2_Condition_Action(c_1:int)

returns (c:int);


var 	c_2:int;


let



	c_2 
	= 0;
	

	(c) 
	= (c_2);
	

tel



--***************************************************State :Duration_Duration Automaton***************************************************

node Duration_Duration_node(idDuration_Duration_1:int;
	p:bool;
	c_1:int;
	pre_c:int)

returns (idDuration_Duration:int;
	c:int);


let

	 automaton duration_duration

	state POINTDuration_Duration:
	unless (idDuration_Duration_1=0) restart POINT__TO__DURATION_DURATIONJUNCTION1513_1



	let

		(idDuration_Duration, c) 
	= (idDuration_Duration_1, c_1);
	

	tel



	state POINT__TO__DURATION_DURATIONJUNCTION1513_1:

	 var 	c_2, c_3:int;
	let

		








		-- condition Action : c=pre_c+1;
		
		(c_2) 
	= 
		 if (( p )) then 
		Duration_DurationJunction1514__To__Duration_DurationJunction1516_1_Condition_Action(pre_c, c_1)
		 else (c_1);
		





		-- condition Action : c=0;
		
		(c_3) 
	= Duration_DurationJunction1513__To__Duration_DurationJunction1515_2_Condition_Action(c_1);
		

	(idDuration_Duration, c) 
	= 
		 if (( p )) then 
		(idDuration_Duration_1, c_2)
		 else (idDuration_Duration_1, c_3);


	tel

	until true restart POINTDuration_Duration



tel


--***************************************************State :Duration_Duration Automaton***************************************************

node BSCU_Duration(p:bool;
	pre_c:int)

returns (c:int);


var c_1: int;

	idDuration_Duration, idDuration_Duration_1: int;

	let

	c_1 = 0 -> pre c;

	idDuration_Duration_1 = 0 -> pre idDuration_Duration;

	



	(idDuration_Duration, c)
	 = Duration_Duration_node(idDuration_Duration_1, p, c_1, pre_c);


--unused outputs
	

tel







node Brake_Mode_Brake_ModeJunction1495__To__Brake_Mode_Brake_ModeJunction1497_2_Condition_Action(pre_mode:int;
	r_1:int)

returns (r:int);


var 	r_2:int;


let



	r_2 
	= pre_mode;
	

	(r) 
	= (r_2);
	

tel








node Brake_Mode_Brake_ModeJunction1492__To__Brake_Mode_Brake_ModeJunction1500_1_Condition_Action(LO:int;
	r_1:int)

returns (r:int);


var 	r_2:int;


let



	r_2 
	= LO;
	

	(r) 
	= (r_2);
	

tel







node Brake_Mode_Brake_ModeJunction1496__To__Brake_Mode_Brake_ModeJunction1498_1_Condition_Action(MAX:int;
	r_1:int)

returns (r:int);


var 	r_2:int;


let



	r_2 
	= MAX;
	

	(r) 
	= (r_2);
	

tel








node Brake_Mode_Brake_ModeJunction1490__To__Brake_Mode_Brake_ModeJunction1501_1_Condition_Action(MANUAL:int;
	r_1:int)

returns (r:int);


var 	r_2:int;


let



	r_2 
	= MANUAL;
	

	(r) 
	= (r_2);
	

tel







node Brake_Mode_Brake_ModeJunction1494__To__Brake_Mode_Brake_ModeJunction1499_1_Condition_Action(MED:int;
	r_1:int)

returns (r:int);


var 	r_2:int;


let



	r_2 
	= MED;
	

	(r) 
	= (r_2);
	

tel









--***************************************************State :Brake_Mode_Brake_Mode Automaton***************************************************

node Brake_Mode_Brake_Mode_node(idBrake_Mode_Brake_Mode_1:int;
	pre_mode:int;
	LO:int;
	rise_lo:bool;
	MED:int;
	rise_med:bool;
	MAX:int;
	rise_max:bool;
	MANUAL:int;
	r_1:int)

returns (idBrake_Mode_Brake_Mode:int;
	r:int);


let

	 automaton brake_mode_brake_mode

	state POINTBrake_Mode_Brake_Mode:
	unless (idBrake_Mode_Brake_Mode_1=0) restart POINT__TO__BRAKE_MODE_BRAKE_MODEJUNCTION1489_1



	let

		(idBrake_Mode_Brake_Mode, r) 
	= (idBrake_Mode_Brake_Mode_1, r_1);
	

	tel



	state POINT__TO__BRAKE_MODE_BRAKE_MODEJUNCTION1489_1:

	 var 	r_2, r_3, r_4, r_5, r_6:int;
	let

		














		-- condition Action : r=MANUAL;
		
		(r_2) 
	= 
		 if (( ((pre_mode=LO)&&rise_lo)||((pre_mode=MED)&&rise_med)||((pre_mode=MAX)&&rise_max) )) then 
		Brake_Mode_Brake_ModeJunction1490__To__Brake_Mode_Brake_ModeJunction1501_1_Condition_Action(MANUAL, r_1)
		 else (r_1);
		















		-- condition Action : r=LO;
		
		(r_3) 
	= 
		 if (( (pre_mode!=LO)&&rise_lo )) then 
		Brake_Mode_Brake_ModeJunction1492__To__Brake_Mode_Brake_ModeJunction1500_1_Condition_Action(LO, r_1)
		 else (r_1);
		













		-- condition Action : r=MED;
		
		(r_4) 
	= 
		 if (( (pre_mode!=MED)&&rise_med )) then 
		Brake_Mode_Brake_ModeJunction1494__To__Brake_Mode_Brake_ModeJunction1499_1_Condition_Action(MED, r_1)
		 else (r_1);
		











		-- condition Action : r=MAX;
		
		(r_5) 
	= 
		 if (( (pre_mode!=MAX)&&rise_max )) then 
		Brake_Mode_Brake_ModeJunction1496__To__Brake_Mode_Brake_ModeJunction1498_1_Condition_Action(MAX, r_1)
		 else (r_1);
		





		-- condition Action : r=pre_mode;
		
		(r_6) 
	= Brake_Mode_Brake_ModeJunction1495__To__Brake_Mode_Brake_ModeJunction1497_2_Condition_Action(pre_mode, r_1);
		

	(idBrake_Mode_Brake_Mode, r) 
	= 
		 if (( ((pre_mode=LO)&&rise_lo)||((pre_mode=MED)&&rise_med)||((pre_mode=MAX)&&rise_max) )) then 
		(idBrake_Mode_Brake_Mode_1, r_2)
		 else
		 if (( (pre_mode!=LO)&&rise_lo )) then 
		(idBrake_Mode_Brake_Mode_1, r_3)
		 else
		 if (( (pre_mode!=MED)&&rise_med )) then 
		(idBrake_Mode_Brake_Mode_1, r_4)
		 else
		 if (( (pre_mode!=MAX)&&rise_max )) then 
		(idBrake_Mode_Brake_Mode_1, r_5)
		 else (idBrake_Mode_Brake_Mode_1, r_6);


	tel

	until true restart POINTBrake_Mode_Brake_Mode



tel


--***************************************************State :Brake_Mode_Brake_Mode Automaton***************************************************

node BSCU_Brake_Mode(pre_mode:int;
	rise_lo:bool;
	rise_med:bool;
	rise_max:bool)

returns (r:int);


var r_1: int;

	idBrake_Mode_Brake_Mode, idBrake_Mode_Brake_Mode_1: int;

		MED: int;

		MAX: int;

		LO: int;

		MANUAL: int;

	let

	r_1 = 0 -> pre r;

	idBrake_Mode_Brake_Mode_1 = 0 -> pre idBrake_Mode_Brake_Mode;

	MED = 3;

	MAX = 4;

	LO = 2;

	MANUAL = 1;

	



	(idBrake_Mode_Brake_Mode, r)
	 = Brake_Mode_Brake_Mode_node(idBrake_Mode_Brake_Mode_1, pre_mode, LO, rise_lo, MED, rise_med, MAX, rise_max, MANUAL, r_1);


--unused outputs
	

tel








node Brake_Cmd_Brake_CmdJunction1452__To__Brake_Cmd_Brake_CmdJunction1458_1_Condition_Action(BRAKE_PRESSURE_MED:int;
	r_1:int)

returns (r:int);


var 	r_2:int;


let



	r_2 
	= BRAKE_PRESSURE_MED;
	

	(r) 
	= (r_2);
	

tel






node Brake_Cmd_Brake_CmdJunction1455__To__Brake_Cmd_Brake_CmdJunction1456_1_Condition_Action(pedal:int;
	r_1:int)

returns (r:int);


var 	r_2:int;


let



	r_2 
	= pedal;
	

	(r) 
	= (r_2);
	

tel






node Brake_Cmd_Brake_CmdJunction1450__To__Brake_Cmd_Brake_CmdJunction1459_1_Condition_Action(BRAKE_PRESSURE_LO:int;
	r_1:int)

returns (r:int);


var 	r_2:int;


let



	r_2 
	= BRAKE_PRESSURE_LO;
	

	(r) 
	= (r_2);
	

tel














node Brake_Cmd_Brake_CmdJunction1454__To__Brake_Cmd_Brake_CmdJunction1457_1_Condition_Action(BRAKE_PRESSURE_MAX:int;
	r_1:int)

returns (r:int);


var 	r_2:int;


let



	r_2 
	= BRAKE_PRESSURE_MAX;
	

	(r) 
	= (r_2);
	

tel




--***************************************************State :Brake_Cmd_Brake_Cmd Automaton***************************************************

node Brake_Cmd_Brake_Cmd_node(idBrake_Cmd_Brake_Cmd_1:int;
	mode:int;
	LO:int;
	BRAKE_PRESSURE_LO:int;
	r_1:int;
	MED:int;
	BRAKE_PRESSURE_MED:int;
	MAX:int;
	BRAKE_PRESSURE_MAX:int;
	pedal:int)

returns (idBrake_Cmd_Brake_Cmd:int;
	r:int);


let

	 automaton brake_cmd_brake_cmd

	state POINTBrake_Cmd_Brake_Cmd:
	unless (idBrake_Cmd_Brake_Cmd_1=0) restart POINT__TO__BRAKE_CMD_BRAKE_CMDJUNCTION1449_1



	let

		(idBrake_Cmd_Brake_Cmd, r) 
	= (idBrake_Cmd_Brake_Cmd_1, r_1);
	

	tel



	state POINT__TO__BRAKE_CMD_BRAKE_CMDJUNCTION1449_1:

	 var 	r_2, r_3, r_4, r_5:int;
	let

		












		-- condition Action : r=BRAKE_PRESSURE_LO;
		
		(r_2) 
	= 
		 if (( mode=LO )) then 
		Brake_Cmd_Brake_CmdJunction1450__To__Brake_Cmd_Brake_CmdJunction1459_1_Condition_Action(BRAKE_PRESSURE_LO, r_1)
		 else (r_1);
		













		-- condition Action : r=BRAKE_PRESSURE_MED;
		
		(r_3) 
	= 
		 if (( mode=MED )) then 
		Brake_Cmd_Brake_CmdJunction1452__To__Brake_Cmd_Brake_CmdJunction1458_1_Condition_Action(BRAKE_PRESSURE_MED, r_1)
		 else (r_1);
		











		-- condition Action : r=BRAKE_PRESSURE_MAX;
		
		(r_4) 
	= 
		 if (( mode=MAX )) then 
		Brake_Cmd_Brake_CmdJunction1454__To__Brake_Cmd_Brake_CmdJunction1457_1_Condition_Action(BRAKE_PRESSURE_MAX, r_1)
		 else (r_1);
		







		-- condition Action : r=pedal;
		
		(r_5) 
	= Brake_Cmd_Brake_CmdJunction1455__To__Brake_Cmd_Brake_CmdJunction1456_1_Condition_Action(pedal, r_1);
		

	(idBrake_Cmd_Brake_Cmd, r) 
	= 
		 if (( mode=LO )) then 
		(idBrake_Cmd_Brake_Cmd_1, r_2)
		 else
		 if (( mode=MED )) then 
		(idBrake_Cmd_Brake_Cmd_1, r_3)
		 else
		 if (( mode=MAX )) then 
		(idBrake_Cmd_Brake_Cmd_1, r_4)
		 else (idBrake_Cmd_Brake_Cmd_1, r_5);


	tel

	until true restart POINTBrake_Cmd_Brake_Cmd



tel


--***************************************************State :Brake_Cmd_Brake_Cmd Automaton***************************************************

node BSCU_Brake_Cmd(mode:int;
	pedal:int)

returns (r:int);


var r_1: int;

	idBrake_Cmd_Brake_Cmd, idBrake_Cmd_Brake_Cmd_1: int;

		MED: int;

		BRAKE_PRESSURE_LO: int;

		MAX: int;

		BRAKE_PRESSURE_MAX: int;

		MANUAL: int;

		BRAKE_PRESSURE_MED: int;

		LO: int;

	let

	r_1 = 0 -> pre r;

	idBrake_Cmd_Brake_Cmd_1 = 0 -> pre idBrake_Cmd_Brake_Cmd;

	MED = 3;

	BRAKE_PRESSURE_LO = 170;

	MAX = 4;

	BRAKE_PRESSURE_MAX = 510;

	MANUAL = 1;

	BRAKE_PRESSURE_MED = 340;

	LO = 2;

	



	(idBrake_Cmd_Brake_Cmd, r)
	 = Brake_Cmd_Brake_Cmd_node(idBrake_Cmd_Brake_Cmd_1, mode, LO, BRAKE_PRESSURE_LO, r_1, MED, BRAKE_PRESSURE_MED, MAX, BRAKE_PRESSURE_MAX, pedal);


--unused outputs
	

tel










node Active_State_Active_StateJunction1543__To__Active_State_Active_StateJunction1545_2_Condition_Action(pre_Active:bool;
	Active_1:bool)

returns (Active:bool);


var 	Active_2:bool;


let



	Active_2 
	= pre_Active;
	

	(Active) 
	= (Active_2);
	

tel







node Active_State_Active_StateJunction1544__To__Active_State_Active_StateJunction1546_1_Condition_Action(Active_1:bool)

returns (Active:bool);


var 	Active_2:bool;


let



	Active_2 
	= true;
	

	(Active) 
	= (Active_2);
	

tel








node Active_State_Active_StateJunction1540__To__Active_State_Active_StateJunction1548_1_Condition_Action(Active_1:bool)

returns (Active:bool);


var 	Active_2:bool;


let



	Active_2 
	= false;
	

	(Active) 
	= (Active_2);
	

tel









node Active_State_Active_StateJunction1542__To__Active_State_Active_StateJunction1547_1_Condition_Action(Active_1:bool)

returns (Active:bool);


var 	Active_2:bool;


let



	Active_2 
	= false;
	

	(Active) 
	= (Active_2);
	

tel



--***************************************************State :Active_State_Active_State Automaton***************************************************

node Active_State_Active_State_node(idActive_State_Active_State_1:int;
	Error:bool;
	Active_1:bool;
	pre_Active:bool;
	Sync_From_Active:bool;
	Sync_From_Error:bool;
	Primary_Side:bool)

returns (idActive_State_Active_State:int;
	Active:bool);


let

	 automaton active_state_active_state

	state POINTActive_State_Active_State:
	unless (idActive_State_Active_State_1=0) restart POINT__TO__ACTIVE_STATE_ACTIVE_STATEJUNCTION1539_1



	let

		(idActive_State_Active_State, Active) 
	= (idActive_State_Active_State_1, Active_1);
	

	tel



	state POINT__TO__ACTIVE_STATE_ACTIVE_STATEJUNCTION1539_1:

	 var 	Active_2, Active_3, Active_4, Active_5:bool;
	let

		












		-- condition Action : Active=false;
		
		(Active_2) 
	= 
		 if (( Error )) then 
		Active_State_Active_StateJunction1540__To__Active_State_Active_StateJunction1548_1_Condition_Action(Active_1)
		 else (Active_1);
		













		-- condition Action : Active=false;
		
		(Active_3) 
	= 
		 if (( pre_Active&&Sync_From_Active&&(not Sync_From_Error)&&(not Primary_Side) )) then 
		Active_State_Active_StateJunction1542__To__Active_State_Active_StateJunction1547_1_Condition_Action(Active_1)
		 else (Active_1);
		











		-- condition Action : Active=true;
		
		(Active_4) 
	= 
		 if (( (not pre_Active)&&((not Sync_From_Active)||Sync_From_Error) )) then 
		Active_State_Active_StateJunction1544__To__Active_State_Active_StateJunction1546_1_Condition_Action(Active_1)
		 else (Active_1);
		





		-- condition Action : Active=pre_Active;
		
		(Active_5) 
	= Active_State_Active_StateJunction1543__To__Active_State_Active_StateJunction1545_2_Condition_Action(pre_Active, Active_1);
		

	(idActive_State_Active_State, Active) 
	= 
		 if (( Error )) then 
		(idActive_State_Active_State_1, Active_2)
		 else
		 if (( pre_Active&&Sync_From_Active&&(not Sync_From_Error)&&(not Primary_Side) )) then 
		(idActive_State_Active_State_1, Active_3)
		 else
		 if (( (not pre_Active)&&((not Sync_From_Active)||Sync_From_Error) )) then 
		(idActive_State_Active_State_1, Active_4)
		 else (idActive_State_Active_State_1, Active_5);


	tel

	until true restart POINTActive_State_Active_State



tel


--***************************************************State :Active_State_Active_State Automaton***************************************************

node BSCU_Active_State(Sync_From_Active:bool;
	pre_Active:bool;
	Error:bool;
	Sync_From_Error:bool)

returns (Active:bool);


var Active_1: bool;

	idActive_State_Active_State, idActive_State_Active_State_1: int;

		Primary_Side: bool;

	let

	Active_1 = false -> pre Active;

	idActive_State_Active_State_1 = 0 -> pre idActive_State_Active_State;

	Primary_Side = false;

	



	(idActive_State_Active_State, Active)
	 = Active_State_Active_State_node(idActive_State_Active_State_1, Error, Active_1, pre_Active, Sync_From_Active, Sync_From_Error, Primary_Side);


--unused outputs
	

tel



node BSCU (p_1_1 : bool; pre_c_1_1 : int; pre_mode_1_1 : int; rise_lo_1_1 : bool; rise_med_1_1 : bool; rise_max_1_1 : bool; mode_1_1 : int; pedal_1_1 : int; Sync_From_Active_1_1 : bool; pre_Active_1_1 : bool; Error_1_1 : bool; Sync_From_Error_1_1 : bool)
returns (c_1_1 : int;
	r_2_1 : int;
	r1_3_1 : int;
	Active_4_1 : bool); 
var
	Active_State_1_1 : bool;
	Brake_Cmd_1_1 : int;
	Brake_Mode_1_1 : int;
	Duration_1_1 : int;
let 
	Active_State_1_1 =  BSCU_Active_State(Sync_From_Active_1_1, pre_Active_1_1, Error_1_1, Sync_From_Error_1_1);
	Brake_Cmd_1_1 =  BSCU_Brake_Cmd(mode_1_1, pedal_1_1);
	Brake_Mode_1_1 =  BSCU_Brake_Mode(pre_mode_1_1, rise_lo_1_1, rise_med_1_1, rise_max_1_1);
	Duration_1_1 =  BSCU_Duration(p_1_1, pre_c_1_1);
	c_1_1 = Duration_1_1;
	r_2_1 = Brake_Mode_1_1;
	r1_3_1 = Brake_Cmd_1_1;
	Active_4_1 = Active_State_1_1;
tel

