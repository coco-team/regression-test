-- This file has been generated by cocoSim


-- System nodes




node Junctions7_A__To__Junctions7_Junctions7Junction1654_1_Condition_Action(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel








node Junctions7_A__To__Junctions7_Junctions7Junction1654_2_Condition_Action(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  - 1;
	

	(y) 
	= (y_2);
	

tel






-- Entry action for state :Junctions7_B
node Junctions7_B_en(idJunctions7_Junctions7_1:int;
	isInner:bool)

returns (idJunctions7_Junctions7:int);


var 	idJunctions7_Junctions7_2:int;


let



	-- set state as active 
	idJunctions7_Junctions7_2 
	= 1651;
	

	(idJunctions7_Junctions7) 
	= (idJunctions7_Junctions7_2);
	

tel





-- Exit action for state :Junctions7_B
node Junctions7_B_ex(idJunctions7_Junctions7_1:int;
	isInner:bool)

returns (idJunctions7_Junctions7:int);


var 	idJunctions7_Junctions7_2:int;


let



	-- set state as inactive 
	idJunctions7_Junctions7_2
	 = if (not isInner) then 0 else idJunctions7_Junctions7_1;


	(idJunctions7_Junctions7) 
	= (idJunctions7_Junctions7_1);
	

tel






-- Entry action for state :Junctions7_A
node Junctions7_A_en(idJunctions7_Junctions7_1:int;
	isInner:bool)

returns (idJunctions7_Junctions7:int);


var 	idJunctions7_Junctions7_2:int;


let



	-- set state as active 
	idJunctions7_Junctions7_2 
	= 1650;
	

	(idJunctions7_Junctions7) 
	= (idJunctions7_Junctions7_2);
	

tel





-- Exit action for state :Junctions7_A
node Junctions7_A_ex(idJunctions7_Junctions7_1:int;
	isInner:bool)

returns (idJunctions7_Junctions7:int);


var 	idJunctions7_Junctions7_2:int;


let



	-- set state as inactive 
	idJunctions7_Junctions7_2
	 = if (not isInner) then 0 else idJunctions7_Junctions7_1;


	(idJunctions7_Junctions7) 
	= (idJunctions7_Junctions7_1);
	

tel


--***************************************************State :Junctions7_Junctions7 Automaton***************************************************

node Junctions7_Junctions7_node(idJunctions7_Junctions7_1:int;
	x:int;
	y_1:int)

returns (idJunctions7_Junctions7:int;
	y:int);


let

	 automaton junctions7_junctions7

	state POINTJunctions7_Junctions7:
	unless (idJunctions7_Junctions7_1=0) restart POINT__TO__JUNCTIONS7_A_1



	unless (idJunctions7_Junctions7_1=1650) and ( x!=0 ) restart JUNCTIONS7_A__TO__JUNCTIONS7_JUNCTIONS7JUNCTION1654_1



	unless (idJunctions7_Junctions7_1=1650) and ( x=0 ) restart JUNCTIONS7_A__TO__JUNCTIONS7_JUNCTIONS7JUNCTION1654_2



	unless (idJunctions7_Junctions7_1=1650) restart JUNCTIONS7_A_IDL

	unless (idJunctions7_Junctions7_1=1651) restart JUNCTIONS7_B_IDL

	let

		(idJunctions7_Junctions7, y) 
	= (idJunctions7_Junctions7_1, y_1);
	

	tel



	state POINT__TO__JUNCTIONS7_A_1:

	 var 	idJunctions7_Junctions7_2:int;
	let

		-- transition trace :
	--POINT__To__Junctions7_A_1
		(idJunctions7_Junctions7_2) 
	= Junctions7_A_en(idJunctions7_Junctions7_1, false);
		

	(idJunctions7_Junctions7) 
	=  (idJunctions7_Junctions7_2);

	--add unused variables
	(y) 
	= (y_1);
	

	tel

	until true restart POINTJunctions7_Junctions7



	state JUNCTIONS7_A__TO__JUNCTIONS7_JUNCTIONS7JUNCTION1654_1:

	 var 	idJunctions7_Junctions7_2, idJunctions7_Junctions7_3:int;
	y_2:int;
	let

		

-- transition trace :
	--Junctions7_A__To__Junction1654_1, Junction1654__To__Junctions7_B_1
		-- condition Action : y++
		
		(y_2) 
	= Junctions7_A__To__Junctions7_Junctions7Junction1654_1_Condition_Action(y_1);
		

		(idJunctions7_Junctions7_2) 
	= 
		 if (( x<2 )) then 
		Junctions7_A_ex(idJunctions7_Junctions7_1, false)
		 else (idJunctions7_Junctions7_1);
		

		(idJunctions7_Junctions7_3) 
	= 
		 if (( x<2 )) then 
		Junctions7_B_en(idJunctions7_Junctions7_2, false)
		 else (idJunctions7_Junctions7_2);
		

	(idJunctions7_Junctions7, y) 
	= 
		 if (( x<2 )) then 
		(idJunctions7_Junctions7_3, y_2)
		 else (idJunctions7_Junctions7_1, y_2);


	tel

	until true restart POINTJunctions7_Junctions7



	state JUNCTIONS7_A__TO__JUNCTIONS7_JUNCTIONS7JUNCTION1654_2:

	 var 	idJunctions7_Junctions7_2, idJunctions7_Junctions7_3:int;
	y_2:int;
	let

		

-- transition trace :
	--Junctions7_A__To__Junction1654_2, Junction1654__To__Junctions7_B_1
		-- condition Action : y--
		
		(y_2) 
	= Junctions7_A__To__Junctions7_Junctions7Junction1654_2_Condition_Action(y_1);
		

		(idJunctions7_Junctions7_2) 
	= 
		 if (( x<2 )) then 
		Junctions7_A_ex(idJunctions7_Junctions7_1, false)
		 else (idJunctions7_Junctions7_1);
		

		(idJunctions7_Junctions7_3) 
	= 
		 if (( x<2 )) then 
		Junctions7_B_en(idJunctions7_Junctions7_2, false)
		 else (idJunctions7_Junctions7_2);
		

	(idJunctions7_Junctions7, y) 
	= 
		 if (( x<2 )) then 
		(idJunctions7_Junctions7_3, y_2)
		 else (idJunctions7_Junctions7_1, y_2);


	tel

	until true restart POINTJunctions7_Junctions7



	state JUNCTIONS7_A_IDL:

	 	let

		

	(idJunctions7_Junctions7, y) 
	= (idJunctions7_Junctions7_1, y_1);
	

	tel

	until true restart POINTJunctions7_Junctions7



	state JUNCTIONS7_B_IDL:

	 	let

		

	(idJunctions7_Junctions7, y) 
	= (idJunctions7_Junctions7_1, y_1);
	

	tel

	until true restart POINTJunctions7_Junctions7



tel


--***************************************************State :Junctions7_Junctions7 Automaton***************************************************

node Junctions7_Junctions7(x:int)

returns (y:int);


var y_1: int;

	idJunctions7_Junctions7, idJunctions7_Junctions7_1: int;

	let

	y_1 = 0 -> pre y;

	idJunctions7_Junctions7_1 = 0 -> pre idJunctions7_Junctions7;

	



	(idJunctions7_Junctions7, y)
	 = Junctions7_Junctions7_node(idJunctions7_Junctions7_1, x, y_1);


--unused outputs
	

tel



node Junctions7 (x_1_1 : int)
returns (y_1_1 : int); 
var
	Junctions7_1_1 : int;
let 
	Junctions7_1_1 =  Junctions7_Junctions7(x_1_1);
	y_1_1 = Junctions7_1_1;
tel

