-- This file has been generated by CoCoSim


-- System nodes




node N1_B301__To__N1_A300_1_Condition_Action(x_1:real)

returns (x:real);


var 	x_2:real;


let



	x_2 
	=  x_1 -1.;
	

	(x) 
	= (x_2);
	

tel






node N1_A300__To__N1_B301_1_Condition_Action(x_1:real)

returns (x:real);


var 	x_2:real;


let



	x_2 
	=  x_1 +1.;
	

	(x) 
	= (x_2);
	

tel






node N2_C302__To__N2_D303_1_Condition_Action(x_1:real)

returns (x:real);


var 	x_2:real;


let



	x_2 
	=  x_1 +100.;
	

	(x) 
	= (x_2);
	

tel










node N2_D303__To__N2_C302_1_Condition_Action(x_1:real)

returns (x:real);


var 	x_2:real;


let



	x_2 
	=  x_1 -100.;
	

	(x) 
	= (x_2);
	

tel








-- Entry action for state :N2_C302
node N2_C302_en(idTOP_N2299_1:int;
	x_1:real;
	isInner:bool)

returns (idTOP_N2299:int;
	x:real);


var 	idTOP_N2299_2:int;
	x_2:real;


let



	-- set state as active 
	idTOP_N2299_2 
	= 302;
	

	x_2 
	= if (not isInner) then  x_1 +1000.
	 else x_1;
	

	(idTOP_N2299, x) 
	= (idTOP_N2299_2, x_2);
	

tel





-- Exit action for state :N2_C302
node N2_C302_ex(idTOP_N2299_1:int;
	isInner:bool)

returns (idTOP_N2299:int);


var 	idTOP_N2299_2:int;


let



	-- set state as inactive 
	idTOP_N2299_2
	 = if (not isInner) then 0 else idTOP_N2299_1;


	(idTOP_N2299) 
	= (idTOP_N2299_1);
	

tel






-- Entry action for state :N2_D303
node N2_D303_en(idTOP_N2299_1:int;
	x_1:real;
	isInner:bool)

returns (idTOP_N2299:int;
	x:real);


var 	idTOP_N2299_2:int;
	x_2:real;


let



	-- set state as active 
	idTOP_N2299_2 
	= 303;
	

	x_2 
	= if (not isInner) then  x_1 -1000.
	 else x_1;
	

	(idTOP_N2299, x) 
	= (idTOP_N2299_2, x_2);
	

tel





-- Exit action for state :N2_D303
node N2_D303_ex(idTOP_N2299_1:int;
	isInner:bool)

returns (idTOP_N2299:int);


var 	idTOP_N2299_2:int;


let



	-- set state as inactive 
	idTOP_N2299_2
	 = if (not isInner) then 0 else idTOP_N2299_1;


	(idTOP_N2299) 
	= (idTOP_N2299_1);
	

tel






-- Entry action for state :TOP_N2299
node TOP_N2299_en(idTOP_N2299_1:int;
	idHierarchy1_TOP304_1:int;
	x_1:real;
	isInner:bool)

returns (idTOP_N2299:int;
	idHierarchy1_TOP304:int;
	x:real);


var 	idTOP_N2299_2, idTOP_N2299_3, idTOP_N2299_4, idTOP_N2299_5, idTOP_N2299_6:int;
	idHierarchy1_TOP304_2, idHierarchy1_TOP304_3, idHierarchy1_TOP304_4:int;
	x_2, x_3, x_4, x_5, x_6, x_7:real;


let



	-- set state as active 
	idHierarchy1_TOP304_2 
	= 299;
	

	x_2 
	= if (not isInner) then  x_1 +100000.
	 else x_1;
	

	
-- transition trace :
	--POINT__To__N2_C302_1
		(idTOP_N2299_2, x_3) 
	= N2_C302_en(idTOP_N2299_1, x_2, false);
		

	(idTOP_N2299_3, idHierarchy1_TOP304_3, x_4) 
	= 

	if ( idTOP_N2299_1 = 0) then

	 (idTOP_N2299_2, idHierarchy1_TOP304_2, x_3)

	 else(idTOP_N2299_1, idHierarchy1_TOP304_2, x_2);

	

	(idTOP_N2299_4, x_5) 
	= 
	if ( idTOP_N2299_1 = 302) then
	N2_C302_en(idTOP_N2299_1, x_2, false)
	 else (idTOP_N2299_1, x_2);

	

	(idTOP_N2299_5, x_6) 
	= 
	if ( idTOP_N2299_1 = 303) then
	N2_D303_en(idTOP_N2299_1, x_2, false)
	 else (idTOP_N2299_1, x_2);

	

	(idTOP_N2299_6, idHierarchy1_TOP304_4, x_7) 
	= 
		 if ( idTOP_N2299_1 = 0) then 
		(idTOP_N2299_3, idHierarchy1_TOP304_3, x_4)
		 else
		 if ( idTOP_N2299_1 = 302) then 
		(idTOP_N2299_4, idHierarchy1_TOP304_3, x_5)
		 else
		 if ( idTOP_N2299_1 = 303) then 
		(idTOP_N2299_5, idHierarchy1_TOP304_3, x_6)
		 else (idTOP_N2299_1, idHierarchy1_TOP304_2, x_2);


	(idTOP_N2299, idHierarchy1_TOP304, x) 
	= (idTOP_N2299_6, idHierarchy1_TOP304_4, x_7);
	

tel





-- Exit action for state :TOP_N2299
node TOP_N2299_ex(idTOP_N2299_1:int;
	x_1:real;
	idHierarchy1_TOP304_1:int;
	isInner:bool)

returns (idTOP_N2299:int;
	x:real;
	idHierarchy1_TOP304:int);


var 	idTOP_N2299_2, idTOP_N2299_3, idTOP_N2299_4, idTOP_N2299_5:int;
	x_2:real;
	idHierarchy1_TOP304_2:int;


let



	
	(idTOP_N2299_2) 
	= 
	if ( idTOP_N2299_1 = 302) then
	N2_C302_ex(idTOP_N2299_1, false)
	 else (idTOP_N2299_1);

	

	(idTOP_N2299_3) 
	= 
	if ( idTOP_N2299_1 = 303) then
	N2_D303_ex(idTOP_N2299_1, false)
	 else (idTOP_N2299_1);

	

	(idTOP_N2299_4) 
	= 
		 if ( idTOP_N2299_1 = 302) then 
		(idTOP_N2299_2)
		 else
		 if ( idTOP_N2299_1 = 303) then 
		(idTOP_N2299_3)
		 else (idTOP_N2299_1);


	x_2 
	= if (not isInner) then  x_1 -100000.
	 else x_1;
	

	-- set state as inactive 
	idHierarchy1_TOP304_2
	 = if (not isInner) then 0 else idHierarchy1_TOP304_1;

	idTOP_N2299_5 
	= 0;
	

	(idTOP_N2299, x, idHierarchy1_TOP304) 
	= (idTOP_N2299_5, x_2, idHierarchy1_TOP304_1);
	

tel






-- Entry action for state :N1_A300
node N1_A300_en(idTOP_N1298_1:int;
	x_1:real;
	isInner:bool)

returns (idTOP_N1298:int;
	x:real);


var 	idTOP_N1298_2:int;
	x_2:real;


let



	-- set state as active 
	idTOP_N1298_2 
	= 300;
	

	x_2 
	= if (not isInner) then  x_1 +10.
	 else x_1;
	

	(idTOP_N1298, x) 
	= (idTOP_N1298_2, x_2);
	

tel





-- Exit action for state :N1_A300
node N1_A300_ex(idTOP_N1298_1:int;
	isInner:bool)

returns (idTOP_N1298:int);


var 	idTOP_N1298_2:int;


let



	-- set state as inactive 
	idTOP_N1298_2
	 = if (not isInner) then 0 else idTOP_N1298_1;


	(idTOP_N1298) 
	= (idTOP_N1298_1);
	

tel






-- Entry action for state :N1_B301
node N1_B301_en(idTOP_N1298_1:int;
	x_1:real;
	isInner:bool)

returns (idTOP_N1298:int;
	x:real);


var 	idTOP_N1298_2:int;
	x_2:real;


let



	-- set state as active 
	idTOP_N1298_2 
	= 301;
	

	x_2 
	= if (not isInner) then  x_1 -10.
	 else x_1;
	

	(idTOP_N1298, x) 
	= (idTOP_N1298_2, x_2);
	

tel





-- Exit action for state :N1_B301
node N1_B301_ex(idTOP_N1298_1:int;
	isInner:bool)

returns (idTOP_N1298:int);


var 	idTOP_N1298_2:int;


let



	-- set state as inactive 
	idTOP_N1298_2
	 = if (not isInner) then 0 else idTOP_N1298_1;


	(idTOP_N1298) 
	= (idTOP_N1298_1);
	

tel






-- Entry action for state :TOP_N1298
node TOP_N1298_en(idTOP_N1298_1:int;
	idHierarchy1_TOP304_1:int;
	x_1:real;
	isInner:bool)

returns (idTOP_N1298:int;
	idHierarchy1_TOP304:int;
	x:real);


var 	idTOP_N1298_2, idTOP_N1298_3, idTOP_N1298_4, idTOP_N1298_5, idTOP_N1298_6:int;
	idHierarchy1_TOP304_2, idHierarchy1_TOP304_3, idHierarchy1_TOP304_4:int;
	x_2, x_3, x_4, x_5, x_6, x_7:real;


let



	-- set state as active 
	idHierarchy1_TOP304_2 
	= 298;
	

	x_2 
	= if (not isInner) then  x_1 +10000.
	 else x_1;
	

	
-- transition trace :
	--POINT__To__N1_A300_1
		(idTOP_N1298_2, x_3) 
	= N1_A300_en(idTOP_N1298_1, x_2, false);
		

	(idTOP_N1298_3, idHierarchy1_TOP304_3, x_4) 
	= 

	if ( idTOP_N1298_1 = 0) then

	 (idTOP_N1298_2, idHierarchy1_TOP304_2, x_3)

	 else(idTOP_N1298_1, idHierarchy1_TOP304_2, x_2);

	

	(idTOP_N1298_4, x_5) 
	= 
	if ( idTOP_N1298_1 = 300) then
	N1_A300_en(idTOP_N1298_1, x_2, false)
	 else (idTOP_N1298_1, x_2);

	

	(idTOP_N1298_5, x_6) 
	= 
	if ( idTOP_N1298_1 = 301) then
	N1_B301_en(idTOP_N1298_1, x_2, false)
	 else (idTOP_N1298_1, x_2);

	

	(idTOP_N1298_6, idHierarchy1_TOP304_4, x_7) 
	= 
		 if ( idTOP_N1298_1 = 0) then 
		(idTOP_N1298_3, idHierarchy1_TOP304_3, x_4)
		 else
		 if ( idTOP_N1298_1 = 300) then 
		(idTOP_N1298_4, idHierarchy1_TOP304_3, x_5)
		 else
		 if ( idTOP_N1298_1 = 301) then 
		(idTOP_N1298_5, idHierarchy1_TOP304_3, x_6)
		 else (idTOP_N1298_1, idHierarchy1_TOP304_2, x_2);


	(idTOP_N1298, idHierarchy1_TOP304, x) 
	= (idTOP_N1298_6, idHierarchy1_TOP304_4, x_7);
	

tel





-- Exit action for state :TOP_N1298
node TOP_N1298_ex(idTOP_N1298_1:int;
	x_1:real;
	idHierarchy1_TOP304_1:int;
	isInner:bool)

returns (idTOP_N1298:int;
	x:real;
	idHierarchy1_TOP304:int);


var 	idTOP_N1298_2, idTOP_N1298_3, idTOP_N1298_4, idTOP_N1298_5:int;
	x_2:real;
	idHierarchy1_TOP304_2:int;


let



	
	(idTOP_N1298_2) 
	= 
	if ( idTOP_N1298_1 = 300) then
	N1_A300_ex(idTOP_N1298_1, false)
	 else (idTOP_N1298_1);

	

	(idTOP_N1298_3) 
	= 
	if ( idTOP_N1298_1 = 301) then
	N1_B301_ex(idTOP_N1298_1, false)
	 else (idTOP_N1298_1);

	

	(idTOP_N1298_4) 
	= 
		 if ( idTOP_N1298_1 = 300) then 
		(idTOP_N1298_2)
		 else
		 if ( idTOP_N1298_1 = 301) then 
		(idTOP_N1298_3)
		 else (idTOP_N1298_1);


	x_2 
	= if (not isInner) then  x_1 -10000.
	 else x_1;
	

	-- set state as inactive 
	idHierarchy1_TOP304_2
	 = if (not isInner) then 0 else idHierarchy1_TOP304_1;

	idTOP_N1298_5 
	= 0;
	

	(idTOP_N1298, x, idHierarchy1_TOP304) 
	= (idTOP_N1298_5, x_2, idHierarchy1_TOP304_1);
	

tel






-- Entry action for state :Hierarchy1_TOP304
node Hierarchy1_TOP304_en(idHierarchy1_TOP304_1:int;
	idHierarchy1_Hierarchy1297_1:int;
	x_1:real;
	idTOP_N1298_1:int;
	idTOP_N2299_1:int;
	isInner:bool)

returns (idHierarchy1_TOP304:int;
	idHierarchy1_Hierarchy1297:int;
	x:real;
	idTOP_N1298:int;
	idTOP_N2299:int);


var 	idHierarchy1_TOP304_2, idHierarchy1_TOP304_3, idHierarchy1_TOP304_4, idHierarchy1_TOP304_5, idHierarchy1_TOP304_6:int;
	idHierarchy1_Hierarchy1297_2, idHierarchy1_Hierarchy1297_3, idHierarchy1_Hierarchy1297_4:int;
	x_2, x_3, x_4, x_5, x_6, x_7:real;
	idTOP_N1298_2, idTOP_N1298_3, idTOP_N1298_4, idTOP_N1298_5:int;
	idTOP_N2299_2, idTOP_N2299_3:int;


let



	-- set state as active 
	idHierarchy1_Hierarchy1297_2 
	= 304;
	

	x_2 
	= if (not isInner) then  x_1 +1000000.
	 else x_1;
	

	
-- transition trace :
	--POINT__To__TOP_N1298_1
		(idTOP_N1298_2, idHierarchy1_TOP304_2, x_3) 
	= TOP_N1298_en(idTOP_N1298_1, idHierarchy1_TOP304_1, x_2, false);
		

	(idHierarchy1_TOP304_3, idHierarchy1_Hierarchy1297_3, x_4, idTOP_N1298_3) 
	= 

	if ( idHierarchy1_TOP304_1 = 0) then

	 (idHierarchy1_TOP304_2, idHierarchy1_Hierarchy1297_2, x_3, idTOP_N1298_2)

	 else(idHierarchy1_TOP304_1, idHierarchy1_Hierarchy1297_2, x_2, idTOP_N1298_1);

	

	(idTOP_N1298_4, idHierarchy1_TOP304_4, x_5) 
	= 
	if ( idHierarchy1_TOP304_1 = 298) then
	TOP_N1298_en(idTOP_N1298_1, idHierarchy1_TOP304_1, x_2, false)
	 else (idTOP_N1298_1, idHierarchy1_TOP304_1, x_2);

	

	(idTOP_N2299_2, idHierarchy1_TOP304_5, x_6) 
	= 
	if ( idHierarchy1_TOP304_1 = 299) then
	TOP_N2299_en(idTOP_N2299_1, idHierarchy1_TOP304_1, x_2, false)
	 else (idTOP_N2299_1, idHierarchy1_TOP304_1, x_2);

	

	(idHierarchy1_TOP304_6, idHierarchy1_Hierarchy1297_4, x_7, idTOP_N1298_5, idTOP_N2299_3) 
	= 
		 if ( idHierarchy1_TOP304_1 = 0) then 
		(idHierarchy1_TOP304_3, idHierarchy1_Hierarchy1297_3, x_4, idTOP_N1298_3, idTOP_N2299_1)
		 else
		 if ( idHierarchy1_TOP304_1 = 298) then 
		(idHierarchy1_TOP304_4, idHierarchy1_Hierarchy1297_3, x_5, idTOP_N1298_4, idTOP_N2299_1)
		 else
		 if ( idHierarchy1_TOP304_1 = 299) then 
		(idHierarchy1_TOP304_5, idHierarchy1_Hierarchy1297_3, x_6, idTOP_N1298_1, idTOP_N2299_2)
		 else (idHierarchy1_TOP304_1, idHierarchy1_Hierarchy1297_2, x_2, idTOP_N1298_1, idTOP_N2299_1);


	(idHierarchy1_TOP304, idHierarchy1_Hierarchy1297, x, idTOP_N1298, idTOP_N2299) 
	= (idHierarchy1_TOP304_6, idHierarchy1_Hierarchy1297_4, x_7, idTOP_N1298_5, idTOP_N2299_3);
	

tel





-- Exit action for state :Hierarchy1_TOP304
node Hierarchy1_TOP304_ex(idTOP_N1298_1:int;
	x_1:real;
	idHierarchy1_TOP304_1:int;
	idTOP_N2299_1:int;
	idHierarchy1_Hierarchy1297_1:int;
	isInner:bool)

returns (idTOP_N1298:int;
	x:real;
	idHierarchy1_TOP304:int;
	idTOP_N2299:int;
	idHierarchy1_Hierarchy1297:int);


var 	idTOP_N1298_2, idTOP_N1298_3:int;
	x_2, x_3, x_4, x_5:real;
	idHierarchy1_TOP304_2, idHierarchy1_TOP304_3, idHierarchy1_TOP304_4, idHierarchy1_TOP304_5:int;
	idTOP_N2299_2, idTOP_N2299_3:int;
	idHierarchy1_Hierarchy1297_2:int;


let



	
	(idTOP_N1298_2, x_2, idHierarchy1_TOP304_2) 
	= 
	if ( idHierarchy1_TOP304_1 = 298) then
	TOP_N1298_ex(idTOP_N1298_1, x_1, idHierarchy1_TOP304_1, false)
	 else (idTOP_N1298_1, x_1, idHierarchy1_TOP304_1);

	

	(idTOP_N2299_2, x_3, idHierarchy1_TOP304_3) 
	= 
	if ( idHierarchy1_TOP304_1 = 299) then
	TOP_N2299_ex(idTOP_N2299_1, x_1, idHierarchy1_TOP304_1, false)
	 else (idTOP_N2299_1, x_1, idHierarchy1_TOP304_1);

	

	(idTOP_N1298_3, x_4, idHierarchy1_TOP304_4, idTOP_N2299_3) 
	= 
		 if ( idHierarchy1_TOP304_1 = 298) then 
		(idTOP_N1298_2, x_2, idHierarchy1_TOP304_2, idTOP_N2299_1)
		 else
		 if ( idHierarchy1_TOP304_1 = 299) then 
		(idTOP_N1298_1, x_3, idHierarchy1_TOP304_3, idTOP_N2299_2)
		 else (idTOP_N1298_1, x_1, idHierarchy1_TOP304_1, idTOP_N2299_1);


	x_5 
	= if (not isInner) then 0.
	 else x_4;
	

	-- set state as inactive 
	idHierarchy1_Hierarchy1297_2
	 = if (not isInner) then 0 else idHierarchy1_Hierarchy1297_1;

	idHierarchy1_TOP304_5 
	= 0;
	

	(idTOP_N1298, x, idHierarchy1_TOP304, idTOP_N2299, idHierarchy1_Hierarchy1297) 
	= (idTOP_N1298_3, x_5, idHierarchy1_TOP304_5, idTOP_N2299_3, idHierarchy1_Hierarchy1297_1);
	

tel


--***************************************************State :TOP_N2299 Automaton***************************************************

node TOP_N2299_node(idTOP_N2299_1:int;
	x_1:real;
	S:bool;
	R:bool)

returns (idTOP_N2299:int;
	x:real);


let

	 automaton top_n2299

	state POINTTOP_N2299:
	unless (idTOP_N2299_1=0) restart POINT__TO__N2_C302_1



	unless (idTOP_N2299_1=302) and S restart N2_C302__TO__N2_D303_1



	unless (idTOP_N2299_1=303) and R restart N2_D303__TO__N2_C302_1



	unless (idTOP_N2299_1=302) restart N2_C302_IDL

	unless (idTOP_N2299_1=303) restart N2_D303_IDL

	let

		(idTOP_N2299, x) 
	= (idTOP_N2299_1, x_1);
	

	tel



	state POINT__TO__N2_C302_1:

	 var 	idTOP_N2299_2:int;
	x_2:real;
	let

		-- transition trace :
	--POINT__To__N2_C302_1
		(idTOP_N2299_2, x_2) 
	= N2_C302_en(idTOP_N2299_1, x_1, false);
		

	(idTOP_N2299, x) 
	=  (idTOP_N2299_2, x_2);


	tel

	until true restart POINTTOP_N2299



	state N2_C302__TO__N2_D303_1:

	 var 	idTOP_N2299_2, idTOP_N2299_3:int;
	x_2, x_3:real;
	let

		-- transition trace :
	--N2_C302__To__N2_D303_1
		-- condition Action : x+=100;
		
		(x_2) 
	= N2_C302__To__N2_D303_1_Condition_Action(x_1);
		

		(idTOP_N2299_2) 
	= N2_C302_ex(idTOP_N2299_1, false);
		

		(idTOP_N2299_3, x_3) 
	= N2_D303_en(idTOP_N2299_2, x_2, false);
		

	(idTOP_N2299, x) 
	=  (idTOP_N2299_3, x_3);


	tel

	until true restart POINTTOP_N2299



	state N2_D303__TO__N2_C302_1:

	 var 	idTOP_N2299_2, idTOP_N2299_3:int;
	x_2, x_3:real;
	let

		-- transition trace :
	--N2_D303__To__N2_C302_1
		-- condition Action : x-=100;
		
		(x_2) 
	= N2_D303__To__N2_C302_1_Condition_Action(x_1);
		

		(idTOP_N2299_2) 
	= N2_D303_ex(idTOP_N2299_1, false);
		

		(idTOP_N2299_3, x_3) 
	= N2_C302_en(idTOP_N2299_2, x_2, false);
		

	(idTOP_N2299, x) 
	=  (idTOP_N2299_3, x_3);


	tel

	until true restart POINTTOP_N2299



	state N2_C302_IDL:

	 	let

		

	(idTOP_N2299, x) 
	= (idTOP_N2299_1, x_1);
	

	tel

	until true restart POINTTOP_N2299



	state N2_D303_IDL:

	 	let

		

	(idTOP_N2299, x) 
	= (idTOP_N2299_1, x_1);
	

	tel

	until true restart POINTTOP_N2299



tel


--***************************************************State :TOP_N1298 Automaton***************************************************

node TOP_N1298_node(idTOP_N1298_1:int;
	x_1:real;
	S:bool;
	R:bool)

returns (idTOP_N1298:int;
	x:real);


let

	 automaton top_n1298

	state POINTTOP_N1298:
	unless (idTOP_N1298_1=0) restart POINT__TO__N1_A300_1



	unless (idTOP_N1298_1=300) and S restart N1_A300__TO__N1_B301_1



	unless (idTOP_N1298_1=301) and R restart N1_B301__TO__N1_A300_1



	unless (idTOP_N1298_1=300) restart N1_A300_IDL

	unless (idTOP_N1298_1=301) restart N1_B301_IDL

	let

		(idTOP_N1298, x) 
	= (idTOP_N1298_1, x_1);
	

	tel



	state POINT__TO__N1_A300_1:

	 var 	idTOP_N1298_2:int;
	x_2:real;
	let

		-- transition trace :
	--POINT__To__N1_A300_1
		(idTOP_N1298_2, x_2) 
	= N1_A300_en(idTOP_N1298_1, x_1, false);
		

	(idTOP_N1298, x) 
	=  (idTOP_N1298_2, x_2);


	tel

	until true restart POINTTOP_N1298



	state N1_A300__TO__N1_B301_1:

	 var 	idTOP_N1298_2, idTOP_N1298_3:int;
	x_2, x_3:real;
	let

		-- transition trace :
	--N1_A300__To__N1_B301_1
		-- condition Action : x+=1;
		
		(x_2) 
	= N1_A300__To__N1_B301_1_Condition_Action(x_1);
		

		(idTOP_N1298_2) 
	= N1_A300_ex(idTOP_N1298_1, false);
		

		(idTOP_N1298_3, x_3) 
	= N1_B301_en(idTOP_N1298_2, x_2, false);
		

	(idTOP_N1298, x) 
	=  (idTOP_N1298_3, x_3);


	tel

	until true restart POINTTOP_N1298



	state N1_B301__TO__N1_A300_1:

	 var 	idTOP_N1298_2, idTOP_N1298_3:int;
	x_2, x_3:real;
	let

		-- transition trace :
	--N1_B301__To__N1_A300_1
		-- condition Action : x-=1;
		
		(x_2) 
	= N1_B301__To__N1_A300_1_Condition_Action(x_1);
		

		(idTOP_N1298_2) 
	= N1_B301_ex(idTOP_N1298_1, false);
		

		(idTOP_N1298_3, x_3) 
	= N1_A300_en(idTOP_N1298_2, x_2, false);
		

	(idTOP_N1298, x) 
	=  (idTOP_N1298_3, x_3);


	tel

	until true restart POINTTOP_N1298



	state N1_A300_IDL:

	 	let

		

	(idTOP_N1298, x) 
	= (idTOP_N1298_1, x_1);
	

	tel

	until true restart POINTTOP_N1298



	state N1_B301_IDL:

	 	let

		

	(idTOP_N1298, x) 
	= (idTOP_N1298_1, x_1);
	

	tel

	until true restart POINTTOP_N1298



tel


--***************************************************State :Hierarchy1_TOP304 Automaton***************************************************

node Hierarchy1_TOP304_node(idHierarchy1_TOP304_1:int;
	idTOP_N1298_1:int;
	x_1:real;
	T:bool;
	idTOP_N2299_1:int;
	R:bool;
	S:bool)

returns (idHierarchy1_TOP304:int;
	idTOP_N1298:int;
	x:real;
	idTOP_N2299:int);


let

	 automaton hierarchy1_top304

	state POINTHierarchy1_TOP304:
	unless (idHierarchy1_TOP304_1=0) restart POINT__TO__TOP_N1298_1



	unless (idHierarchy1_TOP304_1=298) and T restart TOP_N1298__TO__TOP_N2299_1



	unless (idHierarchy1_TOP304_1=299) and T restart TOP_N2299__TO__TOP_N1298_1



	unless (idHierarchy1_TOP304_1=298) restart TOP_N1298_IDL

	unless (idHierarchy1_TOP304_1=299) restart TOP_N2299_IDL

	let

		(idHierarchy1_TOP304, idTOP_N1298, x, idTOP_N2299) 
	= (idHierarchy1_TOP304_1, idTOP_N1298_1, x_1, idTOP_N2299_1);
	

	tel



	state POINT__TO__TOP_N1298_1:

	 var 	idHierarchy1_TOP304_2:int;
	idTOP_N1298_2:int;
	x_2:real;
	let

		-- transition trace :
	--POINT__To__TOP_N1298_1
		(idTOP_N1298_2, idHierarchy1_TOP304_2, x_2) 
	= TOP_N1298_en(idTOP_N1298_1, idHierarchy1_TOP304_1, x_1, false);
		

	(idHierarchy1_TOP304, idTOP_N1298, x) 
	=  (idHierarchy1_TOP304_2, idTOP_N1298_2, x_2);

	--add unused variables
	(idTOP_N2299) 
	= (idTOP_N2299_1);
	

	tel

	until true restart POINTHierarchy1_TOP304



	state TOP_N1298__TO__TOP_N2299_1:

	 var 	idHierarchy1_TOP304_2, idHierarchy1_TOP304_3:int;
	idTOP_N1298_2:int;
	x_2, x_3:real;
	idTOP_N2299_2:int;
	let

		-- transition trace :
	--TOP_N1298__To__TOP_N2299_1
		(idTOP_N1298_2, x_2, idHierarchy1_TOP304_2) 
	= TOP_N1298_ex(idTOP_N1298_1, x_1, idHierarchy1_TOP304_1, false);
		

		(idTOP_N2299_2, idHierarchy1_TOP304_3, x_3) 
	= TOP_N2299_en(idTOP_N2299_1, idHierarchy1_TOP304_2, x_2, false);
		

	(idHierarchy1_TOP304, idTOP_N1298, x, idTOP_N2299) 
	=  (idHierarchy1_TOP304_3, idTOP_N1298_2, x_3, idTOP_N2299_2);


	tel

	until true restart POINTHierarchy1_TOP304



	state TOP_N2299__TO__TOP_N1298_1:

	 var 	idHierarchy1_TOP304_2, idHierarchy1_TOP304_3:int;
	idTOP_N1298_2:int;
	x_2, x_3:real;
	idTOP_N2299_2:int;
	let

		-- transition trace :
	--TOP_N2299__To__TOP_N1298_1
		(idTOP_N2299_2, x_2, idHierarchy1_TOP304_2) 
	= TOP_N2299_ex(idTOP_N2299_1, x_1, idHierarchy1_TOP304_1, false);
		

		(idTOP_N1298_2, idHierarchy1_TOP304_3, x_3) 
	= TOP_N1298_en(idTOP_N1298_1, idHierarchy1_TOP304_2, x_2, false);
		

	(idHierarchy1_TOP304, idTOP_N1298, x, idTOP_N2299) 
	=  (idHierarchy1_TOP304_3, idTOP_N1298_2, x_3, idTOP_N2299_2);


	tel

	until true restart POINTHierarchy1_TOP304



	state TOP_N1298_IDL:

	 var 	idTOP_N1298_2:int;
	x_2:real;
	let

		
	(idTOP_N1298_2, x_2) 
	= TOP_N1298_node(idTOP_N1298_1, x_1, S, R);

		


	(idHierarchy1_TOP304, idTOP_N1298, x, idTOP_N2299) 
	= (idHierarchy1_TOP304_1, idTOP_N1298_2, x_2, idTOP_N2299_1);
	

	tel

	until true restart POINTHierarchy1_TOP304



	state TOP_N2299_IDL:

	 var 	x_2:real;
	idTOP_N2299_2:int;
	let

		
	(idTOP_N2299_2, x_2) 
	= TOP_N2299_node(idTOP_N2299_1, x_1, S, R);

		


	(idHierarchy1_TOP304, idTOP_N1298, x, idTOP_N2299) 
	= (idHierarchy1_TOP304_1, idTOP_N1298_1, x_2, idTOP_N2299_2);
	

	tel

	until true restart POINTHierarchy1_TOP304



tel


--***************************************************State :Hierarchy1_Hierarchy1297 Automaton***************************************************

node Hierarchy1_Hierarchy1297_node(idHierarchy1_Hierarchy1297_1:int;
	idHierarchy1_TOP304_1:int;
	idTOP_N1298_1:int;
	idTOP_N2299_1:int;
	x_1:real;
	R:bool;
	S:bool;
	T:bool)

returns (idHierarchy1_Hierarchy1297:int;
	idHierarchy1_TOP304:int;
	idTOP_N1298:int;
	idTOP_N2299:int;
	x:real);


let

	 automaton hierarchy1_hierarchy1297

	state POINTHierarchy1_Hierarchy1297:
	unless (idHierarchy1_Hierarchy1297_1=0) restart POINT__TO__HIERARCHY1_TOP304_1



	unless (idHierarchy1_Hierarchy1297_1=304) restart HIERARCHY1_TOP304_IDL

	let

		(idHierarchy1_Hierarchy1297, idHierarchy1_TOP304, idTOP_N1298, idTOP_N2299, x) 
	= (idHierarchy1_Hierarchy1297_1, idHierarchy1_TOP304_1, idTOP_N1298_1, idTOP_N2299_1, x_1);
	

	tel



	state POINT__TO__HIERARCHY1_TOP304_1:

	 var 	idHierarchy1_Hierarchy1297_2:int;
	idHierarchy1_TOP304_2:int;
	idTOP_N1298_2:int;
	idTOP_N2299_2:int;
	x_2:real;
	let

		-- transition trace :
	--POINT__To__Hierarchy1_TOP304_1
		(idHierarchy1_TOP304_2, idHierarchy1_Hierarchy1297_2, x_2, idTOP_N1298_2, idTOP_N2299_2) 
	= Hierarchy1_TOP304_en(idHierarchy1_TOP304_1, idHierarchy1_Hierarchy1297_1, x_1, idTOP_N1298_1, idTOP_N2299_1, false);
		

	(idHierarchy1_Hierarchy1297, idHierarchy1_TOP304, idTOP_N1298, idTOP_N2299, x) 
	=  (idHierarchy1_Hierarchy1297_2, idHierarchy1_TOP304_2, idTOP_N1298_2, idTOP_N2299_2, x_2);


	tel

	until true restart POINTHierarchy1_Hierarchy1297



	state HIERARCHY1_TOP304_IDL:

	 var 	idHierarchy1_TOP304_2:int;
	idTOP_N1298_2:int;
	idTOP_N2299_2:int;
	x_2:real;
	let

		
	(idHierarchy1_TOP304_2, idTOP_N1298_2, x_2, idTOP_N2299_2) 
	= Hierarchy1_TOP304_node(idHierarchy1_TOP304_1, idTOP_N1298_1, x_1, T, idTOP_N2299_1, R, S);

		


	(idHierarchy1_Hierarchy1297, idHierarchy1_TOP304, idTOP_N1298, idTOP_N2299, x) 
	= (idHierarchy1_Hierarchy1297_1, idHierarchy1_TOP304_2, idTOP_N1298_2, idTOP_N2299_2, x_2);
	

	tel

	until true restart POINTHierarchy1_Hierarchy1297



tel


--***************************************************State :Hierarchy1_Hierarchy1297 Automaton***************************************************

node Hierarchy1_PP_Hierarchy1(S:bool;
	R:bool;
	T:bool)

returns (x:real);


var x_1: real;

	idHierarchy1_Hierarchy1297, idHierarchy1_Hierarchy1297_1: int;

	idTOP_N2299, idTOP_N2299_1: int;

	idTOP_N1298, idTOP_N1298_1: int;

	idHierarchy1_TOP304, idHierarchy1_TOP304_1: int;

		idHierarchy1_Hierarchy1297_2, idHierarchy1_Hierarchy1297_3:int;
	idHierarchy1_TOP304_2, idHierarchy1_TOP304_3:int;
	idTOP_N1298_2, idTOP_N1298_3:int;
	idTOP_N2299_2, idTOP_N2299_3:int;
	x_2, x_3:real;
let

	x_1 = 0.0 -> pre x;

	idHierarchy1_Hierarchy1297_1 = 0 -> pre idHierarchy1_Hierarchy1297;

	idTOP_N2299_1 = 0 -> pre idTOP_N2299;

	idTOP_N1298_1 = 0 -> pre idTOP_N1298;

	idHierarchy1_TOP304_1 = 0 -> pre idHierarchy1_TOP304;

	



	(idHierarchy1_Hierarchy1297_2, idHierarchy1_TOP304_2, idTOP_N1298_2, idTOP_N2299_2, x_2)
	 = 

	 if S then Hierarchy1_Hierarchy1297_node(idHierarchy1_Hierarchy1297_1, idHierarchy1_TOP304_1, idTOP_N1298_1, idTOP_N2299_1, x_1, false, S, false)

	 else (idHierarchy1_Hierarchy1297_1, idHierarchy1_TOP304_1, idTOP_N1298_1, idTOP_N2299_1, x_1);

	



	(idHierarchy1_Hierarchy1297_3, idHierarchy1_TOP304_3, idTOP_N1298_3, idTOP_N2299_3, x_3)
	 = 

	 if R then Hierarchy1_Hierarchy1297_node(idHierarchy1_Hierarchy1297_2, idHierarchy1_TOP304_2, idTOP_N1298_2, idTOP_N2299_2, x_2, R, false, false)

	 else (idHierarchy1_Hierarchy1297_2, idHierarchy1_TOP304_2, idTOP_N1298_2, idTOP_N2299_2, x_2);

	



	(idHierarchy1_Hierarchy1297, idHierarchy1_TOP304, idTOP_N1298, idTOP_N2299, x)
	 = 

	 if T then Hierarchy1_Hierarchy1297_node(idHierarchy1_Hierarchy1297_3, idHierarchy1_TOP304_3, idTOP_N1298_3, idTOP_N2299_3, x_3, false, false, T)

	 else (idHierarchy1_Hierarchy1297_3, idHierarchy1_TOP304_3, idTOP_N1298_3, idTOP_N2299_3, x_3);

	


--unused outputs
	

tel



node Hierarchy1_PP (S_1_1 : real; R_1_1 : real; T_1_1 : real)
returns (Out1_1_1 : real); 
var
	Hierarchy1_1_1 : real;
	Mux_1_1 : real; Mux_1_2 : real; Mux_1_3 : real;
	i_virtual_local : real;
	Hierarchy1Mux_1_1_event: bool;
	Hierarchy1Mux_1_2_event: bool;
	Hierarchy1Mux_1_3_event: bool;
let 
	Hierarchy1Mux_1_1_event = false -> ((pre(Mux_1_1) > 0.0 and Mux_1_1 <= 0.0) or (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0));
	Hierarchy1Mux_1_2_event = false -> ((pre(Mux_1_2) > 0.0 and Mux_1_2 <= 0.0) or (pre(Mux_1_2) <= 0.0 and Mux_1_2 > 0.0));
	Hierarchy1Mux_1_3_event = false -> ((pre(Mux_1_3) > 0.0 and Mux_1_3 <= 0.0) or (pre(Mux_1_3) <= 0.0 and Mux_1_3 > 0.0));
	Hierarchy1_1_1 =  Hierarchy1_PP_Hierarchy1(Hierarchy1Mux_1_1_event, Hierarchy1Mux_1_2_event, Hierarchy1Mux_1_3_event);
	Mux_1_1 = S_1_1 ;
	Mux_1_2 = R_1_1 ;
	Mux_1_3 = T_1_1 ;
	Out1_1_1 = Hierarchy1_1_1;
	i_virtual_local= 0.0 -> 1.0;
tel

