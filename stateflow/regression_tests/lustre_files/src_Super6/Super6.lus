-- This file has been generated by cocoSim


-- System nodes



















--During action for state :B1a_B1ai
node B1a_B1ai_du(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel





-- Entry action for state :B1a_B1ai
node B1a_B1ai_en(idB1_B1a_1:int;
	isInner:bool)

returns (idB1_B1a:int);


var 	idB1_B1a_2:int;


let



	-- set state as active 
	idB1_B1a_2 
	= 1199;
	

	(idB1_B1a) 
	= (idB1_B1a_2);
	

tel





-- Exit action for state :B1a_B1ai
node B1a_B1ai_ex(idB1_B1a_1:int;
	isInner:bool)

returns (idB1_B1a:int);


var 	idB1_B1a_2:int;


let



	-- set state as inactive 
	idB1_B1a_2
	 = if (not isInner) then 0 else idB1_B1a_1;


	(idB1_B1a) 
	= (idB1_B1a_1);
	

tel






--During action for state :B1_B1a
node B1_B1a_du(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel





-- Entry action for state :B1_B1a
node B1_B1a_en(idB1_B1a_1:int;
	idB_B1_1:int;
	isInner:bool)

returns (idB1_B1a:int;
	idB_B1:int);


var 	idB1_B1a_2, idB1_B1a_3, idB1_B1a_4, idB1_B1a_5:int;
	idB_B1_2, idB_B1_3, idB_B1_4:int;


let



	-- set state as active 
	idB_B1_2 
	= 1198;
	

	
-- transition trace :
	--POINT__To__B1a_B1ai_1
		(idB1_B1a_2) 
	= B1a_B1ai_en(idB1_B1a_1, false);
		

	(idB1_B1a_3, idB_B1_3) 
	= 

	if ( idB1_B1a_1 = 0) then

	 (idB1_B1a_2, idB_B1_2)

	 else(idB1_B1a_1, idB_B1_2);

	

	(idB1_B1a_4) 
	= 
	if ( idB1_B1a_1 = 1199) then
	B1a_B1ai_en(idB1_B1a_1, false)
	 else (idB1_B1a_1);

	

	(idB1_B1a_5, idB_B1_4) 
	= 
		 if ( idB1_B1a_1 = 0) then 
		(idB1_B1a_3, idB_B1_3)
		 else
		 if ( idB1_B1a_1 = 1199) then 
		(idB1_B1a_4, idB_B1_3)
		 else (idB1_B1a_1, idB_B1_2);


	(idB1_B1a, idB_B1) 
	= (idB1_B1a_5, idB_B1_4);
	

tel





-- Exit action for state :B1_B1a
node B1_B1a_ex(idB1_B1a_1:int;
	idB_B1_1:int;
	isInner:bool)

returns (idB1_B1a:int;
	idB_B1:int);


var 	idB1_B1a_2, idB1_B1a_3, idB1_B1a_4:int;
	idB_B1_2:int;


let



	
	(idB1_B1a_2) 
	= 
	if ( idB1_B1a_1 = 1199) then
	B1a_B1ai_ex(idB1_B1a_1, false)
	 else (idB1_B1a_1);

	

	(idB1_B1a_3) 
	= 
		 if ( idB1_B1a_1 = 1199) then 
		(idB1_B1a_2)
		 else (idB1_B1a_1);


	-- set state as inactive 
	idB_B1_2
	 = if (not isInner) then 0 else idB_B1_1;

	idB1_B1a_4 
	= 0;
	

	(idB1_B1a, idB_B1) 
	= (idB1_B1a_4, idB_B1_1);
	

tel






--During action for state :B_B1
node B_B1_du(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel





-- Entry action for state :B_B1
node B_B1_en(idB_B1_1:int;
	idSuper6_B_1:int;
	idB1_B1a_1:int;
	isInner:bool)

returns (idB_B1:int;
	idSuper6_B:int;
	idB1_B1a:int);


var 	idB_B1_2, idB_B1_3, idB_B1_4, idB_B1_5:int;
	idSuper6_B_2, idSuper6_B_3, idSuper6_B_4:int;
	idB1_B1a_2, idB1_B1a_3, idB1_B1a_4, idB1_B1a_5:int;


let



	-- set state as active 
	idSuper6_B_2 
	= 1197;
	

	
-- transition trace :
	--POINT__To__B1_B1a_1
		(idB1_B1a_2, idB_B1_2) 
	= B1_B1a_en(idB1_B1a_1, idB_B1_1, false);
		

	(idB_B1_3, idSuper6_B_3, idB1_B1a_3) 
	= 

	if ( idB_B1_1 = 0) then

	 (idB_B1_2, idSuper6_B_2, idB1_B1a_2)

	 else(idB_B1_1, idSuper6_B_2, idB1_B1a_1);

	

	(idB1_B1a_4, idB_B1_4) 
	= 
	if ( idB_B1_1 = 1198) then
	B1_B1a_en(idB1_B1a_1, idB_B1_1, false)
	 else (idB1_B1a_1, idB_B1_1);

	

	(idB_B1_5, idSuper6_B_4, idB1_B1a_5) 
	= 
		 if ( idB_B1_1 = 0) then 
		(idB_B1_3, idSuper6_B_3, idB1_B1a_3)
		 else
		 if ( idB_B1_1 = 1198) then 
		(idB_B1_4, idSuper6_B_3, idB1_B1a_4)
		 else (idB_B1_1, idSuper6_B_2, idB1_B1a_1);


	(idB_B1, idSuper6_B, idB1_B1a) 
	= (idB_B1_5, idSuper6_B_4, idB1_B1a_5);
	

tel





-- Exit action for state :B_B1
node B_B1_ex(idB1_B1a_1:int;
	idB_B1_1:int;
	idSuper6_B_1:int;
	isInner:bool)

returns (idB1_B1a:int;
	idB_B1:int;
	idSuper6_B:int);


var 	idB1_B1a_2, idB1_B1a_3:int;
	idB_B1_2, idB_B1_3, idB_B1_4:int;
	idSuper6_B_2:int;


let



	
	(idB1_B1a_2, idB_B1_2) 
	= 
	if ( idB_B1_1 = 1198) then
	B1_B1a_ex(idB1_B1a_1, idB_B1_1, false)
	 else (idB1_B1a_1, idB_B1_1);

	

	(idB1_B1a_3, idB_B1_3) 
	= 
		 if ( idB_B1_1 = 1198) then 
		(idB1_B1a_2, idB_B1_2)
		 else (idB1_B1a_1, idB_B1_1);


	-- set state as inactive 
	idSuper6_B_2
	 = if (not isInner) then 0 else idSuper6_B_1;

	idB_B1_4 
	= 0;
	

	(idB1_B1a, idB_B1, idSuper6_B) 
	= (idB1_B1a_3, idB_B1_4, idSuper6_B_1);
	

tel






--During action for state :Super6_B
node Super6_B_du(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel





-- Entry action for state :Super6_B
node Super6_B_en(idSuper6_B_1:int;
	idSuper6_Super6_1:int;
	idB1_B1a_1:int;
	idB_B1_1:int;
	isInner:bool)

returns (idSuper6_B:int;
	idSuper6_Super6:int;
	idB1_B1a:int;
	idB_B1:int);


var 	idSuper6_B_2, idSuper6_B_3, idSuper6_B_4, idSuper6_B_5:int;
	idSuper6_Super6_2, idSuper6_Super6_3, idSuper6_Super6_4:int;
	idB1_B1a_2, idB1_B1a_3, idB1_B1a_4, idB1_B1a_5:int;
	idB_B1_2, idB_B1_3, idB_B1_4, idB_B1_5:int;


let



	-- set state as active 
	idSuper6_Super6_2 
	= 1196;
	

	
-- transition trace :
	--POINT__To__B_B1_1
		(idB_B1_2, idSuper6_B_2, idB1_B1a_2) 
	= B_B1_en(idB_B1_1, idSuper6_B_1, idB1_B1a_1, false);
		

	(idSuper6_B_3, idSuper6_Super6_3, idB1_B1a_3, idB_B1_3) 
	= 

	if ( idSuper6_B_1 = 0) then

	 (idSuper6_B_2, idSuper6_Super6_2, idB1_B1a_2, idB_B1_2)

	 else(idSuper6_B_1, idSuper6_Super6_2, idB1_B1a_1, idB_B1_1);

	

	(idB_B1_4, idSuper6_B_4, idB1_B1a_4) 
	= 
	if ( idSuper6_B_1 = 1197) then
	B_B1_en(idB_B1_1, idSuper6_B_1, idB1_B1a_1, false)
	 else (idB_B1_1, idSuper6_B_1, idB1_B1a_1);

	

	(idSuper6_B_5, idSuper6_Super6_4, idB1_B1a_5, idB_B1_5) 
	= 
		 if ( idSuper6_B_1 = 0) then 
		(idSuper6_B_3, idSuper6_Super6_3, idB1_B1a_3, idB_B1_3)
		 else
		 if ( idSuper6_B_1 = 1197) then 
		(idSuper6_B_4, idSuper6_Super6_3, idB1_B1a_4, idB_B1_4)
		 else (idSuper6_B_1, idSuper6_Super6_2, idB1_B1a_1, idB_B1_1);


	(idSuper6_B, idSuper6_Super6, idB1_B1a, idB_B1) 
	= (idSuper6_B_5, idSuper6_Super6_4, idB1_B1a_5, idB_B1_5);
	

tel





-- Exit action for state :Super6_B
node Super6_B_ex(idB1_B1a_1:int;
	idB_B1_1:int;
	idSuper6_B_1:int;
	idSuper6_Super6_1:int;
	isInner:bool)

returns (idB1_B1a:int;
	idB_B1:int;
	idSuper6_B:int;
	idSuper6_Super6:int);


var 	idB1_B1a_2, idB1_B1a_3:int;
	idB_B1_2, idB_B1_3:int;
	idSuper6_B_2, idSuper6_B_3, idSuper6_B_4:int;
	idSuper6_Super6_2:int;


let



	
	(idB1_B1a_2, idB_B1_2, idSuper6_B_2) 
	= 
	if ( idSuper6_B_1 = 1197) then
	B_B1_ex(idB1_B1a_1, idB_B1_1, idSuper6_B_1, false)
	 else (idB1_B1a_1, idB_B1_1, idSuper6_B_1);

	

	(idB1_B1a_3, idB_B1_3, idSuper6_B_3) 
	= 
		 if ( idSuper6_B_1 = 1197) then 
		(idB1_B1a_2, idB_B1_2, idSuper6_B_2)
		 else (idB1_B1a_1, idB_B1_1, idSuper6_B_1);


	-- set state as inactive 
	idSuper6_Super6_2
	 = if (not isInner) then 0 else idSuper6_Super6_1;

	idSuper6_B_4 
	= 0;
	

	(idB1_B1a, idB_B1, idSuper6_B, idSuper6_Super6) 
	= (idB1_B1a_3, idB_B1_3, idSuper6_B_4, idSuper6_Super6_1);
	

tel






--During action for state :A1a_A1ai
node A1a_A1ai_du(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel





-- Entry action for state :A1a_A1ai
node A1a_A1ai_en(idA1_A1a_1:int;
	isInner:bool)

returns (idA1_A1a:int);


var 	idA1_A1a_2:int;


let



	-- set state as active 
	idA1_A1a_2 
	= 1195;
	

	(idA1_A1a) 
	= (idA1_A1a_2);
	

tel





-- Exit action for state :A1a_A1ai
node A1a_A1ai_ex(idA1_A1a_1:int;
	isInner:bool)

returns (idA1_A1a:int);


var 	idA1_A1a_2:int;


let



	-- set state as inactive 
	idA1_A1a_2
	 = if (not isInner) then 0 else idA1_A1a_1;


	(idA1_A1a) 
	= (idA1_A1a_1);
	

tel






--During action for state :A1_A1a
node A1_A1a_du(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel





-- Entry action for state :A1_A1a
node A1_A1a_en(idA1_A1a_1:int;
	idA_A1_1:int;
	isInner:bool)

returns (idA1_A1a:int;
	idA_A1:int);


var 	idA1_A1a_2, idA1_A1a_3, idA1_A1a_4, idA1_A1a_5:int;
	idA_A1_2, idA_A1_3, idA_A1_4:int;


let



	-- set state as active 
	idA_A1_2 
	= 1194;
	

	
-- transition trace :
	--POINT__To__A1a_A1ai_1
		(idA1_A1a_2) 
	= A1a_A1ai_en(idA1_A1a_1, false);
		

	(idA1_A1a_3, idA_A1_3) 
	= 

	if ( idA1_A1a_1 = 0) then

	 (idA1_A1a_2, idA_A1_2)

	 else(idA1_A1a_1, idA_A1_2);

	

	(idA1_A1a_4) 
	= 
	if ( idA1_A1a_1 = 1195) then
	A1a_A1ai_en(idA1_A1a_1, false)
	 else (idA1_A1a_1);

	

	(idA1_A1a_5, idA_A1_4) 
	= 
		 if ( idA1_A1a_1 = 0) then 
		(idA1_A1a_3, idA_A1_3)
		 else
		 if ( idA1_A1a_1 = 1195) then 
		(idA1_A1a_4, idA_A1_3)
		 else (idA1_A1a_1, idA_A1_2);


	(idA1_A1a, idA_A1) 
	= (idA1_A1a_5, idA_A1_4);
	

tel





-- Exit action for state :A1_A1a
node A1_A1a_ex(idA1_A1a_1:int;
	idA_A1_1:int;
	isInner:bool)

returns (idA1_A1a:int;
	idA_A1:int);


var 	idA1_A1a_2, idA1_A1a_3, idA1_A1a_4:int;
	idA_A1_2:int;


let



	
	(idA1_A1a_2) 
	= 
	if ( idA1_A1a_1 = 1195) then
	A1a_A1ai_ex(idA1_A1a_1, false)
	 else (idA1_A1a_1);

	

	(idA1_A1a_3) 
	= 
		 if ( idA1_A1a_1 = 1195) then 
		(idA1_A1a_2)
		 else (idA1_A1a_1);


	-- set state as inactive 
	idA_A1_2
	 = if (not isInner) then 0 else idA_A1_1;

	idA1_A1a_4 
	= 0;
	

	(idA1_A1a, idA_A1) 
	= (idA1_A1a_4, idA_A1_1);
	

tel






--During action for state :A_A1
node A_A1_du(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel





-- Entry action for state :A_A1
node A_A1_en(idA_A1_1:int;
	idSuper6_A_1:int;
	idA1_A1a_1:int;
	isInner:bool)

returns (idA_A1:int;
	idSuper6_A:int;
	idA1_A1a:int);


var 	idA_A1_2, idA_A1_3, idA_A1_4, idA_A1_5:int;
	idSuper6_A_2, idSuper6_A_3, idSuper6_A_4:int;
	idA1_A1a_2, idA1_A1a_3, idA1_A1a_4, idA1_A1a_5:int;


let



	-- set state as active 
	idSuper6_A_2 
	= 1193;
	

	
-- transition trace :
	--POINT__To__A1_A1a_1
		(idA1_A1a_2, idA_A1_2) 
	= A1_A1a_en(idA1_A1a_1, idA_A1_1, false);
		

	(idA_A1_3, idSuper6_A_3, idA1_A1a_3) 
	= 

	if ( idA_A1_1 = 0) then

	 (idA_A1_2, idSuper6_A_2, idA1_A1a_2)

	 else(idA_A1_1, idSuper6_A_2, idA1_A1a_1);

	

	(idA1_A1a_4, idA_A1_4) 
	= 
	if ( idA_A1_1 = 1194) then
	A1_A1a_en(idA1_A1a_1, idA_A1_1, false)
	 else (idA1_A1a_1, idA_A1_1);

	

	(idA_A1_5, idSuper6_A_4, idA1_A1a_5) 
	= 
		 if ( idA_A1_1 = 0) then 
		(idA_A1_3, idSuper6_A_3, idA1_A1a_3)
		 else
		 if ( idA_A1_1 = 1194) then 
		(idA_A1_4, idSuper6_A_3, idA1_A1a_4)
		 else (idA_A1_1, idSuper6_A_2, idA1_A1a_1);


	(idA_A1, idSuper6_A, idA1_A1a) 
	= (idA_A1_5, idSuper6_A_4, idA1_A1a_5);
	

tel





-- Exit action for state :A_A1
node A_A1_ex(idA1_A1a_1:int;
	idA_A1_1:int;
	idSuper6_A_1:int;
	isInner:bool)

returns (idA1_A1a:int;
	idA_A1:int;
	idSuper6_A:int);


var 	idA1_A1a_2, idA1_A1a_3:int;
	idA_A1_2, idA_A1_3, idA_A1_4:int;
	idSuper6_A_2:int;


let



	
	(idA1_A1a_2, idA_A1_2) 
	= 
	if ( idA_A1_1 = 1194) then
	A1_A1a_ex(idA1_A1a_1, idA_A1_1, false)
	 else (idA1_A1a_1, idA_A1_1);

	

	(idA1_A1a_3, idA_A1_3) 
	= 
		 if ( idA_A1_1 = 1194) then 
		(idA1_A1a_2, idA_A1_2)
		 else (idA1_A1a_1, idA_A1_1);


	-- set state as inactive 
	idSuper6_A_2
	 = if (not isInner) then 0 else idSuper6_A_1;

	idA_A1_4 
	= 0;
	

	(idA1_A1a, idA_A1, idSuper6_A) 
	= (idA1_A1a_3, idA_A1_4, idSuper6_A_1);
	

tel






--During action for state :Super6_A
node Super6_A_du(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel





-- Entry action for state :Super6_A
node Super6_A_en(idSuper6_A_1:int;
	idSuper6_Super6_1:int;
	idA1_A1a_1:int;
	idA_A1_1:int;
	isInner:bool)

returns (idSuper6_A:int;
	idSuper6_Super6:int;
	idA1_A1a:int;
	idA_A1:int);


var 	idSuper6_A_2, idSuper6_A_3, idSuper6_A_4, idSuper6_A_5:int;
	idSuper6_Super6_2, idSuper6_Super6_3, idSuper6_Super6_4:int;
	idA1_A1a_2, idA1_A1a_3, idA1_A1a_4, idA1_A1a_5:int;
	idA_A1_2, idA_A1_3, idA_A1_4, idA_A1_5:int;


let



	-- set state as active 
	idSuper6_Super6_2 
	= 1192;
	

	
-- transition trace :
	--POINT__To__A_A1_1
		(idA_A1_2, idSuper6_A_2, idA1_A1a_2) 
	= A_A1_en(idA_A1_1, idSuper6_A_1, idA1_A1a_1, false);
		

	(idSuper6_A_3, idSuper6_Super6_3, idA1_A1a_3, idA_A1_3) 
	= 

	if ( idSuper6_A_1 = 0) then

	 (idSuper6_A_2, idSuper6_Super6_2, idA1_A1a_2, idA_A1_2)

	 else(idSuper6_A_1, idSuper6_Super6_2, idA1_A1a_1, idA_A1_1);

	

	(idA_A1_4, idSuper6_A_4, idA1_A1a_4) 
	= 
	if ( idSuper6_A_1 = 1193) then
	A_A1_en(idA_A1_1, idSuper6_A_1, idA1_A1a_1, false)
	 else (idA_A1_1, idSuper6_A_1, idA1_A1a_1);

	

	(idSuper6_A_5, idSuper6_Super6_4, idA1_A1a_5, idA_A1_5) 
	= 
		 if ( idSuper6_A_1 = 0) then 
		(idSuper6_A_3, idSuper6_Super6_3, idA1_A1a_3, idA_A1_3)
		 else
		 if ( idSuper6_A_1 = 1193) then 
		(idSuper6_A_4, idSuper6_Super6_3, idA1_A1a_4, idA_A1_4)
		 else (idSuper6_A_1, idSuper6_Super6_2, idA1_A1a_1, idA_A1_1);


	(idSuper6_A, idSuper6_Super6, idA1_A1a, idA_A1) 
	= (idSuper6_A_5, idSuper6_Super6_4, idA1_A1a_5, idA_A1_5);
	

tel





-- Exit action for state :Super6_A
node Super6_A_ex(idA1_A1a_1:int;
	idA_A1_1:int;
	idSuper6_A_1:int;
	idSuper6_Super6_1:int;
	isInner:bool)

returns (idA1_A1a:int;
	idA_A1:int;
	idSuper6_A:int;
	idSuper6_Super6:int);


var 	idA1_A1a_2, idA1_A1a_3:int;
	idA_A1_2, idA_A1_3:int;
	idSuper6_A_2, idSuper6_A_3, idSuper6_A_4:int;
	idSuper6_Super6_2:int;


let



	
	(idA1_A1a_2, idA_A1_2, idSuper6_A_2) 
	= 
	if ( idSuper6_A_1 = 1193) then
	A_A1_ex(idA1_A1a_1, idA_A1_1, idSuper6_A_1, false)
	 else (idA1_A1a_1, idA_A1_1, idSuper6_A_1);

	

	(idA1_A1a_3, idA_A1_3, idSuper6_A_3) 
	= 
		 if ( idSuper6_A_1 = 1193) then 
		(idA1_A1a_2, idA_A1_2, idSuper6_A_2)
		 else (idA1_A1a_1, idA_A1_1, idSuper6_A_1);


	-- set state as inactive 
	idSuper6_Super6_2
	 = if (not isInner) then 0 else idSuper6_Super6_1;

	idSuper6_A_4 
	= 0;
	

	(idA1_A1a, idA_A1, idSuper6_A, idSuper6_Super6) 
	= (idA1_A1a_3, idA_A1_3, idSuper6_A_4, idSuper6_Super6_1);
	

tel


--***************************************************State :B1_B1a Automaton***************************************************

node B1_B1a_node(idB1_B1a_1:int;
	H:bool;
	idB_B1_1:int;
	idSuper6_B_1:int;
	idSuper6_Super6_1:int;
	idA1_A1a_1:int;
	idA_A1_1:int;
	idSuper6_A_1:int;
	y_1:int)

returns (idB1_B1a:int;
	idB_B1:int;
	idSuper6_B:int;
	idSuper6_Super6:int;
	idA1_A1a:int;
	idA_A1:int;
	idSuper6_A:int;
	y:int);


let

	 automaton b1_b1a

	state POINTB1_B1a:
	unless (idB1_B1a_1=0) restart POINT__TO__B1A_B1AI_1



	unless (idB1_B1a_1=1199) and H restart B1A_B1AI__TO__A1A_A1AI_1



	unless (idB1_B1a_1=1199) restart B1A_B1AI_IDL

	let

		(idB1_B1a, idB_B1, idSuper6_B, idSuper6_Super6, idA1_A1a, idA_A1, idSuper6_A, y) 
	= (idB1_B1a_1, idB_B1_1, idSuper6_B_1, idSuper6_Super6_1, idA1_A1a_1, idA_A1_1, idSuper6_A_1, y_1);
	

	tel



	state POINT__TO__B1A_B1AI_1:

	 var 	idB1_B1a_2:int;
	let

		-- transition trace :
	--POINT__To__B1a_B1ai_1
		(idB1_B1a_2) 
	= B1a_B1ai_en(idB1_B1a_1, false);
		

	(idB1_B1a) 
	=  (idB1_B1a_2);

	--add unused variables
	(idA1_A1a, idA_A1, idB_B1, idSuper6_A, idSuper6_B, idSuper6_Super6, y) 
	= (idA1_A1a_1, idA_A1_1, idB_B1_1, idSuper6_A_1, idSuper6_B_1, idSuper6_Super6_1, y_1);
	

	tel

	until true restart POINTB1_B1a



	state B1A_B1AI__TO__A1A_A1AI_1:

	 var 	idB1_B1a_2:int;
	idB_B1_2:int;
	idSuper6_B_2:int;
	idSuper6_Super6_2, idSuper6_Super6_3:int;
	idA1_A1a_2, idA1_A1a_3:int;
	idA_A1_2, idA_A1_3:int;
	idSuper6_A_2, idSuper6_A_3:int;
	let

		-- transition trace :
	--B1a_B1ai__To__A1a_A1ai_1
		(idB1_B1a_2, idB_B1_2, idSuper6_B_2, idSuper6_Super6_2) 
	= Super6_B_ex(idB1_B1a_1, idB_B1_1, idSuper6_B_1, idSuper6_Super6_1, false);
		

		idA1_A1a_2 
	= 1195;
	
		idA_A1_2 
	= 1194;
	
		idSuper6_A_2 
	= 1193;
	
		(idSuper6_A_3, idSuper6_Super6_3, idA1_A1a_3, idA_A1_3) 
	= Super6_A_en(idSuper6_A_2, idSuper6_Super6_2, idA1_A1a_2, idA_A1_2, false);
		

	(idB1_B1a, idB_B1, idSuper6_B, idSuper6_Super6, idA1_A1a, idA_A1, idSuper6_A) 
	=  (idB1_B1a_2, idB_B1_2, idSuper6_B_2, idSuper6_Super6_3, idA1_A1a_3, idA_A1_3, idSuper6_A_3);

	--add unused variables
	(y) 
	= (y_1);
	

	tel

	until true restart POINTB1_B1a



	state B1A_B1AI_IDL:

	 var 	y_2:int;
	let

		
	(y_2) 
	= B1a_B1ai_du(y_1);

		


	(idB1_B1a, idB_B1, idSuper6_B, idSuper6_Super6, idA1_A1a, idA_A1, idSuper6_A, y) 
	= (idB1_B1a_1, idB_B1_1, idSuper6_B_1, idSuper6_Super6_1, idA1_A1a_1, idA_A1_1, idSuper6_A_1, y_2);
	

	tel

	until true restart POINTB1_B1a



tel


--***************************************************State :B_B1 Automaton***************************************************

node B_B1_node(idB_B1_1:int;
	idB1_B1a_1:int;
	G:bool;
	idSuper6_B_1:int;
	idSuper6_Super6_1:int;
	idA_A1_1:int;
	idSuper6_A_1:int;
	idA1_A1a_1:int;
	y_1:int;
	H:bool)

returns (idB_B1:int;
	idB1_B1a:int;
	idSuper6_B:int;
	idSuper6_Super6:int;
	idA_A1:int;
	idSuper6_A:int;
	idA1_A1a:int;
	y:int);


let

	 automaton b_b1

	state POINTB_B1:
	unless (idB_B1_1=0) restart POINT__TO__B1_B1A_1



	unless (idB_B1_1=1198) and G restart B1_B1A__TO__A1_A1A_1



	unless (idB_B1_1=1198) restart B1_B1A_IDL

	let

		(idB_B1, idB1_B1a, idSuper6_B, idSuper6_Super6, idA_A1, idSuper6_A, idA1_A1a, y) 
	= (idB_B1_1, idB1_B1a_1, idSuper6_B_1, idSuper6_Super6_1, idA_A1_1, idSuper6_A_1, idA1_A1a_1, y_1);
	

	tel



	state POINT__TO__B1_B1A_1:

	 var 	idB_B1_2:int;
	idB1_B1a_2:int;
	let

		-- transition trace :
	--POINT__To__B1_B1a_1
		(idB1_B1a_2, idB_B1_2) 
	= B1_B1a_en(idB1_B1a_1, idB_B1_1, false);
		

	(idB_B1, idB1_B1a) 
	=  (idB_B1_2, idB1_B1a_2);

	--add unused variables
	(idA1_A1a, idA_A1, idSuper6_A, idSuper6_B, idSuper6_Super6, y) 
	= (idA1_A1a_1, idA_A1_1, idSuper6_A_1, idSuper6_B_1, idSuper6_Super6_1, y_1);
	

	tel

	until true restart POINTB_B1



	state B1_B1A__TO__A1_A1A_1:

	 var 	idB_B1_2:int;
	idB1_B1a_2:int;
	idSuper6_B_2:int;
	idSuper6_Super6_2, idSuper6_Super6_3:int;
	idA_A1_2, idA_A1_3:int;
	idSuper6_A_2, idSuper6_A_3:int;
	idA1_A1a_2:int;
	let

		-- transition trace :
	--B1_B1a__To__A1_A1a_1
		(idB1_B1a_2, idB_B1_2, idSuper6_B_2, idSuper6_Super6_2) 
	= Super6_B_ex(idB1_B1a_1, idB_B1_1, idSuper6_B_1, idSuper6_Super6_1, false);
		

		idA_A1_2 
	= 1194;
	
		idSuper6_A_2 
	= 1193;
	
		(idSuper6_A_3, idSuper6_Super6_3, idA1_A1a_2, idA_A1_3) 
	= Super6_A_en(idSuper6_A_2, idSuper6_Super6_2, idA1_A1a_1, idA_A1_2, false);
		

	(idB_B1, idB1_B1a, idSuper6_B, idSuper6_Super6, idA_A1, idSuper6_A, idA1_A1a) 
	=  (idB_B1_2, idB1_B1a_2, idSuper6_B_2, idSuper6_Super6_3, idA_A1_3, idSuper6_A_3, idA1_A1a_2);

	--add unused variables
	(y) 
	= (y_1);
	

	tel

	until true restart POINTB_B1



	state B1_B1A_IDL:

	 var 	idB_B1_2:int;
	idB1_B1a_2:int;
	idSuper6_B_2:int;
	idSuper6_Super6_2:int;
	idA_A1_2:int;
	idSuper6_A_2:int;
	idA1_A1a_2:int;
	y_2, y_3:int;
	let

		
	(y_2) 
	= B1_B1a_du(y_1);

		

	(idB1_B1a_2, idB_B1_2, idSuper6_B_2, idSuper6_Super6_2, idA1_A1a_2, idA_A1_2, idSuper6_A_2, y_3) 
	= B1_B1a_node(idB1_B1a_1, H, idB_B1_1, idSuper6_B_1, idSuper6_Super6_1, idA1_A1a_1, idA_A1_1, idSuper6_A_1, y_2);

		


	(idB_B1, idB1_B1a, idSuper6_B, idSuper6_Super6, idA_A1, idSuper6_A, idA1_A1a, y) 
	= (idB_B1_2, idB1_B1a_2, idSuper6_B_2, idSuper6_Super6_2, idA_A1_2, idSuper6_A_2, idA1_A1a_2, y_3);
	

	tel

	until true restart POINTB_B1



tel


--***************************************************State :Super6_B Automaton***************************************************

node Super6_B_node(idSuper6_B_1:int;
	idB1_B1a_1:int;
	idB_B1_1:int;
	F:bool;
	idSuper6_Super6_1:int;
	idSuper6_A_1:int;
	idA1_A1a_1:int;
	idA_A1_1:int;
	y_1:int;
	G:bool;
	H:bool)

returns (idSuper6_B:int;
	idB1_B1a:int;
	idB_B1:int;
	idSuper6_Super6:int;
	idSuper6_A:int;
	idA1_A1a:int;
	idA_A1:int;
	y:int);


let

	 automaton super6_b

	state POINTSuper6_B:
	unless (idSuper6_B_1=0) restart POINT__TO__B_B1_1



	unless (idSuper6_B_1=1197) and F restart B_B1__TO__A_A1_1



	unless (idSuper6_B_1=1197) restart B_B1_IDL

	let

		(idSuper6_B, idB1_B1a, idB_B1, idSuper6_Super6, idSuper6_A, idA1_A1a, idA_A1, y) 
	= (idSuper6_B_1, idB1_B1a_1, idB_B1_1, idSuper6_Super6_1, idSuper6_A_1, idA1_A1a_1, idA_A1_1, y_1);
	

	tel



	state POINT__TO__B_B1_1:

	 var 	idSuper6_B_2:int;
	idB1_B1a_2:int;
	idB_B1_2:int;
	let

		-- transition trace :
	--POINT__To__B_B1_1
		(idB_B1_2, idSuper6_B_2, idB1_B1a_2) 
	= B_B1_en(idB_B1_1, idSuper6_B_1, idB1_B1a_1, false);
		

	(idSuper6_B, idB1_B1a, idB_B1) 
	=  (idSuper6_B_2, idB1_B1a_2, idB_B1_2);

	--add unused variables
	(idA1_A1a, idA_A1, idSuper6_A, idSuper6_Super6, y) 
	= (idA1_A1a_1, idA_A1_1, idSuper6_A_1, idSuper6_Super6_1, y_1);
	

	tel

	until true restart POINTSuper6_B



	state B_B1__TO__A_A1_1:

	 var 	idSuper6_B_2:int;
	idB1_B1a_2:int;
	idB_B1_2:int;
	idSuper6_Super6_2, idSuper6_Super6_3:int;
	idSuper6_A_2, idSuper6_A_3:int;
	idA1_A1a_2:int;
	idA_A1_2:int;
	let

		-- transition trace :
	--B_B1__To__A_A1_1
		(idB1_B1a_2, idB_B1_2, idSuper6_B_2, idSuper6_Super6_2) 
	= Super6_B_ex(idB1_B1a_1, idB_B1_1, idSuper6_B_1, idSuper6_Super6_1, false);
		

		idSuper6_A_2 
	= 1193;
	
		(idSuper6_A_3, idSuper6_Super6_3, idA1_A1a_2, idA_A1_2) 
	= Super6_A_en(idSuper6_A_2, idSuper6_Super6_2, idA1_A1a_1, idA_A1_1, false);
		

	(idSuper6_B, idB1_B1a, idB_B1, idSuper6_Super6, idSuper6_A, idA1_A1a, idA_A1) 
	=  (idSuper6_B_2, idB1_B1a_2, idB_B1_2, idSuper6_Super6_3, idSuper6_A_3, idA1_A1a_2, idA_A1_2);

	--add unused variables
	(y) 
	= (y_1);
	

	tel

	until true restart POINTSuper6_B



	state B_B1_IDL:

	 var 	idSuper6_B_2:int;
	idB1_B1a_2:int;
	idB_B1_2:int;
	idSuper6_Super6_2:int;
	idSuper6_A_2:int;
	idA1_A1a_2:int;
	idA_A1_2:int;
	y_2, y_3:int;
	let

		
	(y_2) 
	= B_B1_du(y_1);

		

	(idB_B1_2, idB1_B1a_2, idSuper6_B_2, idSuper6_Super6_2, idA_A1_2, idSuper6_A_2, idA1_A1a_2, y_3) 
	= B_B1_node(idB_B1_1, idB1_B1a_1, G, idSuper6_B_1, idSuper6_Super6_1, idA_A1_1, idSuper6_A_1, idA1_A1a_1, y_2, H);

		


	(idSuper6_B, idB1_B1a, idB_B1, idSuper6_Super6, idSuper6_A, idA1_A1a, idA_A1, y) 
	= (idSuper6_B_2, idB1_B1a_2, idB_B1_2, idSuper6_Super6_2, idSuper6_A_2, idA1_A1a_2, idA_A1_2, y_3);
	

	tel

	until true restart POINTSuper6_B



tel


--***************************************************State :A1_A1a Automaton***************************************************

node A1_A1a_node(idA1_A1a_1:int;
	H:bool;
	idA_A1_1:int;
	idSuper6_A_1:int;
	idSuper6_Super6_1:int;
	idB1_B1a_1:int;
	idB_B1_1:int;
	idSuper6_B_1:int;
	y_1:int)

returns (idA1_A1a:int;
	idA_A1:int;
	idSuper6_A:int;
	idSuper6_Super6:int;
	idB1_B1a:int;
	idB_B1:int;
	idSuper6_B:int;
	y:int);


let

	 automaton a1_a1a

	state POINTA1_A1a:
	unless (idA1_A1a_1=0) restart POINT__TO__A1A_A1AI_1



	unless (idA1_A1a_1=1195) and H restart A1A_A1AI__TO__B1A_B1AI_1



	unless (idA1_A1a_1=1195) restart A1A_A1AI_IDL

	let

		(idA1_A1a, idA_A1, idSuper6_A, idSuper6_Super6, idB1_B1a, idB_B1, idSuper6_B, y) 
	= (idA1_A1a_1, idA_A1_1, idSuper6_A_1, idSuper6_Super6_1, idB1_B1a_1, idB_B1_1, idSuper6_B_1, y_1);
	

	tel



	state POINT__TO__A1A_A1AI_1:

	 var 	idA1_A1a_2:int;
	let

		-- transition trace :
	--POINT__To__A1a_A1ai_1
		(idA1_A1a_2) 
	= A1a_A1ai_en(idA1_A1a_1, false);
		

	(idA1_A1a) 
	=  (idA1_A1a_2);

	--add unused variables
	(idA_A1, idB1_B1a, idB_B1, idSuper6_A, idSuper6_B, idSuper6_Super6, y) 
	= (idA_A1_1, idB1_B1a_1, idB_B1_1, idSuper6_A_1, idSuper6_B_1, idSuper6_Super6_1, y_1);
	

	tel

	until true restart POINTA1_A1a



	state A1A_A1AI__TO__B1A_B1AI_1:

	 var 	idA1_A1a_2:int;
	idA_A1_2:int;
	idSuper6_A_2:int;
	idSuper6_Super6_2, idSuper6_Super6_3:int;
	idB1_B1a_2, idB1_B1a_3:int;
	idB_B1_2, idB_B1_3:int;
	idSuper6_B_2, idSuper6_B_3:int;
	let

		-- transition trace :
	--A1a_A1ai__To__B1a_B1ai_1
		(idA1_A1a_2, idA_A1_2, idSuper6_A_2, idSuper6_Super6_2) 
	= Super6_A_ex(idA1_A1a_1, idA_A1_1, idSuper6_A_1, idSuper6_Super6_1, false);
		

		idB1_B1a_2 
	= 1199;
	
		idB_B1_2 
	= 1198;
	
		idSuper6_B_2 
	= 1197;
	
		(idSuper6_B_3, idSuper6_Super6_3, idB1_B1a_3, idB_B1_3) 
	= Super6_B_en(idSuper6_B_2, idSuper6_Super6_2, idB1_B1a_2, idB_B1_2, false);
		

	(idA1_A1a, idA_A1, idSuper6_A, idSuper6_Super6, idB1_B1a, idB_B1, idSuper6_B) 
	=  (idA1_A1a_2, idA_A1_2, idSuper6_A_2, idSuper6_Super6_3, idB1_B1a_3, idB_B1_3, idSuper6_B_3);

	--add unused variables
	(y) 
	= (y_1);
	

	tel

	until true restart POINTA1_A1a



	state A1A_A1AI_IDL:

	 var 	y_2:int;
	let

		
	(y_2) 
	= A1a_A1ai_du(y_1);

		


	(idA1_A1a, idA_A1, idSuper6_A, idSuper6_Super6, idB1_B1a, idB_B1, idSuper6_B, y) 
	= (idA1_A1a_1, idA_A1_1, idSuper6_A_1, idSuper6_Super6_1, idB1_B1a_1, idB_B1_1, idSuper6_B_1, y_2);
	

	tel

	until true restart POINTA1_A1a



tel


--***************************************************State :A_A1 Automaton***************************************************

node A_A1_node(idA_A1_1:int;
	idA1_A1a_1:int;
	G:bool;
	idSuper6_A_1:int;
	idSuper6_Super6_1:int;
	idB_B1_1:int;
	idSuper6_B_1:int;
	idB1_B1a_1:int;
	y_1:int;
	H:bool)

returns (idA_A1:int;
	idA1_A1a:int;
	idSuper6_A:int;
	idSuper6_Super6:int;
	idB_B1:int;
	idSuper6_B:int;
	idB1_B1a:int;
	y:int);


let

	 automaton a_a1

	state POINTA_A1:
	unless (idA_A1_1=0) restart POINT__TO__A1_A1A_1



	unless (idA_A1_1=1194) and G restart A1_A1A__TO__B1_B1A_1



	unless (idA_A1_1=1194) restart A1_A1A_IDL

	let

		(idA_A1, idA1_A1a, idSuper6_A, idSuper6_Super6, idB_B1, idSuper6_B, idB1_B1a, y) 
	= (idA_A1_1, idA1_A1a_1, idSuper6_A_1, idSuper6_Super6_1, idB_B1_1, idSuper6_B_1, idB1_B1a_1, y_1);
	

	tel



	state POINT__TO__A1_A1A_1:

	 var 	idA_A1_2:int;
	idA1_A1a_2:int;
	let

		-- transition trace :
	--POINT__To__A1_A1a_1
		(idA1_A1a_2, idA_A1_2) 
	= A1_A1a_en(idA1_A1a_1, idA_A1_1, false);
		

	(idA_A1, idA1_A1a) 
	=  (idA_A1_2, idA1_A1a_2);

	--add unused variables
	(idB1_B1a, idB_B1, idSuper6_A, idSuper6_B, idSuper6_Super6, y) 
	= (idB1_B1a_1, idB_B1_1, idSuper6_A_1, idSuper6_B_1, idSuper6_Super6_1, y_1);
	

	tel

	until true restart POINTA_A1



	state A1_A1A__TO__B1_B1A_1:

	 var 	idA_A1_2:int;
	idA1_A1a_2:int;
	idSuper6_A_2:int;
	idSuper6_Super6_2, idSuper6_Super6_3:int;
	idB_B1_2, idB_B1_3:int;
	idSuper6_B_2, idSuper6_B_3:int;
	idB1_B1a_2:int;
	let

		-- transition trace :
	--A1_A1a__To__B1_B1a_1
		(idA1_A1a_2, idA_A1_2, idSuper6_A_2, idSuper6_Super6_2) 
	= Super6_A_ex(idA1_A1a_1, idA_A1_1, idSuper6_A_1, idSuper6_Super6_1, false);
		

		idB_B1_2 
	= 1198;
	
		idSuper6_B_2 
	= 1197;
	
		(idSuper6_B_3, idSuper6_Super6_3, idB1_B1a_2, idB_B1_3) 
	= Super6_B_en(idSuper6_B_2, idSuper6_Super6_2, idB1_B1a_1, idB_B1_2, false);
		

	(idA_A1, idA1_A1a, idSuper6_A, idSuper6_Super6, idB_B1, idSuper6_B, idB1_B1a) 
	=  (idA_A1_2, idA1_A1a_2, idSuper6_A_2, idSuper6_Super6_3, idB_B1_3, idSuper6_B_3, idB1_B1a_2);

	--add unused variables
	(y) 
	= (y_1);
	

	tel

	until true restart POINTA_A1



	state A1_A1A_IDL:

	 var 	idA_A1_2:int;
	idA1_A1a_2:int;
	idSuper6_A_2:int;
	idSuper6_Super6_2:int;
	idB_B1_2:int;
	idSuper6_B_2:int;
	idB1_B1a_2:int;
	y_2, y_3:int;
	let

		
	(y_2) 
	= A1_A1a_du(y_1);

		

	(idA1_A1a_2, idA_A1_2, idSuper6_A_2, idSuper6_Super6_2, idB1_B1a_2, idB_B1_2, idSuper6_B_2, y_3) 
	= A1_A1a_node(idA1_A1a_1, H, idA_A1_1, idSuper6_A_1, idSuper6_Super6_1, idB1_B1a_1, idB_B1_1, idSuper6_B_1, y_2);

		


	(idA_A1, idA1_A1a, idSuper6_A, idSuper6_Super6, idB_B1, idSuper6_B, idB1_B1a, y) 
	= (idA_A1_2, idA1_A1a_2, idSuper6_A_2, idSuper6_Super6_2, idB_B1_2, idSuper6_B_2, idB1_B1a_2, y_3);
	

	tel

	until true restart POINTA_A1



tel


--***************************************************State :Super6_A Automaton***************************************************

node Super6_A_node(idSuper6_A_1:int;
	idA1_A1a_1:int;
	idA_A1_1:int;
	F:bool;
	idSuper6_Super6_1:int;
	idSuper6_B_1:int;
	idB1_B1a_1:int;
	idB_B1_1:int;
	y_1:int;
	G:bool;
	H:bool)

returns (idSuper6_A:int;
	idA1_A1a:int;
	idA_A1:int;
	idSuper6_Super6:int;
	idSuper6_B:int;
	idB1_B1a:int;
	idB_B1:int;
	y:int);


let

	 automaton super6_a

	state POINTSuper6_A:
	unless (idSuper6_A_1=0) restart POINT__TO__A_A1_1



	unless (idSuper6_A_1=1193) and F restart A_A1__TO__B_B1_1



	unless (idSuper6_A_1=1193) restart A_A1_IDL

	let

		(idSuper6_A, idA1_A1a, idA_A1, idSuper6_Super6, idSuper6_B, idB1_B1a, idB_B1, y) 
	= (idSuper6_A_1, idA1_A1a_1, idA_A1_1, idSuper6_Super6_1, idSuper6_B_1, idB1_B1a_1, idB_B1_1, y_1);
	

	tel



	state POINT__TO__A_A1_1:

	 var 	idSuper6_A_2:int;
	idA1_A1a_2:int;
	idA_A1_2:int;
	let

		-- transition trace :
	--POINT__To__A_A1_1
		(idA_A1_2, idSuper6_A_2, idA1_A1a_2) 
	= A_A1_en(idA_A1_1, idSuper6_A_1, idA1_A1a_1, false);
		

	(idSuper6_A, idA1_A1a, idA_A1) 
	=  (idSuper6_A_2, idA1_A1a_2, idA_A1_2);

	--add unused variables
	(idB1_B1a, idB_B1, idSuper6_B, idSuper6_Super6, y) 
	= (idB1_B1a_1, idB_B1_1, idSuper6_B_1, idSuper6_Super6_1, y_1);
	

	tel

	until true restart POINTSuper6_A



	state A_A1__TO__B_B1_1:

	 var 	idSuper6_A_2:int;
	idA1_A1a_2:int;
	idA_A1_2:int;
	idSuper6_Super6_2, idSuper6_Super6_3:int;
	idSuper6_B_2, idSuper6_B_3:int;
	idB1_B1a_2:int;
	idB_B1_2:int;
	let

		-- transition trace :
	--A_A1__To__B_B1_1
		(idA1_A1a_2, idA_A1_2, idSuper6_A_2, idSuper6_Super6_2) 
	= Super6_A_ex(idA1_A1a_1, idA_A1_1, idSuper6_A_1, idSuper6_Super6_1, false);
		

		idSuper6_B_2 
	= 1197;
	
		(idSuper6_B_3, idSuper6_Super6_3, idB1_B1a_2, idB_B1_2) 
	= Super6_B_en(idSuper6_B_2, idSuper6_Super6_2, idB1_B1a_1, idB_B1_1, false);
		

	(idSuper6_A, idA1_A1a, idA_A1, idSuper6_Super6, idSuper6_B, idB1_B1a, idB_B1) 
	=  (idSuper6_A_2, idA1_A1a_2, idA_A1_2, idSuper6_Super6_3, idSuper6_B_3, idB1_B1a_2, idB_B1_2);

	--add unused variables
	(y) 
	= (y_1);
	

	tel

	until true restart POINTSuper6_A



	state A_A1_IDL:

	 var 	idSuper6_A_2:int;
	idA1_A1a_2:int;
	idA_A1_2:int;
	idSuper6_Super6_2:int;
	idSuper6_B_2:int;
	idB1_B1a_2:int;
	idB_B1_2:int;
	y_2, y_3:int;
	let

		
	(y_2) 
	= A_A1_du(y_1);

		

	(idA_A1_2, idA1_A1a_2, idSuper6_A_2, idSuper6_Super6_2, idB_B1_2, idSuper6_B_2, idB1_B1a_2, y_3) 
	= A_A1_node(idA_A1_1, idA1_A1a_1, G, idSuper6_A_1, idSuper6_Super6_1, idB_B1_1, idSuper6_B_1, idB1_B1a_1, y_2, H);

		


	(idSuper6_A, idA1_A1a, idA_A1, idSuper6_Super6, idSuper6_B, idB1_B1a, idB_B1, y) 
	= (idSuper6_A_2, idA1_A1a_2, idA_A1_2, idSuper6_Super6_2, idSuper6_B_2, idB1_B1a_2, idB_B1_2, y_3);
	

	tel

	until true restart POINTSuper6_A



tel


--***************************************************State :Super6_Super6 Automaton***************************************************

node Super6_Super6_node(idSuper6_Super6_1:int;
	idA1_A1a_1:int;
	idA_A1_1:int;
	idSuper6_A_1:int;
	E:bool;
	idB1_B1a_1:int;
	idB_B1_1:int;
	idSuper6_B_1:int;
	y_1:int;
	F:bool;
	G:bool;
	H:bool)

returns (idSuper6_Super6:int;
	idA1_A1a:int;
	idA_A1:int;
	idSuper6_A:int;
	idB1_B1a:int;
	idB_B1:int;
	idSuper6_B:int;
	y:int);


let

	 automaton super6_super6

	state POINTSuper6_Super6:
	unless (idSuper6_Super6_1=0) restart POINT__TO__SUPER6_A_1



	unless (idSuper6_Super6_1=1192) and E restart SUPER6_A__TO__SUPER6_B_1



	unless (idSuper6_Super6_1=1196) and E restart SUPER6_B__TO__SUPER6_A_1



	unless (idSuper6_Super6_1=1192) restart SUPER6_A_IDL

	unless (idSuper6_Super6_1=1196) restart SUPER6_B_IDL

	let

		(idSuper6_Super6, idA1_A1a, idA_A1, idSuper6_A, idB1_B1a, idB_B1, idSuper6_B, y) 
	= (idSuper6_Super6_1, idA1_A1a_1, idA_A1_1, idSuper6_A_1, idB1_B1a_1, idB_B1_1, idSuper6_B_1, y_1);
	

	tel



	state POINT__TO__SUPER6_A_1:

	 var 	idSuper6_Super6_2:int;
	idA1_A1a_2:int;
	idA_A1_2:int;
	idSuper6_A_2:int;
	let

		-- transition trace :
	--POINT__To__Super6_A_1
		(idSuper6_A_2, idSuper6_Super6_2, idA1_A1a_2, idA_A1_2) 
	= Super6_A_en(idSuper6_A_1, idSuper6_Super6_1, idA1_A1a_1, idA_A1_1, false);
		

	(idSuper6_Super6, idA1_A1a, idA_A1, idSuper6_A) 
	=  (idSuper6_Super6_2, idA1_A1a_2, idA_A1_2, idSuper6_A_2);

	--add unused variables
	(idB1_B1a, idB_B1, idSuper6_B, y) 
	= (idB1_B1a_1, idB_B1_1, idSuper6_B_1, y_1);
	

	tel

	until true restart POINTSuper6_Super6



	state SUPER6_A__TO__SUPER6_B_1:

	 var 	idSuper6_Super6_2, idSuper6_Super6_3:int;
	idA1_A1a_2:int;
	idA_A1_2:int;
	idSuper6_A_2:int;
	idB1_B1a_2:int;
	idB_B1_2:int;
	idSuper6_B_2:int;
	let

		-- transition trace :
	--Super6_A__To__Super6_B_1
		(idA1_A1a_2, idA_A1_2, idSuper6_A_2, idSuper6_Super6_2) 
	= Super6_A_ex(idA1_A1a_1, idA_A1_1, idSuper6_A_1, idSuper6_Super6_1, false);
		

		(idSuper6_B_2, idSuper6_Super6_3, idB1_B1a_2, idB_B1_2) 
	= Super6_B_en(idSuper6_B_1, idSuper6_Super6_2, idB1_B1a_1, idB_B1_1, false);
		

	(idSuper6_Super6, idA1_A1a, idA_A1, idSuper6_A, idB1_B1a, idB_B1, idSuper6_B) 
	=  (idSuper6_Super6_3, idA1_A1a_2, idA_A1_2, idSuper6_A_2, idB1_B1a_2, idB_B1_2, idSuper6_B_2);

	--add unused variables
	(y) 
	= (y_1);
	

	tel

	until true restart POINTSuper6_Super6



	state SUPER6_B__TO__SUPER6_A_1:

	 var 	idSuper6_Super6_2, idSuper6_Super6_3:int;
	idA1_A1a_2:int;
	idA_A1_2:int;
	idSuper6_A_2:int;
	idB1_B1a_2:int;
	idB_B1_2:int;
	idSuper6_B_2:int;
	let

		-- transition trace :
	--Super6_B__To__Super6_A_1
		(idB1_B1a_2, idB_B1_2, idSuper6_B_2, idSuper6_Super6_2) 
	= Super6_B_ex(idB1_B1a_1, idB_B1_1, idSuper6_B_1, idSuper6_Super6_1, false);
		

		(idSuper6_A_2, idSuper6_Super6_3, idA1_A1a_2, idA_A1_2) 
	= Super6_A_en(idSuper6_A_1, idSuper6_Super6_2, idA1_A1a_1, idA_A1_1, false);
		

	(idSuper6_Super6, idA1_A1a, idA_A1, idSuper6_A, idB1_B1a, idB_B1, idSuper6_B) 
	=  (idSuper6_Super6_3, idA1_A1a_2, idA_A1_2, idSuper6_A_2, idB1_B1a_2, idB_B1_2, idSuper6_B_2);

	--add unused variables
	(y) 
	= (y_1);
	

	tel

	until true restart POINTSuper6_Super6



	state SUPER6_A_IDL:

	 var 	idSuper6_Super6_2:int;
	idA1_A1a_2:int;
	idA_A1_2:int;
	idSuper6_A_2:int;
	idB1_B1a_2:int;
	idB_B1_2:int;
	idSuper6_B_2:int;
	y_2, y_3:int;
	let

		
	(y_2) 
	= Super6_A_du(y_1);

		

	(idSuper6_A_2, idA1_A1a_2, idA_A1_2, idSuper6_Super6_2, idSuper6_B_2, idB1_B1a_2, idB_B1_2, y_3) 
	= Super6_A_node(idSuper6_A_1, idA1_A1a_1, idA_A1_1, F, idSuper6_Super6_1, idSuper6_B_1, idB1_B1a_1, idB_B1_1, y_2, G, H);

		


	(idSuper6_Super6, idA1_A1a, idA_A1, idSuper6_A, idB1_B1a, idB_B1, idSuper6_B, y) 
	= (idSuper6_Super6_2, idA1_A1a_2, idA_A1_2, idSuper6_A_2, idB1_B1a_2, idB_B1_2, idSuper6_B_2, y_3);
	

	tel

	until true restart POINTSuper6_Super6



	state SUPER6_B_IDL:

	 var 	idSuper6_Super6_2:int;
	idA1_A1a_2:int;
	idA_A1_2:int;
	idSuper6_A_2:int;
	idB1_B1a_2:int;
	idB_B1_2:int;
	idSuper6_B_2:int;
	y_2, y_3:int;
	let

		
	(y_2) 
	= Super6_B_du(y_1);

		

	(idSuper6_B_2, idB1_B1a_2, idB_B1_2, idSuper6_Super6_2, idSuper6_A_2, idA1_A1a_2, idA_A1_2, y_3) 
	= Super6_B_node(idSuper6_B_1, idB1_B1a_1, idB_B1_1, F, idSuper6_Super6_1, idSuper6_A_1, idA1_A1a_1, idA_A1_1, y_2, G, H);

		


	(idSuper6_Super6, idA1_A1a, idA_A1, idSuper6_A, idB1_B1a, idB_B1, idSuper6_B, y) 
	= (idSuper6_Super6_2, idA1_A1a_2, idA_A1_2, idSuper6_A_2, idB1_B1a_2, idB_B1_2, idSuper6_B_2, y_3);
	

	tel

	until true restart POINTSuper6_Super6



tel


--***************************************************State :Super6_Super6 Automaton***************************************************

node Super6_Super6(E:bool;
	F:bool;
	G:bool;
	H:bool)

returns (y:int);


var y_1: int;

	idSuper6_Super6, idSuper6_Super6_1: int;

	idB1_B1a, idB1_B1a_1: int;

	idB_B1, idB_B1_1: int;

	idSuper6_B, idSuper6_B_1: int;

	idA1_A1a, idA1_A1a_1: int;

	idA_A1, idA_A1_1: int;

	idSuper6_A, idSuper6_A_1: int;

		idSuper6_Super6_2, idSuper6_Super6_3, idSuper6_Super6_4:int;
	idA1_A1a_2, idA1_A1a_3, idA1_A1a_4:int;
	idA_A1_2, idA_A1_3, idA_A1_4:int;
	idSuper6_A_2, idSuper6_A_3, idSuper6_A_4:int;
	idB1_B1a_2, idB1_B1a_3, idB1_B1a_4:int;
	idB_B1_2, idB_B1_3, idB_B1_4:int;
	idSuper6_B_2, idSuper6_B_3, idSuper6_B_4:int;
	y_2, y_3, y_4:int;
let

	y_1 = 0 -> pre y;

	idSuper6_Super6_1 = 0 -> pre idSuper6_Super6;

	idB1_B1a_1 = 0 -> pre idB1_B1a;

	idB_B1_1 = 0 -> pre idB_B1;

	idSuper6_B_1 = 0 -> pre idSuper6_B;

	idA1_A1a_1 = 0 -> pre idA1_A1a;

	idA_A1_1 = 0 -> pre idA_A1;

	idSuper6_A_1 = 0 -> pre idSuper6_A;

	



	(idSuper6_Super6_2, idA1_A1a_2, idA_A1_2, idSuper6_A_2, idB1_B1a_2, idB_B1_2, idSuper6_B_2, y_2)
	 = 

	 if E then Super6_Super6_node(idSuper6_Super6_1, idA1_A1a_1, idA_A1_1, idSuper6_A_1, E, idB1_B1a_1, idB_B1_1, idSuper6_B_1, y_1, false, false, false)

	 else (idSuper6_Super6_1, idA1_A1a_1, idA_A1_1, idSuper6_A_1, idB1_B1a_1, idB_B1_1, idSuper6_B_1, y_1);

	



	(idSuper6_Super6_3, idA1_A1a_3, idA_A1_3, idSuper6_A_3, idB1_B1a_3, idB_B1_3, idSuper6_B_3, y_3)
	 = 

	 if F then Super6_Super6_node(idSuper6_Super6_2, idA1_A1a_2, idA_A1_2, idSuper6_A_2, false, idB1_B1a_2, idB_B1_2, idSuper6_B_2, y_2, F, false, false)

	 else (idSuper6_Super6_2, idA1_A1a_2, idA_A1_2, idSuper6_A_2, idB1_B1a_2, idB_B1_2, idSuper6_B_2, y_2);

	



	(idSuper6_Super6_4, idA1_A1a_4, idA_A1_4, idSuper6_A_4, idB1_B1a_4, idB_B1_4, idSuper6_B_4, y_4)
	 = 

	 if G then Super6_Super6_node(idSuper6_Super6_3, idA1_A1a_3, idA_A1_3, idSuper6_A_3, false, idB1_B1a_3, idB_B1_3, idSuper6_B_3, y_3, false, G, false)

	 else (idSuper6_Super6_3, idA1_A1a_3, idA_A1_3, idSuper6_A_3, idB1_B1a_3, idB_B1_3, idSuper6_B_3, y_3);

	



	(idSuper6_Super6, idA1_A1a, idA_A1, idSuper6_A, idB1_B1a, idB_B1, idSuper6_B, y)
	 = 

	 if H then Super6_Super6_node(idSuper6_Super6_4, idA1_A1a_4, idA_A1_4, idSuper6_A_4, false, idB1_B1a_4, idB_B1_4, idSuper6_B_4, y_4, false, false, H)

	 else (idSuper6_Super6_4, idA1_A1a_4, idA_A1_4, idSuper6_A_4, idB1_B1a_4, idB_B1_4, idSuper6_B_4, y_4);

	


--unused outputs
	

tel



node Super6 (E_1_1 : real; F_1_1 : real; G_1_1 : real; H_1_1 : real)
returns (y_1_1 : int); 
var
	Mux_1_1 : real; Mux_1_2 : real; Mux_1_3 : real; Mux_1_4 : real;
	Super6_1_1 : int;
	Mux_1_1_event: bool;
	Mux_1_2_event: bool;
	Mux_1_3_event: bool;
	Mux_1_4_event: bool;
let 
	Mux_1_1 = E_1_1 ;
	Mux_1_2 = F_1_1 ;
	Mux_1_3 = G_1_1 ;
	Mux_1_4 = H_1_1 ;
	Mux_1_1_event = false -> ((pre(Mux_1_1) > 0.0 and Mux_1_1 <= 0.0) or (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0));
	Mux_1_2_event = false -> ((pre(Mux_1_2) > 0.0 and Mux_1_2 <= 0.0) or (pre(Mux_1_2) <= 0.0 and Mux_1_2 > 0.0));
	Mux_1_3_event = false -> ((pre(Mux_1_3) > 0.0 and Mux_1_3 <= 0.0) or (pre(Mux_1_3) <= 0.0 and Mux_1_3 > 0.0));
	Mux_1_4_event = false -> ((pre(Mux_1_4) > 0.0 and Mux_1_4 <= 0.0) or (pre(Mux_1_4) <= 0.0 and Mux_1_4 > 0.0));
	Super6_1_1 =  Super6_Super6(Mux_1_1_event, Mux_1_2_event, Mux_1_3_event, Mux_1_4_event);
	y_1_1 = Super6_1_1;
tel

