-- This file has been generated by cocoSim


-- System nodes





node N1_A__To__N1_B_1_Condition_Action(x_1:int)

returns (x:int);


var 	x_2:int;


let



	x_2 
	=  x_1 +1;
	

	(x) 
	= (x_2);
	

tel






node N2_C__To__N2_D_1_Condition_Action(x_1:int)

returns (x:int);


var 	x_2:int;


let



	x_2 
	=  x_1 +100;
	

	(x) 
	= (x_2);
	

tel






node N1_B__To__N1_A_1_Condition_Action(x_1:int)

returns (x:int);


var 	x_2:int;


let



	x_2 
	=  x_1 -1;
	

	(x) 
	= (x_2);
	

tel







node N2_D__To__N2_C_1_Condition_Action(x_1:int)

returns (x:int);


var 	x_2:int;


let



	x_2 
	=  x_1 -100;
	

	(x) 
	= (x_2);
	

tel






-- Entry action for state :N2_C
node N2_C_en(idParallel1_N2_1:int;
	x_1:int;
	isInner:bool)

returns (idParallel1_N2:int;
	x:int);


var 	idParallel1_N2_2:int;
	x_2:int;


let



	-- set state as active 
	idParallel1_N2_2 
	= 1096;
	

	x_2 
	= if (not isInner) then  x_1 +1000
	 else x_1;
	

	(idParallel1_N2, x) 
	= (idParallel1_N2_2, x_2);
	

tel





-- Exit action for state :N2_C
node N2_C_ex(idParallel1_N2_1:int;
	isInner:bool)

returns (idParallel1_N2:int);


var 	idParallel1_N2_2:int;


let



	-- set state as inactive 
	idParallel1_N2_2
	 = if (not isInner) then 0 else idParallel1_N2_1;


	(idParallel1_N2) 
	= (idParallel1_N2_2);
	

tel






-- Entry action for state :N2_D
node N2_D_en(idParallel1_N2_1:int;
	x_1:int;
	isInner:bool)

returns (idParallel1_N2:int;
	x:int);


var 	idParallel1_N2_2:int;
	x_2:int;


let



	-- set state as active 
	idParallel1_N2_2 
	= 1097;
	

	x_2 
	= if (not isInner) then  x_1 -1000
	 else x_1;
	

	(idParallel1_N2, x) 
	= (idParallel1_N2_2, x_2);
	

tel





-- Exit action for state :N2_D
node N2_D_ex(idParallel1_N2_1:int;
	isInner:bool)

returns (idParallel1_N2:int);


var 	idParallel1_N2_2:int;


let



	-- set state as inactive 
	idParallel1_N2_2
	 = if (not isInner) then 0 else idParallel1_N2_1;


	(idParallel1_N2) 
	= (idParallel1_N2_2);
	

tel






-- Entry action for state :Parallel1_N2
node Parallel1_N2_en(idParallel1_N2_1:int;
	idParallel1_Parallel1_1:int;
	x_1:int;
	isInner:bool)

returns (idParallel1_N2:int;
	idParallel1_Parallel1:int;
	x:int);


var 	idParallel1_N2_2, idParallel1_N2_3, idParallel1_N2_4, idParallel1_N2_5, idParallel1_N2_6:int;
	idParallel1_Parallel1_2, idParallel1_Parallel1_3, idParallel1_Parallel1_4:int;
	x_2, x_3, x_4, x_5, x_6, x_7:int;


let



	-- set state as active 
	idParallel1_Parallel1_2 
	= 1093;
	

	x_2 
	= if (not isInner) then  x_1 +100000
	 else x_1;
	

	
-- transition trace :
	--POINT__To__N2_C_1
		(idParallel1_N2_2, x_3) 
	= N2_C_en(idParallel1_N2_1, x_2, false);
		

	(idParallel1_N2_3, idParallel1_Parallel1_3, x_4) 
	= 

	if ( idParallel1_N2_1 = 0) then

	 (idParallel1_N2_2, idParallel1_Parallel1_2, x_3)

	 else(idParallel1_N2_1, idParallel1_Parallel1_2, x_2);

	

	(idParallel1_N2_4, x_5) 
	= 
	if ( idParallel1_N2_1 = 1096) then
	N2_C_en(idParallel1_N2_1, x_2, false)
	 else (idParallel1_N2_1, x_2);

	

	(idParallel1_N2_5, x_6) 
	= 
	if ( idParallel1_N2_1 = 1097) then
	N2_D_en(idParallel1_N2_1, x_2, false)
	 else (idParallel1_N2_1, x_2);

	

	(idParallel1_N2_6, idParallel1_Parallel1_4, x_7) 
	= 
		 if ( idParallel1_N2_1 = 0) then 
		(idParallel1_N2_3, idParallel1_Parallel1_3, x_4)
		 else
		 if ( idParallel1_N2_1 = 1096) then 
		(idParallel1_N2_4, idParallel1_Parallel1_3, x_5)
		 else
		 if ( idParallel1_N2_1 = 1097) then 
		(idParallel1_N2_5, idParallel1_Parallel1_3, x_6)
		 else (idParallel1_N2_1, idParallel1_Parallel1_2, x_2);


	(idParallel1_N2, idParallel1_Parallel1, x) 
	= (idParallel1_N2_6, idParallel1_Parallel1_4, x_7);
	

tel





-- Exit action for state :Parallel1_N2
node Parallel1_N2_ex(idParallel1_N2_1:int;
	x_1:int;
	idParallel1_Parallel1_1:int;
	isInner:bool)

returns (idParallel1_N2:int;
	x:int;
	idParallel1_Parallel1:int);


var 	idParallel1_N2_2, idParallel1_N2_3, idParallel1_N2_4, idParallel1_N2_5:int;
	x_2:int;
	idParallel1_Parallel1_2:int;


let



	
	(idParallel1_N2_2) 
	= 
	if ( idParallel1_N2_1 = 1096) then
	N2_C_ex(idParallel1_N2_1, false)
	 else (idParallel1_N2_1);

	

	(idParallel1_N2_3) 
	= 
	if ( idParallel1_N2_1 = 1097) then
	N2_D_ex(idParallel1_N2_1, false)
	 else (idParallel1_N2_1);

	

	(idParallel1_N2_4) 
	= 
		 if ( idParallel1_N2_1 = 1096) then 
		(idParallel1_N2_2)
		 else
		 if ( idParallel1_N2_1 = 1097) then 
		(idParallel1_N2_3)
		 else (idParallel1_N2_1);


	x_2 
	= if (not isInner) then  x_1 -100000
	 else x_1;
	

	-- set state as inactive 
	idParallel1_Parallel1_2
	 = if (not isInner) then 0 else idParallel1_Parallel1_1;

	idParallel1_N2_5 
	= 0;
	

	(idParallel1_N2, x, idParallel1_Parallel1) 
	= (idParallel1_N2_5, x_2, idParallel1_Parallel1_2);
	

tel






-- Entry action for state :N1_A
node N1_A_en(idParallel1_N1_1:int;
	x_1:int;
	isInner:bool)

returns (idParallel1_N1:int;
	x:int);


var 	idParallel1_N1_2:int;
	x_2:int;


let



	-- set state as active 
	idParallel1_N1_2 
	= 1094;
	

	x_2 
	= if (not isInner) then  x_1 +10
	 else x_1;
	

	(idParallel1_N1, x) 
	= (idParallel1_N1_2, x_2);
	

tel





-- Exit action for state :N1_A
node N1_A_ex(idParallel1_N1_1:int;
	isInner:bool)

returns (idParallel1_N1:int);


var 	idParallel1_N1_2:int;


let



	-- set state as inactive 
	idParallel1_N1_2
	 = if (not isInner) then 0 else idParallel1_N1_1;


	(idParallel1_N1) 
	= (idParallel1_N1_2);
	

tel






-- Entry action for state :N1_B
node N1_B_en(idParallel1_N1_1:int;
	x_1:int;
	isInner:bool)

returns (idParallel1_N1:int;
	x:int);


var 	idParallel1_N1_2:int;
	x_2:int;


let



	-- set state as active 
	idParallel1_N1_2 
	= 1095;
	

	x_2 
	= if (not isInner) then  x_1 -10
	 else x_1;
	

	(idParallel1_N1, x) 
	= (idParallel1_N1_2, x_2);
	

tel





-- Exit action for state :N1_B
node N1_B_ex(idParallel1_N1_1:int;
	isInner:bool)

returns (idParallel1_N1:int);


var 	idParallel1_N1_2:int;


let



	-- set state as inactive 
	idParallel1_N1_2
	 = if (not isInner) then 0 else idParallel1_N1_1;


	(idParallel1_N1) 
	= (idParallel1_N1_2);
	

tel






-- Entry action for state :Parallel1_N1
node Parallel1_N1_en(idParallel1_N1_1:int;
	idParallel1_Parallel1_1:int;
	x_1:int;
	isInner:bool)

returns (idParallel1_N1:int;
	idParallel1_Parallel1:int;
	x:int);


var 	idParallel1_N1_2, idParallel1_N1_3, idParallel1_N1_4, idParallel1_N1_5, idParallel1_N1_6:int;
	idParallel1_Parallel1_2, idParallel1_Parallel1_3, idParallel1_Parallel1_4:int;
	x_2, x_3, x_4, x_5, x_6, x_7:int;


let



	-- set state as active 
	idParallel1_Parallel1_2 
	= 1092;
	

	x_2 
	= if (not isInner) then  x_1 +10000
	 else x_1;
	

	
-- transition trace :
	--POINT__To__N1_A_1
		(idParallel1_N1_2, x_3) 
	= N1_A_en(idParallel1_N1_1, x_2, false);
		

	(idParallel1_N1_3, idParallel1_Parallel1_3, x_4) 
	= 

	if ( idParallel1_N1_1 = 0) then

	 (idParallel1_N1_2, idParallel1_Parallel1_2, x_3)

	 else(idParallel1_N1_1, idParallel1_Parallel1_2, x_2);

	

	(idParallel1_N1_4, x_5) 
	= 
	if ( idParallel1_N1_1 = 1094) then
	N1_A_en(idParallel1_N1_1, x_2, false)
	 else (idParallel1_N1_1, x_2);

	

	(idParallel1_N1_5, x_6) 
	= 
	if ( idParallel1_N1_1 = 1095) then
	N1_B_en(idParallel1_N1_1, x_2, false)
	 else (idParallel1_N1_1, x_2);

	

	(idParallel1_N1_6, idParallel1_Parallel1_4, x_7) 
	= 
		 if ( idParallel1_N1_1 = 0) then 
		(idParallel1_N1_3, idParallel1_Parallel1_3, x_4)
		 else
		 if ( idParallel1_N1_1 = 1094) then 
		(idParallel1_N1_4, idParallel1_Parallel1_3, x_5)
		 else
		 if ( idParallel1_N1_1 = 1095) then 
		(idParallel1_N1_5, idParallel1_Parallel1_3, x_6)
		 else (idParallel1_N1_1, idParallel1_Parallel1_2, x_2);


	(idParallel1_N1, idParallel1_Parallel1, x) 
	= (idParallel1_N1_6, idParallel1_Parallel1_4, x_7);
	

tel





-- Exit action for state :Parallel1_N1
node Parallel1_N1_ex(idParallel1_N1_1:int;
	x_1:int;
	idParallel1_Parallel1_1:int;
	isInner:bool)

returns (idParallel1_N1:int;
	x:int;
	idParallel1_Parallel1:int);


var 	idParallel1_N1_2, idParallel1_N1_3, idParallel1_N1_4, idParallel1_N1_5:int;
	x_2:int;
	idParallel1_Parallel1_2:int;


let



	
	(idParallel1_N1_2) 
	= 
	if ( idParallel1_N1_1 = 1094) then
	N1_A_ex(idParallel1_N1_1, false)
	 else (idParallel1_N1_1);

	

	(idParallel1_N1_3) 
	= 
	if ( idParallel1_N1_1 = 1095) then
	N1_B_ex(idParallel1_N1_1, false)
	 else (idParallel1_N1_1);

	

	(idParallel1_N1_4) 
	= 
		 if ( idParallel1_N1_1 = 1094) then 
		(idParallel1_N1_2)
		 else
		 if ( idParallel1_N1_1 = 1095) then 
		(idParallel1_N1_3)
		 else (idParallel1_N1_1);


	x_2 
	= if (not isInner) then  x_1 -10000
	 else x_1;
	

	-- set state as inactive 
	idParallel1_Parallel1_2
	 = if (not isInner) then 0 else idParallel1_Parallel1_1;

	idParallel1_N1_5 
	= 0;
	

	(idParallel1_N1, x, idParallel1_Parallel1) 
	= (idParallel1_N1_5, x_2, idParallel1_Parallel1_2);
	

tel





--During action for state :Parallel1_N1
node Parallel1_N1_du(x_1:int)

returns (x:int);


var 	x_2:int;


let



	x_2 
	=  x_1 +1000000;
	

	(x) 
	= (x_2);
	

tel


--***************************************************State :Parallel1_N2 Automaton***************************************************

node Parallel1_N2_node(idParallel1_N2_1:int;
	x_1:int;
	S2:bool;
	R2:bool)

returns (idParallel1_N2:int;
	x:int);


let

	 automaton parallel1_n2

	state POINTParallel1_N2:
	unless (idParallel1_N2_1=0) restart POINT__TO__N2_C_1



	unless (idParallel1_N2_1=1096) and S2 restart N2_C__TO__N2_D_1



	unless (idParallel1_N2_1=1097) and R2 restart N2_D__TO__N2_C_1



	unless (idParallel1_N2_1=1096) restart N2_C_IDL

	unless (idParallel1_N2_1=1097) restart N2_D_IDL

	let

		(idParallel1_N2, x) 
	= (idParallel1_N2_1, x_1);
	

	tel



	state POINT__TO__N2_C_1:

	 var 	idParallel1_N2_2:int;
	x_2:int;
	let

		-- transition trace :
	--POINT__To__N2_C_1
		(idParallel1_N2_2, x_2) 
	= N2_C_en(idParallel1_N2_1, x_1, false);
		

	(idParallel1_N2, x) 
	=  (idParallel1_N2_2, x_2);


	tel

	until true restart POINTParallel1_N2



	state N2_C__TO__N2_D_1:

	 var 	idParallel1_N2_2, idParallel1_N2_3:int;
	x_2, x_3:int;
	let

		-- transition trace :
	--N2_C__To__N2_D_1
		-- condition Action : x+=100;
		
		(x_2) 
	= N2_C__To__N2_D_1_Condition_Action(x_1);
		

		(idParallel1_N2_2) 
	= N2_C_ex(idParallel1_N2_1, false);
		

		(idParallel1_N2_3, x_3) 
	= N2_D_en(idParallel1_N2_2, x_2, false);
		

	(idParallel1_N2, x) 
	=  (idParallel1_N2_3, x_3);


	tel

	until true restart POINTParallel1_N2



	state N2_D__TO__N2_C_1:

	 var 	idParallel1_N2_2, idParallel1_N2_3:int;
	x_2, x_3:int;
	let

		-- transition trace :
	--N2_D__To__N2_C_1
		-- condition Action : x-=100;
		
		(x_2) 
	= N2_D__To__N2_C_1_Condition_Action(x_1);
		

		(idParallel1_N2_2) 
	= N2_D_ex(idParallel1_N2_1, false);
		

		(idParallel1_N2_3, x_3) 
	= N2_C_en(idParallel1_N2_2, x_2, false);
		

	(idParallel1_N2, x) 
	=  (idParallel1_N2_3, x_3);


	tel

	until true restart POINTParallel1_N2



	state N2_C_IDL:

	 	let

		

	(idParallel1_N2, x) 
	= (idParallel1_N2_1, x_1);
	

	tel

	until true restart POINTParallel1_N2



	state N2_D_IDL:

	 	let

		

	(idParallel1_N2, x) 
	= (idParallel1_N2_1, x_1);
	

	tel

	until true restart POINTParallel1_N2



tel


--***************************************************State :Parallel1_N1 Automaton***************************************************

node Parallel1_N1_node(idParallel1_N1_1:int;
	x_1:int;
	S1:bool;
	R1:bool)

returns (idParallel1_N1:int;
	x:int);


let

	 automaton parallel1_n1

	state POINTParallel1_N1:
	unless (idParallel1_N1_1=0) restart POINT__TO__N1_A_1



	unless (idParallel1_N1_1=1094) and S1 restart N1_A__TO__N1_B_1



	unless (idParallel1_N1_1=1095) and R1 restart N1_B__TO__N1_A_1



	unless (idParallel1_N1_1=1094) restart N1_A_IDL

	unless (idParallel1_N1_1=1095) restart N1_B_IDL

	let

		(idParallel1_N1, x) 
	= (idParallel1_N1_1, x_1);
	

	tel



	state POINT__TO__N1_A_1:

	 var 	idParallel1_N1_2:int;
	x_2:int;
	let

		-- transition trace :
	--POINT__To__N1_A_1
		(idParallel1_N1_2, x_2) 
	= N1_A_en(idParallel1_N1_1, x_1, false);
		

	(idParallel1_N1, x) 
	=  (idParallel1_N1_2, x_2);


	tel

	until true restart POINTParallel1_N1



	state N1_A__TO__N1_B_1:

	 var 	idParallel1_N1_2, idParallel1_N1_3:int;
	x_2, x_3:int;
	let

		-- transition trace :
	--N1_A__To__N1_B_1
		-- condition Action : x+=1;
		
		(x_2) 
	= N1_A__To__N1_B_1_Condition_Action(x_1);
		

		(idParallel1_N1_2) 
	= N1_A_ex(idParallel1_N1_1, false);
		

		(idParallel1_N1_3, x_3) 
	= N1_B_en(idParallel1_N1_2, x_2, false);
		

	(idParallel1_N1, x) 
	=  (idParallel1_N1_3, x_3);


	tel

	until true restart POINTParallel1_N1



	state N1_B__TO__N1_A_1:

	 var 	idParallel1_N1_2, idParallel1_N1_3:int;
	x_2, x_3:int;
	let

		-- transition trace :
	--N1_B__To__N1_A_1
		-- condition Action : x-=1;
		
		(x_2) 
	= N1_B__To__N1_A_1_Condition_Action(x_1);
		

		(idParallel1_N1_2) 
	= N1_B_ex(idParallel1_N1_1, false);
		

		(idParallel1_N1_3, x_3) 
	= N1_A_en(idParallel1_N1_2, x_2, false);
		

	(idParallel1_N1, x) 
	=  (idParallel1_N1_3, x_3);


	tel

	until true restart POINTParallel1_N1



	state N1_A_IDL:

	 	let

		

	(idParallel1_N1, x) 
	= (idParallel1_N1_1, x_1);
	

	tel

	until true restart POINTParallel1_N1



	state N1_B_IDL:

	 	let

		

	(idParallel1_N1, x) 
	= (idParallel1_N1_1, x_1);
	

	tel

	until true restart POINTParallel1_N1



tel


--***************************************************State :Parallel1_Parallel1 Automaton***************************************************

node Parallel1_Parallel1_node(idParallel1_Parallel1_1:int;
	idParallel1_N1_1:int;
	x_1:int;
	idParallel1_N2_1:int;
	R1:bool;
	S1:bool;
	R2:bool;
	S2:bool)

returns (idParallel1_Parallel1:int;
	idParallel1_N1:int;
	x:int;
	idParallel1_N2:int);


let

	 automaton parallel1_parallel1

	state POINTParallel1_Parallel1:
	unless (idParallel1_Parallel1_1=0) restart PARALLEL1_PARALLEL1_PARALLEL_ENTRY
	unless true  restart PARALLEL1_PARALLEL1_PARALLEL_IDL

	let

		(idParallel1_Parallel1, idParallel1_N1, x, idParallel1_N2) 
	= (idParallel1_Parallel1_1, idParallel1_N1_1, x_1, idParallel1_N2_1);
	

	tel



	state PARALLEL1_PARALLEL1_PARALLEL_ENTRY:

	 var 	idParallel1_Parallel1_2, idParallel1_Parallel1_3:int;
	idParallel1_N1_2:int;
	x_2, x_3:int;
	idParallel1_N2_2:int;
	let

		
	(idParallel1_N1_2, idParallel1_Parallel1_2, x_2) 
	= Parallel1_N1_en(idParallel1_N1_1, idParallel1_Parallel1_1, x_1, false);

	(idParallel1_N2_2, idParallel1_Parallel1_3, x_3) 
	= Parallel1_N2_en(idParallel1_N2_1, idParallel1_Parallel1_2, x_2, false);


	(idParallel1_Parallel1, idParallel1_N1, x, idParallel1_N2) 
	= (idParallel1_Parallel1_3, idParallel1_N1_2, x_3, idParallel1_N2_2);
	

	tel

	until true restart POINTParallel1_Parallel1



	state PARALLEL1_PARALLEL1_PARALLEL_IDL:

	 var 	idParallel1_N1_2:int;
	x_2, x_3, x_4:int;
	idParallel1_N2_2:int;
	let

		
	(x_2) 
	= if not (idParallel1_N1_1= 0 ) then Parallel1_N1_du(x_1)

		 else (x_1);

		


		(idParallel1_N1_2, x_3)
	= if not (idParallel1_N1_1= 0 ) then Parallel1_N1_node(idParallel1_N1_1, x_2, S1, R1)

		 else (idParallel1_N1_1, x_2);

		

		

		(idParallel1_N2_2, x_4)
	= if not (idParallel1_N2_1= 0 ) then Parallel1_N2_node(idParallel1_N2_1, x_3, S2, R2)

		 else (idParallel1_N2_1, x_3);

		

		

	(idParallel1_Parallel1, idParallel1_N1, x, idParallel1_N2) 
	= (idParallel1_Parallel1_1, idParallel1_N1_2, x_4, idParallel1_N2_2);
	

	tel

	until true restart POINTParallel1_Parallel1



tel


--***************************************************State :Parallel1_Parallel1 Automaton***************************************************

node Parallel1_Parallel1(S1:bool;
	R1:bool;
	S2:bool;
	R2:bool)

returns (x:int);


var x_1: int;

	idParallel1_Parallel1, idParallel1_Parallel1_1: int;

	idParallel1_N2, idParallel1_N2_1: int;

	idParallel1_N1, idParallel1_N1_1: int;

		idParallel1_Parallel1_2, idParallel1_Parallel1_3, idParallel1_Parallel1_4:int;
	idParallel1_N1_2, idParallel1_N1_3, idParallel1_N1_4:int;
	x_2, x_3, x_4:int;
	idParallel1_N2_2, idParallel1_N2_3, idParallel1_N2_4:int;
let

	x_1 = 0 -> pre x;

	idParallel1_Parallel1_1 = 0 -> pre idParallel1_Parallel1;

	idParallel1_N2_1 = 0 -> pre idParallel1_N2;

	idParallel1_N1_1 = 0 -> pre idParallel1_N1;

	



	(idParallel1_Parallel1_2, idParallel1_N1_2, x_2, idParallel1_N2_2)
	 = 

	 if S1 then Parallel1_Parallel1_node(idParallel1_Parallel1_1, idParallel1_N1_1, x_1, idParallel1_N2_1, false, S1, false, false)

	 else (idParallel1_Parallel1_1, idParallel1_N1_1, x_1, idParallel1_N2_1);

	



	(idParallel1_Parallel1_3, idParallel1_N1_3, x_3, idParallel1_N2_3)
	 = 

	 if R1 then Parallel1_Parallel1_node(idParallel1_Parallel1_2, idParallel1_N1_2, x_2, idParallel1_N2_2, R1, false, false, false)

	 else (idParallel1_Parallel1_2, idParallel1_N1_2, x_2, idParallel1_N2_2);

	



	(idParallel1_Parallel1_4, idParallel1_N1_4, x_4, idParallel1_N2_4)
	 = 

	 if S2 then Parallel1_Parallel1_node(idParallel1_Parallel1_3, idParallel1_N1_3, x_3, idParallel1_N2_3, false, false, false, S2)

	 else (idParallel1_Parallel1_3, idParallel1_N1_3, x_3, idParallel1_N2_3);

	



	(idParallel1_Parallel1, idParallel1_N1, x, idParallel1_N2)
	 = 

	 if R2 then Parallel1_Parallel1_node(idParallel1_Parallel1_4, idParallel1_N1_4, x_4, idParallel1_N2_4, false, false, R2, false)

	 else (idParallel1_Parallel1_4, idParallel1_N1_4, x_4, idParallel1_N2_4);

	


--unused outputs
	

tel



node Parallel1 (S1_1_1 : real; R1_1_1 : real; S2_1_1 : real; R2_1_1 : real)
returns (x_1_1 : int); 
var
	Mux_1_1 : real; Mux_1_2 : real; Mux_1_3 : real; Mux_1_4 : real;
	Parallel1_1_1 : int;
	Mux_1_1_event: bool;
	Mux_1_2_event: bool;
	Mux_1_3_event: bool;
	Mux_1_4_event: bool;
let 
	Mux_1_1 = S1_1_1 ;
	Mux_1_2 = R1_1_1 ;
	Mux_1_3 = S2_1_1 ;
	Mux_1_4 = R2_1_1 ;
	Mux_1_1_event = false -> ((pre(Mux_1_1) > 0.0 and Mux_1_1 <= 0.0) or (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0));
	Mux_1_2_event = false -> ((pre(Mux_1_2) > 0.0 and Mux_1_2 <= 0.0) or (pre(Mux_1_2) <= 0.0 and Mux_1_2 > 0.0));
	Mux_1_3_event = false -> ((pre(Mux_1_3) > 0.0 and Mux_1_3 <= 0.0) or (pre(Mux_1_3) <= 0.0 and Mux_1_3 > 0.0));
	Mux_1_4_event = false -> ((pre(Mux_1_4) > 0.0 and Mux_1_4 <= 0.0) or (pre(Mux_1_4) <= 0.0 and Mux_1_4 > 0.0));
	Parallel1_1_1 =  Parallel1_Parallel1(Mux_1_1_event, Mux_1_2_event, Mux_1_3_event, Mux_1_4_event);
	x_1_1 = Parallel1_1_1;
tel

