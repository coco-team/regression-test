-- This file has been generated by cocoSim


-- System nodes




node N1_B__To__N1_A_1_Condition_Action(x_1:real)

returns (x:real);


var 	x_2:real;


let



	x_2 
	=  x_1 -1.;
	

	(x) 
	= (x_2);
	

tel








node N1_A__To__N1_B_1_Condition_Action(x_1:real)

returns (x:real);


var 	x_2:real;


let



	x_2 
	=  x_1 +1.;
	

	(x) 
	= (x_2);
	

tel






node N2_C__To__N2_D_1_Condition_Action(x_1:real)

returns (x:real);


var 	x_2:real;


let



	x_2 
	=  x_1 +100.;
	

	(x) 
	= (x_2);
	

tel







node N2_D__To__N2_C_1_Condition_Action(x_1:real)

returns (x:real);


var 	x_2:real;


let



	x_2 
	=  x_1 -100.;
	

	(x) 
	= (x_2);
	

tel






-- Entry action for state :N2_C
node N2_C_en(idTOP_N2_1:int;
	x_1:real;
	isInner:bool)

returns (idTOP_N2:int;
	x:real);


var 	idTOP_N2_2:int;
	x_2:real;


let



	-- set state as active 
	idTOP_N2_2 
	= 1163;
	

	x_2 
	= if (not isInner) then  x_1 +1000.
	 else x_1;
	

	(idTOP_N2, x) 
	= (idTOP_N2_2, x_2);
	

tel





-- Exit action for state :N2_C
node N2_C_ex(idTOP_N2_1:int;
	isInner:bool)

returns (idTOP_N2:int);


var 	idTOP_N2_2:int;


let



	-- set state as inactive 
	idTOP_N2_2
	 = if (not isInner) then 0 else idTOP_N2_1;


	(idTOP_N2) 
	= (idTOP_N2_2);
	

tel






-- Entry action for state :N2_D
node N2_D_en(idTOP_N2_1:int;
	x_1:real;
	isInner:bool)

returns (idTOP_N2:int;
	x:real);


var 	idTOP_N2_2:int;
	x_2:real;


let



	-- set state as active 
	idTOP_N2_2 
	= 1164;
	

	x_2 
	= if (not isInner) then  x_1 -1000.
	 else x_1;
	

	(idTOP_N2, x) 
	= (idTOP_N2_2, x_2);
	

tel





-- Exit action for state :N2_D
node N2_D_ex(idTOP_N2_1:int;
	isInner:bool)

returns (idTOP_N2:int);


var 	idTOP_N2_2:int;


let



	-- set state as inactive 
	idTOP_N2_2
	 = if (not isInner) then 0 else idTOP_N2_1;


	(idTOP_N2) 
	= (idTOP_N2_2);
	

tel






-- Entry action for state :TOP_N2
node TOP_N2_en(idTOP_N2_1:int;
	idParallel2_TOP_1:int;
	x_1:real;
	isInner:bool)

returns (idTOP_N2:int;
	idParallel2_TOP:int;
	x:real);


var 	idTOP_N2_2, idTOP_N2_3, idTOP_N2_4, idTOP_N2_5, idTOP_N2_6:int;
	idParallel2_TOP_2, idParallel2_TOP_3, idParallel2_TOP_4:int;
	x_2, x_3, x_4, x_5, x_6, x_7:real;


let



	-- set state as active 
	idParallel2_TOP_2 
	= 1160;
	

	x_2 
	= if (not isInner) then  x_1 +100000.
	 else x_1;
	

	
-- transition trace :
	--POINT__To__N2_C_1
		(idTOP_N2_2, x_3) 
	= N2_C_en(idTOP_N2_1, x_2, false);
		

	(idTOP_N2_3, idParallel2_TOP_3, x_4) 
	= 

	if ( idTOP_N2_1 = 0) then

	 (idTOP_N2_2, idParallel2_TOP_2, x_3)

	 else(idTOP_N2_1, idParallel2_TOP_2, x_2);

	

	(idTOP_N2_4, x_5) 
	= 
	if ( idTOP_N2_1 = 1163) then
	N2_C_en(idTOP_N2_1, x_2, false)
	 else (idTOP_N2_1, x_2);

	

	(idTOP_N2_5, x_6) 
	= 
	if ( idTOP_N2_1 = 1164) then
	N2_D_en(idTOP_N2_1, x_2, false)
	 else (idTOP_N2_1, x_2);

	

	(idTOP_N2_6, idParallel2_TOP_4, x_7) 
	= 
		 if ( idTOP_N2_1 = 0) then 
		(idTOP_N2_3, idParallel2_TOP_3, x_4)
		 else
		 if ( idTOP_N2_1 = 1163) then 
		(idTOP_N2_4, idParallel2_TOP_3, x_5)
		 else
		 if ( idTOP_N2_1 = 1164) then 
		(idTOP_N2_5, idParallel2_TOP_3, x_6)
		 else (idTOP_N2_1, idParallel2_TOP_2, x_2);


	(idTOP_N2, idParallel2_TOP, x) 
	= (idTOP_N2_6, idParallel2_TOP_4, x_7);
	

tel





-- Exit action for state :TOP_N2
node TOP_N2_ex(idTOP_N2_1:int;
	x_1:real;
	idParallel2_TOP_1:int;
	isInner:bool)

returns (idTOP_N2:int;
	x:real;
	idParallel2_TOP:int);


var 	idTOP_N2_2, idTOP_N2_3, idTOP_N2_4, idTOP_N2_5:int;
	x_2:real;
	idParallel2_TOP_2:int;


let



	
	(idTOP_N2_2) 
	= 
	if ( idTOP_N2_1 = 1163) then
	N2_C_ex(idTOP_N2_1, false)
	 else (idTOP_N2_1);

	

	(idTOP_N2_3) 
	= 
	if ( idTOP_N2_1 = 1164) then
	N2_D_ex(idTOP_N2_1, false)
	 else (idTOP_N2_1);

	

	(idTOP_N2_4) 
	= 
		 if ( idTOP_N2_1 = 1163) then 
		(idTOP_N2_2)
		 else
		 if ( idTOP_N2_1 = 1164) then 
		(idTOP_N2_3)
		 else (idTOP_N2_1);


	x_2 
	= if (not isInner) then  x_1 -100000.
	 else x_1;
	

	-- set state as inactive 
	idParallel2_TOP_2
	 = if (not isInner) then 0 else idParallel2_TOP_1;

	idTOP_N2_5 
	= 0;
	

	(idTOP_N2, x, idParallel2_TOP) 
	= (idTOP_N2_5, x_2, idParallel2_TOP_2);
	

tel






-- Entry action for state :N1_A
node N1_A_en(idTOP_N1_1:int;
	x_1:real;
	isInner:bool)

returns (idTOP_N1:int;
	x:real);


var 	idTOP_N1_2:int;
	x_2:real;


let



	-- set state as active 
	idTOP_N1_2 
	= 1161;
	

	x_2 
	= if (not isInner) then  x_1 +10.
	 else x_1;
	

	(idTOP_N1, x) 
	= (idTOP_N1_2, x_2);
	

tel





-- Exit action for state :N1_A
node N1_A_ex(idTOP_N1_1:int;
	isInner:bool)

returns (idTOP_N1:int);


var 	idTOP_N1_2:int;


let



	-- set state as inactive 
	idTOP_N1_2
	 = if (not isInner) then 0 else idTOP_N1_1;


	(idTOP_N1) 
	= (idTOP_N1_2);
	

tel






-- Entry action for state :N1_B
node N1_B_en(idTOP_N1_1:int;
	x_1:real;
	isInner:bool)

returns (idTOP_N1:int;
	x:real);


var 	idTOP_N1_2:int;
	x_2:real;


let



	-- set state as active 
	idTOP_N1_2 
	= 1162;
	

	x_2 
	= if (not isInner) then  x_1 -10.
	 else x_1;
	

	(idTOP_N1, x) 
	= (idTOP_N1_2, x_2);
	

tel





-- Exit action for state :N1_B
node N1_B_ex(idTOP_N1_1:int;
	isInner:bool)

returns (idTOP_N1:int);


var 	idTOP_N1_2:int;


let



	-- set state as inactive 
	idTOP_N1_2
	 = if (not isInner) then 0 else idTOP_N1_1;


	(idTOP_N1) 
	= (idTOP_N1_2);
	

tel






-- Entry action for state :TOP_N1
node TOP_N1_en(idTOP_N1_1:int;
	idParallel2_TOP_1:int;
	x_1:real;
	isInner:bool)

returns (idTOP_N1:int;
	idParallel2_TOP:int;
	x:real);


var 	idTOP_N1_2, idTOP_N1_3, idTOP_N1_4, idTOP_N1_5, idTOP_N1_6:int;
	idParallel2_TOP_2, idParallel2_TOP_3, idParallel2_TOP_4:int;
	x_2, x_3, x_4, x_5, x_6, x_7:real;


let



	-- set state as active 
	idParallel2_TOP_2 
	= 1159;
	

	x_2 
	= if (not isInner) then  x_1 +10000.
	 else x_1;
	

	
-- transition trace :
	--POINT__To__N1_A_1
		(idTOP_N1_2, x_3) 
	= N1_A_en(idTOP_N1_1, x_2, false);
		

	(idTOP_N1_3, idParallel2_TOP_3, x_4) 
	= 

	if ( idTOP_N1_1 = 0) then

	 (idTOP_N1_2, idParallel2_TOP_2, x_3)

	 else(idTOP_N1_1, idParallel2_TOP_2, x_2);

	

	(idTOP_N1_4, x_5) 
	= 
	if ( idTOP_N1_1 = 1161) then
	N1_A_en(idTOP_N1_1, x_2, false)
	 else (idTOP_N1_1, x_2);

	

	(idTOP_N1_5, x_6) 
	= 
	if ( idTOP_N1_1 = 1162) then
	N1_B_en(idTOP_N1_1, x_2, false)
	 else (idTOP_N1_1, x_2);

	

	(idTOP_N1_6, idParallel2_TOP_4, x_7) 
	= 
		 if ( idTOP_N1_1 = 0) then 
		(idTOP_N1_3, idParallel2_TOP_3, x_4)
		 else
		 if ( idTOP_N1_1 = 1161) then 
		(idTOP_N1_4, idParallel2_TOP_3, x_5)
		 else
		 if ( idTOP_N1_1 = 1162) then 
		(idTOP_N1_5, idParallel2_TOP_3, x_6)
		 else (idTOP_N1_1, idParallel2_TOP_2, x_2);


	(idTOP_N1, idParallel2_TOP, x) 
	= (idTOP_N1_6, idParallel2_TOP_4, x_7);
	

tel





-- Exit action for state :TOP_N1
node TOP_N1_ex(idTOP_N1_1:int;
	x_1:real;
	idParallel2_TOP_1:int;
	isInner:bool)

returns (idTOP_N1:int;
	x:real;
	idParallel2_TOP:int);


var 	idTOP_N1_2, idTOP_N1_3, idTOP_N1_4, idTOP_N1_5:int;
	x_2:real;
	idParallel2_TOP_2:int;


let



	
	(idTOP_N1_2) 
	= 
	if ( idTOP_N1_1 = 1161) then
	N1_A_ex(idTOP_N1_1, false)
	 else (idTOP_N1_1);

	

	(idTOP_N1_3) 
	= 
	if ( idTOP_N1_1 = 1162) then
	N1_B_ex(idTOP_N1_1, false)
	 else (idTOP_N1_1);

	

	(idTOP_N1_4) 
	= 
		 if ( idTOP_N1_1 = 1161) then 
		(idTOP_N1_2)
		 else
		 if ( idTOP_N1_1 = 1162) then 
		(idTOP_N1_3)
		 else (idTOP_N1_1);


	x_2 
	= if (not isInner) then  x_1 -10000.
	 else x_1;
	

	-- set state as inactive 
	idParallel2_TOP_2
	 = if (not isInner) then 0 else idParallel2_TOP_1;

	idTOP_N1_5 
	= 0;
	

	(idTOP_N1, x, idParallel2_TOP) 
	= (idTOP_N1_5, x_2, idParallel2_TOP_2);
	

tel






-- Entry action for state :Parallel2_TOP
node Parallel2_TOP_en(idParallel2_TOP_1:int;
	idParallel2_Parallel2_1:int;
	x_1:real;
	idTOP_N1_1:int;
	idTOP_N2_1:int;
	isInner:bool)

returns (idParallel2_TOP:int;
	idParallel2_Parallel2:int;
	x:real;
	idTOP_N1:int;
	idTOP_N2:int);


var 	idParallel2_TOP_2, idParallel2_TOP_3:int;
	idParallel2_Parallel2_2:int;
	x_2, x_3, x_4:real;
	idTOP_N1_2:int;
	idTOP_N2_2:int;


let



	-- set state as active 
	idParallel2_Parallel2_2 
	= 1165;
	

	x_2 
	= if (not isInner) then  x_1 +1000000.
	 else x_1;
	

	
	(idTOP_N1_2, idParallel2_TOP_2, x_3) 
	= TOP_N1_en(idTOP_N1_1, idParallel2_TOP_1, x_2, false);

	(idTOP_N2_2, idParallel2_TOP_3, x_4) 
	= TOP_N2_en(idTOP_N2_1, idParallel2_TOP_2, x_3, false);


	(idParallel2_TOP, idParallel2_Parallel2, x, idTOP_N1, idTOP_N2) 
	= (idParallel2_TOP_3, idParallel2_Parallel2_2, x_4, idTOP_N1_2, idTOP_N2_2);
	

tel





-- Exit action for state :Parallel2_TOP
node Parallel2_TOP_ex(idTOP_N2_1:int;
	x_1:real;
	idParallel2_TOP_1:int;
	idTOP_N1_1:int;
	idParallel2_Parallel2_1:int;
	isInner:bool)

returns (idTOP_N2:int;
	x:real;
	idParallel2_TOP:int;
	idTOP_N1:int;
	idParallel2_Parallel2:int);


var 	idTOP_N2_2:int;
	x_2, x_3, x_4:real;
	idParallel2_TOP_2, idParallel2_TOP_3, idParallel2_TOP_4:int;
	idTOP_N1_2:int;
	idParallel2_Parallel2_2:int;


let



	
	(idTOP_N2_2, x_2, idParallel2_TOP_2) 
	= TOP_N2_ex(idTOP_N2_1, x_1, idParallel2_TOP_1, false);

	(idTOP_N1_2, x_3, idParallel2_TOP_3) 
	= TOP_N1_ex(idTOP_N1_1, x_2, idParallel2_TOP_2, false);


	x_4 
	= if (not isInner) then  x_3 -1000000.
	 else x_3;
	

	-- set state as inactive 
	idParallel2_Parallel2_2
	 = if (not isInner) then 0 else idParallel2_Parallel2_1;

	idParallel2_TOP_4 
	= 0;
	

	(idTOP_N2, x, idParallel2_TOP, idTOP_N1, idParallel2_Parallel2) 
	= (idTOP_N2_2, x_4, idParallel2_TOP_4, idTOP_N1_2, idParallel2_Parallel2_2);
	

tel


--***************************************************State :TOP_N2 Automaton***************************************************

node TOP_N2_node(idTOP_N2_1:int;
	x_1:real;
	S2:bool;
	R2:bool)

returns (idTOP_N2:int;
	x:real);


let

	 automaton top_n2

	state POINTTOP_N2:
	unless (idTOP_N2_1=0) restart POINT__TO__N2_C_1



	unless (idTOP_N2_1=1163) and S2 restart N2_C__TO__N2_D_1



	unless (idTOP_N2_1=1164) and R2 restart N2_D__TO__N2_C_1



	unless (idTOP_N2_1=1163) restart N2_C_IDL

	unless (idTOP_N2_1=1164) restart N2_D_IDL

	let

		(idTOP_N2, x) 
	= (idTOP_N2_1, x_1);
	

	tel



	state POINT__TO__N2_C_1:

	 var 	idTOP_N2_2:int;
	x_2:real;
	let

		-- transition trace :
	--POINT__To__N2_C_1
		(idTOP_N2_2, x_2) 
	= N2_C_en(idTOP_N2_1, x_1, false);
		

	(idTOP_N2, x) 
	=  (idTOP_N2_2, x_2);


	tel

	until true restart POINTTOP_N2



	state N2_C__TO__N2_D_1:

	 var 	idTOP_N2_2, idTOP_N2_3:int;
	x_2, x_3:real;
	let

		-- transition trace :
	--N2_C__To__N2_D_1
		-- condition Action : x+=100;
		
		(x_2) 
	= N2_C__To__N2_D_1_Condition_Action(x_1);
		

		(idTOP_N2_2) 
	= N2_C_ex(idTOP_N2_1, false);
		

		(idTOP_N2_3, x_3) 
	= N2_D_en(idTOP_N2_2, x_2, false);
		

	(idTOP_N2, x) 
	=  (idTOP_N2_3, x_3);


	tel

	until true restart POINTTOP_N2



	state N2_D__TO__N2_C_1:

	 var 	idTOP_N2_2, idTOP_N2_3:int;
	x_2, x_3:real;
	let

		-- transition trace :
	--N2_D__To__N2_C_1
		-- condition Action : x-=100;
		
		(x_2) 
	= N2_D__To__N2_C_1_Condition_Action(x_1);
		

		(idTOP_N2_2) 
	= N2_D_ex(idTOP_N2_1, false);
		

		(idTOP_N2_3, x_3) 
	= N2_C_en(idTOP_N2_2, x_2, false);
		

	(idTOP_N2, x) 
	=  (idTOP_N2_3, x_3);


	tel

	until true restart POINTTOP_N2



	state N2_C_IDL:

	 	let

		

	(idTOP_N2, x) 
	= (idTOP_N2_1, x_1);
	

	tel

	until true restart POINTTOP_N2



	state N2_D_IDL:

	 	let

		

	(idTOP_N2, x) 
	= (idTOP_N2_1, x_1);
	

	tel

	until true restart POINTTOP_N2



tel


--***************************************************State :TOP_N1 Automaton***************************************************

node TOP_N1_node(idTOP_N1_1:int;
	x_1:real;
	S1:bool;
	R1:bool)

returns (idTOP_N1:int;
	x:real);


let

	 automaton top_n1

	state POINTTOP_N1:
	unless (idTOP_N1_1=0) restart POINT__TO__N1_A_1



	unless (idTOP_N1_1=1161) and S1 restart N1_A__TO__N1_B_1



	unless (idTOP_N1_1=1162) and R1 restart N1_B__TO__N1_A_1



	unless (idTOP_N1_1=1161) restart N1_A_IDL

	unless (idTOP_N1_1=1162) restart N1_B_IDL

	let

		(idTOP_N1, x) 
	= (idTOP_N1_1, x_1);
	

	tel



	state POINT__TO__N1_A_1:

	 var 	idTOP_N1_2:int;
	x_2:real;
	let

		-- transition trace :
	--POINT__To__N1_A_1
		(idTOP_N1_2, x_2) 
	= N1_A_en(idTOP_N1_1, x_1, false);
		

	(idTOP_N1, x) 
	=  (idTOP_N1_2, x_2);


	tel

	until true restart POINTTOP_N1



	state N1_A__TO__N1_B_1:

	 var 	idTOP_N1_2, idTOP_N1_3:int;
	x_2, x_3:real;
	let

		-- transition trace :
	--N1_A__To__N1_B_1
		-- condition Action : x+=1;
		
		(x_2) 
	= N1_A__To__N1_B_1_Condition_Action(x_1);
		

		(idTOP_N1_2) 
	= N1_A_ex(idTOP_N1_1, false);
		

		(idTOP_N1_3, x_3) 
	= N1_B_en(idTOP_N1_2, x_2, false);
		

	(idTOP_N1, x) 
	=  (idTOP_N1_3, x_3);


	tel

	until true restart POINTTOP_N1



	state N1_B__TO__N1_A_1:

	 var 	idTOP_N1_2, idTOP_N1_3:int;
	x_2, x_3:real;
	let

		-- transition trace :
	--N1_B__To__N1_A_1
		-- condition Action : x-=1;
		
		(x_2) 
	= N1_B__To__N1_A_1_Condition_Action(x_1);
		

		(idTOP_N1_2) 
	= N1_B_ex(idTOP_N1_1, false);
		

		(idTOP_N1_3, x_3) 
	= N1_A_en(idTOP_N1_2, x_2, false);
		

	(idTOP_N1, x) 
	=  (idTOP_N1_3, x_3);


	tel

	until true restart POINTTOP_N1



	state N1_A_IDL:

	 	let

		

	(idTOP_N1, x) 
	= (idTOP_N1_1, x_1);
	

	tel

	until true restart POINTTOP_N1



	state N1_B_IDL:

	 	let

		

	(idTOP_N1, x) 
	= (idTOP_N1_1, x_1);
	

	tel

	until true restart POINTTOP_N1



tel


--***************************************************State :Parallel2_TOP Automaton***************************************************

node Parallel2_TOP_node(idParallel2_TOP_1:int;
	idTOP_N1_1:int;
	x_1:real;
	idTOP_N2_1:int;
	R1:bool;
	S1:bool;
	R2:bool;
	S2:bool)

returns (idParallel2_TOP:int;
	idTOP_N1:int;
	x:real;
	idTOP_N2:int);


let

	 automaton parallel2_top

	state POINTParallel2_TOP:
	unless (idParallel2_TOP_1=0) restart PARALLEL2_TOP_PARALLEL_ENTRY
	unless true  restart PARALLEL2_TOP_PARALLEL_IDL

	let

		(idParallel2_TOP, idTOP_N1, x, idTOP_N2) 
	= (idParallel2_TOP_1, idTOP_N1_1, x_1, idTOP_N2_1);
	

	tel



	state PARALLEL2_TOP_PARALLEL_ENTRY:

	 var 	idParallel2_TOP_2, idParallel2_TOP_3:int;
	idTOP_N1_2:int;
	x_2, x_3:real;
	idTOP_N2_2:int;
	let

		
	(idTOP_N1_2, idParallel2_TOP_2, x_2) 
	= TOP_N1_en(idTOP_N1_1, idParallel2_TOP_1, x_1, false);

	(idTOP_N2_2, idParallel2_TOP_3, x_3) 
	= TOP_N2_en(idTOP_N2_1, idParallel2_TOP_2, x_2, false);


	(idParallel2_TOP, idTOP_N1, x, idTOP_N2) 
	= (idParallel2_TOP_3, idTOP_N1_2, x_3, idTOP_N2_2);
	

	tel

	until true restart POINTParallel2_TOP



	state PARALLEL2_TOP_PARALLEL_IDL:

	 var 	idTOP_N1_2:int;
	x_2, x_3:real;
	idTOP_N2_2:int;
	let

		

		(idTOP_N1_2, x_2)
	= if not (idTOP_N1_1= 0 ) then TOP_N1_node(idTOP_N1_1, x_1, S1, R1)

		 else (idTOP_N1_1, x_1);

		

		

		(idTOP_N2_2, x_3)
	= if not (idTOP_N2_1= 0 ) then TOP_N2_node(idTOP_N2_1, x_2, S2, R2)

		 else (idTOP_N2_1, x_2);

		

		

	(idParallel2_TOP, idTOP_N1, x, idTOP_N2) 
	= (idParallel2_TOP_1, idTOP_N1_2, x_3, idTOP_N2_2);
	

	tel

	until true restart POINTParallel2_TOP



tel


--***************************************************State :Parallel2_Parallel2 Automaton***************************************************

node Parallel2_Parallel2_node(idParallel2_Parallel2_1:int;
	idParallel2_TOP_1:int;
	idTOP_N1_1:int;
	idTOP_N2_1:int;
	x_1:real;
	R1:bool;
	S1:bool;
	R2:bool;
	S2:bool)

returns (idParallel2_Parallel2:int;
	idParallel2_TOP:int;
	idTOP_N1:int;
	idTOP_N2:int;
	x:real);


let

	 automaton parallel2_parallel2

	state POINTParallel2_Parallel2:
	unless (idParallel2_Parallel2_1=0) restart POINT__TO__PARALLEL2_TOP_1



	unless (idParallel2_Parallel2_1=1165) restart PARALLEL2_TOP_IDL

	let

		(idParallel2_Parallel2, idParallel2_TOP, idTOP_N1, idTOP_N2, x) 
	= (idParallel2_Parallel2_1, idParallel2_TOP_1, idTOP_N1_1, idTOP_N2_1, x_1);
	

	tel



	state POINT__TO__PARALLEL2_TOP_1:

	 var 	idParallel2_Parallel2_2:int;
	idParallel2_TOP_2:int;
	idTOP_N1_2:int;
	idTOP_N2_2:int;
	x_2:real;
	let

		-- transition trace :
	--POINT__To__Parallel2_TOP_1
		(idParallel2_TOP_2, idParallel2_Parallel2_2, x_2, idTOP_N1_2, idTOP_N2_2) 
	= Parallel2_TOP_en(idParallel2_TOP_1, idParallel2_Parallel2_1, x_1, idTOP_N1_1, idTOP_N2_1, false);
		

	(idParallel2_Parallel2, idParallel2_TOP, idTOP_N1, idTOP_N2, x) 
	=  (idParallel2_Parallel2_2, idParallel2_TOP_2, idTOP_N1_2, idTOP_N2_2, x_2);


	tel

	until true restart POINTParallel2_Parallel2



	state PARALLEL2_TOP_IDL:

	 var 	idTOP_N1_2:int;
	idTOP_N2_2:int;
	x_2, x_3:real;
	let

		

		(idTOP_N1_2, x_2)
	= if not (idTOP_N1_1= 0 ) then TOP_N1_node(idTOP_N1_1, x_1, S1, R1)

		 else (idTOP_N1_1, x_1);

		

		

		(idTOP_N2_2, x_3)
	= if not (idTOP_N2_1= 0 ) then TOP_N2_node(idTOP_N2_1, x_2, S2, R2)

		 else (idTOP_N2_1, x_2);

		

		

	(idParallel2_Parallel2, idParallel2_TOP, idTOP_N1, idTOP_N2, x) 
	= (idParallel2_Parallel2_1, idParallel2_TOP_1, idTOP_N1_2, idTOP_N2_2, x_3);
	

	tel

	until true restart POINTParallel2_Parallel2



tel


--***************************************************State :Parallel2_Parallel2 Automaton***************************************************

node Parallel2_Parallel2(S1:bool;
	R1:bool;
	S2:bool;
	R2:bool)

returns (x:real);


var x_1: real;

	idParallel2_Parallel2, idParallel2_Parallel2_1: int;

	idTOP_N2, idTOP_N2_1: int;

	idTOP_N1, idTOP_N1_1: int;

	idParallel2_TOP, idParallel2_TOP_1: int;

		idParallel2_Parallel2_2, idParallel2_Parallel2_3, idParallel2_Parallel2_4:int;
	idParallel2_TOP_2, idParallel2_TOP_3, idParallel2_TOP_4:int;
	idTOP_N1_2, idTOP_N1_3, idTOP_N1_4:int;
	idTOP_N2_2, idTOP_N2_3, idTOP_N2_4:int;
	x_2, x_3, x_4:real;
let

	x_1 = 0.0 -> pre x;

	idParallel2_Parallel2_1 = 0 -> pre idParallel2_Parallel2;

	idTOP_N2_1 = 0 -> pre idTOP_N2;

	idTOP_N1_1 = 0 -> pre idTOP_N1;

	idParallel2_TOP_1 = 0 -> pre idParallel2_TOP;

	



	(idParallel2_Parallel2_2, idParallel2_TOP_2, idTOP_N1_2, idTOP_N2_2, x_2)
	 = 

	 if S1 then Parallel2_Parallel2_node(idParallel2_Parallel2_1, idParallel2_TOP_1, idTOP_N1_1, idTOP_N2_1, x_1, false, S1, false, false)

	 else (idParallel2_Parallel2_1, idParallel2_TOP_1, idTOP_N1_1, idTOP_N2_1, x_1);

	



	(idParallel2_Parallel2_3, idParallel2_TOP_3, idTOP_N1_3, idTOP_N2_3, x_3)
	 = 

	 if R1 then Parallel2_Parallel2_node(idParallel2_Parallel2_2, idParallel2_TOP_2, idTOP_N1_2, idTOP_N2_2, x_2, R1, false, false, false)

	 else (idParallel2_Parallel2_2, idParallel2_TOP_2, idTOP_N1_2, idTOP_N2_2, x_2);

	



	(idParallel2_Parallel2_4, idParallel2_TOP_4, idTOP_N1_4, idTOP_N2_4, x_4)
	 = 

	 if S2 then Parallel2_Parallel2_node(idParallel2_Parallel2_3, idParallel2_TOP_3, idTOP_N1_3, idTOP_N2_3, x_3, false, false, false, S2)

	 else (idParallel2_Parallel2_3, idParallel2_TOP_3, idTOP_N1_3, idTOP_N2_3, x_3);

	



	(idParallel2_Parallel2, idParallel2_TOP, idTOP_N1, idTOP_N2, x)
	 = 

	 if R2 then Parallel2_Parallel2_node(idParallel2_Parallel2_4, idParallel2_TOP_4, idTOP_N1_4, idTOP_N2_4, x_4, false, false, R2, false)

	 else (idParallel2_Parallel2_4, idParallel2_TOP_4, idTOP_N1_4, idTOP_N2_4, x_4);

	


--unused outputs
	

tel



node Parallel2 (S1_1_1 : real; R1_1_1 : real; S2_1_1 : real; R2_1_1 : real)
returns (x_1_1 : real); 
var
	Mux_1_1 : real; Mux_1_2 : real; Mux_1_3 : real; Mux_1_4 : real;
	Parallel2_1_1 : real;
	Mux_1_1_event: bool;
	Mux_1_2_event: bool;
	Mux_1_3_event: bool;
	Mux_1_4_event: bool;
let 
	Mux_1_1 = S1_1_1 ;
	Mux_1_2 = R1_1_1 ;
	Mux_1_3 = S2_1_1 ;
	Mux_1_4 = R2_1_1 ;
	Mux_1_1_event = false -> ((pre(Mux_1_1) > 0.0 and Mux_1_1 <= 0.0) or (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0));
	Mux_1_2_event = false -> ((pre(Mux_1_2) > 0.0 and Mux_1_2 <= 0.0) or (pre(Mux_1_2) <= 0.0 and Mux_1_2 > 0.0));
	Mux_1_3_event = false -> ((pre(Mux_1_3) > 0.0 and Mux_1_3 <= 0.0) or (pre(Mux_1_3) <= 0.0 and Mux_1_3 > 0.0));
	Mux_1_4_event = false -> ((pre(Mux_1_4) > 0.0 and Mux_1_4 <= 0.0) or (pre(Mux_1_4) <= 0.0 and Mux_1_4 > 0.0));
	Parallel2_1_1 =  Parallel2_Parallel2(Mux_1_1_event, Mux_1_2_event, Mux_1_3_event, Mux_1_4_event);
	x_1_1 = Parallel2_1_1;
tel

