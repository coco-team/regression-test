-- This file has been generated by CoCoSim


-- System nodes








node B_B1106__To__B_B2103_1_Transition_Action(c_1:int)

returns (c:int);


var 	c_2:int;


let



	c_2 
	=  c_1  + 1;
	

	(c) 
	= (c_2);
	

tel






node B_B2103__To__B_B1106_1_Transition_Action(c_1:int)

returns (c:int);


var 	c_2:int;


let



	c_2 
	=  c_1  + 1;
	

	(c) 
	= (c_2);
	

tel












-- Entry action for state :B2_B2a104
node B2_B2a104_en(idB_B2103_1:int;
	x:int;
	b_1:int;
	isInner:bool)

returns (idB_B2103:int;
	b:int);


var 	idB_B2103_2:int;
	b_2:int;


let



	-- set state as active 
	idB_B2103_2 
	= 104;
	

	b_2 
	= if (not isInner) then x+7
	 else b_1;
	

	(idB_B2103, b) 
	= (idB_B2103_2, b_2);
	

tel





-- Exit action for state :B2_B2a104
node B2_B2a104_ex(idB_B2103_1:int;
	isInner:bool)

returns (idB_B2103:int);


var 	idB_B2103_2:int;


let



	-- set state as inactive 
	idB_B2103_2
	 = if (not isInner) then 0 else idB_B2103_1;


	(idB_B2103) 
	= (idB_B2103_1);
	

tel






-- Entry action for state :B2_B2b105
node B2_B2b105_en(idB_B2103_1:int;
	x:int;
	b_1:int;
	isInner:bool)

returns (idB_B2103:int;
	b:int);


var 	idB_B2103_2:int;
	b_2:int;


let



	-- set state as active 
	idB_B2103_2 
	= 105;
	

	b_2 
	= if (not isInner) then x+8
	 else b_1;
	

	(idB_B2103, b) 
	= (idB_B2103_2, b_2);
	

tel





-- Exit action for state :B2_B2b105
node B2_B2b105_ex(idB_B2103_1:int;
	isInner:bool)

returns (idB_B2103:int);


var 	idB_B2103_2:int;


let



	-- set state as inactive 
	idB_B2103_2
	 = if (not isInner) then 0 else idB_B2103_1;


	(idB_B2103) 
	= (idB_B2103_1);
	

tel






-- Entry action for state :B_B2103
node B_B2103_en(idB_B2103_1:int;
	idEvents1_B102_1:int;
	b_1:int;
	x:int;
	isInner:bool)

returns (idB_B2103:int;
	idEvents1_B102:int;
	b:int);


var 	idB_B2103_2, idB_B2103_3, idB_B2103_4, idB_B2103_5, idB_B2103_6:int;
	idEvents1_B102_2, idEvents1_B102_3, idEvents1_B102_4:int;
	b_2, b_3, b_4, b_5, b_6:int;


let



	-- set state as active 
	idEvents1_B102_2 
	= 103;
	

	
-- transition trace :
	--POINT__To__B2_B2a104_1
		(idB_B2103_2, b_2) 
	= B2_B2a104_en(idB_B2103_1, x, b_1, false);
		

	(idB_B2103_3, idEvents1_B102_3, b_3) 
	= 

	if ( idB_B2103_1 = 0) then

	 (idB_B2103_2, idEvents1_B102_2, b_2)

	 else(idB_B2103_1, idEvents1_B102_2, b_1);

	

	(idB_B2103_4, b_4) 
	= 
	if ( idB_B2103_1 = 104) then
	B2_B2a104_en(idB_B2103_1, x, b_1, false)
	 else (idB_B2103_1, b_1);

	

	(idB_B2103_5, b_5) 
	= 
	if ( idB_B2103_1 = 105) then
	B2_B2b105_en(idB_B2103_1, x, b_1, false)
	 else (idB_B2103_1, b_1);

	

	(idB_B2103_6, idEvents1_B102_4, b_6) 
	= 
		 if ( idB_B2103_1 = 0) then 
		(idB_B2103_3, idEvents1_B102_3, b_3)
		 else
		 if ( idB_B2103_1 = 104) then 
		(idB_B2103_4, idEvents1_B102_3, b_4)
		 else
		 if ( idB_B2103_1 = 105) then 
		(idB_B2103_5, idEvents1_B102_3, b_5)
		 else (idB_B2103_1, idEvents1_B102_2, b_1);


	(idB_B2103, idEvents1_B102, b) 
	= (idB_B2103_6, idEvents1_B102_4, b_6);
	

tel





-- Exit action for state :B_B2103
node B_B2103_ex(idB_B2103_1:int;
	idEvents1_B102_1:int;
	isInner:bool)

returns (idB_B2103:int;
	idEvents1_B102:int);


var 	idB_B2103_2, idB_B2103_3, idB_B2103_4, idB_B2103_5:int;
	idEvents1_B102_2:int;


let



	
	(idB_B2103_2) 
	= 
	if ( idB_B2103_1 = 104) then
	B2_B2a104_ex(idB_B2103_1, false)
	 else (idB_B2103_1);

	

	(idB_B2103_3) 
	= 
	if ( idB_B2103_1 = 105) then
	B2_B2b105_ex(idB_B2103_1, false)
	 else (idB_B2103_1);

	

	(idB_B2103_4) 
	= 
		 if ( idB_B2103_1 = 104) then 
		(idB_B2103_2)
		 else
		 if ( idB_B2103_1 = 105) then 
		(idB_B2103_3)
		 else (idB_B2103_1);


	-- set state as inactive 
	idEvents1_B102_2
	 = if (not isInner) then 0 else idEvents1_B102_1;

	idB_B2103_5 
	= 0;
	

	(idB_B2103, idEvents1_B102) 
	= (idB_B2103_5, idEvents1_B102_1);
	

tel






-- Entry action for state :B1_B1a107
node B1_B1a107_en(idB_B1106_1:int;
	x:int;
	b_1:int;
	isInner:bool)

returns (idB_B1106:int;
	b:int);


var 	idB_B1106_2:int;
	b_2:int;


let



	-- set state as active 
	idB_B1106_2 
	= 107;
	

	b_2 
	= if (not isInner) then x+5
	 else b_1;
	

	(idB_B1106, b) 
	= (idB_B1106_2, b_2);
	

tel





-- Exit action for state :B1_B1a107
node B1_B1a107_ex(idB_B1106_1:int;
	isInner:bool)

returns (idB_B1106:int);


var 	idB_B1106_2:int;


let



	-- set state as inactive 
	idB_B1106_2
	 = if (not isInner) then 0 else idB_B1106_1;


	(idB_B1106) 
	= (idB_B1106_1);
	

tel






-- Entry action for state :B1_B1b108
node B1_B1b108_en(idB_B1106_1:int;
	x:int;
	b_1:int;
	isInner:bool)

returns (idB_B1106:int;
	b:int);


var 	idB_B1106_2:int;
	b_2:int;


let



	-- set state as active 
	idB_B1106_2 
	= 108;
	

	b_2 
	= if (not isInner) then x+6
	 else b_1;
	

	(idB_B1106, b) 
	= (idB_B1106_2, b_2);
	

tel





-- Exit action for state :B1_B1b108
node B1_B1b108_ex(idB_B1106_1:int;
	isInner:bool)

returns (idB_B1106:int);


var 	idB_B1106_2:int;


let



	-- set state as inactive 
	idB_B1106_2
	 = if (not isInner) then 0 else idB_B1106_1;


	(idB_B1106) 
	= (idB_B1106_1);
	

tel






-- Entry action for state :B_B1106
node B_B1106_en(idB_B1106_1:int;
	idEvents1_B102_1:int;
	b_1:int;
	x:int;
	isInner:bool)

returns (idB_B1106:int;
	idEvents1_B102:int;
	b:int);


var 	idB_B1106_2, idB_B1106_3, idB_B1106_4, idB_B1106_5, idB_B1106_6:int;
	idEvents1_B102_2, idEvents1_B102_3, idEvents1_B102_4:int;
	b_2, b_3, b_4, b_5, b_6:int;


let



	-- set state as active 
	idEvents1_B102_2 
	= 106;
	

	
-- transition trace :
	--POINT__To__B1_B1a107_1
		(idB_B1106_2, b_2) 
	= B1_B1a107_en(idB_B1106_1, x, b_1, false);
		

	(idB_B1106_3, idEvents1_B102_3, b_3) 
	= 

	if ( idB_B1106_1 = 0) then

	 (idB_B1106_2, idEvents1_B102_2, b_2)

	 else(idB_B1106_1, idEvents1_B102_2, b_1);

	

	(idB_B1106_4, b_4) 
	= 
	if ( idB_B1106_1 = 107) then
	B1_B1a107_en(idB_B1106_1, x, b_1, false)
	 else (idB_B1106_1, b_1);

	

	(idB_B1106_5, b_5) 
	= 
	if ( idB_B1106_1 = 108) then
	B1_B1b108_en(idB_B1106_1, x, b_1, false)
	 else (idB_B1106_1, b_1);

	

	(idB_B1106_6, idEvents1_B102_4, b_6) 
	= 
		 if ( idB_B1106_1 = 0) then 
		(idB_B1106_3, idEvents1_B102_3, b_3)
		 else
		 if ( idB_B1106_1 = 107) then 
		(idB_B1106_4, idEvents1_B102_3, b_4)
		 else
		 if ( idB_B1106_1 = 108) then 
		(idB_B1106_5, idEvents1_B102_3, b_5)
		 else (idB_B1106_1, idEvents1_B102_2, b_1);


	(idB_B1106, idEvents1_B102, b) 
	= (idB_B1106_6, idEvents1_B102_4, b_6);
	

tel





-- Exit action for state :B_B1106
node B_B1106_ex(idB_B1106_1:int;
	idEvents1_B102_1:int;
	isInner:bool)

returns (idB_B1106:int;
	idEvents1_B102:int);


var 	idB_B1106_2, idB_B1106_3, idB_B1106_4, idB_B1106_5:int;
	idEvents1_B102_2:int;


let



	
	(idB_B1106_2) 
	= 
	if ( idB_B1106_1 = 107) then
	B1_B1a107_ex(idB_B1106_1, false)
	 else (idB_B1106_1);

	

	(idB_B1106_3) 
	= 
	if ( idB_B1106_1 = 108) then
	B1_B1b108_ex(idB_B1106_1, false)
	 else (idB_B1106_1);

	

	(idB_B1106_4) 
	= 
		 if ( idB_B1106_1 = 107) then 
		(idB_B1106_2)
		 else
		 if ( idB_B1106_1 = 108) then 
		(idB_B1106_3)
		 else (idB_B1106_1);


	-- set state as inactive 
	idEvents1_B102_2
	 = if (not isInner) then 0 else idEvents1_B102_1;

	idB_B1106_5 
	= 0;
	

	(idB_B1106, idEvents1_B102) 
	= (idB_B1106_5, idEvents1_B102_1);
	

tel






-- Entry action for state :Events1_B102
node Events1_B102_en(idEvents1_B102_1:int;
	idEvents1_Events194_1:int;
	b_1:int;
	idB_B1106_1:int;
	x:int;
	idB_B2103_1:int;
	isInner:bool)

returns (idEvents1_B102:int;
	idEvents1_Events194:int;
	b:int;
	idB_B1106:int;
	idB_B2103:int);


var 	idEvents1_B102_2, idEvents1_B102_3, idEvents1_B102_4, idEvents1_B102_5, idEvents1_B102_6:int;
	idEvents1_Events194_2, idEvents1_Events194_3, idEvents1_Events194_4:int;
	b_2, b_3, b_4, b_5, b_6:int;
	idB_B1106_2, idB_B1106_3, idB_B1106_4, idB_B1106_5:int;
	idB_B2103_2, idB_B2103_3:int;


let



	-- set state as active 
	idEvents1_Events194_2 
	= 102;
	

	
-- transition trace :
	--POINT__To__B_B1106_1
		(idB_B1106_2, idEvents1_B102_2, b_2) 
	= B_B1106_en(idB_B1106_1, idEvents1_B102_1, b_1, x, false);
		

	(idEvents1_B102_3, idEvents1_Events194_3, b_3, idB_B1106_3) 
	= 

	if ( idEvents1_B102_1 = 0) then

	 (idEvents1_B102_2, idEvents1_Events194_2, b_2, idB_B1106_2)

	 else(idEvents1_B102_1, idEvents1_Events194_2, b_1, idB_B1106_1);

	

	(idB_B2103_2, idEvents1_B102_4, b_4) 
	= 
	if ( idEvents1_B102_1 = 103) then
	B_B2103_en(idB_B2103_1, idEvents1_B102_1, b_1, x, false)
	 else (idB_B2103_1, idEvents1_B102_1, b_1);

	

	(idB_B1106_4, idEvents1_B102_5, b_5) 
	= 
	if ( idEvents1_B102_1 = 106) then
	B_B1106_en(idB_B1106_1, idEvents1_B102_1, b_1, x, false)
	 else (idB_B1106_1, idEvents1_B102_1, b_1);

	

	(idEvents1_B102_6, idEvents1_Events194_4, b_6, idB_B1106_5, idB_B2103_3) 
	= 
		 if ( idEvents1_B102_1 = 0) then 
		(idEvents1_B102_3, idEvents1_Events194_3, b_3, idB_B1106_3, idB_B2103_1)
		 else
		 if ( idEvents1_B102_1 = 103) then 
		(idEvents1_B102_4, idEvents1_Events194_3, b_4, idB_B1106_1, idB_B2103_2)
		 else
		 if ( idEvents1_B102_1 = 106) then 
		(idEvents1_B102_5, idEvents1_Events194_3, b_5, idB_B1106_4, idB_B2103_1)
		 else (idEvents1_B102_1, idEvents1_Events194_2, b_1, idB_B1106_1, idB_B2103_1);


	(idEvents1_B102, idEvents1_Events194, b, idB_B1106, idB_B2103) 
	= (idEvents1_B102_6, idEvents1_Events194_4, b_6, idB_B1106_5, idB_B2103_3);
	

tel





-- Exit action for state :Events1_B102
node Events1_B102_ex(idB_B2103_1:int;
	idEvents1_B102_1:int;
	idB_B1106_1:int;
	idEvents1_Events194_1:int;
	isInner:bool)

returns (idB_B2103:int;
	idEvents1_B102:int;
	idB_B1106:int;
	idEvents1_Events194:int);


var 	idB_B2103_2, idB_B2103_3:int;
	idEvents1_B102_2, idEvents1_B102_3, idEvents1_B102_4, idEvents1_B102_5:int;
	idB_B1106_2, idB_B1106_3:int;
	idEvents1_Events194_2:int;


let



	
	(idB_B2103_2, idEvents1_B102_2) 
	= 
	if ( idEvents1_B102_1 = 103) then
	B_B2103_ex(idB_B2103_1, idEvents1_B102_1, false)
	 else (idB_B2103_1, idEvents1_B102_1);

	

	(idB_B1106_2, idEvents1_B102_3) 
	= 
	if ( idEvents1_B102_1 = 106) then
	B_B1106_ex(idB_B1106_1, idEvents1_B102_1, false)
	 else (idB_B1106_1, idEvents1_B102_1);

	

	(idB_B2103_3, idEvents1_B102_4, idB_B1106_3) 
	= 
		 if ( idEvents1_B102_1 = 103) then 
		(idB_B2103_2, idEvents1_B102_2, idB_B1106_1)
		 else
		 if ( idEvents1_B102_1 = 106) then 
		(idB_B2103_1, idEvents1_B102_3, idB_B1106_2)
		 else (idB_B2103_1, idEvents1_B102_1, idB_B1106_1);


	-- set state as inactive 
	idEvents1_Events194_2
	 = if (not isInner) then 0 else idEvents1_Events194_1;

	idEvents1_B102_5 
	= 0;
	

	(idB_B2103, idEvents1_B102, idB_B1106, idEvents1_Events194) 
	= (idB_B2103_3, idEvents1_B102_5, idB_B1106_3, idEvents1_Events194_1);
	

tel






-- Entry action for state :A2_A2a97
node A2_A2a97_en(idA_A296_1:int;
	x:int;
	a_1:int;
	isInner:bool)

returns (idA_A296:int;
	a:int);


var 	idA_A296_2:int;
	a_2:int;


let



	-- set state as active 
	idA_A296_2 
	= 97;
	

	a_2 
	= if (not isInner) then x+3
	 else a_1;
	

	(idA_A296, a) 
	= (idA_A296_2, a_2);
	

tel





-- Exit action for state :A2_A2a97
node A2_A2a97_ex(idA_A296_1:int;
	isInner:bool)

returns (idA_A296:int);


var 	idA_A296_2:int;


let



	-- set state as inactive 
	idA_A296_2
	 = if (not isInner) then 0 else idA_A296_1;


	(idA_A296) 
	= (idA_A296_1);
	

tel






-- Entry action for state :A2_A2b98
node A2_A2b98_en(idA_A296_1:int;
	x:int;
	a_1:int;
	isInner:bool)

returns (idA_A296:int;
	a:int);


var 	idA_A296_2:int;
	a_2:int;


let



	-- set state as active 
	idA_A296_2 
	= 98;
	

	a_2 
	= if (not isInner) then x+4
	 else a_1;
	

	(idA_A296, a) 
	= (idA_A296_2, a_2);
	

tel





-- Exit action for state :A2_A2b98
node A2_A2b98_ex(idA_A296_1:int;
	isInner:bool)

returns (idA_A296:int);


var 	idA_A296_2:int;


let



	-- set state as inactive 
	idA_A296_2
	 = if (not isInner) then 0 else idA_A296_1;


	(idA_A296) 
	= (idA_A296_1);
	

tel






-- Entry action for state :A_A296
node A_A296_en(idA_A296_1:int;
	idEvents1_A95_1:int;
	a_1:int;
	x:int;
	isInner:bool)

returns (idA_A296:int;
	idEvents1_A95:int;
	a:int);


var 	idA_A296_2, idA_A296_3, idA_A296_4, idA_A296_5, idA_A296_6:int;
	idEvents1_A95_2, idEvents1_A95_3, idEvents1_A95_4:int;
	a_2, a_3, a_4, a_5, a_6:int;


let



	-- set state as active 
	idEvents1_A95_2 
	= 96;
	

	
-- transition trace :
	--POINT__To__A2_A2a97_1
		(idA_A296_2, a_2) 
	= A2_A2a97_en(idA_A296_1, x, a_1, false);
		

	(idA_A296_3, idEvents1_A95_3, a_3) 
	= 

	if ( idA_A296_1 = 0) then

	 (idA_A296_2, idEvents1_A95_2, a_2)

	 else(idA_A296_1, idEvents1_A95_2, a_1);

	

	(idA_A296_4, a_4) 
	= 
	if ( idA_A296_1 = 97) then
	A2_A2a97_en(idA_A296_1, x, a_1, false)
	 else (idA_A296_1, a_1);

	

	(idA_A296_5, a_5) 
	= 
	if ( idA_A296_1 = 98) then
	A2_A2b98_en(idA_A296_1, x, a_1, false)
	 else (idA_A296_1, a_1);

	

	(idA_A296_6, idEvents1_A95_4, a_6) 
	= 
		 if ( idA_A296_1 = 0) then 
		(idA_A296_3, idEvents1_A95_3, a_3)
		 else
		 if ( idA_A296_1 = 97) then 
		(idA_A296_4, idEvents1_A95_3, a_4)
		 else
		 if ( idA_A296_1 = 98) then 
		(idA_A296_5, idEvents1_A95_3, a_5)
		 else (idA_A296_1, idEvents1_A95_2, a_1);


	(idA_A296, idEvents1_A95, a) 
	= (idA_A296_6, idEvents1_A95_4, a_6);
	

tel





-- Exit action for state :A_A296
node A_A296_ex(idA_A296_1:int;
	idEvents1_A95_1:int;
	isInner:bool)

returns (idA_A296:int;
	idEvents1_A95:int);


var 	idA_A296_2, idA_A296_3, idA_A296_4, idA_A296_5:int;
	idEvents1_A95_2:int;


let



	
	(idA_A296_2) 
	= 
	if ( idA_A296_1 = 97) then
	A2_A2a97_ex(idA_A296_1, false)
	 else (idA_A296_1);

	

	(idA_A296_3) 
	= 
	if ( idA_A296_1 = 98) then
	A2_A2b98_ex(idA_A296_1, false)
	 else (idA_A296_1);

	

	(idA_A296_4) 
	= 
		 if ( idA_A296_1 = 97) then 
		(idA_A296_2)
		 else
		 if ( idA_A296_1 = 98) then 
		(idA_A296_3)
		 else (idA_A296_1);


	-- set state as inactive 
	idEvents1_A95_2
	 = if (not isInner) then 0 else idEvents1_A95_1;

	idA_A296_5 
	= 0;
	

	(idA_A296, idEvents1_A95) 
	= (idA_A296_5, idEvents1_A95_1);
	

tel






-- Entry action for state :A1_A1a100
node A1_A1a100_en(idA_A199_1:int;
	x:int;
	a_1:int;
	isInner:bool)

returns (idA_A199:int;
	a:int);


var 	idA_A199_2:int;
	a_2:int;


let



	-- set state as active 
	idA_A199_2 
	= 100;
	

	a_2 
	= if (not isInner) then x+1
	 else a_1;
	

	(idA_A199, a) 
	= (idA_A199_2, a_2);
	

tel





-- Exit action for state :A1_A1a100
node A1_A1a100_ex(idA_A199_1:int;
	isInner:bool)

returns (idA_A199:int);


var 	idA_A199_2:int;


let



	-- set state as inactive 
	idA_A199_2
	 = if (not isInner) then 0 else idA_A199_1;


	(idA_A199) 
	= (idA_A199_1);
	

tel






-- Entry action for state :A1_A1b101
node A1_A1b101_en(idA_A199_1:int;
	x:int;
	a_1:int;
	isInner:bool)

returns (idA_A199:int;
	a:int);


var 	idA_A199_2:int;
	a_2:int;


let



	-- set state as active 
	idA_A199_2 
	= 101;
	

	a_2 
	= if (not isInner) then x+2
	 else a_1;
	

	(idA_A199, a) 
	= (idA_A199_2, a_2);
	

tel





-- Exit action for state :A1_A1b101
node A1_A1b101_ex(idA_A199_1:int;
	isInner:bool)

returns (idA_A199:int);


var 	idA_A199_2:int;


let



	-- set state as inactive 
	idA_A199_2
	 = if (not isInner) then 0 else idA_A199_1;


	(idA_A199) 
	= (idA_A199_1);
	

tel






-- Entry action for state :A_A199
node A_A199_en(idA_A199_1:int;
	idEvents1_A95_1:int;
	a_1:int;
	x:int;
	isInner:bool)

returns (idA_A199:int;
	idEvents1_A95:int;
	a:int);


var 	idA_A199_2, idA_A199_3, idA_A199_4, idA_A199_5, idA_A199_6:int;
	idEvents1_A95_2, idEvents1_A95_3, idEvents1_A95_4:int;
	a_2, a_3, a_4, a_5, a_6:int;


let



	-- set state as active 
	idEvents1_A95_2 
	= 99;
	

	
-- transition trace :
	--POINT__To__A1_A1a100_1
		(idA_A199_2, a_2) 
	= A1_A1a100_en(idA_A199_1, x, a_1, false);
		

	(idA_A199_3, idEvents1_A95_3, a_3) 
	= 

	if ( idA_A199_1 = 0) then

	 (idA_A199_2, idEvents1_A95_2, a_2)

	 else(idA_A199_1, idEvents1_A95_2, a_1);

	

	(idA_A199_4, a_4) 
	= 
	if ( idA_A199_1 = 100) then
	A1_A1a100_en(idA_A199_1, x, a_1, false)
	 else (idA_A199_1, a_1);

	

	(idA_A199_5, a_5) 
	= 
	if ( idA_A199_1 = 101) then
	A1_A1b101_en(idA_A199_1, x, a_1, false)
	 else (idA_A199_1, a_1);

	

	(idA_A199_6, idEvents1_A95_4, a_6) 
	= 
		 if ( idA_A199_1 = 0) then 
		(idA_A199_3, idEvents1_A95_3, a_3)
		 else
		 if ( idA_A199_1 = 100) then 
		(idA_A199_4, idEvents1_A95_3, a_4)
		 else
		 if ( idA_A199_1 = 101) then 
		(idA_A199_5, idEvents1_A95_3, a_5)
		 else (idA_A199_1, idEvents1_A95_2, a_1);


	(idA_A199, idEvents1_A95, a) 
	= (idA_A199_6, idEvents1_A95_4, a_6);
	

tel





-- Exit action for state :A_A199
node A_A199_ex(idA_A199_1:int;
	idEvents1_A95_1:int;
	isInner:bool)

returns (idA_A199:int;
	idEvents1_A95:int);


var 	idA_A199_2, idA_A199_3, idA_A199_4, idA_A199_5:int;
	idEvents1_A95_2:int;


let



	
	(idA_A199_2) 
	= 
	if ( idA_A199_1 = 100) then
	A1_A1a100_ex(idA_A199_1, false)
	 else (idA_A199_1);

	

	(idA_A199_3) 
	= 
	if ( idA_A199_1 = 101) then
	A1_A1b101_ex(idA_A199_1, false)
	 else (idA_A199_1);

	

	(idA_A199_4) 
	= 
		 if ( idA_A199_1 = 100) then 
		(idA_A199_2)
		 else
		 if ( idA_A199_1 = 101) then 
		(idA_A199_3)
		 else (idA_A199_1);


	-- set state as inactive 
	idEvents1_A95_2
	 = if (not isInner) then 0 else idEvents1_A95_1;

	idA_A199_5 
	= 0;
	

	(idA_A199, idEvents1_A95) 
	= (idA_A199_5, idEvents1_A95_1);
	

tel






-- Entry action for state :Events1_A95
node Events1_A95_en(idEvents1_A95_1:int;
	idEvents1_Events194_1:int;
	a_1:int;
	idA_A199_1:int;
	x:int;
	idA_A296_1:int;
	isInner:bool)

returns (idEvents1_A95:int;
	idEvents1_Events194:int;
	a:int;
	idA_A199:int;
	idA_A296:int);


var 	idEvents1_A95_2, idEvents1_A95_3, idEvents1_A95_4, idEvents1_A95_5, idEvents1_A95_6:int;
	idEvents1_Events194_2, idEvents1_Events194_3, idEvents1_Events194_4:int;
	a_2, a_3, a_4, a_5, a_6:int;
	idA_A199_2, idA_A199_3, idA_A199_4, idA_A199_5:int;
	idA_A296_2, idA_A296_3:int;


let



	-- set state as active 
	idEvents1_Events194_2 
	= 95;
	

	
-- transition trace :
	--POINT__To__A_A199_1
		(idA_A199_2, idEvents1_A95_2, a_2) 
	= A_A199_en(idA_A199_1, idEvents1_A95_1, a_1, x, false);
		

	(idEvents1_A95_3, idEvents1_Events194_3, a_3, idA_A199_3) 
	= 

	if ( idEvents1_A95_1 = 0) then

	 (idEvents1_A95_2, idEvents1_Events194_2, a_2, idA_A199_2)

	 else(idEvents1_A95_1, idEvents1_Events194_2, a_1, idA_A199_1);

	

	(idA_A296_2, idEvents1_A95_4, a_4) 
	= 
	if ( idEvents1_A95_1 = 96) then
	A_A296_en(idA_A296_1, idEvents1_A95_1, a_1, x, false)
	 else (idA_A296_1, idEvents1_A95_1, a_1);

	

	(idA_A199_4, idEvents1_A95_5, a_5) 
	= 
	if ( idEvents1_A95_1 = 99) then
	A_A199_en(idA_A199_1, idEvents1_A95_1, a_1, x, false)
	 else (idA_A199_1, idEvents1_A95_1, a_1);

	

	(idEvents1_A95_6, idEvents1_Events194_4, a_6, idA_A199_5, idA_A296_3) 
	= 
		 if ( idEvents1_A95_1 = 0) then 
		(idEvents1_A95_3, idEvents1_Events194_3, a_3, idA_A199_3, idA_A296_1)
		 else
		 if ( idEvents1_A95_1 = 96) then 
		(idEvents1_A95_4, idEvents1_Events194_3, a_4, idA_A199_1, idA_A296_2)
		 else
		 if ( idEvents1_A95_1 = 99) then 
		(idEvents1_A95_5, idEvents1_Events194_3, a_5, idA_A199_4, idA_A296_1)
		 else (idEvents1_A95_1, idEvents1_Events194_2, a_1, idA_A199_1, idA_A296_1);


	(idEvents1_A95, idEvents1_Events194, a, idA_A199, idA_A296) 
	= (idEvents1_A95_6, idEvents1_Events194_4, a_6, idA_A199_5, idA_A296_3);
	

tel





-- Exit action for state :Events1_A95
node Events1_A95_ex(idA_A296_1:int;
	idEvents1_A95_1:int;
	idA_A199_1:int;
	idEvents1_Events194_1:int;
	isInner:bool)

returns (idA_A296:int;
	idEvents1_A95:int;
	idA_A199:int;
	idEvents1_Events194:int);


var 	idA_A296_2, idA_A296_3:int;
	idEvents1_A95_2, idEvents1_A95_3, idEvents1_A95_4, idEvents1_A95_5:int;
	idA_A199_2, idA_A199_3:int;
	idEvents1_Events194_2:int;


let



	
	(idA_A296_2, idEvents1_A95_2) 
	= 
	if ( idEvents1_A95_1 = 96) then
	A_A296_ex(idA_A296_1, idEvents1_A95_1, false)
	 else (idA_A296_1, idEvents1_A95_1);

	

	(idA_A199_2, idEvents1_A95_3) 
	= 
	if ( idEvents1_A95_1 = 99) then
	A_A199_ex(idA_A199_1, idEvents1_A95_1, false)
	 else (idA_A199_1, idEvents1_A95_1);

	

	(idA_A296_3, idEvents1_A95_4, idA_A199_3) 
	= 
		 if ( idEvents1_A95_1 = 96) then 
		(idA_A296_2, idEvents1_A95_2, idA_A199_1)
		 else
		 if ( idEvents1_A95_1 = 99) then 
		(idA_A296_1, idEvents1_A95_3, idA_A199_2)
		 else (idA_A296_1, idEvents1_A95_1, idA_A199_1);


	-- set state as inactive 
	idEvents1_Events194_2
	 = if (not isInner) then 0 else idEvents1_Events194_1;

	idEvents1_A95_5 
	= 0;
	

	(idA_A296, idEvents1_A95, idA_A199, idEvents1_Events194) 
	= (idA_A296_3, idEvents1_A95_5, idA_A199_3, idEvents1_Events194_1);
	

tel


--***************************************************State :B_B2103 Automaton***************************************************

node B_B2103_node(idB_B2103_1:int;
	b_1:int;
	x:int;
	S1:bool;
	R1:bool)

returns (idB_B2103:int;
	b:int);


let

	 automaton b_b2103

	state POINTB_B2103:
	unless (idB_B2103_1=0) restart POINT__TO__B2_B2A104_1



	unless (idB_B2103_1=104) and S1 restart B2_B2A104__TO__B2_B2B105_1



	unless (idB_B2103_1=105) and R1 restart B2_B2B105__TO__B2_B2A104_1



	unless (idB_B2103_1=104) restart B2_B2A104_IDL

	unless (idB_B2103_1=105) restart B2_B2B105_IDL

	let

		(idB_B2103, b) 
	= (idB_B2103_1, b_1);
	

	tel



	state POINT__TO__B2_B2A104_1:

	 var 	idB_B2103_2:int;
	b_2:int;
	let

		-- transition trace :
	--POINT__To__B2_B2a104_1
		(idB_B2103_2, b_2) 
	= B2_B2a104_en(idB_B2103_1, x, b_1, false);
		

	(idB_B2103, b) 
	=  (idB_B2103_2, b_2);


	tel

	until true restart POINTB_B2103



	state B2_B2A104__TO__B2_B2B105_1:

	 var 	idB_B2103_2, idB_B2103_3:int;
	b_2:int;
	let

		-- transition trace :
	--B2_B2a104__To__B2_B2b105_1
		(idB_B2103_2) 
	= B2_B2a104_ex(idB_B2103_1, false);
		

		(idB_B2103_3, b_2) 
	= B2_B2b105_en(idB_B2103_2, x, b_1, false);
		

	(idB_B2103, b) 
	=  (idB_B2103_3, b_2);


	tel

	until true restart POINTB_B2103



	state B2_B2B105__TO__B2_B2A104_1:

	 var 	idB_B2103_2, idB_B2103_3:int;
	b_2:int;
	let

		-- transition trace :
	--B2_B2b105__To__B2_B2a104_1
		(idB_B2103_2) 
	= B2_B2b105_ex(idB_B2103_1, false);
		

		(idB_B2103_3, b_2) 
	= B2_B2a104_en(idB_B2103_2, x, b_1, false);
		

	(idB_B2103, b) 
	=  (idB_B2103_3, b_2);


	tel

	until true restart POINTB_B2103



	state B2_B2A104_IDL:

	 	let

		

	(idB_B2103, b) 
	= (idB_B2103_1, b_1);
	

	tel

	until true restart POINTB_B2103



	state B2_B2B105_IDL:

	 	let

		

	(idB_B2103, b) 
	= (idB_B2103_1, b_1);
	

	tel

	until true restart POINTB_B2103



tel


--***************************************************State :B_B1106 Automaton***************************************************

node B_B1106_node(idB_B1106_1:int;
	b_1:int;
	x:int;
	S1:bool;
	R1:bool)

returns (idB_B1106:int;
	b:int);


let

	 automaton b_b1106

	state POINTB_B1106:
	unless (idB_B1106_1=0) restart POINT__TO__B1_B1A107_1



	unless (idB_B1106_1=107) and S1 restart B1_B1A107__TO__B1_B1B108_1



	unless (idB_B1106_1=108) and R1 restart B1_B1B108__TO__B1_B1A107_1



	unless (idB_B1106_1=107) restart B1_B1A107_IDL

	unless (idB_B1106_1=108) restart B1_B1B108_IDL

	let

		(idB_B1106, b) 
	= (idB_B1106_1, b_1);
	

	tel



	state POINT__TO__B1_B1A107_1:

	 var 	idB_B1106_2:int;
	b_2:int;
	let

		-- transition trace :
	--POINT__To__B1_B1a107_1
		(idB_B1106_2, b_2) 
	= B1_B1a107_en(idB_B1106_1, x, b_1, false);
		

	(idB_B1106, b) 
	=  (idB_B1106_2, b_2);


	tel

	until true restart POINTB_B1106



	state B1_B1A107__TO__B1_B1B108_1:

	 var 	idB_B1106_2, idB_B1106_3:int;
	b_2:int;
	let

		-- transition trace :
	--B1_B1a107__To__B1_B1b108_1
		(idB_B1106_2) 
	= B1_B1a107_ex(idB_B1106_1, false);
		

		(idB_B1106_3, b_2) 
	= B1_B1b108_en(idB_B1106_2, x, b_1, false);
		

	(idB_B1106, b) 
	=  (idB_B1106_3, b_2);


	tel

	until true restart POINTB_B1106



	state B1_B1B108__TO__B1_B1A107_1:

	 var 	idB_B1106_2, idB_B1106_3:int;
	b_2:int;
	let

		-- transition trace :
	--B1_B1b108__To__B1_B1a107_1
		(idB_B1106_2) 
	= B1_B1b108_ex(idB_B1106_1, false);
		

		(idB_B1106_3, b_2) 
	= B1_B1a107_en(idB_B1106_2, x, b_1, false);
		

	(idB_B1106, b) 
	=  (idB_B1106_3, b_2);


	tel

	until true restart POINTB_B1106



	state B1_B1A107_IDL:

	 	let

		

	(idB_B1106, b) 
	= (idB_B1106_1, b_1);
	

	tel

	until true restart POINTB_B1106



	state B1_B1B108_IDL:

	 	let

		

	(idB_B1106, b) 
	= (idB_B1106_1, b_1);
	

	tel

	until true restart POINTB_B1106



tel


--***************************************************State :Events1_B102 Automaton***************************************************

node Events1_B102_node(idEvents1_B102_1:int;
	b_1:int;
	idB_B1106_1:int;
	x:int;
	T1:bool;
	idB_B2103_1:int;
	c_1:int;
	R1:bool;
	S1:bool)

returns (idEvents1_B102:int;
	b:int;
	idB_B1106:int;
	idB_B2103:int;
	c:int);


let

	 automaton events1_b102

	state POINTEvents1_B102:
	unless (idEvents1_B102_1=0) restart POINT__TO__B_B1106_1



	unless (idEvents1_B102_1=103) and T1 restart B_B2103__TO__B_B1106_1



	unless (idEvents1_B102_1=106) and T1 restart B_B1106__TO__B_B2103_1



	unless (idEvents1_B102_1=103) restart B_B2103_IDL

	unless (idEvents1_B102_1=106) restart B_B1106_IDL

	let

		(idEvents1_B102, b, idB_B1106, idB_B2103, c) 
	= (idEvents1_B102_1, b_1, idB_B1106_1, idB_B2103_1, c_1);
	

	tel



	state POINT__TO__B_B1106_1:

	 var 	idEvents1_B102_2:int;
	b_2:int;
	idB_B1106_2:int;
	let

		-- transition trace :
	--POINT__To__B_B1106_1
		(idB_B1106_2, idEvents1_B102_2, b_2) 
	= B_B1106_en(idB_B1106_1, idEvents1_B102_1, b_1, x, false);
		

	(idEvents1_B102, b, idB_B1106) 
	=  (idEvents1_B102_2, b_2, idB_B1106_2);

	--add unused variables
	(c, idB_B2103) 
	= (c_1, idB_B2103_1);
	

	tel

	until true restart POINTEvents1_B102



	state B_B2103__TO__B_B1106_1:

	 var 	idEvents1_B102_2, idEvents1_B102_3:int;
	b_2:int;
	idB_B1106_2:int;
	idB_B2103_2:int;
	c_2:int;
	let

		-- transition trace :
	--B_B2103__To__B_B1106_1
		(idB_B2103_2, idEvents1_B102_2) 
	= B_B2103_ex(idB_B2103_1, idEvents1_B102_1, false);
		

		(c_2) 
	= B_B2103__To__B_B1106_1_Transition_Action(c_1);
		

		(idB_B1106_2, idEvents1_B102_3, b_2) 
	= B_B1106_en(idB_B1106_1, idEvents1_B102_2, b_1, x, false);
		

	(idEvents1_B102, b, idB_B1106, idB_B2103, c) 
	=  (idEvents1_B102_3, b_2, idB_B1106_2, idB_B2103_2, c_2);


	tel

	until true restart POINTEvents1_B102



	state B_B1106__TO__B_B2103_1:

	 var 	idEvents1_B102_2, idEvents1_B102_3:int;
	b_2:int;
	idB_B1106_2:int;
	idB_B2103_2:int;
	c_2:int;
	let

		-- transition trace :
	--B_B1106__To__B_B2103_1
		(idB_B1106_2, idEvents1_B102_2) 
	= B_B1106_ex(idB_B1106_1, idEvents1_B102_1, false);
		

		(c_2) 
	= B_B1106__To__B_B2103_1_Transition_Action(c_1);
		

		(idB_B2103_2, idEvents1_B102_3, b_2) 
	= B_B2103_en(idB_B2103_1, idEvents1_B102_2, b_1, x, false);
		

	(idEvents1_B102, b, idB_B1106, idB_B2103, c) 
	=  (idEvents1_B102_3, b_2, idB_B1106_2, idB_B2103_2, c_2);


	tel

	until true restart POINTEvents1_B102



	state B_B2103_IDL:

	 var 	b_2:int;
	idB_B2103_2:int;
	let

		
	(idB_B2103_2, b_2) 
	= B_B2103_node(idB_B2103_1, b_1, x, S1, R1);

		


	(idEvents1_B102, b, idB_B1106, idB_B2103, c) 
	= (idEvents1_B102_1, b_2, idB_B1106_1, idB_B2103_2, c_1);
	

	tel

	until true restart POINTEvents1_B102



	state B_B1106_IDL:

	 var 	b_2:int;
	idB_B1106_2:int;
	let

		
	(idB_B1106_2, b_2) 
	= B_B1106_node(idB_B1106_1, b_1, x, S1, R1);

		


	(idEvents1_B102, b, idB_B1106, idB_B2103, c) 
	= (idEvents1_B102_1, b_2, idB_B1106_2, idB_B2103_1, c_1);
	

	tel

	until true restart POINTEvents1_B102



tel






node A2_A2a97__To__A2_A2b98_1_Transition_Action(idEvents1_B102_1:int;
	b_1:int;
	idB_B1106_1:int;
	x:int;
	T1:bool;
	idB_B2103_1:int;
	c_1:int;
	R1:bool;
	S1:bool)

returns (idEvents1_B102:int;
	b:int;
	idB_B1106:int;
	idB_B2103:int;
	c:int);


var 	idEvents1_B102_2:int;
	b_2:int;
	idB_B1106_2:int;
	idB_B2103_2:int;
	c_2:int;


let



	(idEvents1_B102_2, b_2, idB_B1106_2, idB_B2103_2, c_2) 
	= Events1_B102_node(idEvents1_B102_1, b_1, idB_B1106_1, x, T1, idB_B2103_1, c_1, R1, true);
	

	(idEvents1_B102, b, idB_B1106, idB_B2103, c) 
	= (idEvents1_B102_2, b_2, idB_B1106_2, idB_B2103_2, c_2);
	

tel






node A2_A2b98__To__A2_A2a97_1_Transition_Action(idEvents1_B102_1:int;
	b_1:int;
	idB_B1106_1:int;
	x:int;
	T1:bool;
	idB_B2103_1:int;
	c_1:int;
	R1:bool;
	S1:bool)

returns (idEvents1_B102:int;
	b:int;
	idB_B1106:int;
	idB_B2103:int;
	c:int);


var 	idEvents1_B102_2:int;
	b_2:int;
	idB_B1106_2:int;
	idB_B2103_2:int;
	c_2:int;


let



	(idEvents1_B102_2, b_2, idB_B1106_2, idB_B2103_2, c_2) 
	= Events1_B102_node(idEvents1_B102_1, b_1, idB_B1106_1, x, T1, idB_B2103_1, c_1, true, S1);
	

	(idEvents1_B102, b, idB_B1106, idB_B2103, c) 
	= (idEvents1_B102_2, b_2, idB_B1106_2, idB_B2103_2, c_2);
	

tel


--***************************************************State :A_A296 Automaton***************************************************

node A_A296_node(idA_A296_1:int;
	a_1:int;
	x:int;
	S:bool;
	R1:bool;
	S1:bool;
	T1:bool;
	b_1:int;
	c_1:int;
	idB_B1106_1:int;
	idB_B2103_1:int;
	idEvents1_B102_1:int;
	R:bool)

returns (idA_A296:int;
	a:int;
	b:int;
	c:int;
	idB_B1106:int;
	idB_B2103:int;
	idEvents1_B102:int);


let

	 automaton a_a296

	state POINTA_A296:
	unless (idA_A296_1=0) restart POINT__TO__A2_A2A97_1



	unless (idA_A296_1=97) and S restart A2_A2A97__TO__A2_A2B98_1



	unless (idA_A296_1=98) and R restart A2_A2B98__TO__A2_A2A97_1



	unless (idA_A296_1=97) restart A2_A2A97_IDL

	unless (idA_A296_1=98) restart A2_A2B98_IDL

	let

		(idA_A296, a, b, c, idB_B1106, idB_B2103, idEvents1_B102) 
	= (idA_A296_1, a_1, b_1, c_1, idB_B1106_1, idB_B2103_1, idEvents1_B102_1);
	

	tel



	state POINT__TO__A2_A2A97_1:

	 var 	idA_A296_2:int;
	a_2:int;
	let

		-- transition trace :
	--POINT__To__A2_A2a97_1
		(idA_A296_2, a_2) 
	= A2_A2a97_en(idA_A296_1, x, a_1, false);
		

	(idA_A296, a) 
	=  (idA_A296_2, a_2);

	--add unused variables
	(b, c, idB_B1106, idB_B2103, idEvents1_B102) 
	= (b_1, c_1, idB_B1106_1, idB_B2103_1, idEvents1_B102_1);
	

	tel

	until true restart POINTA_A296



	state A2_A2A97__TO__A2_A2B98_1:

	 var 	idA_A296_2, idA_A296_3:int;
	a_2:int;
	b_2:int;
	c_2:int;
	idB_B1106_2:int;
	idB_B2103_2:int;
	idEvents1_B102_2:int;
	let

		-- transition trace :
	--A2_A2a97__To__A2_A2b98_1
		(idA_A296_2) 
	= A2_A2a97_ex(idA_A296_1, false);
		

		(idEvents1_B102_2, b_2, idB_B1106_2, idB_B2103_2, c_2) 
	= A2_A2a97__To__A2_A2b98_1_Transition_Action(idEvents1_B102_1, b_1, idB_B1106_1, x, T1, idB_B2103_1, c_1, R1, S1);
		

		(idA_A296_3, a_2) 
	= A2_A2b98_en(idA_A296_2, x, a_1, false);
		

	(idA_A296, a, b, c, idB_B1106, idB_B2103, idEvents1_B102) 
	=  (idA_A296_3, a_2, b_2, c_2, idB_B1106_2, idB_B2103_2, idEvents1_B102_2);


	tel

	until true restart POINTA_A296



	state A2_A2B98__TO__A2_A2A97_1:

	 var 	idA_A296_2, idA_A296_3:int;
	a_2:int;
	b_2:int;
	c_2:int;
	idB_B1106_2:int;
	idB_B2103_2:int;
	idEvents1_B102_2:int;
	let

		-- transition trace :
	--A2_A2b98__To__A2_A2a97_1
		(idA_A296_2) 
	= A2_A2b98_ex(idA_A296_1, false);
		

		(idEvents1_B102_2, b_2, idB_B1106_2, idB_B2103_2, c_2) 
	= A2_A2b98__To__A2_A2a97_1_Transition_Action(idEvents1_B102_1, b_1, idB_B1106_1, x, T1, idB_B2103_1, c_1, R1, S1);
		

		(idA_A296_3, a_2) 
	= A2_A2a97_en(idA_A296_2, x, a_1, false);
		

	(idA_A296, a, b, c, idB_B1106, idB_B2103, idEvents1_B102) 
	=  (idA_A296_3, a_2, b_2, c_2, idB_B1106_2, idB_B2103_2, idEvents1_B102_2);


	tel

	until true restart POINTA_A296



	state A2_A2A97_IDL:

	 	let

		

	(idA_A296, a, b, c, idB_B1106, idB_B2103, idEvents1_B102) 
	= (idA_A296_1, a_1, b_1, c_1, idB_B1106_1, idB_B2103_1, idEvents1_B102_1);
	

	tel

	until true restart POINTA_A296



	state A2_A2B98_IDL:

	 	let

		

	(idA_A296, a, b, c, idB_B1106, idB_B2103, idEvents1_B102) 
	= (idA_A296_1, a_1, b_1, c_1, idB_B1106_1, idB_B2103_1, idEvents1_B102_1);
	

	tel

	until true restart POINTA_A296



tel






node A1_A1a100__To__A1_A1b101_1_Transition_Action(idEvents1_B102_1:int;
	b_1:int;
	idB_B1106_1:int;
	x:int;
	T1:bool;
	idB_B2103_1:int;
	c_1:int;
	R1:bool;
	S1:bool)

returns (idEvents1_B102:int;
	b:int;
	idB_B1106:int;
	idB_B2103:int;
	c:int);


var 	idEvents1_B102_2:int;
	b_2:int;
	idB_B1106_2:int;
	idB_B2103_2:int;
	c_2:int;


let



	(idEvents1_B102_2, b_2, idB_B1106_2, idB_B2103_2, c_2) 
	= Events1_B102_node(idEvents1_B102_1, b_1, idB_B1106_1, x, T1, idB_B2103_1, c_1, R1, true);
	

	(idEvents1_B102, b, idB_B1106, idB_B2103, c) 
	= (idEvents1_B102_2, b_2, idB_B1106_2, idB_B2103_2, c_2);
	

tel






node A1_A1b101__To__A1_A1a100_1_Transition_Action(idEvents1_B102_1:int;
	b_1:int;
	idB_B1106_1:int;
	x:int;
	T1:bool;
	idB_B2103_1:int;
	c_1:int;
	R1:bool;
	S1:bool)

returns (idEvents1_B102:int;
	b:int;
	idB_B1106:int;
	idB_B2103:int;
	c:int);


var 	idEvents1_B102_2:int;
	b_2:int;
	idB_B1106_2:int;
	idB_B2103_2:int;
	c_2:int;


let



	(idEvents1_B102_2, b_2, idB_B1106_2, idB_B2103_2, c_2) 
	= Events1_B102_node(idEvents1_B102_1, b_1, idB_B1106_1, x, T1, idB_B2103_1, c_1, true, S1);
	

	(idEvents1_B102, b, idB_B1106, idB_B2103, c) 
	= (idEvents1_B102_2, b_2, idB_B1106_2, idB_B2103_2, c_2);
	

tel


--***************************************************State :A_A199 Automaton***************************************************

node A_A199_node(idA_A199_1:int;
	a_1:int;
	x:int;
	S:bool;
	R1:bool;
	S1:bool;
	T1:bool;
	b_1:int;
	c_1:int;
	idB_B1106_1:int;
	idB_B2103_1:int;
	idEvents1_B102_1:int;
	R:bool)

returns (idA_A199:int;
	a:int;
	b:int;
	c:int;
	idB_B1106:int;
	idB_B2103:int;
	idEvents1_B102:int);


let

	 automaton a_a199

	state POINTA_A199:
	unless (idA_A199_1=0) restart POINT__TO__A1_A1A100_1



	unless (idA_A199_1=100) and S restart A1_A1A100__TO__A1_A1B101_1



	unless (idA_A199_1=101) and R restart A1_A1B101__TO__A1_A1A100_1



	unless (idA_A199_1=100) restart A1_A1A100_IDL

	unless (idA_A199_1=101) restart A1_A1B101_IDL

	let

		(idA_A199, a, b, c, idB_B1106, idB_B2103, idEvents1_B102) 
	= (idA_A199_1, a_1, b_1, c_1, idB_B1106_1, idB_B2103_1, idEvents1_B102_1);
	

	tel



	state POINT__TO__A1_A1A100_1:

	 var 	idA_A199_2:int;
	a_2:int;
	let

		-- transition trace :
	--POINT__To__A1_A1a100_1
		(idA_A199_2, a_2) 
	= A1_A1a100_en(idA_A199_1, x, a_1, false);
		

	(idA_A199, a) 
	=  (idA_A199_2, a_2);

	--add unused variables
	(b, c, idB_B1106, idB_B2103, idEvents1_B102) 
	= (b_1, c_1, idB_B1106_1, idB_B2103_1, idEvents1_B102_1);
	

	tel

	until true restart POINTA_A199



	state A1_A1A100__TO__A1_A1B101_1:

	 var 	idA_A199_2, idA_A199_3:int;
	a_2:int;
	b_2:int;
	c_2:int;
	idB_B1106_2:int;
	idB_B2103_2:int;
	idEvents1_B102_2:int;
	let

		-- transition trace :
	--A1_A1a100__To__A1_A1b101_1
		(idA_A199_2) 
	= A1_A1a100_ex(idA_A199_1, false);
		

		(idEvents1_B102_2, b_2, idB_B1106_2, idB_B2103_2, c_2) 
	= A1_A1a100__To__A1_A1b101_1_Transition_Action(idEvents1_B102_1, b_1, idB_B1106_1, x, T1, idB_B2103_1, c_1, R1, S1);
		

		(idA_A199_3, a_2) 
	= A1_A1b101_en(idA_A199_2, x, a_1, false);
		

	(idA_A199, a, b, c, idB_B1106, idB_B2103, idEvents1_B102) 
	=  (idA_A199_3, a_2, b_2, c_2, idB_B1106_2, idB_B2103_2, idEvents1_B102_2);


	tel

	until true restart POINTA_A199



	state A1_A1B101__TO__A1_A1A100_1:

	 var 	idA_A199_2, idA_A199_3:int;
	a_2:int;
	b_2:int;
	c_2:int;
	idB_B1106_2:int;
	idB_B2103_2:int;
	idEvents1_B102_2:int;
	let

		-- transition trace :
	--A1_A1b101__To__A1_A1a100_1
		(idA_A199_2) 
	= A1_A1b101_ex(idA_A199_1, false);
		

		(idEvents1_B102_2, b_2, idB_B1106_2, idB_B2103_2, c_2) 
	= A1_A1b101__To__A1_A1a100_1_Transition_Action(idEvents1_B102_1, b_1, idB_B1106_1, x, T1, idB_B2103_1, c_1, R1, S1);
		

		(idA_A199_3, a_2) 
	= A1_A1a100_en(idA_A199_2, x, a_1, false);
		

	(idA_A199, a, b, c, idB_B1106, idB_B2103, idEvents1_B102) 
	=  (idA_A199_3, a_2, b_2, c_2, idB_B1106_2, idB_B2103_2, idEvents1_B102_2);


	tel

	until true restart POINTA_A199



	state A1_A1A100_IDL:

	 	let

		

	(idA_A199, a, b, c, idB_B1106, idB_B2103, idEvents1_B102) 
	= (idA_A199_1, a_1, b_1, c_1, idB_B1106_1, idB_B2103_1, idEvents1_B102_1);
	

	tel

	until true restart POINTA_A199



	state A1_A1B101_IDL:

	 	let

		

	(idA_A199, a, b, c, idB_B1106, idB_B2103, idEvents1_B102) 
	= (idA_A199_1, a_1, b_1, c_1, idB_B1106_1, idB_B2103_1, idEvents1_B102_1);
	

	tel

	until true restart POINTA_A199



tel






node A_A199__To__A_A296_1_Transition_Action(idEvents1_B102_1:int;
	b_1:int;
	idB_B1106_1:int;
	x:int;
	T1:bool;
	idB_B2103_1:int;
	c_1:int;
	R1:bool;
	S1:bool)

returns (idEvents1_B102:int;
	b:int;
	idB_B1106:int;
	idB_B2103:int;
	c:int);


var 	idEvents1_B102_2:int;
	b_2:int;
	idB_B1106_2:int;
	idB_B2103_2:int;
	c_2:int;


let



	(idEvents1_B102_2, b_2, idB_B1106_2, idB_B2103_2, c_2) 
	= Events1_B102_node(idEvents1_B102_1, b_1, idB_B1106_1, x, true, idB_B2103_1, c_1, R1, S1);
	

	(idEvents1_B102, b, idB_B1106, idB_B2103, c) 
	= (idEvents1_B102_2, b_2, idB_B1106_2, idB_B2103_2, c_2);
	

tel






node A_A296__To__A_A199_1_Transition_Action(idEvents1_B102_1:int;
	b_1:int;
	idB_B1106_1:int;
	x:int;
	T1:bool;
	idB_B2103_1:int;
	c_1:int;
	R1:bool;
	S1:bool)

returns (idEvents1_B102:int;
	b:int;
	idB_B1106:int;
	idB_B2103:int;
	c:int);


var 	idEvents1_B102_2:int;
	b_2:int;
	idB_B1106_2:int;
	idB_B2103_2:int;
	c_2:int;


let



	(idEvents1_B102_2, b_2, idB_B1106_2, idB_B2103_2, c_2) 
	= Events1_B102_node(idEvents1_B102_1, b_1, idB_B1106_1, x, true, idB_B2103_1, c_1, R1, S1);
	

	(idEvents1_B102, b, idB_B1106, idB_B2103, c) 
	= (idEvents1_B102_2, b_2, idB_B1106_2, idB_B2103_2, c_2);
	

tel


--***************************************************State :Events1_A95 Automaton***************************************************

node Events1_A95_node(idEvents1_A95_1:int;
	a_1:int;
	idA_A199_1:int;
	x:int;
	T:bool;
	idA_A296_1:int;
	R1:bool;
	S1:bool;
	T1:bool;
	b_1:int;
	c_1:int;
	idB_B1106_1:int;
	idB_B2103_1:int;
	idEvents1_B102_1:int;
	R:bool;
	S:bool)

returns (idEvents1_A95:int;
	a:int;
	idA_A199:int;
	idA_A296:int;
	b:int;
	c:int;
	idB_B1106:int;
	idB_B2103:int;
	idEvents1_B102:int);


let

	 automaton events1_a95

	state POINTEvents1_A95:
	unless (idEvents1_A95_1=0) restart POINT__TO__A_A199_1



	unless (idEvents1_A95_1=96) and T restart A_A296__TO__A_A199_1



	unless (idEvents1_A95_1=99) and T restart A_A199__TO__A_A296_1



	unless (idEvents1_A95_1=96) restart A_A296_IDL

	unless (idEvents1_A95_1=99) restart A_A199_IDL

	let

		(idEvents1_A95, a, idA_A199, idA_A296, b, c, idB_B1106, idB_B2103, idEvents1_B102) 
	= (idEvents1_A95_1, a_1, idA_A199_1, idA_A296_1, b_1, c_1, idB_B1106_1, idB_B2103_1, idEvents1_B102_1);
	

	tel



	state POINT__TO__A_A199_1:

	 var 	idEvents1_A95_2:int;
	a_2:int;
	idA_A199_2:int;
	let

		-- transition trace :
	--POINT__To__A_A199_1
		(idA_A199_2, idEvents1_A95_2, a_2) 
	= A_A199_en(idA_A199_1, idEvents1_A95_1, a_1, x, false);
		

	(idEvents1_A95, a, idA_A199) 
	=  (idEvents1_A95_2, a_2, idA_A199_2);

	--add unused variables
	(b, c, idA_A296, idB_B1106, idB_B2103, idEvents1_B102) 
	= (b_1, c_1, idA_A296_1, idB_B1106_1, idB_B2103_1, idEvents1_B102_1);
	

	tel

	until true restart POINTEvents1_A95



	state A_A296__TO__A_A199_1:

	 var 	idEvents1_A95_2, idEvents1_A95_3:int;
	a_2:int;
	idA_A199_2:int;
	idA_A296_2:int;
	b_2:int;
	c_2:int;
	idB_B1106_2:int;
	idB_B2103_2:int;
	idEvents1_B102_2:int;
	let

		-- transition trace :
	--A_A296__To__A_A199_1
		(idA_A296_2, idEvents1_A95_2) 
	= A_A296_ex(idA_A296_1, idEvents1_A95_1, false);
		

		(idEvents1_B102_2, b_2, idB_B1106_2, idB_B2103_2, c_2) 
	= A_A296__To__A_A199_1_Transition_Action(idEvents1_B102_1, b_1, idB_B1106_1, x, T1, idB_B2103_1, c_1, R1, S1);
		

		(idA_A199_2, idEvents1_A95_3, a_2) 
	= A_A199_en(idA_A199_1, idEvents1_A95_2, a_1, x, false);
		

	(idEvents1_A95, a, idA_A199, idA_A296, b, c, idB_B1106, idB_B2103, idEvents1_B102) 
	=  (idEvents1_A95_3, a_2, idA_A199_2, idA_A296_2, b_2, c_2, idB_B1106_2, idB_B2103_2, idEvents1_B102_2);


	tel

	until true restart POINTEvents1_A95



	state A_A199__TO__A_A296_1:

	 var 	idEvents1_A95_2, idEvents1_A95_3:int;
	a_2:int;
	idA_A199_2:int;
	idA_A296_2:int;
	b_2:int;
	c_2:int;
	idB_B1106_2:int;
	idB_B2103_2:int;
	idEvents1_B102_2:int;
	let

		-- transition trace :
	--A_A199__To__A_A296_1
		(idA_A199_2, idEvents1_A95_2) 
	= A_A199_ex(idA_A199_1, idEvents1_A95_1, false);
		

		(idEvents1_B102_2, b_2, idB_B1106_2, idB_B2103_2, c_2) 
	= A_A199__To__A_A296_1_Transition_Action(idEvents1_B102_1, b_1, idB_B1106_1, x, T1, idB_B2103_1, c_1, R1, S1);
		

		(idA_A296_2, idEvents1_A95_3, a_2) 
	= A_A296_en(idA_A296_1, idEvents1_A95_2, a_1, x, false);
		

	(idEvents1_A95, a, idA_A199, idA_A296, b, c, idB_B1106, idB_B2103, idEvents1_B102) 
	=  (idEvents1_A95_3, a_2, idA_A199_2, idA_A296_2, b_2, c_2, idB_B1106_2, idB_B2103_2, idEvents1_B102_2);


	tel

	until true restart POINTEvents1_A95



	state A_A296_IDL:

	 var 	a_2:int;
	idA_A296_2:int;
	b_2:int;
	c_2:int;
	idB_B1106_2:int;
	idB_B2103_2:int;
	idEvents1_B102_2:int;
	let

		
	(idA_A296_2, a_2, b_2, c_2, idB_B1106_2, idB_B2103_2, idEvents1_B102_2) 
	= A_A296_node(idA_A296_1, a_1, x, S, R1, S1, T1, b_1, c_1, idB_B1106_1, idB_B2103_1, idEvents1_B102_1, R);

		


	(idEvents1_A95, a, idA_A199, idA_A296, b, c, idB_B1106, idB_B2103, idEvents1_B102) 
	= (idEvents1_A95_1, a_2, idA_A199_1, idA_A296_2, b_2, c_2, idB_B1106_2, idB_B2103_2, idEvents1_B102_2);
	

	tel

	until true restart POINTEvents1_A95



	state A_A199_IDL:

	 var 	a_2:int;
	idA_A199_2:int;
	b_2:int;
	c_2:int;
	idB_B1106_2:int;
	idB_B2103_2:int;
	idEvents1_B102_2:int;
	let

		
	(idA_A199_2, a_2, b_2, c_2, idB_B1106_2, idB_B2103_2, idEvents1_B102_2) 
	= A_A199_node(idA_A199_1, a_1, x, S, R1, S1, T1, b_1, c_1, idB_B1106_1, idB_B2103_1, idEvents1_B102_1, R);

		


	(idEvents1_A95, a, idA_A199, idA_A296, b, c, idB_B1106, idB_B2103, idEvents1_B102) 
	= (idEvents1_A95_1, a_2, idA_A199_2, idA_A296_1, b_2, c_2, idB_B1106_2, idB_B2103_2, idEvents1_B102_2);
	

	tel

	until true restart POINTEvents1_A95



tel


--***************************************************State :Events1_Events194 Automaton***************************************************

node Events1_Events194_node(idEvents1_Events194_1:int;
	a_1:int;
	idA_A199_1:int;
	idA_A296_1:int;
	idEvents1_A95_1:int;
	x:int;
	b_1:int;
	idB_B1106_1:int;
	idB_B2103_1:int;
	idEvents1_B102_1:int;
	R:bool;
	R1:bool;
	S:bool;
	S1:bool;
	T:bool;
	T1:bool;
	c_1:int)

returns (idEvents1_Events194:int;
	a:int;
	idA_A199:int;
	idA_A296:int;
	idEvents1_A95:int;
	b:int;
	idB_B1106:int;
	idB_B2103:int;
	idEvents1_B102:int;
	c:int);


let

	 automaton events1_events194

	state POINTEvents1_Events194:
	unless (idEvents1_Events194_1=0) restart EVENTS1_EVENTS194_PARALLEL_ENTRY
	unless true  restart EVENTS1_EVENTS194_PARALLEL_IDL

	let

		(idEvents1_Events194, a, idA_A199, idA_A296, idEvents1_A95, b, idB_B1106, idB_B2103, idEvents1_B102, c) 
	= (idEvents1_Events194_1, a_1, idA_A199_1, idA_A296_1, idEvents1_A95_1, b_1, idB_B1106_1, idB_B2103_1, idEvents1_B102_1, c_1);
	

	tel



	state EVENTS1_EVENTS194_PARALLEL_ENTRY:

	 var 	idEvents1_Events194_2, idEvents1_Events194_3:int;
	a_2:int;
	idA_A199_2:int;
	idA_A296_2:int;
	idEvents1_A95_2:int;
	b_2:int;
	idB_B1106_2:int;
	idB_B2103_2:int;
	idEvents1_B102_2:int;
	let

		
	(idEvents1_A95_2, idEvents1_Events194_2, a_2, idA_A199_2, idA_A296_2) 
	= Events1_A95_en(idEvents1_A95_1, idEvents1_Events194_1, a_1, idA_A199_1, x, idA_A296_1, false);

	(idEvents1_B102_2, idEvents1_Events194_3, b_2, idB_B1106_2, idB_B2103_2) 
	= Events1_B102_en(idEvents1_B102_1, idEvents1_Events194_2, b_1, idB_B1106_1, x, idB_B2103_1, false);


	(idEvents1_Events194, a, idA_A199, idA_A296, idEvents1_A95, b, idB_B1106, idB_B2103, idEvents1_B102) 
	= (idEvents1_Events194_3, a_2, idA_A199_2, idA_A296_2, idEvents1_A95_2, b_2, idB_B1106_2, idB_B2103_2, idEvents1_B102_2);
	
	--add unused variables
	(c) 
	= (c_1);
	

	tel

	until true restart POINTEvents1_Events194



	state EVENTS1_EVENTS194_PARALLEL_IDL:

	 var 	a_2:int;
	idA_A199_2:int;
	idA_A296_2:int;
	idEvents1_A95_2:int;
	b_2, b_3:int;
	idB_B1106_2, idB_B1106_3:int;
	idB_B2103_2, idB_B2103_3:int;
	idEvents1_B102_2, idEvents1_B102_3:int;
	c_2, c_3:int;
	let

		

		(idEvents1_A95_2, a_2, idA_A199_2, idA_A296_2, b_2, c_2, idB_B1106_2, idB_B2103_2, idEvents1_B102_2)
	= if not (idEvents1_A95_1= 0 ) then Events1_A95_node(idEvents1_A95_1, a_1, idA_A199_1, x, T, idA_A296_1, R1, S1, T1, b_1, c_1, idB_B1106_1, idB_B2103_1, idEvents1_B102_1, R, S)

		 else (idEvents1_A95_1, a_1, idA_A199_1, idA_A296_1, b_1, c_1, idB_B1106_1, idB_B2103_1, idEvents1_B102_1);

		

		

		(idEvents1_B102_3, b_3, idB_B1106_3, idB_B2103_3, c_3)
	= if not (idEvents1_B102_2= 0 ) then Events1_B102_node(idEvents1_B102_2, b_2, idB_B1106_2, x, T1, idB_B2103_2, c_2, R1, S1)

		 else (idEvents1_B102_2, b_2, idB_B1106_2, idB_B2103_2, c_2);

		

		

	(idEvents1_Events194, a, idA_A199, idA_A296, idEvents1_A95, b, idB_B1106, idB_B2103, idEvents1_B102, c) 
	= (idEvents1_Events194_1, a_2, idA_A199_2, idA_A296_2, idEvents1_A95_2, b_3, idB_B1106_3, idB_B2103_3, idEvents1_B102_3, c_3);
	

	tel

	until true restart POINTEvents1_Events194



tel


--***************************************************State :Events1_Events194 Automaton***************************************************

node Events1_PP_Events1(x:int;
	R:bool;
	S:bool;
	T:bool)

returns (a:int;
	b:int;
	c:int);


var a_1: int;

	b_1: int;

	c_1: int;

	R1, R1_1: bool;

	S1, S1_1: bool;

	T1, T1_1: bool;

	idEvents1_Events194, idEvents1_Events194_1: int;

	idB_B2103, idB_B2103_1: int;

	idB_B1106, idB_B1106_1: int;

	idEvents1_B102, idEvents1_B102_1: int;

	idA_A296, idA_A296_1: int;

	idA_A199, idA_A199_1: int;

	idEvents1_A95, idEvents1_A95_1: int;

		idEvents1_Events194_2, idEvents1_Events194_3:int;
	a_2, a_3:int;
	idA_A199_2, idA_A199_3:int;
	idA_A296_2, idA_A296_3:int;
	idEvents1_A95_2, idEvents1_A95_3:int;
	b_2, b_3:int;
	idB_B1106_2, idB_B1106_3:int;
	idB_B2103_2, idB_B2103_3:int;
	idEvents1_B102_2, idEvents1_B102_3:int;
	c_2, c_3:int;
let

	a_1 = 0 -> pre a;

	b_1 = 0 -> pre b;

	c_1 = 0 -> pre c;

	R1_1 = false -> pre R1;

	S1_1 = false -> pre S1;

	T1_1 = false -> pre T1;

	idEvents1_Events194_1 = 0 -> pre idEvents1_Events194;

	idB_B2103_1 = 0 -> pre idB_B2103;

	idB_B1106_1 = 0 -> pre idB_B1106;

	idEvents1_B102_1 = 0 -> pre idEvents1_B102;

	idA_A296_1 = 0 -> pre idA_A296;

	idA_A199_1 = 0 -> pre idA_A199;

	idEvents1_A95_1 = 0 -> pre idEvents1_A95;

	



	(idEvents1_Events194_2, a_2, idA_A199_2, idA_A296_2, idEvents1_A95_2, b_2, idB_B1106_2, idB_B2103_2, idEvents1_B102_2, c_2)
	 = 

	 if R then Events1_Events194_node(idEvents1_Events194_1, a_1, idA_A199_1, idA_A296_1, idEvents1_A95_1, x, b_1, idB_B1106_1, idB_B2103_1, idEvents1_B102_1, R, R1, false, S1, false, T1, c_1)

	 else (idEvents1_Events194_1, a_1, idA_A199_1, idA_A296_1, idEvents1_A95_1, b_1, idB_B1106_1, idB_B2103_1, idEvents1_B102_1, c_1);

	



	(idEvents1_Events194_3, a_3, idA_A199_3, idA_A296_3, idEvents1_A95_3, b_3, idB_B1106_3, idB_B2103_3, idEvents1_B102_3, c_3)
	 = 

	 if S then Events1_Events194_node(idEvents1_Events194_2, a_2, idA_A199_2, idA_A296_2, idEvents1_A95_2, x, b_2, idB_B1106_2, idB_B2103_2, idEvents1_B102_2, false, R1, S, S1, false, T1, c_2)

	 else (idEvents1_Events194_2, a_2, idA_A199_2, idA_A296_2, idEvents1_A95_2, b_2, idB_B1106_2, idB_B2103_2, idEvents1_B102_2, c_2);

	



	(idEvents1_Events194, a, idA_A199, idA_A296, idEvents1_A95, b, idB_B1106, idB_B2103, idEvents1_B102, c)
	 = 

	 if T then Events1_Events194_node(idEvents1_Events194_3, a_3, idA_A199_3, idA_A296_3, idEvents1_A95_3, x, b_3, idB_B1106_3, idB_B2103_3, idEvents1_B102_3, false, R1, false, S1, T, T1, c_3)

	 else (idEvents1_Events194_3, a_3, idA_A199_3, idA_A296_3, idEvents1_A95_3, b_3, idB_B1106_3, idB_B2103_3, idEvents1_B102_3, c_3);

	


--unused outputs
	R1 = false;

	S1 = false;

	T1 = false;

	

tel



node Events1_PP (x_1_1 : int; R_1_1 : real; S_1_1 : real; T_1_1 : real)
returns (a_1_1 : int;
	b_2_1 : int;
	c_3_1 : int); 
var
	Events1_1_1 : int; Events1_2_1 : int; Events1_3_1 : int;
	Mux_1_1 : real; Mux_1_2 : real; Mux_1_3 : real;
	i_virtual_local : real;
	Events1Mux_1_1_event: bool;
	Events1Mux_1_2_event: bool;
	Events1Mux_1_3_event: bool;
let 
	Events1Mux_1_1_event = false -> ((pre(Mux_1_1) > 0.0 and Mux_1_1 <= 0.0) or (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0));
	Events1Mux_1_2_event = false -> ((pre(Mux_1_2) > 0.0 and Mux_1_2 <= 0.0) or (pre(Mux_1_2) <= 0.0 and Mux_1_2 > 0.0));
	Events1Mux_1_3_event = false -> ((pre(Mux_1_3) > 0.0 and Mux_1_3 <= 0.0) or (pre(Mux_1_3) <= 0.0 and Mux_1_3 > 0.0));
	(Events1_1_1, Events1_2_1, Events1_3_1) =  Events1_PP_Events1(x_1_1, Events1Mux_1_1_event, Events1Mux_1_2_event, Events1Mux_1_3_event);
	Mux_1_1 = R_1_1 ;
	Mux_1_2 = S_1_1 ;
	Mux_1_3 = T_1_1 ;
	a_1_1 = Events1_1_1;
	b_2_1 = Events1_2_1;
	c_3_1 = Events1_3_1;
	i_virtual_local= 0.0 -> 1.0;
tel

