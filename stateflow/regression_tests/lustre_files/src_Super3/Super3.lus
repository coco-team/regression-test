-- This file has been generated by cocoSim


-- System nodes





















-- Entry action for state :Super3_C
node Super3_C_en(idSuper3_Super3_1:int;
	s_1:real;
	isInner:bool)

returns (idSuper3_Super3:int;
	s:real);


var 	idSuper3_Super3_2:int;
	s_2:real;


let



	-- set state as active 
	idSuper3_Super3_2 
	= 957;
	

	s_2 
	= if (not isInner) then 5.
	 else s_1;
	

	(idSuper3_Super3, s) 
	= (idSuper3_Super3_2, s_2);
	

tel





-- Exit action for state :Super3_C
node Super3_C_ex(idSuper3_Super3_1:int;
	isInner:bool)

returns (idSuper3_Super3:int);


var 	idSuper3_Super3_2:int;


let



	-- set state as inactive 
	idSuper3_Super3_2
	 = if (not isInner) then 0 else idSuper3_Super3_1;


	(idSuper3_Super3) 
	= (idSuper3_Super3_2);
	

tel






-- Entry action for state :B_B2
node B_B2_en(idSuper3_B_1:int;
	s_1:real;
	isInner:bool)

returns (idSuper3_B:int;
	s:real);


var 	idSuper3_B_2:int;
	s_2:real;


let



	-- set state as active 
	idSuper3_B_2 
	= 959;
	

	s_2 
	= if (not isInner) then 3.
	 else s_1;
	

	(idSuper3_B, s) 
	= (idSuper3_B_2, s_2);
	

tel





-- Exit action for state :B_B2
node B_B2_ex(idSuper3_B_1:int;
	isInner:bool)

returns (idSuper3_B:int);


var 	idSuper3_B_2:int;


let



	-- set state as inactive 
	idSuper3_B_2
	 = if (not isInner) then 0 else idSuper3_B_1;


	(idSuper3_B) 
	= (idSuper3_B_2);
	

tel






-- Entry action for state :B_B1
node B_B1_en(idSuper3_B_1:int;
	s_1:real;
	isInner:bool)

returns (idSuper3_B:int;
	s:real);


var 	idSuper3_B_2:int;
	s_2:real;


let



	-- set state as active 
	idSuper3_B_2 
	= 956;
	

	s_2 
	= if (not isInner) then 4.
	 else s_1;
	

	(idSuper3_B, s) 
	= (idSuper3_B_2, s_2);
	

tel





-- Exit action for state :B_B1
node B_B1_ex(idSuper3_B_1:int;
	isInner:bool)

returns (idSuper3_B:int);


var 	idSuper3_B_2:int;


let



	-- set state as inactive 
	idSuper3_B_2
	 = if (not isInner) then 0 else idSuper3_B_1;


	(idSuper3_B) 
	= (idSuper3_B_2);
	

tel






-- Entry action for state :Super3_B
node Super3_B_en(idSuper3_B_1:int;
	idSuper3_Super3_1:int;
	s_1:real;
	isInner:bool)

returns (idSuper3_B:int;
	idSuper3_Super3:int;
	s:real);


var 	idSuper3_B_2, idSuper3_B_3, idSuper3_B_4, idSuper3_B_5, idSuper3_B_6:int;
	idSuper3_Super3_2, idSuper3_Super3_3, idSuper3_Super3_4:int;
	s_2, s_3, s_4, s_5, s_6:real;


let



	-- set state as active 
	idSuper3_Super3_2 
	= 958;
	

	
-- transition trace :
	--POINT__To__B_B1_1
		(idSuper3_B_2, s_2) 
	= B_B1_en(idSuper3_B_1, s_1, false);
		

	(idSuper3_B_3, idSuper3_Super3_3, s_3) 
	= 

	if ( idSuper3_B_1 = 0) then

	 (idSuper3_B_2, idSuper3_Super3_2, s_2)

	 else(idSuper3_B_1, idSuper3_Super3_2, s_1);

	

	(idSuper3_B_4, s_4) 
	= 
	if ( idSuper3_B_1 = 959) then
	B_B2_en(idSuper3_B_1, s_1, false)
	 else (idSuper3_B_1, s_1);

	

	(idSuper3_B_5, s_5) 
	= 
	if ( idSuper3_B_1 = 956) then
	B_B1_en(idSuper3_B_1, s_1, false)
	 else (idSuper3_B_1, s_1);

	

	(idSuper3_B_6, idSuper3_Super3_4, s_6) 
	= 
		 if ( idSuper3_B_1 = 0) then 
		(idSuper3_B_3, idSuper3_Super3_3, s_3)
		 else
		 if ( idSuper3_B_1 = 959) then 
		(idSuper3_B_4, idSuper3_Super3_3, s_4)
		 else
		 if ( idSuper3_B_1 = 956) then 
		(idSuper3_B_5, idSuper3_Super3_3, s_5)
		 else (idSuper3_B_1, idSuper3_Super3_2, s_1);


	(idSuper3_B, idSuper3_Super3, s) 
	= (idSuper3_B_6, idSuper3_Super3_4, s_6);
	

tel





-- Exit action for state :Super3_B
node Super3_B_ex(idSuper3_B_1:int;
	idSuper3_Super3_1:int;
	isInner:bool)

returns (idSuper3_B:int;
	idSuper3_Super3:int);


var 	idSuper3_B_2, idSuper3_B_3, idSuper3_B_4, idSuper3_B_5:int;
	idSuper3_Super3_2:int;


let



	
	(idSuper3_B_2) 
	= 
	if ( idSuper3_B_1 = 959) then
	B_B2_ex(idSuper3_B_1, false)
	 else (idSuper3_B_1);

	

	(idSuper3_B_3) 
	= 
	if ( idSuper3_B_1 = 956) then
	B_B1_ex(idSuper3_B_1, false)
	 else (idSuper3_B_1);

	

	(idSuper3_B_4) 
	= 
		 if ( idSuper3_B_1 = 959) then 
		(idSuper3_B_2)
		 else
		 if ( idSuper3_B_1 = 956) then 
		(idSuper3_B_3)
		 else (idSuper3_B_1);


	-- set state as inactive 
	idSuper3_Super3_2
	 = if (not isInner) then 0 else idSuper3_Super3_1;

	idSuper3_B_5 
	= 0;
	

	(idSuper3_B, idSuper3_Super3) 
	= (idSuper3_B_5, idSuper3_Super3_2);
	

tel






-- Entry action for state :Super3_D
node Super3_D_en(idSuper3_Super3_1:int;
	s_1:real;
	isInner:bool)

returns (idSuper3_Super3:int;
	s:real);


var 	idSuper3_Super3_2:int;
	s_2:real;


let



	-- set state as active 
	idSuper3_Super3_2 
	= 960;
	

	s_2 
	= if (not isInner) then 1.
	 else s_1;
	

	(idSuper3_Super3, s) 
	= (idSuper3_Super3_2, s_2);
	

tel





-- Exit action for state :Super3_D
node Super3_D_ex(idSuper3_Super3_1:int;
	isInner:bool)

returns (idSuper3_Super3:int);


var 	idSuper3_Super3_2:int;


let



	-- set state as inactive 
	idSuper3_Super3_2
	 = if (not isInner) then 0 else idSuper3_Super3_1;


	(idSuper3_Super3) 
	= (idSuper3_Super3_2);
	

tel






-- Entry action for state :Super3_A
node Super3_A_en(idSuper3_Super3_1:int;
	s_1:real;
	isInner:bool)

returns (idSuper3_Super3:int;
	s:real);


var 	idSuper3_Super3_2:int;
	s_2:real;


let



	-- set state as active 
	idSuper3_Super3_2 
	= 955;
	

	s_2 
	= if (not isInner) then 2.
	 else s_1;
	

	(idSuper3_Super3, s) 
	= (idSuper3_Super3_2, s_2);
	

tel





-- Exit action for state :Super3_A
node Super3_A_ex(idSuper3_Super3_1:int;
	isInner:bool)

returns (idSuper3_Super3:int);


var 	idSuper3_Super3_2:int;


let



	-- set state as inactive 
	idSuper3_Super3_2
	 = if (not isInner) then 0 else idSuper3_Super3_1;


	(idSuper3_Super3) 
	= (idSuper3_Super3_2);
	

tel


--***************************************************State :Super3_B Automaton***************************************************

node Super3_B_node(idSuper3_B_1:int;
	s_1:real;
	E:bool;
	x:int;
	idSuper3_Super3_1:int)

returns (idSuper3_B:int;
	s:real;
	idSuper3_Super3:int);


let

	 automaton super3_b

	state POINTSuper3_B:
	unless (idSuper3_B_1=0) restart POINT__TO__B_B1_1



	unless (idSuper3_B_1=959) and E and ( x=3 or x=4 ) restart B_B2__TO__SUPER3_B_1



	unless (idSuper3_B_1=956) and E and ( x=2 ) restart B_B1__TO__SUPER3_A_1



	unless (idSuper3_B_1=956) and E and ( x<=3 ) restart B_B1__TO__SUPER3_SUPER3JUNCTION961_2



	unless (idSuper3_B_1=956) and E and ( x>3 ) restart B_B1__TO__SUPER3_SUPER3JUNCTION962_3



	unless (idSuper3_B_1=959) restart B_B2_IDL

	unless (idSuper3_B_1=956) restart B_B1_IDL

	let

		(idSuper3_B, s, idSuper3_Super3) 
	= (idSuper3_B_1, s_1, idSuper3_Super3_1);
	

	tel



	state POINT__TO__B_B1_1:

	 var 	idSuper3_B_2:int;
	s_2:real;
	let

		-- transition trace :
	--POINT__To__B_B1_1
		(idSuper3_B_2, s_2) 
	= B_B1_en(idSuper3_B_1, s_1, false);
		

	(idSuper3_B, s) 
	=  (idSuper3_B_2, s_2);

	--add unused variables
	(idSuper3_Super3) 
	= (idSuper3_Super3_1);
	

	tel

	until true restart POINTSuper3_B



	state B_B2__TO__SUPER3_B_1:

	 var 	idSuper3_B_2, idSuper3_B_3, idSuper3_B_4:int;
	s_2:real;
	idSuper3_Super3_2:int;
	let

		-- transition trace :
	--B_B2__To__Super3_B_1
		(idSuper3_B_2) 
	= B_B2_ex(idSuper3_B_1, false);
		

		idSuper3_B_3 
	= 0;
	
		(idSuper3_B_4, idSuper3_Super3_2, s_2) 
	= Super3_B_en(idSuper3_B_3, idSuper3_Super3_1, s_1, true);
		

	(idSuper3_B, s, idSuper3_Super3) 
	=  (idSuper3_B_4, s_2, idSuper3_Super3_2);


	tel

	until true restart POINTSuper3_B



	state B_B1__TO__SUPER3_A_1:

	 var 	idSuper3_B_2:int;
	s_2:real;
	idSuper3_Super3_2, idSuper3_Super3_3:int;
	let

		-- transition trace :
	--B_B1__To__Super3_A_1
		(idSuper3_B_2, idSuper3_Super3_2) 
	= Super3_B_ex(idSuper3_B_1, idSuper3_Super3_1, false);
		

		(idSuper3_Super3_3, s_2) 
	= Super3_A_en(idSuper3_Super3_2, s_1, false);
		

	(idSuper3_B, s, idSuper3_Super3) 
	=  (idSuper3_B_2, s_2, idSuper3_Super3_3);


	tel

	until true restart POINTSuper3_B



	state B_B1__TO__SUPER3_SUPER3JUNCTION961_2:

	 var 	idSuper3_B_2, idSuper3_B_3, idSuper3_B_4:int;
	s_2, s_3:real;
	idSuper3_Super3_2, idSuper3_Super3_3:int;
	let

		

-- transition trace :
	--B_B1__To__Junction961_2, Junction961__To__Super3_D_1
		(idSuper3_B_2, idSuper3_Super3_2) 
	= 
		 if (( x=1 )) then 
		Super3_B_ex(idSuper3_B_1, idSuper3_Super3_1, false)
		 else (idSuper3_B_1, idSuper3_Super3_1);
		

		(idSuper3_Super3_3, s_2) 
	= 
		 if (( x=1 )) then 
		Super3_D_en(idSuper3_Super3_2, s_1, false)
		 else (idSuper3_Super3_2, s_1);
		


-- transition trace :
	--B_B1__To__Junction961_2, Junction961__To__B_B2_2
		(idSuper3_B_3) 
	= 
		 if (( x=3 )) then 
		B_B1_ex(idSuper3_B_1, false)
		 else (idSuper3_B_1);
		

		(idSuper3_B_4, s_3) 
	= 
		 if (( x=3 )) then 
		B_B2_en(idSuper3_B_3, s_2, false)
		 else (idSuper3_B_3, s_2);
		

	(idSuper3_B, s, idSuper3_Super3) 
	= 
		 if (( x=1 )) then 
		(idSuper3_B_2, s_2, idSuper3_Super3_3)
		 else
		 if (( x=3 )) then 
		(idSuper3_B_4, s_3, idSuper3_Super3_3)
		 else (idSuper3_B_1, s_1, idSuper3_Super3_1);


	tel

	until true restart POINTSuper3_B



	state B_B1__TO__SUPER3_SUPER3JUNCTION962_3:

	 var 	idSuper3_B_2, idSuper3_B_3, idSuper3_B_4:int;
	s_2, s_3:real;
	idSuper3_Super3_2, idSuper3_Super3_3:int;
	let

		

-- transition trace :
	--B_B1__To__Junction962_3, Junction962__To__Super3_C_1
		(idSuper3_B_2, idSuper3_Super3_2) 
	= 
		 if (( x=5 )) then 
		Super3_B_ex(idSuper3_B_1, idSuper3_Super3_1, false)
		 else (idSuper3_B_1, idSuper3_Super3_1);
		

		(idSuper3_Super3_3, s_2) 
	= 
		 if (( x=5 )) then 
		Super3_C_en(idSuper3_Super3_2, s_1, false)
		 else (idSuper3_Super3_2, s_1);
		


-- transition trace :
	--B_B1__To__Junction962_3, Junction962__To__B_B2_2
		(idSuper3_B_3) 
	= 
		 if (( x=4 )) then 
		B_B1_ex(idSuper3_B_1, false)
		 else (idSuper3_B_1);
		

		(idSuper3_B_4, s_3) 
	= 
		 if (( x=4 )) then 
		B_B2_en(idSuper3_B_3, s_2, false)
		 else (idSuper3_B_3, s_2);
		

	(idSuper3_B, s, idSuper3_Super3) 
	= 
		 if (( x=5 )) then 
		(idSuper3_B_2, s_2, idSuper3_Super3_3)
		 else
		 if (( x=4 )) then 
		(idSuper3_B_4, s_3, idSuper3_Super3_3)
		 else (idSuper3_B_1, s_1, idSuper3_Super3_1);


	tel

	until true restart POINTSuper3_B



	state B_B2_IDL:

	 	let

		

	(idSuper3_B, s, idSuper3_Super3) 
	= (idSuper3_B_1, s_1, idSuper3_Super3_1);
	

	tel

	until true restart POINTSuper3_B



	state B_B1_IDL:

	 	let

		

	(idSuper3_B, s, idSuper3_Super3) 
	= (idSuper3_B_1, s_1, idSuper3_Super3_1);
	

	tel

	until true restart POINTSuper3_B



tel


--***************************************************State :Super3_Super3 Automaton***************************************************

node Super3_Super3_node(idSuper3_Super3_1:int;
	s_1:real;
	E:bool;
	x:int;
	idSuper3_B_1:int)

returns (idSuper3_Super3:int;
	s:real;
	idSuper3_B:int);


let

	 automaton super3_super3

	state POINTSuper3_Super3:
	unless (idSuper3_Super3_1=0) restart POINT__TO__SUPER3_A_1



	unless (idSuper3_Super3_1=955) and E restart SUPER3_A__TO__SUPER3_SUPER3JUNCTION972_1



	unless (idSuper3_Super3_1=957) and E and ( x=0 or x=5 ) restart SUPER3_C__TO__SUPER3_A_1



	unless (idSuper3_Super3_1=958) and E and ( x=0 ) restart SUPER3_B__TO__SUPER3_C_1



	unless (idSuper3_Super3_1=960) and E and ( x=0 ) restart SUPER3_D__TO__SUPER3_B_1



	unless (idSuper3_Super3_1=960) and E and ( x=1 ) restart SUPER3_D__TO__SUPER3_A_2



	unless (idSuper3_Super3_1=955) restart SUPER3_A_IDL

	unless (idSuper3_Super3_1=957) restart SUPER3_C_IDL

	unless (idSuper3_Super3_1=958) restart SUPER3_B_IDL

	unless (idSuper3_Super3_1=960) restart SUPER3_D_IDL

	let

		(idSuper3_Super3, s, idSuper3_B) 
	= (idSuper3_Super3_1, s_1, idSuper3_B_1);
	

	tel



	state POINT__TO__SUPER3_A_1:

	 var 	idSuper3_Super3_2:int;
	s_2:real;
	let

		-- transition trace :
	--POINT__To__Super3_A_1
		(idSuper3_Super3_2, s_2) 
	= Super3_A_en(idSuper3_Super3_1, s_1, false);
		

	(idSuper3_Super3, s) 
	=  (idSuper3_Super3_2, s_2);

	--add unused variables
	(idSuper3_B) 
	= (idSuper3_B_1);
	

	tel

	until true restart POINTSuper3_Super3



	state SUPER3_A__TO__SUPER3_SUPER3JUNCTION972_1:

	 var 	idSuper3_Super3_2, idSuper3_Super3_3, idSuper3_Super3_4, idSuper3_Super3_5:int;
	s_2, s_3:real;
	idSuper3_B_2, idSuper3_B_3:int;
	let

		

-- transition trace :
	--Super3_A__To__Junction972_1, Junction972__To__B_B1_1
		(idSuper3_Super3_2) 
	= 
		 if (( x>0 )) then 
		Super3_A_ex(idSuper3_Super3_1, false)
		 else (idSuper3_Super3_1);
		

		idSuper3_B_2 
	= 956;
	
		(idSuper3_B_3, idSuper3_Super3_3, s_2) 
	= 
		 if (( x>0 )) then 
		Super3_B_en(idSuper3_B_2, idSuper3_Super3_2, s_1, false)
		 else (idSuper3_B_2, idSuper3_Super3_2, s_1);
		


-- transition trace :
	--Super3_A__To__Junction972_1, Junction972__To__Super3_D_2
		(idSuper3_Super3_4) 
	= 
		 if (( x=0 )) then 
		Super3_A_ex(idSuper3_Super3_1, false)
		 else (idSuper3_Super3_1);
		

		(idSuper3_Super3_5, s_3) 
	= 
		 if (( x=0 )) then 
		Super3_D_en(idSuper3_Super3_4, s_2, false)
		 else (idSuper3_Super3_4, s_2);
		

	(idSuper3_Super3, s, idSuper3_B) 
	= 
		 if (( x>0 )) then 
		(idSuper3_Super3_3, s_2, idSuper3_B_3)
		 else
		 if (( x=0 )) then 
		(idSuper3_Super3_5, s_3, idSuper3_B_3)
		 else (idSuper3_Super3_1, s_1, idSuper3_B_1);


	tel

	until true restart POINTSuper3_Super3



	state SUPER3_C__TO__SUPER3_A_1:

	 var 	idSuper3_Super3_2, idSuper3_Super3_3:int;
	s_2:real;
	let

		-- transition trace :
	--Super3_C__To__Super3_A_1
		(idSuper3_Super3_2) 
	= Super3_C_ex(idSuper3_Super3_1, false);
		

		(idSuper3_Super3_3, s_2) 
	= Super3_A_en(idSuper3_Super3_2, s_1, false);
		

	(idSuper3_Super3, s, idSuper3_B) 
	=  (idSuper3_Super3_3, s_2, idSuper3_B_1);


	tel

	until true restart POINTSuper3_Super3



	state SUPER3_B__TO__SUPER3_C_1:

	 var 	idSuper3_Super3_2, idSuper3_Super3_3:int;
	s_2:real;
	idSuper3_B_2:int;
	let

		-- transition trace :
	--Super3_B__To__Super3_C_1
		(idSuper3_B_2, idSuper3_Super3_2) 
	= Super3_B_ex(idSuper3_B_1, idSuper3_Super3_1, false);
		

		(idSuper3_Super3_3, s_2) 
	= Super3_C_en(idSuper3_Super3_2, s_1, false);
		

	(idSuper3_Super3, s, idSuper3_B) 
	=  (idSuper3_Super3_3, s_2, idSuper3_B_2);


	tel

	until true restart POINTSuper3_Super3



	state SUPER3_D__TO__SUPER3_B_1:

	 var 	idSuper3_Super3_2, idSuper3_Super3_3:int;
	s_2:real;
	idSuper3_B_2:int;
	let

		-- transition trace :
	--Super3_D__To__Super3_B_1
		(idSuper3_Super3_2) 
	= Super3_D_ex(idSuper3_Super3_1, false);
		

		(idSuper3_B_2, idSuper3_Super3_3, s_2) 
	= Super3_B_en(idSuper3_B_1, idSuper3_Super3_2, s_1, false);
		

	(idSuper3_Super3, s, idSuper3_B) 
	=  (idSuper3_Super3_3, s_2, idSuper3_B_2);


	tel

	until true restart POINTSuper3_Super3



	state SUPER3_D__TO__SUPER3_A_2:

	 var 	idSuper3_Super3_2, idSuper3_Super3_3:int;
	s_2:real;
	let

		-- transition trace :
	--Super3_D__To__Super3_A_2
		(idSuper3_Super3_2) 
	= Super3_D_ex(idSuper3_Super3_1, false);
		

		(idSuper3_Super3_3, s_2) 
	= Super3_A_en(idSuper3_Super3_2, s_1, false);
		

	(idSuper3_Super3, s, idSuper3_B) 
	=  (idSuper3_Super3_3, s_2, idSuper3_B_1);


	tel

	until true restart POINTSuper3_Super3



	state SUPER3_A_IDL:

	 	let

		

	(idSuper3_Super3, s, idSuper3_B) 
	= (idSuper3_Super3_1, s_1, idSuper3_B_1);
	

	tel

	until true restart POINTSuper3_Super3



	state SUPER3_C_IDL:

	 	let

		

	(idSuper3_Super3, s, idSuper3_B) 
	= (idSuper3_Super3_1, s_1, idSuper3_B_1);
	

	tel

	until true restart POINTSuper3_Super3



	state SUPER3_B_IDL:

	 var 	idSuper3_Super3_2:int;
	s_2:real;
	idSuper3_B_2:int;
	let

		
	(idSuper3_B_2, s_2, idSuper3_Super3_2) 
	= Super3_B_node(idSuper3_B_1, s_1, E, x, idSuper3_Super3_1);

		


	(idSuper3_Super3, s, idSuper3_B) 
	= (idSuper3_Super3_2, s_2, idSuper3_B_2);
	

	tel

	until true restart POINTSuper3_Super3



	state SUPER3_D_IDL:

	 	let

		

	(idSuper3_Super3, s, idSuper3_B) 
	= (idSuper3_Super3_1, s_1, idSuper3_B_1);
	

	tel

	until true restart POINTSuper3_Super3



tel


--***************************************************State :Super3_Super3 Automaton***************************************************

node Super3_Super3(x:int;
	E:bool)

returns (s:real);


var s_1: real;

	idSuper3_Super3, idSuper3_Super3_1: int;

	idSuper3_B, idSuper3_B_1: int;

	let

	s_1 = 0.0 -> pre s;

	idSuper3_Super3_1 = 0 -> pre idSuper3_Super3;

	idSuper3_B_1 = 0 -> pre idSuper3_B;

	



	(idSuper3_Super3, s, idSuper3_B)
	 = 

	 if E then Super3_Super3_node(idSuper3_Super3_1, s_1, E, x, idSuper3_B_1)

	 else (idSuper3_Super3_1, s_1, idSuper3_B_1);

	


--unused outputs
	

tel



node Super3 (x_1_1 : int; E_1_1 : real)
returns (state_1_1 : real); 
var
	Super3_1_1 : real;
	E_1_1_event: bool;
let 
	E_1_1_event = false -> ((pre(E_1_1) > 0.0 and E_1_1 <= 0.0) or (pre(E_1_1) <= 0.0 and E_1_1 > 0.0));
	Super3_1_1 =  Super3_Super3(x_1_1, E_1_1_event);
	state_1_1 = Super3_1_1;
tel

