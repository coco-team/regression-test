-- This file has been generated by cocoSim


-- System nodes

















-- Entry action for state :T2_C
node T2_C_en(idIek1_T2_1:int;
	sT2_1:real;
	isInner:bool)

returns (idIek1_T2:int;
	sT2:real);


var 	idIek1_T2_2:int;
	sT2_2:real;


let



	-- set state as active 
	idIek1_T2_2 
	= 1100;
	

	sT2_2 
	= if (not isInner) then 1.
	 else sT2_1;
	

	(idIek1_T2, sT2) 
	= (idIek1_T2_2, sT2_2);
	

tel





-- Exit action for state :T2_C
node T2_C_ex(idIek1_T2_1:int;
	isInner:bool)

returns (idIek1_T2:int);


var 	idIek1_T2_2:int;


let



	-- set state as inactive 
	idIek1_T2_2
	 = if (not isInner) then 0 else idIek1_T2_1;


	(idIek1_T2) 
	= (idIek1_T2_1);
	

tel






-- Entry action for state :T2_D
node T2_D_en(idIek1_T2_1:int;
	sT2_1:real;
	isInner:bool)

returns (idIek1_T2:int;
	sT2:real);


var 	idIek1_T2_2:int;
	sT2_2:real;


let



	-- set state as active 
	idIek1_T2_2 
	= 1101;
	

	sT2_2 
	= if (not isInner) then 2.
	 else sT2_1;
	

	(idIek1_T2, sT2) 
	= (idIek1_T2_2, sT2_2);
	

tel





-- Exit action for state :T2_D
node T2_D_ex(idIek1_T2_1:int;
	isInner:bool)

returns (idIek1_T2:int);


var 	idIek1_T2_2:int;


let



	-- set state as inactive 
	idIek1_T2_2
	 = if (not isInner) then 0 else idIek1_T2_1;


	(idIek1_T2) 
	= (idIek1_T2_1);
	

tel






-- Entry action for state :Iek1_T2
node Iek1_T2_en(idIek1_T2_1:int;
	idIek1_Iek1_1:int;
	sT2_1:real;
	isInner:bool)

returns (idIek1_T2:int;
	idIek1_Iek1:int;
	sT2:real);


var 	idIek1_T2_2, idIek1_T2_3, idIek1_T2_4, idIek1_T2_5, idIek1_T2_6:int;
	idIek1_Iek1_2, idIek1_Iek1_3, idIek1_Iek1_4:int;
	sT2_2, sT2_3, sT2_4, sT2_5, sT2_6:real;


let



	-- set state as active 
	idIek1_Iek1_2 
	= 1099;
	

	
-- transition trace :
	--POINT__To__T2_C_1
		(idIek1_T2_2, sT2_2) 
	= T2_C_en(idIek1_T2_1, sT2_1, false);
		

	(idIek1_T2_3, idIek1_Iek1_3, sT2_3) 
	= 

	if ( idIek1_T2_1 = 0) then

	 (idIek1_T2_2, idIek1_Iek1_2, sT2_2)

	 else(idIek1_T2_1, idIek1_Iek1_2, sT2_1);

	

	(idIek1_T2_4, sT2_4) 
	= 
	if ( idIek1_T2_1 = 1100) then
	T2_C_en(idIek1_T2_1, sT2_1, false)
	 else (idIek1_T2_1, sT2_1);

	

	(idIek1_T2_5, sT2_5) 
	= 
	if ( idIek1_T2_1 = 1101) then
	T2_D_en(idIek1_T2_1, sT2_1, false)
	 else (idIek1_T2_1, sT2_1);

	

	(idIek1_T2_6, idIek1_Iek1_4, sT2_6) 
	= 
		 if ( idIek1_T2_1 = 0) then 
		(idIek1_T2_3, idIek1_Iek1_3, sT2_3)
		 else
		 if ( idIek1_T2_1 = 1100) then 
		(idIek1_T2_4, idIek1_Iek1_3, sT2_4)
		 else
		 if ( idIek1_T2_1 = 1101) then 
		(idIek1_T2_5, idIek1_Iek1_3, sT2_5)
		 else (idIek1_T2_1, idIek1_Iek1_2, sT2_1);


	(idIek1_T2, idIek1_Iek1, sT2) 
	= (idIek1_T2_6, idIek1_Iek1_4, sT2_6);
	

tel





-- Exit action for state :Iek1_T2
node Iek1_T2_ex(idIek1_T2_1:int;
	idIek1_Iek1_1:int;
	isInner:bool)

returns (idIek1_T2:int;
	idIek1_Iek1:int);


var 	idIek1_T2_2, idIek1_T2_3, idIek1_T2_4, idIek1_T2_5:int;
	idIek1_Iek1_2:int;


let



	
	(idIek1_T2_2) 
	= 
	if ( idIek1_T2_1 = 1100) then
	T2_C_ex(idIek1_T2_1, false)
	 else (idIek1_T2_1);

	

	(idIek1_T2_3) 
	= 
	if ( idIek1_T2_1 = 1101) then
	T2_D_ex(idIek1_T2_1, false)
	 else (idIek1_T2_1);

	

	(idIek1_T2_4) 
	= 
		 if ( idIek1_T2_1 = 1100) then 
		(idIek1_T2_2)
		 else
		 if ( idIek1_T2_1 = 1101) then 
		(idIek1_T2_3)
		 else (idIek1_T2_1);


	-- set state as inactive 
	idIek1_Iek1_2
	 = if (not isInner) then 0 else idIek1_Iek1_1;

	idIek1_T2_5 
	= 0;
	

	(idIek1_T2, idIek1_Iek1) 
	= (idIek1_T2_5, idIek1_Iek1_1);
	

tel






-- Entry action for state :T1_A
node T1_A_en(idIek1_T1_1:int;
	sT1_1:real;
	isInner:bool)

returns (idIek1_T1:int;
	sT1:real);


var 	idIek1_T1_2:int;
	sT1_2:real;


let



	-- set state as active 
	idIek1_T1_2 
	= 1098;
	

	sT1_2 
	= if (not isInner) then 1.
	 else sT1_1;
	

	(idIek1_T1, sT1) 
	= (idIek1_T1_2, sT1_2);
	

tel





-- Exit action for state :T1_A
node T1_A_ex(idIek1_T1_1:int;
	isInner:bool)

returns (idIek1_T1:int);


var 	idIek1_T1_2:int;


let



	-- set state as inactive 
	idIek1_T1_2
	 = if (not isInner) then 0 else idIek1_T1_1;


	(idIek1_T1) 
	= (idIek1_T1_1);
	

tel






-- Entry action for state :T1_B
node T1_B_en(idIek1_T1_1:int;
	sT1_1:real;
	isInner:bool)

returns (idIek1_T1:int;
	sT1:real);


var 	idIek1_T1_2:int;
	sT1_2:real;


let



	-- set state as active 
	idIek1_T1_2 
	= 1097;
	

	sT1_2 
	= if (not isInner) then 2.
	 else sT1_1;
	

	(idIek1_T1, sT1) 
	= (idIek1_T1_2, sT1_2);
	

tel





-- Exit action for state :T1_B
node T1_B_ex(idIek1_T1_1:int;
	isInner:bool)

returns (idIek1_T1:int);


var 	idIek1_T1_2:int;


let



	-- set state as inactive 
	idIek1_T1_2
	 = if (not isInner) then 0 else idIek1_T1_1;


	(idIek1_T1) 
	= (idIek1_T1_1);
	

tel






-- Entry action for state :Iek1_T1
node Iek1_T1_en(idIek1_T1_1:int;
	idIek1_Iek1_1:int;
	sT1_1:real;
	isInner:bool)

returns (idIek1_T1:int;
	idIek1_Iek1:int;
	sT1:real);


var 	idIek1_T1_2, idIek1_T1_3, idIek1_T1_4, idIek1_T1_5, idIek1_T1_6:int;
	idIek1_Iek1_2, idIek1_Iek1_3, idIek1_Iek1_4:int;
	sT1_2, sT1_3, sT1_4, sT1_5, sT1_6:real;


let



	-- set state as active 
	idIek1_Iek1_2 
	= 1096;
	

	
-- transition trace :
	--POINT__To__T1_A_1
		(idIek1_T1_2, sT1_2) 
	= T1_A_en(idIek1_T1_1, sT1_1, false);
		

	(idIek1_T1_3, idIek1_Iek1_3, sT1_3) 
	= 

	if ( idIek1_T1_1 = 0) then

	 (idIek1_T1_2, idIek1_Iek1_2, sT1_2)

	 else(idIek1_T1_1, idIek1_Iek1_2, sT1_1);

	

	(idIek1_T1_4, sT1_4) 
	= 
	if ( idIek1_T1_1 = 1098) then
	T1_A_en(idIek1_T1_1, sT1_1, false)
	 else (idIek1_T1_1, sT1_1);

	

	(idIek1_T1_5, sT1_5) 
	= 
	if ( idIek1_T1_1 = 1097) then
	T1_B_en(idIek1_T1_1, sT1_1, false)
	 else (idIek1_T1_1, sT1_1);

	

	(idIek1_T1_6, idIek1_Iek1_4, sT1_6) 
	= 
		 if ( idIek1_T1_1 = 0) then 
		(idIek1_T1_3, idIek1_Iek1_3, sT1_3)
		 else
		 if ( idIek1_T1_1 = 1098) then 
		(idIek1_T1_4, idIek1_Iek1_3, sT1_4)
		 else
		 if ( idIek1_T1_1 = 1097) then 
		(idIek1_T1_5, idIek1_Iek1_3, sT1_5)
		 else (idIek1_T1_1, idIek1_Iek1_2, sT1_1);


	(idIek1_T1, idIek1_Iek1, sT1) 
	= (idIek1_T1_6, idIek1_Iek1_4, sT1_6);
	

tel





-- Exit action for state :Iek1_T1
node Iek1_T1_ex(idIek1_T1_1:int;
	idIek1_Iek1_1:int;
	isInner:bool)

returns (idIek1_T1:int;
	idIek1_Iek1:int);


var 	idIek1_T1_2, idIek1_T1_3, idIek1_T1_4, idIek1_T1_5:int;
	idIek1_Iek1_2:int;


let



	
	(idIek1_T1_2) 
	= 
	if ( idIek1_T1_1 = 1098) then
	T1_A_ex(idIek1_T1_1, false)
	 else (idIek1_T1_1);

	

	(idIek1_T1_3) 
	= 
	if ( idIek1_T1_1 = 1097) then
	T1_B_ex(idIek1_T1_1, false)
	 else (idIek1_T1_1);

	

	(idIek1_T1_4) 
	= 
		 if ( idIek1_T1_1 = 1098) then 
		(idIek1_T1_2)
		 else
		 if ( idIek1_T1_1 = 1097) then 
		(idIek1_T1_3)
		 else (idIek1_T1_1);


	-- set state as inactive 
	idIek1_Iek1_2
	 = if (not isInner) then 0 else idIek1_Iek1_1;

	idIek1_T1_5 
	= 0;
	

	(idIek1_T1, idIek1_Iek1) 
	= (idIek1_T1_5, idIek1_Iek1_1);
	

tel






-- Entry action for state :T3_d
node T3_d_en(idIek1_T3_1:int;
	sT3_1:real;
	isInner:bool)

returns (idIek1_T3:int;
	sT3:real);


var 	idIek1_T3_2:int;
	sT3_2:real;


let



	-- set state as active 
	idIek1_T3_2 
	= 1106;
	

	sT3_2 
	= if (not isInner) then 4.
	 else sT3_1;
	

	(idIek1_T3, sT3) 
	= (idIek1_T3_2, sT3_2);
	

tel





-- Exit action for state :T3_d
node T3_d_ex(idIek1_T3_1:int;
	isInner:bool)

returns (idIek1_T3:int);


var 	idIek1_T3_2:int;


let



	-- set state as inactive 
	idIek1_T3_2
	 = if (not isInner) then 0 else idIek1_T3_1;


	(idIek1_T3) 
	= (idIek1_T3_1);
	

tel






-- Entry action for state :T3_c
node T3_c_en(idIek1_T3_1:int;
	sT3_1:real;
	isInner:bool)

returns (idIek1_T3:int;
	sT3:real);


var 	idIek1_T3_2:int;
	sT3_2:real;


let



	-- set state as active 
	idIek1_T3_2 
	= 1104;
	

	sT3_2 
	= if (not isInner) then 3.
	 else sT3_1;
	

	(idIek1_T3, sT3) 
	= (idIek1_T3_2, sT3_2);
	

tel





-- Exit action for state :T3_c
node T3_c_ex(idIek1_T3_1:int;
	isInner:bool)

returns (idIek1_T3:int);


var 	idIek1_T3_2:int;


let



	-- set state as inactive 
	idIek1_T3_2
	 = if (not isInner) then 0 else idIek1_T3_1;


	(idIek1_T3) 
	= (idIek1_T3_1);
	

tel






-- Entry action for state :T3_a
node T3_a_en(idIek1_T3_1:int;
	sT3_1:real;
	isInner:bool)

returns (idIek1_T3:int;
	sT3:real);


var 	idIek1_T3_2:int;
	sT3_2:real;


let



	-- set state as active 
	idIek1_T3_2 
	= 1103;
	

	sT3_2 
	= if (not isInner) then 1.
	 else sT3_1;
	

	(idIek1_T3, sT3) 
	= (idIek1_T3_2, sT3_2);
	

tel





-- Exit action for state :T3_a
node T3_a_ex(idIek1_T3_1:int;
	isInner:bool)

returns (idIek1_T3:int);


var 	idIek1_T3_2:int;


let



	-- set state as inactive 
	idIek1_T3_2
	 = if (not isInner) then 0 else idIek1_T3_1;


	(idIek1_T3) 
	= (idIek1_T3_1);
	

tel






-- Entry action for state :T3_b
node T3_b_en(idIek1_T3_1:int;
	sT3_1:real;
	isInner:bool)

returns (idIek1_T3:int;
	sT3:real);


var 	idIek1_T3_2:int;
	sT3_2:real;


let



	-- set state as active 
	idIek1_T3_2 
	= 1105;
	

	sT3_2 
	= if (not isInner) then 2.
	 else sT3_1;
	

	(idIek1_T3, sT3) 
	= (idIek1_T3_2, sT3_2);
	

tel





-- Exit action for state :T3_b
node T3_b_ex(idIek1_T3_1:int;
	isInner:bool)

returns (idIek1_T3:int);


var 	idIek1_T3_2:int;


let



	-- set state as inactive 
	idIek1_T3_2
	 = if (not isInner) then 0 else idIek1_T3_1;


	(idIek1_T3) 
	= (idIek1_T3_1);
	

tel






-- Entry action for state :Iek1_T3
node Iek1_T3_en(idIek1_T3_1:int;
	idIek1_Iek1_1:int;
	sT3_1:real;
	isInner:bool)

returns (idIek1_T3:int;
	idIek1_Iek1:int;
	sT3:real);


var 	idIek1_T3_2, idIek1_T3_3, idIek1_T3_4, idIek1_T3_5, idIek1_T3_6, idIek1_T3_7, idIek1_T3_8:int;
	idIek1_Iek1_2, idIek1_Iek1_3, idIek1_Iek1_4:int;
	sT3_2, sT3_3, sT3_4, sT3_5, sT3_6, sT3_7, sT3_8:real;


let



	-- set state as active 
	idIek1_Iek1_2 
	= 1102;
	

	
-- transition trace :
	--POINT__To__T3_a_1
		(idIek1_T3_2, sT3_2) 
	= T3_a_en(idIek1_T3_1, sT3_1, false);
		

	(idIek1_T3_3, idIek1_Iek1_3, sT3_3) 
	= 

	if ( idIek1_T3_1 = 0) then

	 (idIek1_T3_2, idIek1_Iek1_2, sT3_2)

	 else(idIek1_T3_1, idIek1_Iek1_2, sT3_1);

	

	(idIek1_T3_4, sT3_4) 
	= 
	if ( idIek1_T3_1 = 1103) then
	T3_a_en(idIek1_T3_1, sT3_1, false)
	 else (idIek1_T3_1, sT3_1);

	

	(idIek1_T3_5, sT3_5) 
	= 
	if ( idIek1_T3_1 = 1104) then
	T3_c_en(idIek1_T3_1, sT3_1, false)
	 else (idIek1_T3_1, sT3_1);

	

	(idIek1_T3_6, sT3_6) 
	= 
	if ( idIek1_T3_1 = 1106) then
	T3_d_en(idIek1_T3_1, sT3_1, false)
	 else (idIek1_T3_1, sT3_1);

	

	(idIek1_T3_7, sT3_7) 
	= 
	if ( idIek1_T3_1 = 1105) then
	T3_b_en(idIek1_T3_1, sT3_1, false)
	 else (idIek1_T3_1, sT3_1);

	

	(idIek1_T3_8, idIek1_Iek1_4, sT3_8) 
	= 
		 if ( idIek1_T3_1 = 0) then 
		(idIek1_T3_3, idIek1_Iek1_3, sT3_3)
		 else
		 if ( idIek1_T3_1 = 1103) then 
		(idIek1_T3_4, idIek1_Iek1_3, sT3_4)
		 else
		 if ( idIek1_T3_1 = 1104) then 
		(idIek1_T3_5, idIek1_Iek1_3, sT3_5)
		 else
		 if ( idIek1_T3_1 = 1106) then 
		(idIek1_T3_6, idIek1_Iek1_3, sT3_6)
		 else
		 if ( idIek1_T3_1 = 1105) then 
		(idIek1_T3_7, idIek1_Iek1_3, sT3_7)
		 else (idIek1_T3_1, idIek1_Iek1_2, sT3_1);


	(idIek1_T3, idIek1_Iek1, sT3) 
	= (idIek1_T3_8, idIek1_Iek1_4, sT3_8);
	

tel





-- Exit action for state :Iek1_T3
node Iek1_T3_ex(idIek1_T3_1:int;
	idIek1_Iek1_1:int;
	isInner:bool)

returns (idIek1_T3:int;
	idIek1_Iek1:int);


var 	idIek1_T3_2, idIek1_T3_3, idIek1_T3_4, idIek1_T3_5, idIek1_T3_6, idIek1_T3_7:int;
	idIek1_Iek1_2:int;


let



	
	(idIek1_T3_2) 
	= 
	if ( idIek1_T3_1 = 1103) then
	T3_a_ex(idIek1_T3_1, false)
	 else (idIek1_T3_1);

	

	(idIek1_T3_3) 
	= 
	if ( idIek1_T3_1 = 1104) then
	T3_c_ex(idIek1_T3_1, false)
	 else (idIek1_T3_1);

	

	(idIek1_T3_4) 
	= 
	if ( idIek1_T3_1 = 1106) then
	T3_d_ex(idIek1_T3_1, false)
	 else (idIek1_T3_1);

	

	(idIek1_T3_5) 
	= 
	if ( idIek1_T3_1 = 1105) then
	T3_b_ex(idIek1_T3_1, false)
	 else (idIek1_T3_1);

	

	(idIek1_T3_6) 
	= 
		 if ( idIek1_T3_1 = 1103) then 
		(idIek1_T3_2)
		 else
		 if ( idIek1_T3_1 = 1104) then 
		(idIek1_T3_3)
		 else
		 if ( idIek1_T3_1 = 1106) then 
		(idIek1_T3_4)
		 else
		 if ( idIek1_T3_1 = 1105) then 
		(idIek1_T3_5)
		 else (idIek1_T3_1);


	-- set state as inactive 
	idIek1_Iek1_2
	 = if (not isInner) then 0 else idIek1_Iek1_1;

	idIek1_T3_7 
	= 0;
	

	(idIek1_T3, idIek1_Iek1) 
	= (idIek1_T3_7, idIek1_Iek1_1);
	

tel


--***************************************************State :Iek1_T2 Automaton***************************************************

node Iek1_T2_node(idIek1_T2_1:int;
	sT2_1:real;
	F:bool)

returns (idIek1_T2:int;
	sT2:real);


let

	 automaton iek1_t2

	state POINTIek1_T2:
	unless (idIek1_T2_1=0) restart POINT__TO__T2_C_1



	unless (idIek1_T2_1=1100) and F restart T2_C__TO__T2_D_1



	unless (idIek1_T2_1=1101) and F restart T2_D__TO__T2_C_1



	unless (idIek1_T2_1=1100) restart T2_C_IDL

	unless (idIek1_T2_1=1101) restart T2_D_IDL

	let

		(idIek1_T2, sT2) 
	= (idIek1_T2_1, sT2_1);
	

	tel



	state POINT__TO__T2_C_1:

	 var 	idIek1_T2_2:int;
	sT2_2:real;
	let

		-- transition trace :
	--POINT__To__T2_C_1
		(idIek1_T2_2, sT2_2) 
	= T2_C_en(idIek1_T2_1, sT2_1, false);
		

	(idIek1_T2, sT2) 
	=  (idIek1_T2_2, sT2_2);


	tel

	until true restart POINTIek1_T2



	state T2_C__TO__T2_D_1:

	 var 	idIek1_T2_2, idIek1_T2_3:int;
	sT2_2:real;
	let

		-- transition trace :
	--T2_C__To__T2_D_1
		(idIek1_T2_2) 
	= T2_C_ex(idIek1_T2_1, false);
		

		(idIek1_T2_3, sT2_2) 
	= T2_D_en(idIek1_T2_2, sT2_1, false);
		

	(idIek1_T2, sT2) 
	=  (idIek1_T2_3, sT2_2);


	tel

	until true restart POINTIek1_T2



	state T2_D__TO__T2_C_1:

	 var 	idIek1_T2_2, idIek1_T2_3:int;
	sT2_2:real;
	let

		-- transition trace :
	--T2_D__To__T2_C_1
		(idIek1_T2_2) 
	= T2_D_ex(idIek1_T2_1, false);
		

		(idIek1_T2_3, sT2_2) 
	= T2_C_en(idIek1_T2_2, sT2_1, false);
		

	(idIek1_T2, sT2) 
	=  (idIek1_T2_3, sT2_2);


	tel

	until true restart POINTIek1_T2



	state T2_C_IDL:

	 	let

		

	(idIek1_T2, sT2) 
	= (idIek1_T2_1, sT2_1);
	

	tel

	until true restart POINTIek1_T2



	state T2_D_IDL:

	 	let

		

	(idIek1_T2, sT2) 
	= (idIek1_T2_1, sT2_1);
	

	tel

	until true restart POINTIek1_T2



tel


--***************************************************State :Iek1_T1 Automaton***************************************************

node Iek1_T1_node(idIek1_T1_1:int;
	sT1_1:real;
	E:bool)

returns (idIek1_T1:int;
	sT1:real);


let

	 automaton iek1_t1

	state POINTIek1_T1:
	unless (idIek1_T1_1=0) restart POINT__TO__T1_A_1



	unless (idIek1_T1_1=1098) and E restart T1_A__TO__T1_B_1



	unless (idIek1_T1_1=1097) and E restart T1_B__TO__T1_A_1



	unless (idIek1_T1_1=1098) restart T1_A_IDL

	unless (idIek1_T1_1=1097) restart T1_B_IDL

	let

		(idIek1_T1, sT1) 
	= (idIek1_T1_1, sT1_1);
	

	tel



	state POINT__TO__T1_A_1:

	 var 	idIek1_T1_2:int;
	sT1_2:real;
	let

		-- transition trace :
	--POINT__To__T1_A_1
		(idIek1_T1_2, sT1_2) 
	= T1_A_en(idIek1_T1_1, sT1_1, false);
		

	(idIek1_T1, sT1) 
	=  (idIek1_T1_2, sT1_2);


	tel

	until true restart POINTIek1_T1



	state T1_A__TO__T1_B_1:

	 var 	idIek1_T1_2, idIek1_T1_3:int;
	sT1_2:real;
	let

		-- transition trace :
	--T1_A__To__T1_B_1
		(idIek1_T1_2) 
	= T1_A_ex(idIek1_T1_1, false);
		

		(idIek1_T1_3, sT1_2) 
	= T1_B_en(idIek1_T1_2, sT1_1, false);
		

	(idIek1_T1, sT1) 
	=  (idIek1_T1_3, sT1_2);


	tel

	until true restart POINTIek1_T1



	state T1_B__TO__T1_A_1:

	 var 	idIek1_T1_2, idIek1_T1_3:int;
	sT1_2:real;
	let

		-- transition trace :
	--T1_B__To__T1_A_1
		(idIek1_T1_2) 
	= T1_B_ex(idIek1_T1_1, false);
		

		(idIek1_T1_3, sT1_2) 
	= T1_A_en(idIek1_T1_2, sT1_1, false);
		

	(idIek1_T1, sT1) 
	=  (idIek1_T1_3, sT1_2);


	tel

	until true restart POINTIek1_T1



	state T1_A_IDL:

	 	let

		

	(idIek1_T1, sT1) 
	= (idIek1_T1_1, sT1_1);
	

	tel

	until true restart POINTIek1_T1



	state T1_B_IDL:

	 	let

		

	(idIek1_T1, sT1) 
	= (idIek1_T1_1, sT1_1);
	

	tel

	until true restart POINTIek1_T1



tel


--***************************************************State :Iek1_T3 Automaton***************************************************

node Iek1_T3_node(idIek1_T3_1:int;
	sT3_1:real;
	idIek1_T1_1:int;
	idIek1_T2_1:int)

returns (idIek1_T3:int;
	sT3:real);


let

	 automaton iek1_t3

	state POINTIek1_T3:
	unless (idIek1_T3_1=0) restart POINT__TO__T3_A_1



	unless (idIek1_T3_1=1103) and idIek1_T1_1 != 1098 restart T3_A__TO__T3_C_1



	unless (idIek1_T3_1=1104) and idIek1_T1_1 = 1098 restart T3_C__TO__T3_D_1



	unless (idIek1_T3_1=1104) and idIek1_T2_1 = 1101 restart T3_C__TO__T3_B_2



	unless (idIek1_T3_1=1106) and idIek1_T2_1 != 1100 restart T3_D__TO__T3_B_1



	unless (idIek1_T3_1=1105) and idIek1_T2_1 = 1100 restart T3_B__TO__T3_A_1



	unless (idIek1_T3_1=1105) and idIek1_T1_1 = 1097 restart T3_B__TO__T3_C_2



	unless (idIek1_T3_1=1103) restart T3_A_IDL

	unless (idIek1_T3_1=1104) restart T3_C_IDL

	unless (idIek1_T3_1=1106) restart T3_D_IDL

	unless (idIek1_T3_1=1105) restart T3_B_IDL

	let

		(idIek1_T3, sT3) 
	= (idIek1_T3_1, sT3_1);
	

	tel



	state POINT__TO__T3_A_1:

	 var 	idIek1_T3_2:int;
	sT3_2:real;
	let

		-- transition trace :
	--POINT__To__T3_a_1
		(idIek1_T3_2, sT3_2) 
	= T3_a_en(idIek1_T3_1, sT3_1, false);
		

	(idIek1_T3, sT3) 
	=  (idIek1_T3_2, sT3_2);


	tel

	until true restart POINTIek1_T3



	state T3_A__TO__T3_C_1:

	 var 	idIek1_T3_2, idIek1_T3_3:int;
	sT3_2:real;
	let

		-- transition trace :
	--T3_a__To__T3_c_1
		(idIek1_T3_2) 
	= T3_a_ex(idIek1_T3_1, false);
		

		(idIek1_T3_3, sT3_2) 
	= T3_c_en(idIek1_T3_2, sT3_1, false);
		

	(idIek1_T3, sT3) 
	=  (idIek1_T3_3, sT3_2);


	tel

	until true restart POINTIek1_T3



	state T3_C__TO__T3_D_1:

	 var 	idIek1_T3_2, idIek1_T3_3:int;
	sT3_2:real;
	let

		-- transition trace :
	--T3_c__To__T3_d_1
		(idIek1_T3_2) 
	= T3_c_ex(idIek1_T3_1, false);
		

		(idIek1_T3_3, sT3_2) 
	= T3_d_en(idIek1_T3_2, sT3_1, false);
		

	(idIek1_T3, sT3) 
	=  (idIek1_T3_3, sT3_2);


	tel

	until true restart POINTIek1_T3



	state T3_C__TO__T3_B_2:

	 var 	idIek1_T3_2, idIek1_T3_3:int;
	sT3_2:real;
	let

		-- transition trace :
	--T3_c__To__T3_b_2
		(idIek1_T3_2) 
	= T3_c_ex(idIek1_T3_1, false);
		

		(idIek1_T3_3, sT3_2) 
	= T3_b_en(idIek1_T3_2, sT3_1, false);
		

	(idIek1_T3, sT3) 
	=  (idIek1_T3_3, sT3_2);


	tel

	until true restart POINTIek1_T3



	state T3_D__TO__T3_B_1:

	 var 	idIek1_T3_2, idIek1_T3_3:int;
	sT3_2:real;
	let

		-- transition trace :
	--T3_d__To__T3_b_1
		(idIek1_T3_2) 
	= T3_d_ex(idIek1_T3_1, false);
		

		(idIek1_T3_3, sT3_2) 
	= T3_b_en(idIek1_T3_2, sT3_1, false);
		

	(idIek1_T3, sT3) 
	=  (idIek1_T3_3, sT3_2);


	tel

	until true restart POINTIek1_T3



	state T3_B__TO__T3_A_1:

	 var 	idIek1_T3_2, idIek1_T3_3:int;
	sT3_2:real;
	let

		-- transition trace :
	--T3_b__To__T3_a_1
		(idIek1_T3_2) 
	= T3_b_ex(idIek1_T3_1, false);
		

		(idIek1_T3_3, sT3_2) 
	= T3_a_en(idIek1_T3_2, sT3_1, false);
		

	(idIek1_T3, sT3) 
	=  (idIek1_T3_3, sT3_2);


	tel

	until true restart POINTIek1_T3



	state T3_B__TO__T3_C_2:

	 var 	idIek1_T3_2, idIek1_T3_3:int;
	sT3_2:real;
	let

		-- transition trace :
	--T3_b__To__T3_c_2
		(idIek1_T3_2) 
	= T3_b_ex(idIek1_T3_1, false);
		

		(idIek1_T3_3, sT3_2) 
	= T3_c_en(idIek1_T3_2, sT3_1, false);
		

	(idIek1_T3, sT3) 
	=  (idIek1_T3_3, sT3_2);


	tel

	until true restart POINTIek1_T3



	state T3_A_IDL:

	 	let

		

	(idIek1_T3, sT3) 
	= (idIek1_T3_1, sT3_1);
	

	tel

	until true restart POINTIek1_T3



	state T3_C_IDL:

	 	let

		

	(idIek1_T3, sT3) 
	= (idIek1_T3_1, sT3_1);
	

	tel

	until true restart POINTIek1_T3



	state T3_D_IDL:

	 	let

		

	(idIek1_T3, sT3) 
	= (idIek1_T3_1, sT3_1);
	

	tel

	until true restart POINTIek1_T3



	state T3_B_IDL:

	 	let

		

	(idIek1_T3, sT3) 
	= (idIek1_T3_1, sT3_1);
	

	tel

	until true restart POINTIek1_T3



tel


--***************************************************State :Iek1_Iek1 Automaton***************************************************

node Iek1_Iek1_node(idIek1_Iek1_1:int;
	idIek1_T1_1:int;
	sT1_1:real;
	idIek1_T2_1:int;
	sT2_1:real;
	idIek1_T3_1:int;
	sT3_1:real;
	E:bool;
	F:bool)

returns (idIek1_Iek1:int;
	idIek1_T1:int;
	sT1:real;
	idIek1_T2:int;
	sT2:real;
	idIek1_T3:int;
	sT3:real);


let

	 automaton iek1_iek1

	state POINTIek1_Iek1:
	unless (idIek1_Iek1_1=0) restart IEK1_IEK1_PARALLEL_ENTRY
	unless true  restart IEK1_IEK1_PARALLEL_IDL

	let

		(idIek1_Iek1, idIek1_T1, sT1, idIek1_T2, sT2, idIek1_T3, sT3) 
	= (idIek1_Iek1_1, idIek1_T1_1, sT1_1, idIek1_T2_1, sT2_1, idIek1_T3_1, sT3_1);
	

	tel



	state IEK1_IEK1_PARALLEL_ENTRY:

	 var 	idIek1_Iek1_2, idIek1_Iek1_3, idIek1_Iek1_4:int;
	idIek1_T1_2:int;
	sT1_2:real;
	idIek1_T2_2:int;
	sT2_2:real;
	idIek1_T3_2:int;
	sT3_2:real;
	let

		
	(idIek1_T1_2, idIek1_Iek1_2, sT1_2) 
	= Iek1_T1_en(idIek1_T1_1, idIek1_Iek1_1, sT1_1, false);

	(idIek1_T2_2, idIek1_Iek1_3, sT2_2) 
	= Iek1_T2_en(idIek1_T2_1, idIek1_Iek1_2, sT2_1, false);

	(idIek1_T3_2, idIek1_Iek1_4, sT3_2) 
	= Iek1_T3_en(idIek1_T3_1, idIek1_Iek1_3, sT3_1, false);


	(idIek1_Iek1, idIek1_T1, sT1, idIek1_T2, sT2, idIek1_T3, sT3) 
	= (idIek1_Iek1_4, idIek1_T1_2, sT1_2, idIek1_T2_2, sT2_2, idIek1_T3_2, sT3_2);
	

	tel

	until true restart POINTIek1_Iek1



	state IEK1_IEK1_PARALLEL_IDL:

	 var 	idIek1_T1_2:int;
	sT1_2:real;
	idIek1_T2_2:int;
	sT2_2:real;
	idIek1_T3_2:int;
	sT3_2:real;
	let

		

		(idIek1_T1_2, sT1_2)
	= if not (idIek1_T1_1= 0 ) then Iek1_T1_node(idIek1_T1_1, sT1_1, E)

		 else (idIek1_T1_1, sT1_1);

		

		

		(idIek1_T2_2, sT2_2)
	= if not (idIek1_T2_1= 0 ) then Iek1_T2_node(idIek1_T2_1, sT2_1, F)

		 else (idIek1_T2_1, sT2_1);

		

		

		(idIek1_T3_2, sT3_2)
	= if not (idIek1_T3_1= 0 ) then Iek1_T3_node(idIek1_T3_1, sT3_1, idIek1_T1_2, idIek1_T2_2)

		 else (idIek1_T3_1, sT3_1);

		

		

	(idIek1_Iek1, idIek1_T1, sT1, idIek1_T2, sT2, idIek1_T3, sT3) 
	= (idIek1_Iek1_1, idIek1_T1_2, sT1_2, idIek1_T2_2, sT2_2, idIek1_T3_2, sT3_2);
	

	tel

	until true restart POINTIek1_Iek1



tel


--***************************************************State :Iek1_Iek1 Automaton***************************************************

node Iek1_Iek1(E:bool;
	F:bool)

returns (sT1:real;
	sT2:real;
	sT3:real);


var sT1_1: real;

	sT2_1: real;

	sT3_1: real;

	idIek1_Iek1, idIek1_Iek1_1: int;

	idIek1_T2, idIek1_T2_1: int;

	idIek1_T1, idIek1_T1_1: int;

	idIek1_T3, idIek1_T3_1: int;

		idIek1_Iek1_2:int;
	idIek1_T1_2:int;
	sT1_2:real;
	idIek1_T2_2:int;
	sT2_2:real;
	idIek1_T3_2:int;
	sT3_2:real;
let

	sT1_1 = 0.0 -> pre sT1;

	sT2_1 = 0.0 -> pre sT2;

	sT3_1 = 0.0 -> pre sT3;

	idIek1_Iek1_1 = 0 -> pre idIek1_Iek1;

	idIek1_T2_1 = 0 -> pre idIek1_T2;

	idIek1_T1_1 = 0 -> pre idIek1_T1;

	idIek1_T3_1 = 0 -> pre idIek1_T3;

	



	(idIek1_Iek1_2, idIek1_T1_2, sT1_2, idIek1_T2_2, sT2_2, idIek1_T3_2, sT3_2)
	 = 

	 if E then Iek1_Iek1_node(idIek1_Iek1_1, idIek1_T1_1, sT1_1, idIek1_T2_1, sT2_1, idIek1_T3_1, sT3_1, E, false)

	 else (idIek1_Iek1_1, idIek1_T1_1, sT1_1, idIek1_T2_1, sT2_1, idIek1_T3_1, sT3_1);

	



	(idIek1_Iek1, idIek1_T1, sT1, idIek1_T2, sT2, idIek1_T3, sT3)
	 = 

	 if F then Iek1_Iek1_node(idIek1_Iek1_2, idIek1_T1_2, sT1_2, idIek1_T2_2, sT2_2, idIek1_T3_2, sT3_2, false, F)

	 else (idIek1_Iek1_2, idIek1_T1_2, sT1_2, idIek1_T2_2, sT2_2, idIek1_T3_2, sT3_2);

	


--unused outputs
	

tel



node Iek1 (E_1_1 : real; F_1_1 : real)
returns (sT1_1_1 : real;
	sT2_2_1 : real;
	sT3_3_1 : real); 
var
	Iek1_1_1 : real; Iek1_2_1 : real; Iek1_3_1 : real;
	Mux_1_1 : real; Mux_1_2 : real;
	Mux_1_1_event: bool;
	Mux_1_2_event: bool;
let 
	Mux_1_1_event = false -> ((pre(Mux_1_1) > 0.0 and Mux_1_1 <= 0.0) or (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0));
	Mux_1_2_event = false -> ((pre(Mux_1_2) > 0.0 and Mux_1_2 <= 0.0) or (pre(Mux_1_2) <= 0.0 and Mux_1_2 > 0.0));
	(Iek1_1_1, Iek1_2_1, Iek1_3_1) =  Iek1_Iek1(Mux_1_1_event, Mux_1_2_event);
	Mux_1_1 = E_1_1 ;
	Mux_1_2 = F_1_1 ;
	sT1_1_1 = Iek1_1_1;
	sT2_2_1 = Iek1_2_1;
	sT3_3_1 = Iek1_3_1;
tel

