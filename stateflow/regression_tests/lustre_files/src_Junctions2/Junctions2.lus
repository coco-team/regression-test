-- This file has been generated by cocoSim


-- System nodes





node Junctions2_Junctions2Junction592__To__Junctions2_C_2_Condition_Action(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1 +1000;
	

	(y) 
	= (y_2);
	

tel






node Junctions2_Junctions2Junction592__To__Junctions2_D_1_Condition_Action(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1 +10000;
	

	(y) 
	= (y_2);
	

tel







node Junctions2_Junctions2Junction591__To__Junctions2_B_2_Condition_Action(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1 +10;
	

	(y) 
	= (y_2);
	

tel







node Junctions2_Junctions2Junction591__To__Junctions2_Junctions2Junction592_1_Condition_Action(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1 +100;
	

	(y) 
	= (y_2);
	

tel






node Junctions2_A__To__Junctions2_Junctions2Junction591_1_Condition_Action(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel







-- Entry action for state :Junctions2_D
node Junctions2_D_en(idJunctions2_Junctions2_1:int;
	isInner:bool)

returns (idJunctions2_Junctions2:int);


var 	idJunctions2_Junctions2_2:int;


let



	-- set state as active 
	idJunctions2_Junctions2_2 
	= 588;
	

	(idJunctions2_Junctions2) 
	= (idJunctions2_Junctions2_2);
	

tel





-- Exit action for state :Junctions2_D
node Junctions2_D_ex(idJunctions2_Junctions2_1:int;
	isInner:bool)

returns (idJunctions2_Junctions2:int);


var 	idJunctions2_Junctions2_2:int;


let



	-- set state as inactive 
	idJunctions2_Junctions2_2
	 = if (not isInner) then 0 else idJunctions2_Junctions2_1;


	(idJunctions2_Junctions2) 
	= (idJunctions2_Junctions2_2);
	

tel






-- Entry action for state :Junctions2_C
node Junctions2_C_en(idJunctions2_Junctions2_1:int;
	isInner:bool)

returns (idJunctions2_Junctions2:int);


var 	idJunctions2_Junctions2_2:int;


let



	-- set state as active 
	idJunctions2_Junctions2_2 
	= 587;
	

	(idJunctions2_Junctions2) 
	= (idJunctions2_Junctions2_2);
	

tel





-- Exit action for state :Junctions2_C
node Junctions2_C_ex(idJunctions2_Junctions2_1:int;
	isInner:bool)

returns (idJunctions2_Junctions2:int);


var 	idJunctions2_Junctions2_2:int;


let



	-- set state as inactive 
	idJunctions2_Junctions2_2
	 = if (not isInner) then 0 else idJunctions2_Junctions2_1;


	(idJunctions2_Junctions2) 
	= (idJunctions2_Junctions2_2);
	

tel






-- Entry action for state :Junctions2_A
node Junctions2_A_en(idJunctions2_Junctions2_1:int;
	isInner:bool)

returns (idJunctions2_Junctions2:int);


var 	idJunctions2_Junctions2_2:int;


let



	-- set state as active 
	idJunctions2_Junctions2_2 
	= 585;
	

	(idJunctions2_Junctions2) 
	= (idJunctions2_Junctions2_2);
	

tel





-- Exit action for state :Junctions2_A
node Junctions2_A_ex(idJunctions2_Junctions2_1:int;
	isInner:bool)

returns (idJunctions2_Junctions2:int);


var 	idJunctions2_Junctions2_2:int;


let



	-- set state as inactive 
	idJunctions2_Junctions2_2
	 = if (not isInner) then 0 else idJunctions2_Junctions2_1;


	(idJunctions2_Junctions2) 
	= (idJunctions2_Junctions2_2);
	

tel






-- Entry action for state :Junctions2_B
node Junctions2_B_en(idJunctions2_Junctions2_1:int;
	isInner:bool)

returns (idJunctions2_Junctions2:int);


var 	idJunctions2_Junctions2_2:int;


let



	-- set state as active 
	idJunctions2_Junctions2_2 
	= 586;
	

	(idJunctions2_Junctions2) 
	= (idJunctions2_Junctions2_2);
	

tel





-- Exit action for state :Junctions2_B
node Junctions2_B_ex(idJunctions2_Junctions2_1:int;
	isInner:bool)

returns (idJunctions2_Junctions2:int);


var 	idJunctions2_Junctions2_2:int;


let



	-- set state as inactive 
	idJunctions2_Junctions2_2
	 = if (not isInner) then 0 else idJunctions2_Junctions2_1;


	(idJunctions2_Junctions2) 
	= (idJunctions2_Junctions2_2);
	

tel


--***************************************************State :Junctions2_Junctions2 Automaton***************************************************

node Junctions2_Junctions2_node(idJunctions2_Junctions2_1:int;
	x:int;
	y_1:int)

returns (idJunctions2_Junctions2:int;
	y:int);


let

	 automaton junctions2_junctions2

	state POINTJunctions2_Junctions2:
	unless (idJunctions2_Junctions2_1=0) restart POINT__TO__JUNCTIONS2_A_1



	unless (idJunctions2_Junctions2_1=585) and ( x>0 ) restart JUNCTIONS2_A__TO__JUNCTIONS2_JUNCTIONS2JUNCTION591_1



	unless (idJunctions2_Junctions2_1=586) and ( x=0 ) restart JUNCTIONS2_B__TO__JUNCTIONS2_C_1



	unless (idJunctions2_Junctions2_1=587) and ( x=0 ) restart JUNCTIONS2_C__TO__JUNCTIONS2_D_1



	unless (idJunctions2_Junctions2_1=588) and ( x=0 ) restart JUNCTIONS2_D__TO__JUNCTIONS2_A_1



	unless (idJunctions2_Junctions2_1=585) restart JUNCTIONS2_A_IDL

	unless (idJunctions2_Junctions2_1=586) restart JUNCTIONS2_B_IDL

	unless (idJunctions2_Junctions2_1=587) restart JUNCTIONS2_C_IDL

	unless (idJunctions2_Junctions2_1=588) restart JUNCTIONS2_D_IDL

	let

		(idJunctions2_Junctions2, y) 
	= (idJunctions2_Junctions2_1, y_1);
	

	tel



	state POINT__TO__JUNCTIONS2_A_1:

	 var 	idJunctions2_Junctions2_2:int;
	let

		-- transition trace :
	--POINT__To__Junctions2_A_1
		(idJunctions2_Junctions2_2) 
	= Junctions2_A_en(idJunctions2_Junctions2_1, false);
		

	(idJunctions2_Junctions2) 
	=  (idJunctions2_Junctions2_2);

	--add unused variables
	(y) 
	= (y_1);
	

	tel

	until true restart POINTJunctions2_Junctions2



	state JUNCTIONS2_A__TO__JUNCTIONS2_JUNCTIONS2JUNCTION591_1:

	 var 	idJunctions2_Junctions2_2, idJunctions2_Junctions2_3, idJunctions2_Junctions2_4, idJunctions2_Junctions2_5, idJunctions2_Junctions2_6, idJunctions2_Junctions2_7:int;
	y_2, y_3, y_4, y_5, y_6, y_7, y_8, y_9:int;
	let

		



-- transition trace :
	--Junctions2_A__To__Junction591_1, Junction591__To__Junction592_1, Junction592__To__Junctions2_D_1
		-- condition Action : y++
		
		(y_2) 
	= Junctions2_A__To__Junctions2_Junctions2Junction591_1_Condition_Action(y_1);
		

		-- condition Action : y+=100
		
		(y_3) 
	= 
		 if (( x>=2 )) then 
		Junctions2_Junctions2Junction591__To__Junctions2_Junctions2Junction592_1_Condition_Action(y_2)
		 else (y_2);
		

		-- condition Action : y+=10000
		
		(y_4) 
	= 
		 if (( x>=2 ) and ( x>=4 )) then 
		Junctions2_Junctions2Junction592__To__Junctions2_D_1_Condition_Action(y_3)
		 else (y_3);
		

		(idJunctions2_Junctions2_2) 
	= 
		 if (( x>=2 ) and ( x>=4 )) then 
		Junctions2_A_ex(idJunctions2_Junctions2_1, false)
		 else (idJunctions2_Junctions2_1);
		

		(idJunctions2_Junctions2_3) 
	= 
		 if (( x>=2 ) and ( x>=4 )) then 
		Junctions2_D_en(idJunctions2_Junctions2_2, false)
		 else (idJunctions2_Junctions2_2);
		


-- transition trace :
	--Junctions2_A__To__Junction591_1, Junction591__To__Junction592_1, Junction592__To__Junctions2_C_2
		-- condition Action : y++
		
		(y_5) 
	= Junctions2_A__To__Junctions2_Junctions2Junction591_1_Condition_Action(y_1);
		

		-- condition Action : y+=100
		
		(y_6) 
	= 
		 if (( x>=2 )) then 
		Junctions2_Junctions2Junction591__To__Junctions2_Junctions2Junction592_1_Condition_Action(y_5)
		 else (y_5);
		

		-- condition Action : y+=1000
		
		(y_7) 
	= 
		 if (( x>=2 ) and ( x<4 )) then 
		Junctions2_Junctions2Junction592__To__Junctions2_C_2_Condition_Action(y_6)
		 else (y_6);
		

		(idJunctions2_Junctions2_4) 
	= 
		 if (( x>=2 ) and ( x<4 )) then 
		Junctions2_A_ex(idJunctions2_Junctions2_3, false)
		 else (idJunctions2_Junctions2_3);
		

		(idJunctions2_Junctions2_5) 
	= 
		 if (( x>=2 ) and ( x<4 )) then 
		Junctions2_C_en(idJunctions2_Junctions2_4, false)
		 else (idJunctions2_Junctions2_4);
		


-- transition trace :
	--Junctions2_A__To__Junction591_1, Junction591__To__Junctions2_B_2
		-- condition Action : y++
		
		(y_8) 
	= Junctions2_A__To__Junctions2_Junctions2Junction591_1_Condition_Action(y_1);
		

		-- condition Action : y+=10
		
		(y_9) 
	= 
		 if (( x<2 )) then 
		Junctions2_Junctions2Junction591__To__Junctions2_B_2_Condition_Action(y_8)
		 else (y_8);
		

		(idJunctions2_Junctions2_6) 
	= 
		 if (( x<2 )) then 
		Junctions2_A_ex(idJunctions2_Junctions2_5, false)
		 else (idJunctions2_Junctions2_5);
		

		(idJunctions2_Junctions2_7) 
	= 
		 if (( x<2 )) then 
		Junctions2_B_en(idJunctions2_Junctions2_6, false)
		 else (idJunctions2_Junctions2_6);
		

	(idJunctions2_Junctions2, y) 
	= 
		 if (( x>=2 ) and ( x>=4 )) then 
		(idJunctions2_Junctions2_3, y_4)
		 else
		 if (( x>=2 ) and ( x<4 )) then 
		(idJunctions2_Junctions2_5, y_7)
		 else
		 if (( x>=2 )) then 
		(idJunctions2_Junctions2_3, y_6)
		 else
		 if (( x<2 )) then 
		(idJunctions2_Junctions2_7, y_9)
		 else (idJunctions2_Junctions2_5, y_8);


	tel

	until true restart POINTJunctions2_Junctions2



	state JUNCTIONS2_B__TO__JUNCTIONS2_C_1:

	 var 	idJunctions2_Junctions2_2, idJunctions2_Junctions2_3:int;
	let

		-- transition trace :
	--Junctions2_B__To__Junctions2_C_1
		(idJunctions2_Junctions2_2) 
	= Junctions2_B_ex(idJunctions2_Junctions2_1, false);
		

		(idJunctions2_Junctions2_3) 
	= Junctions2_C_en(idJunctions2_Junctions2_2, false);
		

	(idJunctions2_Junctions2, y) 
	=  (idJunctions2_Junctions2_3, y_1);


	tel

	until true restart POINTJunctions2_Junctions2



	state JUNCTIONS2_C__TO__JUNCTIONS2_D_1:

	 var 	idJunctions2_Junctions2_2, idJunctions2_Junctions2_3:int;
	let

		-- transition trace :
	--Junctions2_C__To__Junctions2_D_1
		(idJunctions2_Junctions2_2) 
	= Junctions2_C_ex(idJunctions2_Junctions2_1, false);
		

		(idJunctions2_Junctions2_3) 
	= Junctions2_D_en(idJunctions2_Junctions2_2, false);
		

	(idJunctions2_Junctions2, y) 
	=  (idJunctions2_Junctions2_3, y_1);


	tel

	until true restart POINTJunctions2_Junctions2



	state JUNCTIONS2_D__TO__JUNCTIONS2_A_1:

	 var 	idJunctions2_Junctions2_2, idJunctions2_Junctions2_3:int;
	let

		-- transition trace :
	--Junctions2_D__To__Junctions2_A_1
		(idJunctions2_Junctions2_2) 
	= Junctions2_D_ex(idJunctions2_Junctions2_1, false);
		

		(idJunctions2_Junctions2_3) 
	= Junctions2_A_en(idJunctions2_Junctions2_2, false);
		

	(idJunctions2_Junctions2, y) 
	=  (idJunctions2_Junctions2_3, y_1);


	tel

	until true restart POINTJunctions2_Junctions2



	state JUNCTIONS2_A_IDL:

	 	let

		

	(idJunctions2_Junctions2, y) 
	= (idJunctions2_Junctions2_1, y_1);
	

	tel

	until true restart POINTJunctions2_Junctions2



	state JUNCTIONS2_B_IDL:

	 	let

		

	(idJunctions2_Junctions2, y) 
	= (idJunctions2_Junctions2_1, y_1);
	

	tel

	until true restart POINTJunctions2_Junctions2



	state JUNCTIONS2_C_IDL:

	 	let

		

	(idJunctions2_Junctions2, y) 
	= (idJunctions2_Junctions2_1, y_1);
	

	tel

	until true restart POINTJunctions2_Junctions2



	state JUNCTIONS2_D_IDL:

	 	let

		

	(idJunctions2_Junctions2, y) 
	= (idJunctions2_Junctions2_1, y_1);
	

	tel

	until true restart POINTJunctions2_Junctions2



tel


--***************************************************State :Junctions2_Junctions2 Automaton***************************************************

node Junctions2_Junctions2(x:int)

returns (y:int);


var y_1: int;

	idJunctions2_Junctions2, idJunctions2_Junctions2_1: int;

	let

	y_1 = 11111 -> pre y;

	idJunctions2_Junctions2_1 = 0 -> pre idJunctions2_Junctions2;

	



	(idJunctions2_Junctions2, y)
	 = Junctions2_Junctions2_node(idJunctions2_Junctions2_1, x, y_1);


--unused outputs
	

tel



node Junctions2 (In1_1_1 : int)
returns (y_1_1 : int); 
var
	Junctions2_1_1 : int;
let 
	Junctions2_1_1 =  Junctions2_Junctions2(In1_1_1);
	y_1_1 = Junctions2_1_1;
tel

