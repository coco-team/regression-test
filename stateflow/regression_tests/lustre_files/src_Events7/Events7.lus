-- This file has been generated by cocoSim


-- System nodes










-- Entry action for state :T2_D
node T2_D_en(idEvents7_T2_1:int;
	sT2_1:real;
	isInner:bool)

returns (idEvents7_T2:int;
	sT2:real);


var 	idEvents7_T2_2:int;
	sT2_2:real;


let



	-- set state as active 
	idEvents7_T2_2 
	= 1059;
	

	sT2_2 
	= if (not isInner) then 2.
	 else sT2_1;
	

	(idEvents7_T2, sT2) 
	= (idEvents7_T2_2, sT2_2);
	

tel





-- Exit action for state :T2_D
node T2_D_ex(idEvents7_T2_1:int;
	isInner:bool)

returns (idEvents7_T2:int);


var 	idEvents7_T2_2:int;


let



	-- set state as inactive 
	idEvents7_T2_2
	 = if (not isInner) then 0 else idEvents7_T2_1;


	(idEvents7_T2) 
	= (idEvents7_T2_2);
	

tel






-- Entry action for state :T2_C
node T2_C_en(idEvents7_T2_1:int;
	sT2_1:real;
	isInner:bool)

returns (idEvents7_T2:int;
	sT2:real);


var 	idEvents7_T2_2:int;
	sT2_2:real;


let



	-- set state as active 
	idEvents7_T2_2 
	= 1058;
	

	sT2_2 
	= if (not isInner) then 1.
	 else sT2_1;
	

	(idEvents7_T2, sT2) 
	= (idEvents7_T2_2, sT2_2);
	

tel





-- Exit action for state :T2_C
node T2_C_ex(idEvents7_T2_1:int;
	isInner:bool)

returns (idEvents7_T2:int);


var 	idEvents7_T2_2:int;


let



	-- set state as inactive 
	idEvents7_T2_2
	 = if (not isInner) then 0 else idEvents7_T2_1;


	(idEvents7_T2) 
	= (idEvents7_T2_2);
	

tel






-- Entry action for state :Events7_T2
node Events7_T2_en(idEvents7_T2_1:int;
	idEvents7_Events7_1:int;
	sT2_1:real;
	isInner:bool)

returns (idEvents7_T2:int;
	idEvents7_Events7:int;
	sT2:real);


var 	idEvents7_T2_2, idEvents7_T2_3, idEvents7_T2_4, idEvents7_T2_5, idEvents7_T2_6:int;
	idEvents7_Events7_2, idEvents7_Events7_3, idEvents7_Events7_4:int;
	sT2_2, sT2_3, sT2_4, sT2_5, sT2_6:real;


let



	-- set state as active 
	idEvents7_Events7_2 
	= 1057;
	

	
-- transition trace :
	--POINT__To__T2_C_1
		(idEvents7_T2_2, sT2_2) 
	= T2_C_en(idEvents7_T2_1, sT2_1, false);
		

	(idEvents7_T2_3, idEvents7_Events7_3, sT2_3) 
	= 

	if ( idEvents7_T2_1 = 0) then

	 (idEvents7_T2_2, idEvents7_Events7_2, sT2_2)

	 else(idEvents7_T2_1, idEvents7_Events7_2, sT2_1);

	

	(idEvents7_T2_4, sT2_4) 
	= 
	if ( idEvents7_T2_1 = 1058) then
	T2_C_en(idEvents7_T2_1, sT2_1, false)
	 else (idEvents7_T2_1, sT2_1);

	

	(idEvents7_T2_5, sT2_5) 
	= 
	if ( idEvents7_T2_1 = 1059) then
	T2_D_en(idEvents7_T2_1, sT2_1, false)
	 else (idEvents7_T2_1, sT2_1);

	

	(idEvents7_T2_6, idEvents7_Events7_4, sT2_6) 
	= 
		 if ( idEvents7_T2_1 = 0) then 
		(idEvents7_T2_3, idEvents7_Events7_3, sT2_3)
		 else
		 if ( idEvents7_T2_1 = 1058) then 
		(idEvents7_T2_4, idEvents7_Events7_3, sT2_4)
		 else
		 if ( idEvents7_T2_1 = 1059) then 
		(idEvents7_T2_5, idEvents7_Events7_3, sT2_5)
		 else (idEvents7_T2_1, idEvents7_Events7_2, sT2_1);


	(idEvents7_T2, idEvents7_Events7, sT2) 
	= (idEvents7_T2_6, idEvents7_Events7_4, sT2_6);
	

tel





-- Exit action for state :Events7_T2
node Events7_T2_ex(idEvents7_T2_1:int;
	idEvents7_Events7_1:int;
	isInner:bool)

returns (idEvents7_T2:int;
	idEvents7_Events7:int);


var 	idEvents7_T2_2, idEvents7_T2_3, idEvents7_T2_4, idEvents7_T2_5:int;
	idEvents7_Events7_2:int;


let



	
	(idEvents7_T2_2) 
	= 
	if ( idEvents7_T2_1 = 1058) then
	T2_C_ex(idEvents7_T2_1, false)
	 else (idEvents7_T2_1);

	

	(idEvents7_T2_3) 
	= 
	if ( idEvents7_T2_1 = 1059) then
	T2_D_ex(idEvents7_T2_1, false)
	 else (idEvents7_T2_1);

	

	(idEvents7_T2_4) 
	= 
		 if ( idEvents7_T2_1 = 1058) then 
		(idEvents7_T2_2)
		 else
		 if ( idEvents7_T2_1 = 1059) then 
		(idEvents7_T2_3)
		 else (idEvents7_T2_1);


	-- set state as inactive 
	idEvents7_Events7_2
	 = if (not isInner) then 0 else idEvents7_Events7_1;

	idEvents7_T2_5 
	= 0;
	

	(idEvents7_T2, idEvents7_Events7) 
	= (idEvents7_T2_5, idEvents7_Events7_2);
	

tel






-- Entry action for state :T1_B
node T1_B_en(idEvents7_T1_1:int;
	sT1_1:real;
	isInner:bool)

returns (idEvents7_T1:int;
	sT1:real);


var 	idEvents7_T1_2:int;
	sT1_2:real;


let



	-- set state as active 
	idEvents7_T1_2 
	= 1056;
	

	sT1_2 
	= if (not isInner) then 2.
	 else sT1_1;
	

	(idEvents7_T1, sT1) 
	= (idEvents7_T1_2, sT1_2);
	

tel





-- Exit action for state :T1_B
node T1_B_ex(idEvents7_T1_1:int;
	isInner:bool)

returns (idEvents7_T1:int);


var 	idEvents7_T1_2:int;


let



	-- set state as inactive 
	idEvents7_T1_2
	 = if (not isInner) then 0 else idEvents7_T1_1;


	(idEvents7_T1) 
	= (idEvents7_T1_2);
	

tel






-- Entry action for state :T1_A
node T1_A_en(idEvents7_T1_1:int;
	sT1_1:real;
	isInner:bool)

returns (idEvents7_T1:int;
	sT1:real);


var 	idEvents7_T1_2:int;
	sT1_2:real;


let



	-- set state as active 
	idEvents7_T1_2 
	= 1055;
	

	sT1_2 
	= if (not isInner) then 1.
	 else sT1_1;
	

	(idEvents7_T1, sT1) 
	= (idEvents7_T1_2, sT1_2);
	

tel





-- Exit action for state :T1_A
node T1_A_ex(idEvents7_T1_1:int;
	isInner:bool)

returns (idEvents7_T1:int);


var 	idEvents7_T1_2:int;


let



	-- set state as inactive 
	idEvents7_T1_2
	 = if (not isInner) then 0 else idEvents7_T1_1;


	(idEvents7_T1) 
	= (idEvents7_T1_2);
	

tel






-- Entry action for state :Events7_T1
node Events7_T1_en(idEvents7_T1_1:int;
	idEvents7_Events7_1:int;
	sT1_1:real;
	isInner:bool)

returns (idEvents7_T1:int;
	idEvents7_Events7:int;
	sT1:real);


var 	idEvents7_T1_2, idEvents7_T1_3, idEvents7_T1_4, idEvents7_T1_5, idEvents7_T1_6:int;
	idEvents7_Events7_2, idEvents7_Events7_3, idEvents7_Events7_4:int;
	sT1_2, sT1_3, sT1_4, sT1_5, sT1_6:real;


let



	-- set state as active 
	idEvents7_Events7_2 
	= 1054;
	

	
-- transition trace :
	--POINT__To__T1_A_1
		(idEvents7_T1_2, sT1_2) 
	= T1_A_en(idEvents7_T1_1, sT1_1, false);
		

	(idEvents7_T1_3, idEvents7_Events7_3, sT1_3) 
	= 

	if ( idEvents7_T1_1 = 0) then

	 (idEvents7_T1_2, idEvents7_Events7_2, sT1_2)

	 else(idEvents7_T1_1, idEvents7_Events7_2, sT1_1);

	

	(idEvents7_T1_4, sT1_4) 
	= 
	if ( idEvents7_T1_1 = 1055) then
	T1_A_en(idEvents7_T1_1, sT1_1, false)
	 else (idEvents7_T1_1, sT1_1);

	

	(idEvents7_T1_5, sT1_5) 
	= 
	if ( idEvents7_T1_1 = 1056) then
	T1_B_en(idEvents7_T1_1, sT1_1, false)
	 else (idEvents7_T1_1, sT1_1);

	

	(idEvents7_T1_6, idEvents7_Events7_4, sT1_6) 
	= 
		 if ( idEvents7_T1_1 = 0) then 
		(idEvents7_T1_3, idEvents7_Events7_3, sT1_3)
		 else
		 if ( idEvents7_T1_1 = 1055) then 
		(idEvents7_T1_4, idEvents7_Events7_3, sT1_4)
		 else
		 if ( idEvents7_T1_1 = 1056) then 
		(idEvents7_T1_5, idEvents7_Events7_3, sT1_5)
		 else (idEvents7_T1_1, idEvents7_Events7_2, sT1_1);


	(idEvents7_T1, idEvents7_Events7, sT1) 
	= (idEvents7_T1_6, idEvents7_Events7_4, sT1_6);
	

tel





-- Exit action for state :Events7_T1
node Events7_T1_ex(idEvents7_T1_1:int;
	idEvents7_Events7_1:int;
	isInner:bool)

returns (idEvents7_T1:int;
	idEvents7_Events7:int);


var 	idEvents7_T1_2, idEvents7_T1_3, idEvents7_T1_4, idEvents7_T1_5:int;
	idEvents7_Events7_2:int;


let



	
	(idEvents7_T1_2) 
	= 
	if ( idEvents7_T1_1 = 1055) then
	T1_A_ex(idEvents7_T1_1, false)
	 else (idEvents7_T1_1);

	

	(idEvents7_T1_3) 
	= 
	if ( idEvents7_T1_1 = 1056) then
	T1_B_ex(idEvents7_T1_1, false)
	 else (idEvents7_T1_1);

	

	(idEvents7_T1_4) 
	= 
		 if ( idEvents7_T1_1 = 1055) then 
		(idEvents7_T1_2)
		 else
		 if ( idEvents7_T1_1 = 1056) then 
		(idEvents7_T1_3)
		 else (idEvents7_T1_1);


	-- set state as inactive 
	idEvents7_Events7_2
	 = if (not isInner) then 0 else idEvents7_Events7_1;

	idEvents7_T1_5 
	= 0;
	

	(idEvents7_T1, idEvents7_Events7) 
	= (idEvents7_T1_5, idEvents7_Events7_2);
	

tel


--***************************************************State :Events7_T2 Automaton***************************************************

node Events7_T2_node(idEvents7_T2_1:int;
	sT2_1:real;
	idEvents7_T1_1:int)

returns (idEvents7_T2:int;
	sT2:real);


let

	 automaton events7_t2

	state POINTEvents7_T2:
	unless (idEvents7_T2_1=0) restart POINT__TO__T2_C_1



	unless (idEvents7_T2_1=1058) and idEvents7_T1_1 = 1056 restart T2_C__TO__T2_D_1



	unless (idEvents7_T2_1=1059) and idEvents7_T1_1 = 1055 restart T2_D__TO__T2_C_1



	unless (idEvents7_T2_1=1058) restart T2_C_IDL

	unless (idEvents7_T2_1=1059) restart T2_D_IDL

	let

		(idEvents7_T2, sT2) 
	= (idEvents7_T2_1, sT2_1);
	

	tel



	state POINT__TO__T2_C_1:

	 var 	idEvents7_T2_2:int;
	sT2_2:real;
	let

		-- transition trace :
	--POINT__To__T2_C_1
		(idEvents7_T2_2, sT2_2) 
	= T2_C_en(idEvents7_T2_1, sT2_1, false);
		

	(idEvents7_T2, sT2) 
	=  (idEvents7_T2_2, sT2_2);


	tel

	until true restart POINTEvents7_T2



	state T2_C__TO__T2_D_1:

	 var 	idEvents7_T2_2, idEvents7_T2_3:int;
	sT2_2:real;
	let

		-- transition trace :
	--T2_C__To__T2_D_1
		(idEvents7_T2_2) 
	= T2_C_ex(idEvents7_T2_1, false);
		

		(idEvents7_T2_3, sT2_2) 
	= T2_D_en(idEvents7_T2_2, sT2_1, false);
		

	(idEvents7_T2, sT2) 
	=  (idEvents7_T2_3, sT2_2);


	tel

	until true restart POINTEvents7_T2



	state T2_D__TO__T2_C_1:

	 var 	idEvents7_T2_2, idEvents7_T2_3:int;
	sT2_2:real;
	let

		-- transition trace :
	--T2_D__To__T2_C_1
		(idEvents7_T2_2) 
	= T2_D_ex(idEvents7_T2_1, false);
		

		(idEvents7_T2_3, sT2_2) 
	= T2_C_en(idEvents7_T2_2, sT2_1, false);
		

	(idEvents7_T2, sT2) 
	=  (idEvents7_T2_3, sT2_2);


	tel

	until true restart POINTEvents7_T2



	state T2_C_IDL:

	 	let

		

	(idEvents7_T2, sT2) 
	= (idEvents7_T2_1, sT2_1);
	

	tel

	until true restart POINTEvents7_T2



	state T2_D_IDL:

	 	let

		

	(idEvents7_T2, sT2) 
	= (idEvents7_T2_1, sT2_1);
	

	tel

	until true restart POINTEvents7_T2



tel


--***************************************************State :Events7_T1 Automaton***************************************************

node Events7_T1_node(idEvents7_T1_1:int;
	sT1_1:real;
	E:bool)

returns (idEvents7_T1:int;
	sT1:real);


let

	 automaton events7_t1

	state POINTEvents7_T1:
	unless (idEvents7_T1_1=0) restart POINT__TO__T1_A_1



	unless (idEvents7_T1_1=1055) and E restart T1_A__TO__T1_B_1



	unless (idEvents7_T1_1=1056) and E restart T1_B__TO__T1_A_1



	unless (idEvents7_T1_1=1055) restart T1_A_IDL

	unless (idEvents7_T1_1=1056) restart T1_B_IDL

	let

		(idEvents7_T1, sT1) 
	= (idEvents7_T1_1, sT1_1);
	

	tel



	state POINT__TO__T1_A_1:

	 var 	idEvents7_T1_2:int;
	sT1_2:real;
	let

		-- transition trace :
	--POINT__To__T1_A_1
		(idEvents7_T1_2, sT1_2) 
	= T1_A_en(idEvents7_T1_1, sT1_1, false);
		

	(idEvents7_T1, sT1) 
	=  (idEvents7_T1_2, sT1_2);


	tel

	until true restart POINTEvents7_T1



	state T1_A__TO__T1_B_1:

	 var 	idEvents7_T1_2, idEvents7_T1_3:int;
	sT1_2:real;
	let

		-- transition trace :
	--T1_A__To__T1_B_1
		(idEvents7_T1_2) 
	= T1_A_ex(idEvents7_T1_1, false);
		

		(idEvents7_T1_3, sT1_2) 
	= T1_B_en(idEvents7_T1_2, sT1_1, false);
		

	(idEvents7_T1, sT1) 
	=  (idEvents7_T1_3, sT1_2);


	tel

	until true restart POINTEvents7_T1



	state T1_B__TO__T1_A_1:

	 var 	idEvents7_T1_2, idEvents7_T1_3:int;
	sT1_2:real;
	let

		-- transition trace :
	--T1_B__To__T1_A_1
		(idEvents7_T1_2) 
	= T1_B_ex(idEvents7_T1_1, false);
		

		(idEvents7_T1_3, sT1_2) 
	= T1_A_en(idEvents7_T1_2, sT1_1, false);
		

	(idEvents7_T1, sT1) 
	=  (idEvents7_T1_3, sT1_2);


	tel

	until true restart POINTEvents7_T1



	state T1_A_IDL:

	 	let

		

	(idEvents7_T1, sT1) 
	= (idEvents7_T1_1, sT1_1);
	

	tel

	until true restart POINTEvents7_T1



	state T1_B_IDL:

	 	let

		

	(idEvents7_T1, sT1) 
	= (idEvents7_T1_1, sT1_1);
	

	tel

	until true restart POINTEvents7_T1



tel


--***************************************************State :Events7_Events7 Automaton***************************************************

node Events7_Events7_node(idEvents7_Events7_1:int;
	idEvents7_T1_1:int;
	sT1_1:real;
	idEvents7_T2_1:int;
	sT2_1:real;
	E:bool)

returns (idEvents7_Events7:int;
	idEvents7_T1:int;
	sT1:real;
	idEvents7_T2:int;
	sT2:real);


let

	 automaton events7_events7

	state POINTEvents7_Events7:
	unless (idEvents7_Events7_1=0) restart EVENTS7_EVENTS7_PARALLEL_ENTRY
	unless true  restart EVENTS7_EVENTS7_PARALLEL_IDL

	let

		(idEvents7_Events7, idEvents7_T1, sT1, idEvents7_T2, sT2) 
	= (idEvents7_Events7_1, idEvents7_T1_1, sT1_1, idEvents7_T2_1, sT2_1);
	

	tel



	state EVENTS7_EVENTS7_PARALLEL_ENTRY:

	 var 	idEvents7_Events7_2, idEvents7_Events7_3:int;
	idEvents7_T1_2:int;
	sT1_2:real;
	idEvents7_T2_2:int;
	sT2_2:real;
	let

		
	(idEvents7_T1_2, idEvents7_Events7_2, sT1_2) 
	= Events7_T1_en(idEvents7_T1_1, idEvents7_Events7_1, sT1_1, false);

	(idEvents7_T2_2, idEvents7_Events7_3, sT2_2) 
	= Events7_T2_en(idEvents7_T2_1, idEvents7_Events7_2, sT2_1, false);


	(idEvents7_Events7, idEvents7_T1, sT1, idEvents7_T2, sT2) 
	= (idEvents7_Events7_3, idEvents7_T1_2, sT1_2, idEvents7_T2_2, sT2_2);
	

	tel

	until true restart POINTEvents7_Events7



	state EVENTS7_EVENTS7_PARALLEL_IDL:

	 var 	idEvents7_T1_2:int;
	sT1_2:real;
	idEvents7_T2_2:int;
	sT2_2:real;
	let

		

		(idEvents7_T1_2, sT1_2)
	= if not (idEvents7_T1_1= 0 ) then Events7_T1_node(idEvents7_T1_1, sT1_1, E)

		 else (idEvents7_T1_1, sT1_1);

		

		

		(idEvents7_T2_2, sT2_2)
	= if not (idEvents7_T2_1= 0 ) then Events7_T2_node(idEvents7_T2_1, sT2_1, idEvents7_T1_2)

		 else (idEvents7_T2_1, sT2_1);

		

		

	(idEvents7_Events7, idEvents7_T1, sT1, idEvents7_T2, sT2) 
	= (idEvents7_Events7_1, idEvents7_T1_2, sT1_2, idEvents7_T2_2, sT2_2);
	

	tel

	until true restart POINTEvents7_Events7



tel


--***************************************************State :Events7_Events7 Automaton***************************************************

node Events7_Events7(E:bool)

returns (sT1:real;
	sT2:real);


var sT1_1: real;

	sT2_1: real;

	idEvents7_Events7, idEvents7_Events7_1: int;

	idEvents7_T2, idEvents7_T2_1: int;

	idEvents7_T1, idEvents7_T1_1: int;

	let

	sT1_1 = 0.0 -> pre sT1;

	sT2_1 = 0.0 -> pre sT2;

	idEvents7_Events7_1 = 0 -> pre idEvents7_Events7;

	idEvents7_T2_1 = 0 -> pre idEvents7_T2;

	idEvents7_T1_1 = 0 -> pre idEvents7_T1;

	



	(idEvents7_Events7, idEvents7_T1, sT1, idEvents7_T2, sT2)
	 = 

	 if E then Events7_Events7_node(idEvents7_Events7_1, idEvents7_T1_1, sT1_1, idEvents7_T2_1, sT2_1, E)

	 else (idEvents7_Events7_1, idEvents7_T1_1, sT1_1, idEvents7_T2_1, sT2_1);

	


--unused outputs
	

tel



node Events7 (E_1_1 : real)
returns (sT1_1_1 : real;
	sT2_2_1 : real); 
var
	Events7_1_1 : real; Events7_2_1 : real;
	E_1_1_event: bool;
let 
	E_1_1_event = false -> ((pre(E_1_1) > 0.0 and E_1_1 <= 0.0) or (pre(E_1_1) <= 0.0 and E_1_1 > 0.0));
	(Events7_1_1, Events7_2_1) =  Events7_Events7(E_1_1_event);
	sT1_1_1 = Events7_1_1;
	sT2_2_1 = Events7_2_1;
tel

