-- This file has been generated by cocoSim


-- System nodes






node Mode_logic_SETUP__To__Mode_logic_Mode_logicJunction1709_1_Condition_Action(steps_to_cook:int;
	steps_remaining_1:int)

returns (steps_remaining:int);


var 	steps_remaining_2:int;


let



	steps_remaining_2 
	= steps_to_cook;
	

	(steps_remaining) 
	= (steps_remaining_2);
	

tel











node RUNNING_COOKING__To__RUNNING_COOKING_2_Transition_Action(steps_remaining_1:int)

returns (steps_remaining:int);


var 	steps_remaining_2:int;


let



	steps_remaining_2 
	=  steps_remaining_1  - 1;
	

	(steps_remaining) 
	= (steps_remaining_2);
	

tel









-- Entry action for state :RUNNING_COOKING
node RUNNING_COOKING_en(idMode_logic_RUNNING_1:int;
	mode_1:int;
	isInner:bool)

returns (idMode_logic_RUNNING:int;
	mode:int);


var 	idMode_logic_RUNNING_2:int;
	mode_2:int;


let



	-- set state as active 
	idMode_logic_RUNNING_2 
	= 1693;
	

	mode_2 
	= if (not isInner) then 2
	 else mode_1;
	

	(idMode_logic_RUNNING, mode) 
	= (idMode_logic_RUNNING_2, mode_2);
	

tel





-- Exit action for state :RUNNING_COOKING
node RUNNING_COOKING_ex(idMode_logic_RUNNING_1:int;
	isInner:bool)

returns (idMode_logic_RUNNING:int);


var 	idMode_logic_RUNNING_2:int;


let



	-- set state as inactive 
	idMode_logic_RUNNING_2
	 = if (not isInner) then 0 else idMode_logic_RUNNING_1;


	(idMode_logic_RUNNING) 
	= (idMode_logic_RUNNING_1);
	

tel






-- Entry action for state :RUNNING_SUSPENDED
node RUNNING_SUSPENDED_en(idMode_logic_RUNNING_1:int;
	mode_1:int;
	isInner:bool)

returns (idMode_logic_RUNNING:int;
	mode:int);


var 	idMode_logic_RUNNING_2:int;
	mode_2:int;


let



	-- set state as active 
	idMode_logic_RUNNING_2 
	= 1694;
	

	mode_2 
	= if (not isInner) then 3
	 else mode_1;
	

	(idMode_logic_RUNNING, mode) 
	= (idMode_logic_RUNNING_2, mode_2);
	

tel





-- Exit action for state :RUNNING_SUSPENDED
node RUNNING_SUSPENDED_ex(idMode_logic_RUNNING_1:int;
	isInner:bool)

returns (idMode_logic_RUNNING:int);


var 	idMode_logic_RUNNING_2:int;


let



	-- set state as inactive 
	idMode_logic_RUNNING_2
	 = if (not isInner) then 0 else idMode_logic_RUNNING_1;


	(idMode_logic_RUNNING) 
	= (idMode_logic_RUNNING_1);
	

tel






-- Entry action for state :Mode_logic_RUNNING
node Mode_logic_RUNNING_en(idMode_logic_RUNNING_1:int;
	idMode_logic_Mode_logic_1:int;
	door_closed:bool;
	mode_1:int;
	isInner:bool)

returns (idMode_logic_RUNNING:int;
	idMode_logic_Mode_logic:int;
	mode:int);


var 	idMode_logic_RUNNING_2, idMode_logic_RUNNING_3, idMode_logic_RUNNING_4, idMode_logic_RUNNING_5, idMode_logic_RUNNING_6, idMode_logic_RUNNING_7:int;
	idMode_logic_Mode_logic_2, idMode_logic_Mode_logic_3, idMode_logic_Mode_logic_4:int;
	mode_2, mode_3, mode_4, mode_5, mode_6, mode_7:int;


let



	-- set state as active 
	idMode_logic_Mode_logic_2 
	= 1695;
	

	


-- transition trace :
	--POINT__To__Junction1696_1, Junction1696__To__RUNNING_COOKING_1
		(idMode_logic_RUNNING_2, mode_2) 
	= 
		 if (( door_closed )) then 
		RUNNING_COOKING_en(idMode_logic_RUNNING_1, mode_1, false)
		 else (idMode_logic_RUNNING_1, mode_1);
		


-- transition trace :
	--POINT__To__Junction1696_1, Junction1696__To__RUNNING_SUSPENDED_2
		(idMode_logic_RUNNING_3, mode_3) 
	= RUNNING_SUSPENDED_en(idMode_logic_RUNNING_1, mode_1, false);
		

	(idMode_logic_RUNNING_4, idMode_logic_Mode_logic_3, mode_4) 
	= 

	if ( idMode_logic_RUNNING_1 = 0) then

	
		 if (( door_closed )) then 
		(idMode_logic_RUNNING_2, idMode_logic_Mode_logic_2, mode_2)
		 else (idMode_logic_RUNNING_3, idMode_logic_Mode_logic_2, mode_3)

	 else(idMode_logic_RUNNING_1, idMode_logic_Mode_logic_2, mode_1);

	

	(idMode_logic_RUNNING_5, mode_5) 
	= 
	if ( idMode_logic_RUNNING_1 = 1693) then
	RUNNING_COOKING_en(idMode_logic_RUNNING_1, mode_1, false)
	 else (idMode_logic_RUNNING_1, mode_1);

	

	(idMode_logic_RUNNING_6, mode_6) 
	= 
	if ( idMode_logic_RUNNING_1 = 1694) then
	RUNNING_SUSPENDED_en(idMode_logic_RUNNING_1, mode_1, false)
	 else (idMode_logic_RUNNING_1, mode_1);

	

	(idMode_logic_RUNNING_7, idMode_logic_Mode_logic_4, mode_7) 
	= 
		 if ( idMode_logic_RUNNING_1 = 0) then 
		(idMode_logic_RUNNING_4, idMode_logic_Mode_logic_3, mode_4)
		 else
		 if ( idMode_logic_RUNNING_1 = 1693) then 
		(idMode_logic_RUNNING_5, idMode_logic_Mode_logic_3, mode_5)
		 else
		 if ( idMode_logic_RUNNING_1 = 1694) then 
		(idMode_logic_RUNNING_6, idMode_logic_Mode_logic_3, mode_6)
		 else (idMode_logic_RUNNING_1, idMode_logic_Mode_logic_2, mode_1);


	(idMode_logic_RUNNING, idMode_logic_Mode_logic, mode) 
	= (idMode_logic_RUNNING_7, idMode_logic_Mode_logic_4, mode_7);
	

tel





-- Exit action for state :Mode_logic_RUNNING
node Mode_logic_RUNNING_ex(idMode_logic_RUNNING_1:int;
	idMode_logic_Mode_logic_1:int;
	isInner:bool)

returns (idMode_logic_RUNNING:int;
	idMode_logic_Mode_logic:int);


var 	idMode_logic_RUNNING_2, idMode_logic_RUNNING_3, idMode_logic_RUNNING_4, idMode_logic_RUNNING_5:int;
	idMode_logic_Mode_logic_2:int;


let



	
	(idMode_logic_RUNNING_2) 
	= 
	if ( idMode_logic_RUNNING_1 = 1693) then
	RUNNING_COOKING_ex(idMode_logic_RUNNING_1, false)
	 else (idMode_logic_RUNNING_1);

	

	(idMode_logic_RUNNING_3) 
	= 
	if ( idMode_logic_RUNNING_1 = 1694) then
	RUNNING_SUSPENDED_ex(idMode_logic_RUNNING_1, false)
	 else (idMode_logic_RUNNING_1);

	

	(idMode_logic_RUNNING_4) 
	= 
		 if ( idMode_logic_RUNNING_1 = 1693) then 
		(idMode_logic_RUNNING_2)
		 else
		 if ( idMode_logic_RUNNING_1 = 1694) then 
		(idMode_logic_RUNNING_3)
		 else (idMode_logic_RUNNING_1);


	-- set state as inactive 
	idMode_logic_Mode_logic_2
	 = if (not isInner) then 0 else idMode_logic_Mode_logic_1;

	idMode_logic_RUNNING_5 
	= 0;
	

	(idMode_logic_RUNNING, idMode_logic_Mode_logic) 
	= (idMode_logic_RUNNING_5, idMode_logic_Mode_logic_1);
	

tel






-- Entry action for state :Mode_logic_SETUP
node Mode_logic_SETUP_en(idMode_logic_Mode_logic_1:int;
	mode_1:int;
	steps_to_cook:int;
	steps_remaining_1:int;
	isInner:bool)

returns (idMode_logic_Mode_logic:int;
	mode:int;
	steps_remaining:int);


var 	idMode_logic_Mode_logic_2:int;
	mode_2:int;
	steps_remaining_2:int;


let



	-- set state as active 
	idMode_logic_Mode_logic_2 
	= 1692;
	

	mode_2 
	= if (not isInner) then 1
	 else mode_1;
	

	steps_remaining_2 
	= if (not isInner) then steps_to_cook
	 else steps_remaining_1;
	

	(idMode_logic_Mode_logic, mode, steps_remaining) 
	= (idMode_logic_Mode_logic_2, mode_2, steps_remaining_2);
	

tel





-- Exit action for state :Mode_logic_SETUP
node Mode_logic_SETUP_ex(idMode_logic_Mode_logic_1:int;
	isInner:bool)

returns (idMode_logic_Mode_logic:int);


var 	idMode_logic_Mode_logic_2:int;


let



	-- set state as inactive 
	idMode_logic_Mode_logic_2
	 = if (not isInner) then 0 else idMode_logic_Mode_logic_1;


	(idMode_logic_Mode_logic) 
	= (idMode_logic_Mode_logic_1);
	

tel


--***************************************************State :Mode_logic_RUNNING Automaton***************************************************

node Mode_logic_RUNNING_node(idMode_logic_RUNNING_1:int;
	door_closed:bool;
	mode_1:int;
	clear:bool;
	steps_remaining_1:int;
	idMode_logic_Mode_logic_1:int;
	steps_to_cook:int;
	start:bool)

returns (idMode_logic_RUNNING:int;
	mode:int;
	steps_remaining:int;
	idMode_logic_Mode_logic:int);


let

	 automaton mode_logic_running

	state POINTMode_logic_RUNNING:
	unless (idMode_logic_RUNNING_1=0) restart POINT__TO__MODE_LOGIC_MODE_LOGICJUNCTION1696_1



	unless (idMode_logic_RUNNING_1=1693) and ( clear or not door_closed ) restart RUNNING_COOKING__TO__RUNNING_SUSPENDED_1



	unless (idMode_logic_RUNNING_1=1693) and (  steps_remaining_1 >0 ) restart RUNNING_COOKING__TO__RUNNING_COOKING_2



	unless (idMode_logic_RUNNING_1=1694) and ( clear ) restart RUNNING_SUSPENDED__TO__MODE_LOGIC_MODE_LOGICJUNCTION1710_1



	unless (idMode_logic_RUNNING_1=1694) and ( start and door_closed ) restart RUNNING_SUSPENDED__TO__RUNNING_COOKING_2



	unless (idMode_logic_RUNNING_1=1693) restart RUNNING_COOKING_IDL

	unless (idMode_logic_RUNNING_1=1694) restart RUNNING_SUSPENDED_IDL

	let

		(idMode_logic_RUNNING, mode, steps_remaining, idMode_logic_Mode_logic) 
	= (idMode_logic_RUNNING_1, mode_1, steps_remaining_1, idMode_logic_Mode_logic_1);
	

	tel



	state POINT__TO__MODE_LOGIC_MODE_LOGICJUNCTION1696_1:

	 var 	idMode_logic_RUNNING_2, idMode_logic_RUNNING_3:int;
	mode_2, mode_3:int;
	let

		

-- transition trace :
	--POINT__To__Junction1696_1, Junction1696__To__RUNNING_COOKING_1
		(idMode_logic_RUNNING_2, mode_2) 
	= 
		 if (( door_closed )) then 
		RUNNING_COOKING_en(idMode_logic_RUNNING_1, mode_1, false)
		 else (idMode_logic_RUNNING_1, mode_1);
		


-- transition trace :
	--POINT__To__Junction1696_1, Junction1696__To__RUNNING_SUSPENDED_2
		(idMode_logic_RUNNING_3, mode_3) 
	= RUNNING_SUSPENDED_en(idMode_logic_RUNNING_1, mode_1, false);
		

	(idMode_logic_RUNNING, mode) 
	= 
		 if (( door_closed )) then 
		(idMode_logic_RUNNING_2, mode_2)
		 else (idMode_logic_RUNNING_3, mode_3);

	--add unused variables
	(idMode_logic_Mode_logic, steps_remaining) 
	= (idMode_logic_Mode_logic_1, steps_remaining_1);
	

	tel

	until true restart POINTMode_logic_RUNNING



	state RUNNING_COOKING__TO__RUNNING_SUSPENDED_1:

	 var 	idMode_logic_RUNNING_2, idMode_logic_RUNNING_3:int;
	mode_2:int;
	let

		-- transition trace :
	--RUNNING_COOKING__To__RUNNING_SUSPENDED_1
		(idMode_logic_RUNNING_2) 
	= RUNNING_COOKING_ex(idMode_logic_RUNNING_1, false);
		

		(idMode_logic_RUNNING_3, mode_2) 
	= RUNNING_SUSPENDED_en(idMode_logic_RUNNING_2, mode_1, false);
		

	(idMode_logic_RUNNING, mode) 
	=  (idMode_logic_RUNNING_3, mode_2);

	--add unused variables
	(idMode_logic_Mode_logic, steps_remaining) 
	= (idMode_logic_Mode_logic_1, steps_remaining_1);
	

	tel

	until true restart POINTMode_logic_RUNNING



	state RUNNING_COOKING__TO__RUNNING_COOKING_2:

	 var 	idMode_logic_RUNNING_2, idMode_logic_RUNNING_3:int;
	mode_2:int;
	steps_remaining_2:int;
	let

		-- transition trace :
	--RUNNING_COOKING__To__RUNNING_COOKING_2
		(idMode_logic_RUNNING_2) 
	= RUNNING_COOKING_ex(idMode_logic_RUNNING_1, false);
		

		(steps_remaining_2) 
	= RUNNING_COOKING__To__RUNNING_COOKING_2_Transition_Action(steps_remaining_1);
		

		(idMode_logic_RUNNING_3, mode_2) 
	= RUNNING_COOKING_en(idMode_logic_RUNNING_2, mode_1, false);
		

	(idMode_logic_RUNNING, mode, steps_remaining) 
	=  (idMode_logic_RUNNING_3, mode_2, steps_remaining_2);

	--add unused variables
	(idMode_logic_Mode_logic) 
	= (idMode_logic_Mode_logic_1);
	

	tel

	until true restart POINTMode_logic_RUNNING



	state RUNNING_SUSPENDED__TO__MODE_LOGIC_MODE_LOGICJUNCTION1710_1:

	 var 	idMode_logic_RUNNING_2:int;
	mode_2:int;
	steps_remaining_2:int;
	idMode_logic_Mode_logic_2, idMode_logic_Mode_logic_3:int;
	let

		

-- transition trace :
	--RUNNING_SUSPENDED__To__Junction1710_1, Junction1710__To__Mode_logic_SETUP_1
		(idMode_logic_RUNNING_2, idMode_logic_Mode_logic_2) 
	= Mode_logic_RUNNING_ex(idMode_logic_RUNNING_1, idMode_logic_Mode_logic_1, false);
		

		(idMode_logic_Mode_logic_3, mode_2, steps_remaining_2) 
	= Mode_logic_SETUP_en(idMode_logic_Mode_logic_2, mode_1, steps_to_cook, steps_remaining_1, false);
		

	(idMode_logic_RUNNING, mode, steps_remaining, idMode_logic_Mode_logic) 
	=  (idMode_logic_RUNNING_2, mode_2, steps_remaining_2, idMode_logic_Mode_logic_3);


	tel

	until true restart POINTMode_logic_RUNNING



	state RUNNING_SUSPENDED__TO__RUNNING_COOKING_2:

	 var 	idMode_logic_RUNNING_2, idMode_logic_RUNNING_3:int;
	mode_2:int;
	let

		-- transition trace :
	--RUNNING_SUSPENDED__To__RUNNING_COOKING_2
		(idMode_logic_RUNNING_2) 
	= RUNNING_SUSPENDED_ex(idMode_logic_RUNNING_1, false);
		

		(idMode_logic_RUNNING_3, mode_2) 
	= RUNNING_COOKING_en(idMode_logic_RUNNING_2, mode_1, false);
		

	(idMode_logic_RUNNING, mode, steps_remaining, idMode_logic_Mode_logic) 
	=  (idMode_logic_RUNNING_3, mode_2, steps_remaining_1, idMode_logic_Mode_logic_1);


	tel

	until true restart POINTMode_logic_RUNNING



	state RUNNING_COOKING_IDL:

	 	let

		

	(idMode_logic_RUNNING, mode, steps_remaining, idMode_logic_Mode_logic) 
	= (idMode_logic_RUNNING_1, mode_1, steps_remaining_1, idMode_logic_Mode_logic_1);
	

	tel

	until true restart POINTMode_logic_RUNNING



	state RUNNING_SUSPENDED_IDL:

	 	let

		

	(idMode_logic_RUNNING, mode, steps_remaining, idMode_logic_Mode_logic) 
	= (idMode_logic_RUNNING_1, mode_1, steps_remaining_1, idMode_logic_Mode_logic_1);
	

	tel

	until true restart POINTMode_logic_RUNNING



tel


--***************************************************State :Mode_logic_Mode_logic Automaton***************************************************

node Mode_logic_Mode_logic_node(idMode_logic_Mode_logic_1:int;
	mode_1:int;
	steps_remaining_1:int;
	steps_to_cook:int;
	start:bool;
	door_closed:bool;
	idMode_logic_RUNNING_1:int;
	clear:bool)

returns (idMode_logic_Mode_logic:int;
	mode:int;
	steps_remaining:int;
	idMode_logic_RUNNING:int);


let

	 automaton mode_logic_mode_logic

	state POINTMode_logic_Mode_logic:
	unless (idMode_logic_Mode_logic_1=0) restart POINT__TO__MODE_LOGIC_SETUP_1



	unless (idMode_logic_Mode_logic_1=1692) restart MODE_LOGIC_SETUP__TO__MODE_LOGIC_MODE_LOGICJUNCTION1709_1



	unless (idMode_logic_Mode_logic_1=1695) and (  steps_remaining_1 <=0 ) restart MODE_LOGIC_RUNNING__TO__MODE_LOGIC_MODE_LOGICJUNCTION1710_1



	unless (idMode_logic_Mode_logic_1=1692) restart MODE_LOGIC_SETUP_IDL

	unless (idMode_logic_Mode_logic_1=1695) restart MODE_LOGIC_RUNNING_IDL

	let

		(idMode_logic_Mode_logic, mode, steps_remaining, idMode_logic_RUNNING) 
	= (idMode_logic_Mode_logic_1, mode_1, steps_remaining_1, idMode_logic_RUNNING_1);
	

	tel



	state POINT__TO__MODE_LOGIC_SETUP_1:

	 var 	idMode_logic_Mode_logic_2:int;
	mode_2:int;
	steps_remaining_2:int;
	let

		-- transition trace :
	--POINT__To__Mode_logic_SETUP_1
		(idMode_logic_Mode_logic_2, mode_2, steps_remaining_2) 
	= Mode_logic_SETUP_en(idMode_logic_Mode_logic_1, mode_1, steps_to_cook, steps_remaining_1, false);
		

	(idMode_logic_Mode_logic, mode, steps_remaining) 
	=  (idMode_logic_Mode_logic_2, mode_2, steps_remaining_2);

	--add unused variables
	(idMode_logic_RUNNING) 
	= (idMode_logic_RUNNING_1);
	

	tel

	until true restart POINTMode_logic_Mode_logic



	state MODE_LOGIC_SETUP__TO__MODE_LOGIC_MODE_LOGICJUNCTION1709_1:

	 var 	idMode_logic_Mode_logic_2, idMode_logic_Mode_logic_3:int;
	mode_2:int;
	steps_remaining_2:int;
	idMode_logic_RUNNING_2:int;
	let

		

-- transition trace :
	--Mode_logic_SETUP__To__Junction1709_1, Junction1709__To__Mode_logic_RUNNING_1
		-- condition Action : steps_remaining=steps_to_cook;
		
		(steps_remaining_2) 
	= Mode_logic_SETUP__To__Mode_logic_Mode_logicJunction1709_1_Condition_Action(steps_to_cook, steps_remaining_1);
		

		(idMode_logic_Mode_logic_2) 
	= 
		 if (( start and  steps_remaining_2 >0 )) then 
		Mode_logic_SETUP_ex(idMode_logic_Mode_logic_1, false)
		 else (idMode_logic_Mode_logic_1);
		

		(idMode_logic_RUNNING_2, idMode_logic_Mode_logic_3, mode_2) 
	= 
		 if (( start and  steps_remaining_2 >0 )) then 
		Mode_logic_RUNNING_en(idMode_logic_RUNNING_1, idMode_logic_Mode_logic_2, door_closed, mode_1, false)
		 else (idMode_logic_RUNNING_1, idMode_logic_Mode_logic_2, mode_1);
		

	(idMode_logic_Mode_logic, mode, steps_remaining, idMode_logic_RUNNING) 
	= 
		 if (( start and  steps_remaining_2 >0 )) then 
		(idMode_logic_Mode_logic_3, mode_2, steps_remaining_2, idMode_logic_RUNNING_2)
		 else (idMode_logic_Mode_logic_1, mode_1, steps_remaining_2, idMode_logic_RUNNING_1);


	tel

	until true restart POINTMode_logic_Mode_logic



	state MODE_LOGIC_RUNNING__TO__MODE_LOGIC_MODE_LOGICJUNCTION1710_1:

	 var 	idMode_logic_Mode_logic_2, idMode_logic_Mode_logic_3:int;
	mode_2:int;
	steps_remaining_2:int;
	idMode_logic_RUNNING_2:int;
	let

		

-- transition trace :
	--Mode_logic_RUNNING__To__Junction1710_1, Junction1710__To__Mode_logic_SETUP_1
		(idMode_logic_RUNNING_2, idMode_logic_Mode_logic_2) 
	= Mode_logic_RUNNING_ex(idMode_logic_RUNNING_1, idMode_logic_Mode_logic_1, false);
		

		(idMode_logic_Mode_logic_3, mode_2, steps_remaining_2) 
	= Mode_logic_SETUP_en(idMode_logic_Mode_logic_2, mode_1, steps_to_cook, steps_remaining_1, false);
		

	(idMode_logic_Mode_logic, mode, steps_remaining, idMode_logic_RUNNING) 
	=  (idMode_logic_Mode_logic_3, mode_2, steps_remaining_2, idMode_logic_RUNNING_2);


	tel

	until true restart POINTMode_logic_Mode_logic



	state MODE_LOGIC_SETUP_IDL:

	 	let

		

	(idMode_logic_Mode_logic, mode, steps_remaining, idMode_logic_RUNNING) 
	= (idMode_logic_Mode_logic_1, mode_1, steps_remaining_1, idMode_logic_RUNNING_1);
	

	tel

	until true restart POINTMode_logic_Mode_logic



	state MODE_LOGIC_RUNNING_IDL:

	 var 	idMode_logic_Mode_logic_2:int;
	mode_2:int;
	steps_remaining_2:int;
	idMode_logic_RUNNING_2:int;
	let

		
	(idMode_logic_RUNNING_2, mode_2, steps_remaining_2, idMode_logic_Mode_logic_2) 
	= Mode_logic_RUNNING_node(idMode_logic_RUNNING_1, door_closed, mode_1, clear, steps_remaining_1, idMode_logic_Mode_logic_1, steps_to_cook, start);

		


	(idMode_logic_Mode_logic, mode, steps_remaining, idMode_logic_RUNNING) 
	= (idMode_logic_Mode_logic_2, mode_2, steps_remaining_2, idMode_logic_RUNNING_2);
	

	tel

	until true restart POINTMode_logic_Mode_logic



tel


--***************************************************State :Mode_logic_Mode_logic Automaton***************************************************

node Microwave_Mode_logic(start:bool;
	clear:bool;
	steps_to_cook:int;
	door_closed:bool)

returns (mode:int;
	steps_remaining:int);


var mode_1: int;

	steps_remaining_1: int;

	idMode_logic_Mode_logic, idMode_logic_Mode_logic_1: int;

	idMode_logic_RUNNING, idMode_logic_RUNNING_1: int;

	let

	mode_1 = 0 -> pre mode;

	steps_remaining_1 = 0 -> pre steps_remaining;

	idMode_logic_Mode_logic_1 = 0 -> pre idMode_logic_Mode_logic;

	idMode_logic_RUNNING_1 = 0 -> pre idMode_logic_RUNNING;

	



	(idMode_logic_Mode_logic, mode, steps_remaining, idMode_logic_RUNNING)
	 = Mode_logic_Mode_logic_node(idMode_logic_Mode_logic_1, mode_1, steps_remaining_1, steps_to_cook, start, door_closed, idMode_logic_RUNNING_1, clear);


--unused outputs
	

tel



node Microwave (start_1_1 : bool; clear_1_1 : bool; steps_to_cook_1_1 : int; door_closed_1_1 : bool)
returns (mode_1_1 : int;
	steps_remaining_2_1 : int); 
var
	Mode_logic_1_1 : int; Mode_logic_2_1 : int;
let 
	(Mode_logic_1_1, Mode_logic_2_1) =  Microwave_Mode_logic(start_1_1, clear_1_1, steps_to_cook_1_1, door_closed_1_1);
	mode_1_1 = Mode_logic_1_1;
	steps_remaining_2_1 = Mode_logic_2_1;
tel

