-- This file has been generated by CoCoSim


-- System nodes
node integrator_ext_reset_vector_test_PP_Integrator8 (f_lpar_x_rpar__1_1 : real; f_lpar_x_rpar__1_2 : real; reset_rising_1_1 : real; reset_rising_1_2 : real)
returns (F_lpar_x_rpar__1_1 : real; F_lpar_x_rpar__1_2 : real); 
var
	Constant_1_1 : real;
	DataTypeConversion_1_1 : real; DataTypeConversion_1_2 : real;
	DataTypeConversion1_1_1 : real; DataTypeConversion1_1_2 : real;
	Init_1_1 : real; Init_1_2 : real;
	Product_1_1 : real; Product_1_2 : real;
	Product2_1_1 : real; Product2_1_2 : real;
	Product_dimension2_1_1 : real; Product_dimension2_1_2 : real;
	Sample_1_1 : real; Sample_1_2 : real;
	Sum1_1_1 : real; Sum1_1_2 : real;
	Sum2_1_1 : real; Sum2_1_2 : real;
	Sum3_1_1 : real; Sum3_1_2 : real;
	Sum4_1_1 : real; Sum4_1_2 : real;
	Sum5_1_1 : real; Sum5_1_2 : real;
	Sum6_1_1 : real; Sum6_1_2 : real;
	UnitDelay_1_1 : real; UnitDelay_1_2 : real;
	UnitDelay1_1_1 : real;
	UnitDelay2_1_1 : real; UnitDelay2_1_2 : real;
	eq0_1_1 : bool; eq0_1_2 : bool;
	ne1_1_1 : bool; ne1_1_2 : bool;
	zero_1_1 : real;
let 
	Constant_1_1 = 0.00000000;
	DataTypeConversion_1_1 = (if eq0_1_1 then 1.0 else 0.0);
	DataTypeConversion_1_2 = (if eq0_1_2 then 1.0 else 0.0);
	DataTypeConversion1_1_1 = (if ne1_1_1 then 1.0 else 0.0);
	DataTypeConversion1_1_2 = (if ne1_1_2 then 1.0 else 0.0);
	Init_1_1 = 2.00000000;
	Init_1_2 = 0.50000000;
	Product_1_1 = Init_1_1 * Product_dimension2_1_1;
	Product_1_2 = Init_1_2 * Product_dimension2_1_2;
	Product2_1_1 = Sum3_1_1 * DataTypeConversion_1_1 * DataTypeConversion1_1_1;
	Product2_1_2 = Sum3_1_2 * DataTypeConversion_1_2 * DataTypeConversion1_1_2;
	Product_dimension2_1_1 = 1.00000000 * UnitDelay1_1_1;
	Product_dimension2_1_2 = 1.00000000 * UnitDelay1_1_1;
	Sample_1_1 = 1.00000000 * f_lpar_x_rpar__1_1;
	Sample_1_2 = 1.00000000 * f_lpar_x_rpar__1_2;
	Sum1_1_1 = Sample_1_1 + Sum2_1_1;
	Sum1_1_2 = Sample_1_2 + Sum2_1_2;
	Sum2_1_1 = Sum4_1_1 + Product_1_1;
	Sum2_1_2 = Sum4_1_2 + Product_1_2;
	Sum3_1_1 =  - UnitDelay_1_1 + Init_1_1;
	Sum3_1_2 =  - UnitDelay_1_2 + Init_1_2;
	Sum4_1_1 = UnitDelay_1_1 + Product2_1_1;
	Sum4_1_2 = UnitDelay_1_2 + Product2_1_2;
	Sum5_1_1 = UnitDelay_1_1 + Product_1_1;
	Sum5_1_2 = UnitDelay_1_2 + Product_1_2;
	Sum6_1_1 = Sum5_1_1 + Product2_1_1;
	Sum6_1_2 = Sum5_1_2 + Product2_1_2;
	UnitDelay_1_1 = 0.00000000 -> pre Sum1_1_1;
	UnitDelay_1_2 = 0.00000000 -> pre Sum1_1_2;
	UnitDelay1_1_1 = 1.00000000 -> pre Constant_1_1;
	UnitDelay2_1_1 = 0.00000000 -> pre reset_rising_1_1;
	UnitDelay2_1_2 = 0.00000000 -> pre reset_rising_1_2;
	eq0_1_1 = reset_rising_1_1 > zero_1_1;
	eq0_1_2 = reset_rising_1_2 > zero_1_1;
	ne1_1_1 = UnitDelay2_1_1 <= zero_1_1;
	ne1_1_2 = UnitDelay2_1_2 <= zero_1_1;
	zero_1_1 = 0.00000000;
	F_lpar_x_rpar__1_1 = Sum6_1_1;
	F_lpar_x_rpar__1_2 = Sum6_1_2;
tel

node integrator_ext_reset_vector_test_PP_Integrator7 (f_lpar_x_rpar__1_1 : real; reset_rising_1_1 : real; reset_rising_1_2 : real)
returns (F_lpar_x_rpar__1_1 : real; F_lpar_x_rpar__1_2 : real); 
var
	Constant_1_1 : real;
	DataTypeConversion_1_1 : real; DataTypeConversion_1_2 : real;
	DataTypeConversion1_1_1 : real; DataTypeConversion1_1_2 : real;
	Init_1_1 : real; Init_1_2 : real;
	Product_1_1 : real; Product_1_2 : real;
	Product2_1_1 : real; Product2_1_2 : real;
	Product_dimension2_1_1 : real; Product_dimension2_1_2 : real;
	Sample_1_1 : real;
	Sum1_1_1 : real; Sum1_1_2 : real;
	Sum2_1_1 : real; Sum2_1_2 : real;
	Sum3_1_1 : real; Sum3_1_2 : real;
	Sum4_1_1 : real; Sum4_1_2 : real;
	Sum5_1_1 : real; Sum5_1_2 : real;
	Sum6_1_1 : real; Sum6_1_2 : real;
	UnitDelay_1_1 : real; UnitDelay_1_2 : real;
	UnitDelay1_1_1 : real;
	UnitDelay2_1_1 : real; UnitDelay2_1_2 : real;
	eq0_1_1 : bool; eq0_1_2 : bool;
	ne1_1_1 : bool; ne1_1_2 : bool;
	zero_1_1 : real;
let 
	Constant_1_1 = 0.00000000;
	DataTypeConversion_1_1 = (if eq0_1_1 then 1.0 else 0.0);
	DataTypeConversion_1_2 = (if eq0_1_2 then 1.0 else 0.0);
	DataTypeConversion1_1_1 = (if ne1_1_1 then 1.0 else 0.0);
	DataTypeConversion1_1_2 = (if ne1_1_2 then 1.0 else 0.0);
	Init_1_1 = 2.00000000;
	Init_1_2 = 0.50000000;
	Product_1_1 = Init_1_1 * Product_dimension2_1_1;
	Product_1_2 = Init_1_2 * Product_dimension2_1_2;
	Product2_1_1 = Sum3_1_1 * DataTypeConversion_1_1 * DataTypeConversion1_1_1;
	Product2_1_2 = Sum3_1_2 * DataTypeConversion_1_2 * DataTypeConversion1_1_2;
	Product_dimension2_1_1 = 1.00000000 * UnitDelay1_1_1;
	Product_dimension2_1_2 = 1.00000000 * UnitDelay1_1_1;
	Sample_1_1 = 1.00000000 * f_lpar_x_rpar__1_1;
	Sum1_1_1 = Sample_1_1 + Sum2_1_1;
	Sum1_1_2 = Sample_1_1 + Sum2_1_2;
	Sum2_1_1 = Sum4_1_1 + Product_1_1;
	Sum2_1_2 = Sum4_1_2 + Product_1_2;
	Sum3_1_1 =  - UnitDelay_1_1 + Init_1_1;
	Sum3_1_2 =  - UnitDelay_1_2 + Init_1_2;
	Sum4_1_1 = UnitDelay_1_1 + Product2_1_1;
	Sum4_1_2 = UnitDelay_1_2 + Product2_1_2;
	Sum5_1_1 = UnitDelay_1_1 + Product_1_1;
	Sum5_1_2 = UnitDelay_1_2 + Product_1_2;
	Sum6_1_1 = Sum5_1_1 + Product2_1_1;
	Sum6_1_2 = Sum5_1_2 + Product2_1_2;
	UnitDelay_1_1 = 0.00000000 -> pre Sum1_1_1;
	UnitDelay_1_2 = 0.00000000 -> pre Sum1_1_2;
	UnitDelay1_1_1 = 1.00000000 -> pre Constant_1_1;
	UnitDelay2_1_1 = 0.00000000 -> pre reset_rising_1_1;
	UnitDelay2_1_2 = 0.00000000 -> pre reset_rising_1_2;
	eq0_1_1 = reset_rising_1_1 > zero_1_1;
	eq0_1_2 = reset_rising_1_2 > zero_1_1;
	ne1_1_1 = UnitDelay2_1_1 <= zero_1_1;
	ne1_1_2 = UnitDelay2_1_2 <= zero_1_1;
	zero_1_1 = 0.00000000;
	F_lpar_x_rpar__1_1 = Sum6_1_1;
	F_lpar_x_rpar__1_2 = Sum6_1_2;
tel

node integrator_ext_reset_vector_test_PP_Integrator6 (f_lpar_x_rpar__1_1 : real; f_lpar_x_rpar__1_2 : real; reset_rising_1_1 : real)
returns (F_lpar_x_rpar__1_1 : real; F_lpar_x_rpar__1_2 : real); 
var
	Constant_1_1 : real;
	DataTypeConversion_1_1 : real;
	DataTypeConversion1_1_1 : real;
	Init_1_1 : real; Init_1_2 : real;
	Product_1_1 : real; Product_1_2 : real;
	Product2_1_1 : real; Product2_1_2 : real;
	Product2_dimension2_1_1 : real; Product2_dimension2_1_2 : real;
	Product2_dimension3_1_1 : real; Product2_dimension3_1_2 : real;
	Product_dimension2_1_1 : real; Product_dimension2_1_2 : real;
	Sample_1_1 : real; Sample_1_2 : real;
	Sum1_1_1 : real; Sum1_1_2 : real;
	Sum2_1_1 : real; Sum2_1_2 : real;
	Sum3_1_1 : real; Sum3_1_2 : real;
	Sum4_1_1 : real; Sum4_1_2 : real;
	Sum5_1_1 : real; Sum5_1_2 : real;
	Sum6_1_1 : real; Sum6_1_2 : real;
	UnitDelay_1_1 : real; UnitDelay_1_2 : real;
	UnitDelay1_1_1 : real;
	UnitDelay2_1_1 : real;
	eq0_1_1 : bool;
	ne1_1_1 : bool;
	zero_1_1 : real;
let 
	Constant_1_1 = 0.00000000;
	DataTypeConversion_1_1 = (if eq0_1_1 then 1.0 else 0.0);
	DataTypeConversion1_1_1 = (if ne1_1_1 then 1.0 else 0.0);
	Init_1_1 = 2.00000000;
	Init_1_2 = 0.50000000;
	Product_1_1 = Init_1_1 * Product_dimension2_1_1;
	Product_1_2 = Init_1_2 * Product_dimension2_1_2;
	Product2_1_1 = Sum3_1_1 * Product2_dimension2_1_1 * Product2_dimension3_1_1;
	Product2_1_2 = Sum3_1_2 * Product2_dimension2_1_2 * Product2_dimension3_1_2;
	Product2_dimension2_1_1 = 1.00000000 * DataTypeConversion_1_1;
	Product2_dimension2_1_2 = 1.00000000 * DataTypeConversion_1_1;
	Product2_dimension3_1_1 = 1.00000000 * DataTypeConversion1_1_1;
	Product2_dimension3_1_2 = 1.00000000 * DataTypeConversion1_1_1;
	Product_dimension2_1_1 = 1.00000000 * UnitDelay1_1_1;
	Product_dimension2_1_2 = 1.00000000 * UnitDelay1_1_1;
	Sample_1_1 = 1.00000000 * f_lpar_x_rpar__1_1;
	Sample_1_2 = 1.00000000 * f_lpar_x_rpar__1_2;
	Sum1_1_1 = Sample_1_1 + Sum2_1_1;
	Sum1_1_2 = Sample_1_2 + Sum2_1_2;
	Sum2_1_1 = Sum4_1_1 + Product_1_1;
	Sum2_1_2 = Sum4_1_2 + Product_1_2;
	Sum3_1_1 =  - UnitDelay_1_1 + Init_1_1;
	Sum3_1_2 =  - UnitDelay_1_2 + Init_1_2;
	Sum4_1_1 = UnitDelay_1_1 + Product2_1_1;
	Sum4_1_2 = UnitDelay_1_2 + Product2_1_2;
	Sum5_1_1 = UnitDelay_1_1 + Product_1_1;
	Sum5_1_2 = UnitDelay_1_2 + Product_1_2;
	Sum6_1_1 = Sum5_1_1 + Product2_1_1;
	Sum6_1_2 = Sum5_1_2 + Product2_1_2;
	UnitDelay_1_1 = 0.00000000 -> pre Sum1_1_1;
	UnitDelay_1_2 = 0.00000000 -> pre Sum1_1_2;
	UnitDelay1_1_1 = 1.00000000 -> pre Constant_1_1;
	UnitDelay2_1_1 = 0.00000000 -> pre reset_rising_1_1;
	eq0_1_1 = reset_rising_1_1 > zero_1_1;
	ne1_1_1 = UnitDelay2_1_1 <= zero_1_1;
	zero_1_1 = 0.00000000;
	F_lpar_x_rpar__1_1 = Sum6_1_1;
	F_lpar_x_rpar__1_2 = Sum6_1_2;
tel

node integrator_ext_reset_vector_test_PP_Integrator5 (f_lpar_x_rpar__1_1 : real; f_lpar_x_rpar__1_2 : real; reset_rising_1_1 : real; reset_rising_1_2 : real)
returns (F_lpar_x_rpar__1_1 : real; F_lpar_x_rpar__1_2 : real); 
var
	Constant_1_1 : real;
	DataTypeConversion_1_1 : real; DataTypeConversion_1_2 : real;
	DataTypeConversion1_1_1 : real; DataTypeConversion1_1_2 : real;
	Init_1_1 : real; Init_1_2 : real;
	Product_1_1 : real; Product_1_2 : real;
	Product2_1_1 : real; Product2_1_2 : real;
	Product_dimension2_1_1 : real; Product_dimension2_1_2 : real;
	Sample_1_1 : real; Sample_1_2 : real;
	Sum1_1_1 : real; Sum1_1_2 : real;
	Sum2_1_1 : real; Sum2_1_2 : real;
	Sum3_1_1 : real; Sum3_1_2 : real;
	Sum4_1_1 : real; Sum4_1_2 : real;
	Sum5_1_1 : real; Sum5_1_2 : real;
	Sum6_1_1 : real; Sum6_1_2 : real;
	UnitDelay_1_1 : real; UnitDelay_1_2 : real;
	UnitDelay1_1_1 : real;
	UnitDelay2_1_1 : real; UnitDelay2_1_2 : real;
	eq0_1_1 : bool; eq0_1_2 : bool;
	ne1_1_1 : bool; ne1_1_2 : bool;
	zero_1_1 : real;
let 
	Constant_1_1 = 0.00000000;
	DataTypeConversion_1_1 = (if eq0_1_1 then 1.0 else 0.0);
	DataTypeConversion_1_2 = (if eq0_1_2 then 1.0 else 0.0);
	DataTypeConversion1_1_1 = (if ne1_1_1 then 1.0 else 0.0);
	DataTypeConversion1_1_2 = (if ne1_1_2 then 1.0 else 0.0);
	Init_1_1 = 2.00000000;
	Init_1_2 = 0.50000000;
	Product_1_1 = Init_1_1 * Product_dimension2_1_1;
	Product_1_2 = Init_1_2 * Product_dimension2_1_2;
	Product2_1_1 = Sum3_1_1 * DataTypeConversion_1_1 * DataTypeConversion1_1_1;
	Product2_1_2 = Sum3_1_2 * DataTypeConversion_1_2 * DataTypeConversion1_1_2;
	Product_dimension2_1_1 = 1.00000000 * UnitDelay1_1_1;
	Product_dimension2_1_2 = 1.00000000 * UnitDelay1_1_1;
	Sample_1_1 = 1.00000000 * f_lpar_x_rpar__1_1;
	Sample_1_2 = 1.00000000 * f_lpar_x_rpar__1_2;
	Sum1_1_1 = Sample_1_1 + Sum2_1_1;
	Sum1_1_2 = Sample_1_2 + Sum2_1_2;
	Sum2_1_1 = Sum4_1_1 + Product_1_1;
	Sum2_1_2 = Sum4_1_2 + Product_1_2;
	Sum3_1_1 =  - UnitDelay_1_1 + Init_1_1;
	Sum3_1_2 =  - UnitDelay_1_2 + Init_1_2;
	Sum4_1_1 = UnitDelay_1_1 + Product2_1_1;
	Sum4_1_2 = UnitDelay_1_2 + Product2_1_2;
	Sum5_1_1 = UnitDelay_1_1 + Product_1_1;
	Sum5_1_2 = UnitDelay_1_2 + Product_1_2;
	Sum6_1_1 = Sum5_1_1 + Product2_1_1;
	Sum6_1_2 = Sum5_1_2 + Product2_1_2;
	UnitDelay_1_1 = 0.00000000 -> pre Sum1_1_1;
	UnitDelay_1_2 = 0.00000000 -> pre Sum1_1_2;
	UnitDelay1_1_1 = 1.00000000 -> pre Constant_1_1;
	UnitDelay2_1_1 = 0.00000000 -> pre reset_rising_1_1;
	UnitDelay2_1_2 = 0.00000000 -> pre reset_rising_1_2;
	eq0_1_1 = reset_rising_1_1 > zero_1_1;
	eq0_1_2 = reset_rising_1_2 > zero_1_1;
	ne1_1_1 = UnitDelay2_1_1 <= zero_1_1;
	ne1_1_2 = UnitDelay2_1_2 <= zero_1_1;
	zero_1_1 = 0.00000000;
	F_lpar_x_rpar__1_1 = Sum6_1_1;
	F_lpar_x_rpar__1_2 = Sum6_1_2;
tel

node integrator_ext_reset_vector_test_PP_Integrator4 (f_lpar_x_rpar__1_1 : real; reset_rising_1_1 : real; reset_rising_1_2 : real)
returns (F_lpar_x_rpar__1_1 : real; F_lpar_x_rpar__1_2 : real); 
var
	Constant_1_1 : real;
	DataTypeConversion_1_1 : real; DataTypeConversion_1_2 : real;
	DataTypeConversion1_1_1 : real; DataTypeConversion1_1_2 : real;
	Init_1_1 : real; Init_1_2 : real;
	Product_1_1 : real; Product_1_2 : real;
	Product2_1_1 : real; Product2_1_2 : real;
	Product_dimension2_1_1 : real; Product_dimension2_1_2 : real;
	Sample_1_1 : real;
	Sum1_1_1 : real; Sum1_1_2 : real;
	Sum2_1_1 : real; Sum2_1_2 : real;
	Sum3_1_1 : real; Sum3_1_2 : real;
	Sum4_1_1 : real; Sum4_1_2 : real;
	Sum5_1_1 : real; Sum5_1_2 : real;
	Sum6_1_1 : real; Sum6_1_2 : real;
	UnitDelay_1_1 : real; UnitDelay_1_2 : real;
	UnitDelay1_1_1 : real;
	UnitDelay2_1_1 : real; UnitDelay2_1_2 : real;
	eq0_1_1 : bool; eq0_1_2 : bool;
	ne1_1_1 : bool; ne1_1_2 : bool;
	zero_1_1 : real;
let 
	Constant_1_1 = 0.00000000;
	DataTypeConversion_1_1 = (if eq0_1_1 then 1.0 else 0.0);
	DataTypeConversion_1_2 = (if eq0_1_2 then 1.0 else 0.0);
	DataTypeConversion1_1_1 = (if ne1_1_1 then 1.0 else 0.0);
	DataTypeConversion1_1_2 = (if ne1_1_2 then 1.0 else 0.0);
	Init_1_1 = 2.00000000;
	Init_1_2 = 0.50000000;
	Product_1_1 = Init_1_1 * Product_dimension2_1_1;
	Product_1_2 = Init_1_2 * Product_dimension2_1_2;
	Product2_1_1 = Sum3_1_1 * DataTypeConversion_1_1 * DataTypeConversion1_1_1;
	Product2_1_2 = Sum3_1_2 * DataTypeConversion_1_2 * DataTypeConversion1_1_2;
	Product_dimension2_1_1 = 1.00000000 * UnitDelay1_1_1;
	Product_dimension2_1_2 = 1.00000000 * UnitDelay1_1_1;
	Sample_1_1 = 1.00000000 * f_lpar_x_rpar__1_1;
	Sum1_1_1 = Sample_1_1 + Sum2_1_1;
	Sum1_1_2 = Sample_1_1 + Sum2_1_2;
	Sum2_1_1 = Sum4_1_1 + Product_1_1;
	Sum2_1_2 = Sum4_1_2 + Product_1_2;
	Sum3_1_1 =  - UnitDelay_1_1 + Init_1_1;
	Sum3_1_2 =  - UnitDelay_1_2 + Init_1_2;
	Sum4_1_1 = UnitDelay_1_1 + Product2_1_1;
	Sum4_1_2 = UnitDelay_1_2 + Product2_1_2;
	Sum5_1_1 = UnitDelay_1_1 + Product_1_1;
	Sum5_1_2 = UnitDelay_1_2 + Product_1_2;
	Sum6_1_1 = Sum5_1_1 + Product2_1_1;
	Sum6_1_2 = Sum5_1_2 + Product2_1_2;
	UnitDelay_1_1 = 0.00000000 -> pre Sum1_1_1;
	UnitDelay_1_2 = 0.00000000 -> pre Sum1_1_2;
	UnitDelay1_1_1 = 1.00000000 -> pre Constant_1_1;
	UnitDelay2_1_1 = 0.00000000 -> pre reset_rising_1_1;
	UnitDelay2_1_2 = 0.00000000 -> pre reset_rising_1_2;
	eq0_1_1 = reset_rising_1_1 > zero_1_1;
	eq0_1_2 = reset_rising_1_2 > zero_1_1;
	ne1_1_1 = UnitDelay2_1_1 <= zero_1_1;
	ne1_1_2 = UnitDelay2_1_2 <= zero_1_1;
	zero_1_1 = 0.00000000;
	F_lpar_x_rpar__1_1 = Sum6_1_1;
	F_lpar_x_rpar__1_2 = Sum6_1_2;
tel

node integrator_ext_reset_vector_test_PP_Integrator3 (f_lpar_x_rpar__1_1 : real; f_lpar_x_rpar__1_2 : real; reset_rising_1_1 : real)
returns (F_lpar_x_rpar__1_1 : real; F_lpar_x_rpar__1_2 : real); 
var
	Constant_1_1 : real;
	DataTypeConversion_1_1 : real;
	DataTypeConversion1_1_1 : real;
	Init_1_1 : real; Init_1_2 : real;
	Product_1_1 : real; Product_1_2 : real;
	Product2_1_1 : real; Product2_1_2 : real;
	Product2_dimension2_1_1 : real; Product2_dimension2_1_2 : real;
	Product2_dimension3_1_1 : real; Product2_dimension3_1_2 : real;
	Product_dimension2_1_1 : real; Product_dimension2_1_2 : real;
	Sample_1_1 : real; Sample_1_2 : real;
	Sum1_1_1 : real; Sum1_1_2 : real;
	Sum2_1_1 : real; Sum2_1_2 : real;
	Sum3_1_1 : real; Sum3_1_2 : real;
	Sum4_1_1 : real; Sum4_1_2 : real;
	Sum5_1_1 : real; Sum5_1_2 : real;
	Sum6_1_1 : real; Sum6_1_2 : real;
	UnitDelay_1_1 : real; UnitDelay_1_2 : real;
	UnitDelay1_1_1 : real;
	UnitDelay2_1_1 : real;
	eq0_1_1 : bool;
	ne1_1_1 : bool;
	zero_1_1 : real;
let 
	Constant_1_1 = 0.00000000;
	DataTypeConversion_1_1 = (if eq0_1_1 then 1.0 else 0.0);
	DataTypeConversion1_1_1 = (if ne1_1_1 then 1.0 else 0.0);
	Init_1_1 = 2.00000000;
	Init_1_2 = 0.50000000;
	Product_1_1 = Init_1_1 * Product_dimension2_1_1;
	Product_1_2 = Init_1_2 * Product_dimension2_1_2;
	Product2_1_1 = Sum3_1_1 * Product2_dimension2_1_1 * Product2_dimension3_1_1;
	Product2_1_2 = Sum3_1_2 * Product2_dimension2_1_2 * Product2_dimension3_1_2;
	Product2_dimension2_1_1 = 1.00000000 * DataTypeConversion_1_1;
	Product2_dimension2_1_2 = 1.00000000 * DataTypeConversion_1_1;
	Product2_dimension3_1_1 = 1.00000000 * DataTypeConversion1_1_1;
	Product2_dimension3_1_2 = 1.00000000 * DataTypeConversion1_1_1;
	Product_dimension2_1_1 = 1.00000000 * UnitDelay1_1_1;
	Product_dimension2_1_2 = 1.00000000 * UnitDelay1_1_1;
	Sample_1_1 = 1.00000000 * f_lpar_x_rpar__1_1;
	Sample_1_2 = 1.00000000 * f_lpar_x_rpar__1_2;
	Sum1_1_1 = Sample_1_1 + Sum2_1_1;
	Sum1_1_2 = Sample_1_2 + Sum2_1_2;
	Sum2_1_1 = Sum4_1_1 + Product_1_1;
	Sum2_1_2 = Sum4_1_2 + Product_1_2;
	Sum3_1_1 =  - UnitDelay_1_1 + Init_1_1;
	Sum3_1_2 =  - UnitDelay_1_2 + Init_1_2;
	Sum4_1_1 = UnitDelay_1_1 + Product2_1_1;
	Sum4_1_2 = UnitDelay_1_2 + Product2_1_2;
	Sum5_1_1 = UnitDelay_1_1 + Product_1_1;
	Sum5_1_2 = UnitDelay_1_2 + Product_1_2;
	Sum6_1_1 = Sum5_1_1 + Product2_1_1;
	Sum6_1_2 = Sum5_1_2 + Product2_1_2;
	UnitDelay_1_1 = 0.00000000 -> pre Sum1_1_1;
	UnitDelay_1_2 = 0.00000000 -> pre Sum1_1_2;
	UnitDelay1_1_1 = 1.00000000 -> pre Constant_1_1;
	UnitDelay2_1_1 = 0.00000000 -> pre reset_rising_1_1;
	eq0_1_1 = reset_rising_1_1 > zero_1_1;
	ne1_1_1 = UnitDelay2_1_1 <= zero_1_1;
	zero_1_1 = 0.00000000;
	F_lpar_x_rpar__1_1 = Sum6_1_1;
	F_lpar_x_rpar__1_2 = Sum6_1_2;
tel

node integrator_ext_reset_vector_test_PP_Integrator2 (f_lpar_x_rpar__1_1 : real; f_lpar_x_rpar__1_2 : real; reset_rising_1_1 : real; reset_rising_1_2 : real)
returns (F_lpar_x_rpar__1_1 : real; F_lpar_x_rpar__1_2 : real); 
var
	Constant_1_1 : real;
	DataTypeConversion_1_1 : real; DataTypeConversion_1_2 : real;
	DataTypeConversion1_1_1 : real; DataTypeConversion1_1_2 : real;
	Init_1_1 : real;
	Product_1_1 : real;
	Product2_1_1 : real; Product2_1_2 : real;
	Sample_1_1 : real; Sample_1_2 : real;
	Sum1_1_1 : real; Sum1_1_2 : real;
	Sum2_1_1 : real; Sum2_1_2 : real;
	Sum3_1_1 : real; Sum3_1_2 : real;
	Sum4_1_1 : real; Sum4_1_2 : real;
	Sum5_1_1 : real; Sum5_1_2 : real;
	Sum6_1_1 : real; Sum6_1_2 : real;
	UnitDelay_1_1 : real; UnitDelay_1_2 : real;
	UnitDelay1_1_1 : real;
	UnitDelay2_1_1 : real; UnitDelay2_1_2 : real;
	eq0_1_1 : bool; eq0_1_2 : bool;
	ne1_1_1 : bool; ne1_1_2 : bool;
	zero_1_1 : real;
let 
	Constant_1_1 = 0.00000000;
	DataTypeConversion_1_1 = (if eq0_1_1 then 1.0 else 0.0);
	DataTypeConversion_1_2 = (if eq0_1_2 then 1.0 else 0.0);
	DataTypeConversion1_1_1 = (if ne1_1_1 then 1.0 else 0.0);
	DataTypeConversion1_1_2 = (if ne1_1_2 then 1.0 else 0.0);
	Init_1_1 = 0.00000000;
	Product_1_1 = Init_1_1 * UnitDelay1_1_1;
	Product2_1_1 = Sum3_1_1 * DataTypeConversion_1_1 * DataTypeConversion1_1_1;
	Product2_1_2 = Sum3_1_2 * DataTypeConversion_1_2 * DataTypeConversion1_1_2;
	Sample_1_1 = 1.00000000 * f_lpar_x_rpar__1_1;
	Sample_1_2 = 1.00000000 * f_lpar_x_rpar__1_2;
	Sum1_1_1 = Sample_1_1 + Sum2_1_1;
	Sum1_1_2 = Sample_1_2 + Sum2_1_2;
	Sum2_1_1 = Sum4_1_1 + Product_1_1;
	Sum2_1_2 = Sum4_1_2 + Product_1_1;
	Sum3_1_1 =  - UnitDelay_1_1 + Init_1_1;
	Sum3_1_2 =  - UnitDelay_1_2 + Init_1_1;
	Sum4_1_1 = UnitDelay_1_1 + Product2_1_1;
	Sum4_1_2 = UnitDelay_1_2 + Product2_1_2;
	Sum5_1_1 = UnitDelay_1_1 + Product_1_1;
	Sum5_1_2 = UnitDelay_1_2 + Product_1_1;
	Sum6_1_1 = Sum5_1_1 + Product2_1_1;
	Sum6_1_2 = Sum5_1_2 + Product2_1_2;
	UnitDelay_1_1 = 0.00000000 -> pre Sum1_1_1;
	UnitDelay_1_2 = 0.00000000 -> pre Sum1_1_2;
	UnitDelay1_1_1 = 1.00000000 -> pre Constant_1_1;
	UnitDelay2_1_1 = 0.00000000 -> pre reset_rising_1_1;
	UnitDelay2_1_2 = 0.00000000 -> pre reset_rising_1_2;
	eq0_1_1 = reset_rising_1_1 > zero_1_1;
	eq0_1_2 = reset_rising_1_2 > zero_1_1;
	ne1_1_1 = UnitDelay2_1_1 <= zero_1_1;
	ne1_1_2 = UnitDelay2_1_2 <= zero_1_1;
	zero_1_1 = 0.00000000;
	F_lpar_x_rpar__1_1 = Sum6_1_1;
	F_lpar_x_rpar__1_2 = Sum6_1_2;
tel

node integrator_ext_reset_vector_test_PP_Integrator1 (f_lpar_x_rpar__1_1 : real; reset_rising_1_1 : real; reset_rising_1_2 : real)
returns (F_lpar_x_rpar__1_1 : real; F_lpar_x_rpar__1_2 : real); 
var
	Constant_1_1 : real;
	DataTypeConversion_1_1 : real; DataTypeConversion_1_2 : real;
	DataTypeConversion1_1_1 : real; DataTypeConversion1_1_2 : real;
	Init_1_1 : real;
	Product_1_1 : real;
	Product2_1_1 : real; Product2_1_2 : real;
	Sample_1_1 : real;
	Sum1_1_1 : real; Sum1_1_2 : real;
	Sum2_1_1 : real; Sum2_1_2 : real;
	Sum3_1_1 : real; Sum3_1_2 : real;
	Sum4_1_1 : real; Sum4_1_2 : real;
	Sum5_1_1 : real; Sum5_1_2 : real;
	Sum6_1_1 : real; Sum6_1_2 : real;
	UnitDelay_1_1 : real; UnitDelay_1_2 : real;
	UnitDelay1_1_1 : real;
	UnitDelay2_1_1 : real; UnitDelay2_1_2 : real;
	eq0_1_1 : bool; eq0_1_2 : bool;
	ne1_1_1 : bool; ne1_1_2 : bool;
	zero_1_1 : real;
let 
	Constant_1_1 = 0.00000000;
	DataTypeConversion_1_1 = (if eq0_1_1 then 1.0 else 0.0);
	DataTypeConversion_1_2 = (if eq0_1_2 then 1.0 else 0.0);
	DataTypeConversion1_1_1 = (if ne1_1_1 then 1.0 else 0.0);
	DataTypeConversion1_1_2 = (if ne1_1_2 then 1.0 else 0.0);
	Init_1_1 = 0.00000000;
	Product_1_1 = Init_1_1 * UnitDelay1_1_1;
	Product2_1_1 = Sum3_1_1 * DataTypeConversion_1_1 * DataTypeConversion1_1_1;
	Product2_1_2 = Sum3_1_2 * DataTypeConversion_1_2 * DataTypeConversion1_1_2;
	Sample_1_1 = 1.00000000 * f_lpar_x_rpar__1_1;
	Sum1_1_1 = Sample_1_1 + Sum2_1_1;
	Sum1_1_2 = Sample_1_1 + Sum2_1_2;
	Sum2_1_1 = Sum4_1_1 + Product_1_1;
	Sum2_1_2 = Sum4_1_2 + Product_1_1;
	Sum3_1_1 =  - UnitDelay_1_1 + Init_1_1;
	Sum3_1_2 =  - UnitDelay_1_2 + Init_1_1;
	Sum4_1_1 = UnitDelay_1_1 + Product2_1_1;
	Sum4_1_2 = UnitDelay_1_2 + Product2_1_2;
	Sum5_1_1 = UnitDelay_1_1 + Product_1_1;
	Sum5_1_2 = UnitDelay_1_2 + Product_1_1;
	Sum6_1_1 = Sum5_1_1 + Product2_1_1;
	Sum6_1_2 = Sum5_1_2 + Product2_1_2;
	UnitDelay_1_1 = 0.00000000 -> pre Sum1_1_1;
	UnitDelay_1_2 = 0.00000000 -> pre Sum1_1_2;
	UnitDelay1_1_1 = 1.00000000 -> pre Constant_1_1;
	UnitDelay2_1_1 = 0.00000000 -> pre reset_rising_1_1;
	UnitDelay2_1_2 = 0.00000000 -> pre reset_rising_1_2;
	eq0_1_1 = reset_rising_1_1 > zero_1_1;
	eq0_1_2 = reset_rising_1_2 > zero_1_1;
	ne1_1_1 = UnitDelay2_1_1 <= zero_1_1;
	ne1_1_2 = UnitDelay2_1_2 <= zero_1_1;
	zero_1_1 = 0.00000000;
	F_lpar_x_rpar__1_1 = Sum6_1_1;
	F_lpar_x_rpar__1_2 = Sum6_1_2;
tel

node integrator_ext_reset_vector_test_PP_Integrator (f_lpar_x_rpar__1_1 : real; f_lpar_x_rpar__1_2 : real; reset_rising_1_1 : real)
returns (F_lpar_x_rpar__1_1 : real; F_lpar_x_rpar__1_2 : real); 
var
	Constant_1_1 : real;
	DataTypeConversion_1_1 : real;
	DataTypeConversion1_1_1 : real;
	Init_1_1 : real;
	Product_1_1 : real;
	Product2_1_1 : real; Product2_1_2 : real;
	Product2_dimension2_1_1 : real; Product2_dimension2_1_2 : real;
	Product2_dimension3_1_1 : real; Product2_dimension3_1_2 : real;
	Sample_1_1 : real; Sample_1_2 : real;
	Sum1_1_1 : real; Sum1_1_2 : real;
	Sum2_1_1 : real; Sum2_1_2 : real;
	Sum3_1_1 : real; Sum3_1_2 : real;
	Sum4_1_1 : real; Sum4_1_2 : real;
	Sum5_1_1 : real; Sum5_1_2 : real;
	Sum6_1_1 : real; Sum6_1_2 : real;
	UnitDelay_1_1 : real; UnitDelay_1_2 : real;
	UnitDelay1_1_1 : real;
	UnitDelay2_1_1 : real;
	eq0_1_1 : bool;
	ne1_1_1 : bool;
	zero_1_1 : real;
let 
	Constant_1_1 = 0.00000000;
	DataTypeConversion_1_1 = (if eq0_1_1 then 1.0 else 0.0);
	DataTypeConversion1_1_1 = (if ne1_1_1 then 1.0 else 0.0);
	Init_1_1 = 0.00000000;
	Product_1_1 = Init_1_1 * UnitDelay1_1_1;
	Product2_1_1 = Sum3_1_1 * Product2_dimension2_1_1 * Product2_dimension3_1_1;
	Product2_1_2 = Sum3_1_2 * Product2_dimension2_1_2 * Product2_dimension3_1_2;
	Product2_dimension2_1_1 = 1.00000000 * DataTypeConversion_1_1;
	Product2_dimension2_1_2 = 1.00000000 * DataTypeConversion_1_1;
	Product2_dimension3_1_1 = 1.00000000 * DataTypeConversion1_1_1;
	Product2_dimension3_1_2 = 1.00000000 * DataTypeConversion1_1_1;
	Sample_1_1 = 1.00000000 * f_lpar_x_rpar__1_1;
	Sample_1_2 = 1.00000000 * f_lpar_x_rpar__1_2;
	Sum1_1_1 = Sample_1_1 + Sum2_1_1;
	Sum1_1_2 = Sample_1_2 + Sum2_1_2;
	Sum2_1_1 = Sum4_1_1 + Product_1_1;
	Sum2_1_2 = Sum4_1_2 + Product_1_1;
	Sum3_1_1 =  - UnitDelay_1_1 + Init_1_1;
	Sum3_1_2 =  - UnitDelay_1_2 + Init_1_1;
	Sum4_1_1 = UnitDelay_1_1 + Product2_1_1;
	Sum4_1_2 = UnitDelay_1_2 + Product2_1_2;
	Sum5_1_1 = UnitDelay_1_1 + Product_1_1;
	Sum5_1_2 = UnitDelay_1_2 + Product_1_1;
	Sum6_1_1 = Sum5_1_1 + Product2_1_1;
	Sum6_1_2 = Sum5_1_2 + Product2_1_2;
	UnitDelay_1_1 = 0.00000000 -> pre Sum1_1_1;
	UnitDelay_1_2 = 0.00000000 -> pre Sum1_1_2;
	UnitDelay1_1_1 = 1.00000000 -> pre Constant_1_1;
	UnitDelay2_1_1 = 0.00000000 -> pre reset_rising_1_1;
	eq0_1_1 = reset_rising_1_1 > zero_1_1;
	ne1_1_1 = UnitDelay2_1_1 <= zero_1_1;
	zero_1_1 = 0.00000000;
	F_lpar_x_rpar__1_1 = Sum6_1_1;
	F_lpar_x_rpar__1_2 = Sum6_1_2;
tel

node integrator_ext_reset_vector_test_PP (In4_1_1 : real; In4_1_2 : real; In7_1_1 : real; In1_1_1 : real; In2_1_1 : real; In2_1_2 : real; In3_1_1 : real; In3_1_2 : real; In5_1_1 : real; In5_1_2 : real; In6_1_1 : real; In6_1_2 : real; In8_1_1 : real; In9_1_1 : real; In10_1_1 : real; In10_1_2 : real; In11_1_1 : real; In11_1_2 : real; In12_1_1 : real; In12_1_2 : real; In13_1_1 : real; In13_1_2 : real; In14_1_1 : real; In15_1_1 : real; In16_1_1 : real; In16_1_2 : real; In17_1_1 : real; In17_1_2 : real; In18_1_1 : real; In18_1_2 : real)
returns (Out4_1_1 : real; Out4_1_2 : real;
	Out1_2_1 : real; Out1_2_2 : real;
	Out2_3_1 : real; Out2_3_2 : real;
	Out3_4_1 : real; Out3_4_2 : real;
	Out5_5_1 : real; Out5_5_2 : real;
	Out6_6_1 : real; Out6_6_2 : real;
	Out7_7_1 : real; Out7_7_2 : real;
	Out8_8_1 : real; Out8_8_2 : real;
	Out9_9_1 : real; Out9_9_2 : real); 
var
	Integrator_1_1 : real; Integrator_1_2 : real;
	Integrator1_1_1 : real; Integrator1_1_2 : real;
	Integrator2_1_1 : real; Integrator2_1_2 : real;
	Integrator3_1_1 : real; Integrator3_1_2 : real;
	Integrator4_1_1 : real; Integrator4_1_2 : real;
	Integrator5_1_1 : real; Integrator5_1_2 : real;
	Integrator6_1_1 : real; Integrator6_1_2 : real;
	Integrator7_1_1 : real; Integrator7_1_2 : real;
	Integrator8_1_1 : real; Integrator8_1_2 : real;
	i_virtual_local : real;
let 
	(Integrator_1_1, Integrator_1_2) = integrator_ext_reset_vector_test_PP_Integrator(In4_1_1, In4_1_2, In7_1_1);
	(Integrator1_1_1, Integrator1_1_2) = integrator_ext_reset_vector_test_PP_Integrator1(In1_1_1, In2_1_1, In2_1_2);
	(Integrator2_1_1, Integrator2_1_2) = integrator_ext_reset_vector_test_PP_Integrator2(In3_1_1, In3_1_2, In5_1_1, In5_1_2);
	(Integrator3_1_1, Integrator3_1_2) = integrator_ext_reset_vector_test_PP_Integrator3(In6_1_1, In6_1_2, In8_1_1);
	(Integrator4_1_1, Integrator4_1_2) = integrator_ext_reset_vector_test_PP_Integrator4(In9_1_1, In10_1_1, In10_1_2);
	(Integrator5_1_1, Integrator5_1_2) = integrator_ext_reset_vector_test_PP_Integrator5(In11_1_1, In11_1_2, In12_1_1, In12_1_2);
	(Integrator6_1_1, Integrator6_1_2) = integrator_ext_reset_vector_test_PP_Integrator6(In13_1_1, In13_1_2, In14_1_1);
	(Integrator7_1_1, Integrator7_1_2) = integrator_ext_reset_vector_test_PP_Integrator7(In15_1_1, In16_1_1, In16_1_2);
	(Integrator8_1_1, Integrator8_1_2) = integrator_ext_reset_vector_test_PP_Integrator8(In17_1_1, In17_1_2, In18_1_1, In18_1_2);
	Out4_1_1 = Integrator_1_1;
	Out4_1_2 = Integrator_1_2;
	Out1_2_1 = Integrator1_1_1;
	Out1_2_2 = Integrator1_1_2;
	Out2_3_1 = Integrator2_1_1;
	Out2_3_2 = Integrator2_1_2;
	Out3_4_1 = Integrator3_1_1;
	Out3_4_2 = Integrator3_1_2;
	Out5_5_1 = Integrator4_1_1;
	Out5_5_2 = Integrator4_1_2;
	Out6_6_1 = Integrator5_1_1;
	Out6_6_2 = Integrator5_1_2;
	Out7_7_1 = Integrator6_1_1;
	Out7_7_2 = Integrator6_1_2;
	Out8_8_1 = Integrator7_1_1;
	Out8_8_2 = Integrator7_1_2;
	Out9_9_1 = Integrator8_1_1;
	Out9_9_2 = Integrator8_1_2;
	i_virtual_local= 0.0 -> 1.0;
tel

