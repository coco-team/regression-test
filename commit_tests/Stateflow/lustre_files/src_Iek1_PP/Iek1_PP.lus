-- This file has been generated by CoCoSim


-- System nodes

















-- Entry action for state :T2_C1317
node T2_C1317_en(idIek1_T21316_1:int;
	sT2_1:real;
	isInner:bool)

returns (idIek1_T21316:int;
	sT2:real);


var 	idIek1_T21316_2:int;
	sT2_2:real;


let



	-- set state as active 
	idIek1_T21316_2 
	= 1317;
	

	sT2_2 
	= if (not isInner) then 1.
	 else sT2_1;
	

	(idIek1_T21316, sT2) 
	= (idIek1_T21316_2, sT2_2);
	

tel





-- Exit action for state :T2_C1317
node T2_C1317_ex(idIek1_T21316_1:int;
	isInner:bool)

returns (idIek1_T21316:int);


var 	idIek1_T21316_2:int;


let



	-- set state as inactive 
	idIek1_T21316_2
	 = if (not isInner) then 0 else idIek1_T21316_1;


	(idIek1_T21316) 
	= (idIek1_T21316_1);
	

tel






-- Entry action for state :T2_D1318
node T2_D1318_en(idIek1_T21316_1:int;
	sT2_1:real;
	isInner:bool)

returns (idIek1_T21316:int;
	sT2:real);


var 	idIek1_T21316_2:int;
	sT2_2:real;


let



	-- set state as active 
	idIek1_T21316_2 
	= 1318;
	

	sT2_2 
	= if (not isInner) then 2.
	 else sT2_1;
	

	(idIek1_T21316, sT2) 
	= (idIek1_T21316_2, sT2_2);
	

tel





-- Exit action for state :T2_D1318
node T2_D1318_ex(idIek1_T21316_1:int;
	isInner:bool)

returns (idIek1_T21316:int);


var 	idIek1_T21316_2:int;


let



	-- set state as inactive 
	idIek1_T21316_2
	 = if (not isInner) then 0 else idIek1_T21316_1;


	(idIek1_T21316) 
	= (idIek1_T21316_1);
	

tel






-- Entry action for state :Iek1_T21316
node Iek1_T21316_en(idIek1_T21316_1:int;
	idIek1_Iek11312_1:int;
	sT2_1:real;
	isInner:bool)

returns (idIek1_T21316:int;
	idIek1_Iek11312:int;
	sT2:real);


var 	idIek1_T21316_2, idIek1_T21316_3, idIek1_T21316_4, idIek1_T21316_5, idIek1_T21316_6:int;
	idIek1_Iek11312_2, idIek1_Iek11312_3, idIek1_Iek11312_4:int;
	sT2_2, sT2_3, sT2_4, sT2_5, sT2_6:real;


let



	-- set state as active 
	idIek1_Iek11312_2 
	= 1316;
	

	
-- transition trace :
	--POINT__To__T2_C1317_1
		(idIek1_T21316_2, sT2_2) 
	= T2_C1317_en(idIek1_T21316_1, sT2_1, false);
		

	(idIek1_T21316_3, idIek1_Iek11312_3, sT2_3) 
	= 

	if ( idIek1_T21316_1 = 0) then

	 (idIek1_T21316_2, idIek1_Iek11312_2, sT2_2)

	 else(idIek1_T21316_1, idIek1_Iek11312_2, sT2_1);

	

	(idIek1_T21316_4, sT2_4) 
	= 
	if ( idIek1_T21316_1 = 1317) then
	T2_C1317_en(idIek1_T21316_1, sT2_1, false)
	 else (idIek1_T21316_1, sT2_1);

	

	(idIek1_T21316_5, sT2_5) 
	= 
	if ( idIek1_T21316_1 = 1318) then
	T2_D1318_en(idIek1_T21316_1, sT2_1, false)
	 else (idIek1_T21316_1, sT2_1);

	

	(idIek1_T21316_6, idIek1_Iek11312_4, sT2_6) 
	= 
		 if ( idIek1_T21316_1 = 0) then 
		(idIek1_T21316_3, idIek1_Iek11312_3, sT2_3)
		 else
		 if ( idIek1_T21316_1 = 1317) then 
		(idIek1_T21316_4, idIek1_Iek11312_3, sT2_4)
		 else
		 if ( idIek1_T21316_1 = 1318) then 
		(idIek1_T21316_5, idIek1_Iek11312_3, sT2_5)
		 else (idIek1_T21316_1, idIek1_Iek11312_2, sT2_1);


	(idIek1_T21316, idIek1_Iek11312, sT2) 
	= (idIek1_T21316_6, idIek1_Iek11312_4, sT2_6);
	

tel





-- Exit action for state :Iek1_T21316
node Iek1_T21316_ex(idIek1_T21316_1:int;
	idIek1_Iek11312_1:int;
	isInner:bool)

returns (idIek1_T21316:int;
	idIek1_Iek11312:int);


var 	idIek1_T21316_2, idIek1_T21316_3, idIek1_T21316_4, idIek1_T21316_5:int;
	idIek1_Iek11312_2:int;


let



	
	(idIek1_T21316_2) 
	= 
	if ( idIek1_T21316_1 = 1317) then
	T2_C1317_ex(idIek1_T21316_1, false)
	 else (idIek1_T21316_1);

	

	(idIek1_T21316_3) 
	= 
	if ( idIek1_T21316_1 = 1318) then
	T2_D1318_ex(idIek1_T21316_1, false)
	 else (idIek1_T21316_1);

	

	(idIek1_T21316_4) 
	= 
		 if ( idIek1_T21316_1 = 1317) then 
		(idIek1_T21316_2)
		 else
		 if ( idIek1_T21316_1 = 1318) then 
		(idIek1_T21316_3)
		 else (idIek1_T21316_1);


	-- set state as inactive 
	idIek1_Iek11312_2
	 = if (not isInner) then 0 else idIek1_Iek11312_1;

	idIek1_T21316_5 
	= 0;
	

	(idIek1_T21316, idIek1_Iek11312) 
	= (idIek1_T21316_5, idIek1_Iek11312_1);
	

tel






-- Entry action for state :T1_A1315
node T1_A1315_en(idIek1_T11313_1:int;
	sT1_1:real;
	isInner:bool)

returns (idIek1_T11313:int;
	sT1:real);


var 	idIek1_T11313_2:int;
	sT1_2:real;


let



	-- set state as active 
	idIek1_T11313_2 
	= 1315;
	

	sT1_2 
	= if (not isInner) then 1.
	 else sT1_1;
	

	(idIek1_T11313, sT1) 
	= (idIek1_T11313_2, sT1_2);
	

tel





-- Exit action for state :T1_A1315
node T1_A1315_ex(idIek1_T11313_1:int;
	isInner:bool)

returns (idIek1_T11313:int);


var 	idIek1_T11313_2:int;


let



	-- set state as inactive 
	idIek1_T11313_2
	 = if (not isInner) then 0 else idIek1_T11313_1;


	(idIek1_T11313) 
	= (idIek1_T11313_1);
	

tel






-- Entry action for state :T1_B1314
node T1_B1314_en(idIek1_T11313_1:int;
	sT1_1:real;
	isInner:bool)

returns (idIek1_T11313:int;
	sT1:real);


var 	idIek1_T11313_2:int;
	sT1_2:real;


let



	-- set state as active 
	idIek1_T11313_2 
	= 1314;
	

	sT1_2 
	= if (not isInner) then 2.
	 else sT1_1;
	

	(idIek1_T11313, sT1) 
	= (idIek1_T11313_2, sT1_2);
	

tel





-- Exit action for state :T1_B1314
node T1_B1314_ex(idIek1_T11313_1:int;
	isInner:bool)

returns (idIek1_T11313:int);


var 	idIek1_T11313_2:int;


let



	-- set state as inactive 
	idIek1_T11313_2
	 = if (not isInner) then 0 else idIek1_T11313_1;


	(idIek1_T11313) 
	= (idIek1_T11313_1);
	

tel






-- Entry action for state :Iek1_T11313
node Iek1_T11313_en(idIek1_T11313_1:int;
	idIek1_Iek11312_1:int;
	sT1_1:real;
	isInner:bool)

returns (idIek1_T11313:int;
	idIek1_Iek11312:int;
	sT1:real);


var 	idIek1_T11313_2, idIek1_T11313_3, idIek1_T11313_4, idIek1_T11313_5, idIek1_T11313_6:int;
	idIek1_Iek11312_2, idIek1_Iek11312_3, idIek1_Iek11312_4:int;
	sT1_2, sT1_3, sT1_4, sT1_5, sT1_6:real;


let



	-- set state as active 
	idIek1_Iek11312_2 
	= 1313;
	

	
-- transition trace :
	--POINT__To__T1_A1315_1
		(idIek1_T11313_2, sT1_2) 
	= T1_A1315_en(idIek1_T11313_1, sT1_1, false);
		

	(idIek1_T11313_3, idIek1_Iek11312_3, sT1_3) 
	= 

	if ( idIek1_T11313_1 = 0) then

	 (idIek1_T11313_2, idIek1_Iek11312_2, sT1_2)

	 else(idIek1_T11313_1, idIek1_Iek11312_2, sT1_1);

	

	(idIek1_T11313_4, sT1_4) 
	= 
	if ( idIek1_T11313_1 = 1315) then
	T1_A1315_en(idIek1_T11313_1, sT1_1, false)
	 else (idIek1_T11313_1, sT1_1);

	

	(idIek1_T11313_5, sT1_5) 
	= 
	if ( idIek1_T11313_1 = 1314) then
	T1_B1314_en(idIek1_T11313_1, sT1_1, false)
	 else (idIek1_T11313_1, sT1_1);

	

	(idIek1_T11313_6, idIek1_Iek11312_4, sT1_6) 
	= 
		 if ( idIek1_T11313_1 = 0) then 
		(idIek1_T11313_3, idIek1_Iek11312_3, sT1_3)
		 else
		 if ( idIek1_T11313_1 = 1315) then 
		(idIek1_T11313_4, idIek1_Iek11312_3, sT1_4)
		 else
		 if ( idIek1_T11313_1 = 1314) then 
		(idIek1_T11313_5, idIek1_Iek11312_3, sT1_5)
		 else (idIek1_T11313_1, idIek1_Iek11312_2, sT1_1);


	(idIek1_T11313, idIek1_Iek11312, sT1) 
	= (idIek1_T11313_6, idIek1_Iek11312_4, sT1_6);
	

tel





-- Exit action for state :Iek1_T11313
node Iek1_T11313_ex(idIek1_T11313_1:int;
	idIek1_Iek11312_1:int;
	isInner:bool)

returns (idIek1_T11313:int;
	idIek1_Iek11312:int);


var 	idIek1_T11313_2, idIek1_T11313_3, idIek1_T11313_4, idIek1_T11313_5:int;
	idIek1_Iek11312_2:int;


let



	
	(idIek1_T11313_2) 
	= 
	if ( idIek1_T11313_1 = 1315) then
	T1_A1315_ex(idIek1_T11313_1, false)
	 else (idIek1_T11313_1);

	

	(idIek1_T11313_3) 
	= 
	if ( idIek1_T11313_1 = 1314) then
	T1_B1314_ex(idIek1_T11313_1, false)
	 else (idIek1_T11313_1);

	

	(idIek1_T11313_4) 
	= 
		 if ( idIek1_T11313_1 = 1315) then 
		(idIek1_T11313_2)
		 else
		 if ( idIek1_T11313_1 = 1314) then 
		(idIek1_T11313_3)
		 else (idIek1_T11313_1);


	-- set state as inactive 
	idIek1_Iek11312_2
	 = if (not isInner) then 0 else idIek1_Iek11312_1;

	idIek1_T11313_5 
	= 0;
	

	(idIek1_T11313, idIek1_Iek11312) 
	= (idIek1_T11313_5, idIek1_Iek11312_1);
	

tel






-- Entry action for state :T3_d1323
node T3_d1323_en(idIek1_T31319_1:int;
	sT3_1:real;
	isInner:bool)

returns (idIek1_T31319:int;
	sT3:real);


var 	idIek1_T31319_2:int;
	sT3_2:real;


let



	-- set state as active 
	idIek1_T31319_2 
	= 1323;
	

	sT3_2 
	= if (not isInner) then 4.
	 else sT3_1;
	

	(idIek1_T31319, sT3) 
	= (idIek1_T31319_2, sT3_2);
	

tel





-- Exit action for state :T3_d1323
node T3_d1323_ex(idIek1_T31319_1:int;
	isInner:bool)

returns (idIek1_T31319:int);


var 	idIek1_T31319_2:int;


let



	-- set state as inactive 
	idIek1_T31319_2
	 = if (not isInner) then 0 else idIek1_T31319_1;


	(idIek1_T31319) 
	= (idIek1_T31319_1);
	

tel






-- Entry action for state :T3_c1321
node T3_c1321_en(idIek1_T31319_1:int;
	sT3_1:real;
	isInner:bool)

returns (idIek1_T31319:int;
	sT3:real);


var 	idIek1_T31319_2:int;
	sT3_2:real;


let



	-- set state as active 
	idIek1_T31319_2 
	= 1321;
	

	sT3_2 
	= if (not isInner) then 3.
	 else sT3_1;
	

	(idIek1_T31319, sT3) 
	= (idIek1_T31319_2, sT3_2);
	

tel





-- Exit action for state :T3_c1321
node T3_c1321_ex(idIek1_T31319_1:int;
	isInner:bool)

returns (idIek1_T31319:int);


var 	idIek1_T31319_2:int;


let



	-- set state as inactive 
	idIek1_T31319_2
	 = if (not isInner) then 0 else idIek1_T31319_1;


	(idIek1_T31319) 
	= (idIek1_T31319_1);
	

tel






-- Entry action for state :T3_a1320
node T3_a1320_en(idIek1_T31319_1:int;
	sT3_1:real;
	isInner:bool)

returns (idIek1_T31319:int;
	sT3:real);


var 	idIek1_T31319_2:int;
	sT3_2:real;


let



	-- set state as active 
	idIek1_T31319_2 
	= 1320;
	

	sT3_2 
	= if (not isInner) then 1.
	 else sT3_1;
	

	(idIek1_T31319, sT3) 
	= (idIek1_T31319_2, sT3_2);
	

tel





-- Exit action for state :T3_a1320
node T3_a1320_ex(idIek1_T31319_1:int;
	isInner:bool)

returns (idIek1_T31319:int);


var 	idIek1_T31319_2:int;


let



	-- set state as inactive 
	idIek1_T31319_2
	 = if (not isInner) then 0 else idIek1_T31319_1;


	(idIek1_T31319) 
	= (idIek1_T31319_1);
	

tel






-- Entry action for state :T3_b1322
node T3_b1322_en(idIek1_T31319_1:int;
	sT3_1:real;
	isInner:bool)

returns (idIek1_T31319:int;
	sT3:real);


var 	idIek1_T31319_2:int;
	sT3_2:real;


let



	-- set state as active 
	idIek1_T31319_2 
	= 1322;
	

	sT3_2 
	= if (not isInner) then 2.
	 else sT3_1;
	

	(idIek1_T31319, sT3) 
	= (idIek1_T31319_2, sT3_2);
	

tel





-- Exit action for state :T3_b1322
node T3_b1322_ex(idIek1_T31319_1:int;
	isInner:bool)

returns (idIek1_T31319:int);


var 	idIek1_T31319_2:int;


let



	-- set state as inactive 
	idIek1_T31319_2
	 = if (not isInner) then 0 else idIek1_T31319_1;


	(idIek1_T31319) 
	= (idIek1_T31319_1);
	

tel






-- Entry action for state :Iek1_T31319
node Iek1_T31319_en(idIek1_T31319_1:int;
	idIek1_Iek11312_1:int;
	sT3_1:real;
	isInner:bool)

returns (idIek1_T31319:int;
	idIek1_Iek11312:int;
	sT3:real);


var 	idIek1_T31319_2, idIek1_T31319_3, idIek1_T31319_4, idIek1_T31319_5, idIek1_T31319_6, idIek1_T31319_7, idIek1_T31319_8:int;
	idIek1_Iek11312_2, idIek1_Iek11312_3, idIek1_Iek11312_4:int;
	sT3_2, sT3_3, sT3_4, sT3_5, sT3_6, sT3_7, sT3_8:real;


let



	-- set state as active 
	idIek1_Iek11312_2 
	= 1319;
	

	
-- transition trace :
	--POINT__To__T3_a1320_1
		(idIek1_T31319_2, sT3_2) 
	= T3_a1320_en(idIek1_T31319_1, sT3_1, false);
		

	(idIek1_T31319_3, idIek1_Iek11312_3, sT3_3) 
	= 

	if ( idIek1_T31319_1 = 0) then

	 (idIek1_T31319_2, idIek1_Iek11312_2, sT3_2)

	 else(idIek1_T31319_1, idIek1_Iek11312_2, sT3_1);

	

	(idIek1_T31319_4, sT3_4) 
	= 
	if ( idIek1_T31319_1 = 1320) then
	T3_a1320_en(idIek1_T31319_1, sT3_1, false)
	 else (idIek1_T31319_1, sT3_1);

	

	(idIek1_T31319_5, sT3_5) 
	= 
	if ( idIek1_T31319_1 = 1321) then
	T3_c1321_en(idIek1_T31319_1, sT3_1, false)
	 else (idIek1_T31319_1, sT3_1);

	

	(idIek1_T31319_6, sT3_6) 
	= 
	if ( idIek1_T31319_1 = 1323) then
	T3_d1323_en(idIek1_T31319_1, sT3_1, false)
	 else (idIek1_T31319_1, sT3_1);

	

	(idIek1_T31319_7, sT3_7) 
	= 
	if ( idIek1_T31319_1 = 1322) then
	T3_b1322_en(idIek1_T31319_1, sT3_1, false)
	 else (idIek1_T31319_1, sT3_1);

	

	(idIek1_T31319_8, idIek1_Iek11312_4, sT3_8) 
	= 
		 if ( idIek1_T31319_1 = 0) then 
		(idIek1_T31319_3, idIek1_Iek11312_3, sT3_3)
		 else
		 if ( idIek1_T31319_1 = 1320) then 
		(idIek1_T31319_4, idIek1_Iek11312_3, sT3_4)
		 else
		 if ( idIek1_T31319_1 = 1321) then 
		(idIek1_T31319_5, idIek1_Iek11312_3, sT3_5)
		 else
		 if ( idIek1_T31319_1 = 1323) then 
		(idIek1_T31319_6, idIek1_Iek11312_3, sT3_6)
		 else
		 if ( idIek1_T31319_1 = 1322) then 
		(idIek1_T31319_7, idIek1_Iek11312_3, sT3_7)
		 else (idIek1_T31319_1, idIek1_Iek11312_2, sT3_1);


	(idIek1_T31319, idIek1_Iek11312, sT3) 
	= (idIek1_T31319_8, idIek1_Iek11312_4, sT3_8);
	

tel





-- Exit action for state :Iek1_T31319
node Iek1_T31319_ex(idIek1_T31319_1:int;
	idIek1_Iek11312_1:int;
	isInner:bool)

returns (idIek1_T31319:int;
	idIek1_Iek11312:int);


var 	idIek1_T31319_2, idIek1_T31319_3, idIek1_T31319_4, idIek1_T31319_5, idIek1_T31319_6, idIek1_T31319_7:int;
	idIek1_Iek11312_2:int;


let



	
	(idIek1_T31319_2) 
	= 
	if ( idIek1_T31319_1 = 1320) then
	T3_a1320_ex(idIek1_T31319_1, false)
	 else (idIek1_T31319_1);

	

	(idIek1_T31319_3) 
	= 
	if ( idIek1_T31319_1 = 1321) then
	T3_c1321_ex(idIek1_T31319_1, false)
	 else (idIek1_T31319_1);

	

	(idIek1_T31319_4) 
	= 
	if ( idIek1_T31319_1 = 1323) then
	T3_d1323_ex(idIek1_T31319_1, false)
	 else (idIek1_T31319_1);

	

	(idIek1_T31319_5) 
	= 
	if ( idIek1_T31319_1 = 1322) then
	T3_b1322_ex(idIek1_T31319_1, false)
	 else (idIek1_T31319_1);

	

	(idIek1_T31319_6) 
	= 
		 if ( idIek1_T31319_1 = 1320) then 
		(idIek1_T31319_2)
		 else
		 if ( idIek1_T31319_1 = 1321) then 
		(idIek1_T31319_3)
		 else
		 if ( idIek1_T31319_1 = 1323) then 
		(idIek1_T31319_4)
		 else
		 if ( idIek1_T31319_1 = 1322) then 
		(idIek1_T31319_5)
		 else (idIek1_T31319_1);


	-- set state as inactive 
	idIek1_Iek11312_2
	 = if (not isInner) then 0 else idIek1_Iek11312_1;

	idIek1_T31319_7 
	= 0;
	

	(idIek1_T31319, idIek1_Iek11312) 
	= (idIek1_T31319_7, idIek1_Iek11312_1);
	

tel


--***************************************************State :Iek1_T21316 Automaton***************************************************

node Iek1_T21316_node(idIek1_T21316_1:int;
	sT2_1:real;
	F:bool)

returns (idIek1_T21316:int;
	sT2:real);


let

	 automaton iek1_t21316

	state POINTIek1_T21316:
	unless (idIek1_T21316_1=0) restart POINT__TO__T2_C1317_1



	unless (idIek1_T21316_1=1317) and F restart T2_C1317__TO__T2_D1318_1



	unless (idIek1_T21316_1=1318) and F restart T2_D1318__TO__T2_C1317_1



	unless (idIek1_T21316_1=1317) restart T2_C1317_IDL

	unless (idIek1_T21316_1=1318) restart T2_D1318_IDL

	let

		(idIek1_T21316, sT2) 
	= (idIek1_T21316_1, sT2_1);
	

	tel



	state POINT__TO__T2_C1317_1:

	 var 	idIek1_T21316_2:int;
	sT2_2:real;
	let

		-- transition trace :
	--POINT__To__T2_C1317_1
		(idIek1_T21316_2, sT2_2) 
	= T2_C1317_en(idIek1_T21316_1, sT2_1, false);
		

	(idIek1_T21316, sT2) 
	=  (idIek1_T21316_2, sT2_2);


	tel

	until true restart POINTIek1_T21316



	state T2_C1317__TO__T2_D1318_1:

	 var 	idIek1_T21316_2, idIek1_T21316_3:int;
	sT2_2:real;
	let

		-- transition trace :
	--T2_C1317__To__T2_D1318_1
		(idIek1_T21316_2) 
	= T2_C1317_ex(idIek1_T21316_1, false);
		

		(idIek1_T21316_3, sT2_2) 
	= T2_D1318_en(idIek1_T21316_2, sT2_1, false);
		

	(idIek1_T21316, sT2) 
	=  (idIek1_T21316_3, sT2_2);


	tel

	until true restart POINTIek1_T21316



	state T2_D1318__TO__T2_C1317_1:

	 var 	idIek1_T21316_2, idIek1_T21316_3:int;
	sT2_2:real;
	let

		-- transition trace :
	--T2_D1318__To__T2_C1317_1
		(idIek1_T21316_2) 
	= T2_D1318_ex(idIek1_T21316_1, false);
		

		(idIek1_T21316_3, sT2_2) 
	= T2_C1317_en(idIek1_T21316_2, sT2_1, false);
		

	(idIek1_T21316, sT2) 
	=  (idIek1_T21316_3, sT2_2);


	tel

	until true restart POINTIek1_T21316



	state T2_C1317_IDL:

	 	let

		

	(idIek1_T21316, sT2) 
	= (idIek1_T21316_1, sT2_1);
	

	tel

	until true restart POINTIek1_T21316



	state T2_D1318_IDL:

	 	let

		

	(idIek1_T21316, sT2) 
	= (idIek1_T21316_1, sT2_1);
	

	tel

	until true restart POINTIek1_T21316



tel


--***************************************************State :Iek1_T11313 Automaton***************************************************

node Iek1_T11313_node(idIek1_T11313_1:int;
	sT1_1:real;
	E:bool)

returns (idIek1_T11313:int;
	sT1:real);


let

	 automaton iek1_t11313

	state POINTIek1_T11313:
	unless (idIek1_T11313_1=0) restart POINT__TO__T1_A1315_1



	unless (idIek1_T11313_1=1315) and E restart T1_A1315__TO__T1_B1314_1



	unless (idIek1_T11313_1=1314) and E restart T1_B1314__TO__T1_A1315_1



	unless (idIek1_T11313_1=1315) restart T1_A1315_IDL

	unless (idIek1_T11313_1=1314) restart T1_B1314_IDL

	let

		(idIek1_T11313, sT1) 
	= (idIek1_T11313_1, sT1_1);
	

	tel



	state POINT__TO__T1_A1315_1:

	 var 	idIek1_T11313_2:int;
	sT1_2:real;
	let

		-- transition trace :
	--POINT__To__T1_A1315_1
		(idIek1_T11313_2, sT1_2) 
	= T1_A1315_en(idIek1_T11313_1, sT1_1, false);
		

	(idIek1_T11313, sT1) 
	=  (idIek1_T11313_2, sT1_2);


	tel

	until true restart POINTIek1_T11313



	state T1_A1315__TO__T1_B1314_1:

	 var 	idIek1_T11313_2, idIek1_T11313_3:int;
	sT1_2:real;
	let

		-- transition trace :
	--T1_A1315__To__T1_B1314_1
		(idIek1_T11313_2) 
	= T1_A1315_ex(idIek1_T11313_1, false);
		

		(idIek1_T11313_3, sT1_2) 
	= T1_B1314_en(idIek1_T11313_2, sT1_1, false);
		

	(idIek1_T11313, sT1) 
	=  (idIek1_T11313_3, sT1_2);


	tel

	until true restart POINTIek1_T11313



	state T1_B1314__TO__T1_A1315_1:

	 var 	idIek1_T11313_2, idIek1_T11313_3:int;
	sT1_2:real;
	let

		-- transition trace :
	--T1_B1314__To__T1_A1315_1
		(idIek1_T11313_2) 
	= T1_B1314_ex(idIek1_T11313_1, false);
		

		(idIek1_T11313_3, sT1_2) 
	= T1_A1315_en(idIek1_T11313_2, sT1_1, false);
		

	(idIek1_T11313, sT1) 
	=  (idIek1_T11313_3, sT1_2);


	tel

	until true restart POINTIek1_T11313



	state T1_A1315_IDL:

	 	let

		

	(idIek1_T11313, sT1) 
	= (idIek1_T11313_1, sT1_1);
	

	tel

	until true restart POINTIek1_T11313



	state T1_B1314_IDL:

	 	let

		

	(idIek1_T11313, sT1) 
	= (idIek1_T11313_1, sT1_1);
	

	tel

	until true restart POINTIek1_T11313



tel


--***************************************************State :Iek1_T31319 Automaton***************************************************

node Iek1_T31319_node(idIek1_T31319_1:int;
	sT3_1:real;
	idIek1_T11313_1:int;
	idIek1_T21316_1:int)

returns (idIek1_T31319:int;
	sT3:real);


let

	 automaton iek1_t31319

	state POINTIek1_T31319:
	unless (idIek1_T31319_1=0) restart POINT__TO__T3_A1320_1



	unless (idIek1_T31319_1=1320) and (( (pre idIek1_T11313_1) = 1315) and ( idIek1_T11313_1 != 1315)) restart T3_A1320__TO__T3_C1321_1



	unless (idIek1_T31319_1=1321) and (idIek1_T11313_1 = 1315) restart T3_C1321__TO__T3_D1323_1



	unless (idIek1_T31319_1=1321) and (idIek1_T21316_1 = 1318) restart T3_C1321__TO__T3_B1322_2



	unless (idIek1_T31319_1=1323) and (( (pre idIek1_T21316_1) = 1317) and ( idIek1_T21316_1 != 1317)) restart T3_D1323__TO__T3_B1322_1



	unless (idIek1_T31319_1=1322) and (idIek1_T21316_1 = 1317) restart T3_B1322__TO__T3_A1320_1



	unless (idIek1_T31319_1=1322) and (idIek1_T11313_1 = 1314) restart T3_B1322__TO__T3_C1321_2



	unless (idIek1_T31319_1=1320) restart T3_A1320_IDL

	unless (idIek1_T31319_1=1321) restart T3_C1321_IDL

	unless (idIek1_T31319_1=1323) restart T3_D1323_IDL

	unless (idIek1_T31319_1=1322) restart T3_B1322_IDL

	let

		(idIek1_T31319, sT3) 
	= (idIek1_T31319_1, sT3_1);
	

	tel



	state POINT__TO__T3_A1320_1:

	 var 	idIek1_T31319_2:int;
	sT3_2:real;
	let

		-- transition trace :
	--POINT__To__T3_a1320_1
		(idIek1_T31319_2, sT3_2) 
	= T3_a1320_en(idIek1_T31319_1, sT3_1, false);
		

	(idIek1_T31319, sT3) 
	=  (idIek1_T31319_2, sT3_2);


	tel

	until true restart POINTIek1_T31319



	state T3_A1320__TO__T3_C1321_1:

	 var 	idIek1_T31319_2, idIek1_T31319_3:int;
	sT3_2:real;
	let

		-- transition trace :
	--T3_a1320__To__T3_c1321_1
		(idIek1_T31319_2) 
	= T3_a1320_ex(idIek1_T31319_1, false);
		

		(idIek1_T31319_3, sT3_2) 
	= T3_c1321_en(idIek1_T31319_2, sT3_1, false);
		

	(idIek1_T31319, sT3) 
	=  (idIek1_T31319_3, sT3_2);


	tel

	until true restart POINTIek1_T31319



	state T3_C1321__TO__T3_D1323_1:

	 var 	idIek1_T31319_2, idIek1_T31319_3:int;
	sT3_2:real;
	let

		-- transition trace :
	--T3_c1321__To__T3_d1323_1
		(idIek1_T31319_2) 
	= T3_c1321_ex(idIek1_T31319_1, false);
		

		(idIek1_T31319_3, sT3_2) 
	= T3_d1323_en(idIek1_T31319_2, sT3_1, false);
		

	(idIek1_T31319, sT3) 
	=  (idIek1_T31319_3, sT3_2);


	tel

	until true restart POINTIek1_T31319



	state T3_C1321__TO__T3_B1322_2:

	 var 	idIek1_T31319_2, idIek1_T31319_3:int;
	sT3_2:real;
	let

		-- transition trace :
	--T3_c1321__To__T3_b1322_2
		(idIek1_T31319_2) 
	= T3_c1321_ex(idIek1_T31319_1, false);
		

		(idIek1_T31319_3, sT3_2) 
	= T3_b1322_en(idIek1_T31319_2, sT3_1, false);
		

	(idIek1_T31319, sT3) 
	=  (idIek1_T31319_3, sT3_2);


	tel

	until true restart POINTIek1_T31319



	state T3_D1323__TO__T3_B1322_1:

	 var 	idIek1_T31319_2, idIek1_T31319_3:int;
	sT3_2:real;
	let

		-- transition trace :
	--T3_d1323__To__T3_b1322_1
		(idIek1_T31319_2) 
	= T3_d1323_ex(idIek1_T31319_1, false);
		

		(idIek1_T31319_3, sT3_2) 
	= T3_b1322_en(idIek1_T31319_2, sT3_1, false);
		

	(idIek1_T31319, sT3) 
	=  (idIek1_T31319_3, sT3_2);


	tel

	until true restart POINTIek1_T31319



	state T3_B1322__TO__T3_A1320_1:

	 var 	idIek1_T31319_2, idIek1_T31319_3:int;
	sT3_2:real;
	let

		-- transition trace :
	--T3_b1322__To__T3_a1320_1
		(idIek1_T31319_2) 
	= T3_b1322_ex(idIek1_T31319_1, false);
		

		(idIek1_T31319_3, sT3_2) 
	= T3_a1320_en(idIek1_T31319_2, sT3_1, false);
		

	(idIek1_T31319, sT3) 
	=  (idIek1_T31319_3, sT3_2);


	tel

	until true restart POINTIek1_T31319



	state T3_B1322__TO__T3_C1321_2:

	 var 	idIek1_T31319_2, idIek1_T31319_3:int;
	sT3_2:real;
	let

		-- transition trace :
	--T3_b1322__To__T3_c1321_2
		(idIek1_T31319_2) 
	= T3_b1322_ex(idIek1_T31319_1, false);
		

		(idIek1_T31319_3, sT3_2) 
	= T3_c1321_en(idIek1_T31319_2, sT3_1, false);
		

	(idIek1_T31319, sT3) 
	=  (idIek1_T31319_3, sT3_2);


	tel

	until true restart POINTIek1_T31319



	state T3_A1320_IDL:

	 	let

		

	(idIek1_T31319, sT3) 
	= (idIek1_T31319_1, sT3_1);
	

	tel

	until true restart POINTIek1_T31319



	state T3_C1321_IDL:

	 	let

		

	(idIek1_T31319, sT3) 
	= (idIek1_T31319_1, sT3_1);
	

	tel

	until true restart POINTIek1_T31319



	state T3_D1323_IDL:

	 	let

		

	(idIek1_T31319, sT3) 
	= (idIek1_T31319_1, sT3_1);
	

	tel

	until true restart POINTIek1_T31319



	state T3_B1322_IDL:

	 	let

		

	(idIek1_T31319, sT3) 
	= (idIek1_T31319_1, sT3_1);
	

	tel

	until true restart POINTIek1_T31319



tel


--***************************************************State :Iek1_Iek11312 Automaton***************************************************

node Iek1_Iek11312_node(idIek1_Iek11312_1:int;
	idIek1_T11313_1:int;
	sT1_1:real;
	idIek1_T21316_1:int;
	sT2_1:real;
	idIek1_T31319_1:int;
	sT3_1:real;
	E:bool;
	F:bool)

returns (idIek1_Iek11312:int;
	idIek1_T11313:int;
	sT1:real;
	idIek1_T21316:int;
	sT2:real;
	idIek1_T31319:int;
	sT3:real);


let

	 automaton iek1_iek11312

	state POINTIek1_Iek11312:
	unless (idIek1_Iek11312_1=0) restart IEK1_IEK11312_PARALLEL_ENTRY
	unless true  restart IEK1_IEK11312_PARALLEL_IDL

	let

		(idIek1_Iek11312, idIek1_T11313, sT1, idIek1_T21316, sT2, idIek1_T31319, sT3) 
	= (idIek1_Iek11312_1, idIek1_T11313_1, sT1_1, idIek1_T21316_1, sT2_1, idIek1_T31319_1, sT3_1);
	

	tel



	state IEK1_IEK11312_PARALLEL_ENTRY:

	 var 	idIek1_Iek11312_2, idIek1_Iek11312_3, idIek1_Iek11312_4:int;
	idIek1_T11313_2:int;
	sT1_2:real;
	idIek1_T21316_2:int;
	sT2_2:real;
	idIek1_T31319_2:int;
	sT3_2:real;
	let

		
	(idIek1_T11313_2, idIek1_Iek11312_2, sT1_2) 
	= Iek1_T11313_en(idIek1_T11313_1, idIek1_Iek11312_1, sT1_1, false);

	(idIek1_T21316_2, idIek1_Iek11312_3, sT2_2) 
	= Iek1_T21316_en(idIek1_T21316_1, idIek1_Iek11312_2, sT2_1, false);

	(idIek1_T31319_2, idIek1_Iek11312_4, sT3_2) 
	= Iek1_T31319_en(idIek1_T31319_1, idIek1_Iek11312_3, sT3_1, false);


	(idIek1_Iek11312, idIek1_T11313, sT1, idIek1_T21316, sT2, idIek1_T31319, sT3) 
	= (idIek1_Iek11312_4, idIek1_T11313_2, sT1_2, idIek1_T21316_2, sT2_2, idIek1_T31319_2, sT3_2);
	

	tel

	until true restart POINTIek1_Iek11312



	state IEK1_IEK11312_PARALLEL_IDL:

	 var 	idIek1_T11313_2:int;
	sT1_2:real;
	idIek1_T21316_2:int;
	sT2_2:real;
	idIek1_T31319_2:int;
	sT3_2:real;
	let

		

		(idIek1_T11313_2, sT1_2)
	= if not (idIek1_T11313_1= 0 ) then Iek1_T11313_node(idIek1_T11313_1, sT1_1, E)

		 else (idIek1_T11313_1, sT1_1);

		

		

		(idIek1_T21316_2, sT2_2)
	= if not (idIek1_T21316_1= 0 ) then Iek1_T21316_node(idIek1_T21316_1, sT2_1, F)

		 else (idIek1_T21316_1, sT2_1);

		

		

		(idIek1_T31319_2, sT3_2)
	= if not (idIek1_T31319_1= 0 ) then Iek1_T31319_node(idIek1_T31319_1, sT3_1, idIek1_T11313_2, idIek1_T21316_2)

		 else (idIek1_T31319_1, sT3_1);

		

		

	(idIek1_Iek11312, idIek1_T11313, sT1, idIek1_T21316, sT2, idIek1_T31319, sT3) 
	= (idIek1_Iek11312_1, idIek1_T11313_2, sT1_2, idIek1_T21316_2, sT2_2, idIek1_T31319_2, sT3_2);
	

	tel

	until true restart POINTIek1_Iek11312



tel


--***************************************************State :Iek1_Iek11312 Automaton***************************************************

node Iek1_PP_Iek1(E:bool;
	F:bool)

returns (sT1:real;
	sT2:real;
	sT3:real);


var sT1_1: real;

	sT2_1: real;

	sT3_1: real;

	idIek1_Iek11312, idIek1_Iek11312_1: int;

	idIek1_T21316, idIek1_T21316_1: int;

	idIek1_T11313, idIek1_T11313_1: int;

	idIek1_T31319, idIek1_T31319_1: int;

		idIek1_Iek11312_2:int;
	idIek1_T11313_2:int;
	sT1_2:real;
	idIek1_T21316_2:int;
	sT2_2:real;
	idIek1_T31319_2:int;
	sT3_2:real;
let

	sT1_1 = 0.0 -> pre sT1;

	sT2_1 = 0.0 -> pre sT2;

	sT3_1 = 0.0 -> pre sT3;

	idIek1_Iek11312_1 = 0 -> pre idIek1_Iek11312;

	idIek1_T21316_1 = 0 -> pre idIek1_T21316;

	idIek1_T11313_1 = 0 -> pre idIek1_T11313;

	idIek1_T31319_1 = 0 -> pre idIek1_T31319;

	



	(idIek1_Iek11312_2, idIek1_T11313_2, sT1_2, idIek1_T21316_2, sT2_2, idIek1_T31319_2, sT3_2)
	 = 

	 if E then Iek1_Iek11312_node(idIek1_Iek11312_1, idIek1_T11313_1, sT1_1, idIek1_T21316_1, sT2_1, idIek1_T31319_1, sT3_1, E, false)

	 else (idIek1_Iek11312_1, idIek1_T11313_1, sT1_1, idIek1_T21316_1, sT2_1, idIek1_T31319_1, sT3_1);

	



	(idIek1_Iek11312, idIek1_T11313, sT1, idIek1_T21316, sT2, idIek1_T31319, sT3)
	 = 

	 if F then Iek1_Iek11312_node(idIek1_Iek11312_2, idIek1_T11313_2, sT1_2, idIek1_T21316_2, sT2_2, idIek1_T31319_2, sT3_2, false, F)

	 else (idIek1_Iek11312_2, idIek1_T11313_2, sT1_2, idIek1_T21316_2, sT2_2, idIek1_T31319_2, sT3_2);

	


--unused outputs
	

tel



node Iek1_PP (E_1_1 : real; F_1_1 : real)
returns (sT1_1_1 : real;
	sT2_2_1 : real;
	sT3_3_1 : real); 
var
	Iek1_1_1 : real; Iek1_2_1 : real; Iek1_3_1 : real;
	Mux_1_1 : real; Mux_1_2 : real;
	i_virtual_local : real;
	Iek1Mux_1_1_event: bool;
	Iek1Mux_1_2_event: bool;
let 
	Iek1Mux_1_1_event = false -> ((pre(Mux_1_1) > 0.0 and Mux_1_1 <= 0.0) or (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0));
	Iek1Mux_1_2_event = false -> ((pre(Mux_1_2) > 0.0 and Mux_1_2 <= 0.0) or (pre(Mux_1_2) <= 0.0 and Mux_1_2 > 0.0));
	(Iek1_1_1, Iek1_2_1, Iek1_3_1) =  Iek1_PP_Iek1(Iek1Mux_1_1_event, Iek1Mux_1_2_event);
	Mux_1_1 = E_1_1 ;
	Mux_1_2 = F_1_1 ;
	sT1_1_1 = Iek1_1_1;
	sT2_2_1 = Iek1_2_1;
	sT3_3_1 = Iek1_3_1;
	i_virtual_local= 0.0 -> 1.0;
tel

