 -- $Id$
-- model_file: sf2lus/Stopwatch2.mdl
-- model_name: Stopwatch2
-- command line: /home/caspi/RISE/DISTRIBUTION/ss2lus0.01b/bin/sf2lus.bc sf2lus/Stopwatch2.mdl -o sf2lus/Stopwatch2.lus 

type event = bool;
const set = true; clr = false;


-- link id=25 name=START Lap_stop -> Lap
node evs25_(START: event) returns(evs25: bool);
let
  evs25 = START;
tel

-- link id=24 name=START Running -> Reset
node evs24_(START: event) returns(evs24: bool);
let
  evs24 = START;
tel

-- link id=19 name=START Lap -> Lap_stop
node evs19_(START: event) returns(evs19: bool);
let
  evs19 = START;
tel

-- link id=18 name=START Reset -> Running
node evs18_(START: event) returns(evs18: bool);
let
  evs18 = START;
tel

-- link id=23 name=LAP Lap_stop -> Reset
node evs23_(LAP: event) returns(evs23: bool);
let
  evs23 = LAP;
tel

-- link id=22 name=LAP Lap -> Running
node evs22_(LAP: event) returns(evs22: bool);
let
  evs22 = LAP;
tel

-- link id=17 name=[sec==60]{sec=0; min++;} j10 -> j11
node cv17_(sec: int) returns(ok7, cv17, end: bool);
let
  cv17 = sec = 60;
  ok7, end = (false, cv17);
tel

-- link id=17 name=[sec==60]{sec=0; min++;} j10 -> j11
-- sec=0
-- min++
node ca17(sec, min: int) returns(seco, mino: int);
let
  seco = 0;
  mino = min + 1;
tel

-- link id=14 name=[cent==100]{cent=0; sec++;} j9 -> j10
node cv14_(cent: int) returns(ok7, cv14, end: bool);
let
  cv14 = cent = 100;
  ok7, end = (false, false);
tel

-- link id=14 name=[cent==100]{cent=0; sec++;} j9 -> j10
-- cent=0
-- sec++
node ca14(cent, sec: int) returns(cento, seco: int);
let
  cento = 0;
  seco = sec + 1;
tel

-- link id=13 name=TIC{cent++;} Run -> j9
node evs13_(TIC: event) returns(evs13: bool);
let
  evs13 = TIC;
tel

-- link id=13 name=TIC{cent++;} Run -> j9
-- cent++
node ca13(cent: int) returns(cento: int);
let
  cento = cent + 1;
tel

-- link id=12 name=LAP Running -> Lap
node evs12_(LAP: event) returns(evs12: bool);
let
  evs12 = LAP;
tel

-- link id=25 name=START Lap_stop -> Lap
node lv25_(START: event; ok7, ok6, lv25: bool) returns(ok7o, ok6o, lv25o: bool);
var cv25, end, end_1: bool;
let
  end_1 = false;
  ok7o, ok6o, cv25, end =
    if ((not (end_1 or ok6)) and evs25_(START)) then (true, true, true, true)
    else (ok7, ok6, false, end_1);
  lv25o = if (cv25 and end) then (true) else (lv25);
tel

-- link id=24 name=START Running -> Reset
node lv24_(START: event; ok7, ok6, lv24: bool) returns(ok7o, ok6o, lv24o: bool);
var cv24, end, end_1: bool;
let
  end_1 = false;
  ok7o, ok6o, cv24, end =
    if ((not (end_1 or ok7)) and evs24_(START)) then (true, true, true, true)
    else (ok7, ok6, false, end_1);
  lv24o = if (cv24 and end) then (true) else (lv24);
tel

-- link id=20 name= p40 -> Stop
node lv20_(ok61, lv20: bool) returns(ok61o, lv20o: bool);
var cv20, end, end_1: bool;
let
  end_1 = false;
  ok61o, cv20, end = if (not (end_1 or ok61)) then (true, true, true) else (ok61, false, end_1);
  lv20o = if (cv20 and end) then (true) else (lv20);
tel

-- link id=19 name=START Lap -> Lap_stop
node lv19_(START: event; ok7, ok6, lv19: bool) returns(ok7o, ok6o, lv19o: bool);
var cv19, end, end_1: bool;
let
  end_1 = false;
  ok7o, ok6o, cv19, end =
    if ((not (end_1 or ok7)) and evs19_(START)) then (true, true, true, true)
    else (ok7, ok6, false, end_1);
  lv19o = if (cv19 and end) then (true) else (lv19);
tel

-- link id=18 name=START Reset -> Running
node lv18_(START: event; ok7, ok6, lv18: bool) returns(ok7o, ok6o, lv18o: bool);
var cv18, end, end_1: bool;
let
  end_1 = false;
  ok7o, ok6o, cv18, end =
    if ((not (end_1 or ok6)) and evs18_(START)) then (true, true, true, true)
    else (ok7, ok6, false, end_1);
  lv18o = if (cv18 and end) then (true) else (lv18);
tel

-- link id=23 name=LAP Lap_stop -> Reset
node lv23_(LAP: event; ok6, lv23: bool) returns(ok6o, lv23o: bool);
var cv23, end, end_1: bool;
let
  end_1 = false;
  ok6o, cv23, end =
    if ((not (end_1 or ok6)) and evs23_(LAP)) then (true, true, true) else (ok6, false, end_1);
  lv23o = if (cv23 and end) then (true) else (lv23);
tel

-- link id=21 name= p39 -> Reset
node lv21_(ok6, lv21: bool) returns(ok6o, lv21o: bool);
var cv21, end, end_1: bool;
let
  end_1 = false;
  ok6o, cv21, end = if (not (end_1 or ok6)) then (true, true, true) else (ok6, false, end_1);
  lv21o = if (cv21 and end) then (true) else (lv21);
tel

-- link id=22 name=LAP Lap -> Running
node lv22_(LAP: event; ok7, lv22: bool) returns(ok7o, lv22o: bool);
var cv22, end, end_1: bool;
let
  end_1 = false;
  ok7o, cv22, end =
    if ((not (end_1 or ok7)) and evs22_(LAP)) then (true, true, true) else (ok7, false, end_1);
  lv22o = if (cv22 and end) then (true) else (lv22);
tel

-- link id=13 name=TIC{cent++;} Run -> j9
node lv13_(TIC: event; cent, sec, min: int; ok7, lv13, lv14, lv15, lv16, lv17: bool) 
returns(cento, seco, mino: int; ok7o, lv13o, lv14o, lv15o, lv16o, lv17o: bool);
var cv13, cv14, cv15, cv16, cv17, end, end_1, end_2, end_3, end_4, end_5, lv13_1, lv13_2, 
    lv14_1, lv14_2, lv15_1, lv15_2, lv16_1, lv16_2, lv17_1, lv17_2, ok7_1, ok7_2, ok7_3, ok7_4: 
    bool; cent_1, sec_1: int;
let
  end_1 = false;
  ok7_1, cv13, end_2 =
    if ((not (end_1 or ok7)) and evs13_(TIC)) then (false, true, false) else (ok7, false, end_1);
  cent_1 = if cv13 then ca13(cent) else (cent);
  ok7_2, cv14, end_3 = if ((not end_2) and cv13) then cv14_(cent_1) else (ok7_1, false, end_2);
  cento, sec_1 = if cv14 then ca14(cent_1, sec) else (cent_1, sec);
  ok7_3, cv17, end_4 =
    if ((not end_3) and (cv14 and cv13)) then cv17_(sec_1) else (ok7_2, false, end_3);
  seco, mino = if cv17 then ca17(sec_1, min) else (sec_1, min);
  lv15_1, lv17_1, lv13_1, lv14_1, lv16_1 =
    if (cv17 and end_4) then (false, true, true, true, false)
    else (lv15, lv17, lv13, lv14, lv16);
  ok7_4, cv16, end_5 =
    if ((not end_4) and (cv14 and cv13)) then (false, true, true) else (ok7_3, false, end_4);
  lv15_2, lv17_2, lv13_2, lv14_2, lv16_2 =
    if (cv16 and end_5) then (false, false, true, true, true)
    else (lv15_1, lv17_1, lv13_1, lv14_1, lv16_1);
  ok7o, cv15, end =
    if ((not end_5) and cv13) then (false, true, true) else (ok7_4, false, end_5);
  lv15o, lv17o, lv13o, lv14o, lv16o =
    if (cv15 and end) then (true, false, true, false, false)
    else (lv15_2, lv17_2, lv13_2, lv14_2, lv16_2);
tel

-- link id=12 name=LAP Running -> Lap
node lv12_(LAP: event; ok7, lv12: bool) returns(ok7o, lv12o: bool);
var cv12, end, end_1: bool;
let
  end_1 = false;
  ok7o, cv12, end =
    if ((not (end_1 or ok7)) and evs12_(LAP)) then (true, true, true) else (ok7, false, end_1);
  lv12o = if (cv12 and end) then (true) else (lv12);
tel

-- on action for node id=8 name=Reset
-- LAP: cent=0;sec=0;min=0;disp_cent=0;disp_sec=0;disp_min=0
node ona8(LAP: event; cent, sec, min, disp_cent, disp_sec, disp_min: int) 
returns(disp_cento, disp_seco, disp_mino, cento, seco, mino: int);
let
  cento = if LAP then 0 else (cent);
  seco = if LAP then 0 else (sec);
  mino = if LAP then 0 else (min);
  disp_cento = if LAP then 0 else (disp_cent);
  disp_seco = if LAP then 0 else (disp_sec);
  disp_mino = if LAP then 0 else (disp_min);
tel

-- during action for node id=4 name=Running
-- disp_cent=cent;disp_sec=sec;disp_min=min
node dua4(cent, sec, min, disp_cent, disp_sec, disp_min: int) 
returns(disp_cento, disp_seco, disp_mino: int);
let
  disp_cento = cent;
  disp_seco = sec;
  disp_mino = min;
tel

-- node id=40 name=_point
node iniu40lv(ok61, trm, ini: bool) returns(ok61o, lv20: bool);
let
  ok61o, lv20 = lv20_(ok61, false);
tel

-- node id=7 name=Run
node sgu7_innerlv(TIC: event; cent, sec, min: int; ok7, sg7, trm, ini: bool) 
returns(cento, seco, mino: int; ok7o, lv13, lv14, lv15, lv16, lv17: bool);
let
  cento, seco, mino, ok7o, lv13, lv14, lv15, lv16, lv17 =
    lv13_(TIC, cent, sec, min, ok7, false, false, false, false, false);
tel

-- node id=7 name=Run
node sgu7ex(ok7, lv19, lv24, sg7, trm, ini: bool) returns(sg7o: bool);
let
  sg7o = if (((ok7 and lv24) or (ok7 and lv19)) or trm) then (false) else (sg7);
tel

-- node id=7 name=Run
node sgu7en(ok6, lv18, lv25, sg7, trm, ini: bool) returns(sg7o: bool);
let
  sg7o =
    if ((not trm) and ((not sg7) and ((ok6 and lv25) or (ok6 and lv18)))) then (true) else (sg7);
tel

-- node id=4 name=Running
node su4lv(LAP, START: event; ok7, ok6, s4, trm, ini: bool) 
returns(ok7o, ok6o, lv12, lv24: bool);
var ok7_1: bool;
let
  ok7_1, lv12 = lv12_(LAP, ok7, false);
  ok7o, ok6o, lv24 = lv24_(START, ok7_1, ok6, false);
tel

-- node id=4 name=Running
node su4ex(ok7, lv12, lv13, lv14, lv15, lv16, lv17, lv24, s4, trm, ini: bool) 
returns(du4, s4o: bool);
let
  s4o, du4 =
    if ((((ok7 and lv13) and (ok7 and lv15)) or
         (((ok7 and lv13) and ((ok7 and lv14) and (ok7 and lv17))) or
          (((ok7 and lv13) and ((ok7 and lv14) and (ok7 and lv16))) or
           ((ok7 and lv24) or (ok7 and lv12))))) or
        trm)
    then (false, false) else (s4, true);
tel

-- node id=4 name=Running
node su4en(ok7, ok6, lv22, lv18, s4, trm, ini: bool) returns(s4o: bool);
let
  s4o =
    if ((not trm) and ((not s4) and ((ok6 and lv18) or (ok7 and lv22)))) then (true) else (s4);
tel

-- node id=3 name=Lap
node su3lv(LAP, START: event; ok7, ok6, s3, trm, ini: bool) 
returns(ok7o, ok6o, lv22, lv19: bool);
var ok7_1: bool;
let
  ok7_1, ok6o, lv19 = lv19_(START, ok7, ok6, false);
  ok7o, lv22 = lv22_(LAP, ok7_1, false);
tel

-- node id=3 name=Lap
node su3ex(ok7, lv13, lv14, lv15, lv16, lv17, lv22, lv19, s3, trm, ini: bool) 
returns(s3o: bool);
let
  s3o =
    if ((((ok7 and lv13) and (ok7 and lv15)) or
         (((ok7 and lv13) and ((ok7 and lv14) and (ok7 and lv17))) or
          (((ok7 and lv13) and ((ok7 and lv14) and (ok7 and lv16))) or
           ((ok7 and lv19) or (ok7 and lv22))))) or
        trm)
    then (false) else (s3);
tel

-- node id=3 name=Lap
node su3en(ok7, ok6, lv12, lv25, s3, trm, ini: bool) returns(s3o: bool);
let
  s3o =
    if ((not trm) and ((not s3) and ((ok6 and lv25) or (ok7 and lv12)))) then (true) else (s3);
tel

-- graph id=36 name=7,NONTOP
node sf_7(TIC, LAP: event; cent, sec, min, disp_cent, disp_sec, disp_min: int;
          ok7, ok6, lv12, lv22, lv18, lv19, lv24, lv25, s4in, s3in, sg7, trm, ini: bool)
returns(disp_cento, disp_seco, disp_mino, cento, seco, mino: int; ok7o, s4, s3: bool);
var du4, du4_1, lv13, lv13_1, lv14, lv14_1, lv15, lv15_1, lv16, lv16_1, lv17, lv17_1, s3_1, s3t, 
    s4_1, s4t: bool;
let
  du4_1 = (false);
  lv13_1, lv14_1, lv15_1, lv16_1, lv17_1 = (false, false, false, false, false);
  cento, seco, mino, ok7o, lv13, lv14, lv15, lv16, lv17 =
    if (sg7 and (not ini)) then sgu7_innerlv(TIC, cent, sec, min, ok7, sg7, trm, ini)
    else (cent, sec, min, ok7, lv13_1, lv14_1, lv15_1, lv16_1, lv17_1);
  s3_1 =
    if s3in then su3ex(ok7o, lv13, lv14, lv15, lv16, lv17, lv22, lv19, s3in, trm, ini)
    else (s3in);
  du4, s4_1 =
    if s4in then su4ex(ok7o, lv12, lv13, lv14, lv15, lv16, lv17, lv24, s4in, trm, ini)
    else (du4_1, s4in);
  disp_cento, disp_seco, disp_mino =
    if (sg7 and du4) then dua4(cento, seco, mino, disp_cent, disp_sec, disp_min)
    else (disp_cent, disp_sec, disp_min);
  s3t = su3en(ok7o, ok6, lv12, lv25, s3_1, trm, ini);
  s4t = su4en(ok7o, ok6, lv22, lv18, s4_1, trm, ini);
  s3 = s3t;
  s4 = s4t;
tel

-- node id=6 name=Stop
node sgu6ex(ok6, lv18, lv25, sg6, trm, ini: bool) returns(sg6o: bool);
let
  sg6o = if (((ok6 and lv25) or (ok6 and lv18)) or trm) then (false) else (sg6);
tel

-- node id=6 name=Stop
node sgu6en(ok7, ok61, lv19, lv20, lv24, sg6, trm, ini: bool) returns(sg6o: bool);
let
  sg6o =
    if ((not trm) and ((not sg6) and ((ok7 and lv24) or ((ok61 and lv20) or (ok7 and lv19)))))
    then (true) else (sg6);
tel

-- node id=39 name=_point
node iniu39lv(ok6, trm, ini: bool) returns(ok6o, lv21: bool);
let
  ok6o, lv21 = lv21_(ok6, false);
tel

-- node id=8 name=Reset
node su8lv(START: event; ok7, ok6, s8, trm, ini: bool) returns(ok7o, ok6o, lv18: bool);
let
  ok7o, ok6o, lv18 = lv18_(START, ok7, ok6, false);
tel

-- node id=8 name=Reset
node su8ex(ok6, lv18, s8, trm, ini: bool) returns(s8o: bool);
let
  s8o = if ((ok6 and lv18) or trm) then (false) else (s8);
tel

-- node id=8 name=Reset
node su8en(ok7, ok6, lv21, lv23, lv24, s8, trm, ini: bool) returns(s8o: bool);
let
  s8o =
    if ((not trm) and ((not s8) and ((ok7 and lv24) or ((ok6 and lv23) or (ok6 and lv21)))))
    then (true) else (s8);
tel

-- node id=5 name=Lap_stop
node su5lv(LAP, START: event; ok7, ok6, s5, trm, ini: bool) 
returns(ok7o, ok6o, lv23, lv25: bool);
var ok6_1: bool;
let
  ok6_1, lv23 = lv23_(LAP, ok6, false);
  ok7o, ok6o, lv25 = lv25_(START, ok7, ok6_1, false);
tel

-- node id=5 name=Lap_stop
node su5ex(ok6, lv23, lv25, s5, trm, ini: bool) returns(s5o: bool);
let
  s5o = if (((ok6 and lv25) or (ok6 and lv23)) or trm) then (false) else (s5);
tel

-- node id=5 name=Lap_stop
node su5en(ok7, lv19, s5, trm, ini: bool) returns(s5o: bool);
let
  s5o = if ((not trm) and ((not s5) and (ok7 and lv19))) then (true) else (s5);
tel

-- graph id=37 name=6,NONTOP
node sf_6(LAP: event; cent, sec, min, disp_cent, disp_sec, disp_min: int;
          ok7, ok6, lv23, lv18, lv19, lv24, lv25, s8in, s5in, sg6, trm, ini: bool)
returns(disp_cento, disp_seco, disp_mino, cento, seco, mino: int; ok6o, s8, s5: bool);
var lv21, lv21_1, s5_1, s5t, s8_1, s8t: bool;
let
  lv21_1 = (false);
  ok6o, lv21 =
    if ((not ((ok7 and lv24) or (ok7 and lv19))) and (ini and (not (s5in or s8in))))
    then iniu39lv(ok6, trm, ini) else (ok6, lv21_1);
  s5_1 = if s5in then su5ex(ok6o, lv23, lv25, s5in, trm, ini) else (s5in);
  s8_1 = if s8in then su8ex(ok6o, lv18, s8in, trm, ini) else (s8in);
  disp_cento, disp_seco, disp_mino, cento, seco, mino =
    if (sg6 and s8_1) then ona8(LAP, cent, sec, min, disp_cent, disp_sec, disp_min)
    else (disp_cent, disp_sec, disp_min, cent, sec, min);
  s5t = su5en(ok7, lv19, s5_1, trm, ini);
  s8t = su8en(ok7, ok6o, lv21, lv23, lv24, s8_1, trm, ini);
  s5 = s5t;
  s8 = s8t;
tel

-- graph id=38 name=61,GCTOP
node sf_2(TIC, LAP, START: event) returns(disp_cent, disp_sec, disp_min: int);
var ini, lv12, lv12_1, lv18, lv18_1, lv19, lv19_1, lv20, lv20_1, lv22, lv22_1, lv23, lv23_1, 
    lv24, lv24_1, lv25, lv25_1, ok6, ok61, ok61_1, ok6_1, ok6_2, ok6_3, ok6_4, ok6_5, ok7, 
    ok7_1, ok7_2, ok7_3, ok7_4, ok7_5, s3, s3_1, s4, s4_1, s5, s5_1, s8, s8_1, sg6, sg6_1, 
    sg6_2, sg6t, sg7, sg7_1, sg7_2, sg7t, trm: bool;
    cent, cent_1, cent_2, disp_cent_1, disp_cent_2, disp_min_1, disp_min_2, disp_sec_1, 
    disp_sec_2, min, min_1, min_2, sec, sec_1, sec_2: int;
let
  sg6_1 = false -> pre sg6;
  sg7_1 = false -> pre sg7;
  s5_1 = false -> pre s5;
  s8_1 = false -> pre s8;
  s3_1 = false -> pre s3;
  s4_1 = false -> pre s4;
  disp_sec_1 = 0 -> pre disp_sec;
  disp_min_1 = 0 -> pre disp_min;
  disp_cent_1 = 0 -> pre disp_cent;
  cent_1 = 0 -> pre cent;
  min_1 = 0 -> pre min;
  sec_1 = 0 -> pre sec;
  ok61_1, ok6_1, ok7_1 = (false, false, false);
  ini = true -> false;
  trm = false;
  lv23_1, lv25_1, lv12_1, lv24_1, lv22_1, lv19_1, lv18_1, lv20_1 =
    (false, false, false, false, false, false, false, false);
  ok7_2, ok6_2, lv23, lv25 =
    if s5_1 then su5lv(LAP, START, ok7_1, ok6_1, s5_1, trm, ini)
    else (ok7_1, ok6_1, lv23_1, lv25_1);
  ok7_3, ok6_3, lv12, lv24 =
    if s4_1 then su4lv(LAP, START, ok7_2, ok6_2, s4_1, trm, ini)
    else (ok7_2, ok6_2, lv12_1, lv24_1);
  ok7_4, ok6_4, lv22, lv19 =
    if s3_1 then su3lv(LAP, START, ok7_3, ok6_3, s3_1, trm, ini)
    else (ok7_3, ok6_3, lv22_1, lv19_1);
  ok7_5, ok6_5, lv18 =
    if s8_1 then su8lv(START, ok7_4, ok6_4, s8_1, trm, ini) else (ok7_4, ok6_4, lv18_1);
  ok61, lv20 =
    if (ini and (not (sg6_1 or sg7_1))) then iniu40lv(ok61_1, trm, ini) else (ok61_1, lv20_1);
  sg6_2 = if sg6_1 then sgu6ex(ok6_5, lv18, lv25, sg6_1, trm, ini) else (sg6_1);
  sg7_2 = if sg7_1 then sgu7ex(ok7_5, lv19, lv24, sg7_1, trm, ini) else (sg7_1);
  sg6t = sgu6en(ok7_5, ok61, lv19, lv20, lv24, sg6_2, trm, ini);
  sg7t = sgu7en(ok6_5, lv18, lv25, sg7_2, trm, ini);
  disp_cent_2, disp_sec_2, disp_min_2, cent_2, sec_2, min_2, ok6, s8, s5 =
    sf_6(LAP, cent_1, sec_1, min_1, disp_cent_1, disp_sec_1, disp_min_1, ok7_5, ok6_5, lv23, 
         lv18, lv19, lv24, lv25, s8_1, s5_1, sg6t, 
         (sg6t and trm) -> ((not sg6t) and (pre sg6t)), sg6t -> (sg6t and (not (pre sg6t))));
  disp_cent, disp_sec, disp_min, cent, sec, min, ok7, s4, s3 =
    sf_7(TIC, LAP, cent_2, sec_2, min_2, disp_cent_2, disp_sec_2, disp_min_2, ok7_5, ok6, lv12, 
         lv22, lv18, lv19, lv24, lv25, s4_1, s3_1, sg7t, 
         (sg7t and trm) -> ((not sg7t) and (pre sg7t)), sg7t -> (sg7t and (not (pre sg7t))));
  sg6 = sg6t;
  sg7 = sg7t;
tel


/************************  STATEFLOW  *************************/
 -- $Id$
-- model_file: sf2lus/Stopwatch2.mdl
-- model_name: Stopwatch2
-- command line: /home/bourbouh/Documents/coco-team/regression-test/LPAR/tools/ss2lus0.01b/bin/sf2lus.bc sf2lus/Stopwatch2.mdl -create_missing -r13 -no_constants -o sf2lus/Stopwatch2_sf.lus 

type event = bool;
const set = true; clr = false;


-- link id=25 name=START Lap_stop -> Lap
node evs25_(START: event) returns(evs25: bool);
let
  evs25 = START;
tel

-- link id=24 name=START Running -> Reset
node evs24_(START: event) returns(evs24: bool);
let
  evs24 = START;
tel

-- link id=19 name=START Lap -> Lap_stop
node evs19_(START: event) returns(evs19: bool);
let
  evs19 = START;
tel

-- link id=18 name=START Reset -> Running
node evs18_(START: event) returns(evs18: bool);
let
  evs18 = START;
tel

-- link id=23 name=LAP Lap_stop -> Reset
node evs23_(LAP: event) returns(evs23: bool);
let
  evs23 = LAP;
tel

-- link id=22 name=LAP Lap -> Running
node evs22_(LAP: event) returns(evs22: bool);
let
  evs22 = LAP;
tel

-- link id=17 name=[sec==60]{sec=0; min++;} j10 -> j11
node cv17_(sec: int) returns(ok7, cv17, end: bool);
let
  cv17 = sec = 60;
  ok7, end = (false, cv17);
tel

-- link id=17 name=[sec==60]{sec=0; min++;} j10 -> j11
-- sec=0
-- min++
node ca17(sec, min: int) returns(seco, mino: int);
let
  seco = 0;
  mino = min + 1;
tel

-- link id=14 name=[cent==100]{cent=0; sec++;} j9 -> j10
node cv14_(cent: int) returns(ok7, cv14, end: bool);
let
  cv14 = cent = 100;
  ok7, end = (false, false);
tel

-- link id=14 name=[cent==100]{cent=0; sec++;} j9 -> j10
-- cent=0
-- sec++
node ca14(cent, sec: int) returns(cento, seco: int);
let
  cento = 0;
  seco = sec + 1;
tel

-- link id=13 name=TIC{cent++;} Run -> j9
node evs13_(TIC: event) returns(evs13: bool);
let
  evs13 = TIC;
tel

-- link id=13 name=TIC{cent++;} Run -> j9
-- cent++
node ca13(cent: int) returns(cento: int);
let
  cento = cent + 1;
tel

-- link id=12 name=LAP Running -> Lap
node evs12_(LAP: event) returns(evs12: bool);
let
  evs12 = LAP;
tel

-- link id=25 name=START Lap_stop -> Lap
node lv25_(START: event; ok7, ok6, lv25: bool) returns(ok7o, ok6o, lv25o: bool);
var cv25, end, end_1: bool;
let
  end_1 = false;
  ok7o, ok6o, cv25, end =
    if ((not (end_1 or ok6)) and evs25_(START)) then (true, true, true, true)
    else (ok7, ok6, false, end_1);
  lv25o = if (cv25 and end) then (true) else (lv25);
tel

-- link id=24 name=START Running -> Reset
node lv24_(START: event; ok7, ok6, lv24: bool) returns(ok7o, ok6o, lv24o: bool);
var cv24, end, end_1: bool;
let
  end_1 = false;
  ok7o, ok6o, cv24, end =
    if ((not (end_1 or ok7)) and evs24_(START)) then (true, true, true, true)
    else (ok7, ok6, false, end_1);
  lv24o = if (cv24 and end) then (true) else (lv24);
tel

-- link id=20 name= p40 -> Stop
node lv20_(ok61, lv20: bool) returns(ok61o, lv20o: bool);
var cv20, end, end_1: bool;
let
  end_1 = false;
  ok61o, cv20, end = if (not (end_1 or ok61)) then (true, true, true) else (ok61, false, end_1);
  lv20o = if (cv20 and end) then (true) else (lv20);
tel

-- link id=19 name=START Lap -> Lap_stop
node lv19_(START: event; ok7, ok6, lv19: bool) returns(ok7o, ok6o, lv19o: bool);
var cv19, end, end_1: bool;
let
  end_1 = false;
  ok7o, ok6o, cv19, end =
    if ((not (end_1 or ok7)) and evs19_(START)) then (true, true, true, true)
    else (ok7, ok6, false, end_1);
  lv19o = if (cv19 and end) then (true) else (lv19);
tel

-- link id=18 name=START Reset -> Running
node lv18_(START: event; ok7, ok6, lv18: bool) returns(ok7o, ok6o, lv18o: bool);
var cv18, end, end_1: bool;
let
  end_1 = false;
  ok7o, ok6o, cv18, end =
    if ((not (end_1 or ok6)) and evs18_(START)) then (true, true, true, true)
    else (ok7, ok6, false, end_1);
  lv18o = if (cv18 and end) then (true) else (lv18);
tel

-- link id=23 name=LAP Lap_stop -> Reset
node lv23_(LAP: event; ok6, lv23: bool) returns(ok6o, lv23o: bool);
var cv23, end, end_1: bool;
let
  end_1 = false;
  ok6o, cv23, end =
    if ((not (end_1 or ok6)) and evs23_(LAP)) then (true, true, true) else (ok6, false, end_1);
  lv23o = if (cv23 and end) then (true) else (lv23);
tel

-- link id=21 name= p39 -> Reset
node lv21_(ok6, lv21: bool) returns(ok6o, lv21o: bool);
var cv21, end, end_1: bool;
let
  end_1 = false;
  ok6o, cv21, end = if (not (end_1 or ok6)) then (true, true, true) else (ok6, false, end_1);
  lv21o = if (cv21 and end) then (true) else (lv21);
tel

-- link id=22 name=LAP Lap -> Running
node lv22_(LAP: event; ok7, lv22: bool) returns(ok7o, lv22o: bool);
var cv22, end, end_1: bool;
let
  end_1 = false;
  ok7o, cv22, end =
    if ((not (end_1 or ok7)) and evs22_(LAP)) then (true, true, true) else (ok7, false, end_1);
  lv22o = if (cv22 and end) then (true) else (lv22);
tel

-- link id=13 name=TIC{cent++;} Run -> j9
node lv13_(TIC: event; cent, sec, min: int; ok7, lv13, lv14, lv15, lv16, lv17: bool) 
returns(cento, seco, mino: int; ok7o, lv13o, lv14o, lv15o, lv16o, lv17o: bool);
var cv13, cv14, cv15, cv16, cv17, end, end_1, end_2, end_3, end_4, end_5, lv13_1, lv13_2, 
    lv14_1, lv14_2, lv15_1, lv15_2, lv16_1, lv16_2, lv17_1, lv17_2, ok7_1, ok7_2, ok7_3, ok7_4: 
    bool; cent_1, sec_1: int;
let
  end_1 = false;
  ok7_1, cv13, end_2 =
    if ((not (end_1 or ok7)) and evs13_(TIC)) then (false, true, false) else (ok7, false, end_1);
  cent_1 = if cv13 then ca13(cent) else (cent);
  ok7_2, cv14, end_3 = if ((not end_2) and cv13) then cv14_(cent_1) else (ok7_1, false, end_2);
  cento, sec_1 = if cv14 then ca14(cent_1, sec) else (cent_1, sec);
  ok7_3, cv17, end_4 =
    if ((not end_3) and (cv14 and cv13)) then cv17_(sec_1) else (ok7_2, false, end_3);
  seco, mino = if cv17 then ca17(sec_1, min) else (sec_1, min);
  lv15_1, lv17_1, lv13_1, lv14_1, lv16_1 =
    if (cv17 and end_4) then (false, true, true, true, false)
    else (lv15, lv17, lv13, lv14, lv16);
  ok7_4, cv16, end_5 =
    if ((not end_4) and (cv14 and cv13)) then (false, true, true) else (ok7_3, false, end_4);
  lv15_2, lv17_2, lv13_2, lv14_2, lv16_2 =
    if (cv16 and end_5) then (false, false, true, true, true)
    else (lv15_1, lv17_1, lv13_1, lv14_1, lv16_1);
  ok7o, cv15, end =
    if ((not end_5) and cv13) then (false, true, true) else (ok7_4, false, end_5);
  lv15o, lv17o, lv13o, lv14o, lv16o =
    if (cv15 and end) then (true, false, true, false, false)
    else (lv15_2, lv17_2, lv13_2, lv14_2, lv16_2);
tel

-- link id=12 name=LAP Running -> Lap
node lv12_(LAP: event; ok7, lv12: bool) returns(ok7o, lv12o: bool);
var cv12, end, end_1: bool;
let
  end_1 = false;
  ok7o, cv12, end =
    if ((not (end_1 or ok7)) and evs12_(LAP)) then (true, true, true) else (ok7, false, end_1);
  lv12o = if (cv12 and end) then (true) else (lv12);
tel

-- on action for node id=8 name=Reset
-- LAP: cent=0;sec=0;min=0;disp_cent=0;disp_sec=0;disp_min=0
node ona8(LAP: event; cent, sec, min, disp_cent, disp_sec, disp_min: int) 
returns(disp_cento, disp_seco, disp_mino, cento, seco, mino: int);
let
  cento = if LAP then 0 else (cent);
  seco = if LAP then 0 else (sec);
  mino = if LAP then 0 else (min);
  disp_cento = if LAP then 0 else (disp_cent);
  disp_seco = if LAP then 0 else (disp_sec);
  disp_mino = if LAP then 0 else (disp_min);
tel

-- during action for node id=4 name=Running
-- disp_cent=cent;disp_sec=sec;disp_min=min
node dua4(cent, sec, min, disp_cent, disp_sec, disp_min: int) 
returns(disp_cento, disp_seco, disp_mino: int);
let
  disp_cento = cent;
  disp_seco = sec;
  disp_mino = min;
tel

-- node id=40 name=_point
node iniu40lv(ok61, trm, ini: bool) returns(ok61o, lv20: bool);
let
  ok61o, lv20 = lv20_(ok61, false);
tel

-- node id=7 name=Run
node sgu7_innerlv(TIC: event; cent, sec, min: int; ok7, sg7, trm, ini: bool) 
returns(cento, seco, mino: int; ok7o, lv13, lv14, lv15, lv16, lv17: bool);
let
  cento, seco, mino, ok7o, lv13, lv14, lv15, lv16, lv17 =
    lv13_(TIC, cent, sec, min, ok7, false, false, false, false, false);
tel

-- node id=7 name=Run
node sgu7ex(ok7, lv19, lv24, sg7, trm, ini: bool) returns(sg7o: bool);
let
  sg7o = if (((ok7 and lv24) or (ok7 and lv19)) or trm) then (false) else (sg7);
tel

-- node id=7 name=Run
node sgu7en(ok6, lv18, lv25, sg7, trm, ini: bool) returns(sg7o: bool);
let
  sg7o =
    if ((not trm) and ((not sg7) and ((ok6 and lv25) or (ok6 and lv18)))) then (true) else (sg7);
tel

-- node id=4 name=Running
node su4lv(LAP, START: event; ok7, ok6, s4, trm, ini: bool) 
returns(ok7o, ok6o, lv12, lv24: bool);
var ok7_1: bool;
let
  ok7_1, lv12 = lv12_(LAP, ok7, false);
  ok7o, ok6o, lv24 = lv24_(START, ok7_1, ok6, false);
tel

-- node id=4 name=Running
node su4ex(ok7, lv12, lv13, lv14, lv15, lv16, lv17, lv24, s4, trm, ini: bool) 
returns(du4, s4o: bool);
let
  s4o, du4 =
    if ((((ok7 and lv13) and (ok7 and lv15)) or
         (((ok7 and lv13) and ((ok7 and lv14) and (ok7 and lv17))) or
          (((ok7 and lv13) and ((ok7 and lv14) and (ok7 and lv16))) or
           ((ok7 and lv24) or (ok7 and lv12))))) or
        trm)
    then (false, false) else (s4, true);
tel

-- node id=4 name=Running
node su4en(ok7, ok6, lv22, lv18, s4, trm, ini: bool) returns(s4o: bool);
let
  s4o =
    if ((not trm) and ((not s4) and ((ok6 and lv18) or (ok7 and lv22)))) then (true) else (s4);
tel

-- node id=3 name=Lap
node su3lv(LAP, START: event; ok7, ok6, s3, trm, ini: bool) 
returns(ok7o, ok6o, lv22, lv19: bool);
var ok7_1: bool;
let
  ok7_1, ok6o, lv19 = lv19_(START, ok7, ok6, false);
  ok7o, lv22 = lv22_(LAP, ok7_1, false);
tel

-- node id=3 name=Lap
node su3ex(ok7, lv13, lv14, lv15, lv16, lv17, lv22, lv19, s3, trm, ini: bool) 
returns(s3o: bool);
let
  s3o =
    if ((((ok7 and lv13) and (ok7 and lv15)) or
         (((ok7 and lv13) and ((ok7 and lv14) and (ok7 and lv17))) or
          (((ok7 and lv13) and ((ok7 and lv14) and (ok7 and lv16))) or
           ((ok7 and lv19) or (ok7 and lv22))))) or
        trm)
    then (false) else (s3);
tel

-- node id=3 name=Lap
node su3en(ok7, ok6, lv12, lv25, s3, trm, ini: bool) returns(s3o: bool);
let
  s3o =
    if ((not trm) and ((not s3) and ((ok6 and lv25) or (ok7 and lv12)))) then (true) else (s3);
tel

-- graph id=36 name=7,NONTOP
node sf_7(TIC, LAP: event; cent, sec, min, disp_cent, disp_sec, disp_min: int;
          ok7, ok6, lv12, lv22, lv18, lv19, lv24, lv25, s4in, s3in, sg7, trm, ini: bool)
returns(disp_cento, disp_seco, disp_mino, cento, seco, mino: int; ok7o, s4, s3: bool);
var du4, du4_1, lv13, lv13_1, lv14, lv14_1, lv15, lv15_1, lv16, lv16_1, lv17, lv17_1, s3_1, s3t, 
    s4_1, s4t: bool;
let
  du4_1 = (false);
  lv13_1, lv14_1, lv15_1, lv16_1, lv17_1 = (false, false, false, false, false);
  cento, seco, mino, ok7o, lv13, lv14, lv15, lv16, lv17 =
    if (sg7 and (not ini)) then sgu7_innerlv(TIC, cent, sec, min, ok7, sg7, trm, ini)
    else (cent, sec, min, ok7, lv13_1, lv14_1, lv15_1, lv16_1, lv17_1);
  s3_1 =
    if s3in then su3ex(ok7o, lv13, lv14, lv15, lv16, lv17, lv22, lv19, s3in, trm, ini)
    else (s3in);
  du4, s4_1 =
    if s4in then su4ex(ok7o, lv12, lv13, lv14, lv15, lv16, lv17, lv24, s4in, trm, ini)
    else (du4_1, s4in);
  disp_cento, disp_seco, disp_mino =
    if (sg7 and du4) then dua4(cento, seco, mino, disp_cent, disp_sec, disp_min)
    else (disp_cent, disp_sec, disp_min);
  s3t = su3en(ok7o, ok6, lv12, lv25, s3_1, trm, ini);
  s4t = su4en(ok7o, ok6, lv22, lv18, s4_1, trm, ini);
  s3 = s3t;
  s4 = s4t;
tel

-- node id=6 name=Stop
node sgu6ex(ok6, lv18, lv25, sg6, trm, ini: bool) returns(sg6o: bool);
let
  sg6o = if (((ok6 and lv25) or (ok6 and lv18)) or trm) then (false) else (sg6);
tel

-- node id=6 name=Stop
node sgu6en(ok7, ok61, lv19, lv20, lv24, sg6, trm, ini: bool) returns(sg6o: bool);
let
  sg6o =
    if ((not trm) and ((not sg6) and ((ok7 and lv24) or ((ok61 and lv20) or (ok7 and lv19)))))
    then (true) else (sg6);
tel

-- node id=39 name=_point
node iniu39lv(ok6, trm, ini: bool) returns(ok6o, lv21: bool);
let
  ok6o, lv21 = lv21_(ok6, false);
tel

-- node id=8 name=Reset
node su8lv(START: event; ok7, ok6, s8, trm, ini: bool) returns(ok7o, ok6o, lv18: bool);
let
  ok7o, ok6o, lv18 = lv18_(START, ok7, ok6, false);
tel

-- node id=8 name=Reset
node su8ex(ok6, lv18, s8, trm, ini: bool) returns(s8o: bool);
let
  s8o = if ((ok6 and lv18) or trm) then (false) else (s8);
tel

-- node id=8 name=Reset
node su8en(ok7, ok6, lv21, lv23, lv24, s8, trm, ini: bool) returns(s8o: bool);
let
  s8o =
    if ((not trm) and ((not s8) and ((ok7 and lv24) or ((ok6 and lv23) or (ok6 and lv21)))))
    then (true) else (s8);
tel

-- node id=5 name=Lap_stop
node su5lv(LAP, START: event; ok7, ok6, s5, trm, ini: bool) 
returns(ok7o, ok6o, lv23, lv25: bool);
var ok6_1: bool;
let
  ok6_1, lv23 = lv23_(LAP, ok6, false);
  ok7o, ok6o, lv25 = lv25_(START, ok7, ok6_1, false);
tel

-- node id=5 name=Lap_stop
node su5ex(ok6, lv23, lv25, s5, trm, ini: bool) returns(s5o: bool);
let
  s5o = if (((ok6 and lv25) or (ok6 and lv23)) or trm) then (false) else (s5);
tel

-- node id=5 name=Lap_stop
node su5en(ok7, lv19, s5, trm, ini: bool) returns(s5o: bool);
let
  s5o = if ((not trm) and ((not s5) and (ok7 and lv19))) then (true) else (s5);
tel

-- graph id=37 name=6,NONTOP
node sf_6(LAP: event; cent, sec, min, disp_cent, disp_sec, disp_min: int;
          ok7, ok6, lv23, lv18, lv19, lv24, lv25, s8in, s5in, sg6, trm, ini: bool)
returns(disp_cento, disp_seco, disp_mino, cento, seco, mino: int; ok6o, s8, s5: bool);
var lv21, lv21_1, s5_1, s5t, s8_1, s8t: bool;
let
  lv21_1 = (false);
  ok6o, lv21 =
    if ((not ((ok7 and lv24) or (ok7 and lv19))) and (ini and (not (s5in or s8in))))
    then iniu39lv(ok6, trm, ini) else (ok6, lv21_1);
  s5_1 = if s5in then su5ex(ok6o, lv23, lv25, s5in, trm, ini) else (s5in);
  s8_1 = if s8in then su8ex(ok6o, lv18, s8in, trm, ini) else (s8in);
  disp_cento, disp_seco, disp_mino, cento, seco, mino =
    if (sg6 and s8_1) then ona8(LAP, cent, sec, min, disp_cent, disp_sec, disp_min)
    else (disp_cent, disp_sec, disp_min, cent, sec, min);
  s5t = su5en(ok7, lv19, s5_1, trm, ini);
  s8t = su8en(ok7, ok6o, lv21, lv23, lv24, s8_1, trm, ini);
  s5 = s5t;
  s8 = s8t;
tel

-- graph id=38 name=61,GCTOP
node sf_2(TIC, LAP, START: event) returns(disp_cent, disp_sec, disp_min: int);
var ini, lv12, lv12_1, lv18, lv18_1, lv19, lv19_1, lv20, lv20_1, lv22, lv22_1, lv23, lv23_1, 
    lv24, lv24_1, lv25, lv25_1, ok6, ok61, ok61_1, ok6_1, ok6_2, ok6_3, ok6_4, ok6_5, ok7, 
    ok7_1, ok7_2, ok7_3, ok7_4, ok7_5, s3, s3_1, s4, s4_1, s5, s5_1, s8, s8_1, sg6, sg6_1, 
    sg6_2, sg6t, sg7, sg7_1, sg7_2, sg7t, trm: bool;
    cent, cent_1, cent_2, disp_cent_1, disp_cent_2, disp_min_1, disp_min_2, disp_sec_1, 
    disp_sec_2, min, min_1, min_2, sec, sec_1, sec_2: int;
let
  sg6_1 = false -> pre sg6;
  sg7_1 = false -> pre sg7;
  s5_1 = false -> pre s5;
  s8_1 = false -> pre s8;
  s3_1 = false -> pre s3;
  s4_1 = false -> pre s4;
  disp_sec_1 = 0 -> pre disp_sec;
  disp_min_1 = 0 -> pre disp_min;
  disp_cent_1 = 0 -> pre disp_cent;
  cent_1 = 0 -> pre cent;
  min_1 = 0 -> pre min;
  sec_1 = 0 -> pre sec;
  ok61_1, ok6_1, ok7_1 = (false, false, false);
  ini = true -> false;
  trm = false;
  lv23_1, lv25_1, lv12_1, lv24_1, lv22_1, lv19_1, lv18_1, lv20_1 =
    (false, false, false, false, false, false, false, false);
  ok7_2, ok6_2, lv23, lv25 =
    if s5_1 then su5lv(LAP, START, ok7_1, ok6_1, s5_1, trm, ini)
    else (ok7_1, ok6_1, lv23_1, lv25_1);
  ok7_3, ok6_3, lv12, lv24 =
    if s4_1 then su4lv(LAP, START, ok7_2, ok6_2, s4_1, trm, ini)
    else (ok7_2, ok6_2, lv12_1, lv24_1);
  ok7_4, ok6_4, lv22, lv19 =
    if s3_1 then su3lv(LAP, START, ok7_3, ok6_3, s3_1, trm, ini)
    else (ok7_3, ok6_3, lv22_1, lv19_1);
  ok7_5, ok6_5, lv18 =
    if s8_1 then su8lv(START, ok7_4, ok6_4, s8_1, trm, ini) else (ok7_4, ok6_4, lv18_1);
  ok61, lv20 =
    if (ini and (not (sg6_1 or sg7_1))) then iniu40lv(ok61_1, trm, ini) else (ok61_1, lv20_1);
  sg6_2 = if sg6_1 then sgu6ex(ok6_5, lv18, lv25, sg6_1, trm, ini) else (sg6_1);
  sg7_2 = if sg7_1 then sgu7ex(ok7_5, lv19, lv24, sg7_1, trm, ini) else (sg7_1);
  sg6t = sgu6en(ok7_5, ok61, lv19, lv20, lv24, sg6_2, trm, ini);
  sg7t = sgu7en(ok6_5, lv18, lv25, sg7_2, trm, ini);
  disp_cent_2, disp_sec_2, disp_min_2, cent_2, sec_2, min_2, ok6, s8, s5 =
    sf_6(LAP, cent_1, sec_1, min_1, disp_cent_1, disp_sec_1, disp_min_1, ok7_5, ok6_5, lv23, 
         lv18, lv19, lv24, lv25, s8_1, s5_1, sg6t, 
         (sg6t and trm) -> ((not sg6t) and (pre sg6t)), sg6t -> (sg6t and (not (pre sg6t))));
  disp_cent, disp_sec, disp_min, cent, sec, min, ok7, s4, s3 =
    sf_7(TIC, LAP, cent_2, sec_2, min_2, disp_cent_2, disp_sec_2, disp_min_2, ok7_5, ok6, lv12, 
         lv22, lv18, lv19, lv24, lv25, s4_1, s3_1, sg7t, 
         (sg7t and trm) -> ((not sg7t) and (pre sg7t)), sg7t -> (sg7t and (not (pre sg7t))));
  sg6 = sg6t;
  sg7 = sg7t;
tel
