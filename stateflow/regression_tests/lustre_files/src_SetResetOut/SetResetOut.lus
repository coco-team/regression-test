-- This file has been generated by cocoSim


-- System nodes







-- Entry action for state :SetResetOut_On
node SetResetOut_On_en(idSetResetOut_SetResetOut_1:int;
	is_set_1:int;
	oncnt_1:int;
	isInner:bool)

returns (idSetResetOut_SetResetOut:int;
	is_set:int;
	oncnt:int);


var 	idSetResetOut_SetResetOut_2:int;
	is_set_2:int;
	oncnt_2:int;


let



	-- set state as active 
	idSetResetOut_SetResetOut_2 
	= 217;
	

	is_set_2 
	= if (not isInner) then 1
	 else is_set_1;
	

	oncnt_2 
	= if (not isInner) then  oncnt_1  + 1
	 else oncnt_1;
	

	(idSetResetOut_SetResetOut, is_set, oncnt) 
	= (idSetResetOut_SetResetOut_2, is_set_2, oncnt_2);
	

tel





--During action for state :SetResetOut_On
node SetResetOut_On_du(oncnt_1:int)

returns (oncnt:int);


var 	oncnt_2:int;


let



	oncnt_2 
	=  oncnt_1  + 1;
	

	(oncnt) 
	= (oncnt_2);
	

tel





-- Exit action for state :SetResetOut_On
node SetResetOut_On_ex(is_reset_1:int;
	idSetResetOut_SetResetOut_1:int;
	isInner:bool)

returns (is_reset:int;
	idSetResetOut_SetResetOut:int);


var 	is_reset_2:int;
	idSetResetOut_SetResetOut_2:int;


let



	is_reset_2 
	= if (not isInner) then 1
	 else is_reset_1;
	

	-- set state as inactive 
	idSetResetOut_SetResetOut_2
	 = if (not isInner) then 0 else idSetResetOut_SetResetOut_1;


	(is_reset, idSetResetOut_SetResetOut) 
	= (is_reset_2, idSetResetOut_SetResetOut_2);
	

tel






-- Entry action for state :SetResetOut_Off
node SetResetOut_Off_en(idSetResetOut_SetResetOut_1:int;
	is_set_1:int;
	offcnt_1:int;
	isInner:bool)

returns (idSetResetOut_SetResetOut:int;
	is_set:int;
	offcnt:int);


var 	idSetResetOut_SetResetOut_2:int;
	is_set_2:int;
	offcnt_2:int;


let



	-- set state as active 
	idSetResetOut_SetResetOut_2 
	= 218;
	

	is_set_2 
	= if (not isInner) then 2
	 else is_set_1;
	

	offcnt_2 
	= if (not isInner) then  offcnt_1  + 1
	 else offcnt_1;
	

	(idSetResetOut_SetResetOut, is_set, offcnt) 
	= (idSetResetOut_SetResetOut_2, is_set_2, offcnt_2);
	

tel





--During action for state :SetResetOut_Off
node SetResetOut_Off_du(offcnt_1:int)

returns (offcnt:int);


var 	offcnt_2:int;


let



	offcnt_2 
	=  offcnt_1  + 1;
	

	(offcnt) 
	= (offcnt_2);
	

tel





-- Exit action for state :SetResetOut_Off
node SetResetOut_Off_ex(is_reset_1:int;
	idSetResetOut_SetResetOut_1:int;
	isInner:bool)

returns (is_reset:int;
	idSetResetOut_SetResetOut:int);


var 	is_reset_2:int;
	idSetResetOut_SetResetOut_2:int;


let



	is_reset_2 
	= if (not isInner) then 2
	 else is_reset_1;
	

	-- set state as inactive 
	idSetResetOut_SetResetOut_2
	 = if (not isInner) then 0 else idSetResetOut_SetResetOut_1;


	(is_reset, idSetResetOut_SetResetOut) 
	= (is_reset_2, idSetResetOut_SetResetOut_2);
	

tel


--***************************************************State :SetResetOut_SetResetOut Automaton***************************************************

node SetResetOut_SetResetOut_node(idSetResetOut_SetResetOut_1:int;
	is_set_1:int;
	offcnt_1:int;
	Reset:bool;
	is_reset_1:int;
	Set:bool;
	oncnt_1:int)

returns (idSetResetOut_SetResetOut:int;
	is_set:int;
	offcnt:int;
	is_reset:int;
	oncnt:int);


let

	 automaton setresetout_setresetout

	state POINTSetResetOut_SetResetOut:
	unless (idSetResetOut_SetResetOut_1=0) restart POINT__TO__SETRESETOUT_OFF_1



	unless (idSetResetOut_SetResetOut_1=217) and Reset restart SETRESETOUT_ON__TO__SETRESETOUT_OFF_1



	unless (idSetResetOut_SetResetOut_1=218) and Set restart SETRESETOUT_OFF__TO__SETRESETOUT_ON_1



	unless (idSetResetOut_SetResetOut_1=217) restart SETRESETOUT_ON_IDL

	unless (idSetResetOut_SetResetOut_1=218) restart SETRESETOUT_OFF_IDL

	let

		(idSetResetOut_SetResetOut, is_set, offcnt, is_reset, oncnt) 
	= (idSetResetOut_SetResetOut_1, is_set_1, offcnt_1, is_reset_1, oncnt_1);
	

	tel



	state POINT__TO__SETRESETOUT_OFF_1:

	 var 	idSetResetOut_SetResetOut_2:int;
	is_set_2:int;
	offcnt_2:int;
	let

		-- transition trace :
	--POINT__To__SetResetOut_Off_1
		(idSetResetOut_SetResetOut_2, is_set_2, offcnt_2) 
	= SetResetOut_Off_en(idSetResetOut_SetResetOut_1, is_set_1, offcnt_1, false);
		

	(idSetResetOut_SetResetOut, is_set, offcnt) 
	=  (idSetResetOut_SetResetOut_2, is_set_2, offcnt_2);

	--add unused variables
	(is_reset, oncnt) 
	= (is_reset_1, oncnt_1);
	

	tel

	until true restart POINTSetResetOut_SetResetOut



	state SETRESETOUT_ON__TO__SETRESETOUT_OFF_1:

	 var 	idSetResetOut_SetResetOut_2, idSetResetOut_SetResetOut_3:int;
	is_set_2:int;
	offcnt_2:int;
	is_reset_2:int;
	let

		-- transition trace :
	--SetResetOut_On__To__SetResetOut_Off_1
		(is_reset_2, idSetResetOut_SetResetOut_2) 
	= SetResetOut_On_ex(is_reset_1, idSetResetOut_SetResetOut_1, false);
		

		(idSetResetOut_SetResetOut_3, is_set_2, offcnt_2) 
	= SetResetOut_Off_en(idSetResetOut_SetResetOut_2, is_set_1, offcnt_1, false);
		

	(idSetResetOut_SetResetOut, is_set, offcnt, is_reset) 
	=  (idSetResetOut_SetResetOut_3, is_set_2, offcnt_2, is_reset_2);

	--add unused variables
	(oncnt) 
	= (oncnt_1);
	

	tel

	until true restart POINTSetResetOut_SetResetOut



	state SETRESETOUT_OFF__TO__SETRESETOUT_ON_1:

	 var 	idSetResetOut_SetResetOut_2, idSetResetOut_SetResetOut_3:int;
	is_set_2:int;
	is_reset_2:int;
	oncnt_2:int;
	let

		-- transition trace :
	--SetResetOut_Off__To__SetResetOut_On_1
		(is_reset_2, idSetResetOut_SetResetOut_2) 
	= SetResetOut_Off_ex(is_reset_1, idSetResetOut_SetResetOut_1, false);
		

		(idSetResetOut_SetResetOut_3, is_set_2, oncnt_2) 
	= SetResetOut_On_en(idSetResetOut_SetResetOut_2, is_set_1, oncnt_1, false);
		

	(idSetResetOut_SetResetOut, is_set, offcnt, is_reset, oncnt) 
	=  (idSetResetOut_SetResetOut_3, is_set_2, offcnt_1, is_reset_2, oncnt_2);


	tel

	until true restart POINTSetResetOut_SetResetOut



	state SETRESETOUT_ON_IDL:

	 var 	oncnt_2:int;
	let

		
	(oncnt_2) 
	= SetResetOut_On_du(oncnt_1);

		


	(idSetResetOut_SetResetOut, is_set, offcnt, is_reset, oncnt) 
	= (idSetResetOut_SetResetOut_1, is_set_1, offcnt_1, is_reset_1, oncnt_2);
	

	tel

	until true restart POINTSetResetOut_SetResetOut



	state SETRESETOUT_OFF_IDL:

	 var 	offcnt_2:int;
	let

		
	(offcnt_2) 
	= SetResetOut_Off_du(offcnt_1);

		


	(idSetResetOut_SetResetOut, is_set, offcnt, is_reset, oncnt) 
	= (idSetResetOut_SetResetOut_1, is_set_1, offcnt_2, is_reset_1, oncnt_1);
	

	tel

	until true restart POINTSetResetOut_SetResetOut



tel


--***************************************************State :SetResetOut_SetResetOut Automaton***************************************************

node SetResetOut_SetResetOut(Set:bool;
	Reset:bool)

returns (is_set:int;
	oncnt:int;
	offcnt:int;
	is_reset:int);


var is_set_1: int;

	oncnt_1: int;

	offcnt_1: int;

	is_reset_1: int;

	idSetResetOut_SetResetOut, idSetResetOut_SetResetOut_1: int;

		idSetResetOut_SetResetOut_2:int;
	is_set_2:int;
	offcnt_2:int;
	is_reset_2:int;
	oncnt_2:int;
let

	is_set_1 = 0 -> pre is_set;

	oncnt_1 = 0 -> pre oncnt;

	offcnt_1 = 0 -> pre offcnt;

	is_reset_1 = 0 -> pre is_reset;

	idSetResetOut_SetResetOut_1 = 0 -> pre idSetResetOut_SetResetOut;

	



	(idSetResetOut_SetResetOut_2, is_set_2, offcnt_2, is_reset_2, oncnt_2)
	 = 

	 if Set then SetResetOut_SetResetOut_node(idSetResetOut_SetResetOut_1, is_set_1, offcnt_1, false, is_reset_1, Set, oncnt_1)

	 else (idSetResetOut_SetResetOut_1, is_set_1, offcnt_1, is_reset_1, oncnt_1);

	



	(idSetResetOut_SetResetOut, is_set, offcnt, is_reset, oncnt)
	 = 

	 if Reset then SetResetOut_SetResetOut_node(idSetResetOut_SetResetOut_2, is_set_2, offcnt_2, Reset, is_reset_2, false, oncnt_2)

	 else (idSetResetOut_SetResetOut_2, is_set_2, offcnt_2, is_reset_2, oncnt_2);

	


--unused outputs
	

tel



node SetResetOut (Set_1_1 : real; Reset_1_1 : real)
returns (is_set_1_1 : int;
	oncnt_2_1 : int;
	offcnt_3_1 : int;
	is_reset_4_1 : int); 
var
	Mux1_1_1 : real; Mux1_1_2 : real;
	SetResetOut_1_1 : int; SetResetOut_2_1 : int; SetResetOut_3_1 : int; SetResetOut_4_1 : int;
	Mux1_1_1_event: bool;
	Mux1_1_2_event: bool;
let 
	Mux1_1_1 = Set_1_1 ;
	Mux1_1_2 = Reset_1_1 ;
	Mux1_1_1_event = false -> ((pre(Mux1_1_1) > 0.0 and Mux1_1_1 <= 0.0) or (pre(Mux1_1_1) <= 0.0 and Mux1_1_1 > 0.0));
	Mux1_1_2_event = false -> ((pre(Mux1_1_2) > 0.0 and Mux1_1_2 <= 0.0) or (pre(Mux1_1_2) <= 0.0 and Mux1_1_2 > 0.0));
	(SetResetOut_1_1, SetResetOut_2_1, SetResetOut_3_1, SetResetOut_4_1) =  SetResetOut_SetResetOut(Mux1_1_1_event, Mux1_1_2_event);
	is_set_1_1 = SetResetOut_1_1;
	oncnt_2_1 = SetResetOut_2_1;
	offcnt_3_1 = SetResetOut_3_1;
	is_reset_4_1 = SetResetOut_4_1;
tel

