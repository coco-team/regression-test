-- This file has been generated by CoCoSim


-- System nodes




node N1_B615__To__N1_A614_1_Condition_Action(x_1:int)

returns (x:int);


var 	x_2:int;


let



	x_2 
	=  x_1 -1;
	

	(x) 
	= (x_2);
	

tel






node N2_C616__To__N2_D617_1_Condition_Action(x_1:int)

returns (x:int);


var 	x_2:int;


let



	x_2 
	=  x_1 +100;
	

	(x) 
	= (x_2);
	

tel






node N2_D617__To__N2_C616_1_Condition_Action(x_1:int)

returns (x:int);


var 	x_2:int;


let



	x_2 
	=  x_1 -100;
	

	(x) 
	= (x_2);
	

tel








node N1_A614__To__N1_B615_1_Condition_Action(x_1:int)

returns (x:int);


var 	x_2:int;


let



	x_2 
	=  x_1 +1;
	

	(x) 
	= (x_2);
	

tel






-- Entry action for state :N2_C616
node N2_C616_en(idParallel1_N2613_1:int;
	x_1:int;
	isInner:bool)

returns (idParallel1_N2613:int;
	x:int);


var 	idParallel1_N2613_2:int;
	x_2:int;


let



	-- set state as active 
	idParallel1_N2613_2 
	= 616;
	

	x_2 
	= if (not isInner) then  x_1 +1000
	 else x_1;
	

	(idParallel1_N2613, x) 
	= (idParallel1_N2613_2, x_2);
	

tel





-- Exit action for state :N2_C616
node N2_C616_ex(idParallel1_N2613_1:int;
	isInner:bool)

returns (idParallel1_N2613:int);


var 	idParallel1_N2613_2:int;


let



	-- set state as inactive 
	idParallel1_N2613_2
	 = if (not isInner) then 0 else idParallel1_N2613_1;


	(idParallel1_N2613) 
	= (idParallel1_N2613_1);
	

tel






-- Entry action for state :N2_D617
node N2_D617_en(idParallel1_N2613_1:int;
	x_1:int;
	isInner:bool)

returns (idParallel1_N2613:int;
	x:int);


var 	idParallel1_N2613_2:int;
	x_2:int;


let



	-- set state as active 
	idParallel1_N2613_2 
	= 617;
	

	x_2 
	= if (not isInner) then  x_1 -1000
	 else x_1;
	

	(idParallel1_N2613, x) 
	= (idParallel1_N2613_2, x_2);
	

tel





-- Exit action for state :N2_D617
node N2_D617_ex(idParallel1_N2613_1:int;
	isInner:bool)

returns (idParallel1_N2613:int);


var 	idParallel1_N2613_2:int;


let



	-- set state as inactive 
	idParallel1_N2613_2
	 = if (not isInner) then 0 else idParallel1_N2613_1;


	(idParallel1_N2613) 
	= (idParallel1_N2613_1);
	

tel






-- Entry action for state :Parallel1_N2613
node Parallel1_N2613_en(idParallel1_N2613_1:int;
	idParallel1_Parallel1611_1:int;
	x_1:int;
	isInner:bool)

returns (idParallel1_N2613:int;
	idParallel1_Parallel1611:int;
	x:int);


var 	idParallel1_N2613_2, idParallel1_N2613_3, idParallel1_N2613_4, idParallel1_N2613_5, idParallel1_N2613_6:int;
	idParallel1_Parallel1611_2, idParallel1_Parallel1611_3, idParallel1_Parallel1611_4:int;
	x_2, x_3, x_4, x_5, x_6, x_7:int;


let



	-- set state as active 
	idParallel1_Parallel1611_2 
	= 613;
	

	x_2 
	= if (not isInner) then  x_1 +100000
	 else x_1;
	

	
-- transition trace :
	--POINT__To__N2_C616_1
		(idParallel1_N2613_2, x_3) 
	= N2_C616_en(idParallel1_N2613_1, x_2, false);
		

	(idParallel1_N2613_3, idParallel1_Parallel1611_3, x_4) 
	= 

	if ( idParallel1_N2613_1 = 0) then

	 (idParallel1_N2613_2, idParallel1_Parallel1611_2, x_3)

	 else(idParallel1_N2613_1, idParallel1_Parallel1611_2, x_2);

	

	(idParallel1_N2613_4, x_5) 
	= 
	if ( idParallel1_N2613_1 = 616) then
	N2_C616_en(idParallel1_N2613_1, x_2, false)
	 else (idParallel1_N2613_1, x_2);

	

	(idParallel1_N2613_5, x_6) 
	= 
	if ( idParallel1_N2613_1 = 617) then
	N2_D617_en(idParallel1_N2613_1, x_2, false)
	 else (idParallel1_N2613_1, x_2);

	

	(idParallel1_N2613_6, idParallel1_Parallel1611_4, x_7) 
	= 
		 if ( idParallel1_N2613_1 = 0) then 
		(idParallel1_N2613_3, idParallel1_Parallel1611_3, x_4)
		 else
		 if ( idParallel1_N2613_1 = 616) then 
		(idParallel1_N2613_4, idParallel1_Parallel1611_3, x_5)
		 else
		 if ( idParallel1_N2613_1 = 617) then 
		(idParallel1_N2613_5, idParallel1_Parallel1611_3, x_6)
		 else (idParallel1_N2613_1, idParallel1_Parallel1611_2, x_2);


	(idParallel1_N2613, idParallel1_Parallel1611, x) 
	= (idParallel1_N2613_6, idParallel1_Parallel1611_4, x_7);
	

tel





-- Exit action for state :Parallel1_N2613
node Parallel1_N2613_ex(idParallel1_N2613_1:int;
	x_1:int;
	idParallel1_Parallel1611_1:int;
	isInner:bool)

returns (idParallel1_N2613:int;
	x:int;
	idParallel1_Parallel1611:int);


var 	idParallel1_N2613_2, idParallel1_N2613_3, idParallel1_N2613_4, idParallel1_N2613_5:int;
	x_2:int;
	idParallel1_Parallel1611_2:int;


let



	
	(idParallel1_N2613_2) 
	= 
	if ( idParallel1_N2613_1 = 616) then
	N2_C616_ex(idParallel1_N2613_1, false)
	 else (idParallel1_N2613_1);

	

	(idParallel1_N2613_3) 
	= 
	if ( idParallel1_N2613_1 = 617) then
	N2_D617_ex(idParallel1_N2613_1, false)
	 else (idParallel1_N2613_1);

	

	(idParallel1_N2613_4) 
	= 
		 if ( idParallel1_N2613_1 = 616) then 
		(idParallel1_N2613_2)
		 else
		 if ( idParallel1_N2613_1 = 617) then 
		(idParallel1_N2613_3)
		 else (idParallel1_N2613_1);


	x_2 
	= if (not isInner) then  x_1 -100000
	 else x_1;
	

	-- set state as inactive 
	idParallel1_Parallel1611_2
	 = if (not isInner) then 0 else idParallel1_Parallel1611_1;

	idParallel1_N2613_5 
	= 0;
	

	(idParallel1_N2613, x, idParallel1_Parallel1611) 
	= (idParallel1_N2613_5, x_2, idParallel1_Parallel1611_1);
	

tel






-- Entry action for state :N1_A614
node N1_A614_en(idParallel1_N1612_1:int;
	x_1:int;
	isInner:bool)

returns (idParallel1_N1612:int;
	x:int);


var 	idParallel1_N1612_2:int;
	x_2:int;


let



	-- set state as active 
	idParallel1_N1612_2 
	= 614;
	

	x_2 
	= if (not isInner) then  x_1 +10
	 else x_1;
	

	(idParallel1_N1612, x) 
	= (idParallel1_N1612_2, x_2);
	

tel





-- Exit action for state :N1_A614
node N1_A614_ex(idParallel1_N1612_1:int;
	isInner:bool)

returns (idParallel1_N1612:int);


var 	idParallel1_N1612_2:int;


let



	-- set state as inactive 
	idParallel1_N1612_2
	 = if (not isInner) then 0 else idParallel1_N1612_1;


	(idParallel1_N1612) 
	= (idParallel1_N1612_1);
	

tel






-- Entry action for state :N1_B615
node N1_B615_en(idParallel1_N1612_1:int;
	x_1:int;
	isInner:bool)

returns (idParallel1_N1612:int;
	x:int);


var 	idParallel1_N1612_2:int;
	x_2:int;


let



	-- set state as active 
	idParallel1_N1612_2 
	= 615;
	

	x_2 
	= if (not isInner) then  x_1 -10
	 else x_1;
	

	(idParallel1_N1612, x) 
	= (idParallel1_N1612_2, x_2);
	

tel





-- Exit action for state :N1_B615
node N1_B615_ex(idParallel1_N1612_1:int;
	isInner:bool)

returns (idParallel1_N1612:int);


var 	idParallel1_N1612_2:int;


let



	-- set state as inactive 
	idParallel1_N1612_2
	 = if (not isInner) then 0 else idParallel1_N1612_1;


	(idParallel1_N1612) 
	= (idParallel1_N1612_1);
	

tel






-- Entry action for state :Parallel1_N1612
node Parallel1_N1612_en(idParallel1_N1612_1:int;
	idParallel1_Parallel1611_1:int;
	x_1:int;
	isInner:bool)

returns (idParallel1_N1612:int;
	idParallel1_Parallel1611:int;
	x:int);


var 	idParallel1_N1612_2, idParallel1_N1612_3, idParallel1_N1612_4, idParallel1_N1612_5, idParallel1_N1612_6:int;
	idParallel1_Parallel1611_2, idParallel1_Parallel1611_3, idParallel1_Parallel1611_4:int;
	x_2, x_3, x_4, x_5, x_6, x_7:int;


let



	-- set state as active 
	idParallel1_Parallel1611_2 
	= 612;
	

	x_2 
	= if (not isInner) then  x_1 +10000
	 else x_1;
	

	
-- transition trace :
	--POINT__To__N1_A614_1
		(idParallel1_N1612_2, x_3) 
	= N1_A614_en(idParallel1_N1612_1, x_2, false);
		

	(idParallel1_N1612_3, idParallel1_Parallel1611_3, x_4) 
	= 

	if ( idParallel1_N1612_1 = 0) then

	 (idParallel1_N1612_2, idParallel1_Parallel1611_2, x_3)

	 else(idParallel1_N1612_1, idParallel1_Parallel1611_2, x_2);

	

	(idParallel1_N1612_4, x_5) 
	= 
	if ( idParallel1_N1612_1 = 614) then
	N1_A614_en(idParallel1_N1612_1, x_2, false)
	 else (idParallel1_N1612_1, x_2);

	

	(idParallel1_N1612_5, x_6) 
	= 
	if ( idParallel1_N1612_1 = 615) then
	N1_B615_en(idParallel1_N1612_1, x_2, false)
	 else (idParallel1_N1612_1, x_2);

	

	(idParallel1_N1612_6, idParallel1_Parallel1611_4, x_7) 
	= 
		 if ( idParallel1_N1612_1 = 0) then 
		(idParallel1_N1612_3, idParallel1_Parallel1611_3, x_4)
		 else
		 if ( idParallel1_N1612_1 = 614) then 
		(idParallel1_N1612_4, idParallel1_Parallel1611_3, x_5)
		 else
		 if ( idParallel1_N1612_1 = 615) then 
		(idParallel1_N1612_5, idParallel1_Parallel1611_3, x_6)
		 else (idParallel1_N1612_1, idParallel1_Parallel1611_2, x_2);


	(idParallel1_N1612, idParallel1_Parallel1611, x) 
	= (idParallel1_N1612_6, idParallel1_Parallel1611_4, x_7);
	

tel





-- Exit action for state :Parallel1_N1612
node Parallel1_N1612_ex(idParallel1_N1612_1:int;
	x_1:int;
	idParallel1_Parallel1611_1:int;
	isInner:bool)

returns (idParallel1_N1612:int;
	x:int;
	idParallel1_Parallel1611:int);


var 	idParallel1_N1612_2, idParallel1_N1612_3, idParallel1_N1612_4, idParallel1_N1612_5:int;
	x_2:int;
	idParallel1_Parallel1611_2:int;


let



	
	(idParallel1_N1612_2) 
	= 
	if ( idParallel1_N1612_1 = 614) then
	N1_A614_ex(idParallel1_N1612_1, false)
	 else (idParallel1_N1612_1);

	

	(idParallel1_N1612_3) 
	= 
	if ( idParallel1_N1612_1 = 615) then
	N1_B615_ex(idParallel1_N1612_1, false)
	 else (idParallel1_N1612_1);

	

	(idParallel1_N1612_4) 
	= 
		 if ( idParallel1_N1612_1 = 614) then 
		(idParallel1_N1612_2)
		 else
		 if ( idParallel1_N1612_1 = 615) then 
		(idParallel1_N1612_3)
		 else (idParallel1_N1612_1);


	x_2 
	= if (not isInner) then  x_1 -10000
	 else x_1;
	

	-- set state as inactive 
	idParallel1_Parallel1611_2
	 = if (not isInner) then 0 else idParallel1_Parallel1611_1;

	idParallel1_N1612_5 
	= 0;
	

	(idParallel1_N1612, x, idParallel1_Parallel1611) 
	= (idParallel1_N1612_5, x_2, idParallel1_Parallel1611_1);
	

tel





--During action for state :Parallel1_N1612
node Parallel1_N1612_du(x_1:int)

returns (x:int);


var 	x_2:int;


let



	x_2 
	=  x_1 +1000000;
	

	(x) 
	= (x_2);
	

tel


--***************************************************State :Parallel1_N2613 Automaton***************************************************

node Parallel1_N2613_node(idParallel1_N2613_1:int;
	x_1:int;
	S2:bool;
	R2:bool)

returns (idParallel1_N2613:int;
	x:int);


let

	 automaton parallel1_n2613

	state POINTParallel1_N2613:
	unless (idParallel1_N2613_1=0) restart POINT__TO__N2_C616_1



	unless (idParallel1_N2613_1=616) and S2 restart N2_C616__TO__N2_D617_1



	unless (idParallel1_N2613_1=617) and R2 restart N2_D617__TO__N2_C616_1



	unless (idParallel1_N2613_1=616) restart N2_C616_IDL

	unless (idParallel1_N2613_1=617) restart N2_D617_IDL

	let

		(idParallel1_N2613, x) 
	= (idParallel1_N2613_1, x_1);
	

	tel



	state POINT__TO__N2_C616_1:

	 var 	idParallel1_N2613_2:int;
	x_2:int;
	let

		-- transition trace :
	--POINT__To__N2_C616_1
		(idParallel1_N2613_2, x_2) 
	= N2_C616_en(idParallel1_N2613_1, x_1, false);
		

	(idParallel1_N2613, x) 
	=  (idParallel1_N2613_2, x_2);


	tel

	until true restart POINTParallel1_N2613



	state N2_C616__TO__N2_D617_1:

	 var 	idParallel1_N2613_2, idParallel1_N2613_3:int;
	x_2, x_3:int;
	let

		-- transition trace :
	--N2_C616__To__N2_D617_1
		-- condition Action : x+=100;
		
		(x_2) 
	= N2_C616__To__N2_D617_1_Condition_Action(x_1);
		

		(idParallel1_N2613_2) 
	= N2_C616_ex(idParallel1_N2613_1, false);
		

		(idParallel1_N2613_3, x_3) 
	= N2_D617_en(idParallel1_N2613_2, x_2, false);
		

	(idParallel1_N2613, x) 
	=  (idParallel1_N2613_3, x_3);


	tel

	until true restart POINTParallel1_N2613



	state N2_D617__TO__N2_C616_1:

	 var 	idParallel1_N2613_2, idParallel1_N2613_3:int;
	x_2, x_3:int;
	let

		-- transition trace :
	--N2_D617__To__N2_C616_1
		-- condition Action : x-=100;
		
		(x_2) 
	= N2_D617__To__N2_C616_1_Condition_Action(x_1);
		

		(idParallel1_N2613_2) 
	= N2_D617_ex(idParallel1_N2613_1, false);
		

		(idParallel1_N2613_3, x_3) 
	= N2_C616_en(idParallel1_N2613_2, x_2, false);
		

	(idParallel1_N2613, x) 
	=  (idParallel1_N2613_3, x_3);


	tel

	until true restart POINTParallel1_N2613



	state N2_C616_IDL:

	 	let

		

	(idParallel1_N2613, x) 
	= (idParallel1_N2613_1, x_1);
	

	tel

	until true restart POINTParallel1_N2613



	state N2_D617_IDL:

	 	let

		

	(idParallel1_N2613, x) 
	= (idParallel1_N2613_1, x_1);
	

	tel

	until true restart POINTParallel1_N2613



tel


--***************************************************State :Parallel1_N1612 Automaton***************************************************

node Parallel1_N1612_node(idParallel1_N1612_1:int;
	x_1:int;
	S1:bool;
	R1:bool)

returns (idParallel1_N1612:int;
	x:int);


let

	 automaton parallel1_n1612

	state POINTParallel1_N1612:
	unless (idParallel1_N1612_1=0) restart POINT__TO__N1_A614_1



	unless (idParallel1_N1612_1=614) and S1 restart N1_A614__TO__N1_B615_1



	unless (idParallel1_N1612_1=615) and R1 restart N1_B615__TO__N1_A614_1



	unless (idParallel1_N1612_1=614) restart N1_A614_IDL

	unless (idParallel1_N1612_1=615) restart N1_B615_IDL

	let

		(idParallel1_N1612, x) 
	= (idParallel1_N1612_1, x_1);
	

	tel



	state POINT__TO__N1_A614_1:

	 var 	idParallel1_N1612_2:int;
	x_2:int;
	let

		-- transition trace :
	--POINT__To__N1_A614_1
		(idParallel1_N1612_2, x_2) 
	= N1_A614_en(idParallel1_N1612_1, x_1, false);
		

	(idParallel1_N1612, x) 
	=  (idParallel1_N1612_2, x_2);


	tel

	until true restart POINTParallel1_N1612



	state N1_A614__TO__N1_B615_1:

	 var 	idParallel1_N1612_2, idParallel1_N1612_3:int;
	x_2, x_3:int;
	let

		-- transition trace :
	--N1_A614__To__N1_B615_1
		-- condition Action : x+=1;
		
		(x_2) 
	= N1_A614__To__N1_B615_1_Condition_Action(x_1);
		

		(idParallel1_N1612_2) 
	= N1_A614_ex(idParallel1_N1612_1, false);
		

		(idParallel1_N1612_3, x_3) 
	= N1_B615_en(idParallel1_N1612_2, x_2, false);
		

	(idParallel1_N1612, x) 
	=  (idParallel1_N1612_3, x_3);


	tel

	until true restart POINTParallel1_N1612



	state N1_B615__TO__N1_A614_1:

	 var 	idParallel1_N1612_2, idParallel1_N1612_3:int;
	x_2, x_3:int;
	let

		-- transition trace :
	--N1_B615__To__N1_A614_1
		-- condition Action : x-=1;
		
		(x_2) 
	= N1_B615__To__N1_A614_1_Condition_Action(x_1);
		

		(idParallel1_N1612_2) 
	= N1_B615_ex(idParallel1_N1612_1, false);
		

		(idParallel1_N1612_3, x_3) 
	= N1_A614_en(idParallel1_N1612_2, x_2, false);
		

	(idParallel1_N1612, x) 
	=  (idParallel1_N1612_3, x_3);


	tel

	until true restart POINTParallel1_N1612



	state N1_A614_IDL:

	 	let

		

	(idParallel1_N1612, x) 
	= (idParallel1_N1612_1, x_1);
	

	tel

	until true restart POINTParallel1_N1612



	state N1_B615_IDL:

	 	let

		

	(idParallel1_N1612, x) 
	= (idParallel1_N1612_1, x_1);
	

	tel

	until true restart POINTParallel1_N1612



tel


--***************************************************State :Parallel1_Parallel1611 Automaton***************************************************

node Parallel1_Parallel1611_node(idParallel1_Parallel1611_1:int;
	idParallel1_N1612_1:int;
	x_1:int;
	idParallel1_N2613_1:int;
	R1:bool;
	S1:bool;
	R2:bool;
	S2:bool)

returns (idParallel1_Parallel1611:int;
	idParallel1_N1612:int;
	x:int;
	idParallel1_N2613:int);


let

	 automaton parallel1_parallel1611

	state POINTParallel1_Parallel1611:
	unless (idParallel1_Parallel1611_1=0) restart PARALLEL1_PARALLEL1611_PARALLEL_ENTRY
	unless true  restart PARALLEL1_PARALLEL1611_PARALLEL_IDL

	let

		(idParallel1_Parallel1611, idParallel1_N1612, x, idParallel1_N2613) 
	= (idParallel1_Parallel1611_1, idParallel1_N1612_1, x_1, idParallel1_N2613_1);
	

	tel



	state PARALLEL1_PARALLEL1611_PARALLEL_ENTRY:

	 var 	idParallel1_Parallel1611_2, idParallel1_Parallel1611_3:int;
	idParallel1_N1612_2:int;
	x_2, x_3:int;
	idParallel1_N2613_2:int;
	let

		
	(idParallel1_N1612_2, idParallel1_Parallel1611_2, x_2) 
	= Parallel1_N1612_en(idParallel1_N1612_1, idParallel1_Parallel1611_1, x_1, false);

	(idParallel1_N2613_2, idParallel1_Parallel1611_3, x_3) 
	= Parallel1_N2613_en(idParallel1_N2613_1, idParallel1_Parallel1611_2, x_2, false);


	(idParallel1_Parallel1611, idParallel1_N1612, x, idParallel1_N2613) 
	= (idParallel1_Parallel1611_3, idParallel1_N1612_2, x_3, idParallel1_N2613_2);
	

	tel

	until true restart POINTParallel1_Parallel1611



	state PARALLEL1_PARALLEL1611_PARALLEL_IDL:

	 var 	idParallel1_N1612_2:int;
	x_2, x_3, x_4:int;
	idParallel1_N2613_2:int;
	let

		
	(x_2) 
	= if not (idParallel1_N1612_1= 0 ) then Parallel1_N1612_du(x_1)

		 else (x_1);

		


		(idParallel1_N1612_2, x_3)
	= if not (idParallel1_N1612_1= 0 ) then Parallel1_N1612_node(idParallel1_N1612_1, x_2, S1, R1)

		 else (idParallel1_N1612_1, x_2);

		

		

		(idParallel1_N2613_2, x_4)
	= if not (idParallel1_N2613_1= 0 ) then Parallel1_N2613_node(idParallel1_N2613_1, x_3, S2, R2)

		 else (idParallel1_N2613_1, x_3);

		

		

	(idParallel1_Parallel1611, idParallel1_N1612, x, idParallel1_N2613) 
	= (idParallel1_Parallel1611_1, idParallel1_N1612_2, x_4, idParallel1_N2613_2);
	

	tel

	until true restart POINTParallel1_Parallel1611



tel


--***************************************************State :Parallel1_Parallel1611 Automaton***************************************************

node Parallel1_PP_Parallel1(S1:bool;
	R1:bool;
	S2:bool;
	R2:bool)

returns (x:int);


var x_1: int;

	idParallel1_Parallel1611, idParallel1_Parallel1611_1: int;

	idParallel1_N2613, idParallel1_N2613_1: int;

	idParallel1_N1612, idParallel1_N1612_1: int;

		idParallel1_Parallel1611_2, idParallel1_Parallel1611_3, idParallel1_Parallel1611_4:int;
	idParallel1_N1612_2, idParallel1_N1612_3, idParallel1_N1612_4:int;
	x_2, x_3, x_4:int;
	idParallel1_N2613_2, idParallel1_N2613_3, idParallel1_N2613_4:int;
let

	x_1 = 0 -> pre x;

	idParallel1_Parallel1611_1 = 0 -> pre idParallel1_Parallel1611;

	idParallel1_N2613_1 = 0 -> pre idParallel1_N2613;

	idParallel1_N1612_1 = 0 -> pre idParallel1_N1612;

	



	(idParallel1_Parallel1611_2, idParallel1_N1612_2, x_2, idParallel1_N2613_2)
	 = 

	 if S1 then Parallel1_Parallel1611_node(idParallel1_Parallel1611_1, idParallel1_N1612_1, x_1, idParallel1_N2613_1, false, S1, false, false)

	 else (idParallel1_Parallel1611_1, idParallel1_N1612_1, x_1, idParallel1_N2613_1);

	



	(idParallel1_Parallel1611_3, idParallel1_N1612_3, x_3, idParallel1_N2613_3)
	 = 

	 if R1 then Parallel1_Parallel1611_node(idParallel1_Parallel1611_2, idParallel1_N1612_2, x_2, idParallel1_N2613_2, R1, false, false, false)

	 else (idParallel1_Parallel1611_2, idParallel1_N1612_2, x_2, idParallel1_N2613_2);

	



	(idParallel1_Parallel1611_4, idParallel1_N1612_4, x_4, idParallel1_N2613_4)
	 = 

	 if S2 then Parallel1_Parallel1611_node(idParallel1_Parallel1611_3, idParallel1_N1612_3, x_3, idParallel1_N2613_3, false, false, false, S2)

	 else (idParallel1_Parallel1611_3, idParallel1_N1612_3, x_3, idParallel1_N2613_3);

	



	(idParallel1_Parallel1611, idParallel1_N1612, x, idParallel1_N2613)
	 = 

	 if R2 then Parallel1_Parallel1611_node(idParallel1_Parallel1611_4, idParallel1_N1612_4, x_4, idParallel1_N2613_4, false, false, R2, false)

	 else (idParallel1_Parallel1611_4, idParallel1_N1612_4, x_4, idParallel1_N2613_4);

	


--unused outputs
	

tel



node Parallel1_PP (S1_1_1 : real; R1_1_1 : real; S2_1_1 : real; R2_1_1 : real)
returns (x_1_1 : int); 
var
	Mux_1_1 : real; Mux_1_2 : real; Mux_1_3 : real; Mux_1_4 : real;
	Parallel1_1_1 : int;
	i_virtual_local : real;
	Parallel1Mux_1_1_event: bool;
	Parallel1Mux_1_2_event: bool;
	Parallel1Mux_1_3_event: bool;
	Parallel1Mux_1_4_event: bool;
let 
	Mux_1_1 = S1_1_1 ;
	Mux_1_2 = R1_1_1 ;
	Mux_1_3 = S2_1_1 ;
	Mux_1_4 = R2_1_1 ;
	Parallel1Mux_1_1_event = false -> ((pre(Mux_1_1) > 0.0 and Mux_1_1 <= 0.0) or (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0));
	Parallel1Mux_1_2_event = false -> ((pre(Mux_1_2) > 0.0 and Mux_1_2 <= 0.0) or (pre(Mux_1_2) <= 0.0 and Mux_1_2 > 0.0));
	Parallel1Mux_1_3_event = false -> ((pre(Mux_1_3) > 0.0 and Mux_1_3 <= 0.0) or (pre(Mux_1_3) <= 0.0 and Mux_1_3 > 0.0));
	Parallel1Mux_1_4_event = false -> ((pre(Mux_1_4) > 0.0 and Mux_1_4 <= 0.0) or (pre(Mux_1_4) <= 0.0 and Mux_1_4 > 0.0));
	Parallel1_1_1 =  Parallel1_PP_Parallel1(Parallel1Mux_1_1_event, Parallel1Mux_1_2_event, Parallel1Mux_1_3_event, Parallel1Mux_1_4_event);
	x_1_1 = Parallel1_1_1;
	i_virtual_local= 0.0 -> 1.0;
tel

