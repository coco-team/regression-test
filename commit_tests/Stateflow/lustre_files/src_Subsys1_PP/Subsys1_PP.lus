-- This file has been generated by CoCoSim


-- System nodes










-- Entry action for state :D_Da805
node D_Da805_en(idchart_D802_1:int;
	x:int;
	d_1:int;
	isInner:bool)

returns (idchart_D802:int;
	d:int);


var 	idchart_D802_2:int;
	d_2:int;


let



	-- set state as active 
	idchart_D802_2 
	= 805;
	

	d_2 
	= if (not isInner) then x+7
	 else d_1;
	

	(idchart_D802, d) 
	= (idchart_D802_2, d_2);
	

tel





-- Exit action for state :D_Da805
node D_Da805_ex(idchart_D802_1:int;
	isInner:bool)

returns (idchart_D802:int);


var 	idchart_D802_2:int;


let



	-- set state as inactive 
	idchart_D802_2
	 = if (not isInner) then 0 else idchart_D802_1;


	(idchart_D802) 
	= (idchart_D802_1);
	

tel






-- Entry action for state :D_Db806
node D_Db806_en(idchart_D802_1:int;
	x:int;
	d_1:int;
	isInner:bool)

returns (idchart_D802:int;
	d:int);


var 	idchart_D802_2:int;
	d_2:int;


let



	-- set state as active 
	idchart_D802_2 
	= 806;
	

	d_2 
	= if (not isInner) then x+8
	 else d_1;
	

	(idchart_D802, d) 
	= (idchart_D802_2, d_2);
	

tel





-- Exit action for state :D_Db806
node D_Db806_ex(idchart_D802_1:int;
	isInner:bool)

returns (idchart_D802:int);


var 	idchart_D802_2:int;


let



	-- set state as inactive 
	idchart_D802_2
	 = if (not isInner) then 0 else idchart_D802_1;


	(idchart_D802) 
	= (idchart_D802_1);
	

tel






-- Entry action for state :chart_D802
node chart_D802_en(idchart_D802_1:int;
	idchart_chart794_1:int;
	d_1:int;
	x:int;
	isInner:bool)

returns (idchart_D802:int;
	idchart_chart794:int;
	d:int);


var 	idchart_D802_2, idchart_D802_3, idchart_D802_4, idchart_D802_5, idchart_D802_6:int;
	idchart_chart794_2, idchart_chart794_3, idchart_chart794_4:int;
	d_2, d_3, d_4, d_5, d_6:int;


let



	-- set state as active 
	idchart_chart794_2 
	= 802;
	

	
-- transition trace :
	--POINT__To__D_Da805_1
		(idchart_D802_2, d_2) 
	= D_Da805_en(idchart_D802_1, x, d_1, false);
		

	(idchart_D802_3, idchart_chart794_3, d_3) 
	= 

	if ( idchart_D802_1 = 0) then

	 (idchart_D802_2, idchart_chart794_2, d_2)

	 else(idchart_D802_1, idchart_chart794_2, d_1);

	

	(idchart_D802_4, d_4) 
	= 
	if ( idchart_D802_1 = 805) then
	D_Da805_en(idchart_D802_1, x, d_1, false)
	 else (idchart_D802_1, d_1);

	

	(idchart_D802_5, d_5) 
	= 
	if ( idchart_D802_1 = 806) then
	D_Db806_en(idchart_D802_1, x, d_1, false)
	 else (idchart_D802_1, d_1);

	

	(idchart_D802_6, idchart_chart794_4, d_6) 
	= 
		 if ( idchart_D802_1 = 0) then 
		(idchart_D802_3, idchart_chart794_3, d_3)
		 else
		 if ( idchart_D802_1 = 805) then 
		(idchart_D802_4, idchart_chart794_3, d_4)
		 else
		 if ( idchart_D802_1 = 806) then 
		(idchart_D802_5, idchart_chart794_3, d_5)
		 else (idchart_D802_1, idchart_chart794_2, d_1);


	(idchart_D802, idchart_chart794, d) 
	= (idchart_D802_6, idchart_chart794_4, d_6);
	

tel





-- Exit action for state :chart_D802
node chart_D802_ex(idchart_D802_1:int;
	idchart_chart794_1:int;
	isInner:bool)

returns (idchart_D802:int;
	idchart_chart794:int);


var 	idchart_D802_2, idchart_D802_3, idchart_D802_4, idchart_D802_5:int;
	idchart_chart794_2:int;


let



	
	(idchart_D802_2) 
	= 
	if ( idchart_D802_1 = 805) then
	D_Da805_ex(idchart_D802_1, false)
	 else (idchart_D802_1);

	

	(idchart_D802_3) 
	= 
	if ( idchart_D802_1 = 806) then
	D_Db806_ex(idchart_D802_1, false)
	 else (idchart_D802_1);

	

	(idchart_D802_4) 
	= 
		 if ( idchart_D802_1 = 805) then 
		(idchart_D802_2)
		 else
		 if ( idchart_D802_1 = 806) then 
		(idchart_D802_3)
		 else (idchart_D802_1);


	-- set state as inactive 
	idchart_chart794_2
	 = if (not isInner) then 0 else idchart_chart794_1;

	idchart_D802_5 
	= 0;
	

	(idchart_D802, idchart_chart794) 
	= (idchart_D802_5, idchart_chart794_1);
	

tel






-- Entry action for state :C_Ca803
node C_Ca803_en(idchart_C799_1:int;
	x:int;
	c_1:int;
	isInner:bool)

returns (idchart_C799:int;
	c:int);


var 	idchart_C799_2:int;
	c_2:int;


let



	-- set state as active 
	idchart_C799_2 
	= 803;
	

	c_2 
	= if (not isInner) then x+5
	 else c_1;
	

	(idchart_C799, c) 
	= (idchart_C799_2, c_2);
	

tel





-- Exit action for state :C_Ca803
node C_Ca803_ex(idchart_C799_1:int;
	isInner:bool)

returns (idchart_C799:int);


var 	idchart_C799_2:int;


let



	-- set state as inactive 
	idchart_C799_2
	 = if (not isInner) then 0 else idchart_C799_1;


	(idchart_C799) 
	= (idchart_C799_1);
	

tel






-- Entry action for state :C_Cb804
node C_Cb804_en(idchart_C799_1:int;
	x:int;
	c_1:int;
	isInner:bool)

returns (idchart_C799:int;
	c:int);


var 	idchart_C799_2:int;
	c_2:int;


let



	-- set state as active 
	idchart_C799_2 
	= 804;
	

	c_2 
	= if (not isInner) then x+6
	 else c_1;
	

	(idchart_C799, c) 
	= (idchart_C799_2, c_2);
	

tel





-- Exit action for state :C_Cb804
node C_Cb804_ex(idchart_C799_1:int;
	isInner:bool)

returns (idchart_C799:int);


var 	idchart_C799_2:int;


let



	-- set state as inactive 
	idchart_C799_2
	 = if (not isInner) then 0 else idchart_C799_1;


	(idchart_C799) 
	= (idchart_C799_1);
	

tel






-- Entry action for state :chart_C799
node chart_C799_en(idchart_C799_1:int;
	idchart_chart794_1:int;
	c_1:int;
	x:int;
	isInner:bool)

returns (idchart_C799:int;
	idchart_chart794:int;
	c:int);


var 	idchart_C799_2, idchart_C799_3, idchart_C799_4, idchart_C799_5, idchart_C799_6:int;
	idchart_chart794_2, idchart_chart794_3, idchart_chart794_4:int;
	c_2, c_3, c_4, c_5, c_6:int;


let



	-- set state as active 
	idchart_chart794_2 
	= 799;
	

	
-- transition trace :
	--POINT__To__C_Ca803_1
		(idchart_C799_2, c_2) 
	= C_Ca803_en(idchart_C799_1, x, c_1, false);
		

	(idchart_C799_3, idchart_chart794_3, c_3) 
	= 

	if ( idchart_C799_1 = 0) then

	 (idchart_C799_2, idchart_chart794_2, c_2)

	 else(idchart_C799_1, idchart_chart794_2, c_1);

	

	(idchart_C799_4, c_4) 
	= 
	if ( idchart_C799_1 = 803) then
	C_Ca803_en(idchart_C799_1, x, c_1, false)
	 else (idchart_C799_1, c_1);

	

	(idchart_C799_5, c_5) 
	= 
	if ( idchart_C799_1 = 804) then
	C_Cb804_en(idchart_C799_1, x, c_1, false)
	 else (idchart_C799_1, c_1);

	

	(idchart_C799_6, idchart_chart794_4, c_6) 
	= 
		 if ( idchart_C799_1 = 0) then 
		(idchart_C799_3, idchart_chart794_3, c_3)
		 else
		 if ( idchart_C799_1 = 803) then 
		(idchart_C799_4, idchart_chart794_3, c_4)
		 else
		 if ( idchart_C799_1 = 804) then 
		(idchart_C799_5, idchart_chart794_3, c_5)
		 else (idchart_C799_1, idchart_chart794_2, c_1);


	(idchart_C799, idchart_chart794, c) 
	= (idchart_C799_6, idchart_chart794_4, c_6);
	

tel





-- Exit action for state :chart_C799
node chart_C799_ex(idchart_C799_1:int;
	idchart_chart794_1:int;
	isInner:bool)

returns (idchart_C799:int;
	idchart_chart794:int);


var 	idchart_C799_2, idchart_C799_3, idchart_C799_4, idchart_C799_5:int;
	idchart_chart794_2:int;


let



	
	(idchart_C799_2) 
	= 
	if ( idchart_C799_1 = 803) then
	C_Ca803_ex(idchart_C799_1, false)
	 else (idchart_C799_1);

	

	(idchart_C799_3) 
	= 
	if ( idchart_C799_1 = 804) then
	C_Cb804_ex(idchart_C799_1, false)
	 else (idchart_C799_1);

	

	(idchart_C799_4) 
	= 
		 if ( idchart_C799_1 = 803) then 
		(idchart_C799_2)
		 else
		 if ( idchart_C799_1 = 804) then 
		(idchart_C799_3)
		 else (idchart_C799_1);


	-- set state as inactive 
	idchart_chart794_2
	 = if (not isInner) then 0 else idchart_chart794_1;

	idchart_C799_5 
	= 0;
	

	(idchart_C799, idchart_chart794) 
	= (idchart_C799_5, idchart_chart794_1);
	

tel






-- Entry action for state :B_Ba800
node B_Ba800_en(idchart_B796_1:int;
	x:int;
	b_1:int;
	isInner:bool)

returns (idchart_B796:int;
	b:int);


var 	idchart_B796_2:int;
	b_2:int;


let



	-- set state as active 
	idchart_B796_2 
	= 800;
	

	b_2 
	= if (not isInner) then x+3
	 else b_1;
	

	(idchart_B796, b) 
	= (idchart_B796_2, b_2);
	

tel





-- Exit action for state :B_Ba800
node B_Ba800_ex(idchart_B796_1:int;
	isInner:bool)

returns (idchart_B796:int);


var 	idchart_B796_2:int;


let



	-- set state as inactive 
	idchart_B796_2
	 = if (not isInner) then 0 else idchart_B796_1;


	(idchart_B796) 
	= (idchart_B796_1);
	

tel






-- Entry action for state :B_Bb801
node B_Bb801_en(idchart_B796_1:int;
	x:int;
	b_1:int;
	isInner:bool)

returns (idchart_B796:int;
	b:int);


var 	idchart_B796_2:int;
	b_2:int;


let



	-- set state as active 
	idchart_B796_2 
	= 801;
	

	b_2 
	= if (not isInner) then x+4
	 else b_1;
	

	(idchart_B796, b) 
	= (idchart_B796_2, b_2);
	

tel





-- Exit action for state :B_Bb801
node B_Bb801_ex(idchart_B796_1:int;
	isInner:bool)

returns (idchart_B796:int);


var 	idchart_B796_2:int;


let



	-- set state as inactive 
	idchart_B796_2
	 = if (not isInner) then 0 else idchart_B796_1;


	(idchart_B796) 
	= (idchart_B796_1);
	

tel






-- Entry action for state :chart_B796
node chart_B796_en(idchart_B796_1:int;
	idchart_chart794_1:int;
	b_1:int;
	x:int;
	isInner:bool)

returns (idchart_B796:int;
	idchart_chart794:int;
	b:int);


var 	idchart_B796_2, idchart_B796_3, idchart_B796_4, idchart_B796_5, idchart_B796_6:int;
	idchart_chart794_2, idchart_chart794_3, idchart_chart794_4:int;
	b_2, b_3, b_4, b_5, b_6:int;


let



	-- set state as active 
	idchart_chart794_2 
	= 796;
	

	
-- transition trace :
	--POINT__To__B_Ba800_1
		(idchart_B796_2, b_2) 
	= B_Ba800_en(idchart_B796_1, x, b_1, false);
		

	(idchart_B796_3, idchart_chart794_3, b_3) 
	= 

	if ( idchart_B796_1 = 0) then

	 (idchart_B796_2, idchart_chart794_2, b_2)

	 else(idchart_B796_1, idchart_chart794_2, b_1);

	

	(idchart_B796_4, b_4) 
	= 
	if ( idchart_B796_1 = 800) then
	B_Ba800_en(idchart_B796_1, x, b_1, false)
	 else (idchart_B796_1, b_1);

	

	(idchart_B796_5, b_5) 
	= 
	if ( idchart_B796_1 = 801) then
	B_Bb801_en(idchart_B796_1, x, b_1, false)
	 else (idchart_B796_1, b_1);

	

	(idchart_B796_6, idchart_chart794_4, b_6) 
	= 
		 if ( idchart_B796_1 = 0) then 
		(idchart_B796_3, idchart_chart794_3, b_3)
		 else
		 if ( idchart_B796_1 = 800) then 
		(idchart_B796_4, idchart_chart794_3, b_4)
		 else
		 if ( idchart_B796_1 = 801) then 
		(idchart_B796_5, idchart_chart794_3, b_5)
		 else (idchart_B796_1, idchart_chart794_2, b_1);


	(idchart_B796, idchart_chart794, b) 
	= (idchart_B796_6, idchart_chart794_4, b_6);
	

tel





-- Exit action for state :chart_B796
node chart_B796_ex(idchart_B796_1:int;
	idchart_chart794_1:int;
	isInner:bool)

returns (idchart_B796:int;
	idchart_chart794:int);


var 	idchart_B796_2, idchart_B796_3, idchart_B796_4, idchart_B796_5:int;
	idchart_chart794_2:int;


let



	
	(idchart_B796_2) 
	= 
	if ( idchart_B796_1 = 800) then
	B_Ba800_ex(idchart_B796_1, false)
	 else (idchart_B796_1);

	

	(idchart_B796_3) 
	= 
	if ( idchart_B796_1 = 801) then
	B_Bb801_ex(idchart_B796_1, false)
	 else (idchart_B796_1);

	

	(idchart_B796_4) 
	= 
		 if ( idchart_B796_1 = 800) then 
		(idchart_B796_2)
		 else
		 if ( idchart_B796_1 = 801) then 
		(idchart_B796_3)
		 else (idchart_B796_1);


	-- set state as inactive 
	idchart_chart794_2
	 = if (not isInner) then 0 else idchart_chart794_1;

	idchart_B796_5 
	= 0;
	

	(idchart_B796, idchart_chart794) 
	= (idchart_B796_5, idchart_chart794_1);
	

tel






-- Entry action for state :A_Aa797
node A_Aa797_en(idchart_A795_1:int;
	x:int;
	a_1:int;
	isInner:bool)

returns (idchart_A795:int;
	a:int);


var 	idchart_A795_2:int;
	a_2:int;


let



	-- set state as active 
	idchart_A795_2 
	= 797;
	

	a_2 
	= if (not isInner) then x+1
	 else a_1;
	

	(idchart_A795, a) 
	= (idchart_A795_2, a_2);
	

tel





-- Exit action for state :A_Aa797
node A_Aa797_ex(idchart_A795_1:int;
	isInner:bool)

returns (idchart_A795:int);


var 	idchart_A795_2:int;


let



	-- set state as inactive 
	idchart_A795_2
	 = if (not isInner) then 0 else idchart_A795_1;


	(idchart_A795) 
	= (idchart_A795_1);
	

tel






-- Entry action for state :A_Ab798
node A_Ab798_en(idchart_A795_1:int;
	x:int;
	a_1:int;
	isInner:bool)

returns (idchart_A795:int;
	a:int);


var 	idchart_A795_2:int;
	a_2:int;


let



	-- set state as active 
	idchart_A795_2 
	= 798;
	

	a_2 
	= if (not isInner) then x+2
	 else a_1;
	

	(idchart_A795, a) 
	= (idchart_A795_2, a_2);
	

tel





-- Exit action for state :A_Ab798
node A_Ab798_ex(idchart_A795_1:int;
	isInner:bool)

returns (idchart_A795:int);


var 	idchart_A795_2:int;


let



	-- set state as inactive 
	idchart_A795_2
	 = if (not isInner) then 0 else idchart_A795_1;


	(idchart_A795) 
	= (idchart_A795_1);
	

tel






-- Entry action for state :chart_A795
node chart_A795_en(idchart_A795_1:int;
	idchart_chart794_1:int;
	a_1:int;
	x:int;
	isInner:bool)

returns (idchart_A795:int;
	idchart_chart794:int;
	a:int);


var 	idchart_A795_2, idchart_A795_3, idchart_A795_4, idchart_A795_5, idchart_A795_6:int;
	idchart_chart794_2, idchart_chart794_3, idchart_chart794_4:int;
	a_2, a_3, a_4, a_5, a_6:int;


let



	-- set state as active 
	idchart_chart794_2 
	= 795;
	

	
-- transition trace :
	--POINT__To__A_Aa797_1
		(idchart_A795_2, a_2) 
	= A_Aa797_en(idchart_A795_1, x, a_1, false);
		

	(idchart_A795_3, idchart_chart794_3, a_3) 
	= 

	if ( idchart_A795_1 = 0) then

	 (idchart_A795_2, idchart_chart794_2, a_2)

	 else(idchart_A795_1, idchart_chart794_2, a_1);

	

	(idchart_A795_4, a_4) 
	= 
	if ( idchart_A795_1 = 797) then
	A_Aa797_en(idchart_A795_1, x, a_1, false)
	 else (idchart_A795_1, a_1);

	

	(idchart_A795_5, a_5) 
	= 
	if ( idchart_A795_1 = 798) then
	A_Ab798_en(idchart_A795_1, x, a_1, false)
	 else (idchart_A795_1, a_1);

	

	(idchart_A795_6, idchart_chart794_4, a_6) 
	= 
		 if ( idchart_A795_1 = 0) then 
		(idchart_A795_3, idchart_chart794_3, a_3)
		 else
		 if ( idchart_A795_1 = 797) then 
		(idchart_A795_4, idchart_chart794_3, a_4)
		 else
		 if ( idchart_A795_1 = 798) then 
		(idchart_A795_5, idchart_chart794_3, a_5)
		 else (idchart_A795_1, idchart_chart794_2, a_1);


	(idchart_A795, idchart_chart794, a) 
	= (idchart_A795_6, idchart_chart794_4, a_6);
	

tel





-- Exit action for state :chart_A795
node chart_A795_ex(idchart_A795_1:int;
	idchart_chart794_1:int;
	isInner:bool)

returns (idchart_A795:int;
	idchart_chart794:int);


var 	idchart_A795_2, idchart_A795_3, idchart_A795_4, idchart_A795_5:int;
	idchart_chart794_2:int;


let



	
	(idchart_A795_2) 
	= 
	if ( idchart_A795_1 = 797) then
	A_Aa797_ex(idchart_A795_1, false)
	 else (idchart_A795_1);

	

	(idchart_A795_3) 
	= 
	if ( idchart_A795_1 = 798) then
	A_Ab798_ex(idchart_A795_1, false)
	 else (idchart_A795_1);

	

	(idchart_A795_4) 
	= 
		 if ( idchart_A795_1 = 797) then 
		(idchart_A795_2)
		 else
		 if ( idchart_A795_1 = 798) then 
		(idchart_A795_3)
		 else (idchart_A795_1);


	-- set state as inactive 
	idchart_chart794_2
	 = if (not isInner) then 0 else idchart_chart794_1;

	idchart_A795_5 
	= 0;
	

	(idchart_A795, idchart_chart794) 
	= (idchart_A795_5, idchart_chart794_1);
	

tel


--***************************************************State :chart_D802 Automaton***************************************************

node chart_D802_node(idchart_D802_1:int;
	d_1:int;
	x:int;
	S3:bool;
	R3:bool)

returns (idchart_D802:int;
	d:int);


let

	 automaton chart_d802

	state POINTchart_D802:
	unless (idchart_D802_1=0) restart POINT__TO__D_DA805_1



	unless (idchart_D802_1=805) and S3 restart D_DA805__TO__D_DB806_1



	unless (idchart_D802_1=806) and R3 restart D_DB806__TO__D_DA805_1



	unless (idchart_D802_1=805) restart D_DA805_IDL

	unless (idchart_D802_1=806) restart D_DB806_IDL

	let

		(idchart_D802, d) 
	= (idchart_D802_1, d_1);
	

	tel



	state POINT__TO__D_DA805_1:

	 var 	idchart_D802_2:int;
	d_2:int;
	let

		-- transition trace :
	--POINT__To__D_Da805_1
		(idchart_D802_2, d_2) 
	= D_Da805_en(idchart_D802_1, x, d_1, false);
		

	(idchart_D802, d) 
	=  (idchart_D802_2, d_2);


	tel

	until true restart POINTchart_D802



	state D_DA805__TO__D_DB806_1:

	 var 	idchart_D802_2, idchart_D802_3:int;
	d_2:int;
	let

		-- transition trace :
	--D_Da805__To__D_Db806_1
		(idchart_D802_2) 
	= D_Da805_ex(idchart_D802_1, false);
		

		(idchart_D802_3, d_2) 
	= D_Db806_en(idchart_D802_2, x, d_1, false);
		

	(idchart_D802, d) 
	=  (idchart_D802_3, d_2);


	tel

	until true restart POINTchart_D802



	state D_DB806__TO__D_DA805_1:

	 var 	idchart_D802_2, idchart_D802_3:int;
	d_2:int;
	let

		-- transition trace :
	--D_Db806__To__D_Da805_1
		(idchart_D802_2) 
	= D_Db806_ex(idchart_D802_1, false);
		

		(idchart_D802_3, d_2) 
	= D_Da805_en(idchart_D802_2, x, d_1, false);
		

	(idchart_D802, d) 
	=  (idchart_D802_3, d_2);


	tel

	until true restart POINTchart_D802



	state D_DA805_IDL:

	 	let

		

	(idchart_D802, d) 
	= (idchart_D802_1, d_1);
	

	tel

	until true restart POINTchart_D802



	state D_DB806_IDL:

	 	let

		

	(idchart_D802, d) 
	= (idchart_D802_1, d_1);
	

	tel

	until true restart POINTchart_D802



tel






node C_Cb804__To__C_Ca803_1_Transition_Action(idchart_D802_1:int;
	d_1:int;
	x:int;
	S3:bool;
	R3:bool)

returns (idchart_D802:int;
	d:int);


var 	idchart_D802_2:int;
	d_2:int;


let



	(idchart_D802_2, d_2) 
	= chart_D802_node(idchart_D802_1, d_1, x, S3, true);
	

	(idchart_D802, d) 
	= (idchart_D802_2, d_2);
	

tel






node C_Ca803__To__C_Cb804_1_Transition_Action(idchart_D802_1:int;
	d_1:int;
	x:int;
	S3:bool;
	R3:bool)

returns (idchart_D802:int;
	d:int);


var 	idchart_D802_2:int;
	d_2:int;


let



	(idchart_D802_2, d_2) 
	= chart_D802_node(idchart_D802_1, d_1, x, true, R3);
	

	(idchart_D802, d) 
	= (idchart_D802_2, d_2);
	

tel


--***************************************************State :chart_C799 Automaton***************************************************

node chart_C799_node(idchart_C799_1:int;
	c_1:int;
	x:int;
	S2:bool;
	R3:bool;
	S3:bool;
	d_1:int;
	idchart_D802_1:int;
	R2:bool)

returns (idchart_C799:int;
	c:int;
	d:int;
	idchart_D802:int);


let

	 automaton chart_c799

	state POINTchart_C799:
	unless (idchart_C799_1=0) restart POINT__TO__C_CA803_1



	unless (idchart_C799_1=803) and S2 restart C_CA803__TO__C_CB804_1



	unless (idchart_C799_1=804) and R2 restart C_CB804__TO__C_CA803_1



	unless (idchart_C799_1=803) restart C_CA803_IDL

	unless (idchart_C799_1=804) restart C_CB804_IDL

	let

		(idchart_C799, c, d, idchart_D802) 
	= (idchart_C799_1, c_1, d_1, idchart_D802_1);
	

	tel



	state POINT__TO__C_CA803_1:

	 var 	idchart_C799_2:int;
	c_2:int;
	let

		-- transition trace :
	--POINT__To__C_Ca803_1
		(idchart_C799_2, c_2) 
	= C_Ca803_en(idchart_C799_1, x, c_1, false);
		

	(idchart_C799, c) 
	=  (idchart_C799_2, c_2);

	--add unused variables
	(d, idchart_D802) 
	= (d_1, idchart_D802_1);
	

	tel

	until true restart POINTchart_C799



	state C_CA803__TO__C_CB804_1:

	 var 	idchart_C799_2, idchart_C799_3:int;
	c_2:int;
	d_2:int;
	idchart_D802_2:int;
	let

		-- transition trace :
	--C_Ca803__To__C_Cb804_1
		(idchart_C799_2) 
	= C_Ca803_ex(idchart_C799_1, false);
		

		(idchart_D802_2, d_2) 
	= C_Ca803__To__C_Cb804_1_Transition_Action(idchart_D802_1, d_1, x, S3, R3);
		

		(idchart_C799_3, c_2) 
	= C_Cb804_en(idchart_C799_2, x, c_1, false);
		

	(idchart_C799, c, d, idchart_D802) 
	=  (idchart_C799_3, c_2, d_2, idchart_D802_2);


	tel

	until true restart POINTchart_C799



	state C_CB804__TO__C_CA803_1:

	 var 	idchart_C799_2, idchart_C799_3:int;
	c_2:int;
	d_2:int;
	idchart_D802_2:int;
	let

		-- transition trace :
	--C_Cb804__To__C_Ca803_1
		(idchart_C799_2) 
	= C_Cb804_ex(idchart_C799_1, false);
		

		(idchart_D802_2, d_2) 
	= C_Cb804__To__C_Ca803_1_Transition_Action(idchart_D802_1, d_1, x, S3, R3);
		

		(idchart_C799_3, c_2) 
	= C_Ca803_en(idchart_C799_2, x, c_1, false);
		

	(idchart_C799, c, d, idchart_D802) 
	=  (idchart_C799_3, c_2, d_2, idchart_D802_2);


	tel

	until true restart POINTchart_C799



	state C_CA803_IDL:

	 	let

		

	(idchart_C799, c, d, idchart_D802) 
	= (idchart_C799_1, c_1, d_1, idchart_D802_1);
	

	tel

	until true restart POINTchart_C799



	state C_CB804_IDL:

	 	let

		

	(idchart_C799, c, d, idchart_D802) 
	= (idchart_C799_1, c_1, d_1, idchart_D802_1);
	

	tel

	until true restart POINTchart_C799



tel






node B_Bb801__To__B_Ba800_1_Transition_Action(idchart_C799_1:int;
	c_1:int;
	x:int;
	S2:bool;
	R3:bool;
	S3:bool;
	d_1:int;
	idchart_D802_1:int;
	R2:bool)

returns (idchart_C799:int;
	c:int;
	d:int;
	idchart_D802:int);


var 	idchart_C799_2:int;
	c_2:int;
	d_2:int;
	idchart_D802_2:int;


let



	(idchart_C799_2, c_2, d_2, idchart_D802_2) 
	= chart_C799_node(idchart_C799_1, c_1, x, S2, R3, S3, d_1, idchart_D802_1, true);
	

	(idchart_C799, c, d, idchart_D802) 
	= (idchart_C799_2, c_2, d_2, idchart_D802_2);
	

tel






node B_Ba800__To__B_Bb801_1_Transition_Action(idchart_C799_1:int;
	c_1:int;
	x:int;
	S2:bool;
	R3:bool;
	S3:bool;
	d_1:int;
	idchart_D802_1:int;
	R2:bool)

returns (idchart_C799:int;
	c:int;
	d:int;
	idchart_D802:int);


var 	idchart_C799_2:int;
	c_2:int;
	d_2:int;
	idchart_D802_2:int;


let



	(idchart_C799_2, c_2, d_2, idchart_D802_2) 
	= chart_C799_node(idchart_C799_1, c_1, x, true, R3, S3, d_1, idchart_D802_1, R2);
	

	(idchart_C799, c, d, idchart_D802) 
	= (idchart_C799_2, c_2, d_2, idchart_D802_2);
	

tel


--***************************************************State :chart_B796 Automaton***************************************************

node chart_B796_node(idchart_B796_1:int;
	b_1:int;
	x:int;
	S1:bool;
	R2:bool;
	R3:bool;
	S2:bool;
	S3:bool;
	c_1:int;
	d_1:int;
	idchart_C799_1:int;
	idchart_D802_1:int;
	R1:bool)

returns (idchart_B796:int;
	b:int;
	c:int;
	d:int;
	idchart_C799:int;
	idchart_D802:int);


let

	 automaton chart_b796

	state POINTchart_B796:
	unless (idchart_B796_1=0) restart POINT__TO__B_BA800_1



	unless (idchart_B796_1=800) and S1 restart B_BA800__TO__B_BB801_1



	unless (idchart_B796_1=801) and R1 restart B_BB801__TO__B_BA800_1



	unless (idchart_B796_1=800) restart B_BA800_IDL

	unless (idchart_B796_1=801) restart B_BB801_IDL

	let

		(idchart_B796, b, c, d, idchart_C799, idchart_D802) 
	= (idchart_B796_1, b_1, c_1, d_1, idchart_C799_1, idchart_D802_1);
	

	tel



	state POINT__TO__B_BA800_1:

	 var 	idchart_B796_2:int;
	b_2:int;
	let

		-- transition trace :
	--POINT__To__B_Ba800_1
		(idchart_B796_2, b_2) 
	= B_Ba800_en(idchart_B796_1, x, b_1, false);
		

	(idchart_B796, b) 
	=  (idchart_B796_2, b_2);

	--add unused variables
	(c, d, idchart_C799, idchart_D802) 
	= (c_1, d_1, idchart_C799_1, idchart_D802_1);
	

	tel

	until true restart POINTchart_B796



	state B_BA800__TO__B_BB801_1:

	 var 	idchart_B796_2, idchart_B796_3:int;
	b_2:int;
	c_2:int;
	d_2:int;
	idchart_C799_2:int;
	idchart_D802_2:int;
	let

		-- transition trace :
	--B_Ba800__To__B_Bb801_1
		(idchart_B796_2) 
	= B_Ba800_ex(idchart_B796_1, false);
		

		(idchart_C799_2, c_2, d_2, idchart_D802_2) 
	= B_Ba800__To__B_Bb801_1_Transition_Action(idchart_C799_1, c_1, x, S2, R3, S3, d_1, idchart_D802_1, R2);
		

		(idchart_B796_3, b_2) 
	= B_Bb801_en(idchart_B796_2, x, b_1, false);
		

	(idchart_B796, b, c, d, idchart_C799, idchart_D802) 
	=  (idchart_B796_3, b_2, c_2, d_2, idchart_C799_2, idchart_D802_2);


	tel

	until true restart POINTchart_B796



	state B_BB801__TO__B_BA800_1:

	 var 	idchart_B796_2, idchart_B796_3:int;
	b_2:int;
	c_2:int;
	d_2:int;
	idchart_C799_2:int;
	idchart_D802_2:int;
	let

		-- transition trace :
	--B_Bb801__To__B_Ba800_1
		(idchart_B796_2) 
	= B_Bb801_ex(idchart_B796_1, false);
		

		(idchart_C799_2, c_2, d_2, idchart_D802_2) 
	= B_Bb801__To__B_Ba800_1_Transition_Action(idchart_C799_1, c_1, x, S2, R3, S3, d_1, idchart_D802_1, R2);
		

		(idchart_B796_3, b_2) 
	= B_Ba800_en(idchart_B796_2, x, b_1, false);
		

	(idchart_B796, b, c, d, idchart_C799, idchart_D802) 
	=  (idchart_B796_3, b_2, c_2, d_2, idchart_C799_2, idchart_D802_2);


	tel

	until true restart POINTchart_B796



	state B_BA800_IDL:

	 	let

		

	(idchart_B796, b, c, d, idchart_C799, idchart_D802) 
	= (idchart_B796_1, b_1, c_1, d_1, idchart_C799_1, idchart_D802_1);
	

	tel

	until true restart POINTchart_B796



	state B_BB801_IDL:

	 	let

		

	(idchart_B796, b, c, d, idchart_C799, idchart_D802) 
	= (idchart_B796_1, b_1, c_1, d_1, idchart_C799_1, idchart_D802_1);
	

	tel

	until true restart POINTchart_B796



tel






node A_Aa797__To__A_Ab798_1_Transition_Action(idchart_B796_1:int;
	b_1:int;
	x:int;
	S1:bool;
	R2:bool;
	R3:bool;
	S2:bool;
	S3:bool;
	c_1:int;
	d_1:int;
	idchart_C799_1:int;
	idchart_D802_1:int;
	R1:bool)

returns (idchart_B796:int;
	b:int;
	c:int;
	d:int;
	idchart_C799:int;
	idchart_D802:int);


var 	idchart_B796_2:int;
	b_2:int;
	c_2:int;
	d_2:int;
	idchart_C799_2:int;
	idchart_D802_2:int;


let



	(idchart_B796_2, b_2, c_2, d_2, idchart_C799_2, idchart_D802_2) 
	= chart_B796_node(idchart_B796_1, b_1, x, true, R2, R3, S2, S3, c_1, d_1, idchart_C799_1, idchart_D802_1, R1);
	

	(idchart_B796, b, c, d, idchart_C799, idchart_D802) 
	= (idchart_B796_2, b_2, c_2, d_2, idchart_C799_2, idchart_D802_2);
	

tel






node A_Ab798__To__A_Aa797_1_Transition_Action(idchart_B796_1:int;
	b_1:int;
	x:int;
	S1:bool;
	R2:bool;
	R3:bool;
	S2:bool;
	S3:bool;
	c_1:int;
	d_1:int;
	idchart_C799_1:int;
	idchart_D802_1:int;
	R1:bool)

returns (idchart_B796:int;
	b:int;
	c:int;
	d:int;
	idchart_C799:int;
	idchart_D802:int);


var 	idchart_B796_2:int;
	b_2:int;
	c_2:int;
	d_2:int;
	idchart_C799_2:int;
	idchart_D802_2:int;


let



	(idchart_B796_2, b_2, c_2, d_2, idchart_C799_2, idchart_D802_2) 
	= chart_B796_node(idchart_B796_1, b_1, x, S1, R2, R3, S2, S3, c_1, d_1, idchart_C799_1, idchart_D802_1, true);
	

	(idchart_B796, b, c, d, idchart_C799, idchart_D802) 
	= (idchart_B796_2, b_2, c_2, d_2, idchart_C799_2, idchart_D802_2);
	

tel


--***************************************************State :chart_A795 Automaton***************************************************

node chart_A795_node(idchart_A795_1:int;
	a_1:int;
	x:int;
	S:bool;
	R1:bool;
	R2:bool;
	R3:bool;
	S1:bool;
	S2:bool;
	S3:bool;
	b_1:int;
	c_1:int;
	d_1:int;
	idchart_B796_1:int;
	idchart_C799_1:int;
	idchart_D802_1:int;
	R:bool)

returns (idchart_A795:int;
	a:int;
	b:int;
	c:int;
	d:int;
	idchart_B796:int;
	idchart_C799:int;
	idchart_D802:int);


let

	 automaton chart_a795

	state POINTchart_A795:
	unless (idchart_A795_1=0) restart POINT__TO__A_AA797_1



	unless (idchart_A795_1=797) and S restart A_AA797__TO__A_AB798_1



	unless (idchart_A795_1=798) and R restart A_AB798__TO__A_AA797_1



	unless (idchart_A795_1=797) restart A_AA797_IDL

	unless (idchart_A795_1=798) restart A_AB798_IDL

	let

		(idchart_A795, a, b, c, d, idchart_B796, idchart_C799, idchart_D802) 
	= (idchart_A795_1, a_1, b_1, c_1, d_1, idchart_B796_1, idchart_C799_1, idchart_D802_1);
	

	tel



	state POINT__TO__A_AA797_1:

	 var 	idchart_A795_2:int;
	a_2:int;
	let

		-- transition trace :
	--POINT__To__A_Aa797_1
		(idchart_A795_2, a_2) 
	= A_Aa797_en(idchart_A795_1, x, a_1, false);
		

	(idchart_A795, a) 
	=  (idchart_A795_2, a_2);

	--add unused variables
	(b, c, d, idchart_B796, idchart_C799, idchart_D802) 
	= (b_1, c_1, d_1, idchart_B796_1, idchart_C799_1, idchart_D802_1);
	

	tel

	until true restart POINTchart_A795



	state A_AA797__TO__A_AB798_1:

	 var 	idchart_A795_2, idchart_A795_3:int;
	a_2:int;
	b_2:int;
	c_2:int;
	d_2:int;
	idchart_B796_2:int;
	idchart_C799_2:int;
	idchart_D802_2:int;
	let

		-- transition trace :
	--A_Aa797__To__A_Ab798_1
		(idchart_A795_2) 
	= A_Aa797_ex(idchart_A795_1, false);
		

		(idchart_B796_2, b_2, c_2, d_2, idchart_C799_2, idchart_D802_2) 
	= A_Aa797__To__A_Ab798_1_Transition_Action(idchart_B796_1, b_1, x, S1, R2, R3, S2, S3, c_1, d_1, idchart_C799_1, idchart_D802_1, R1);
		

		(idchart_A795_3, a_2) 
	= A_Ab798_en(idchart_A795_2, x, a_1, false);
		

	(idchart_A795, a, b, c, d, idchart_B796, idchart_C799, idchart_D802) 
	=  (idchart_A795_3, a_2, b_2, c_2, d_2, idchart_B796_2, idchart_C799_2, idchart_D802_2);


	tel

	until true restart POINTchart_A795



	state A_AB798__TO__A_AA797_1:

	 var 	idchart_A795_2, idchart_A795_3:int;
	a_2:int;
	b_2:int;
	c_2:int;
	d_2:int;
	idchart_B796_2:int;
	idchart_C799_2:int;
	idchart_D802_2:int;
	let

		-- transition trace :
	--A_Ab798__To__A_Aa797_1
		(idchart_A795_2) 
	= A_Ab798_ex(idchart_A795_1, false);
		

		(idchart_B796_2, b_2, c_2, d_2, idchart_C799_2, idchart_D802_2) 
	= A_Ab798__To__A_Aa797_1_Transition_Action(idchart_B796_1, b_1, x, S1, R2, R3, S2, S3, c_1, d_1, idchart_C799_1, idchart_D802_1, R1);
		

		(idchart_A795_3, a_2) 
	= A_Aa797_en(idchart_A795_2, x, a_1, false);
		

	(idchart_A795, a, b, c, d, idchart_B796, idchart_C799, idchart_D802) 
	=  (idchart_A795_3, a_2, b_2, c_2, d_2, idchart_B796_2, idchart_C799_2, idchart_D802_2);


	tel

	until true restart POINTchart_A795



	state A_AA797_IDL:

	 	let

		

	(idchart_A795, a, b, c, d, idchart_B796, idchart_C799, idchart_D802) 
	= (idchart_A795_1, a_1, b_1, c_1, d_1, idchart_B796_1, idchart_C799_1, idchart_D802_1);
	

	tel

	until true restart POINTchart_A795



	state A_AB798_IDL:

	 	let

		

	(idchart_A795, a, b, c, d, idchart_B796, idchart_C799, idchart_D802) 
	= (idchart_A795_1, a_1, b_1, c_1, d_1, idchart_B796_1, idchart_C799_1, idchart_D802_1);
	

	tel

	until true restart POINTchart_A795



tel


--***************************************************State :chart_chart794 Automaton***************************************************

node chart_chart794_node(idchart_chart794_1:int;
	a_1:int;
	idchart_A795_1:int;
	x:int;
	b_1:int;
	idchart_B796_1:int;
	c_1:int;
	idchart_C799_1:int;
	d_1:int;
	idchart_D802_1:int;
	R:bool;
	R1:bool;
	R2:bool;
	R3:bool;
	S:bool;
	S1:bool;
	S2:bool;
	S3:bool)

returns (idchart_chart794:int;
	a:int;
	idchart_A795:int;
	b:int;
	idchart_B796:int;
	c:int;
	idchart_C799:int;
	d:int;
	idchart_D802:int);


let

	 automaton chart_chart794

	state POINTchart_chart794:
	unless (idchart_chart794_1=0) restart CHART_CHART794_PARALLEL_ENTRY
	unless true  restart CHART_CHART794_PARALLEL_IDL

	let

		(idchart_chart794, a, idchart_A795, b, idchart_B796, c, idchart_C799, d, idchart_D802) 
	= (idchart_chart794_1, a_1, idchart_A795_1, b_1, idchart_B796_1, c_1, idchart_C799_1, d_1, idchart_D802_1);
	

	tel



	state CHART_CHART794_PARALLEL_ENTRY:

	 var 	idchart_chart794_2, idchart_chart794_3, idchart_chart794_4, idchart_chart794_5:int;
	a_2:int;
	idchart_A795_2:int;
	b_2:int;
	idchart_B796_2:int;
	c_2:int;
	idchart_C799_2:int;
	d_2:int;
	idchart_D802_2:int;
	let

		
	(idchart_A795_2, idchart_chart794_2, a_2) 
	= chart_A795_en(idchart_A795_1, idchart_chart794_1, a_1, x, false);

	(idchart_B796_2, idchart_chart794_3, b_2) 
	= chart_B796_en(idchart_B796_1, idchart_chart794_2, b_1, x, false);

	(idchart_C799_2, idchart_chart794_4, c_2) 
	= chart_C799_en(idchart_C799_1, idchart_chart794_3, c_1, x, false);

	(idchart_D802_2, idchart_chart794_5, d_2) 
	= chart_D802_en(idchart_D802_1, idchart_chart794_4, d_1, x, false);


	(idchart_chart794, a, idchart_A795, b, idchart_B796, c, idchart_C799, d, idchart_D802) 
	= (idchart_chart794_5, a_2, idchart_A795_2, b_2, idchart_B796_2, c_2, idchart_C799_2, d_2, idchart_D802_2);
	

	tel

	until true restart POINTchart_chart794



	state CHART_CHART794_PARALLEL_IDL:

	 var 	a_2:int;
	idchart_A795_2:int;
	b_2, b_3:int;
	idchart_B796_2, idchart_B796_3:int;
	c_2, c_3, c_4:int;
	idchart_C799_2, idchart_C799_3, idchart_C799_4:int;
	d_2, d_3, d_4, d_5:int;
	idchart_D802_2, idchart_D802_3, idchart_D802_4, idchart_D802_5:int;
	let

		

		(idchart_A795_2, a_2, b_2, c_2, d_2, idchart_B796_2, idchart_C799_2, idchart_D802_2)
	= if not (idchart_A795_1= 0 ) then chart_A795_node(idchart_A795_1, a_1, x, S, R1, R2, R3, S1, S2, S3, b_1, c_1, d_1, idchart_B796_1, idchart_C799_1, idchart_D802_1, R)

		 else (idchart_A795_1, a_1, b_1, c_1, d_1, idchart_B796_1, idchart_C799_1, idchart_D802_1);

		

		

		(idchart_B796_3, b_3, c_3, d_3, idchart_C799_3, idchart_D802_3)
	= if not (idchart_B796_2= 0 ) then chart_B796_node(idchart_B796_2, b_2, x, S1, R2, R3, S2, S3, c_2, d_2, idchart_C799_2, idchart_D802_2, R1)

		 else (idchart_B796_2, b_2, c_2, d_2, idchart_C799_2, idchart_D802_2);

		

		

		(idchart_C799_4, c_4, d_4, idchart_D802_4)
	= if not (idchart_C799_3= 0 ) then chart_C799_node(idchart_C799_3, c_3, x, S2, R3, S3, d_3, idchart_D802_3, R2)

		 else (idchart_C799_3, c_3, d_3, idchart_D802_3);

		

		

		(idchart_D802_5, d_5)
	= if not (idchart_D802_4= 0 ) then chart_D802_node(idchart_D802_4, d_4, x, S3, R3)

		 else (idchart_D802_4, d_4);

		

		

	(idchart_chart794, a, idchart_A795, b, idchart_B796, c, idchart_C799, d, idchart_D802) 
	= (idchart_chart794_1, a_2, idchart_A795_2, b_3, idchart_B796_3, c_4, idchart_C799_4, d_5, idchart_D802_5);
	

	tel

	until true restart POINTchart_chart794



tel


--***************************************************State :chart_chart794 Automaton***************************************************

node Subsys1_PP_Odysssubsys_chart(x:int;
	y:int;
	R:bool;
	S:bool)

returns (a:int;
	b:int;
	c:int;
	d:int);


var a_1: int;

	b_1: int;

	c_1: int;

	d_1: int;

	R1, R1_1: bool;

	R2, R2_1: bool;

	R3, R3_1: bool;

	S1, S1_1: bool;

	S2, S2_1: bool;

	S3, S3_1: bool;

	idchart_chart794, idchart_chart794_1: int;

	idchart_D802, idchart_D802_1: int;

	idchart_C799, idchart_C799_1: int;

	idchart_B796, idchart_B796_1: int;

	idchart_A795, idchart_A795_1: int;

		idchart_chart794_2:int;
	a_2:int;
	idchart_A795_2:int;
	b_2:int;
	idchart_B796_2:int;
	c_2:int;
	idchart_C799_2:int;
	d_2:int;
	idchart_D802_2:int;
let

	a_1 = 0 -> pre a;

	b_1 = 0 -> pre b;

	c_1 = 0 -> pre c;

	d_1 = 0 -> pre d;

	R1_1 = false -> pre R1;

	R2_1 = false -> pre R2;

	R3_1 = false -> pre R3;

	S1_1 = false -> pre S1;

	S2_1 = false -> pre S2;

	S3_1 = false -> pre S3;

	idchart_chart794_1 = 0 -> pre idchart_chart794;

	idchart_D802_1 = 0 -> pre idchart_D802;

	idchart_C799_1 = 0 -> pre idchart_C799;

	idchart_B796_1 = 0 -> pre idchart_B796;

	idchart_A795_1 = 0 -> pre idchart_A795;

	



	(idchart_chart794_2, a_2, idchart_A795_2, b_2, idchart_B796_2, c_2, idchart_C799_2, d_2, idchart_D802_2)
	 = 

	 if R then chart_chart794_node(idchart_chart794_1, a_1, idchart_A795_1, x, b_1, idchart_B796_1, c_1, idchart_C799_1, d_1, idchart_D802_1, R, R1, R2, R3, false, S1, S2, S3)

	 else (idchart_chart794_1, a_1, idchart_A795_1, b_1, idchart_B796_1, c_1, idchart_C799_1, d_1, idchart_D802_1);

	



	(idchart_chart794, a, idchart_A795, b, idchart_B796, c, idchart_C799, d, idchart_D802)
	 = 

	 if S then chart_chart794_node(idchart_chart794_2, a_2, idchart_A795_2, x, b_2, idchart_B796_2, c_2, idchart_C799_2, d_2, idchart_D802_2, false, R1, R2, R3, S, S1, S2, S3)

	 else (idchart_chart794_2, a_2, idchart_A795_2, b_2, idchart_B796_2, c_2, idchart_C799_2, d_2, idchart_D802_2);

	


--unused outputs
	R1 = false;

	R2 = false;

	R3 = false;

	S1 = false;

	S2 = false;

	S3 = false;

	

tel



node Subsys1_PP_Odysssubsys (R_1_1 : real; S_1_1 : real; In3_1_1 : int; In4_1_1 : int)
returns (Out1_1_1 : int;
	Out2_2_1 : int;
	Out3_3_1 : int;
	Out4_4_1 : int); 
var
	Mux_1_1 : real; Mux_1_2 : real;
	UnitDelay_1_1 : int;
	chart_1_1 : int; chart_2_1 : int; chart_3_1 : int; chart_4_1 : int;
	chartMux_1_1_event: bool;
	chartMux_1_2_event: bool;
let 
	Mux_1_1 = R_1_1 ;
	Mux_1_2 = S_1_1 ;
	UnitDelay_1_1 = 0 -> pre In4_1_1;
	chartMux_1_1_event = false -> (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0);
	chartMux_1_2_event = false -> (pre(Mux_1_2) > 0.0 and Mux_1_2 <= 0.0);
	(chart_1_1, chart_2_1, chart_3_1, chart_4_1) =  Subsys1_PP_Odysssubsys_chart(In3_1_1, UnitDelay_1_1, chartMux_1_1_event, chartMux_1_2_event);
	Out1_1_1 = chart_1_1;
	Out2_2_1 = chart_2_1;
	Out3_3_1 = chart_3_1;
	Out4_4_1 = chart_4_1;
tel

node Subsys1_PP (R_1_1 : real; S_1_1 : real; In3_1_1 : int; In4_1_1 : int)
returns (Out1_1_1 : int;
	Out2_2_1 : int;
	Out3_3_1 : int;
	Out4_4_1 : int); 
var
	Odysssubsys_1_1 : int; Odysssubsys_2_1 : int; Odysssubsys_3_1 : int; Odysssubsys_4_1 : int;
	i_virtual_local : real;
let 
	(Odysssubsys_1_1, Odysssubsys_2_1, Odysssubsys_3_1, Odysssubsys_4_1) = Subsys1_PP_Odysssubsys(R_1_1, S_1_1, In3_1_1, In4_1_1);
	Out1_1_1 = Odysssubsys_1_1;
	Out2_2_1 = Odysssubsys_2_1;
	Out3_3_1 = Odysssubsys_3_1;
	Out4_4_1 = Odysssubsys_4_1;
	i_virtual_local= 0.0 -> 1.0;
tel

