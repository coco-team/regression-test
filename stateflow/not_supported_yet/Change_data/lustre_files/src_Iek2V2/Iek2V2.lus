-- This file has been generated by cocoSim


-- System nodes













node T1_B__To__T1_A_1_Condition_Action(x_1:int)

returns (x:int);


var 	x_2:int;


let



	x_2 
	=  x_1  + 1;
	

	(x) 
	= (x_2);
	

tel








node T1_A__To__T1_B_1_Condition_Action(x_1:int)

returns (x:int);


var 	x_2:int;


let



	x_2 
	=  x_1  + 1;
	

	(x) 
	= (x_2);
	

tel






-- Entry action for state :T2_C
node T2_C_en(idIek2_T2_1:int;
	y_1:int;
	sT2_1:int;
	isInner:bool)

returns (idIek2_T2:int;
	y:int;
	sT2:int);


var 	idIek2_T2_2:int;
	y_2:int;
	sT2_2:int;


let



	-- set state as active 
	idIek2_T2_2 
	= 1514;
	

	y_2 
	= if (not isInner) then  y_1  + 1
	 else y_1;
	

	sT2_2 
	= if (not isInner) then 1
	 else sT2_1;
	

	(idIek2_T2, y, sT2) 
	= (idIek2_T2_2, y_2, sT2_2);
	

tel





-- Exit action for state :T2_C
node T2_C_ex(idIek2_T2_1:int;
	isInner:bool)

returns (idIek2_T2:int);


var 	idIek2_T2_2:int;


let



	-- set state as inactive 
	idIek2_T2_2
	 = if (not isInner) then 0 else idIek2_T2_1;


	(idIek2_T2) 
	= (idIek2_T2_2);
	

tel






-- Entry action for state :T2_D
node T2_D_en(idIek2_T2_1:int;
	y_1:int;
	sT2_1:int;
	isInner:bool)

returns (idIek2_T2:int;
	y:int;
	sT2:int);


var 	idIek2_T2_2:int;
	y_2:int;
	sT2_2:int;


let



	-- set state as active 
	idIek2_T2_2 
	= 1515;
	

	y_2 
	= if (not isInner) then  y_1  + 1
	 else y_1;
	

	sT2_2 
	= if (not isInner) then 2
	 else sT2_1;
	

	(idIek2_T2, y, sT2) 
	= (idIek2_T2_2, y_2, sT2_2);
	

tel





-- Exit action for state :T2_D
node T2_D_ex(idIek2_T2_1:int;
	isInner:bool)

returns (idIek2_T2:int);


var 	idIek2_T2_2:int;


let



	-- set state as inactive 
	idIek2_T2_2
	 = if (not isInner) then 0 else idIek2_T2_1;


	(idIek2_T2) 
	= (idIek2_T2_2);
	

tel






-- Entry action for state :Iek2_T2
node Iek2_T2_en(idIek2_T2_1:int;
	idIek2_Iek2_1:int;
	sT2_1:int;
	y_1:int;
	isInner:bool)

returns (idIek2_T2:int;
	idIek2_Iek2:int;
	sT2:int;
	y:int);


var 	idIek2_T2_2, idIek2_T2_3, idIek2_T2_4, idIek2_T2_5, idIek2_T2_6:int;
	idIek2_Iek2_2, idIek2_Iek2_3, idIek2_Iek2_4:int;
	sT2_2, sT2_3, sT2_4, sT2_5, sT2_6:int;
	y_2, y_3, y_4, y_5, y_6:int;


let



	-- set state as active 
	idIek2_Iek2_2 
	= 1513;
	

	
-- transition trace :
	--POINT__To__T2_C_1
		(idIek2_T2_2, y_2, sT2_2) 
	= T2_C_en(idIek2_T2_1, y_1, sT2_1, false);
		

	(idIek2_T2_3, idIek2_Iek2_3, sT2_3, y_3) 
	= 

	if ( idIek2_T2_1 = 0) then

	 (idIek2_T2_2, idIek2_Iek2_2, sT2_2, y_2)

	 else(idIek2_T2_1, idIek2_Iek2_2, sT2_1, y_1);

	

	(idIek2_T2_4, y_4, sT2_4) 
	= 
	if ( idIek2_T2_1 = 1514) then
	T2_C_en(idIek2_T2_1, y_1, sT2_1, false)
	 else (idIek2_T2_1, y_1, sT2_1);

	

	(idIek2_T2_5, y_5, sT2_5) 
	= 
	if ( idIek2_T2_1 = 1515) then
	T2_D_en(idIek2_T2_1, y_1, sT2_1, false)
	 else (idIek2_T2_1, y_1, sT2_1);

	

	(idIek2_T2_6, idIek2_Iek2_4, sT2_6, y_6) 
	= 
		 if ( idIek2_T2_1 = 0) then 
		(idIek2_T2_3, idIek2_Iek2_3, sT2_3, y_3)
		 else
		 if ( idIek2_T2_1 = 1514) then 
		(idIek2_T2_4, idIek2_Iek2_3, sT2_4, y_4)
		 else
		 if ( idIek2_T2_1 = 1515) then 
		(idIek2_T2_5, idIek2_Iek2_3, sT2_5, y_5)
		 else (idIek2_T2_1, idIek2_Iek2_2, sT2_1, y_1);


	(idIek2_T2, idIek2_Iek2, sT2, y) 
	= (idIek2_T2_6, idIek2_Iek2_4, sT2_6, y_6);
	

tel





-- Exit action for state :Iek2_T2
node Iek2_T2_ex(idIek2_T2_1:int;
	idIek2_Iek2_1:int;
	isInner:bool)

returns (idIek2_T2:int;
	idIek2_Iek2:int);


var 	idIek2_T2_2, idIek2_T2_3, idIek2_T2_4, idIek2_T2_5:int;
	idIek2_Iek2_2:int;


let



	
	(idIek2_T2_2) 
	= 
	if ( idIek2_T2_1 = 1514) then
	T2_C_ex(idIek2_T2_1, false)
	 else (idIek2_T2_1);

	

	(idIek2_T2_3) 
	= 
	if ( idIek2_T2_1 = 1515) then
	T2_D_ex(idIek2_T2_1, false)
	 else (idIek2_T2_1);

	

	(idIek2_T2_4) 
	= 
		 if ( idIek2_T2_1 = 1514) then 
		(idIek2_T2_2)
		 else
		 if ( idIek2_T2_1 = 1515) then 
		(idIek2_T2_3)
		 else (idIek2_T2_1);


	-- set state as inactive 
	idIek2_Iek2_2
	 = if (not isInner) then 0 else idIek2_Iek2_1;

	idIek2_T2_5 
	= 0;
	

	(idIek2_T2, idIek2_Iek2) 
	= (idIek2_T2_5, idIek2_Iek2_2);
	

tel






-- Entry action for state :T1_A
node T1_A_en(idIek2_T1_1:int;
	sT1_1:int;
	isInner:bool)

returns (idIek2_T1:int;
	sT1:int);


var 	idIek2_T1_2:int;
	sT1_2:int;


let



	-- set state as active 
	idIek2_T1_2 
	= 1512;
	

	sT1_2 
	= if (not isInner) then 1
	 else sT1_1;
	

	(idIek2_T1, sT1) 
	= (idIek2_T1_2, sT1_2);
	

tel





-- Exit action for state :T1_A
node T1_A_ex(idIek2_T1_1:int;
	isInner:bool)

returns (idIek2_T1:int);


var 	idIek2_T1_2:int;


let



	-- set state as inactive 
	idIek2_T1_2
	 = if (not isInner) then 0 else idIek2_T1_1;


	(idIek2_T1) 
	= (idIek2_T1_2);
	

tel






-- Entry action for state :T1_B
node T1_B_en(idIek2_T1_1:int;
	sT1_1:int;
	isInner:bool)

returns (idIek2_T1:int;
	sT1:int);


var 	idIek2_T1_2:int;
	sT1_2:int;


let



	-- set state as active 
	idIek2_T1_2 
	= 1511;
	

	sT1_2 
	= if (not isInner) then 2
	 else sT1_1;
	

	(idIek2_T1, sT1) 
	= (idIek2_T1_2, sT1_2);
	

tel





-- Exit action for state :T1_B
node T1_B_ex(idIek2_T1_1:int;
	isInner:bool)

returns (idIek2_T1:int);


var 	idIek2_T1_2:int;


let



	-- set state as inactive 
	idIek2_T1_2
	 = if (not isInner) then 0 else idIek2_T1_1;


	(idIek2_T1) 
	= (idIek2_T1_2);
	

tel






-- Entry action for state :Iek2_T1
node Iek2_T1_en(idIek2_T1_1:int;
	idIek2_Iek2_1:int;
	sT1_1:int;
	isInner:bool)

returns (idIek2_T1:int;
	idIek2_Iek2:int;
	sT1:int);


var 	idIek2_T1_2, idIek2_T1_3, idIek2_T1_4, idIek2_T1_5, idIek2_T1_6:int;
	idIek2_Iek2_2, idIek2_Iek2_3, idIek2_Iek2_4:int;
	sT1_2, sT1_3, sT1_4, sT1_5, sT1_6:int;


let



	-- set state as active 
	idIek2_Iek2_2 
	= 1510;
	

	
-- transition trace :
	--POINT__To__T1_A_1
		(idIek2_T1_2, sT1_2) 
	= T1_A_en(idIek2_T1_1, sT1_1, false);
		

	(idIek2_T1_3, idIek2_Iek2_3, sT1_3) 
	= 

	if ( idIek2_T1_1 = 0) then

	 (idIek2_T1_2, idIek2_Iek2_2, sT1_2)

	 else(idIek2_T1_1, idIek2_Iek2_2, sT1_1);

	

	(idIek2_T1_4, sT1_4) 
	= 
	if ( idIek2_T1_1 = 1512) then
	T1_A_en(idIek2_T1_1, sT1_1, false)
	 else (idIek2_T1_1, sT1_1);

	

	(idIek2_T1_5, sT1_5) 
	= 
	if ( idIek2_T1_1 = 1511) then
	T1_B_en(idIek2_T1_1, sT1_1, false)
	 else (idIek2_T1_1, sT1_1);

	

	(idIek2_T1_6, idIek2_Iek2_4, sT1_6) 
	= 
		 if ( idIek2_T1_1 = 0) then 
		(idIek2_T1_3, idIek2_Iek2_3, sT1_3)
		 else
		 if ( idIek2_T1_1 = 1512) then 
		(idIek2_T1_4, idIek2_Iek2_3, sT1_4)
		 else
		 if ( idIek2_T1_1 = 1511) then 
		(idIek2_T1_5, idIek2_Iek2_3, sT1_5)
		 else (idIek2_T1_1, idIek2_Iek2_2, sT1_1);


	(idIek2_T1, idIek2_Iek2, sT1) 
	= (idIek2_T1_6, idIek2_Iek2_4, sT1_6);
	

tel





-- Exit action for state :Iek2_T1
node Iek2_T1_ex(idIek2_T1_1:int;
	idIek2_Iek2_1:int;
	isInner:bool)

returns (idIek2_T1:int;
	idIek2_Iek2:int);


var 	idIek2_T1_2, idIek2_T1_3, idIek2_T1_4, idIek2_T1_5:int;
	idIek2_Iek2_2:int;


let



	
	(idIek2_T1_2) 
	= 
	if ( idIek2_T1_1 = 1512) then
	T1_A_ex(idIek2_T1_1, false)
	 else (idIek2_T1_1);

	

	(idIek2_T1_3) 
	= 
	if ( idIek2_T1_1 = 1511) then
	T1_B_ex(idIek2_T1_1, false)
	 else (idIek2_T1_1);

	

	(idIek2_T1_4) 
	= 
		 if ( idIek2_T1_1 = 1512) then 
		(idIek2_T1_2)
		 else
		 if ( idIek2_T1_1 = 1511) then 
		(idIek2_T1_3)
		 else (idIek2_T1_1);


	-- set state as inactive 
	idIek2_Iek2_2
	 = if (not isInner) then 0 else idIek2_Iek2_1;

	idIek2_T1_5 
	= 0;
	

	(idIek2_T1, idIek2_Iek2) 
	= (idIek2_T1_5, idIek2_Iek2_2);
	

tel






-- Entry action for state :T3_d
node T3_d_en(idIek2_T3_1:int;
	sT3_1:int;
	isInner:bool)

returns (idIek2_T3:int;
	sT3:int);


var 	idIek2_T3_2:int;
	sT3_2:int;


let



	-- set state as active 
	idIek2_T3_2 
	= 1520;
	

	sT3_2 
	= if (not isInner) then 4
	 else sT3_1;
	

	(idIek2_T3, sT3) 
	= (idIek2_T3_2, sT3_2);
	

tel





-- Exit action for state :T3_d
node T3_d_ex(idIek2_T3_1:int;
	isInner:bool)

returns (idIek2_T3:int);


var 	idIek2_T3_2:int;


let



	-- set state as inactive 
	idIek2_T3_2
	 = if (not isInner) then 0 else idIek2_T3_1;


	(idIek2_T3) 
	= (idIek2_T3_2);
	

tel






-- Entry action for state :T3_c
node T3_c_en(idIek2_T3_1:int;
	sT3_1:int;
	isInner:bool)

returns (idIek2_T3:int;
	sT3:int);


var 	idIek2_T3_2:int;
	sT3_2:int;


let



	-- set state as active 
	idIek2_T3_2 
	= 1518;
	

	sT3_2 
	= if (not isInner) then 3
	 else sT3_1;
	

	(idIek2_T3, sT3) 
	= (idIek2_T3_2, sT3_2);
	

tel





-- Exit action for state :T3_c
node T3_c_ex(idIek2_T3_1:int;
	isInner:bool)

returns (idIek2_T3:int);


var 	idIek2_T3_2:int;


let



	-- set state as inactive 
	idIek2_T3_2
	 = if (not isInner) then 0 else idIek2_T3_1;


	(idIek2_T3) 
	= (idIek2_T3_2);
	

tel






-- Entry action for state :T3_a
node T3_a_en(idIek2_T3_1:int;
	sT3_1:int;
	isInner:bool)

returns (idIek2_T3:int;
	sT3:int);


var 	idIek2_T3_2:int;
	sT3_2:int;


let



	-- set state as active 
	idIek2_T3_2 
	= 1517;
	

	sT3_2 
	= if (not isInner) then 1
	 else sT3_1;
	

	(idIek2_T3, sT3) 
	= (idIek2_T3_2, sT3_2);
	

tel





-- Exit action for state :T3_a
node T3_a_ex(idIek2_T3_1:int;
	isInner:bool)

returns (idIek2_T3:int);


var 	idIek2_T3_2:int;


let



	-- set state as inactive 
	idIek2_T3_2
	 = if (not isInner) then 0 else idIek2_T3_1;


	(idIek2_T3) 
	= (idIek2_T3_2);
	

tel






-- Entry action for state :T3_b
node T3_b_en(idIek2_T3_1:int;
	sT3_1:int;
	isInner:bool)

returns (idIek2_T3:int;
	sT3:int);


var 	idIek2_T3_2:int;
	sT3_2:int;


let



	-- set state as active 
	idIek2_T3_2 
	= 1519;
	

	sT3_2 
	= if (not isInner) then 2
	 else sT3_1;
	

	(idIek2_T3, sT3) 
	= (idIek2_T3_2, sT3_2);
	

tel





-- Exit action for state :T3_b
node T3_b_ex(idIek2_T3_1:int;
	isInner:bool)

returns (idIek2_T3:int);


var 	idIek2_T3_2:int;


let



	-- set state as inactive 
	idIek2_T3_2
	 = if (not isInner) then 0 else idIek2_T3_1;


	(idIek2_T3) 
	= (idIek2_T3_2);
	

tel






-- Entry action for state :Iek2_T3
node Iek2_T3_en(idIek2_T3_1:int;
	idIek2_Iek2_1:int;
	sT3_1:int;
	isInner:bool)

returns (idIek2_T3:int;
	idIek2_Iek2:int;
	sT3:int);


var 	idIek2_T3_2, idIek2_T3_3, idIek2_T3_4, idIek2_T3_5, idIek2_T3_6, idIek2_T3_7, idIek2_T3_8:int;
	idIek2_Iek2_2, idIek2_Iek2_3, idIek2_Iek2_4:int;
	sT3_2, sT3_3, sT3_4, sT3_5, sT3_6, sT3_7, sT3_8:int;


let



	-- set state as active 
	idIek2_Iek2_2 
	= 1516;
	

	
-- transition trace :
	--POINT__To__T3_a_1
		(idIek2_T3_2, sT3_2) 
	= T3_a_en(idIek2_T3_1, sT3_1, false);
		

	(idIek2_T3_3, idIek2_Iek2_3, sT3_3) 
	= 

	if ( idIek2_T3_1 = 0) then

	 (idIek2_T3_2, idIek2_Iek2_2, sT3_2)

	 else(idIek2_T3_1, idIek2_Iek2_2, sT3_1);

	

	(idIek2_T3_4, sT3_4) 
	= 
	if ( idIek2_T3_1 = 1517) then
	T3_a_en(idIek2_T3_1, sT3_1, false)
	 else (idIek2_T3_1, sT3_1);

	

	(idIek2_T3_5, sT3_5) 
	= 
	if ( idIek2_T3_1 = 1518) then
	T3_c_en(idIek2_T3_1, sT3_1, false)
	 else (idIek2_T3_1, sT3_1);

	

	(idIek2_T3_6, sT3_6) 
	= 
	if ( idIek2_T3_1 = 1520) then
	T3_d_en(idIek2_T3_1, sT3_1, false)
	 else (idIek2_T3_1, sT3_1);

	

	(idIek2_T3_7, sT3_7) 
	= 
	if ( idIek2_T3_1 = 1519) then
	T3_b_en(idIek2_T3_1, sT3_1, false)
	 else (idIek2_T3_1, sT3_1);

	

	(idIek2_T3_8, idIek2_Iek2_4, sT3_8) 
	= 
		 if ( idIek2_T3_1 = 0) then 
		(idIek2_T3_3, idIek2_Iek2_3, sT3_3)
		 else
		 if ( idIek2_T3_1 = 1517) then 
		(idIek2_T3_4, idIek2_Iek2_3, sT3_4)
		 else
		 if ( idIek2_T3_1 = 1518) then 
		(idIek2_T3_5, idIek2_Iek2_3, sT3_5)
		 else
		 if ( idIek2_T3_1 = 1520) then 
		(idIek2_T3_6, idIek2_Iek2_3, sT3_6)
		 else
		 if ( idIek2_T3_1 = 1519) then 
		(idIek2_T3_7, idIek2_Iek2_3, sT3_7)
		 else (idIek2_T3_1, idIek2_Iek2_2, sT3_1);


	(idIek2_T3, idIek2_Iek2, sT3) 
	= (idIek2_T3_8, idIek2_Iek2_4, sT3_8);
	

tel





-- Exit action for state :Iek2_T3
node Iek2_T3_ex(idIek2_T3_1:int;
	idIek2_Iek2_1:int;
	isInner:bool)

returns (idIek2_T3:int;
	idIek2_Iek2:int);


var 	idIek2_T3_2, idIek2_T3_3, idIek2_T3_4, idIek2_T3_5, idIek2_T3_6, idIek2_T3_7:int;
	idIek2_Iek2_2:int;


let



	
	(idIek2_T3_2) 
	= 
	if ( idIek2_T3_1 = 1517) then
	T3_a_ex(idIek2_T3_1, false)
	 else (idIek2_T3_1);

	

	(idIek2_T3_3) 
	= 
	if ( idIek2_T3_1 = 1518) then
	T3_c_ex(idIek2_T3_1, false)
	 else (idIek2_T3_1);

	

	(idIek2_T3_4) 
	= 
	if ( idIek2_T3_1 = 1520) then
	T3_d_ex(idIek2_T3_1, false)
	 else (idIek2_T3_1);

	

	(idIek2_T3_5) 
	= 
	if ( idIek2_T3_1 = 1519) then
	T3_b_ex(idIek2_T3_1, false)
	 else (idIek2_T3_1);

	

	(idIek2_T3_6) 
	= 
		 if ( idIek2_T3_1 = 1517) then 
		(idIek2_T3_2)
		 else
		 if ( idIek2_T3_1 = 1518) then 
		(idIek2_T3_3)
		 else
		 if ( idIek2_T3_1 = 1520) then 
		(idIek2_T3_4)
		 else
		 if ( idIek2_T3_1 = 1519) then 
		(idIek2_T3_5)
		 else (idIek2_T3_1);


	-- set state as inactive 
	idIek2_Iek2_2
	 = if (not isInner) then 0 else idIek2_Iek2_1;

	idIek2_T3_7 
	= 0;
	

	(idIek2_T3, idIek2_Iek2) 
	= (idIek2_T3_7, idIek2_Iek2_2);
	

tel


--***************************************************State :Iek2_T2 Automaton***************************************************

node Iek2_T2_node(idIek2_T2_1:int;
	sT2_1:int;
	y_1:int;
	F:bool)

returns (idIek2_T2:int;
	sT2:int;
	y:int);


let

	 automaton iek2_t2

	state POINTIek2_T2:
	unless (idIek2_T2_1=0) restart POINT__TO__T2_C_1



	unless (idIek2_T2_1=1514) and ( F ) restart T2_C__TO__T2_D_1



	unless (idIek2_T2_1=1515) and ( F ) restart T2_D__TO__T2_C_1



	unless (idIek2_T2_1=1514) restart T2_C_IDL

	unless (idIek2_T2_1=1515) restart T2_D_IDL

	let

		(idIek2_T2, sT2, y) 
	= (idIek2_T2_1, sT2_1, y_1);
	

	tel



	state POINT__TO__T2_C_1:

	 var 	idIek2_T2_2:int;
	sT2_2:int;
	y_2:int;
	let

		-- transition trace :
	--POINT__To__T2_C_1
		(idIek2_T2_2, y_2, sT2_2) 
	= T2_C_en(idIek2_T2_1, y_1, sT2_1, false);
		

	(idIek2_T2, sT2, y) 
	=  (idIek2_T2_2, sT2_2, y_2);


	tel

	until true restart POINTIek2_T2



	state T2_C__TO__T2_D_1:

	 var 	idIek2_T2_2, idIek2_T2_3:int;
	sT2_2:int;
	y_2:int;
	let

		-- transition trace :
	--T2_C__To__T2_D_1
		(idIek2_T2_2) 
	= T2_C_ex(idIek2_T2_1, false);
		

		(idIek2_T2_3, y_2, sT2_2) 
	= T2_D_en(idIek2_T2_2, y_1, sT2_1, false);
		

	(idIek2_T2, sT2, y) 
	=  (idIek2_T2_3, sT2_2, y_2);


	tel

	until true restart POINTIek2_T2



	state T2_D__TO__T2_C_1:

	 var 	idIek2_T2_2, idIek2_T2_3:int;
	sT2_2:int;
	y_2:int;
	let

		-- transition trace :
	--T2_D__To__T2_C_1
		(idIek2_T2_2) 
	= T2_D_ex(idIek2_T2_1, false);
		

		(idIek2_T2_3, y_2, sT2_2) 
	= T2_C_en(idIek2_T2_2, y_1, sT2_1, false);
		

	(idIek2_T2, sT2, y) 
	=  (idIek2_T2_3, sT2_2, y_2);


	tel

	until true restart POINTIek2_T2



	state T2_C_IDL:

	 	let

		

	(idIek2_T2, sT2, y) 
	= (idIek2_T2_1, sT2_1, y_1);
	

	tel

	until true restart POINTIek2_T2



	state T2_D_IDL:

	 	let

		

	(idIek2_T2, sT2, y) 
	= (idIek2_T2_1, sT2_1, y_1);
	

	tel

	until true restart POINTIek2_T2



tel


--***************************************************State :Iek2_T1 Automaton***************************************************

node Iek2_T1_node(idIek2_T1_1:int;
	sT1_1:int;
	E:bool;
	x_1:int)

returns (idIek2_T1:int;
	sT1:int;
	x:int);


let

	 automaton iek2_t1

	state POINTIek2_T1:
	unless (idIek2_T1_1=0) restart POINT__TO__T1_A_1



	unless (idIek2_T1_1=1512) and ( E ) restart T1_A__TO__T1_B_1



	unless (idIek2_T1_1=1511) and ( E ) restart T1_B__TO__T1_A_1



	unless (idIek2_T1_1=1512) restart T1_A_IDL

	unless (idIek2_T1_1=1511) restart T1_B_IDL

	let

		(idIek2_T1, sT1, x) 
	= (idIek2_T1_1, sT1_1, x_1);
	

	tel



	state POINT__TO__T1_A_1:

	 var 	idIek2_T1_2:int;
	sT1_2:int;
	let

		-- transition trace :
	--POINT__To__T1_A_1
		(idIek2_T1_2, sT1_2) 
	= T1_A_en(idIek2_T1_1, sT1_1, false);
		

	(idIek2_T1, sT1) 
	=  (idIek2_T1_2, sT1_2);

	--add unused variables
	(x) 
	= (x_1);
	

	tel

	until true restart POINTIek2_T1



	state T1_A__TO__T1_B_1:

	 var 	idIek2_T1_2, idIek2_T1_3:int;
	sT1_2:int;
	x_2:int;
	let

		-- transition trace :
	--T1_A__To__T1_B_1
		-- condition Action : x++
		
		(x_2) 
	= T1_A__To__T1_B_1_Condition_Action(x_1);
		

		(idIek2_T1_2) 
	= T1_A_ex(idIek2_T1_1, false);
		

		(idIek2_T1_3, sT1_2) 
	= T1_B_en(idIek2_T1_2, sT1_1, false);
		

	(idIek2_T1, sT1, x) 
	=  (idIek2_T1_3, sT1_2, x_2);


	tel

	until true restart POINTIek2_T1



	state T1_B__TO__T1_A_1:

	 var 	idIek2_T1_2, idIek2_T1_3:int;
	sT1_2:int;
	x_2:int;
	let

		-- transition trace :
	--T1_B__To__T1_A_1
		-- condition Action : x++
		
		(x_2) 
	= T1_B__To__T1_A_1_Condition_Action(x_1);
		

		(idIek2_T1_2) 
	= T1_B_ex(idIek2_T1_1, false);
		

		(idIek2_T1_3, sT1_2) 
	= T1_A_en(idIek2_T1_2, sT1_1, false);
		

	(idIek2_T1, sT1, x) 
	=  (idIek2_T1_3, sT1_2, x_2);


	tel

	until true restart POINTIek2_T1



	state T1_A_IDL:

	 	let

		

	(idIek2_T1, sT1, x) 
	= (idIek2_T1_1, sT1_1, x_1);
	

	tel

	until true restart POINTIek2_T1



	state T1_B_IDL:

	 	let

		

	(idIek2_T1, sT1, x) 
	= (idIek2_T1_1, sT1_1, x_1);
	

	tel

	until true restart POINTIek2_T1



tel


--***************************************************State :Iek2_T3 Automaton***************************************************

node Iek2_T3_node(idIek2_T3_1:int;
	sT3_1:int;
	x_1:int;
	y_1:int)

returns (idIek2_T3:int;
	sT3:int);
var 	change_x_output: bool;
 	change_y_output: bool;


let

	change_x_output =(( pre x_1) != x_1);
 	change_y_output =(( pre y_1) != y_1);
	 automaton iek2_t3

	state POINTIek2_T3:
	unless (idIek2_T3_1=0) restart POINT__TO__T3_A_1



	unless (idIek2_T3_1=1517) and change_x_output restart T3_A__TO__T3_C_1



	unless (idIek2_T3_1=1518) and change_x_output restart T3_C__TO__T3_D_1



	unless (idIek2_T3_1=1518) and change_y_output restart T3_C__TO__T3_B_2



	unless (idIek2_T3_1=1520) and change_y_output restart T3_D__TO__T3_B_1



	unless (idIek2_T3_1=1519) and change_y_output restart T3_B__TO__T3_A_1



	unless (idIek2_T3_1=1519) and change_x_output restart T3_B__TO__T3_C_2



	unless (idIek2_T3_1=1517) restart T3_A_IDL

	unless (idIek2_T3_1=1518) restart T3_C_IDL

	unless (idIek2_T3_1=1520) restart T3_D_IDL

	unless (idIek2_T3_1=1519) restart T3_B_IDL

	let

		(idIek2_T3, sT3) 
	= (idIek2_T3_1, sT3_1);
	

	tel



	state POINT__TO__T3_A_1:

	 var 	idIek2_T3_2:int;
	sT3_2:int;
	let

		-- transition trace :
	--POINT__To__T3_a_1
		(idIek2_T3_2, sT3_2) 
	= T3_a_en(idIek2_T3_1, sT3_1, false);
		

	(idIek2_T3, sT3) 
	=  (idIek2_T3_2, sT3_2);


	tel

	until true restart POINTIek2_T3



	state T3_A__TO__T3_C_1:

	 var 	idIek2_T3_2, idIek2_T3_3:int;
	sT3_2:int;
	let

		-- transition trace :
	--T3_a__To__T3_c_1
		(idIek2_T3_2) 
	= T3_a_ex(idIek2_T3_1, false);
		

		(idIek2_T3_3, sT3_2) 
	= T3_c_en(idIek2_T3_2, sT3_1, false);
		

	(idIek2_T3, sT3) 
	=  (idIek2_T3_3, sT3_2);


	tel

	until true restart POINTIek2_T3



	state T3_C__TO__T3_D_1:

	 var 	idIek2_T3_2, idIek2_T3_3:int;
	sT3_2:int;
	let

		-- transition trace :
	--T3_c__To__T3_d_1
		(idIek2_T3_2) 
	= T3_c_ex(idIek2_T3_1, false);
		

		(idIek2_T3_3, sT3_2) 
	= T3_d_en(idIek2_T3_2, sT3_1, false);
		

	(idIek2_T3, sT3) 
	=  (idIek2_T3_3, sT3_2);


	tel

	until true restart POINTIek2_T3



	state T3_C__TO__T3_B_2:

	 var 	idIek2_T3_2, idIek2_T3_3:int;
	sT3_2:int;
	let

		-- transition trace :
	--T3_c__To__T3_b_2
		(idIek2_T3_2) 
	= T3_c_ex(idIek2_T3_1, false);
		

		(idIek2_T3_3, sT3_2) 
	= T3_b_en(idIek2_T3_2, sT3_1, false);
		

	(idIek2_T3, sT3) 
	=  (idIek2_T3_3, sT3_2);


	tel

	until true restart POINTIek2_T3



	state T3_D__TO__T3_B_1:

	 var 	idIek2_T3_2, idIek2_T3_3:int;
	sT3_2:int;
	let

		-- transition trace :
	--T3_d__To__T3_b_1
		(idIek2_T3_2) 
	= T3_d_ex(idIek2_T3_1, false);
		

		(idIek2_T3_3, sT3_2) 
	= T3_b_en(idIek2_T3_2, sT3_1, false);
		

	(idIek2_T3, sT3) 
	=  (idIek2_T3_3, sT3_2);


	tel

	until true restart POINTIek2_T3



	state T3_B__TO__T3_A_1:

	 var 	idIek2_T3_2, idIek2_T3_3:int;
	sT3_2:int;
	let

		-- transition trace :
	--T3_b__To__T3_a_1
		(idIek2_T3_2) 
	= T3_b_ex(idIek2_T3_1, false);
		

		(idIek2_T3_3, sT3_2) 
	= T3_a_en(idIek2_T3_2, sT3_1, false);
		

	(idIek2_T3, sT3) 
	=  (idIek2_T3_3, sT3_2);


	tel

	until true restart POINTIek2_T3



	state T3_B__TO__T3_C_2:

	 var 	idIek2_T3_2, idIek2_T3_3:int;
	sT3_2:int;
	let

		-- transition trace :
	--T3_b__To__T3_c_2
		(idIek2_T3_2) 
	= T3_b_ex(idIek2_T3_1, false);
		

		(idIek2_T3_3, sT3_2) 
	= T3_c_en(idIek2_T3_2, sT3_1, false);
		

	(idIek2_T3, sT3) 
	=  (idIek2_T3_3, sT3_2);


	tel

	until true restart POINTIek2_T3



	state T3_A_IDL:

	 	let

		

	(idIek2_T3, sT3) 
	= (idIek2_T3_1, sT3_1);
	

	tel

	until true restart POINTIek2_T3



	state T3_C_IDL:

	 	let

		

	(idIek2_T3, sT3) 
	= (idIek2_T3_1, sT3_1);
	

	tel

	until true restart POINTIek2_T3



	state T3_D_IDL:

	 	let

		

	(idIek2_T3, sT3) 
	= (idIek2_T3_1, sT3_1);
	

	tel

	until true restart POINTIek2_T3



	state T3_B_IDL:

	 	let

		

	(idIek2_T3, sT3) 
	= (idIek2_T3_1, sT3_1);
	

	tel

	until true restart POINTIek2_T3



tel


--***************************************************State :Iek2_Iek2 Automaton***************************************************

node Iek2_Iek2_node(idIek2_Iek2_1:int;
	idIek2_T1_1:int;
	sT1_1:int;
	idIek2_T2_1:int;
	sT2_1:int;
	y_1:int;
	idIek2_T3_1:int;
	sT3_1:int;
	E:bool;
	x_1:int;
	F:bool)

returns (idIek2_Iek2:int;
	idIek2_T1:int;
	sT1:int;
	idIek2_T2:int;
	sT2:int;
	y:int;
	idIek2_T3:int;
	sT3:int;
	x:int);


let

	 automaton iek2_iek2

	state POINTIek2_Iek2:
	unless (idIek2_Iek2_1=0) restart IEK2_IEK2_PARALLEL_ENTRY
	unless true  restart IEK2_IEK2_PARALLEL_IDL

	let

		(idIek2_Iek2, idIek2_T1, sT1, idIek2_T2, sT2, y, idIek2_T3, sT3, x) 
	= (idIek2_Iek2_1, idIek2_T1_1, sT1_1, idIek2_T2_1, sT2_1, y_1, idIek2_T3_1, sT3_1, x_1);
	

	tel



	state IEK2_IEK2_PARALLEL_ENTRY:

	 var 	idIek2_Iek2_2, idIek2_Iek2_3, idIek2_Iek2_4:int;
	idIek2_T1_2:int;
	sT1_2:int;
	idIek2_T2_2:int;
	sT2_2:int;
	y_2:int;
	idIek2_T3_2:int;
	sT3_2:int;
	let

		
	(idIek2_T1_2, idIek2_Iek2_2, sT1_2) 
	= Iek2_T1_en(idIek2_T1_1, idIek2_Iek2_1, sT1_1, false);

	(idIek2_T2_2, idIek2_Iek2_3, sT2_2, y_2) 
	= Iek2_T2_en(idIek2_T2_1, idIek2_Iek2_2, sT2_1, y_1, false);

	(idIek2_T3_2, idIek2_Iek2_4, sT3_2) 
	= Iek2_T3_en(idIek2_T3_1, idIek2_Iek2_3, sT3_1, false);


	(idIek2_Iek2, idIek2_T1, sT1, idIek2_T2, sT2, y, idIek2_T3, sT3) 
	= (idIek2_Iek2_4, idIek2_T1_2, sT1_2, idIek2_T2_2, sT2_2, y_2, idIek2_T3_2, sT3_2);
	
	--add unused variables
	(x) 
	= (x_1);
	

	tel

	until true restart POINTIek2_Iek2



	state IEK2_IEK2_PARALLEL_IDL:

	 var 	idIek2_T1_2:int;
	sT1_2:int;
	idIek2_T2_2:int;
	sT2_2:int;
	y_2:int;
	idIek2_T3_2:int;
	sT3_2:int;
	x_2:int;
	let

		

		(idIek2_T1_2, sT1_2, x_2)
	= if not (idIek2_T1_1= 0 ) then Iek2_T1_node(idIek2_T1_1, sT1_1, E, x_1)

		 else (idIek2_T1_1, sT1_1, x_1);

		

		

		(idIek2_T2_2, sT2_2, y_2)
	= if not (idIek2_T2_1= 0 ) then Iek2_T2_node(idIek2_T2_1, sT2_1, y_1, F)

		 else (idIek2_T2_1, sT2_1, y_1);

		

		

		(idIek2_T3_2, sT3_2)
	= if not (idIek2_T3_1= 0 ) then Iek2_T3_node(idIek2_T3_1, sT3_1, x_2, y_2)

		 else (idIek2_T3_1, sT3_1);

		

		

	(idIek2_Iek2, idIek2_T1, sT1, idIek2_T2, sT2, y, idIek2_T3, sT3, x) 
	= (idIek2_Iek2_1, idIek2_T1_2, sT1_2, idIek2_T2_2, sT2_2, y_2, idIek2_T3_2, sT3_2, x_2);
	

	tel

	until true restart POINTIek2_Iek2



tel


--***************************************************State :Iek2_Iek2 Automaton***************************************************

node Iek2V2_Iek2(E:bool;
	F:bool)

returns (sT1:int;
	sT2:int;
	sT3:int;
	x:int;
	y:int);


var sT1_1: int;

	sT2_1: int;

	sT3_1: int;

	x_1: int;

	y_1: int;

	idIek2_Iek2, idIek2_Iek2_1: int;

	idIek2_T2, idIek2_T2_1: int;

	idIek2_T1, idIek2_T1_1: int;

	idIek2_T3, idIek2_T3_1: int;

	let

	sT1_1 = 0 -> pre sT1;

	sT2_1 = 0 -> pre sT2;

	sT3_1 = 0 -> pre sT3;

	x_1 = 0 -> pre x;

	y_1 = 0 -> pre y;

	idIek2_Iek2_1 = 0 -> pre idIek2_Iek2;

	idIek2_T2_1 = 0 -> pre idIek2_T2;

	idIek2_T1_1 = 0 -> pre idIek2_T1;

	idIek2_T3_1 = 0 -> pre idIek2_T3;

	



	(idIek2_Iek2, idIek2_T1, sT1, idIek2_T2, sT2, y, idIek2_T3, sT3, x)
	 = Iek2_Iek2_node(idIek2_Iek2_1, idIek2_T1_1, sT1_1, idIek2_T2_1, sT2_1, y_1, idIek2_T3_1, sT3_1, E, x_1, F);


--unused outputs
	

tel



node Iek2V2 (E_1_1 : bool; F_1_1 : bool)
returns (sT1_1_1 : int;
	sT2_2_1 : int;
	sT3_3_1 : int;
	x_4_1 : int;
	y_5_1 : int); 
var
	Iek2_1_1 : int; Iek2_2_1 : int; Iek2_3_1 : int; Iek2_4_1 : int; Iek2_5_1 : int;
let 
	(Iek2_1_1, Iek2_2_1, Iek2_3_1, Iek2_4_1, Iek2_5_1) =  Iek2V2_Iek2(E_1_1, F_1_1);
	sT1_1_1 = Iek2_1_1;
	sT2_2_1 = Iek2_2_1;
	sT3_3_1 = Iek2_3_1;
	x_4_1 = Iek2_4_1;
	y_5_1 = Iek2_5_1;
tel

