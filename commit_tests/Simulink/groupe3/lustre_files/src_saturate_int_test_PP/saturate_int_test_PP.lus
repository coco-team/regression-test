-- This file has been generated by CoCoSim


-- System nodes
node saturate_int_test_PP_Saturation8 (In_1_1 : real)
returns (Out_1_1 : real; Out_1_2 : real; Out_1_3 : real; Out_1_4 : real; Out_1_5 : real; Out_1_6 : real); 
var
	lower_1_1 : real; lower_1_2 : real; lower_1_3 : real; lower_1_4 : real; lower_1_5 : real; lower_1_6 : real;
	lower_limit_1_1 : real;
	upper_1_1 : real; upper_1_2 : real; upper_1_3 : real; upper_1_4 : real; upper_1_5 : real; upper_1_6 : real;
	upper_limit_1_1 : real; upper_limit_1_2 : real; upper_limit_1_3 : real; upper_limit_1_4 : real; upper_limit_1_5 : real; upper_limit_1_6 : real;
let 
	lower_1_1 = if upper_1_1 >= lower_limit_1_1 then upper_1_1 else lower_limit_1_1;
	lower_1_2 = if upper_1_2 >= lower_limit_1_1 then upper_1_2 else lower_limit_1_1;
	lower_1_3 = if upper_1_3 >= lower_limit_1_1 then upper_1_3 else lower_limit_1_1;
	lower_1_4 = if upper_1_4 >= lower_limit_1_1 then upper_1_4 else lower_limit_1_1;
	lower_1_5 = if upper_1_5 >= lower_limit_1_1 then upper_1_5 else lower_limit_1_1;
	lower_1_6 = if upper_1_6 >= lower_limit_1_1 then upper_1_6 else lower_limit_1_1;
	lower_limit_1_1 = -2.00000000;
	upper_1_1 = if upper_limit_1_1 <= In_1_1 then upper_limit_1_1 else In_1_1;
	upper_1_2 = if upper_limit_1_2 <= In_1_1 then upper_limit_1_2 else In_1_1;
	upper_1_3 = if upper_limit_1_3 <= In_1_1 then upper_limit_1_3 else In_1_1;
	upper_1_4 = if upper_limit_1_4 <= In_1_1 then upper_limit_1_4 else In_1_1;
	upper_1_5 = if upper_limit_1_5 <= In_1_1 then upper_limit_1_5 else In_1_1;
	upper_1_6 = if upper_limit_1_6 <= In_1_1 then upper_limit_1_6 else In_1_1;
	upper_limit_1_1 = 2.00000000;
	upper_limit_1_2 = 3.00000000;
	upper_limit_1_3 = 4.00000000;
	upper_limit_1_4 = 5.00000000;
	upper_limit_1_5 = 6.00000000;
	upper_limit_1_6 = 7.00000000;
	Out_1_1 = lower_1_1;
	Out_1_2 = lower_1_2;
	Out_1_3 = lower_1_3;
	Out_1_4 = lower_1_4;
	Out_1_5 = lower_1_5;
	Out_1_6 = lower_1_6;
tel

node saturate_int_test_PP_Saturation7 (In_1_1 : real)
returns (Out_1_1 : real; Out_1_2 : real; Out_1_3 : real); 
var
	lower_1_1 : real; lower_1_2 : real; lower_1_3 : real;
	lower_limit_1_1 : real; lower_limit_1_2 : real; lower_limit_1_3 : real;
	upper_1_1 : real;
	upper_limit_1_1 : real;
let 
	lower_1_1 = if upper_1_1 >= lower_limit_1_1 then upper_1_1 else lower_limit_1_1;
	lower_1_2 = if upper_1_1 >= lower_limit_1_2 then upper_1_1 else lower_limit_1_2;
	lower_1_3 = if upper_1_1 >= lower_limit_1_3 then upper_1_1 else lower_limit_1_3;
	lower_limit_1_1 = -2.00000000;
	lower_limit_1_2 = -3.00000000;
	lower_limit_1_3 = -4.00000000;
	upper_1_1 = if upper_limit_1_1 <= In_1_1 then upper_limit_1_1 else In_1_1;
	upper_limit_1_1 = 2.00000000;
	Out_1_1 = lower_1_1;
	Out_1_2 = lower_1_2;
	Out_1_3 = lower_1_3;
tel

node saturate_int_test_PP_Saturation6 (In_1_1 : real)
returns (Out_1_1 : real; Out_1_2 : real; Out_1_3 : real; Out_1_4 : real; Out_1_5 : real; Out_1_6 : real); 
var
	lower_1_1 : real; lower_1_2 : real; lower_1_3 : real; lower_1_4 : real; lower_1_5 : real; lower_1_6 : real;
	lower_limit_1_1 : real; lower_limit_1_2 : real; lower_limit_1_3 : real; lower_limit_1_4 : real; lower_limit_1_5 : real; lower_limit_1_6 : real;
	upper_1_1 : real; upper_1_2 : real; upper_1_3 : real; upper_1_4 : real; upper_1_5 : real; upper_1_6 : real;
	upper_limit_1_1 : real; upper_limit_1_2 : real; upper_limit_1_3 : real; upper_limit_1_4 : real; upper_limit_1_5 : real; upper_limit_1_6 : real;
let 
	lower_1_1 = if upper_1_1 >= lower_limit_1_1 then upper_1_1 else lower_limit_1_1;
	lower_1_2 = if upper_1_2 >= lower_limit_1_2 then upper_1_2 else lower_limit_1_2;
	lower_1_3 = if upper_1_3 >= lower_limit_1_3 then upper_1_3 else lower_limit_1_3;
	lower_1_4 = if upper_1_4 >= lower_limit_1_4 then upper_1_4 else lower_limit_1_4;
	lower_1_5 = if upper_1_5 >= lower_limit_1_5 then upper_1_5 else lower_limit_1_5;
	lower_1_6 = if upper_1_6 >= lower_limit_1_6 then upper_1_6 else lower_limit_1_6;
	lower_limit_1_1 = -2.00000000;
	lower_limit_1_2 = -3.00000000;
	lower_limit_1_3 = -4.00000000;
	lower_limit_1_4 = -5.00000000;
	lower_limit_1_5 = -6.00000000;
	lower_limit_1_6 = -7.00000000;
	upper_1_1 = if upper_limit_1_1 <= In_1_1 then upper_limit_1_1 else In_1_1;
	upper_1_2 = if upper_limit_1_2 <= In_1_1 then upper_limit_1_2 else In_1_1;
	upper_1_3 = if upper_limit_1_3 <= In_1_1 then upper_limit_1_3 else In_1_1;
	upper_1_4 = if upper_limit_1_4 <= In_1_1 then upper_limit_1_4 else In_1_1;
	upper_1_5 = if upper_limit_1_5 <= In_1_1 then upper_limit_1_5 else In_1_1;
	upper_1_6 = if upper_limit_1_6 <= In_1_1 then upper_limit_1_6 else In_1_1;
	upper_limit_1_1 = 2.00000000;
	upper_limit_1_2 = 3.00000000;
	upper_limit_1_3 = 4.00000000;
	upper_limit_1_4 = 5.00000000;
	upper_limit_1_5 = 6.00000000;
	upper_limit_1_6 = 7.00000000;
	Out_1_1 = lower_1_1;
	Out_1_2 = lower_1_2;
	Out_1_3 = lower_1_3;
	Out_1_4 = lower_1_4;
	Out_1_5 = lower_1_5;
	Out_1_6 = lower_1_6;
tel

node saturate_int_test_PP_Saturation5 (In_1_1 : real)
returns (Out_1_1 : real; Out_1_2 : real; Out_1_3 : real); 
var
	lower_1_1 : real; lower_1_2 : real; lower_1_3 : real;
	lower_limit_1_1 : real; lower_limit_1_2 : real; lower_limit_1_3 : real;
	upper_1_1 : real; upper_1_2 : real; upper_1_3 : real;
	upper_limit_1_1 : real; upper_limit_1_2 : real; upper_limit_1_3 : real;
let 
	lower_1_1 = if upper_1_1 >= lower_limit_1_1 then upper_1_1 else lower_limit_1_1;
	lower_1_2 = if upper_1_2 >= lower_limit_1_2 then upper_1_2 else lower_limit_1_2;
	lower_1_3 = if upper_1_3 >= lower_limit_1_3 then upper_1_3 else lower_limit_1_3;
	lower_limit_1_1 = -2.00000000;
	lower_limit_1_2 = -3.00000000;
	lower_limit_1_3 = -4.00000000;
	upper_1_1 = if upper_limit_1_1 <= In_1_1 then upper_limit_1_1 else In_1_1;
	upper_1_2 = if upper_limit_1_2 <= In_1_1 then upper_limit_1_2 else In_1_1;
	upper_1_3 = if upper_limit_1_3 <= In_1_1 then upper_limit_1_3 else In_1_1;
	upper_limit_1_1 = 2.00000000;
	upper_limit_1_2 = 3.00000000;
	upper_limit_1_3 = 4.00000000;
	Out_1_1 = lower_1_1;
	Out_1_2 = lower_1_2;
	Out_1_3 = lower_1_3;
tel

node saturate_int_test_PP_Saturation4 (In_1_1 : real; In_1_2 : real; In_1_3 : real; In_1_4 : real; In_1_5 : real; In_1_6 : real)
returns (Out_1_1 : real; Out_1_2 : real; Out_1_3 : real; Out_1_4 : real; Out_1_5 : real; Out_1_6 : real); 
var
	lower_1_1 : real; lower_1_2 : real; lower_1_3 : real; lower_1_4 : real; lower_1_5 : real; lower_1_6 : real;
	lower_limit_1_1 : real; lower_limit_1_2 : real; lower_limit_1_3 : real; lower_limit_1_4 : real; lower_limit_1_5 : real; lower_limit_1_6 : real;
	upper_1_1 : real; upper_1_2 : real; upper_1_3 : real; upper_1_4 : real; upper_1_5 : real; upper_1_6 : real;
	upper_limit_1_1 : real; upper_limit_1_2 : real; upper_limit_1_3 : real; upper_limit_1_4 : real; upper_limit_1_5 : real; upper_limit_1_6 : real;
let 
	lower_1_1 = if upper_1_1 >= lower_limit_1_1 then upper_1_1 else lower_limit_1_1;
	lower_1_2 = if upper_1_2 >= lower_limit_1_2 then upper_1_2 else lower_limit_1_2;
	lower_1_3 = if upper_1_3 >= lower_limit_1_3 then upper_1_3 else lower_limit_1_3;
	lower_1_4 = if upper_1_4 >= lower_limit_1_4 then upper_1_4 else lower_limit_1_4;
	lower_1_5 = if upper_1_5 >= lower_limit_1_5 then upper_1_5 else lower_limit_1_5;
	lower_1_6 = if upper_1_6 >= lower_limit_1_6 then upper_1_6 else lower_limit_1_6;
	lower_limit_1_1 = -0.50000000;
	lower_limit_1_2 = -0.60000000;
	lower_limit_1_3 = -0.70000000;
	lower_limit_1_4 = -1.50000000;
	lower_limit_1_5 = -1.60000000;
	lower_limit_1_6 = -1.70000000;
	upper_1_1 = if upper_limit_1_1 <= In_1_1 then upper_limit_1_1 else In_1_1;
	upper_1_2 = if upper_limit_1_2 <= In_1_2 then upper_limit_1_2 else In_1_2;
	upper_1_3 = if upper_limit_1_3 <= In_1_3 then upper_limit_1_3 else In_1_3;
	upper_1_4 = if upper_limit_1_4 <= In_1_4 then upper_limit_1_4 else In_1_4;
	upper_1_5 = if upper_limit_1_5 <= In_1_5 then upper_limit_1_5 else In_1_5;
	upper_1_6 = if upper_limit_1_6 <= In_1_6 then upper_limit_1_6 else In_1_6;
	upper_limit_1_1 = 0.50000000;
	upper_limit_1_2 = 0.60000000;
	upper_limit_1_3 = 0.70000000;
	upper_limit_1_4 = 1.50000000;
	upper_limit_1_5 = 1.60000000;
	upper_limit_1_6 = 1.70000000;
	Out_1_1 = lower_1_1;
	Out_1_2 = lower_1_2;
	Out_1_3 = lower_1_3;
	Out_1_4 = lower_1_4;
	Out_1_5 = lower_1_5;
	Out_1_6 = lower_1_6;
tel

node saturate_int_test_PP_Saturation3 (In_1_1 : real; In_1_2 : real; In_1_3 : real)
returns (Out_1_1 : real; Out_1_2 : real; Out_1_3 : real); 
var
	lower_1_1 : real; lower_1_2 : real; lower_1_3 : real;
	lower_limit_1_1 : real; lower_limit_1_2 : real; lower_limit_1_3 : real;
	upper_1_1 : real; upper_1_2 : real; upper_1_3 : real;
	upper_limit_1_1 : real; upper_limit_1_2 : real; upper_limit_1_3 : real;
let 
	lower_1_1 = if upper_1_1 >= lower_limit_1_1 then upper_1_1 else lower_limit_1_1;
	lower_1_2 = if upper_1_2 >= lower_limit_1_2 then upper_1_2 else lower_limit_1_2;
	lower_1_3 = if upper_1_3 >= lower_limit_1_3 then upper_1_3 else lower_limit_1_3;
	lower_limit_1_1 = -0.50000000;
	lower_limit_1_2 = -0.60000000;
	lower_limit_1_3 = -0.70000000;
	upper_1_1 = if upper_limit_1_1 <= In_1_1 then upper_limit_1_1 else In_1_1;
	upper_1_2 = if upper_limit_1_2 <= In_1_2 then upper_limit_1_2 else In_1_2;
	upper_1_3 = if upper_limit_1_3 <= In_1_3 then upper_limit_1_3 else In_1_3;
	upper_limit_1_1 = 0.40000000;
	upper_limit_1_2 = 0.60000000;
	upper_limit_1_3 = 0.70000000;
	Out_1_1 = lower_1_1;
	Out_1_2 = lower_1_2;
	Out_1_3 = lower_1_3;
tel

node saturate_int_test_PP_Saturation2 (In_1_1 : real; In_1_2 : real; In_1_3 : real; In_1_4 : real; In_1_5 : real; In_1_6 : real)
returns (Out_1_1 : real; Out_1_2 : real; Out_1_3 : real; Out_1_4 : real; Out_1_5 : real; Out_1_6 : real); 
var
	lower_1_1 : real; lower_1_2 : real; lower_1_3 : real; lower_1_4 : real; lower_1_5 : real; lower_1_6 : real;
	lower_limit_1_1 : real;
	upper_1_1 : real; upper_1_2 : real; upper_1_3 : real; upper_1_4 : real; upper_1_5 : real; upper_1_6 : real;
	upper_limit_1_1 : real;
let 
	lower_1_1 = if upper_1_1 >= lower_limit_1_1 then upper_1_1 else lower_limit_1_1;
	lower_1_2 = if upper_1_2 >= lower_limit_1_1 then upper_1_2 else lower_limit_1_1;
	lower_1_3 = if upper_1_3 >= lower_limit_1_1 then upper_1_3 else lower_limit_1_1;
	lower_1_4 = if upper_1_4 >= lower_limit_1_1 then upper_1_4 else lower_limit_1_1;
	lower_1_5 = if upper_1_5 >= lower_limit_1_1 then upper_1_5 else lower_limit_1_1;
	lower_1_6 = if upper_1_6 >= lower_limit_1_1 then upper_1_6 else lower_limit_1_1;
	lower_limit_1_1 = -0.50000000;
	upper_1_1 = if upper_limit_1_1 <= In_1_1 then upper_limit_1_1 else In_1_1;
	upper_1_2 = if upper_limit_1_1 <= In_1_2 then upper_limit_1_1 else In_1_2;
	upper_1_3 = if upper_limit_1_1 <= In_1_3 then upper_limit_1_1 else In_1_3;
	upper_1_4 = if upper_limit_1_1 <= In_1_4 then upper_limit_1_1 else In_1_4;
	upper_1_5 = if upper_limit_1_1 <= In_1_5 then upper_limit_1_1 else In_1_5;
	upper_1_6 = if upper_limit_1_1 <= In_1_6 then upper_limit_1_1 else In_1_6;
	upper_limit_1_1 = 0.60000000;
	Out_1_1 = lower_1_1;
	Out_1_2 = lower_1_2;
	Out_1_3 = lower_1_3;
	Out_1_4 = lower_1_4;
	Out_1_5 = lower_1_5;
	Out_1_6 = lower_1_6;
tel

node saturate_int_test_PP_Saturation1 (In_1_1 : real; In_1_2 : real; In_1_3 : real)
returns (Out_1_1 : real; Out_1_2 : real; Out_1_3 : real); 
var
	lower_1_1 : real; lower_1_2 : real; lower_1_3 : real;
	lower_limit_1_1 : real;
	upper_1_1 : real; upper_1_2 : real; upper_1_3 : real;
	upper_limit_1_1 : real;
let 
	lower_1_1 = if upper_1_1 >= lower_limit_1_1 then upper_1_1 else lower_limit_1_1;
	lower_1_2 = if upper_1_2 >= lower_limit_1_1 then upper_1_2 else lower_limit_1_1;
	lower_1_3 = if upper_1_3 >= lower_limit_1_1 then upper_1_3 else lower_limit_1_1;
	lower_limit_1_1 = -0.50000000;
	upper_1_1 = if upper_limit_1_1 <= In_1_1 then upper_limit_1_1 else In_1_1;
	upper_1_2 = if upper_limit_1_1 <= In_1_2 then upper_limit_1_1 else In_1_2;
	upper_1_3 = if upper_limit_1_1 <= In_1_3 then upper_limit_1_1 else In_1_3;
	upper_limit_1_1 = 0.40000000;
	Out_1_1 = lower_1_1;
	Out_1_2 = lower_1_2;
	Out_1_3 = lower_1_3;
tel

node saturate_int_test_PP_Saturation (In_1_1 : real)
returns (Out_1_1 : real); 
var
	lower_1_1 : real;
	lower_limit_1_1 : real;
	upper_1_1 : real;
	upper_limit_1_1 : real;
let 
	lower_1_1 = if upper_1_1 >= lower_limit_1_1 then upper_1_1 else lower_limit_1_1;
	lower_limit_1_1 = -0.50000000;
	upper_1_1 = if upper_limit_1_1 <= In_1_1 then upper_limit_1_1 else In_1_1;
	upper_limit_1_1 = 0.60000000;
	Out_1_1 = lower_1_1;
tel

node saturate_int_test_PP (In1_1_1 : real; In2_1_1 : real; In2_1_2 : real; In2_1_3 : real; In3_1_1 : real; In3_1_2 : real; In3_1_3 : real; In3_1_4 : real; In3_1_5 : real; In3_1_6 : real; In4_1_1 : real; In4_1_2 : real; In4_1_3 : real; In5_1_1 : real; In5_1_2 : real; In5_1_3 : real; In5_1_4 : real; In5_1_5 : real; In5_1_6 : real; In6_1_1 : real; In7_1_1 : real; In8_1_1 : real; In9_1_1 : real)
returns (Out1_1_1 : real;
	Out2_2_1 : real; Out2_2_2 : real; Out2_2_3 : real;
	Out3_3_1 : real; Out3_3_2 : real; Out3_3_3 : real; Out3_3_4 : real; Out3_3_5 : real; Out3_3_6 : real;
	Out4_4_1 : real; Out4_4_2 : real; Out4_4_3 : real;
	Out5_5_1 : real; Out5_5_2 : real; Out5_5_3 : real; Out5_5_4 : real; Out5_5_5 : real; Out5_5_6 : real;
	Out6_6_1 : real; Out6_6_2 : real; Out6_6_3 : real;
	Out7_7_1 : real; Out7_7_2 : real; Out7_7_3 : real; Out7_7_4 : real; Out7_7_5 : real; Out7_7_6 : real;
	Out8_8_1 : real; Out8_8_2 : real; Out8_8_3 : real;
	Out9_9_1 : real; Out9_9_2 : real; Out9_9_3 : real; Out9_9_4 : real; Out9_9_5 : real; Out9_9_6 : real); 
var
	Saturation_1_1 : real;
	Saturation1_1_1 : real; Saturation1_1_2 : real; Saturation1_1_3 : real;
	Saturation2_1_1 : real; Saturation2_1_2 : real; Saturation2_1_3 : real; Saturation2_1_4 : real; Saturation2_1_5 : real; Saturation2_1_6 : real;
	Saturation3_1_1 : real; Saturation3_1_2 : real; Saturation3_1_3 : real;
	Saturation4_1_1 : real; Saturation4_1_2 : real; Saturation4_1_3 : real; Saturation4_1_4 : real; Saturation4_1_5 : real; Saturation4_1_6 : real;
	Saturation5_1_1 : real; Saturation5_1_2 : real; Saturation5_1_3 : real;
	Saturation6_1_1 : real; Saturation6_1_2 : real; Saturation6_1_3 : real; Saturation6_1_4 : real; Saturation6_1_5 : real; Saturation6_1_6 : real;
	Saturation7_1_1 : real; Saturation7_1_2 : real; Saturation7_1_3 : real;
	Saturation8_1_1 : real; Saturation8_1_2 : real; Saturation8_1_3 : real; Saturation8_1_4 : real; Saturation8_1_5 : real; Saturation8_1_6 : real;
	i_virtual_local : real;
let 
	Saturation_1_1 = saturate_int_test_PP_Saturation(In1_1_1);
	(Saturation1_1_1, Saturation1_1_2, Saturation1_1_3) = saturate_int_test_PP_Saturation1(In2_1_1, In2_1_2, In2_1_3);
	(Saturation2_1_1, Saturation2_1_2, Saturation2_1_3, Saturation2_1_4, Saturation2_1_5, Saturation2_1_6) = saturate_int_test_PP_Saturation2(In3_1_1, In3_1_2, In3_1_3, In3_1_4, In3_1_5, In3_1_6);
	(Saturation3_1_1, Saturation3_1_2, Saturation3_1_3) = saturate_int_test_PP_Saturation3(In4_1_1, In4_1_2, In4_1_3);
	(Saturation4_1_1, Saturation4_1_2, Saturation4_1_3, Saturation4_1_4, Saturation4_1_5, Saturation4_1_6) = saturate_int_test_PP_Saturation4(In5_1_1, In5_1_2, In5_1_3, In5_1_4, In5_1_5, In5_1_6);
	(Saturation5_1_1, Saturation5_1_2, Saturation5_1_3) = saturate_int_test_PP_Saturation5(In6_1_1);
	(Saturation6_1_1, Saturation6_1_2, Saturation6_1_3, Saturation6_1_4, Saturation6_1_5, Saturation6_1_6) = saturate_int_test_PP_Saturation6(In7_1_1);
	(Saturation7_1_1, Saturation7_1_2, Saturation7_1_3) = saturate_int_test_PP_Saturation7(In8_1_1);
	(Saturation8_1_1, Saturation8_1_2, Saturation8_1_3, Saturation8_1_4, Saturation8_1_5, Saturation8_1_6) = saturate_int_test_PP_Saturation8(In9_1_1);
	Out1_1_1 = Saturation_1_1;
	Out2_2_1 = Saturation1_1_1;
	Out2_2_2 = Saturation1_1_2;
	Out2_2_3 = Saturation1_1_3;
	Out3_3_1 = Saturation2_1_1;
	Out3_3_2 = Saturation2_1_2;
	Out3_3_3 = Saturation2_1_3;
	Out3_3_4 = Saturation2_1_4;
	Out3_3_5 = Saturation2_1_5;
	Out3_3_6 = Saturation2_1_6;
	Out4_4_1 = Saturation3_1_1;
	Out4_4_2 = Saturation3_1_2;
	Out4_4_3 = Saturation3_1_3;
	Out5_5_1 = Saturation4_1_1;
	Out5_5_2 = Saturation4_1_2;
	Out5_5_3 = Saturation4_1_3;
	Out5_5_4 = Saturation4_1_4;
	Out5_5_5 = Saturation4_1_5;
	Out5_5_6 = Saturation4_1_6;
	Out6_6_1 = Saturation5_1_1;
	Out6_6_2 = Saturation5_1_2;
	Out6_6_3 = Saturation5_1_3;
	Out7_7_1 = Saturation6_1_1;
	Out7_7_2 = Saturation6_1_2;
	Out7_7_3 = Saturation6_1_3;
	Out7_7_4 = Saturation6_1_4;
	Out7_7_5 = Saturation6_1_5;
	Out7_7_6 = Saturation6_1_6;
	Out8_8_1 = Saturation7_1_1;
	Out8_8_2 = Saturation7_1_2;
	Out8_8_3 = Saturation7_1_3;
	Out9_9_1 = Saturation8_1_1;
	Out9_9_2 = Saturation8_1_2;
	Out9_9_3 = Saturation8_1_3;
	Out9_9_4 = Saturation8_1_4;
	Out9_9_5 = Saturation8_1_5;
	Out9_9_6 = Saturation8_1_6;
	i_virtual_local= 0.0 -> 1.0;
tel

