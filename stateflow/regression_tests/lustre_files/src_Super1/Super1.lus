-- This file has been generated by cocoSim


-- System nodes

















-- Entry action for state :Super1_B
node Super1_B_en(idSuper1_Super1_1:int;
	s_1:int;
	isInner:bool)

returns (idSuper1_Super1:int;
	s:int);


var 	idSuper1_Super1_2:int;
	s_2:int;


let



	-- set state as active 
	idSuper1_Super1_2 
	= 728;
	

	s_2 
	= if (not isInner) then 5
	 else s_1;
	

	(idSuper1_Super1, s) 
	= (idSuper1_Super1_2, s_2);
	

tel





-- Exit action for state :Super1_B
node Super1_B_ex(idSuper1_Super1_1:int;
	isInner:bool)

returns (idSuper1_Super1:int);


var 	idSuper1_Super1_2:int;


let



	-- set state as inactive 
	idSuper1_Super1_2
	 = if (not isInner) then 0 else idSuper1_Super1_1;


	(idSuper1_Super1) 
	= (idSuper1_Super1_1);
	

tel






-- Entry action for state :C_C1
node C_C1_en(idSuper1_C_1:int;
	s_1:int;
	isInner:bool)

returns (idSuper1_C:int;
	s:int);


var 	idSuper1_C_2:int;
	s_2:int;


let



	-- set state as active 
	idSuper1_C_2 
	= 730;
	

	s_2 
	= if (not isInner) then 3
	 else s_1;
	

	(idSuper1_C, s) 
	= (idSuper1_C_2, s_2);
	

tel





-- Exit action for state :C_C1
node C_C1_ex(idSuper1_C_1:int;
	isInner:bool)

returns (idSuper1_C:int);


var 	idSuper1_C_2:int;


let



	-- set state as inactive 
	idSuper1_C_2
	 = if (not isInner) then 0 else idSuper1_C_1;


	(idSuper1_C) 
	= (idSuper1_C_1);
	

tel






-- Entry action for state :C_C2
node C_C2_en(idSuper1_C_1:int;
	s_1:int;
	isInner:bool)

returns (idSuper1_C:int;
	s:int);


var 	idSuper1_C_2:int;
	s_2:int;


let



	-- set state as active 
	idSuper1_C_2 
	= 731;
	

	s_2 
	= if (not isInner) then 4
	 else s_1;
	

	(idSuper1_C, s) 
	= (idSuper1_C_2, s_2);
	

tel





-- Exit action for state :C_C2
node C_C2_ex(idSuper1_C_1:int;
	isInner:bool)

returns (idSuper1_C:int);


var 	idSuper1_C_2:int;


let



	-- set state as inactive 
	idSuper1_C_2
	 = if (not isInner) then 0 else idSuper1_C_1;


	(idSuper1_C) 
	= (idSuper1_C_1);
	

tel






-- Entry action for state :Super1_C
node Super1_C_en(idSuper1_C_1:int;
	idSuper1_Super1_1:int;
	s_1:int;
	isInner:bool)

returns (idSuper1_C:int;
	idSuper1_Super1:int;
	s:int);


var 	idSuper1_C_2, idSuper1_C_3, idSuper1_C_4, idSuper1_C_5, idSuper1_C_6:int;
	idSuper1_Super1_2, idSuper1_Super1_3, idSuper1_Super1_4:int;
	s_2, s_3, s_4, s_5, s_6:int;


let



	-- set state as active 
	idSuper1_Super1_2 
	= 729;
	

	
-- transition trace :
	--POINT__To__C_C1_1
		(idSuper1_C_2, s_2) 
	= C_C1_en(idSuper1_C_1, s_1, false);
		

	(idSuper1_C_3, idSuper1_Super1_3, s_3) 
	= 

	if ( idSuper1_C_1 = 0) then

	 (idSuper1_C_2, idSuper1_Super1_2, s_2)

	 else(idSuper1_C_1, idSuper1_Super1_2, s_1);

	

	(idSuper1_C_4, s_4) 
	= 
	if ( idSuper1_C_1 = 730) then
	C_C1_en(idSuper1_C_1, s_1, false)
	 else (idSuper1_C_1, s_1);

	

	(idSuper1_C_5, s_5) 
	= 
	if ( idSuper1_C_1 = 731) then
	C_C2_en(idSuper1_C_1, s_1, false)
	 else (idSuper1_C_1, s_1);

	

	(idSuper1_C_6, idSuper1_Super1_4, s_6) 
	= 
		 if ( idSuper1_C_1 = 0) then 
		(idSuper1_C_3, idSuper1_Super1_3, s_3)
		 else
		 if ( idSuper1_C_1 = 730) then 
		(idSuper1_C_4, idSuper1_Super1_3, s_4)
		 else
		 if ( idSuper1_C_1 = 731) then 
		(idSuper1_C_5, idSuper1_Super1_3, s_5)
		 else (idSuper1_C_1, idSuper1_Super1_2, s_1);


	(idSuper1_C, idSuper1_Super1, s) 
	= (idSuper1_C_6, idSuper1_Super1_4, s_6);
	

tel





-- Exit action for state :Super1_C
node Super1_C_ex(idSuper1_C_1:int;
	idSuper1_Super1_1:int;
	isInner:bool)

returns (idSuper1_C:int;
	idSuper1_Super1:int);


var 	idSuper1_C_2, idSuper1_C_3, idSuper1_C_4, idSuper1_C_5:int;
	idSuper1_Super1_2:int;


let



	
	(idSuper1_C_2) 
	= 
	if ( idSuper1_C_1 = 730) then
	C_C1_ex(idSuper1_C_1, false)
	 else (idSuper1_C_1);

	

	(idSuper1_C_3) 
	= 
	if ( idSuper1_C_1 = 731) then
	C_C2_ex(idSuper1_C_1, false)
	 else (idSuper1_C_1);

	

	(idSuper1_C_4) 
	= 
		 if ( idSuper1_C_1 = 730) then 
		(idSuper1_C_2)
		 else
		 if ( idSuper1_C_1 = 731) then 
		(idSuper1_C_3)
		 else (idSuper1_C_1);


	-- set state as inactive 
	idSuper1_Super1_2
	 = if (not isInner) then 0 else idSuper1_Super1_1;

	idSuper1_C_5 
	= 0;
	

	(idSuper1_C, idSuper1_Super1) 
	= (idSuper1_C_5, idSuper1_Super1_1);
	

tel






-- Entry action for state :Super1_A
node Super1_A_en(idSuper1_Super1_1:int;
	s_1:int;
	isInner:bool)

returns (idSuper1_Super1:int;
	s:int);


var 	idSuper1_Super1_2:int;
	s_2:int;


let



	-- set state as active 
	idSuper1_Super1_2 
	= 727;
	

	s_2 
	= if (not isInner) then 1
	 else s_1;
	

	(idSuper1_Super1, s) 
	= (idSuper1_Super1_2, s_2);
	

tel





-- Exit action for state :Super1_A
node Super1_A_ex(idSuper1_Super1_1:int;
	isInner:bool)

returns (idSuper1_Super1:int);


var 	idSuper1_Super1_2:int;


let



	-- set state as inactive 
	idSuper1_Super1_2
	 = if (not isInner) then 0 else idSuper1_Super1_1;


	(idSuper1_Super1) 
	= (idSuper1_Super1_1);
	

tel






-- Entry action for state :Super1_D
node Super1_D_en(idSuper1_Super1_1:int;
	s_1:int;
	isInner:bool)

returns (idSuper1_Super1:int;
	s:int);


var 	idSuper1_Super1_2:int;
	s_2:int;


let



	-- set state as active 
	idSuper1_Super1_2 
	= 732;
	

	s_2 
	= if (not isInner) then 2
	 else s_1;
	

	(idSuper1_Super1, s) 
	= (idSuper1_Super1_2, s_2);
	

tel





-- Exit action for state :Super1_D
node Super1_D_ex(idSuper1_Super1_1:int;
	isInner:bool)

returns (idSuper1_Super1:int);


var 	idSuper1_Super1_2:int;


let



	-- set state as inactive 
	idSuper1_Super1_2
	 = if (not isInner) then 0 else idSuper1_Super1_1;


	(idSuper1_Super1) 
	= (idSuper1_Super1_1);
	

tel


--***************************************************State :Super1_C Automaton***************************************************

node Super1_C_node(idSuper1_C_1:int;
	s_1:int;
	E:bool;
	idSuper1_Super1_1:int;
	F:bool;
	x:int)

returns (idSuper1_C:int;
	s:int;
	idSuper1_Super1:int);


let

	 automaton super1_c

	state POINTSuper1_C:
	unless (idSuper1_C_1=0) restart POINT__TO__C_C1_1



	unless (idSuper1_C_1=730) and E restart C_C1__TO__SUPER1_B_1



	unless (idSuper1_C_1=730) and F restart C_C1__TO__C_C2_2



	unless (idSuper1_C_1=731) and E and ( x<2 ) restart C_C2__TO__SUPER1_SUPER1JUNCTION741_1



	unless (idSuper1_C_1=731) and F restart C_C2__TO__C_C1_2



	unless (idSuper1_C_1=730) restart C_C1_IDL

	unless (idSuper1_C_1=731) restart C_C2_IDL

	let

		(idSuper1_C, s, idSuper1_Super1) 
	= (idSuper1_C_1, s_1, idSuper1_Super1_1);
	

	tel



	state POINT__TO__C_C1_1:

	 var 	idSuper1_C_2:int;
	s_2:int;
	let

		-- transition trace :
	--POINT__To__C_C1_1
		(idSuper1_C_2, s_2) 
	= C_C1_en(idSuper1_C_1, s_1, false);
		

	(idSuper1_C, s) 
	=  (idSuper1_C_2, s_2);

	--add unused variables
	(idSuper1_Super1) 
	= (idSuper1_Super1_1);
	

	tel

	until true restart POINTSuper1_C



	state C_C1__TO__SUPER1_B_1:

	 var 	idSuper1_C_2:int;
	s_2:int;
	idSuper1_Super1_2, idSuper1_Super1_3:int;
	let

		-- transition trace :
	--C_C1__To__Super1_B_1
		(idSuper1_C_2, idSuper1_Super1_2) 
	= Super1_C_ex(idSuper1_C_1, idSuper1_Super1_1, false);
		

		(idSuper1_Super1_3, s_2) 
	= Super1_B_en(idSuper1_Super1_2, s_1, false);
		

	(idSuper1_C, s, idSuper1_Super1) 
	=  (idSuper1_C_2, s_2, idSuper1_Super1_3);


	tel

	until true restart POINTSuper1_C



	state C_C1__TO__C_C2_2:

	 var 	idSuper1_C_2, idSuper1_C_3:int;
	s_2:int;
	let

		-- transition trace :
	--C_C1__To__C_C2_2
		(idSuper1_C_2) 
	= C_C1_ex(idSuper1_C_1, false);
		

		(idSuper1_C_3, s_2) 
	= C_C2_en(idSuper1_C_2, s_1, false);
		

	(idSuper1_C, s, idSuper1_Super1) 
	=  (idSuper1_C_3, s_2, idSuper1_Super1_1);


	tel

	until true restart POINTSuper1_C



	state C_C2__TO__SUPER1_SUPER1JUNCTION741_1:

	 var 	idSuper1_C_2, idSuper1_C_3:int;
	s_2, s_3:int;
	idSuper1_Super1_2, idSuper1_Super1_3, idSuper1_Super1_4, idSuper1_Super1_5:int;
	let

		

-- transition trace :
	--C_C2__To__Junction741_1, Junction741__To__Super1_D_1
		(idSuper1_C_2, idSuper1_Super1_2) 
	= 
		 if (( x!=0 )) then 
		Super1_C_ex(idSuper1_C_1, idSuper1_Super1_1, false)
		 else (idSuper1_C_1, idSuper1_Super1_1);
		

		(idSuper1_Super1_3, s_2) 
	= 
		 if (( x!=0 )) then 
		Super1_D_en(idSuper1_Super1_2, s_1, false)
		 else (idSuper1_Super1_2, s_1);
		


-- transition trace :
	--C_C2__To__Junction741_1, Junction741__To__Super1_A_2
		(idSuper1_C_3, idSuper1_Super1_4) 
	= 
		 if (( x=0 )) then 
		Super1_C_ex(idSuper1_C_1, idSuper1_Super1_1, false)
		 else (idSuper1_C_1, idSuper1_Super1_1);
		

		(idSuper1_Super1_5, s_3) 
	= 
		 if (( x=0 )) then 
		Super1_A_en(idSuper1_Super1_4, s_1, false)
		 else (idSuper1_Super1_4, s_1);
		

	(idSuper1_C, s, idSuper1_Super1) 
	= 
		 if (( x!=0 )) then 
		(idSuper1_C_2, s_2, idSuper1_Super1_3)
		 else
		 if (( x=0 )) then 
		(idSuper1_C_3, s_3, idSuper1_Super1_5)
		 else (idSuper1_C_1, s_1, idSuper1_Super1_1);


	tel

	until true restart POINTSuper1_C



	state C_C2__TO__C_C1_2:

	 var 	idSuper1_C_2, idSuper1_C_3:int;
	s_2:int;
	let

		-- transition trace :
	--C_C2__To__C_C1_2
		(idSuper1_C_2) 
	= C_C2_ex(idSuper1_C_1, false);
		

		(idSuper1_C_3, s_2) 
	= C_C1_en(idSuper1_C_2, s_1, false);
		

	(idSuper1_C, s, idSuper1_Super1) 
	=  (idSuper1_C_3, s_2, idSuper1_Super1_1);


	tel

	until true restart POINTSuper1_C



	state C_C1_IDL:

	 	let

		

	(idSuper1_C, s, idSuper1_Super1) 
	= (idSuper1_C_1, s_1, idSuper1_Super1_1);
	

	tel

	until true restart POINTSuper1_C



	state C_C2_IDL:

	 	let

		

	(idSuper1_C, s, idSuper1_Super1) 
	= (idSuper1_C_1, s_1, idSuper1_Super1_1);
	

	tel

	until true restart POINTSuper1_C



tel


--***************************************************State :Super1_Super1 Automaton***************************************************

node Super1_Super1_node(idSuper1_Super1_1:int;
	s_1:int;
	E:bool;
	x:int;
	idSuper1_C_1:int;
	F:bool)

returns (idSuper1_Super1:int;
	s:int;
	idSuper1_C:int);


let

	 automaton super1_super1

	state POINTSuper1_Super1:
	unless (idSuper1_Super1_1=0) restart POINT__TO__SUPER1_A_1



	unless (idSuper1_Super1_1=727) and E restart SUPER1_A__TO__SUPER1_SUPER1JUNCTION740_1



	unless (idSuper1_Super1_1=728) and E restart SUPER1_B__TO__C_C2_1



	unless (idSuper1_Super1_1=732) and F restart SUPER1_D__TO__SUPER1_A_1



	unless (idSuper1_Super1_1=727) restart SUPER1_A_IDL

	unless (idSuper1_Super1_1=728) restart SUPER1_B_IDL

	unless (idSuper1_Super1_1=729) restart SUPER1_C_IDL

	unless (idSuper1_Super1_1=732) restart SUPER1_D_IDL

	let

		(idSuper1_Super1, s, idSuper1_C) 
	= (idSuper1_Super1_1, s_1, idSuper1_C_1);
	

	tel



	state POINT__TO__SUPER1_A_1:

	 var 	idSuper1_Super1_2:int;
	s_2:int;
	let

		-- transition trace :
	--POINT__To__Super1_A_1
		(idSuper1_Super1_2, s_2) 
	= Super1_A_en(idSuper1_Super1_1, s_1, false);
		

	(idSuper1_Super1, s) 
	=  (idSuper1_Super1_2, s_2);

	--add unused variables
	(idSuper1_C) 
	= (idSuper1_C_1);
	

	tel

	until true restart POINTSuper1_Super1



	state SUPER1_A__TO__SUPER1_SUPER1JUNCTION740_1:

	 var 	idSuper1_Super1_2, idSuper1_Super1_3, idSuper1_Super1_4, idSuper1_Super1_5:int;
	s_2, s_3:int;
	idSuper1_C_2, idSuper1_C_3:int;
	let

		

-- transition trace :
	--Super1_A__To__Junction740_1, Junction740__To__C_C1_1
		(idSuper1_Super1_2) 
	= 
		 if (( x=0 )) then 
		Super1_A_ex(idSuper1_Super1_1, false)
		 else (idSuper1_Super1_1);
		

		idSuper1_C_2 
	= 730;
	
		(idSuper1_C_3, idSuper1_Super1_3, s_2) 
	= 
		 if (( x=0 )) then 
		Super1_C_en(idSuper1_C_2, idSuper1_Super1_2, s_1, false)
		 else (idSuper1_C_2, idSuper1_Super1_2, s_1);
		


-- transition trace :
	--Super1_A__To__Junction740_1, Junction740__To__Super1_D_2
		(idSuper1_Super1_4) 
	= 
		 if (( x!=0 )) then 
		Super1_A_ex(idSuper1_Super1_1, false)
		 else (idSuper1_Super1_1);
		

		(idSuper1_Super1_5, s_3) 
	= 
		 if (( x!=0 )) then 
		Super1_D_en(idSuper1_Super1_4, s_1, false)
		 else (idSuper1_Super1_4, s_1);
		

	(idSuper1_Super1, s, idSuper1_C) 
	= 
		 if (( x=0 )) then 
		(idSuper1_Super1_3, s_2, idSuper1_C_3)
		 else
		 if (( x!=0 )) then 
		(idSuper1_Super1_5, s_3, idSuper1_C_1)
		 else (idSuper1_Super1_1, s_1, idSuper1_C_1);


	tel

	until true restart POINTSuper1_Super1



	state SUPER1_B__TO__C_C2_1:

	 var 	idSuper1_Super1_2, idSuper1_Super1_3:int;
	s_2:int;
	idSuper1_C_2, idSuper1_C_3:int;
	let

		-- transition trace :
	--Super1_B__To__C_C2_1
		(idSuper1_Super1_2) 
	= Super1_B_ex(idSuper1_Super1_1, false);
		

		idSuper1_C_2 
	= 731;
	
		(idSuper1_C_3, idSuper1_Super1_3, s_2) 
	= Super1_C_en(idSuper1_C_2, idSuper1_Super1_2, s_1, false);
		

	(idSuper1_Super1, s, idSuper1_C) 
	=  (idSuper1_Super1_3, s_2, idSuper1_C_3);


	tel

	until true restart POINTSuper1_Super1



	state SUPER1_D__TO__SUPER1_A_1:

	 var 	idSuper1_Super1_2, idSuper1_Super1_3:int;
	s_2:int;
	let

		-- transition trace :
	--Super1_D__To__Super1_A_1
		(idSuper1_Super1_2) 
	= Super1_D_ex(idSuper1_Super1_1, false);
		

		(idSuper1_Super1_3, s_2) 
	= Super1_A_en(idSuper1_Super1_2, s_1, false);
		

	(idSuper1_Super1, s, idSuper1_C) 
	=  (idSuper1_Super1_3, s_2, idSuper1_C_1);


	tel

	until true restart POINTSuper1_Super1



	state SUPER1_A_IDL:

	 	let

		

	(idSuper1_Super1, s, idSuper1_C) 
	= (idSuper1_Super1_1, s_1, idSuper1_C_1);
	

	tel

	until true restart POINTSuper1_Super1



	state SUPER1_B_IDL:

	 	let

		

	(idSuper1_Super1, s, idSuper1_C) 
	= (idSuper1_Super1_1, s_1, idSuper1_C_1);
	

	tel

	until true restart POINTSuper1_Super1



	state SUPER1_C_IDL:

	 var 	idSuper1_Super1_2:int;
	s_2:int;
	idSuper1_C_2:int;
	let

		
	(idSuper1_C_2, s_2, idSuper1_Super1_2) 
	= Super1_C_node(idSuper1_C_1, s_1, E, idSuper1_Super1_1, F, x);

		


	(idSuper1_Super1, s, idSuper1_C) 
	= (idSuper1_Super1_2, s_2, idSuper1_C_2);
	

	tel

	until true restart POINTSuper1_Super1



	state SUPER1_D_IDL:

	 	let

		

	(idSuper1_Super1, s, idSuper1_C) 
	= (idSuper1_Super1_1, s_1, idSuper1_C_1);
	

	tel

	until true restart POINTSuper1_Super1



tel


--***************************************************State :Super1_Super1 Automaton***************************************************

node Super1_Super1(x:int;
	E:bool;
	F:bool)

returns (s:int);


var s_1: int;

	idSuper1_Super1, idSuper1_Super1_1: int;

	idSuper1_C, idSuper1_C_1: int;

		idSuper1_Super1_2:int;
	s_2:int;
	idSuper1_C_2:int;
let

	s_1 = 0 -> pre s;

	idSuper1_Super1_1 = 0 -> pre idSuper1_Super1;

	idSuper1_C_1 = 0 -> pre idSuper1_C;

	



	(idSuper1_Super1_2, s_2, idSuper1_C_2)
	 = 

	 if E then Super1_Super1_node(idSuper1_Super1_1, s_1, E, x, idSuper1_C_1, false)

	 else (idSuper1_Super1_1, s_1, idSuper1_C_1);

	



	(idSuper1_Super1, s, idSuper1_C)
	 = 

	 if F then Super1_Super1_node(idSuper1_Super1_2, s_2, false, x, idSuper1_C_2, F)

	 else (idSuper1_Super1_2, s_2, idSuper1_C_2);

	


--unused outputs
	

tel



node Super1 (x_1_1 : int; E_1_1 : real; F_1_1 : real)
returns (s_1_1 : int); 
var
	Mux_1_1 : real; Mux_1_2 : real;
	Super1_1_1 : int;
	Mux_1_1_event: bool;
	Mux_1_2_event: bool;
let 
	Mux_1_1 = E_1_1 ;
	Mux_1_2 = F_1_1 ;
	Mux_1_1_event = false -> ((pre(Mux_1_1) > 0.0 and Mux_1_1 <= 0.0) or (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0));
	Mux_1_2_event = false -> ((pre(Mux_1_2) > 0.0 and Mux_1_2 <= 0.0) or (pre(Mux_1_2) <= 0.0 and Mux_1_2 > 0.0));
	Super1_1_1 =  Super1_Super1(x_1_1, Mux_1_1_event, Mux_1_2_event);
	s_1_1 = Super1_1_1;
tel

