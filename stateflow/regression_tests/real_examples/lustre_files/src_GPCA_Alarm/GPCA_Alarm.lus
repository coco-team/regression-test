-- This file has been generated by cocoSim

-- External Stateflow functions
#open <conv>

-- System nodes




node POINT__To__AlarmSubSystem_writeLogJunction1018_1_Condition_Action(logEvent:int;
	ALARM_OUT_Log_Message_ID_1:int)

returns (ALARM_OUT_Log_Message_ID:int);


var 	ALARM_OUT_Log_Message_ID_2:int;


let



	ALARM_OUT_Log_Message_ID_2 
	= logEvent;
	

	(ALARM_OUT_Log_Message_ID) 
	= (ALARM_OUT_Log_Message_ID_2);
	

tel


--***************************************************State :AlarmSubSystem_writeLog Automaton***************************************************

node AlarmSubSystem_writeLog_node(idAlarmSubSystem_writeLog_1:int;
	ALARM_OUT_Log_Message_ID_1:int;
	logEvent:int)

returns (idAlarmSubSystem_writeLog:int;
	ALARM_OUT_Log_Message_ID:int);


let

	 automaton alarmsubsystem_writelog

	state POINTAlarmSubSystem_writeLog:
	unless (idAlarmSubSystem_writeLog_1=0) restart POINT__TO__ALARMSUBSYSTEM_WRITELOGJUNCTION1018_1



	let

		(idAlarmSubSystem_writeLog, ALARM_OUT_Log_Message_ID) 
	= (idAlarmSubSystem_writeLog_1, ALARM_OUT_Log_Message_ID_1);
	

	tel



	state POINT__TO__ALARMSUBSYSTEM_WRITELOGJUNCTION1018_1:

	 var 	ALARM_OUT_Log_Message_ID_2:int;
	let

		-- transition trace :
	--POINT__To__Junction1018_1
		-- condition Action : ALARM_OUT_Log_Message_ID=logEvent;
		
		(ALARM_OUT_Log_Message_ID_2) 
	= POINT__To__AlarmSubSystem_writeLogJunction1018_1_Condition_Action(logEvent, ALARM_OUT_Log_Message_ID_1);
		

	(idAlarmSubSystem_writeLog, ALARM_OUT_Log_Message_ID) 
	=  (idAlarmSubSystem_writeLog_1, ALARM_OUT_Log_Message_ID_2);


	tel

	until true restart POINTAlarmSubSystem_writeLog



tel


--***************************************************State :AlarmSubSystem_writeLog Automaton***************************************************

node writeLog(logEvent:int;
	ALARM_OUT_Log_Message_ID_1:int)

returns (ALARM_OUT_Log_Message_ID:int);


var idAlarmSubSystem_writeLog, idAlarmSubSystem_writeLog_1: int;

	let

	idAlarmSubSystem_writeLog_1 = 0 -> pre idAlarmSubSystem_writeLog;

	



	(idAlarmSubSystem_writeLog, ALARM_OUT_Log_Message_ID)
	 = AlarmSubSystem_writeLog_node(idAlarmSubSystem_writeLog_1, ALARM_OUT_Log_Message_ID_1, logEvent);



tel







node POINT__To__AlarmSubSystem_Step_Scaling_FactorJunction1023_1_Condition_Action(inputVal:int;
	step_size:real;
	returnVal_1:int)

returns (returnVal:int);


var 	returnVal_2:int;


let



	returnVal_2 
	= real_to_int(int_to_real(inputVal)/step_size);
	

	(returnVal) 
	= (returnVal_2);
	

tel


--***************************************************State :AlarmSubSystem_Step_Scaling_Factor Automaton***************************************************

node AlarmSubSystem_Step_Scaling_Factor_node(idAlarmSubSystem_Step_Scaling_Factor_1:int;
	inputVal:int;
	returnVal_1:int;
	step_size:real)

returns (idAlarmSubSystem_Step_Scaling_Factor:int;
	returnVal:int);


let

	 automaton alarmsubsystem_step_scaling_factor

	state POINTAlarmSubSystem_Step_Scaling_Factor:
	unless (idAlarmSubSystem_Step_Scaling_Factor_1=0) restart POINT__TO__ALARMSUBSYSTEM_STEP_SCALING_FACTORJUNCTION1023_1



	let

		(idAlarmSubSystem_Step_Scaling_Factor, returnVal) 
	= (idAlarmSubSystem_Step_Scaling_Factor_1, returnVal_1);
	

	tel



	state POINT__TO__ALARMSUBSYSTEM_STEP_SCALING_FACTORJUNCTION1023_1:

	 var 	returnVal_2:int;
	let

		-- transition trace :
	--POINT__To__Junction1023_1
		-- condition Action : returnVal=uint8(double(inputVal)/step_size);
		
		(returnVal_2) 
	= POINT__To__AlarmSubSystem_Step_Scaling_FactorJunction1023_1_Condition_Action(inputVal, step_size, returnVal_1);
		

	(idAlarmSubSystem_Step_Scaling_Factor, returnVal) 
	=  (idAlarmSubSystem_Step_Scaling_Factor_1, returnVal_2);


	tel

	until true restart POINTAlarmSubSystem_Step_Scaling_Factor



tel


--***************************************************State :AlarmSubSystem_Step_Scaling_Factor Automaton***************************************************

node Step_Scaling_Factor(inputVal:int;
	step_size:real)

returns (returnVal:int);


var returnVal_1: int;

	idAlarmSubSystem_Step_Scaling_Factor, idAlarmSubSystem_Step_Scaling_Factor_1: int;

	let

	returnVal_1 = 0 -> pre returnVal;

	idAlarmSubSystem_Step_Scaling_Factor_1 = 0 -> pre idAlarmSubSystem_Step_Scaling_Factor;

	



	(idAlarmSubSystem_Step_Scaling_Factor, returnVal)
	 = AlarmSubSystem_Step_Scaling_Factor_node(idAlarmSubSystem_Step_Scaling_Factor_1, inputVal, returnVal_1, step_size);


--unused outputs
	

tel







node POINT__To__CheckAlarm_setHighestAlarmJunction876_1_Condition_Action(Max_Alarm_Level_1:int;
	ALARM_OUT_Highest_Level_Alarm_1:int)

returns (Max_Alarm_Level:int;
	ALARM_OUT_Highest_Level_Alarm:int);


var 	ALARM_OUT_Highest_Level_Alarm_2:int;


let



	ALARM_OUT_Highest_Level_Alarm_2 
	=  Max_Alarm_Level_1 ;
	

	(Max_Alarm_Level, ALARM_OUT_Highest_Level_Alarm) 
	= (Max_Alarm_Level_1, ALARM_OUT_Highest_Level_Alarm_2);
	

tel


--***************************************************State :CheckAlarm_setHighestAlarm Automaton***************************************************

node CheckAlarm_setHighestAlarm_node(idCheckAlarm_setHighestAlarm_1:int;
	ALARM_OUT_Highest_Level_Alarm_1:int;
	Max_Alarm_Level_1:int)

returns (idCheckAlarm_setHighestAlarm:int;
	ALARM_OUT_Highest_Level_Alarm:int;
	Max_Alarm_Level:int);


let

	 automaton checkalarm_sethighestalarm

	state POINTCheckAlarm_setHighestAlarm:
	unless (idCheckAlarm_setHighestAlarm_1=0) restart POINT__TO__CHECKALARM_SETHIGHESTALARMJUNCTION876_1



	let

		(idCheckAlarm_setHighestAlarm, ALARM_OUT_Highest_Level_Alarm, Max_Alarm_Level) 
	= (idCheckAlarm_setHighestAlarm_1, ALARM_OUT_Highest_Level_Alarm_1, Max_Alarm_Level_1);
	

	tel



	state POINT__TO__CHECKALARM_SETHIGHESTALARMJUNCTION876_1:

	 var 	ALARM_OUT_Highest_Level_Alarm_2:int;
	Max_Alarm_Level_2:int;
	let

		-- transition trace :
	--POINT__To__Junction876_1
		-- condition Action : ALARM_OUT_Highest_Level_Alarm=Max_Alarm_Level;
		
		(Max_Alarm_Level_2, ALARM_OUT_Highest_Level_Alarm_2) 
	= POINT__To__CheckAlarm_setHighestAlarmJunction876_1_Condition_Action(Max_Alarm_Level_1, ALARM_OUT_Highest_Level_Alarm_1);
		

	(idCheckAlarm_setHighestAlarm, ALARM_OUT_Highest_Level_Alarm, Max_Alarm_Level) 
	=  (idCheckAlarm_setHighestAlarm_1, ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2);


	tel

	until true restart POINTCheckAlarm_setHighestAlarm



tel


--***************************************************State :CheckAlarm_setHighestAlarm Automaton***************************************************

node setHighestAlarm(ALARM_OUT_Highest_Level_Alarm_1:int;
	Max_Alarm_Level_1:int)

returns (ALARM_OUT_Highest_Level_Alarm:int;
	Max_Alarm_Level:int);


var idCheckAlarm_setHighestAlarm, idCheckAlarm_setHighestAlarm_1: int;

	let

	idCheckAlarm_setHighestAlarm_1 = 0 -> pre idCheckAlarm_setHighestAlarm;

	



	(idCheckAlarm_setHighestAlarm, ALARM_OUT_Highest_Level_Alarm, Max_Alarm_Level)
	 = CheckAlarm_setHighestAlarm_node(idCheckAlarm_setHighestAlarm_1, ALARM_OUT_Highest_Level_Alarm_1, Max_Alarm_Level_1);



tel







node POINT__To__IsOverInfusionFlowRate_checkOverInfusionFlowRateJunction901_1_Condition_Action(overInfusion_1:int)

returns (overInfusion:int);


var 	overInfusion_2:int;


let



	overInfusion_2 
	= 0;
	

	(overInfusion) 
	= (overInfusion_2);
	

tel







node IsOverInfusionFlowRate_checkOverInfusionFlowRateJunction903__To__IsOverInfusionFlowRate_checkOverInfusionFlowRateJunction904_2_Condition_Action(overInfusion_1:int)

returns (overInfusion:int);


var 	overInfusion_2:int;


let



	overInfusion_2 
	= 1;
	

	(overInfusion) 
	= (overInfusion_2);
	

tel






node IsOverInfusionFlowRate_checkOverInfusionFlowRateJunction903__To__IsOverInfusionFlowRate_checkOverInfusionFlowRateJunction902_1_Condition_Action(overInfusion_1:int)

returns (overInfusion:int);


var 	overInfusion_2:int;


let



	overInfusion_2 
	= 1;
	

	(overInfusion) 
	= (overInfusion_2);
	

tel






node IsOverInfusionFlowRate_checkOverInfusionFlowRateJunction903__To__IsOverInfusionFlowRate_checkOverInfusionFlowRateJunction905_3_Condition_Action(overInfusion_1:int)

returns (overInfusion:int);


var 	overInfusion_2:int;


let



	overInfusion_2 
	= 2;
	

	(overInfusion) 
	= (overInfusion_2);
	

tel


--***************************************************State :IsOverInfusionFlowRate_checkOverInfusionFlowRate Automaton***************************************************

node IsOverInfusionFlowRate_checkOverInfusionFlowRate_node(idIsOverInfusionFlowRate_checkOverInfusionFlowRate_1:int;
	overInfusion_1:int;
	SYS_STAT_IN_In_Therapy:bool;
	SENSOR_IN_Flow_Rate_Monitored:int;
	DB_IN_Flow_Rate_High:int;
	IM_IN_Flow_Rate_Commanded:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int)

returns (idIsOverInfusionFlowRate_checkOverInfusionFlowRate:int;
	overInfusion:int);


let

	 automaton isoverinfusionflowrate_checkoverinfusionflowrate

	state POINTIsOverInfusionFlowRate_checkOverInfusionFlowRate:
	unless (idIsOverInfusionFlowRate_checkOverInfusionFlowRate_1=0) restart POINT__TO__ISOVERINFUSIONFLOWRATE_CHECKOVERINFUSIONFLOWRATEJUNCTION901_1



	let

		(idIsOverInfusionFlowRate_checkOverInfusionFlowRate, overInfusion) 
	= (idIsOverInfusionFlowRate_checkOverInfusionFlowRate_1, overInfusion_1);
	

	tel



	state POINT__TO__ISOVERINFUSIONFLOWRATE_CHECKOVERINFUSIONFLOWRATEJUNCTION901_1:

	 var 	overInfusion_2, overInfusion_3, overInfusion_4, overInfusion_5, overInfusion_6, overInfusion_7:int;
	let

		



-- transition trace :
	--POINT__To__Junction901_1, Junction901__To__Junction903_1, Junction903__To__Junction902_1
		-- condition Action : overInfusion=0;
		
		(overInfusion_2) 
	= POINT__To__IsOverInfusionFlowRate_checkOverInfusionFlowRateJunction901_1_Condition_Action(overInfusion_1);
		

		-- condition Action : overInfusion=1;
		
		(overInfusion_3) 
	= 
		 if (( SYS_STAT_IN_In_Therapy ) and ( SENSOR_IN_Flow_Rate_Monitored>DB_IN_Flow_Rate_High )) then 
		IsOverInfusionFlowRate_checkOverInfusionFlowRateJunction903__To__IsOverInfusionFlowRate_checkOverInfusionFlowRateJunction902_1_Condition_Action(overInfusion_2)
		 else (overInfusion_2);
		


-- transition trace :
	--POINT__To__Junction901_1, Junction901__To__Junction903_1, Junction903__To__Junction904_2
		-- condition Action : overInfusion=0;
		
		(overInfusion_4) 
	= POINT__To__IsOverInfusionFlowRate_checkOverInfusionFlowRateJunction901_1_Condition_Action(overInfusion_1);
		

		-- condition Action : overInfusion=1;
		
		(overInfusion_5) 
	= 
		 if (( SYS_STAT_IN_In_Therapy ) and ( SENSOR_IN_Flow_Rate_Monitored>(IM_IN_Flow_Rate_Commanded*((100+CONST_IN_Tolerance_Max)/100)) )) then 
		IsOverInfusionFlowRate_checkOverInfusionFlowRateJunction903__To__IsOverInfusionFlowRate_checkOverInfusionFlowRateJunction904_2_Condition_Action(overInfusion_4)
		 else (overInfusion_4);
		


-- transition trace :
	--POINT__To__Junction901_1, Junction901__To__Junction903_1, Junction903__To__Junction905_3
		-- condition Action : overInfusion=0;
		
		(overInfusion_6) 
	= POINT__To__IsOverInfusionFlowRate_checkOverInfusionFlowRateJunction901_1_Condition_Action(overInfusion_1);
		

		-- condition Action : overInfusion=2;
		
		(overInfusion_7) 
	= 
		 if (( SYS_STAT_IN_In_Therapy ) and ( SENSOR_IN_Flow_Rate_Monitored>(IM_IN_Flow_Rate_Commanded*((100+CONST_IN_Tolerance_Min)/100)) )) then 
		IsOverInfusionFlowRate_checkOverInfusionFlowRateJunction903__To__IsOverInfusionFlowRate_checkOverInfusionFlowRateJunction905_3_Condition_Action(overInfusion_6)
		 else (overInfusion_6);
		

	(idIsOverInfusionFlowRate_checkOverInfusionFlowRate, overInfusion) 
	= 
		 if (( SYS_STAT_IN_In_Therapy ) and ( SENSOR_IN_Flow_Rate_Monitored>DB_IN_Flow_Rate_High )) then 
		(idIsOverInfusionFlowRate_checkOverInfusionFlowRate_1, overInfusion_3)
		 else
		 if (( SYS_STAT_IN_In_Therapy ) and ( SENSOR_IN_Flow_Rate_Monitored>(IM_IN_Flow_Rate_Commanded*((100+CONST_IN_Tolerance_Max)/100)) )) then 
		(idIsOverInfusionFlowRate_checkOverInfusionFlowRate_1, overInfusion_5)
		 else
		 if (( SYS_STAT_IN_In_Therapy ) and ( SENSOR_IN_Flow_Rate_Monitored>(IM_IN_Flow_Rate_Commanded*((100+CONST_IN_Tolerance_Min)/100)) )) then 
		(idIsOverInfusionFlowRate_checkOverInfusionFlowRate_1, overInfusion_7)
		 else (idIsOverInfusionFlowRate_checkOverInfusionFlowRate_1, overInfusion_6);


	tel

	until true restart POINTIsOverInfusionFlowRate_checkOverInfusionFlowRate



tel


--***************************************************State :IsOverInfusionFlowRate_checkOverInfusionFlowRate Automaton***************************************************

node checkOverInfusionFlowRate(overInfusion_1:int;
	SYS_STAT_IN_In_Therapy:bool;
	SENSOR_IN_Flow_Rate_Monitored:int;
	DB_IN_Flow_Rate_High:int;
	IM_IN_Flow_Rate_Commanded:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int)

returns (overInfusion:int);


var idIsOverInfusionFlowRate_checkOverInfusionFlowRate, idIsOverInfusionFlowRate_checkOverInfusionFlowRate_1: int;

	let

	idIsOverInfusionFlowRate_checkOverInfusionFlowRate_1 = 0 -> pre idIsOverInfusionFlowRate_checkOverInfusionFlowRate;

	



	(idIsOverInfusionFlowRate_checkOverInfusionFlowRate, overInfusion)
	 = IsOverInfusionFlowRate_checkOverInfusionFlowRate_node(idIsOverInfusionFlowRate_checkOverInfusionFlowRate_1, overInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min);



tel








node IsUnderInfusion_checkUnderInfusionJunction942__To__IsUnderInfusion_checkUnderInfusionJunction945_3_Condition_Action(underInfusion_1:int)

returns (underInfusion:int);


var 	underInfusion_2:int;


let



	underInfusion_2 
	= 2;
	

	(underInfusion) 
	= (underInfusion_2);
	

tel






node POINT__To__IsUnderInfusion_checkUnderInfusionJunction941_1_Condition_Action(underInfusion_1:int)

returns (underInfusion:int);


var 	underInfusion_2:int;


let



	underInfusion_2 
	= 0;
	

	(underInfusion) 
	= (underInfusion_2);
	

tel






node IsUnderInfusion_checkUnderInfusionJunction942__To__IsUnderInfusion_checkUnderInfusionJunction943_1_Condition_Action(underInfusion_1:int)

returns (underInfusion:int);


var 	underInfusion_2:int;


let



	underInfusion_2 
	= 1;
	

	(underInfusion) 
	= (underInfusion_2);
	

tel






node IsUnderInfusion_checkUnderInfusionJunction942__To__IsUnderInfusion_checkUnderInfusionJunction944_2_Condition_Action(underInfusion_1:int)

returns (underInfusion:int);


var 	underInfusion_2:int;


let



	underInfusion_2 
	= 1;
	

	(underInfusion) 
	= (underInfusion_2);
	

tel


--***************************************************State :IsUnderInfusion_checkUnderInfusion Automaton***************************************************

node IsUnderInfusion_checkUnderInfusion_node(idIsUnderInfusion_checkUnderInfusion_1:int;
	underInfusion_1:int;
	SYS_STAT_IN_In_Therapy:bool;
	SENSOR_IN_Flow_Rate_Monitored:int;
	DB_IN_Flow_Rate_Low:int;
	IM_IN_Flow_Rate_Commanded:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int)

returns (idIsUnderInfusion_checkUnderInfusion:int;
	underInfusion:int);


let

	 automaton isunderinfusion_checkunderinfusion

	state POINTIsUnderInfusion_checkUnderInfusion:
	unless (idIsUnderInfusion_checkUnderInfusion_1=0) restart POINT__TO__ISUNDERINFUSION_CHECKUNDERINFUSIONJUNCTION941_1



	let

		(idIsUnderInfusion_checkUnderInfusion, underInfusion) 
	= (idIsUnderInfusion_checkUnderInfusion_1, underInfusion_1);
	

	tel



	state POINT__TO__ISUNDERINFUSION_CHECKUNDERINFUSIONJUNCTION941_1:

	 var 	underInfusion_2, underInfusion_3, underInfusion_4, underInfusion_5, underInfusion_6, underInfusion_7:int;
	let

		



-- transition trace :
	--POINT__To__Junction941_1, Junction941__To__Junction942_1, Junction942__To__Junction943_1
		-- condition Action : underInfusion=0;
		
		(underInfusion_2) 
	= POINT__To__IsUnderInfusion_checkUnderInfusionJunction941_1_Condition_Action(underInfusion_1);
		

		-- condition Action : underInfusion=1;
		
		(underInfusion_3) 
	= 
		 if (( SYS_STAT_IN_In_Therapy ) and ( SENSOR_IN_Flow_Rate_Monitored<DB_IN_Flow_Rate_Low )) then 
		IsUnderInfusion_checkUnderInfusionJunction942__To__IsUnderInfusion_checkUnderInfusionJunction943_1_Condition_Action(underInfusion_2)
		 else (underInfusion_2);
		


-- transition trace :
	--POINT__To__Junction941_1, Junction941__To__Junction942_1, Junction942__To__Junction944_2
		-- condition Action : underInfusion=0;
		
		(underInfusion_4) 
	= POINT__To__IsUnderInfusion_checkUnderInfusionJunction941_1_Condition_Action(underInfusion_1);
		

		-- condition Action : underInfusion=1;
		
		(underInfusion_5) 
	= 
		 if (( SYS_STAT_IN_In_Therapy ) and ( SENSOR_IN_Flow_Rate_Monitored<IM_IN_Flow_Rate_Commanded-(IM_IN_Flow_Rate_Commanded*(CONST_IN_Tolerance_Max/100)) )) then 
		IsUnderInfusion_checkUnderInfusionJunction942__To__IsUnderInfusion_checkUnderInfusionJunction944_2_Condition_Action(underInfusion_4)
		 else (underInfusion_4);
		


-- transition trace :
	--POINT__To__Junction941_1, Junction941__To__Junction942_1, Junction942__To__Junction945_3
		-- condition Action : underInfusion=0;
		
		(underInfusion_6) 
	= POINT__To__IsUnderInfusion_checkUnderInfusionJunction941_1_Condition_Action(underInfusion_1);
		

		-- condition Action : underInfusion=2;
		
		(underInfusion_7) 
	= 
		 if (( SYS_STAT_IN_In_Therapy ) and ( SENSOR_IN_Flow_Rate_Monitored<IM_IN_Flow_Rate_Commanded-(IM_IN_Flow_Rate_Commanded*(CONST_IN_Tolerance_Min/100)) )) then 
		IsUnderInfusion_checkUnderInfusionJunction942__To__IsUnderInfusion_checkUnderInfusionJunction945_3_Condition_Action(underInfusion_6)
		 else (underInfusion_6);
		

	(idIsUnderInfusion_checkUnderInfusion, underInfusion) 
	= 
		 if (( SYS_STAT_IN_In_Therapy ) and ( SENSOR_IN_Flow_Rate_Monitored<DB_IN_Flow_Rate_Low )) then 
		(idIsUnderInfusion_checkUnderInfusion_1, underInfusion_3)
		 else
		 if (( SYS_STAT_IN_In_Therapy ) and ( SENSOR_IN_Flow_Rate_Monitored<IM_IN_Flow_Rate_Commanded-(IM_IN_Flow_Rate_Commanded*(CONST_IN_Tolerance_Max/100)) )) then 
		(idIsUnderInfusion_checkUnderInfusion_1, underInfusion_5)
		 else
		 if (( SYS_STAT_IN_In_Therapy ) and ( SENSOR_IN_Flow_Rate_Monitored<IM_IN_Flow_Rate_Commanded-(IM_IN_Flow_Rate_Commanded*(CONST_IN_Tolerance_Min/100)) )) then 
		(idIsUnderInfusion_checkUnderInfusion_1, underInfusion_7)
		 else (idIsUnderInfusion_checkUnderInfusion_1, underInfusion_6);


	tel

	until true restart POINTIsUnderInfusion_checkUnderInfusion



tel


--***************************************************State :IsUnderInfusion_checkUnderInfusion Automaton***************************************************

node checkUnderInfusion(underInfusion_1:int;
	SYS_STAT_IN_In_Therapy:bool;
	SENSOR_IN_Flow_Rate_Monitored:int;
	DB_IN_Flow_Rate_Low:int;
	IM_IN_Flow_Rate_Commanded:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int)

returns (underInfusion:int);


var idIsUnderInfusion_checkUnderInfusion, idIsUnderInfusion_checkUnderInfusion_1: int;

	let

	idIsUnderInfusion_checkUnderInfusion_1 = 0 -> pre idIsUnderInfusion_checkUnderInfusion;

	



	(idIsUnderInfusion_checkUnderInfusion, underInfusion)
	 = IsUnderInfusion_checkUnderInfusion_node(idIsUnderInfusion_checkUnderInfusion_1, underInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min);



tel










node IsOverInfusionFlowRate_Check__To__IsOverInfusionFlowRate_Monitor_2_Condition_Action(overInfusionTimer_1:int)

returns (overInfusionTimer:int);


var 	overInfusionTimer_2:int;


let



	overInfusionTimer_2 
	= 0;
	

	(overInfusionTimer) 
	= (overInfusionTimer_2);
	

tel
















node IsOverInfusionFlowRate_Monitor__To__IsOverInfusionFlowRate_Monitor_3_Condition_Action(overInfusionTimer_1:int)

returns (overInfusionTimer:int);


var 	overInfusionTimer_2:int;


let



	overInfusionTimer_2 
	=  overInfusionTimer_1  + 1;
	

	(overInfusionTimer) 
	= (overInfusionTimer_2);
	

tel






node IsUnderInfusion_Monitor__To__IsUnderInfusion_Monitor_2_Condition_Action(underInfusionTimer_1:int)

returns (underInfusionTimer:int);


var 	underInfusionTimer_2:int;


let



	underInfusionTimer_2 
	=  underInfusionTimer_1  + 1;
	

	(underInfusionTimer) 
	= (underInfusionTimer_2);
	

tel













node POINT__To__IsPausedTimeExceeded_counting_2_Condition_Action(pausedtimer_1:int)

returns (pausedtimer:int);


var 	pausedtimer_2:int;


let



	pausedtimer_2 
	= 0;
	

	(pausedtimer) 
	= (pausedtimer_2);
	

tel








node IsOverInfusionFlowRate_Monitor__To__IsOverInfusionFlowRate_Check_2_Condition_Action(overInfusionTimer_1:int)

returns (overInfusionTimer:int);


var 	overInfusionTimer_2:int;


let



	overInfusionTimer_2 
	= 0;
	

	(overInfusionTimer) 
	= (overInfusionTimer_2);
	

tel














node IsPausedTimeExceeded_No__To__IsPausedTimeExceeded_counting_2_Condition_Action(pausedtimer_1:int)

returns (pausedtimer:int);


var 	pausedtimer_2:int;


let



	pausedtimer_2 
	= 0;
	

	(pausedtimer) 
	= (pausedtimer_2);
	

tel
































node IsUnderInfusion_Check__To__IsUnderInfusion_Monitor_2_Condition_Action(underInfusionTimer_1:int)

returns (underInfusionTimer:int);


var 	underInfusionTimer_2:int;


let



	underInfusionTimer_2 
	= 0;
	

	(underInfusionTimer) 
	= (underInfusionTimer_2);
	

tel










node IsIdleTimeExceeded_No__To__IsIdleTimeExceeded_counting_2_Condition_Action(idletimer_1:int)

returns (idletimer:int);


var 	idletimer_2:int;


let



	idletimer_2 
	= 0;
	

	(idletimer) 
	= (idletimer_2);
	

tel






















node IsUnderInfusion_Monitor__To__IsUnderInfusion_Yes_1_Condition_Action(underInfusionTimer_1:int)

returns (underInfusionTimer:int);


var 	underInfusionTimer_2:int;


let



	underInfusionTimer_2 
	= 0;
	

	(underInfusionTimer) 
	= (underInfusionTimer_2);
	

tel



















node POINT__To__IsIdleTimeExceeded_counting_2_Condition_Action(idletimer_1:int)

returns (idletimer:int);


var 	idletimer_2:int;


let



	idletimer_2 
	= 0;
	

	(idletimer) 
	= (idletimer_2);
	

tel








node IsOverInfusionFlowRate_Monitor__To__IsOverInfusionFlowRate_Yes_1_Condition_Action(overInfusionTimer_1:int)

returns (overInfusionTimer:int);


var 	overInfusionTimer_2:int;


let



	overInfusionTimer_2 
	= 0;
	

	(overInfusionTimer) 
	= (overInfusionTimer_2);
	

tel












node IsUnderInfusion_Monitor__To__IsUnderInfusion_Check_3_Condition_Action(underInfusionTimer_1:int)

returns (underInfusionTimer:int);


var 	underInfusionTimer_2:int;


let



	underInfusionTimer_2 
	= 0;
	

	(underInfusionTimer) 
	= (underInfusionTimer_2);
	

tel




















-- Entry action for state :IsSystemMonitorFailed_No
node IsSystemMonitorFailed_No_en(idLevel1_IsSystemMonitorFailed_1:int;
	isInner:bool)

returns (idLevel1_IsSystemMonitorFailed:int);


var 	idLevel1_IsSystemMonitorFailed_2:int;


let



	-- set state as active 
	idLevel1_IsSystemMonitorFailed_2 
	= 859;
	

	(idLevel1_IsSystemMonitorFailed) 
	= (idLevel1_IsSystemMonitorFailed_2);
	

tel





-- Exit action for state :IsSystemMonitorFailed_No
node IsSystemMonitorFailed_No_ex(idLevel1_IsSystemMonitorFailed_1:int;
	isInner:bool)

returns (idLevel1_IsSystemMonitorFailed:int);


var 	idLevel1_IsSystemMonitorFailed_2:int;


let



	-- set state as inactive 
	idLevel1_IsSystemMonitorFailed_2
	 = if (not isInner) then 0 else idLevel1_IsSystemMonitorFailed_1;


	(idLevel1_IsSystemMonitorFailed) 
	= (idLevel1_IsSystemMonitorFailed_2);
	

tel






-- Entry action for state :IsSystemMonitorFailed_Yes
node IsSystemMonitorFailed_Yes_en(idLevel1_IsSystemMonitorFailed_1:int;
	isInner:bool)

returns (idLevel1_IsSystemMonitorFailed:int);


var 	idLevel1_IsSystemMonitorFailed_2:int;


let



	-- set state as active 
	idLevel1_IsSystemMonitorFailed_2 
	= 858;
	

	(idLevel1_IsSystemMonitorFailed) 
	= (idLevel1_IsSystemMonitorFailed_2);
	

tel





-- Exit action for state :IsSystemMonitorFailed_Yes
node IsSystemMonitorFailed_Yes_ex(idLevel1_IsSystemMonitorFailed_1:int;
	isInner:bool)

returns (idLevel1_IsSystemMonitorFailed:int);


var 	idLevel1_IsSystemMonitorFailed_2:int;


let



	-- set state as inactive 
	idLevel1_IsSystemMonitorFailed_2
	 = if (not isInner) then 0 else idLevel1_IsSystemMonitorFailed_1;


	(idLevel1_IsSystemMonitorFailed) 
	= (idLevel1_IsSystemMonitorFailed_2);
	

tel






-- Entry action for state :IsLoggingFailed_No
node IsLoggingFailed_No_en(idLevel1_IsLoggingFailed_1:int;
	isInner:bool)

returns (idLevel1_IsLoggingFailed:int);


var 	idLevel1_IsLoggingFailed_2:int;


let



	-- set state as active 
	idLevel1_IsLoggingFailed_2 
	= 856;
	

	(idLevel1_IsLoggingFailed) 
	= (idLevel1_IsLoggingFailed_2);
	

tel





-- Exit action for state :IsLoggingFailed_No
node IsLoggingFailed_No_ex(idLevel1_IsLoggingFailed_1:int;
	isInner:bool)

returns (idLevel1_IsLoggingFailed:int);


var 	idLevel1_IsLoggingFailed_2:int;


let



	-- set state as inactive 
	idLevel1_IsLoggingFailed_2
	 = if (not isInner) then 0 else idLevel1_IsLoggingFailed_1;


	(idLevel1_IsLoggingFailed) 
	= (idLevel1_IsLoggingFailed_2);
	

tel






-- Entry action for state :IsLoggingFailed_Yes
node IsLoggingFailed_Yes_en(idLevel1_IsLoggingFailed_1:int;
	isInner:bool)

returns (idLevel1_IsLoggingFailed:int);


var 	idLevel1_IsLoggingFailed_2:int;


let



	-- set state as active 
	idLevel1_IsLoggingFailed_2 
	= 855;
	

	(idLevel1_IsLoggingFailed) 
	= (idLevel1_IsLoggingFailed_2);
	

tel





-- Exit action for state :IsLoggingFailed_Yes
node IsLoggingFailed_Yes_ex(idLevel1_IsLoggingFailed_1:int;
	isInner:bool)

returns (idLevel1_IsLoggingFailed:int);


var 	idLevel1_IsLoggingFailed_2:int;


let



	-- set state as inactive 
	idLevel1_IsLoggingFailed_2
	 = if (not isInner) then 0 else idLevel1_IsLoggingFailed_1;


	(idLevel1_IsLoggingFailed) 
	= (idLevel1_IsLoggingFailed_2);
	

tel






-- Entry action for state :IsPumpHot_No
node IsPumpHot_No_en(idLevel1_IsPumpHot_1:int;
	isInner:bool)

returns (idLevel1_IsPumpHot:int);


var 	idLevel1_IsPumpHot_2:int;


let



	-- set state as active 
	idLevel1_IsPumpHot_2 
	= 853;
	

	(idLevel1_IsPumpHot) 
	= (idLevel1_IsPumpHot_2);
	

tel





-- Exit action for state :IsPumpHot_No
node IsPumpHot_No_ex(idLevel1_IsPumpHot_1:int;
	isInner:bool)

returns (idLevel1_IsPumpHot:int);


var 	idLevel1_IsPumpHot_2:int;


let



	-- set state as inactive 
	idLevel1_IsPumpHot_2
	 = if (not isInner) then 0 else idLevel1_IsPumpHot_1;


	(idLevel1_IsPumpHot) 
	= (idLevel1_IsPumpHot_2);
	

tel






-- Entry action for state :IsPumpHot_Yes
node IsPumpHot_Yes_en(idLevel1_IsPumpHot_1:int;
	isInner:bool)

returns (idLevel1_IsPumpHot:int);


var 	idLevel1_IsPumpHot_2:int;


let



	-- set state as active 
	idLevel1_IsPumpHot_2 
	= 852;
	

	(idLevel1_IsPumpHot) 
	= (idLevel1_IsPumpHot_2);
	

tel





-- Exit action for state :IsPumpHot_Yes
node IsPumpHot_Yes_ex(idLevel1_IsPumpHot_1:int;
	isInner:bool)

returns (idLevel1_IsPumpHot:int);


var 	idLevel1_IsPumpHot_2:int;


let



	-- set state as inactive 
	idLevel1_IsPumpHot_2
	 = if (not isInner) then 0 else idLevel1_IsPumpHot_1;


	(idLevel1_IsPumpHot) 
	= (idLevel1_IsPumpHot_2);
	

tel






-- Entry action for state :IsBatteryError_No
node IsBatteryError_No_en(idLevel1_IsBatteryError_1:int;
	isInner:bool)

returns (idLevel1_IsBatteryError:int);


var 	idLevel1_IsBatteryError_2:int;


let



	-- set state as active 
	idLevel1_IsBatteryError_2 
	= 850;
	

	(idLevel1_IsBatteryError) 
	= (idLevel1_IsBatteryError_2);
	

tel





-- Exit action for state :IsBatteryError_No
node IsBatteryError_No_ex(idLevel1_IsBatteryError_1:int;
	isInner:bool)

returns (idLevel1_IsBatteryError:int);


var 	idLevel1_IsBatteryError_2:int;


let



	-- set state as inactive 
	idLevel1_IsBatteryError_2
	 = if (not isInner) then 0 else idLevel1_IsBatteryError_1;


	(idLevel1_IsBatteryError) 
	= (idLevel1_IsBatteryError_2);
	

tel






-- Entry action for state :IsBatteryError_Yes
node IsBatteryError_Yes_en(idLevel1_IsBatteryError_1:int;
	isInner:bool)

returns (idLevel1_IsBatteryError:int);


var 	idLevel1_IsBatteryError_2:int;


let



	-- set state as active 
	idLevel1_IsBatteryError_2 
	= 849;
	

	(idLevel1_IsBatteryError) 
	= (idLevel1_IsBatteryError_2);
	

tel





-- Exit action for state :IsBatteryError_Yes
node IsBatteryError_Yes_ex(idLevel1_IsBatteryError_1:int;
	isInner:bool)

returns (idLevel1_IsBatteryError:int);


var 	idLevel1_IsBatteryError_2:int;


let



	-- set state as inactive 
	idLevel1_IsBatteryError_2
	 = if (not isInner) then 0 else idLevel1_IsBatteryError_1;


	(idLevel1_IsBatteryError) 
	= (idLevel1_IsBatteryError_2);
	

tel






-- Entry action for state :IsConfigTimeWarning_Yes
node IsConfigTimeWarning_Yes_en(idLevel1_IsConfigTimeWarning_1:int;
	isInner:bool)

returns (idLevel1_IsConfigTimeWarning:int);


var 	idLevel1_IsConfigTimeWarning_2:int;


let



	-- set state as active 
	idLevel1_IsConfigTimeWarning_2 
	= 847;
	

	(idLevel1_IsConfigTimeWarning) 
	= (idLevel1_IsConfigTimeWarning_2);
	

tel





-- Exit action for state :IsConfigTimeWarning_Yes
node IsConfigTimeWarning_Yes_ex(idLevel1_IsConfigTimeWarning_1:int;
	isInner:bool)

returns (idLevel1_IsConfigTimeWarning:int);


var 	idLevel1_IsConfigTimeWarning_2:int;


let



	-- set state as inactive 
	idLevel1_IsConfigTimeWarning_2
	 = if (not isInner) then 0 else idLevel1_IsConfigTimeWarning_1;


	(idLevel1_IsConfigTimeWarning) 
	= (idLevel1_IsConfigTimeWarning_2);
	

tel






-- Entry action for state :IsConfigTimeWarning_No
node IsConfigTimeWarning_No_en(idLevel1_IsConfigTimeWarning_1:int;
	isInner:bool)

returns (idLevel1_IsConfigTimeWarning:int);


var 	idLevel1_IsConfigTimeWarning_2:int;


let



	-- set state as active 
	idLevel1_IsConfigTimeWarning_2 
	= 846;
	

	(idLevel1_IsConfigTimeWarning) 
	= (idLevel1_IsConfigTimeWarning_2);
	

tel





-- Exit action for state :IsConfigTimeWarning_No
node IsConfigTimeWarning_No_ex(idLevel1_IsConfigTimeWarning_1:int;
	isInner:bool)

returns (idLevel1_IsConfigTimeWarning:int);


var 	idLevel1_IsConfigTimeWarning_2:int;


let



	-- set state as inactive 
	idLevel1_IsConfigTimeWarning_2
	 = if (not isInner) then 0 else idLevel1_IsConfigTimeWarning_1;


	(idLevel1_IsConfigTimeWarning) 
	= (idLevel1_IsConfigTimeWarning_2);
	

tel






-- Entry action for state :IsIdleTimeExceeded_Yes
node IsIdleTimeExceeded_Yes_en(idLevel1_IsIdleTimeExceeded_1:int;
	isInner:bool)

returns (idLevel1_IsIdleTimeExceeded:int);


var 	idLevel1_IsIdleTimeExceeded_2:int;


let



	-- set state as active 
	idLevel1_IsIdleTimeExceeded_2 
	= 844;
	

	(idLevel1_IsIdleTimeExceeded) 
	= (idLevel1_IsIdleTimeExceeded_2);
	

tel





-- Exit action for state :IsIdleTimeExceeded_Yes
node IsIdleTimeExceeded_Yes_ex(idLevel1_IsIdleTimeExceeded_1:int;
	isInner:bool)

returns (idLevel1_IsIdleTimeExceeded:int);


var 	idLevel1_IsIdleTimeExceeded_2:int;


let



	-- set state as inactive 
	idLevel1_IsIdleTimeExceeded_2
	 = if (not isInner) then 0 else idLevel1_IsIdleTimeExceeded_1;


	(idLevel1_IsIdleTimeExceeded) 
	= (idLevel1_IsIdleTimeExceeded_2);
	

tel






-- Entry action for state :IsIdleTimeExceeded_No
node IsIdleTimeExceeded_No_en(idLevel1_IsIdleTimeExceeded_1:int;
	idletimer_1:int;
	isInner:bool)

returns (idLevel1_IsIdleTimeExceeded:int;
	idletimer:int);


var 	idLevel1_IsIdleTimeExceeded_2:int;
	idletimer_2:int;


let



	-- set state as active 
	idLevel1_IsIdleTimeExceeded_2 
	= 843;
	

	idletimer_2 
	= if (not isInner) then 0
	 else idletimer_1;
	

	(idLevel1_IsIdleTimeExceeded, idletimer) 
	= (idLevel1_IsIdleTimeExceeded_2, idletimer_2);
	

tel





--During action for state :IsIdleTimeExceeded_No
node IsIdleTimeExceeded_No_du(idletimer_1:int)

returns (idletimer:int);


var 	idletimer_2:int;


let



	idletimer_2 
	= 0;
	

	(idletimer) 
	= (idletimer_2);
	

tel





-- Exit action for state :IsIdleTimeExceeded_No
node IsIdleTimeExceeded_No_ex(idletimer_1:int;
	idLevel1_IsIdleTimeExceeded_1:int;
	isInner:bool)

returns (idletimer:int;
	idLevel1_IsIdleTimeExceeded:int);


var 	idletimer_2:int;
	idLevel1_IsIdleTimeExceeded_2:int;


let



	idletimer_2 
	= if (not isInner) then 0
	 else idletimer_1;
	

	-- set state as inactive 
	idLevel1_IsIdleTimeExceeded_2
	 = if (not isInner) then 0 else idLevel1_IsIdleTimeExceeded_1;


	(idletimer, idLevel1_IsIdleTimeExceeded) 
	= (idletimer_2, idLevel1_IsIdleTimeExceeded_2);
	

tel






-- Entry action for state :IsIdleTimeExceeded_counting
node IsIdleTimeExceeded_counting_en(idLevel1_IsIdleTimeExceeded_1:int;
	idletimer_1:int;
	isInner:bool)

returns (idLevel1_IsIdleTimeExceeded:int;
	idletimer:int);


var 	idLevel1_IsIdleTimeExceeded_2:int;
	idletimer_2:int;


let



	-- set state as active 
	idLevel1_IsIdleTimeExceeded_2 
	= 842;
	

	idletimer_2 
	= if (not isInner) then  idletimer_1  + 1
	 else idletimer_1;
	

	(idLevel1_IsIdleTimeExceeded, idletimer) 
	= (idLevel1_IsIdleTimeExceeded_2, idletimer_2);
	

tel





--During action for state :IsIdleTimeExceeded_counting
node IsIdleTimeExceeded_counting_du(idletimer_1:int)

returns (idletimer:int);


var 	idletimer_2:int;


let



	idletimer_2 
	=  idletimer_1  + 1;
	

	(idletimer) 
	= (idletimer_2);
	

tel





-- Exit action for state :IsIdleTimeExceeded_counting
node IsIdleTimeExceeded_counting_ex(idletimer_1:int;
	idLevel1_IsIdleTimeExceeded_1:int;
	isInner:bool)

returns (idletimer:int;
	idLevel1_IsIdleTimeExceeded:int);


var 	idletimer_2:int;
	idLevel1_IsIdleTimeExceeded_2:int;


let



	idletimer_2 
	= if (not isInner) then  idletimer_1  + 1
	 else idletimer_1;
	

	-- set state as inactive 
	idLevel1_IsIdleTimeExceeded_2
	 = if (not isInner) then 0 else idLevel1_IsIdleTimeExceeded_1;


	(idletimer, idLevel1_IsIdleTimeExceeded) 
	= (idletimer_2, idLevel1_IsIdleTimeExceeded_2);
	

tel






-- Entry action for state :IsPausedTimeExceeded_Yes
node IsPausedTimeExceeded_Yes_en(idLevel1_IsPausedTimeExceeded_1:int;
	isInner:bool)

returns (idLevel1_IsPausedTimeExceeded:int);


var 	idLevel1_IsPausedTimeExceeded_2:int;


let



	-- set state as active 
	idLevel1_IsPausedTimeExceeded_2 
	= 840;
	

	(idLevel1_IsPausedTimeExceeded) 
	= (idLevel1_IsPausedTimeExceeded_2);
	

tel





-- Exit action for state :IsPausedTimeExceeded_Yes
node IsPausedTimeExceeded_Yes_ex(idLevel1_IsPausedTimeExceeded_1:int;
	isInner:bool)

returns (idLevel1_IsPausedTimeExceeded:int);


var 	idLevel1_IsPausedTimeExceeded_2:int;


let



	-- set state as inactive 
	idLevel1_IsPausedTimeExceeded_2
	 = if (not isInner) then 0 else idLevel1_IsPausedTimeExceeded_1;


	(idLevel1_IsPausedTimeExceeded) 
	= (idLevel1_IsPausedTimeExceeded_2);
	

tel






-- Entry action for state :IsPausedTimeExceeded_No
node IsPausedTimeExceeded_No_en(idLevel1_IsPausedTimeExceeded_1:int;
	pausedtimer_1:int;
	isInner:bool)

returns (idLevel1_IsPausedTimeExceeded:int;
	pausedtimer:int);


var 	idLevel1_IsPausedTimeExceeded_2:int;
	pausedtimer_2:int;


let



	-- set state as active 
	idLevel1_IsPausedTimeExceeded_2 
	= 839;
	

	pausedtimer_2 
	= if (not isInner) then 0
	 else pausedtimer_1;
	

	(idLevel1_IsPausedTimeExceeded, pausedtimer) 
	= (idLevel1_IsPausedTimeExceeded_2, pausedtimer_2);
	

tel





--During action for state :IsPausedTimeExceeded_No
node IsPausedTimeExceeded_No_du(pausedtimer_1:int)

returns (pausedtimer:int);


var 	pausedtimer_2:int;


let



	pausedtimer_2 
	= 0;
	

	(pausedtimer) 
	= (pausedtimer_2);
	

tel





-- Exit action for state :IsPausedTimeExceeded_No
node IsPausedTimeExceeded_No_ex(pausedtimer_1:int;
	idLevel1_IsPausedTimeExceeded_1:int;
	isInner:bool)

returns (pausedtimer:int;
	idLevel1_IsPausedTimeExceeded:int);


var 	pausedtimer_2:int;
	idLevel1_IsPausedTimeExceeded_2:int;


let



	pausedtimer_2 
	= if (not isInner) then 0
	 else pausedtimer_1;
	

	-- set state as inactive 
	idLevel1_IsPausedTimeExceeded_2
	 = if (not isInner) then 0 else idLevel1_IsPausedTimeExceeded_1;


	(pausedtimer, idLevel1_IsPausedTimeExceeded) 
	= (pausedtimer_2, idLevel1_IsPausedTimeExceeded_2);
	

tel






-- Entry action for state :IsPausedTimeExceeded_counting
node IsPausedTimeExceeded_counting_en(idLevel1_IsPausedTimeExceeded_1:int;
	pausedtimer_1:int;
	isInner:bool)

returns (idLevel1_IsPausedTimeExceeded:int;
	pausedtimer:int);


var 	idLevel1_IsPausedTimeExceeded_2:int;
	pausedtimer_2:int;


let



	-- set state as active 
	idLevel1_IsPausedTimeExceeded_2 
	= 838;
	

	pausedtimer_2 
	= if (not isInner) then  pausedtimer_1  + 1
	 else pausedtimer_1;
	

	(idLevel1_IsPausedTimeExceeded, pausedtimer) 
	= (idLevel1_IsPausedTimeExceeded_2, pausedtimer_2);
	

tel





--During action for state :IsPausedTimeExceeded_counting
node IsPausedTimeExceeded_counting_du(pausedtimer_1:int)

returns (pausedtimer:int);


var 	pausedtimer_2:int;


let



	pausedtimer_2 
	=  pausedtimer_1  + 1;
	

	(pausedtimer) 
	= (pausedtimer_2);
	

tel





-- Exit action for state :IsPausedTimeExceeded_counting
node IsPausedTimeExceeded_counting_ex(pausedtimer_1:int;
	idLevel1_IsPausedTimeExceeded_1:int;
	isInner:bool)

returns (pausedtimer:int;
	idLevel1_IsPausedTimeExceeded:int);


var 	pausedtimer_2:int;
	idLevel1_IsPausedTimeExceeded_2:int;


let



	pausedtimer_2 
	= if (not isInner) then  pausedtimer_1  + 1
	 else pausedtimer_1;
	

	-- set state as inactive 
	idLevel1_IsPausedTimeExceeded_2
	 = if (not isInner) then 0 else idLevel1_IsPausedTimeExceeded_1;


	(pausedtimer, idLevel1_IsPausedTimeExceeded) 
	= (pausedtimer_2, idLevel1_IsPausedTimeExceeded_2);
	

tel






-- Entry action for state :IsFlowRateNotStable_No
node IsFlowRateNotStable_No_en(idLevel1_IsFlowRateNotStable_1:int;
	isInner:bool)

returns (idLevel1_IsFlowRateNotStable:int);


var 	idLevel1_IsFlowRateNotStable_2:int;


let



	-- set state as active 
	idLevel1_IsFlowRateNotStable_2 
	= 836;
	

	(idLevel1_IsFlowRateNotStable) 
	= (idLevel1_IsFlowRateNotStable_2);
	

tel





-- Exit action for state :IsFlowRateNotStable_No
node IsFlowRateNotStable_No_ex(idLevel1_IsFlowRateNotStable_1:int;
	isInner:bool)

returns (idLevel1_IsFlowRateNotStable:int);


var 	idLevel1_IsFlowRateNotStable_2:int;


let



	-- set state as inactive 
	idLevel1_IsFlowRateNotStable_2
	 = if (not isInner) then 0 else idLevel1_IsFlowRateNotStable_1;


	(idLevel1_IsFlowRateNotStable) 
	= (idLevel1_IsFlowRateNotStable_2);
	

tel






-- Entry action for state :IsFlowRateNotStable_Yes
node IsFlowRateNotStable_Yes_en(idLevel1_IsFlowRateNotStable_1:int;
	isInner:bool)

returns (idLevel1_IsFlowRateNotStable:int);


var 	idLevel1_IsFlowRateNotStable_2:int;


let



	-- set state as active 
	idLevel1_IsFlowRateNotStable_2 
	= 835;
	

	(idLevel1_IsFlowRateNotStable) 
	= (idLevel1_IsFlowRateNotStable_2);
	

tel





-- Exit action for state :IsFlowRateNotStable_Yes
node IsFlowRateNotStable_Yes_ex(idLevel1_IsFlowRateNotStable_1:int;
	isInner:bool)

returns (idLevel1_IsFlowRateNotStable:int);


var 	idLevel1_IsFlowRateNotStable_2:int;


let



	-- set state as inactive 
	idLevel1_IsFlowRateNotStable_2
	 = if (not isInner) then 0 else idLevel1_IsFlowRateNotStable_1;


	(idLevel1_IsFlowRateNotStable) 
	= (idLevel1_IsFlowRateNotStable_2);
	

tel






-- Entry action for state :IsUnderInfusion_Monitor
node IsUnderInfusion_Monitor_en(idLevel1_IsUnderInfusion_1:int;
	underInfusion_1:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_Low:int;
	IM_IN_Flow_Rate_Commanded:int;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SYS_STAT_IN_In_Therapy:bool;
	isInner:bool)

returns (idLevel1_IsUnderInfusion:int;
	underInfusion:int);


var 	idLevel1_IsUnderInfusion_2:int;
	underInfusion_2, underInfusion_3:int;


let



	-- set state as active 
	idLevel1_IsUnderInfusion_2 
	= 832;
	

	underInfusion_2 
	= if (not isInner) then 2
	 else underInfusion_1;
	

	(underInfusion_3) 
	= if (not isInner) then checkUnderInfusion(underInfusion_2, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min)
	 else (underInfusion_2);
	

	(idLevel1_IsUnderInfusion, underInfusion) 
	= (idLevel1_IsUnderInfusion_2, underInfusion_3);
	

tel





--During action for state :IsUnderInfusion_Monitor
node IsUnderInfusion_Monitor_du(underInfusion_1:int;
	SYS_STAT_IN_In_Therapy:bool;
	SENSOR_IN_Flow_Rate_Monitored:int;
	DB_IN_Flow_Rate_Low:int;
	IM_IN_Flow_Rate_Commanded:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int)

returns (underInfusion:int);


var 	underInfusion_2:int;


let



	(underInfusion_2) 
	= checkUnderInfusion(underInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min);
	

	(underInfusion) 
	= (underInfusion_2);
	

tel





-- Exit action for state :IsUnderInfusion_Monitor
node IsUnderInfusion_Monitor_ex(idLevel1_IsUnderInfusion_1:int;
	isInner:bool)

returns (idLevel1_IsUnderInfusion:int);


var 	idLevel1_IsUnderInfusion_2:int;


let



	-- set state as inactive 
	idLevel1_IsUnderInfusion_2
	 = if (not isInner) then 0 else idLevel1_IsUnderInfusion_1;


	(idLevel1_IsUnderInfusion) 
	= (idLevel1_IsUnderInfusion_2);
	

tel






-- Entry action for state :IsUnderInfusion_Check
node IsUnderInfusion_Check_en(idLevel1_IsUnderInfusion_1:int;
	underInfusion_1:int;
	isInner:bool)

returns (idLevel1_IsUnderInfusion:int;
	underInfusion:int);


var 	idLevel1_IsUnderInfusion_2:int;
	underInfusion_2:int;


let



	-- set state as active 
	idLevel1_IsUnderInfusion_2 
	= 831;
	

	underInfusion_2 
	= if (not isInner) then 0
	 else underInfusion_1;
	

	(idLevel1_IsUnderInfusion, underInfusion) 
	= (idLevel1_IsUnderInfusion_2, underInfusion_2);
	

tel





--During action for state :IsUnderInfusion_Check
node IsUnderInfusion_Check_du(underInfusion_1:int)

returns (underInfusion:int);


var 	underInfusion_2:int;


let



	underInfusion_2 
	= 0;
	

	(underInfusion) 
	= (underInfusion_2);
	

tel





-- Exit action for state :IsUnderInfusion_Check
node IsUnderInfusion_Check_ex(idLevel1_IsUnderInfusion_1:int;
	isInner:bool)

returns (idLevel1_IsUnderInfusion:int);


var 	idLevel1_IsUnderInfusion_2:int;


let



	-- set state as inactive 
	idLevel1_IsUnderInfusion_2
	 = if (not isInner) then 0 else idLevel1_IsUnderInfusion_1;


	(idLevel1_IsUnderInfusion) 
	= (idLevel1_IsUnderInfusion_2);
	

tel






-- Entry action for state :IsUnderInfusion_Yes
node IsUnderInfusion_Yes_en(idLevel1_IsUnderInfusion_1:int;
	underInfusion_1:int;
	isInner:bool)

returns (idLevel1_IsUnderInfusion:int;
	underInfusion:int);


var 	idLevel1_IsUnderInfusion_2:int;
	underInfusion_2:int;


let



	-- set state as active 
	idLevel1_IsUnderInfusion_2 
	= 830;
	

	underInfusion_2 
	= if (not isInner) then 1
	 else underInfusion_1;
	

	(idLevel1_IsUnderInfusion, underInfusion) 
	= (idLevel1_IsUnderInfusion_2, underInfusion_2);
	

tel





--During action for state :IsUnderInfusion_Yes
node IsUnderInfusion_Yes_du(underInfusion_1:int)

returns (underInfusion:int);


var 	underInfusion_2:int;


let



	underInfusion_2 
	= 1;
	

	(underInfusion) 
	= (underInfusion_2);
	

tel





-- Exit action for state :IsUnderInfusion_Yes
node IsUnderInfusion_Yes_ex(idLevel1_IsUnderInfusion_1:int;
	isInner:bool)

returns (idLevel1_IsUnderInfusion:int);


var 	idLevel1_IsUnderInfusion_2:int;


let



	-- set state as inactive 
	idLevel1_IsUnderInfusion_2
	 = if (not isInner) then 0 else idLevel1_IsUnderInfusion_1;


	(idLevel1_IsUnderInfusion) 
	= (idLevel1_IsUnderInfusion_2);
	

tel






-- Entry action for state :IsLowReservoir_Yes
node IsLowReservoir_Yes_en(idLevel2_IsLowReservoir_1:int;
	isInner:bool)

returns (idLevel2_IsLowReservoir:int);


var 	idLevel2_IsLowReservoir_2:int;


let



	-- set state as active 
	idLevel2_IsLowReservoir_2 
	= 827;
	

	(idLevel2_IsLowReservoir) 
	= (idLevel2_IsLowReservoir_2);
	

tel





-- Exit action for state :IsLowReservoir_Yes
node IsLowReservoir_Yes_ex(idLevel2_IsLowReservoir_1:int;
	isInner:bool)

returns (idLevel2_IsLowReservoir:int);


var 	idLevel2_IsLowReservoir_2:int;


let



	-- set state as inactive 
	idLevel2_IsLowReservoir_2
	 = if (not isInner) then 0 else idLevel2_IsLowReservoir_1;


	(idLevel2_IsLowReservoir) 
	= (idLevel2_IsLowReservoir_2);
	

tel






-- Entry action for state :IsLowReservoir_No
node IsLowReservoir_No_en(idLevel2_IsLowReservoir_1:int;
	isInner:bool)

returns (idLevel2_IsLowReservoir:int);


var 	idLevel2_IsLowReservoir_2:int;


let



	-- set state as active 
	idLevel2_IsLowReservoir_2 
	= 826;
	

	(idLevel2_IsLowReservoir) 
	= (idLevel2_IsLowReservoir_2);
	

tel





-- Exit action for state :IsLowReservoir_No
node IsLowReservoir_No_ex(idLevel2_IsLowReservoir_1:int;
	isInner:bool)

returns (idLevel2_IsLowReservoir:int);


var 	idLevel2_IsLowReservoir_2:int;


let



	-- set state as inactive 
	idLevel2_IsLowReservoir_2
	 = if (not isInner) then 0 else idLevel2_IsLowReservoir_1;


	(idLevel2_IsLowReservoir) 
	= (idLevel2_IsLowReservoir_2);
	

tel






-- Entry action for state :IsDoor_Open_Yes
node IsDoor_Open_Yes_en(idLevel3_IsDoor_Open_1:int;
	isInner:bool)

returns (idLevel3_IsDoor_Open:int);


var 	idLevel3_IsDoor_Open_2:int;


let



	-- set state as active 
	idLevel3_IsDoor_Open_2 
	= 822;
	

	(idLevel3_IsDoor_Open) 
	= (idLevel3_IsDoor_Open_2);
	

tel





-- Exit action for state :IsDoor_Open_Yes
node IsDoor_Open_Yes_ex(idLevel3_IsDoor_Open_1:int;
	isInner:bool)

returns (idLevel3_IsDoor_Open:int);


var 	idLevel3_IsDoor_Open_2:int;


let



	-- set state as inactive 
	idLevel3_IsDoor_Open_2
	 = if (not isInner) then 0 else idLevel3_IsDoor_Open_1;


	(idLevel3_IsDoor_Open) 
	= (idLevel3_IsDoor_Open_2);
	

tel






-- Entry action for state :IsDoor_Open_No
node IsDoor_Open_No_en(idLevel3_IsDoor_Open_1:int;
	isInner:bool)

returns (idLevel3_IsDoor_Open:int);


var 	idLevel3_IsDoor_Open_2:int;


let



	-- set state as active 
	idLevel3_IsDoor_Open_2 
	= 821;
	

	(idLevel3_IsDoor_Open) 
	= (idLevel3_IsDoor_Open_2);
	

tel





-- Exit action for state :IsDoor_Open_No
node IsDoor_Open_No_ex(idLevel3_IsDoor_Open_1:int;
	isInner:bool)

returns (idLevel3_IsDoor_Open:int);


var 	idLevel3_IsDoor_Open_2:int;


let



	-- set state as inactive 
	idLevel3_IsDoor_Open_2
	 = if (not isInner) then 0 else idLevel3_IsDoor_Open_1;


	(idLevel3_IsDoor_Open) 
	= (idLevel3_IsDoor_Open_2);
	

tel






-- Entry action for state :IsOcclusion_No
node IsOcclusion_No_en(idLevel3_IsOcclusion_1:int;
	isInner:bool)

returns (idLevel3_IsOcclusion:int);


var 	idLevel3_IsOcclusion_2:int;


let



	-- set state as active 
	idLevel3_IsOcclusion_2 
	= 819;
	

	(idLevel3_IsOcclusion) 
	= (idLevel3_IsOcclusion_2);
	

tel





-- Exit action for state :IsOcclusion_No
node IsOcclusion_No_ex(idLevel3_IsOcclusion_1:int;
	isInner:bool)

returns (idLevel3_IsOcclusion:int);


var 	idLevel3_IsOcclusion_2:int;


let



	-- set state as inactive 
	idLevel3_IsOcclusion_2
	 = if (not isInner) then 0 else idLevel3_IsOcclusion_1;


	(idLevel3_IsOcclusion) 
	= (idLevel3_IsOcclusion_2);
	

tel






-- Entry action for state :IsOcclusion_Yes
node IsOcclusion_Yes_en(idLevel3_IsOcclusion_1:int;
	isInner:bool)

returns (idLevel3_IsOcclusion:int);


var 	idLevel3_IsOcclusion_2:int;


let



	-- set state as active 
	idLevel3_IsOcclusion_2 
	= 818;
	

	(idLevel3_IsOcclusion) 
	= (idLevel3_IsOcclusion_2);
	

tel





-- Exit action for state :IsOcclusion_Yes
node IsOcclusion_Yes_ex(idLevel3_IsOcclusion_1:int;
	isInner:bool)

returns (idLevel3_IsOcclusion:int);


var 	idLevel3_IsOcclusion_2:int;


let



	-- set state as inactive 
	idLevel3_IsOcclusion_2
	 = if (not isInner) then 0 else idLevel3_IsOcclusion_1;


	(idLevel3_IsOcclusion) 
	= (idLevel3_IsOcclusion_2);
	

tel






-- Entry action for state :IsAirInLine_No
node IsAirInLine_No_en(idLevel3_IsAirInLine_1:int;
	isInner:bool)

returns (idLevel3_IsAirInLine:int);


var 	idLevel3_IsAirInLine_2:int;


let



	-- set state as active 
	idLevel3_IsAirInLine_2 
	= 816;
	

	(idLevel3_IsAirInLine) 
	= (idLevel3_IsAirInLine_2);
	

tel





-- Exit action for state :IsAirInLine_No
node IsAirInLine_No_ex(idLevel3_IsAirInLine_1:int;
	isInner:bool)

returns (idLevel3_IsAirInLine:int);


var 	idLevel3_IsAirInLine_2:int;


let



	-- set state as inactive 
	idLevel3_IsAirInLine_2
	 = if (not isInner) then 0 else idLevel3_IsAirInLine_1;


	(idLevel3_IsAirInLine) 
	= (idLevel3_IsAirInLine_2);
	

tel






-- Entry action for state :IsAirInLine_Yes
node IsAirInLine_Yes_en(idLevel3_IsAirInLine_1:int;
	isInner:bool)

returns (idLevel3_IsAirInLine:int);


var 	idLevel3_IsAirInLine_2:int;


let



	-- set state as active 
	idLevel3_IsAirInLine_2 
	= 815;
	

	(idLevel3_IsAirInLine) 
	= (idLevel3_IsAirInLine_2);
	

tel





-- Exit action for state :IsAirInLine_Yes
node IsAirInLine_Yes_ex(idLevel3_IsAirInLine_1:int;
	isInner:bool)

returns (idLevel3_IsAirInLine:int);


var 	idLevel3_IsAirInLine_2:int;


let



	-- set state as inactive 
	idLevel3_IsAirInLine_2
	 = if (not isInner) then 0 else idLevel3_IsAirInLine_1;


	(idLevel3_IsAirInLine) 
	= (idLevel3_IsAirInLine_2);
	

tel






-- Entry action for state :IsOverInfusionVTBI_No
node IsOverInfusionVTBI_No_en(idLevel3_IsOverInfusionVTBI_1:int;
	isInner:bool)

returns (idLevel3_IsOverInfusionVTBI:int);


var 	idLevel3_IsOverInfusionVTBI_2:int;


let



	-- set state as active 
	idLevel3_IsOverInfusionVTBI_2 
	= 813;
	

	(idLevel3_IsOverInfusionVTBI) 
	= (idLevel3_IsOverInfusionVTBI_2);
	

tel





-- Exit action for state :IsOverInfusionVTBI_No
node IsOverInfusionVTBI_No_ex(idLevel3_IsOverInfusionVTBI_1:int;
	isInner:bool)

returns (idLevel3_IsOverInfusionVTBI:int);


var 	idLevel3_IsOverInfusionVTBI_2:int;


let



	-- set state as inactive 
	idLevel3_IsOverInfusionVTBI_2
	 = if (not isInner) then 0 else idLevel3_IsOverInfusionVTBI_1;


	(idLevel3_IsOverInfusionVTBI) 
	= (idLevel3_IsOverInfusionVTBI_2);
	

tel






-- Entry action for state :IsOverInfusionVTBI_Yes
node IsOverInfusionVTBI_Yes_en(idLevel3_IsOverInfusionVTBI_1:int;
	isInner:bool)

returns (idLevel3_IsOverInfusionVTBI:int);


var 	idLevel3_IsOverInfusionVTBI_2:int;


let



	-- set state as active 
	idLevel3_IsOverInfusionVTBI_2 
	= 812;
	

	(idLevel3_IsOverInfusionVTBI) 
	= (idLevel3_IsOverInfusionVTBI_2);
	

tel





-- Exit action for state :IsOverInfusionVTBI_Yes
node IsOverInfusionVTBI_Yes_ex(idLevel3_IsOverInfusionVTBI_1:int;
	isInner:bool)

returns (idLevel3_IsOverInfusionVTBI:int);


var 	idLevel3_IsOverInfusionVTBI_2:int;


let



	-- set state as inactive 
	idLevel3_IsOverInfusionVTBI_2
	 = if (not isInner) then 0 else idLevel3_IsOverInfusionVTBI_1;


	(idLevel3_IsOverInfusionVTBI) 
	= (idLevel3_IsOverInfusionVTBI_2);
	

tel






-- Entry action for state :IsOverInfusionFlowRate_Monitor
node IsOverInfusionFlowRate_Monitor_en(idLevel3_IsOverInfusionFlowRate_1:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_High:int;
	IM_IN_Flow_Rate_Commanded:int;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SYS_STAT_IN_In_Therapy:bool;
	overInfusion_1:int;
	isInner:bool)

returns (idLevel3_IsOverInfusionFlowRate:int;
	overInfusion:int);


var 	idLevel3_IsOverInfusionFlowRate_2:int;
	overInfusion_2:int;


let



	-- set state as active 
	idLevel3_IsOverInfusionFlowRate_2 
	= 809;
	

	(overInfusion_2) 
	= if (not isInner) then checkOverInfusionFlowRate(overInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min)
	 else (overInfusion_1);
	

	(idLevel3_IsOverInfusionFlowRate, overInfusion) 
	= (idLevel3_IsOverInfusionFlowRate_2, overInfusion_2);
	

tel





--During action for state :IsOverInfusionFlowRate_Monitor
node IsOverInfusionFlowRate_Monitor_du(overInfusion_1:int;
	SYS_STAT_IN_In_Therapy:bool;
	SENSOR_IN_Flow_Rate_Monitored:int;
	DB_IN_Flow_Rate_High:int;
	IM_IN_Flow_Rate_Commanded:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int)

returns (overInfusion:int);


var 	overInfusion_2:int;


let



	(overInfusion_2) 
	= checkOverInfusionFlowRate(overInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min);
	

	(overInfusion) 
	= (overInfusion_2);
	

tel





-- Exit action for state :IsOverInfusionFlowRate_Monitor
node IsOverInfusionFlowRate_Monitor_ex(overInfusion_1:int;
	SYS_STAT_IN_In_Therapy:bool;
	SENSOR_IN_Flow_Rate_Monitored:int;
	DB_IN_Flow_Rate_High:int;
	IM_IN_Flow_Rate_Commanded:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	idLevel3_IsOverInfusionFlowRate_1:int;
	isInner:bool)

returns (overInfusion:int;
	idLevel3_IsOverInfusionFlowRate:int);


var 	overInfusion_2:int;
	idLevel3_IsOverInfusionFlowRate_2:int;


let



	(overInfusion_2) 
	= if (not isInner) then checkOverInfusionFlowRate(overInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min)
	 else (overInfusion_1);
	

	-- set state as inactive 
	idLevel3_IsOverInfusionFlowRate_2
	 = if (not isInner) then 0 else idLevel3_IsOverInfusionFlowRate_1;


	(overInfusion, idLevel3_IsOverInfusionFlowRate) 
	= (overInfusion_2, idLevel3_IsOverInfusionFlowRate_2);
	

tel






-- Entry action for state :IsOverInfusionFlowRate_Check
node IsOverInfusionFlowRate_Check_en(idLevel3_IsOverInfusionFlowRate_1:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_High:int;
	IM_IN_Flow_Rate_Commanded:int;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SYS_STAT_IN_In_Therapy:bool;
	overInfusion_1:int;
	isInner:bool)

returns (idLevel3_IsOverInfusionFlowRate:int;
	overInfusion:int);


var 	idLevel3_IsOverInfusionFlowRate_2:int;
	overInfusion_2:int;


let



	-- set state as active 
	idLevel3_IsOverInfusionFlowRate_2 
	= 808;
	

	(overInfusion_2) 
	= if (not isInner) then checkOverInfusionFlowRate(overInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min)
	 else (overInfusion_1);
	

	(idLevel3_IsOverInfusionFlowRate, overInfusion) 
	= (idLevel3_IsOverInfusionFlowRate_2, overInfusion_2);
	

tel





--During action for state :IsOverInfusionFlowRate_Check
node IsOverInfusionFlowRate_Check_du(overInfusion_1:int;
	SYS_STAT_IN_In_Therapy:bool;
	SENSOR_IN_Flow_Rate_Monitored:int;
	DB_IN_Flow_Rate_High:int;
	IM_IN_Flow_Rate_Commanded:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int)

returns (overInfusion:int);


var 	overInfusion_2:int;


let



	(overInfusion_2) 
	= checkOverInfusionFlowRate(overInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min);
	

	(overInfusion) 
	= (overInfusion_2);
	

tel





-- Exit action for state :IsOverInfusionFlowRate_Check
node IsOverInfusionFlowRate_Check_ex(overInfusion_1:int;
	SYS_STAT_IN_In_Therapy:bool;
	SENSOR_IN_Flow_Rate_Monitored:int;
	DB_IN_Flow_Rate_High:int;
	IM_IN_Flow_Rate_Commanded:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	idLevel3_IsOverInfusionFlowRate_1:int;
	isInner:bool)

returns (overInfusion:int;
	idLevel3_IsOverInfusionFlowRate:int);


var 	overInfusion_2:int;
	idLevel3_IsOverInfusionFlowRate_2:int;


let



	(overInfusion_2) 
	= if (not isInner) then checkOverInfusionFlowRate(overInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min)
	 else (overInfusion_1);
	

	-- set state as inactive 
	idLevel3_IsOverInfusionFlowRate_2
	 = if (not isInner) then 0 else idLevel3_IsOverInfusionFlowRate_1;


	(overInfusion, idLevel3_IsOverInfusionFlowRate) 
	= (overInfusion_2, idLevel3_IsOverInfusionFlowRate_2);
	

tel






-- Entry action for state :IsOverInfusionFlowRate_Yes
node IsOverInfusionFlowRate_Yes_en(idLevel3_IsOverInfusionFlowRate_1:int;
	overInfusion_1:int;
	isInner:bool)

returns (idLevel3_IsOverInfusionFlowRate:int;
	overInfusion:int);


var 	idLevel3_IsOverInfusionFlowRate_2:int;
	overInfusion_2:int;


let



	-- set state as active 
	idLevel3_IsOverInfusionFlowRate_2 
	= 807;
	

	overInfusion_2 
	= if (not isInner) then 1
	 else overInfusion_1;
	

	(idLevel3_IsOverInfusionFlowRate, overInfusion) 
	= (idLevel3_IsOverInfusionFlowRate_2, overInfusion_2);
	

tel





--During action for state :IsOverInfusionFlowRate_Yes
node IsOverInfusionFlowRate_Yes_du(overInfusion_1:int)

returns (overInfusion:int);


var 	overInfusion_2:int;


let



	overInfusion_2 
	= 1;
	

	(overInfusion) 
	= (overInfusion_2);
	

tel





-- Exit action for state :IsOverInfusionFlowRate_Yes
node IsOverInfusionFlowRate_Yes_ex(idLevel3_IsOverInfusionFlowRate_1:int;
	isInner:bool)

returns (idLevel3_IsOverInfusionFlowRate:int);


var 	idLevel3_IsOverInfusionFlowRate_2:int;


let



	-- set state as inactive 
	idLevel3_IsOverInfusionFlowRate_2
	 = if (not isInner) then 0 else idLevel3_IsOverInfusionFlowRate_1;


	(idLevel3_IsOverInfusionFlowRate) 
	= (idLevel3_IsOverInfusionFlowRate_2);
	

tel






-- Entry action for state :IsEnviromentalError_No
node IsEnviromentalError_No_en(idLevel4_IsEnviromentalError_1:int;
	isInner:bool)

returns (idLevel4_IsEnviromentalError:int);


var 	idLevel4_IsEnviromentalError_2:int;


let



	-- set state as active 
	idLevel4_IsEnviromentalError_2 
	= 804;
	

	(idLevel4_IsEnviromentalError) 
	= (idLevel4_IsEnviromentalError_2);
	

tel





-- Exit action for state :IsEnviromentalError_No
node IsEnviromentalError_No_ex(idLevel4_IsEnviromentalError_1:int;
	isInner:bool)

returns (idLevel4_IsEnviromentalError:int);


var 	idLevel4_IsEnviromentalError_2:int;


let



	-- set state as inactive 
	idLevel4_IsEnviromentalError_2
	 = if (not isInner) then 0 else idLevel4_IsEnviromentalError_1;


	(idLevel4_IsEnviromentalError) 
	= (idLevel4_IsEnviromentalError_2);
	

tel






-- Entry action for state :IsEnviromentalError_Yes
node IsEnviromentalError_Yes_en(idLevel4_IsEnviromentalError_1:int;
	isInner:bool)

returns (idLevel4_IsEnviromentalError:int);


var 	idLevel4_IsEnviromentalError_2:int;


let



	-- set state as active 
	idLevel4_IsEnviromentalError_2 
	= 803;
	

	(idLevel4_IsEnviromentalError) 
	= (idLevel4_IsEnviromentalError_2);
	

tel





-- Exit action for state :IsEnviromentalError_Yes
node IsEnviromentalError_Yes_ex(idLevel4_IsEnviromentalError_1:int;
	isInner:bool)

returns (idLevel4_IsEnviromentalError:int);


var 	idLevel4_IsEnviromentalError_2:int;


let



	-- set state as inactive 
	idLevel4_IsEnviromentalError_2
	 = if (not isInner) then 0 else idLevel4_IsEnviromentalError_1;


	(idLevel4_IsEnviromentalError) 
	= (idLevel4_IsEnviromentalError_2);
	

tel






-- Entry action for state :IsHardwareError_No
node IsHardwareError_No_en(idLevel4_IsHardwareError_1:int;
	isInner:bool)

returns (idLevel4_IsHardwareError:int);


var 	idLevel4_IsHardwareError_2:int;


let



	-- set state as active 
	idLevel4_IsHardwareError_2 
	= 801;
	

	(idLevel4_IsHardwareError) 
	= (idLevel4_IsHardwareError_2);
	

tel





-- Exit action for state :IsHardwareError_No
node IsHardwareError_No_ex(idLevel4_IsHardwareError_1:int;
	isInner:bool)

returns (idLevel4_IsHardwareError:int);


var 	idLevel4_IsHardwareError_2:int;


let



	-- set state as inactive 
	idLevel4_IsHardwareError_2
	 = if (not isInner) then 0 else idLevel4_IsHardwareError_1;


	(idLevel4_IsHardwareError) 
	= (idLevel4_IsHardwareError_2);
	

tel






-- Entry action for state :IsHardwareError_Yes
node IsHardwareError_Yes_en(idLevel4_IsHardwareError_1:int;
	isInner:bool)

returns (idLevel4_IsHardwareError:int);


var 	idLevel4_IsHardwareError_2:int;


let



	-- set state as active 
	idLevel4_IsHardwareError_2 
	= 800;
	

	(idLevel4_IsHardwareError) 
	= (idLevel4_IsHardwareError_2);
	

tel





-- Exit action for state :IsHardwareError_Yes
node IsHardwareError_Yes_ex(idLevel4_IsHardwareError_1:int;
	isInner:bool)

returns (idLevel4_IsHardwareError:int);


var 	idLevel4_IsHardwareError_2:int;


let



	-- set state as inactive 
	idLevel4_IsHardwareError_2
	 = if (not isInner) then 0 else idLevel4_IsHardwareError_1;


	(idLevel4_IsHardwareError) 
	= (idLevel4_IsHardwareError_2);
	

tel






-- Entry action for state :IsEmptyReservoir_Yes
node IsEmptyReservoir_Yes_en(idLevel4_IsEmptyReservoir_1:int;
	isInner:bool)

returns (idLevel4_IsEmptyReservoir:int);


var 	idLevel4_IsEmptyReservoir_2:int;


let



	-- set state as active 
	idLevel4_IsEmptyReservoir_2 
	= 798;
	

	(idLevel4_IsEmptyReservoir) 
	= (idLevel4_IsEmptyReservoir_2);
	

tel





-- Exit action for state :IsEmptyReservoir_Yes
node IsEmptyReservoir_Yes_ex(idLevel4_IsEmptyReservoir_1:int;
	isInner:bool)

returns (idLevel4_IsEmptyReservoir:int);


var 	idLevel4_IsEmptyReservoir_2:int;


let



	-- set state as inactive 
	idLevel4_IsEmptyReservoir_2
	 = if (not isInner) then 0 else idLevel4_IsEmptyReservoir_1;


	(idLevel4_IsEmptyReservoir) 
	= (idLevel4_IsEmptyReservoir_2);
	

tel






-- Entry action for state :IsEmptyReservoir_No
node IsEmptyReservoir_No_en(idLevel4_IsEmptyReservoir_1:int;
	isInner:bool)

returns (idLevel4_IsEmptyReservoir:int);


var 	idLevel4_IsEmptyReservoir_2:int;


let



	-- set state as active 
	idLevel4_IsEmptyReservoir_2 
	= 797;
	

	(idLevel4_IsEmptyReservoir) 
	= (idLevel4_IsEmptyReservoir_2);
	

tel





-- Exit action for state :IsEmptyReservoir_No
node IsEmptyReservoir_No_ex(idLevel4_IsEmptyReservoir_1:int;
	isInner:bool)

returns (idLevel4_IsEmptyReservoir:int);


var 	idLevel4_IsEmptyReservoir_2:int;


let



	-- set state as inactive 
	idLevel4_IsEmptyReservoir_2
	 = if (not isInner) then 0 else idLevel4_IsEmptyReservoir_1;


	(idLevel4_IsEmptyReservoir) 
	= (idLevel4_IsEmptyReservoir_2);
	

tel






-- Entry action for state :Audio_Disabled
node Audio_Disabled_en(idNotification_Audio_1:int;
	ALARM_OUT_Audio_Notification_Command_1:int;
	isInner:bool)

returns (idNotification_Audio:int;
	ALARM_OUT_Audio_Notification_Command:int);


var 	idNotification_Audio_2:int;
	ALARM_OUT_Audio_Notification_Command_2:int;


let



	-- set state as active 
	idNotification_Audio_2 
	= 869;
	

	ALARM_OUT_Audio_Notification_Command_2 
	= if (not isInner) then 0
	 else ALARM_OUT_Audio_Notification_Command_1;
	

	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command) 
	= (idNotification_Audio_2, ALARM_OUT_Audio_Notification_Command_2);
	

tel





--During action for state :Audio_Disabled
node Audio_Disabled_du(ALARM_OUT_Audio_Notification_Command_1:int)

returns (ALARM_OUT_Audio_Notification_Command:int);


var 	ALARM_OUT_Audio_Notification_Command_2:int;


let



	ALARM_OUT_Audio_Notification_Command_2 
	= 0;
	

	(ALARM_OUT_Audio_Notification_Command) 
	= (ALARM_OUT_Audio_Notification_Command_2);
	

tel





-- Exit action for state :Audio_Disabled
node Audio_Disabled_ex(ALARM_OUT_Audio_Notification_Command_1:int;
	idNotification_Audio_1:int;
	isInner:bool)

returns (ALARM_OUT_Audio_Notification_Command:int;
	idNotification_Audio:int);


var 	ALARM_OUT_Audio_Notification_Command_2:int;
	idNotification_Audio_2:int;


let



	ALARM_OUT_Audio_Notification_Command_2 
	= if (not isInner) then 0
	 else ALARM_OUT_Audio_Notification_Command_1;
	

	-- set state as inactive 
	idNotification_Audio_2
	 = if (not isInner) then 0 else idNotification_Audio_1;


	(ALARM_OUT_Audio_Notification_Command, idNotification_Audio) 
	= (ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2);
	

tel






-- Entry action for state :Audio_Silenced
node Audio_Silenced_en(idNotification_Audio_1:int;
	audioTimer_1:int;
	ALARM_OUT_Audio_Notification_Command_1:int;
	isInner:bool)

returns (idNotification_Audio:int;
	audioTimer:int;
	ALARM_OUT_Audio_Notification_Command:int);


var 	idNotification_Audio_2:int;
	audioTimer_2, audioTimer_3:int;
	ALARM_OUT_Audio_Notification_Command_2:int;


let



	-- set state as active 
	idNotification_Audio_2 
	= 868;
	

	audioTimer_2 
	= if (not isInner) then 0
	 else audioTimer_1;
	

	ALARM_OUT_Audio_Notification_Command_2 
	= if (not isInner) then 0
	 else ALARM_OUT_Audio_Notification_Command_1;
	

	audioTimer_3 
	= if (not isInner) then  audioTimer_2  + 1
	 else audioTimer_2;
	

	(idNotification_Audio, audioTimer, ALARM_OUT_Audio_Notification_Command) 
	= (idNotification_Audio_2, audioTimer_3, ALARM_OUT_Audio_Notification_Command_2);
	

tel





-- Exit action for state :Audio_Silenced
node Audio_Silenced_ex(ALARM_OUT_Audio_Notification_Command_1:int;
	idNotification_Audio_1:int;
	isInner:bool)

returns (ALARM_OUT_Audio_Notification_Command:int;
	idNotification_Audio:int);


var 	ALARM_OUT_Audio_Notification_Command_2:int;
	idNotification_Audio_2:int;


let



	ALARM_OUT_Audio_Notification_Command_2 
	= if (not isInner) then 0
	 else ALARM_OUT_Audio_Notification_Command_1;
	

	-- set state as inactive 
	idNotification_Audio_2
	 = if (not isInner) then 0 else idNotification_Audio_1;


	(ALARM_OUT_Audio_Notification_Command, idNotification_Audio) 
	= (ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2);
	

tel





--During action for state :Audio_Silenced
node Audio_Silenced_du(audioTimer_1:int;
	ALARM_OUT_Audio_Notification_Command_1:int)

returns (audioTimer:int;
	ALARM_OUT_Audio_Notification_Command:int);


var 	audioTimer_2:int;
	ALARM_OUT_Audio_Notification_Command_2:int;


let



	audioTimer_2 
	=  audioTimer_1  + 1;
	

	ALARM_OUT_Audio_Notification_Command_2 
	= 0;
	

	(audioTimer, ALARM_OUT_Audio_Notification_Command) 
	= (audioTimer_2, ALARM_OUT_Audio_Notification_Command_2);
	

tel






-- Entry action for state :Audio_OFF
node Audio_OFF_en(idNotification_Audio_1:int;
	ALARM_OUT_Audio_Notification_Command_1:int;
	isInner:bool)

returns (idNotification_Audio:int;
	ALARM_OUT_Audio_Notification_Command:int);


var 	idNotification_Audio_2:int;
	ALARM_OUT_Audio_Notification_Command_2:int;


let



	-- set state as active 
	idNotification_Audio_2 
	= 867;
	

	ALARM_OUT_Audio_Notification_Command_2 
	= if (not isInner) then 0
	 else ALARM_OUT_Audio_Notification_Command_1;
	

	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command) 
	= (idNotification_Audio_2, ALARM_OUT_Audio_Notification_Command_2);
	

tel





--During action for state :Audio_OFF
node Audio_OFF_du(ALARM_OUT_Audio_Notification_Command_1:int)

returns (ALARM_OUT_Audio_Notification_Command:int);


var 	ALARM_OUT_Audio_Notification_Command_2:int;


let



	ALARM_OUT_Audio_Notification_Command_2 
	= 0;
	

	(ALARM_OUT_Audio_Notification_Command) 
	= (ALARM_OUT_Audio_Notification_Command_2);
	

tel





-- Exit action for state :Audio_OFF
node Audio_OFF_ex(ALARM_OUT_Audio_Notification_Command_1:int;
	idNotification_Audio_1:int;
	isInner:bool)

returns (ALARM_OUT_Audio_Notification_Command:int;
	idNotification_Audio:int);


var 	ALARM_OUT_Audio_Notification_Command_2:int;
	idNotification_Audio_2:int;


let



	ALARM_OUT_Audio_Notification_Command_2 
	= if (not isInner) then 0
	 else ALARM_OUT_Audio_Notification_Command_1;
	

	-- set state as inactive 
	idNotification_Audio_2
	 = if (not isInner) then 0 else idNotification_Audio_1;


	(ALARM_OUT_Audio_Notification_Command, idNotification_Audio) 
	= (ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2);
	

tel






-- Entry action for state :Audio_ON
node Audio_ON_en(idNotification_Audio_1:int;
	CONST_IN_Audio_Level:int;
	ALARM_OUT_Audio_Notification_Command_1:int;
	isInner:bool)

returns (idNotification_Audio:int;
	ALARM_OUT_Audio_Notification_Command:int);


var 	idNotification_Audio_2:int;
	ALARM_OUT_Audio_Notification_Command_2:int;


let



	-- set state as active 
	idNotification_Audio_2 
	= 866;
	

	ALARM_OUT_Audio_Notification_Command_2 
	= if (not isInner) then CONST_IN_Audio_Level
	 else ALARM_OUT_Audio_Notification_Command_1;
	

	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command) 
	= (idNotification_Audio_2, ALARM_OUT_Audio_Notification_Command_2);
	

tel





--During action for state :Audio_ON
node Audio_ON_du(CONST_IN_Audio_Level:int;
	ALARM_OUT_Audio_Notification_Command_1:int)

returns (ALARM_OUT_Audio_Notification_Command:int);


var 	ALARM_OUT_Audio_Notification_Command_2:int;


let



	ALARM_OUT_Audio_Notification_Command_2 
	= CONST_IN_Audio_Level;
	

	(ALARM_OUT_Audio_Notification_Command) 
	= (ALARM_OUT_Audio_Notification_Command_2);
	

tel





-- Exit action for state :Audio_ON
node Audio_ON_ex(CONST_IN_Audio_Level:int;
	ALARM_OUT_Audio_Notification_Command_1:int;
	idNotification_Audio_1:int;
	isInner:bool)

returns (ALARM_OUT_Audio_Notification_Command:int;
	idNotification_Audio:int);


var 	ALARM_OUT_Audio_Notification_Command_2:int;
	idNotification_Audio_2:int;


let



	ALARM_OUT_Audio_Notification_Command_2 
	= if (not isInner) then CONST_IN_Audio_Level
	 else ALARM_OUT_Audio_Notification_Command_1;
	

	-- set state as inactive 
	idNotification_Audio_2
	 = if (not isInner) then 0 else idNotification_Audio_1;


	(ALARM_OUT_Audio_Notification_Command, idNotification_Audio) 
	= (ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2);
	

tel






-- Entry action for state :Visual_AlarmDisplay
node Visual_AlarmDisplay_en(idNotification_Visual_1:int;
	currentAlarm_1:int;
	ALARM_OUT_Visual_Notification_Message_1:int;
	isInner:bool)

returns (idNotification_Visual:int;
	currentAlarm:int;
	ALARM_OUT_Visual_Notification_Message:int);


var 	idNotification_Visual_2:int;
	ALARM_OUT_Visual_Notification_Message_2:int;


let



	-- set state as active 
	idNotification_Visual_2 
	= 864;
	

	ALARM_OUT_Visual_Notification_Message_2 
	= if (not isInner) then  currentAlarm_1 
	 else ALARM_OUT_Visual_Notification_Message_1;
	

	(idNotification_Visual, currentAlarm, ALARM_OUT_Visual_Notification_Message) 
	= (idNotification_Visual_2, currentAlarm_1, ALARM_OUT_Visual_Notification_Message_2);
	

tel





--During action for state :Visual_AlarmDisplay
node Visual_AlarmDisplay_du(currentAlarm_1:int;
	ALARM_OUT_Visual_Notification_Message_1:int)

returns (currentAlarm:int;
	ALARM_OUT_Visual_Notification_Message:int);


var 	ALARM_OUT_Visual_Notification_Message_2:int;


let



	ALARM_OUT_Visual_Notification_Message_2 
	=  currentAlarm_1 ;
	

	(currentAlarm, ALARM_OUT_Visual_Notification_Message) 
	= (currentAlarm_1, ALARM_OUT_Visual_Notification_Message_2);
	

tel





-- Exit action for state :Visual_AlarmDisplay
node Visual_AlarmDisplay_ex(currentAlarm_1:int;
	ALARM_OUT_Visual_Notification_Message_1:int;
	idNotification_Visual_1:int;
	isInner:bool)

returns (currentAlarm:int;
	ALARM_OUT_Visual_Notification_Message:int;
	idNotification_Visual:int);


var 	ALARM_OUT_Visual_Notification_Message_2:int;
	idNotification_Visual_2:int;


let



	ALARM_OUT_Visual_Notification_Message_2 
	= if (not isInner) then  currentAlarm_1 
	 else ALARM_OUT_Visual_Notification_Message_1;
	

	-- set state as inactive 
	idNotification_Visual_2
	 = if (not isInner) then 0 else idNotification_Visual_1;


	(currentAlarm, ALARM_OUT_Visual_Notification_Message, idNotification_Visual) 
	= (currentAlarm_1, ALARM_OUT_Visual_Notification_Message_2, idNotification_Visual_2);
	

tel






-- Entry action for state :Visual_OFF
node Visual_OFF_en(idNotification_Visual_1:int;
	ALARM_OUT_Visual_Notification_Message_1:int;
	previousAlarm_1:int;
	isInner:bool)

returns (idNotification_Visual:int;
	ALARM_OUT_Visual_Notification_Message:int;
	previousAlarm:int);


var 	idNotification_Visual_2:int;
	ALARM_OUT_Visual_Notification_Message_2:int;
	previousAlarm_2:int;


let



	-- set state as active 
	idNotification_Visual_2 
	= 863;
	

	ALARM_OUT_Visual_Notification_Message_2 
	= if (not isInner) then 0
	 else ALARM_OUT_Visual_Notification_Message_1;
	

	previousAlarm_2 
	= if (not isInner) then 0
	 else previousAlarm_1;
	

	(idNotification_Visual, ALARM_OUT_Visual_Notification_Message, previousAlarm) 
	= (idNotification_Visual_2, ALARM_OUT_Visual_Notification_Message_2, previousAlarm_2);
	

tel





-- Exit action for state :Visual_OFF
node Visual_OFF_ex(idNotification_Visual_1:int;
	isInner:bool)

returns (idNotification_Visual:int);


var 	idNotification_Visual_2:int;


let



	-- set state as inactive 
	idNotification_Visual_2
	 = if (not isInner) then 0 else idNotification_Visual_1;


	(idNotification_Visual) 
	= (idNotification_Visual_2);
	

tel






-- Entry action for state :Level1_IsSystemMonitorFailed
node Level1_IsSystemMonitorFailed_en(idLevel1_IsSystemMonitorFailed_1:int;
	idCheckAlarm_Level1_1:int;
	SYS_MON_IN_System_Monitor_Failed:bool;
	isInner:bool)

returns (idLevel1_IsSystemMonitorFailed:int;
	idCheckAlarm_Level1:int);


var 	idLevel1_IsSystemMonitorFailed_2, idLevel1_IsSystemMonitorFailed_3, idLevel1_IsSystemMonitorFailed_4, idLevel1_IsSystemMonitorFailed_5, idLevel1_IsSystemMonitorFailed_6, idLevel1_IsSystemMonitorFailed_7:int;
	idCheckAlarm_Level1_2, idCheckAlarm_Level1_3, idCheckAlarm_Level1_4:int;


let



	-- set state as active 
	idCheckAlarm_Level1_2 
	= 857;
	

	
-- transition trace :
	--POINT__To__IsSystemMonitorFailed_Yes_1
		(idLevel1_IsSystemMonitorFailed_2) 
	= 
		 if (( SYS_MON_IN_System_Monitor_Failed )) then 
		IsSystemMonitorFailed_Yes_en(idLevel1_IsSystemMonitorFailed_1, false)
		 else (idLevel1_IsSystemMonitorFailed_1);
		

-- transition trace :
	--POINT__To__IsSystemMonitorFailed_No_2
		(idLevel1_IsSystemMonitorFailed_3) 
	= IsSystemMonitorFailed_No_en(idLevel1_IsSystemMonitorFailed_2, false);
		

	(idLevel1_IsSystemMonitorFailed_4, idCheckAlarm_Level1_3) 
	= 

	if ( idLevel1_IsSystemMonitorFailed_1 = 0) then

	
		 if (( SYS_MON_IN_System_Monitor_Failed )) then 
		(idLevel1_IsSystemMonitorFailed_2, idCheckAlarm_Level1_2)
		 else (idLevel1_IsSystemMonitorFailed_3, idCheckAlarm_Level1_2)

	 else(idLevel1_IsSystemMonitorFailed_1, idCheckAlarm_Level1_2);

	

	(idLevel1_IsSystemMonitorFailed_5) 
	= 
	if ( idLevel1_IsSystemMonitorFailed_1 = 858) then
	IsSystemMonitorFailed_Yes_en(idLevel1_IsSystemMonitorFailed_1, false)
	 else (idLevel1_IsSystemMonitorFailed_1);

	

	(idLevel1_IsSystemMonitorFailed_6) 
	= 
	if ( idLevel1_IsSystemMonitorFailed_1 = 859) then
	IsSystemMonitorFailed_No_en(idLevel1_IsSystemMonitorFailed_1, false)
	 else (idLevel1_IsSystemMonitorFailed_1);

	

	(idLevel1_IsSystemMonitorFailed_7, idCheckAlarm_Level1_4) 
	= 
		 if ( idLevel1_IsSystemMonitorFailed_1 = 0) then 
		(idLevel1_IsSystemMonitorFailed_4, idCheckAlarm_Level1_3)
		 else
		 if ( idLevel1_IsSystemMonitorFailed_1 = 858) then 
		(idLevel1_IsSystemMonitorFailed_5, idCheckAlarm_Level1_3)
		 else
		 if ( idLevel1_IsSystemMonitorFailed_1 = 859) then 
		(idLevel1_IsSystemMonitorFailed_6, idCheckAlarm_Level1_3)
		 else (idLevel1_IsSystemMonitorFailed_1, idCheckAlarm_Level1_2);


	(idLevel1_IsSystemMonitorFailed, idCheckAlarm_Level1) 
	= (idLevel1_IsSystemMonitorFailed_7, idCheckAlarm_Level1_4);
	

tel





-- Exit action for state :Level1_IsSystemMonitorFailed
node Level1_IsSystemMonitorFailed_ex(idLevel1_IsSystemMonitorFailed_1:int;
	idCheckAlarm_Level1_1:int;
	isInner:bool)

returns (idLevel1_IsSystemMonitorFailed:int;
	idCheckAlarm_Level1:int);


var 	idLevel1_IsSystemMonitorFailed_2, idLevel1_IsSystemMonitorFailed_3, idLevel1_IsSystemMonitorFailed_4, idLevel1_IsSystemMonitorFailed_5:int;
	idCheckAlarm_Level1_2:int;


let



	
	(idLevel1_IsSystemMonitorFailed_2) 
	= 
	if ( idLevel1_IsSystemMonitorFailed_1 = 858) then
	IsSystemMonitorFailed_Yes_ex(idLevel1_IsSystemMonitorFailed_1, false)
	 else (idLevel1_IsSystemMonitorFailed_1);

	

	(idLevel1_IsSystemMonitorFailed_3) 
	= 
	if ( idLevel1_IsSystemMonitorFailed_1 = 859) then
	IsSystemMonitorFailed_No_ex(idLevel1_IsSystemMonitorFailed_1, false)
	 else (idLevel1_IsSystemMonitorFailed_1);

	

	(idLevel1_IsSystemMonitorFailed_4) 
	= 
		 if ( idLevel1_IsSystemMonitorFailed_1 = 858) then 
		(idLevel1_IsSystemMonitorFailed_2)
		 else
		 if ( idLevel1_IsSystemMonitorFailed_1 = 859) then 
		(idLevel1_IsSystemMonitorFailed_3)
		 else (idLevel1_IsSystemMonitorFailed_1);


	-- set state as inactive 
	idCheckAlarm_Level1_2
	 = if (not isInner) then 0 else idCheckAlarm_Level1_1;

	idLevel1_IsSystemMonitorFailed_5 
	= 0;
	

	(idLevel1_IsSystemMonitorFailed, idCheckAlarm_Level1) 
	= (idLevel1_IsSystemMonitorFailed_5, idCheckAlarm_Level1_2);
	

tel






-- Entry action for state :Level1_IsLoggingFailed
node Level1_IsLoggingFailed_en(idLevel1_IsLoggingFailed_1:int;
	idCheckAlarm_Level1_1:int;
	LOGGING_IN_Logging_Failed:bool;
	isInner:bool)

returns (idLevel1_IsLoggingFailed:int;
	idCheckAlarm_Level1:int);


var 	idLevel1_IsLoggingFailed_2, idLevel1_IsLoggingFailed_3, idLevel1_IsLoggingFailed_4, idLevel1_IsLoggingFailed_5, idLevel1_IsLoggingFailed_6, idLevel1_IsLoggingFailed_7:int;
	idCheckAlarm_Level1_2, idCheckAlarm_Level1_3, idCheckAlarm_Level1_4:int;


let



	-- set state as active 
	idCheckAlarm_Level1_2 
	= 854;
	

	
-- transition trace :
	--POINT__To__IsLoggingFailed_Yes_1
		(idLevel1_IsLoggingFailed_2) 
	= 
		 if (( LOGGING_IN_Logging_Failed )) then 
		IsLoggingFailed_Yes_en(idLevel1_IsLoggingFailed_1, false)
		 else (idLevel1_IsLoggingFailed_1);
		

-- transition trace :
	--POINT__To__IsLoggingFailed_No_2
		(idLevel1_IsLoggingFailed_3) 
	= IsLoggingFailed_No_en(idLevel1_IsLoggingFailed_2, false);
		

	(idLevel1_IsLoggingFailed_4, idCheckAlarm_Level1_3) 
	= 

	if ( idLevel1_IsLoggingFailed_1 = 0) then

	
		 if (( LOGGING_IN_Logging_Failed )) then 
		(idLevel1_IsLoggingFailed_2, idCheckAlarm_Level1_2)
		 else (idLevel1_IsLoggingFailed_3, idCheckAlarm_Level1_2)

	 else(idLevel1_IsLoggingFailed_1, idCheckAlarm_Level1_2);

	

	(idLevel1_IsLoggingFailed_5) 
	= 
	if ( idLevel1_IsLoggingFailed_1 = 855) then
	IsLoggingFailed_Yes_en(idLevel1_IsLoggingFailed_1, false)
	 else (idLevel1_IsLoggingFailed_1);

	

	(idLevel1_IsLoggingFailed_6) 
	= 
	if ( idLevel1_IsLoggingFailed_1 = 856) then
	IsLoggingFailed_No_en(idLevel1_IsLoggingFailed_1, false)
	 else (idLevel1_IsLoggingFailed_1);

	

	(idLevel1_IsLoggingFailed_7, idCheckAlarm_Level1_4) 
	= 
		 if ( idLevel1_IsLoggingFailed_1 = 0) then 
		(idLevel1_IsLoggingFailed_4, idCheckAlarm_Level1_3)
		 else
		 if ( idLevel1_IsLoggingFailed_1 = 855) then 
		(idLevel1_IsLoggingFailed_5, idCheckAlarm_Level1_3)
		 else
		 if ( idLevel1_IsLoggingFailed_1 = 856) then 
		(idLevel1_IsLoggingFailed_6, idCheckAlarm_Level1_3)
		 else (idLevel1_IsLoggingFailed_1, idCheckAlarm_Level1_2);


	(idLevel1_IsLoggingFailed, idCheckAlarm_Level1) 
	= (idLevel1_IsLoggingFailed_7, idCheckAlarm_Level1_4);
	

tel





-- Exit action for state :Level1_IsLoggingFailed
node Level1_IsLoggingFailed_ex(idLevel1_IsLoggingFailed_1:int;
	idCheckAlarm_Level1_1:int;
	isInner:bool)

returns (idLevel1_IsLoggingFailed:int;
	idCheckAlarm_Level1:int);


var 	idLevel1_IsLoggingFailed_2, idLevel1_IsLoggingFailed_3, idLevel1_IsLoggingFailed_4, idLevel1_IsLoggingFailed_5:int;
	idCheckAlarm_Level1_2:int;


let



	
	(idLevel1_IsLoggingFailed_2) 
	= 
	if ( idLevel1_IsLoggingFailed_1 = 855) then
	IsLoggingFailed_Yes_ex(idLevel1_IsLoggingFailed_1, false)
	 else (idLevel1_IsLoggingFailed_1);

	

	(idLevel1_IsLoggingFailed_3) 
	= 
	if ( idLevel1_IsLoggingFailed_1 = 856) then
	IsLoggingFailed_No_ex(idLevel1_IsLoggingFailed_1, false)
	 else (idLevel1_IsLoggingFailed_1);

	

	(idLevel1_IsLoggingFailed_4) 
	= 
		 if ( idLevel1_IsLoggingFailed_1 = 855) then 
		(idLevel1_IsLoggingFailed_2)
		 else
		 if ( idLevel1_IsLoggingFailed_1 = 856) then 
		(idLevel1_IsLoggingFailed_3)
		 else (idLevel1_IsLoggingFailed_1);


	-- set state as inactive 
	idCheckAlarm_Level1_2
	 = if (not isInner) then 0 else idCheckAlarm_Level1_1;

	idLevel1_IsLoggingFailed_5 
	= 0;
	

	(idLevel1_IsLoggingFailed, idCheckAlarm_Level1) 
	= (idLevel1_IsLoggingFailed_5, idCheckAlarm_Level1_2);
	

tel






-- Entry action for state :Level1_IsPumpHot
node Level1_IsPumpHot_en(idLevel1_IsPumpHot_1:int;
	idCheckAlarm_Level1_1:int;
	SENSOR_IN_Pump_Overheated:bool;
	isInner:bool)

returns (idLevel1_IsPumpHot:int;
	idCheckAlarm_Level1:int);


var 	idLevel1_IsPumpHot_2, idLevel1_IsPumpHot_3, idLevel1_IsPumpHot_4, idLevel1_IsPumpHot_5, idLevel1_IsPumpHot_6, idLevel1_IsPumpHot_7:int;
	idCheckAlarm_Level1_2, idCheckAlarm_Level1_3, idCheckAlarm_Level1_4:int;


let



	-- set state as active 
	idCheckAlarm_Level1_2 
	= 851;
	

	
-- transition trace :
	--POINT__To__IsPumpHot_Yes_1
		(idLevel1_IsPumpHot_2) 
	= 
		 if (( SENSOR_IN_Pump_Overheated )) then 
		IsPumpHot_Yes_en(idLevel1_IsPumpHot_1, false)
		 else (idLevel1_IsPumpHot_1);
		

-- transition trace :
	--POINT__To__IsPumpHot_No_2
		(idLevel1_IsPumpHot_3) 
	= IsPumpHot_No_en(idLevel1_IsPumpHot_2, false);
		

	(idLevel1_IsPumpHot_4, idCheckAlarm_Level1_3) 
	= 

	if ( idLevel1_IsPumpHot_1 = 0) then

	
		 if (( SENSOR_IN_Pump_Overheated )) then 
		(idLevel1_IsPumpHot_2, idCheckAlarm_Level1_2)
		 else (idLevel1_IsPumpHot_3, idCheckAlarm_Level1_2)

	 else(idLevel1_IsPumpHot_1, idCheckAlarm_Level1_2);

	

	(idLevel1_IsPumpHot_5) 
	= 
	if ( idLevel1_IsPumpHot_1 = 852) then
	IsPumpHot_Yes_en(idLevel1_IsPumpHot_1, false)
	 else (idLevel1_IsPumpHot_1);

	

	(idLevel1_IsPumpHot_6) 
	= 
	if ( idLevel1_IsPumpHot_1 = 853) then
	IsPumpHot_No_en(idLevel1_IsPumpHot_1, false)
	 else (idLevel1_IsPumpHot_1);

	

	(idLevel1_IsPumpHot_7, idCheckAlarm_Level1_4) 
	= 
		 if ( idLevel1_IsPumpHot_1 = 0) then 
		(idLevel1_IsPumpHot_4, idCheckAlarm_Level1_3)
		 else
		 if ( idLevel1_IsPumpHot_1 = 852) then 
		(idLevel1_IsPumpHot_5, idCheckAlarm_Level1_3)
		 else
		 if ( idLevel1_IsPumpHot_1 = 853) then 
		(idLevel1_IsPumpHot_6, idCheckAlarm_Level1_3)
		 else (idLevel1_IsPumpHot_1, idCheckAlarm_Level1_2);


	(idLevel1_IsPumpHot, idCheckAlarm_Level1) 
	= (idLevel1_IsPumpHot_7, idCheckAlarm_Level1_4);
	

tel





-- Exit action for state :Level1_IsPumpHot
node Level1_IsPumpHot_ex(idLevel1_IsPumpHot_1:int;
	idCheckAlarm_Level1_1:int;
	isInner:bool)

returns (idLevel1_IsPumpHot:int;
	idCheckAlarm_Level1:int);


var 	idLevel1_IsPumpHot_2, idLevel1_IsPumpHot_3, idLevel1_IsPumpHot_4, idLevel1_IsPumpHot_5:int;
	idCheckAlarm_Level1_2:int;


let



	
	(idLevel1_IsPumpHot_2) 
	= 
	if ( idLevel1_IsPumpHot_1 = 852) then
	IsPumpHot_Yes_ex(idLevel1_IsPumpHot_1, false)
	 else (idLevel1_IsPumpHot_1);

	

	(idLevel1_IsPumpHot_3) 
	= 
	if ( idLevel1_IsPumpHot_1 = 853) then
	IsPumpHot_No_ex(idLevel1_IsPumpHot_1, false)
	 else (idLevel1_IsPumpHot_1);

	

	(idLevel1_IsPumpHot_4) 
	= 
		 if ( idLevel1_IsPumpHot_1 = 852) then 
		(idLevel1_IsPumpHot_2)
		 else
		 if ( idLevel1_IsPumpHot_1 = 853) then 
		(idLevel1_IsPumpHot_3)
		 else (idLevel1_IsPumpHot_1);


	-- set state as inactive 
	idCheckAlarm_Level1_2
	 = if (not isInner) then 0 else idCheckAlarm_Level1_1;

	idLevel1_IsPumpHot_5 
	= 0;
	

	(idLevel1_IsPumpHot, idCheckAlarm_Level1) 
	= (idLevel1_IsPumpHot_5, idCheckAlarm_Level1_2);
	

tel






-- Entry action for state :Level1_IsBatteryError
node Level1_IsBatteryError_en(idLevel1_IsBatteryError_1:int;
	idCheckAlarm_Level1_1:int;
	SENSOR_IN_Battery_Low:bool;
	SENSOR_IN_Battery_Unable_To_Charge:bool;
	SENSOR_IN_Supply_Voltage_Out_Of_Range:bool;
	isInner:bool)

returns (idLevel1_IsBatteryError:int;
	idCheckAlarm_Level1:int);


var 	idLevel1_IsBatteryError_2, idLevel1_IsBatteryError_3, idLevel1_IsBatteryError_4, idLevel1_IsBatteryError_5, idLevel1_IsBatteryError_6, idLevel1_IsBatteryError_7:int;
	idCheckAlarm_Level1_2, idCheckAlarm_Level1_3, idCheckAlarm_Level1_4:int;


let



	-- set state as active 
	idCheckAlarm_Level1_2 
	= 848;
	

	
-- transition trace :
	--POINT__To__IsBatteryError_Yes_1
		(idLevel1_IsBatteryError_2) 
	= 
		 if (( SENSOR_IN_Battery_Low or SENSOR_IN_Battery_Unable_To_Charge or SENSOR_IN_Supply_Voltage_Out_Of_Range )) then 
		IsBatteryError_Yes_en(idLevel1_IsBatteryError_1, false)
		 else (idLevel1_IsBatteryError_1);
		

-- transition trace :
	--POINT__To__IsBatteryError_No_2
		(idLevel1_IsBatteryError_3) 
	= IsBatteryError_No_en(idLevel1_IsBatteryError_2, false);
		

	(idLevel1_IsBatteryError_4, idCheckAlarm_Level1_3) 
	= 

	if ( idLevel1_IsBatteryError_1 = 0) then

	
		 if (( SENSOR_IN_Battery_Low or SENSOR_IN_Battery_Unable_To_Charge or SENSOR_IN_Supply_Voltage_Out_Of_Range )) then 
		(idLevel1_IsBatteryError_2, idCheckAlarm_Level1_2)
		 else (idLevel1_IsBatteryError_3, idCheckAlarm_Level1_2)

	 else(idLevel1_IsBatteryError_1, idCheckAlarm_Level1_2);

	

	(idLevel1_IsBatteryError_5) 
	= 
	if ( idLevel1_IsBatteryError_1 = 849) then
	IsBatteryError_Yes_en(idLevel1_IsBatteryError_1, false)
	 else (idLevel1_IsBatteryError_1);

	

	(idLevel1_IsBatteryError_6) 
	= 
	if ( idLevel1_IsBatteryError_1 = 850) then
	IsBatteryError_No_en(idLevel1_IsBatteryError_1, false)
	 else (idLevel1_IsBatteryError_1);

	

	(idLevel1_IsBatteryError_7, idCheckAlarm_Level1_4) 
	= 
		 if ( idLevel1_IsBatteryError_1 = 0) then 
		(idLevel1_IsBatteryError_4, idCheckAlarm_Level1_3)
		 else
		 if ( idLevel1_IsBatteryError_1 = 849) then 
		(idLevel1_IsBatteryError_5, idCheckAlarm_Level1_3)
		 else
		 if ( idLevel1_IsBatteryError_1 = 850) then 
		(idLevel1_IsBatteryError_6, idCheckAlarm_Level1_3)
		 else (idLevel1_IsBatteryError_1, idCheckAlarm_Level1_2);


	(idLevel1_IsBatteryError, idCheckAlarm_Level1) 
	= (idLevel1_IsBatteryError_7, idCheckAlarm_Level1_4);
	

tel





-- Exit action for state :Level1_IsBatteryError
node Level1_IsBatteryError_ex(idLevel1_IsBatteryError_1:int;
	idCheckAlarm_Level1_1:int;
	isInner:bool)

returns (idLevel1_IsBatteryError:int;
	idCheckAlarm_Level1:int);


var 	idLevel1_IsBatteryError_2, idLevel1_IsBatteryError_3, idLevel1_IsBatteryError_4, idLevel1_IsBatteryError_5:int;
	idCheckAlarm_Level1_2:int;


let



	
	(idLevel1_IsBatteryError_2) 
	= 
	if ( idLevel1_IsBatteryError_1 = 849) then
	IsBatteryError_Yes_ex(idLevel1_IsBatteryError_1, false)
	 else (idLevel1_IsBatteryError_1);

	

	(idLevel1_IsBatteryError_3) 
	= 
	if ( idLevel1_IsBatteryError_1 = 850) then
	IsBatteryError_No_ex(idLevel1_IsBatteryError_1, false)
	 else (idLevel1_IsBatteryError_1);

	

	(idLevel1_IsBatteryError_4) 
	= 
		 if ( idLevel1_IsBatteryError_1 = 849) then 
		(idLevel1_IsBatteryError_2)
		 else
		 if ( idLevel1_IsBatteryError_1 = 850) then 
		(idLevel1_IsBatteryError_3)
		 else (idLevel1_IsBatteryError_1);


	-- set state as inactive 
	idCheckAlarm_Level1_2
	 = if (not isInner) then 0 else idCheckAlarm_Level1_1;

	idLevel1_IsBatteryError_5 
	= 0;
	

	(idLevel1_IsBatteryError, idCheckAlarm_Level1) 
	= (idLevel1_IsBatteryError_5, idCheckAlarm_Level1_2);
	

tel






-- Entry action for state :Level1_IsConfigTimeWarning
node Level1_IsConfigTimeWarning_en(idLevel1_IsConfigTimeWarning_1:int;
	idCheckAlarm_Level1_1:int;
	CONFIG_IN_Config_Timer:int;
	CONST_IN_Config_Warning_Duration:int;
	step_size:real;
	isInner:bool)

returns (idLevel1_IsConfigTimeWarning:int;
	idCheckAlarm_Level1:int);


var 	idLevel1_IsConfigTimeWarning_2, idLevel1_IsConfigTimeWarning_3, idLevel1_IsConfigTimeWarning_4, idLevel1_IsConfigTimeWarning_5, idLevel1_IsConfigTimeWarning_6, idLevel1_IsConfigTimeWarning_7:int;
	idCheckAlarm_Level1_2, idCheckAlarm_Level1_3, idCheckAlarm_Level1_4:int;


let



	-- set state as active 
	idCheckAlarm_Level1_2 
	= 845;
	

	
-- transition trace :
	--POINT__To__IsConfigTimeWarning_Yes_1
		(idLevel1_IsConfigTimeWarning_2) 
	= 
		 if (( CONFIG_IN_Config_Timer>Step_Scaling_Factor(CONST_IN_Config_Warning_Duration,step_size) )) then 
		IsConfigTimeWarning_Yes_en(idLevel1_IsConfigTimeWarning_1, false)
		 else (idLevel1_IsConfigTimeWarning_1);
		

-- transition trace :
	--POINT__To__IsConfigTimeWarning_No_2
		(idLevel1_IsConfigTimeWarning_3) 
	= IsConfigTimeWarning_No_en(idLevel1_IsConfigTimeWarning_2, false);
		

	(idLevel1_IsConfigTimeWarning_4, idCheckAlarm_Level1_3) 
	= 

	if ( idLevel1_IsConfigTimeWarning_1 = 0) then

	
		 if (( CONFIG_IN_Config_Timer>Step_Scaling_Factor(CONST_IN_Config_Warning_Duration,step_size) )) then 
		(idLevel1_IsConfigTimeWarning_2, idCheckAlarm_Level1_2)
		 else (idLevel1_IsConfigTimeWarning_3, idCheckAlarm_Level1_2)

	 else(idLevel1_IsConfigTimeWarning_1, idCheckAlarm_Level1_2);

	

	(idLevel1_IsConfigTimeWarning_5) 
	= 
	if ( idLevel1_IsConfigTimeWarning_1 = 846) then
	IsConfigTimeWarning_No_en(idLevel1_IsConfigTimeWarning_1, false)
	 else (idLevel1_IsConfigTimeWarning_1);

	

	(idLevel1_IsConfigTimeWarning_6) 
	= 
	if ( idLevel1_IsConfigTimeWarning_1 = 847) then
	IsConfigTimeWarning_Yes_en(idLevel1_IsConfigTimeWarning_1, false)
	 else (idLevel1_IsConfigTimeWarning_1);

	

	(idLevel1_IsConfigTimeWarning_7, idCheckAlarm_Level1_4) 
	= 
		 if ( idLevel1_IsConfigTimeWarning_1 = 0) then 
		(idLevel1_IsConfigTimeWarning_4, idCheckAlarm_Level1_3)
		 else
		 if ( idLevel1_IsConfigTimeWarning_1 = 846) then 
		(idLevel1_IsConfigTimeWarning_5, idCheckAlarm_Level1_3)
		 else
		 if ( idLevel1_IsConfigTimeWarning_1 = 847) then 
		(idLevel1_IsConfigTimeWarning_6, idCheckAlarm_Level1_3)
		 else (idLevel1_IsConfigTimeWarning_1, idCheckAlarm_Level1_2);


	(idLevel1_IsConfigTimeWarning, idCheckAlarm_Level1) 
	= (idLevel1_IsConfigTimeWarning_7, idCheckAlarm_Level1_4);
	

tel





-- Exit action for state :Level1_IsConfigTimeWarning
node Level1_IsConfigTimeWarning_ex(idLevel1_IsConfigTimeWarning_1:int;
	idCheckAlarm_Level1_1:int;
	isInner:bool)

returns (idLevel1_IsConfigTimeWarning:int;
	idCheckAlarm_Level1:int);


var 	idLevel1_IsConfigTimeWarning_2, idLevel1_IsConfigTimeWarning_3, idLevel1_IsConfigTimeWarning_4, idLevel1_IsConfigTimeWarning_5:int;
	idCheckAlarm_Level1_2:int;


let



	
	(idLevel1_IsConfigTimeWarning_2) 
	= 
	if ( idLevel1_IsConfigTimeWarning_1 = 846) then
	IsConfigTimeWarning_No_ex(idLevel1_IsConfigTimeWarning_1, false)
	 else (idLevel1_IsConfigTimeWarning_1);

	

	(idLevel1_IsConfigTimeWarning_3) 
	= 
	if ( idLevel1_IsConfigTimeWarning_1 = 847) then
	IsConfigTimeWarning_Yes_ex(idLevel1_IsConfigTimeWarning_1, false)
	 else (idLevel1_IsConfigTimeWarning_1);

	

	(idLevel1_IsConfigTimeWarning_4) 
	= 
		 if ( idLevel1_IsConfigTimeWarning_1 = 846) then 
		(idLevel1_IsConfigTimeWarning_2)
		 else
		 if ( idLevel1_IsConfigTimeWarning_1 = 847) then 
		(idLevel1_IsConfigTimeWarning_3)
		 else (idLevel1_IsConfigTimeWarning_1);


	-- set state as inactive 
	idCheckAlarm_Level1_2
	 = if (not isInner) then 0 else idCheckAlarm_Level1_1;

	idLevel1_IsConfigTimeWarning_5 
	= 0;
	

	(idLevel1_IsConfigTimeWarning, idCheckAlarm_Level1) 
	= (idLevel1_IsConfigTimeWarning_5, idCheckAlarm_Level1_2);
	

tel






-- Entry action for state :Level1_IsIdleTimeExceeded
node Level1_IsIdleTimeExceeded_en(idLevel1_IsIdleTimeExceeded_1:int;
	idCheckAlarm_Level1_1:int;
	IM_IN_Current_System_Mode:int;
	CONST_IN_Max_Idle_Duration:int;
	step_size:real;
	idletimer_1:int;
	isInner:bool)

returns (idLevel1_IsIdleTimeExceeded:int;
	idCheckAlarm_Level1:int;
	idletimer:int);


var 	idLevel1_IsIdleTimeExceeded_2, idLevel1_IsIdleTimeExceeded_3, idLevel1_IsIdleTimeExceeded_4, idLevel1_IsIdleTimeExceeded_5, idLevel1_IsIdleTimeExceeded_6, idLevel1_IsIdleTimeExceeded_7, idLevel1_IsIdleTimeExceeded_8, idLevel1_IsIdleTimeExceeded_9:int;
	idCheckAlarm_Level1_2, idCheckAlarm_Level1_3, idCheckAlarm_Level1_4:int;
	idletimer_2, idletimer_3, idletimer_4, idletimer_5, idletimer_6, idletimer_7, idletimer_8:int;


let



	-- set state as active 
	idCheckAlarm_Level1_2 
	= 841;
	

	
-- transition trace :
	--POINT__To__IsIdleTimeExceeded_Yes_1
		(idLevel1_IsIdleTimeExceeded_2) 
	= 
		 if (( IM_IN_Current_System_Mode=1 and Step_Scaling_Factor(CONST_IN_Max_Idle_Duration,step_size)=1 )) then 
		IsIdleTimeExceeded_Yes_en(idLevel1_IsIdleTimeExceeded_1, false)
		 else (idLevel1_IsIdleTimeExceeded_1);
		

-- transition trace :
	--POINT__To__IsIdleTimeExceeded_counting_2
		-- condition Action : idletimer=0;
		
		(idletimer_2) 
	= 
		 if (( IM_IN_Current_System_Mode=1 )) then 
		POINT__To__IsIdleTimeExceeded_counting_2_Condition_Action(idletimer_1)
		 else (idletimer_1);
		

		(idLevel1_IsIdleTimeExceeded_3, idletimer_3) 
	= 
		 if (( IM_IN_Current_System_Mode=1 )) then 
		IsIdleTimeExceeded_counting_en(idLevel1_IsIdleTimeExceeded_2, idletimer_2, false)
		 else (idLevel1_IsIdleTimeExceeded_2, idletimer_2);
		

-- transition trace :
	--POINT__To__IsIdleTimeExceeded_No_3
		(idLevel1_IsIdleTimeExceeded_4, idletimer_4) 
	= IsIdleTimeExceeded_No_en(idLevel1_IsIdleTimeExceeded_3, idletimer_3, false);
		

	(idLevel1_IsIdleTimeExceeded_5, idCheckAlarm_Level1_3, idletimer_5) 
	= 

	if ( idLevel1_IsIdleTimeExceeded_1 = 0) then

	
		 if (( IM_IN_Current_System_Mode=1 and Step_Scaling_Factor(CONST_IN_Max_Idle_Duration,step_size)=1 )) then 
		(idLevel1_IsIdleTimeExceeded_2, idCheckAlarm_Level1_2, idletimer_1)
		 else
		 if (( IM_IN_Current_System_Mode=1 )) then 
		(idLevel1_IsIdleTimeExceeded_3, idCheckAlarm_Level1_2, idletimer_3)
		 else (idLevel1_IsIdleTimeExceeded_4, idCheckAlarm_Level1_2, idletimer_4)

	 else(idLevel1_IsIdleTimeExceeded_1, idCheckAlarm_Level1_2, idletimer_1);

	

	(idLevel1_IsIdleTimeExceeded_6, idletimer_6) 
	= 
	if ( idLevel1_IsIdleTimeExceeded_1 = 842) then
	IsIdleTimeExceeded_counting_en(idLevel1_IsIdleTimeExceeded_1, idletimer_1, false)
	 else (idLevel1_IsIdleTimeExceeded_1, idletimer_1);

	

	(idLevel1_IsIdleTimeExceeded_7, idletimer_7) 
	= 
	if ( idLevel1_IsIdleTimeExceeded_1 = 843) then
	IsIdleTimeExceeded_No_en(idLevel1_IsIdleTimeExceeded_1, idletimer_1, false)
	 else (idLevel1_IsIdleTimeExceeded_1, idletimer_1);

	

	(idLevel1_IsIdleTimeExceeded_8) 
	= 
	if ( idLevel1_IsIdleTimeExceeded_1 = 844) then
	IsIdleTimeExceeded_Yes_en(idLevel1_IsIdleTimeExceeded_1, false)
	 else (idLevel1_IsIdleTimeExceeded_1);

	

	(idLevel1_IsIdleTimeExceeded_9, idCheckAlarm_Level1_4, idletimer_8) 
	= 
		 if ( idLevel1_IsIdleTimeExceeded_1 = 0) then 
		(idLevel1_IsIdleTimeExceeded_5, idCheckAlarm_Level1_3, idletimer_5)
		 else
		 if ( idLevel1_IsIdleTimeExceeded_1 = 842) then 
		(idLevel1_IsIdleTimeExceeded_6, idCheckAlarm_Level1_3, idletimer_6)
		 else
		 if ( idLevel1_IsIdleTimeExceeded_1 = 843) then 
		(idLevel1_IsIdleTimeExceeded_7, idCheckAlarm_Level1_3, idletimer_7)
		 else
		 if ( idLevel1_IsIdleTimeExceeded_1 = 844) then 
		(idLevel1_IsIdleTimeExceeded_8, idCheckAlarm_Level1_3, idletimer_7)
		 else (idLevel1_IsIdleTimeExceeded_1, idCheckAlarm_Level1_2, idletimer_1);


	(idLevel1_IsIdleTimeExceeded, idCheckAlarm_Level1, idletimer) 
	= (idLevel1_IsIdleTimeExceeded_9, idCheckAlarm_Level1_4, idletimer_8);
	

tel





-- Exit action for state :Level1_IsIdleTimeExceeded
node Level1_IsIdleTimeExceeded_ex(idletimer_1:int;
	idLevel1_IsIdleTimeExceeded_1:int;
	idCheckAlarm_Level1_1:int;
	isInner:bool)

returns (idletimer:int;
	idLevel1_IsIdleTimeExceeded:int;
	idCheckAlarm_Level1:int);


var 	idletimer_2, idletimer_3, idletimer_4:int;
	idLevel1_IsIdleTimeExceeded_2, idLevel1_IsIdleTimeExceeded_3, idLevel1_IsIdleTimeExceeded_4, idLevel1_IsIdleTimeExceeded_5, idLevel1_IsIdleTimeExceeded_6:int;
	idCheckAlarm_Level1_2:int;


let



	
	(idletimer_2, idLevel1_IsIdleTimeExceeded_2) 
	= 
	if ( idLevel1_IsIdleTimeExceeded_1 = 842) then
	IsIdleTimeExceeded_counting_ex(idletimer_1, idLevel1_IsIdleTimeExceeded_1, false)
	 else (idletimer_1, idLevel1_IsIdleTimeExceeded_1);

	

	(idletimer_3, idLevel1_IsIdleTimeExceeded_3) 
	= 
	if ( idLevel1_IsIdleTimeExceeded_1 = 843) then
	IsIdleTimeExceeded_No_ex(idletimer_1, idLevel1_IsIdleTimeExceeded_1, false)
	 else (idletimer_1, idLevel1_IsIdleTimeExceeded_1);

	

	(idLevel1_IsIdleTimeExceeded_4) 
	= 
	if ( idLevel1_IsIdleTimeExceeded_1 = 844) then
	IsIdleTimeExceeded_Yes_ex(idLevel1_IsIdleTimeExceeded_1, false)
	 else (idLevel1_IsIdleTimeExceeded_1);

	

	(idletimer_4, idLevel1_IsIdleTimeExceeded_5) 
	= 
		 if ( idLevel1_IsIdleTimeExceeded_1 = 842) then 
		(idletimer_2, idLevel1_IsIdleTimeExceeded_2)
		 else
		 if ( idLevel1_IsIdleTimeExceeded_1 = 843) then 
		(idletimer_3, idLevel1_IsIdleTimeExceeded_3)
		 else
		 if ( idLevel1_IsIdleTimeExceeded_1 = 844) then 
		(idletimer_3, idLevel1_IsIdleTimeExceeded_4)
		 else (idletimer_1, idLevel1_IsIdleTimeExceeded_1);


	-- set state as inactive 
	idCheckAlarm_Level1_2
	 = if (not isInner) then 0 else idCheckAlarm_Level1_1;

	idLevel1_IsIdleTimeExceeded_6 
	= 0;
	

	(idletimer, idLevel1_IsIdleTimeExceeded, idCheckAlarm_Level1) 
	= (idletimer_4, idLevel1_IsIdleTimeExceeded_6, idCheckAlarm_Level1_2);
	

tel






-- Entry action for state :Level1_IsPausedTimeExceeded
node Level1_IsPausedTimeExceeded_en(idLevel1_IsPausedTimeExceeded_1:int;
	idCheckAlarm_Level1_1:int;
	IM_IN_Current_System_Mode:int;
	CONST_IN_Max_Paused_Duration:int;
	step_size:real;
	pausedtimer_1:int;
	isInner:bool)

returns (idLevel1_IsPausedTimeExceeded:int;
	idCheckAlarm_Level1:int;
	pausedtimer:int);


var 	idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPausedTimeExceeded_3, idLevel1_IsPausedTimeExceeded_4, idLevel1_IsPausedTimeExceeded_5, idLevel1_IsPausedTimeExceeded_6, idLevel1_IsPausedTimeExceeded_7, idLevel1_IsPausedTimeExceeded_8, idLevel1_IsPausedTimeExceeded_9:int;
	idCheckAlarm_Level1_2, idCheckAlarm_Level1_3, idCheckAlarm_Level1_4:int;
	pausedtimer_2, pausedtimer_3, pausedtimer_4, pausedtimer_5, pausedtimer_6, pausedtimer_7, pausedtimer_8:int;


let



	-- set state as active 
	idCheckAlarm_Level1_2 
	= 837;
	

	
-- transition trace :
	--POINT__To__IsPausedTimeExceeded_Yes_1
		(idLevel1_IsPausedTimeExceeded_2) 
	= 
		 if (( (IM_IN_Current_System_Mode=6 or IM_IN_Current_System_Mode=7 or IM_IN_Current_System_Mode=8) and Step_Scaling_Factor(CONST_IN_Max_Paused_Duration,step_size)=1 )) then 
		IsPausedTimeExceeded_Yes_en(idLevel1_IsPausedTimeExceeded_1, false)
		 else (idLevel1_IsPausedTimeExceeded_1);
		

-- transition trace :
	--POINT__To__IsPausedTimeExceeded_counting_2
		-- condition Action : pausedtimer=0;
		
		(pausedtimer_2) 
	= 
		 if (( IM_IN_Current_System_Mode=6 or IM_IN_Current_System_Mode=7 or IM_IN_Current_System_Mode=8 )) then 
		POINT__To__IsPausedTimeExceeded_counting_2_Condition_Action(pausedtimer_1)
		 else (pausedtimer_1);
		

		(idLevel1_IsPausedTimeExceeded_3, pausedtimer_3) 
	= 
		 if (( IM_IN_Current_System_Mode=6 or IM_IN_Current_System_Mode=7 or IM_IN_Current_System_Mode=8 )) then 
		IsPausedTimeExceeded_counting_en(idLevel1_IsPausedTimeExceeded_2, pausedtimer_2, false)
		 else (idLevel1_IsPausedTimeExceeded_2, pausedtimer_2);
		

-- transition trace :
	--POINT__To__IsPausedTimeExceeded_No_3
		(idLevel1_IsPausedTimeExceeded_4, pausedtimer_4) 
	= IsPausedTimeExceeded_No_en(idLevel1_IsPausedTimeExceeded_3, pausedtimer_3, false);
		

	(idLevel1_IsPausedTimeExceeded_5, idCheckAlarm_Level1_3, pausedtimer_5) 
	= 

	if ( idLevel1_IsPausedTimeExceeded_1 = 0) then

	
		 if (( (IM_IN_Current_System_Mode=6 or IM_IN_Current_System_Mode=7 or IM_IN_Current_System_Mode=8) and Step_Scaling_Factor(CONST_IN_Max_Paused_Duration,step_size)=1 )) then 
		(idLevel1_IsPausedTimeExceeded_2, idCheckAlarm_Level1_2, pausedtimer_1)
		 else
		 if (( IM_IN_Current_System_Mode=6 or IM_IN_Current_System_Mode=7 or IM_IN_Current_System_Mode=8 )) then 
		(idLevel1_IsPausedTimeExceeded_3, idCheckAlarm_Level1_2, pausedtimer_3)
		 else (idLevel1_IsPausedTimeExceeded_4, idCheckAlarm_Level1_2, pausedtimer_4)

	 else(idLevel1_IsPausedTimeExceeded_1, idCheckAlarm_Level1_2, pausedtimer_1);

	

	(idLevel1_IsPausedTimeExceeded_6, pausedtimer_6) 
	= 
	if ( idLevel1_IsPausedTimeExceeded_1 = 838) then
	IsPausedTimeExceeded_counting_en(idLevel1_IsPausedTimeExceeded_1, pausedtimer_1, false)
	 else (idLevel1_IsPausedTimeExceeded_1, pausedtimer_1);

	

	(idLevel1_IsPausedTimeExceeded_7, pausedtimer_7) 
	= 
	if ( idLevel1_IsPausedTimeExceeded_1 = 839) then
	IsPausedTimeExceeded_No_en(idLevel1_IsPausedTimeExceeded_1, pausedtimer_1, false)
	 else (idLevel1_IsPausedTimeExceeded_1, pausedtimer_1);

	

	(idLevel1_IsPausedTimeExceeded_8) 
	= 
	if ( idLevel1_IsPausedTimeExceeded_1 = 840) then
	IsPausedTimeExceeded_Yes_en(idLevel1_IsPausedTimeExceeded_1, false)
	 else (idLevel1_IsPausedTimeExceeded_1);

	

	(idLevel1_IsPausedTimeExceeded_9, idCheckAlarm_Level1_4, pausedtimer_8) 
	= 
		 if ( idLevel1_IsPausedTimeExceeded_1 = 0) then 
		(idLevel1_IsPausedTimeExceeded_5, idCheckAlarm_Level1_3, pausedtimer_5)
		 else
		 if ( idLevel1_IsPausedTimeExceeded_1 = 838) then 
		(idLevel1_IsPausedTimeExceeded_6, idCheckAlarm_Level1_3, pausedtimer_6)
		 else
		 if ( idLevel1_IsPausedTimeExceeded_1 = 839) then 
		(idLevel1_IsPausedTimeExceeded_7, idCheckAlarm_Level1_3, pausedtimer_7)
		 else
		 if ( idLevel1_IsPausedTimeExceeded_1 = 840) then 
		(idLevel1_IsPausedTimeExceeded_8, idCheckAlarm_Level1_3, pausedtimer_7)
		 else (idLevel1_IsPausedTimeExceeded_1, idCheckAlarm_Level1_2, pausedtimer_1);


	(idLevel1_IsPausedTimeExceeded, idCheckAlarm_Level1, pausedtimer) 
	= (idLevel1_IsPausedTimeExceeded_9, idCheckAlarm_Level1_4, pausedtimer_8);
	

tel





-- Exit action for state :Level1_IsPausedTimeExceeded
node Level1_IsPausedTimeExceeded_ex(pausedtimer_1:int;
	idLevel1_IsPausedTimeExceeded_1:int;
	idCheckAlarm_Level1_1:int;
	isInner:bool)

returns (pausedtimer:int;
	idLevel1_IsPausedTimeExceeded:int;
	idCheckAlarm_Level1:int);


var 	pausedtimer_2, pausedtimer_3, pausedtimer_4:int;
	idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPausedTimeExceeded_3, idLevel1_IsPausedTimeExceeded_4, idLevel1_IsPausedTimeExceeded_5, idLevel1_IsPausedTimeExceeded_6:int;
	idCheckAlarm_Level1_2:int;


let



	
	(pausedtimer_2, idLevel1_IsPausedTimeExceeded_2) 
	= 
	if ( idLevel1_IsPausedTimeExceeded_1 = 838) then
	IsPausedTimeExceeded_counting_ex(pausedtimer_1, idLevel1_IsPausedTimeExceeded_1, false)
	 else (pausedtimer_1, idLevel1_IsPausedTimeExceeded_1);

	

	(pausedtimer_3, idLevel1_IsPausedTimeExceeded_3) 
	= 
	if ( idLevel1_IsPausedTimeExceeded_1 = 839) then
	IsPausedTimeExceeded_No_ex(pausedtimer_1, idLevel1_IsPausedTimeExceeded_1, false)
	 else (pausedtimer_1, idLevel1_IsPausedTimeExceeded_1);

	

	(idLevel1_IsPausedTimeExceeded_4) 
	= 
	if ( idLevel1_IsPausedTimeExceeded_1 = 840) then
	IsPausedTimeExceeded_Yes_ex(idLevel1_IsPausedTimeExceeded_1, false)
	 else (idLevel1_IsPausedTimeExceeded_1);

	

	(pausedtimer_4, idLevel1_IsPausedTimeExceeded_5) 
	= 
		 if ( idLevel1_IsPausedTimeExceeded_1 = 838) then 
		(pausedtimer_2, idLevel1_IsPausedTimeExceeded_2)
		 else
		 if ( idLevel1_IsPausedTimeExceeded_1 = 839) then 
		(pausedtimer_3, idLevel1_IsPausedTimeExceeded_3)
		 else
		 if ( idLevel1_IsPausedTimeExceeded_1 = 840) then 
		(pausedtimer_3, idLevel1_IsPausedTimeExceeded_4)
		 else (pausedtimer_1, idLevel1_IsPausedTimeExceeded_1);


	-- set state as inactive 
	idCheckAlarm_Level1_2
	 = if (not isInner) then 0 else idCheckAlarm_Level1_1;

	idLevel1_IsPausedTimeExceeded_6 
	= 0;
	

	(pausedtimer, idLevel1_IsPausedTimeExceeded, idCheckAlarm_Level1) 
	= (pausedtimer_4, idLevel1_IsPausedTimeExceeded_6, idCheckAlarm_Level1_2);
	

tel






-- Entry action for state :Level1_IsFlowRateNotStable
node Level1_IsFlowRateNotStable_en(idLevel1_IsFlowRateNotStable_1:int;
	idCheckAlarm_Level1_1:int;
	SYS_STAT_IN_In_Therapy:bool;
	SENSOR_IN_Flow_Rate_Not_Stable:bool;
	isInner:bool)

returns (idLevel1_IsFlowRateNotStable:int;
	idCheckAlarm_Level1:int);


var 	idLevel1_IsFlowRateNotStable_2, idLevel1_IsFlowRateNotStable_3, idLevel1_IsFlowRateNotStable_4, idLevel1_IsFlowRateNotStable_5, idLevel1_IsFlowRateNotStable_6, idLevel1_IsFlowRateNotStable_7:int;
	idCheckAlarm_Level1_2, idCheckAlarm_Level1_3, idCheckAlarm_Level1_4:int;


let



	-- set state as active 
	idCheckAlarm_Level1_2 
	= 834;
	

	
-- transition trace :
	--POINT__To__IsFlowRateNotStable_Yes_1
		(idLevel1_IsFlowRateNotStable_2) 
	= 
		 if (( SYS_STAT_IN_In_Therapy and SENSOR_IN_Flow_Rate_Not_Stable )) then 
		IsFlowRateNotStable_Yes_en(idLevel1_IsFlowRateNotStable_1, false)
		 else (idLevel1_IsFlowRateNotStable_1);
		

-- transition trace :
	--POINT__To__IsFlowRateNotStable_No_2
		(idLevel1_IsFlowRateNotStable_3) 
	= IsFlowRateNotStable_No_en(idLevel1_IsFlowRateNotStable_2, false);
		

	(idLevel1_IsFlowRateNotStable_4, idCheckAlarm_Level1_3) 
	= 

	if ( idLevel1_IsFlowRateNotStable_1 = 0) then

	
		 if (( SYS_STAT_IN_In_Therapy and SENSOR_IN_Flow_Rate_Not_Stable )) then 
		(idLevel1_IsFlowRateNotStable_2, idCheckAlarm_Level1_2)
		 else (idLevel1_IsFlowRateNotStable_3, idCheckAlarm_Level1_2)

	 else(idLevel1_IsFlowRateNotStable_1, idCheckAlarm_Level1_2);

	

	(idLevel1_IsFlowRateNotStable_5) 
	= 
	if ( idLevel1_IsFlowRateNotStable_1 = 835) then
	IsFlowRateNotStable_Yes_en(idLevel1_IsFlowRateNotStable_1, false)
	 else (idLevel1_IsFlowRateNotStable_1);

	

	(idLevel1_IsFlowRateNotStable_6) 
	= 
	if ( idLevel1_IsFlowRateNotStable_1 = 836) then
	IsFlowRateNotStable_No_en(idLevel1_IsFlowRateNotStable_1, false)
	 else (idLevel1_IsFlowRateNotStable_1);

	

	(idLevel1_IsFlowRateNotStable_7, idCheckAlarm_Level1_4) 
	= 
		 if ( idLevel1_IsFlowRateNotStable_1 = 0) then 
		(idLevel1_IsFlowRateNotStable_4, idCheckAlarm_Level1_3)
		 else
		 if ( idLevel1_IsFlowRateNotStable_1 = 835) then 
		(idLevel1_IsFlowRateNotStable_5, idCheckAlarm_Level1_3)
		 else
		 if ( idLevel1_IsFlowRateNotStable_1 = 836) then 
		(idLevel1_IsFlowRateNotStable_6, idCheckAlarm_Level1_3)
		 else (idLevel1_IsFlowRateNotStable_1, idCheckAlarm_Level1_2);


	(idLevel1_IsFlowRateNotStable, idCheckAlarm_Level1) 
	= (idLevel1_IsFlowRateNotStable_7, idCheckAlarm_Level1_4);
	

tel





-- Exit action for state :Level1_IsFlowRateNotStable
node Level1_IsFlowRateNotStable_ex(idLevel1_IsFlowRateNotStable_1:int;
	idCheckAlarm_Level1_1:int;
	isInner:bool)

returns (idLevel1_IsFlowRateNotStable:int;
	idCheckAlarm_Level1:int);


var 	idLevel1_IsFlowRateNotStable_2, idLevel1_IsFlowRateNotStable_3, idLevel1_IsFlowRateNotStable_4, idLevel1_IsFlowRateNotStable_5:int;
	idCheckAlarm_Level1_2:int;


let



	
	(idLevel1_IsFlowRateNotStable_2) 
	= 
	if ( idLevel1_IsFlowRateNotStable_1 = 835) then
	IsFlowRateNotStable_Yes_ex(idLevel1_IsFlowRateNotStable_1, false)
	 else (idLevel1_IsFlowRateNotStable_1);

	

	(idLevel1_IsFlowRateNotStable_3) 
	= 
	if ( idLevel1_IsFlowRateNotStable_1 = 836) then
	IsFlowRateNotStable_No_ex(idLevel1_IsFlowRateNotStable_1, false)
	 else (idLevel1_IsFlowRateNotStable_1);

	

	(idLevel1_IsFlowRateNotStable_4) 
	= 
		 if ( idLevel1_IsFlowRateNotStable_1 = 835) then 
		(idLevel1_IsFlowRateNotStable_2)
		 else
		 if ( idLevel1_IsFlowRateNotStable_1 = 836) then 
		(idLevel1_IsFlowRateNotStable_3)
		 else (idLevel1_IsFlowRateNotStable_1);


	-- set state as inactive 
	idCheckAlarm_Level1_2
	 = if (not isInner) then 0 else idCheckAlarm_Level1_1;

	idLevel1_IsFlowRateNotStable_5 
	= 0;
	

	(idLevel1_IsFlowRateNotStable, idCheckAlarm_Level1) 
	= (idLevel1_IsFlowRateNotStable_5, idCheckAlarm_Level1_2);
	

tel






-- Entry action for state :Level1_IsUnderInfusion
node Level1_IsUnderInfusion_en(idLevel1_IsUnderInfusion_1:int;
	idCheckAlarm_Level1_1:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_Low:int;
	IM_IN_Flow_Rate_Commanded:int;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SYS_STAT_IN_In_Therapy:bool;
	underInfusion_1:int;
	isInner:bool)

returns (idLevel1_IsUnderInfusion:int;
	idCheckAlarm_Level1:int;
	underInfusion:int);


var 	idLevel1_IsUnderInfusion_2, idLevel1_IsUnderInfusion_3, idLevel1_IsUnderInfusion_4, idLevel1_IsUnderInfusion_5, idLevel1_IsUnderInfusion_6, idLevel1_IsUnderInfusion_7, idLevel1_IsUnderInfusion_8, idLevel1_IsUnderInfusion_9:int;
	idCheckAlarm_Level1_2, idCheckAlarm_Level1_3, idCheckAlarm_Level1_4:int;
	underInfusion_2, underInfusion_3, underInfusion_4, underInfusion_5, underInfusion_6, underInfusion_7, underInfusion_8, underInfusion_9, underInfusion_10:int;


let



	-- set state as active 
	idCheckAlarm_Level1_2 
	= 829;
	

	(underInfusion_2) 
	= if (not isInner) then checkUnderInfusion(underInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min)
	 else (underInfusion_1);
	

	
-- transition trace :
	--POINT__To__IsUnderInfusion_Yes_1
		(idLevel1_IsUnderInfusion_2, underInfusion_3) 
	= 
		 if ((  underInfusion_2 =1 )) then 
		IsUnderInfusion_Yes_en(idLevel1_IsUnderInfusion_1, underInfusion_2, false)
		 else (idLevel1_IsUnderInfusion_1, underInfusion_2);
		

-- transition trace :
	--POINT__To__IsUnderInfusion_Monitor_2
		(idLevel1_IsUnderInfusion_3, underInfusion_4) 
	= 
		 if ((  underInfusion_3 =2 )) then 
		IsUnderInfusion_Monitor_en(idLevel1_IsUnderInfusion_2, underInfusion_3, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, false)
		 else (idLevel1_IsUnderInfusion_2, underInfusion_3);
		

-- transition trace :
	--POINT__To__IsUnderInfusion_Check_3
		(idLevel1_IsUnderInfusion_4, underInfusion_5) 
	= IsUnderInfusion_Check_en(idLevel1_IsUnderInfusion_3, underInfusion_4, false);
		

	(idLevel1_IsUnderInfusion_5, idCheckAlarm_Level1_3, underInfusion_6) 
	= 

	if ( idLevel1_IsUnderInfusion_1 = 0) then

	
		 if ((  underInfusion_2 =1 )) then 
		(idLevel1_IsUnderInfusion_2, idCheckAlarm_Level1_2, underInfusion_3)
		 else
		 if ((  underInfusion_3 =2 )) then 
		(idLevel1_IsUnderInfusion_3, idCheckAlarm_Level1_2, underInfusion_4)
		 else (idLevel1_IsUnderInfusion_4, idCheckAlarm_Level1_2, underInfusion_5)

	 else(idLevel1_IsUnderInfusion_1, idCheckAlarm_Level1_2, underInfusion_2);

	

	(idLevel1_IsUnderInfusion_6, underInfusion_7) 
	= 
	if ( idLevel1_IsUnderInfusion_1 = 830) then
	IsUnderInfusion_Yes_en(idLevel1_IsUnderInfusion_1, underInfusion_2, false)
	 else (idLevel1_IsUnderInfusion_1, underInfusion_2);

	

	(idLevel1_IsUnderInfusion_7, underInfusion_8) 
	= 
	if ( idLevel1_IsUnderInfusion_1 = 831) then
	IsUnderInfusion_Check_en(idLevel1_IsUnderInfusion_1, underInfusion_2, false)
	 else (idLevel1_IsUnderInfusion_1, underInfusion_2);

	

	(idLevel1_IsUnderInfusion_8, underInfusion_9) 
	= 
	if ( idLevel1_IsUnderInfusion_1 = 832) then
	IsUnderInfusion_Monitor_en(idLevel1_IsUnderInfusion_1, underInfusion_2, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, false)
	 else (idLevel1_IsUnderInfusion_1, underInfusion_2);

	

	(idLevel1_IsUnderInfusion_9, idCheckAlarm_Level1_4, underInfusion_10) 
	= 
		 if ( idLevel1_IsUnderInfusion_1 = 0) then 
		(idLevel1_IsUnderInfusion_5, idCheckAlarm_Level1_3, underInfusion_6)
		 else
		 if ( idLevel1_IsUnderInfusion_1 = 830) then 
		(idLevel1_IsUnderInfusion_6, idCheckAlarm_Level1_3, underInfusion_7)
		 else
		 if ( idLevel1_IsUnderInfusion_1 = 831) then 
		(idLevel1_IsUnderInfusion_7, idCheckAlarm_Level1_3, underInfusion_8)
		 else
		 if ( idLevel1_IsUnderInfusion_1 = 832) then 
		(idLevel1_IsUnderInfusion_8, idCheckAlarm_Level1_3, underInfusion_9)
		 else (idLevel1_IsUnderInfusion_1, idCheckAlarm_Level1_2, underInfusion_2);


	(idLevel1_IsUnderInfusion, idCheckAlarm_Level1, underInfusion) 
	= (idLevel1_IsUnderInfusion_9, idCheckAlarm_Level1_4, underInfusion_10);
	

tel





--During action for state :Level1_IsUnderInfusion
node Level1_IsUnderInfusion_du(underInfusion_1:int;
	SYS_STAT_IN_In_Therapy:bool;
	SENSOR_IN_Flow_Rate_Monitored:int;
	DB_IN_Flow_Rate_Low:int;
	IM_IN_Flow_Rate_Commanded:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int)

returns (underInfusion:int);


var 	underInfusion_2:int;


let



	(underInfusion_2) 
	= checkUnderInfusion(underInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min);
	

	(underInfusion) 
	= (underInfusion_2);
	

tel





-- Exit action for state :Level1_IsUnderInfusion
node Level1_IsUnderInfusion_ex(idLevel1_IsUnderInfusion_1:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_Low:int;
	IM_IN_Flow_Rate_Commanded:int;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SYS_STAT_IN_In_Therapy:bool;
	underInfusion_1:int;
	idCheckAlarm_Level1_1:int;
	isInner:bool)

returns (idLevel1_IsUnderInfusion:int;
	underInfusion:int;
	idCheckAlarm_Level1:int);


var 	idLevel1_IsUnderInfusion_2, idLevel1_IsUnderInfusion_3, idLevel1_IsUnderInfusion_4, idLevel1_IsUnderInfusion_5, idLevel1_IsUnderInfusion_6:int;
	underInfusion_2:int;
	idCheckAlarm_Level1_2:int;


let



	
	(idLevel1_IsUnderInfusion_2) 
	= 
	if ( idLevel1_IsUnderInfusion_1 = 830) then
	IsUnderInfusion_Yes_ex(idLevel1_IsUnderInfusion_1, false)
	 else (idLevel1_IsUnderInfusion_1);

	

	(idLevel1_IsUnderInfusion_3) 
	= 
	if ( idLevel1_IsUnderInfusion_1 = 831) then
	IsUnderInfusion_Check_ex(idLevel1_IsUnderInfusion_1, false)
	 else (idLevel1_IsUnderInfusion_1);

	

	(idLevel1_IsUnderInfusion_4) 
	= 
	if ( idLevel1_IsUnderInfusion_1 = 832) then
	IsUnderInfusion_Monitor_ex(idLevel1_IsUnderInfusion_1, false)
	 else (idLevel1_IsUnderInfusion_1);

	

	(idLevel1_IsUnderInfusion_5) 
	= 
		 if ( idLevel1_IsUnderInfusion_1 = 830) then 
		(idLevel1_IsUnderInfusion_2)
		 else
		 if ( idLevel1_IsUnderInfusion_1 = 831) then 
		(idLevel1_IsUnderInfusion_3)
		 else
		 if ( idLevel1_IsUnderInfusion_1 = 832) then 
		(idLevel1_IsUnderInfusion_4)
		 else (idLevel1_IsUnderInfusion_1);


	(underInfusion_2) 
	= if (not isInner) then checkUnderInfusion(underInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min)
	 else (underInfusion_1);
	

	-- set state as inactive 
	idCheckAlarm_Level1_2
	 = if (not isInner) then 0 else idCheckAlarm_Level1_1;

	idLevel1_IsUnderInfusion_6 
	= 0;
	

	(idLevel1_IsUnderInfusion, underInfusion, idCheckAlarm_Level1) 
	= (idLevel1_IsUnderInfusion_6, underInfusion_2, idCheckAlarm_Level1_2);
	

tel






-- Entry action for state :Level2_IsLowReservoir
node Level2_IsLowReservoir_en(idLevel2_IsLowReservoir_1:int;
	idCheckAlarm_Level2_1:int;
	SYS_STAT_IN_In_Therapy:bool;
	SYS_STAT_IN_Reservoir_Volume:int;
	CONST_IN_Low_Reservoir:int;
	isInner:bool)

returns (idLevel2_IsLowReservoir:int;
	idCheckAlarm_Level2:int);


var 	idLevel2_IsLowReservoir_2, idLevel2_IsLowReservoir_3, idLevel2_IsLowReservoir_4, idLevel2_IsLowReservoir_5, idLevel2_IsLowReservoir_6, idLevel2_IsLowReservoir_7:int;
	idCheckAlarm_Level2_2, idCheckAlarm_Level2_3, idCheckAlarm_Level2_4:int;


let



	-- set state as active 
	idCheckAlarm_Level2_2 
	= 825;
	

	
-- transition trace :
	--POINT__To__IsLowReservoir_Yes_1
		(idLevel2_IsLowReservoir_2) 
	= 
		 if (( SYS_STAT_IN_In_Therapy and SYS_STAT_IN_Reservoir_Volume<CONST_IN_Low_Reservoir )) then 
		IsLowReservoir_Yes_en(idLevel2_IsLowReservoir_1, false)
		 else (idLevel2_IsLowReservoir_1);
		

-- transition trace :
	--POINT__To__IsLowReservoir_No_2
		(idLevel2_IsLowReservoir_3) 
	= IsLowReservoir_No_en(idLevel2_IsLowReservoir_2, false);
		

	(idLevel2_IsLowReservoir_4, idCheckAlarm_Level2_3) 
	= 

	if ( idLevel2_IsLowReservoir_1 = 0) then

	
		 if (( SYS_STAT_IN_In_Therapy and SYS_STAT_IN_Reservoir_Volume<CONST_IN_Low_Reservoir )) then 
		(idLevel2_IsLowReservoir_2, idCheckAlarm_Level2_2)
		 else (idLevel2_IsLowReservoir_3, idCheckAlarm_Level2_2)

	 else(idLevel2_IsLowReservoir_1, idCheckAlarm_Level2_2);

	

	(idLevel2_IsLowReservoir_5) 
	= 
	if ( idLevel2_IsLowReservoir_1 = 826) then
	IsLowReservoir_No_en(idLevel2_IsLowReservoir_1, false)
	 else (idLevel2_IsLowReservoir_1);

	

	(idLevel2_IsLowReservoir_6) 
	= 
	if ( idLevel2_IsLowReservoir_1 = 827) then
	IsLowReservoir_Yes_en(idLevel2_IsLowReservoir_1, false)
	 else (idLevel2_IsLowReservoir_1);

	

	(idLevel2_IsLowReservoir_7, idCheckAlarm_Level2_4) 
	= 
		 if ( idLevel2_IsLowReservoir_1 = 0) then 
		(idLevel2_IsLowReservoir_4, idCheckAlarm_Level2_3)
		 else
		 if ( idLevel2_IsLowReservoir_1 = 826) then 
		(idLevel2_IsLowReservoir_5, idCheckAlarm_Level2_3)
		 else
		 if ( idLevel2_IsLowReservoir_1 = 827) then 
		(idLevel2_IsLowReservoir_6, idCheckAlarm_Level2_3)
		 else (idLevel2_IsLowReservoir_1, idCheckAlarm_Level2_2);


	(idLevel2_IsLowReservoir, idCheckAlarm_Level2) 
	= (idLevel2_IsLowReservoir_7, idCheckAlarm_Level2_4);
	

tel





-- Exit action for state :Level2_IsLowReservoir
node Level2_IsLowReservoir_ex(idLevel2_IsLowReservoir_1:int;
	idCheckAlarm_Level2_1:int;
	isInner:bool)

returns (idLevel2_IsLowReservoir:int;
	idCheckAlarm_Level2:int);


var 	idLevel2_IsLowReservoir_2, idLevel2_IsLowReservoir_3, idLevel2_IsLowReservoir_4, idLevel2_IsLowReservoir_5:int;
	idCheckAlarm_Level2_2:int;


let



	
	(idLevel2_IsLowReservoir_2) 
	= 
	if ( idLevel2_IsLowReservoir_1 = 826) then
	IsLowReservoir_No_ex(idLevel2_IsLowReservoir_1, false)
	 else (idLevel2_IsLowReservoir_1);

	

	(idLevel2_IsLowReservoir_3) 
	= 
	if ( idLevel2_IsLowReservoir_1 = 827) then
	IsLowReservoir_Yes_ex(idLevel2_IsLowReservoir_1, false)
	 else (idLevel2_IsLowReservoir_1);

	

	(idLevel2_IsLowReservoir_4) 
	= 
		 if ( idLevel2_IsLowReservoir_1 = 826) then 
		(idLevel2_IsLowReservoir_2)
		 else
		 if ( idLevel2_IsLowReservoir_1 = 827) then 
		(idLevel2_IsLowReservoir_3)
		 else (idLevel2_IsLowReservoir_1);


	-- set state as inactive 
	idCheckAlarm_Level2_2
	 = if (not isInner) then 0 else idCheckAlarm_Level2_1;

	idLevel2_IsLowReservoir_5 
	= 0;
	

	(idLevel2_IsLowReservoir, idCheckAlarm_Level2) 
	= (idLevel2_IsLowReservoir_5, idCheckAlarm_Level2_2);
	

tel






-- Entry action for state :Level3_IsDoor_Open
node Level3_IsDoor_Open_en(idLevel3_IsDoor_Open_1:int;
	idCheckAlarm_Level3_1:int;
	SENSOR_IN_Door_Open:bool;
	isInner:bool)

returns (idLevel3_IsDoor_Open:int;
	idCheckAlarm_Level3:int);


var 	idLevel3_IsDoor_Open_2, idLevel3_IsDoor_Open_3, idLevel3_IsDoor_Open_4, idLevel3_IsDoor_Open_5, idLevel3_IsDoor_Open_6, idLevel3_IsDoor_Open_7:int;
	idCheckAlarm_Level3_2, idCheckAlarm_Level3_3, idCheckAlarm_Level3_4:int;


let



	-- set state as active 
	idCheckAlarm_Level3_2 
	= 820;
	

	
-- transition trace :
	--POINT__To__IsDoor_Open_Yes_1
		(idLevel3_IsDoor_Open_2) 
	= 
		 if (( SENSOR_IN_Door_Open )) then 
		IsDoor_Open_Yes_en(idLevel3_IsDoor_Open_1, false)
		 else (idLevel3_IsDoor_Open_1);
		

-- transition trace :
	--POINT__To__IsDoor_Open_No_2
		(idLevel3_IsDoor_Open_3) 
	= IsDoor_Open_No_en(idLevel3_IsDoor_Open_2, false);
		

	(idLevel3_IsDoor_Open_4, idCheckAlarm_Level3_3) 
	= 

	if ( idLevel3_IsDoor_Open_1 = 0) then

	
		 if (( SENSOR_IN_Door_Open )) then 
		(idLevel3_IsDoor_Open_2, idCheckAlarm_Level3_2)
		 else (idLevel3_IsDoor_Open_3, idCheckAlarm_Level3_2)

	 else(idLevel3_IsDoor_Open_1, idCheckAlarm_Level3_2);

	

	(idLevel3_IsDoor_Open_5) 
	= 
	if ( idLevel3_IsDoor_Open_1 = 821) then
	IsDoor_Open_No_en(idLevel3_IsDoor_Open_1, false)
	 else (idLevel3_IsDoor_Open_1);

	

	(idLevel3_IsDoor_Open_6) 
	= 
	if ( idLevel3_IsDoor_Open_1 = 822) then
	IsDoor_Open_Yes_en(idLevel3_IsDoor_Open_1, false)
	 else (idLevel3_IsDoor_Open_1);

	

	(idLevel3_IsDoor_Open_7, idCheckAlarm_Level3_4) 
	= 
		 if ( idLevel3_IsDoor_Open_1 = 0) then 
		(idLevel3_IsDoor_Open_4, idCheckAlarm_Level3_3)
		 else
		 if ( idLevel3_IsDoor_Open_1 = 821) then 
		(idLevel3_IsDoor_Open_5, idCheckAlarm_Level3_3)
		 else
		 if ( idLevel3_IsDoor_Open_1 = 822) then 
		(idLevel3_IsDoor_Open_6, idCheckAlarm_Level3_3)
		 else (idLevel3_IsDoor_Open_1, idCheckAlarm_Level3_2);


	(idLevel3_IsDoor_Open, idCheckAlarm_Level3) 
	= (idLevel3_IsDoor_Open_7, idCheckAlarm_Level3_4);
	

tel





-- Exit action for state :Level3_IsDoor_Open
node Level3_IsDoor_Open_ex(idLevel3_IsDoor_Open_1:int;
	idCheckAlarm_Level3_1:int;
	isInner:bool)

returns (idLevel3_IsDoor_Open:int;
	idCheckAlarm_Level3:int);


var 	idLevel3_IsDoor_Open_2, idLevel3_IsDoor_Open_3, idLevel3_IsDoor_Open_4, idLevel3_IsDoor_Open_5:int;
	idCheckAlarm_Level3_2:int;


let



	
	(idLevel3_IsDoor_Open_2) 
	= 
	if ( idLevel3_IsDoor_Open_1 = 821) then
	IsDoor_Open_No_ex(idLevel3_IsDoor_Open_1, false)
	 else (idLevel3_IsDoor_Open_1);

	

	(idLevel3_IsDoor_Open_3) 
	= 
	if ( idLevel3_IsDoor_Open_1 = 822) then
	IsDoor_Open_Yes_ex(idLevel3_IsDoor_Open_1, false)
	 else (idLevel3_IsDoor_Open_1);

	

	(idLevel3_IsDoor_Open_4) 
	= 
		 if ( idLevel3_IsDoor_Open_1 = 821) then 
		(idLevel3_IsDoor_Open_2)
		 else
		 if ( idLevel3_IsDoor_Open_1 = 822) then 
		(idLevel3_IsDoor_Open_3)
		 else (idLevel3_IsDoor_Open_1);


	-- set state as inactive 
	idCheckAlarm_Level3_2
	 = if (not isInner) then 0 else idCheckAlarm_Level3_1;

	idLevel3_IsDoor_Open_5 
	= 0;
	

	(idLevel3_IsDoor_Open, idCheckAlarm_Level3) 
	= (idLevel3_IsDoor_Open_5, idCheckAlarm_Level3_2);
	

tel






-- Entry action for state :Level3_IsOcclusion
node Level3_IsOcclusion_en(idLevel3_IsOcclusion_1:int;
	idCheckAlarm_Level3_1:int;
	SENSOR_IN_Occlusion:bool;
	isInner:bool)

returns (idLevel3_IsOcclusion:int;
	idCheckAlarm_Level3:int);


var 	idLevel3_IsOcclusion_2, idLevel3_IsOcclusion_3, idLevel3_IsOcclusion_4, idLevel3_IsOcclusion_5, idLevel3_IsOcclusion_6, idLevel3_IsOcclusion_7:int;
	idCheckAlarm_Level3_2, idCheckAlarm_Level3_3, idCheckAlarm_Level3_4:int;


let



	-- set state as active 
	idCheckAlarm_Level3_2 
	= 817;
	

	
-- transition trace :
	--POINT__To__IsOcclusion_Yes_1
		(idLevel3_IsOcclusion_2) 
	= 
		 if (( SENSOR_IN_Occlusion )) then 
		IsOcclusion_Yes_en(idLevel3_IsOcclusion_1, false)
		 else (idLevel3_IsOcclusion_1);
		

-- transition trace :
	--POINT__To__IsOcclusion_No_2
		(idLevel3_IsOcclusion_3) 
	= IsOcclusion_No_en(idLevel3_IsOcclusion_2, false);
		

	(idLevel3_IsOcclusion_4, idCheckAlarm_Level3_3) 
	= 

	if ( idLevel3_IsOcclusion_1 = 0) then

	
		 if (( SENSOR_IN_Occlusion )) then 
		(idLevel3_IsOcclusion_2, idCheckAlarm_Level3_2)
		 else (idLevel3_IsOcclusion_3, idCheckAlarm_Level3_2)

	 else(idLevel3_IsOcclusion_1, idCheckAlarm_Level3_2);

	

	(idLevel3_IsOcclusion_5) 
	= 
	if ( idLevel3_IsOcclusion_1 = 818) then
	IsOcclusion_Yes_en(idLevel3_IsOcclusion_1, false)
	 else (idLevel3_IsOcclusion_1);

	

	(idLevel3_IsOcclusion_6) 
	= 
	if ( idLevel3_IsOcclusion_1 = 819) then
	IsOcclusion_No_en(idLevel3_IsOcclusion_1, false)
	 else (idLevel3_IsOcclusion_1);

	

	(idLevel3_IsOcclusion_7, idCheckAlarm_Level3_4) 
	= 
		 if ( idLevel3_IsOcclusion_1 = 0) then 
		(idLevel3_IsOcclusion_4, idCheckAlarm_Level3_3)
		 else
		 if ( idLevel3_IsOcclusion_1 = 818) then 
		(idLevel3_IsOcclusion_5, idCheckAlarm_Level3_3)
		 else
		 if ( idLevel3_IsOcclusion_1 = 819) then 
		(idLevel3_IsOcclusion_6, idCheckAlarm_Level3_3)
		 else (idLevel3_IsOcclusion_1, idCheckAlarm_Level3_2);


	(idLevel3_IsOcclusion, idCheckAlarm_Level3) 
	= (idLevel3_IsOcclusion_7, idCheckAlarm_Level3_4);
	

tel





-- Exit action for state :Level3_IsOcclusion
node Level3_IsOcclusion_ex(idLevel3_IsOcclusion_1:int;
	idCheckAlarm_Level3_1:int;
	isInner:bool)

returns (idLevel3_IsOcclusion:int;
	idCheckAlarm_Level3:int);


var 	idLevel3_IsOcclusion_2, idLevel3_IsOcclusion_3, idLevel3_IsOcclusion_4, idLevel3_IsOcclusion_5:int;
	idCheckAlarm_Level3_2:int;


let



	
	(idLevel3_IsOcclusion_2) 
	= 
	if ( idLevel3_IsOcclusion_1 = 818) then
	IsOcclusion_Yes_ex(idLevel3_IsOcclusion_1, false)
	 else (idLevel3_IsOcclusion_1);

	

	(idLevel3_IsOcclusion_3) 
	= 
	if ( idLevel3_IsOcclusion_1 = 819) then
	IsOcclusion_No_ex(idLevel3_IsOcclusion_1, false)
	 else (idLevel3_IsOcclusion_1);

	

	(idLevel3_IsOcclusion_4) 
	= 
		 if ( idLevel3_IsOcclusion_1 = 818) then 
		(idLevel3_IsOcclusion_2)
		 else
		 if ( idLevel3_IsOcclusion_1 = 819) then 
		(idLevel3_IsOcclusion_3)
		 else (idLevel3_IsOcclusion_1);


	-- set state as inactive 
	idCheckAlarm_Level3_2
	 = if (not isInner) then 0 else idCheckAlarm_Level3_1;

	idLevel3_IsOcclusion_5 
	= 0;
	

	(idLevel3_IsOcclusion, idCheckAlarm_Level3) 
	= (idLevel3_IsOcclusion_5, idCheckAlarm_Level3_2);
	

tel






-- Entry action for state :Level3_IsAirInLine
node Level3_IsAirInLine_en(idLevel3_IsAirInLine_1:int;
	idCheckAlarm_Level3_1:int;
	SENSOR_IN_Air_In_line:bool;
	isInner:bool)

returns (idLevel3_IsAirInLine:int;
	idCheckAlarm_Level3:int);


var 	idLevel3_IsAirInLine_2, idLevel3_IsAirInLine_3, idLevel3_IsAirInLine_4, idLevel3_IsAirInLine_5, idLevel3_IsAirInLine_6, idLevel3_IsAirInLine_7:int;
	idCheckAlarm_Level3_2, idCheckAlarm_Level3_3, idCheckAlarm_Level3_4:int;


let



	-- set state as active 
	idCheckAlarm_Level3_2 
	= 814;
	

	
-- transition trace :
	--POINT__To__IsAirInLine_Yes_1
		(idLevel3_IsAirInLine_2) 
	= 
		 if (( SENSOR_IN_Air_In_line )) then 
		IsAirInLine_Yes_en(idLevel3_IsAirInLine_1, false)
		 else (idLevel3_IsAirInLine_1);
		

-- transition trace :
	--POINT__To__IsAirInLine_No_2
		(idLevel3_IsAirInLine_3) 
	= IsAirInLine_No_en(idLevel3_IsAirInLine_2, false);
		

	(idLevel3_IsAirInLine_4, idCheckAlarm_Level3_3) 
	= 

	if ( idLevel3_IsAirInLine_1 = 0) then

	
		 if (( SENSOR_IN_Air_In_line )) then 
		(idLevel3_IsAirInLine_2, idCheckAlarm_Level3_2)
		 else (idLevel3_IsAirInLine_3, idCheckAlarm_Level3_2)

	 else(idLevel3_IsAirInLine_1, idCheckAlarm_Level3_2);

	

	(idLevel3_IsAirInLine_5) 
	= 
	if ( idLevel3_IsAirInLine_1 = 815) then
	IsAirInLine_Yes_en(idLevel3_IsAirInLine_1, false)
	 else (idLevel3_IsAirInLine_1);

	

	(idLevel3_IsAirInLine_6) 
	= 
	if ( idLevel3_IsAirInLine_1 = 816) then
	IsAirInLine_No_en(idLevel3_IsAirInLine_1, false)
	 else (idLevel3_IsAirInLine_1);

	

	(idLevel3_IsAirInLine_7, idCheckAlarm_Level3_4) 
	= 
		 if ( idLevel3_IsAirInLine_1 = 0) then 
		(idLevel3_IsAirInLine_4, idCheckAlarm_Level3_3)
		 else
		 if ( idLevel3_IsAirInLine_1 = 815) then 
		(idLevel3_IsAirInLine_5, idCheckAlarm_Level3_3)
		 else
		 if ( idLevel3_IsAirInLine_1 = 816) then 
		(idLevel3_IsAirInLine_6, idCheckAlarm_Level3_3)
		 else (idLevel3_IsAirInLine_1, idCheckAlarm_Level3_2);


	(idLevel3_IsAirInLine, idCheckAlarm_Level3) 
	= (idLevel3_IsAirInLine_7, idCheckAlarm_Level3_4);
	

tel





-- Exit action for state :Level3_IsAirInLine
node Level3_IsAirInLine_ex(idLevel3_IsAirInLine_1:int;
	idCheckAlarm_Level3_1:int;
	isInner:bool)

returns (idLevel3_IsAirInLine:int;
	idCheckAlarm_Level3:int);


var 	idLevel3_IsAirInLine_2, idLevel3_IsAirInLine_3, idLevel3_IsAirInLine_4, idLevel3_IsAirInLine_5:int;
	idCheckAlarm_Level3_2:int;


let



	
	(idLevel3_IsAirInLine_2) 
	= 
	if ( idLevel3_IsAirInLine_1 = 815) then
	IsAirInLine_Yes_ex(idLevel3_IsAirInLine_1, false)
	 else (idLevel3_IsAirInLine_1);

	

	(idLevel3_IsAirInLine_3) 
	= 
	if ( idLevel3_IsAirInLine_1 = 816) then
	IsAirInLine_No_ex(idLevel3_IsAirInLine_1, false)
	 else (idLevel3_IsAirInLine_1);

	

	(idLevel3_IsAirInLine_4) 
	= 
		 if ( idLevel3_IsAirInLine_1 = 815) then 
		(idLevel3_IsAirInLine_2)
		 else
		 if ( idLevel3_IsAirInLine_1 = 816) then 
		(idLevel3_IsAirInLine_3)
		 else (idLevel3_IsAirInLine_1);


	-- set state as inactive 
	idCheckAlarm_Level3_2
	 = if (not isInner) then 0 else idCheckAlarm_Level3_1;

	idLevel3_IsAirInLine_5 
	= 0;
	

	(idLevel3_IsAirInLine, idCheckAlarm_Level3) 
	= (idLevel3_IsAirInLine_5, idCheckAlarm_Level3_2);
	

tel






-- Entry action for state :Level3_IsOverInfusionVTBI
node Level3_IsOverInfusionVTBI_en(idLevel3_IsOverInfusionVTBI_1:int;
	idCheckAlarm_Level3_1:int;
	SYS_STAT_IN_In_Therapy:bool;
	SYS_STAT_IN_Volume_Infused:int;
	DB_IN_VTBI_High:int;
	isInner:bool)

returns (idLevel3_IsOverInfusionVTBI:int;
	idCheckAlarm_Level3:int);


var 	idLevel3_IsOverInfusionVTBI_2, idLevel3_IsOverInfusionVTBI_3, idLevel3_IsOverInfusionVTBI_4, idLevel3_IsOverInfusionVTBI_5, idLevel3_IsOverInfusionVTBI_6, idLevel3_IsOverInfusionVTBI_7:int;
	idCheckAlarm_Level3_2, idCheckAlarm_Level3_3, idCheckAlarm_Level3_4:int;


let



	-- set state as active 
	idCheckAlarm_Level3_2 
	= 811;
	

	
-- transition trace :
	--POINT__To__IsOverInfusionVTBI_Yes_1
		(idLevel3_IsOverInfusionVTBI_2) 
	= 
		 if (( SYS_STAT_IN_In_Therapy and SYS_STAT_IN_Volume_Infused>DB_IN_VTBI_High )) then 
		IsOverInfusionVTBI_Yes_en(idLevel3_IsOverInfusionVTBI_1, false)
		 else (idLevel3_IsOverInfusionVTBI_1);
		

-- transition trace :
	--POINT__To__IsOverInfusionVTBI_No_2
		(idLevel3_IsOverInfusionVTBI_3) 
	= IsOverInfusionVTBI_No_en(idLevel3_IsOverInfusionVTBI_2, false);
		

	(idLevel3_IsOverInfusionVTBI_4, idCheckAlarm_Level3_3) 
	= 

	if ( idLevel3_IsOverInfusionVTBI_1 = 0) then

	
		 if (( SYS_STAT_IN_In_Therapy and SYS_STAT_IN_Volume_Infused>DB_IN_VTBI_High )) then 
		(idLevel3_IsOverInfusionVTBI_2, idCheckAlarm_Level3_2)
		 else (idLevel3_IsOverInfusionVTBI_3, idCheckAlarm_Level3_2)

	 else(idLevel3_IsOverInfusionVTBI_1, idCheckAlarm_Level3_2);

	

	(idLevel3_IsOverInfusionVTBI_5) 
	= 
	if ( idLevel3_IsOverInfusionVTBI_1 = 812) then
	IsOverInfusionVTBI_Yes_en(idLevel3_IsOverInfusionVTBI_1, false)
	 else (idLevel3_IsOverInfusionVTBI_1);

	

	(idLevel3_IsOverInfusionVTBI_6) 
	= 
	if ( idLevel3_IsOverInfusionVTBI_1 = 813) then
	IsOverInfusionVTBI_No_en(idLevel3_IsOverInfusionVTBI_1, false)
	 else (idLevel3_IsOverInfusionVTBI_1);

	

	(idLevel3_IsOverInfusionVTBI_7, idCheckAlarm_Level3_4) 
	= 
		 if ( idLevel3_IsOverInfusionVTBI_1 = 0) then 
		(idLevel3_IsOverInfusionVTBI_4, idCheckAlarm_Level3_3)
		 else
		 if ( idLevel3_IsOverInfusionVTBI_1 = 812) then 
		(idLevel3_IsOverInfusionVTBI_5, idCheckAlarm_Level3_3)
		 else
		 if ( idLevel3_IsOverInfusionVTBI_1 = 813) then 
		(idLevel3_IsOverInfusionVTBI_6, idCheckAlarm_Level3_3)
		 else (idLevel3_IsOverInfusionVTBI_1, idCheckAlarm_Level3_2);


	(idLevel3_IsOverInfusionVTBI, idCheckAlarm_Level3) 
	= (idLevel3_IsOverInfusionVTBI_7, idCheckAlarm_Level3_4);
	

tel





-- Exit action for state :Level3_IsOverInfusionVTBI
node Level3_IsOverInfusionVTBI_ex(idLevel3_IsOverInfusionVTBI_1:int;
	idCheckAlarm_Level3_1:int;
	isInner:bool)

returns (idLevel3_IsOverInfusionVTBI:int;
	idCheckAlarm_Level3:int);


var 	idLevel3_IsOverInfusionVTBI_2, idLevel3_IsOverInfusionVTBI_3, idLevel3_IsOverInfusionVTBI_4, idLevel3_IsOverInfusionVTBI_5:int;
	idCheckAlarm_Level3_2:int;


let



	
	(idLevel3_IsOverInfusionVTBI_2) 
	= 
	if ( idLevel3_IsOverInfusionVTBI_1 = 812) then
	IsOverInfusionVTBI_Yes_ex(idLevel3_IsOverInfusionVTBI_1, false)
	 else (idLevel3_IsOverInfusionVTBI_1);

	

	(idLevel3_IsOverInfusionVTBI_3) 
	= 
	if ( idLevel3_IsOverInfusionVTBI_1 = 813) then
	IsOverInfusionVTBI_No_ex(idLevel3_IsOverInfusionVTBI_1, false)
	 else (idLevel3_IsOverInfusionVTBI_1);

	

	(idLevel3_IsOverInfusionVTBI_4) 
	= 
		 if ( idLevel3_IsOverInfusionVTBI_1 = 812) then 
		(idLevel3_IsOverInfusionVTBI_2)
		 else
		 if ( idLevel3_IsOverInfusionVTBI_1 = 813) then 
		(idLevel3_IsOverInfusionVTBI_3)
		 else (idLevel3_IsOverInfusionVTBI_1);


	-- set state as inactive 
	idCheckAlarm_Level3_2
	 = if (not isInner) then 0 else idCheckAlarm_Level3_1;

	idLevel3_IsOverInfusionVTBI_5 
	= 0;
	

	(idLevel3_IsOverInfusionVTBI, idCheckAlarm_Level3) 
	= (idLevel3_IsOverInfusionVTBI_5, idCheckAlarm_Level3_2);
	

tel






-- Entry action for state :Level3_IsOverInfusionFlowRate
node Level3_IsOverInfusionFlowRate_en(idLevel3_IsOverInfusionFlowRate_1:int;
	idCheckAlarm_Level3_1:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_High:int;
	IM_IN_Flow_Rate_Commanded:int;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SYS_STAT_IN_In_Therapy:bool;
	overInfusion_1:int;
	isInner:bool)

returns (idLevel3_IsOverInfusionFlowRate:int;
	idCheckAlarm_Level3:int;
	overInfusion:int);


var 	idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionFlowRate_3, idLevel3_IsOverInfusionFlowRate_4, idLevel3_IsOverInfusionFlowRate_5, idLevel3_IsOverInfusionFlowRate_6, idLevel3_IsOverInfusionFlowRate_7, idLevel3_IsOverInfusionFlowRate_8, idLevel3_IsOverInfusionFlowRate_9:int;
	idCheckAlarm_Level3_2, idCheckAlarm_Level3_3, idCheckAlarm_Level3_4:int;
	overInfusion_2, overInfusion_3, overInfusion_4, overInfusion_5, overInfusion_6, overInfusion_7, overInfusion_8, overInfusion_9, overInfusion_10:int;


let



	-- set state as active 
	idCheckAlarm_Level3_2 
	= 806;
	

	(overInfusion_2) 
	= if (not isInner) then checkOverInfusionFlowRate(overInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min)
	 else (overInfusion_1);
	

	
-- transition trace :
	--POINT__To__IsOverInfusionFlowRate_Yes_1
		(idLevel3_IsOverInfusionFlowRate_2, overInfusion_3) 
	= 
		 if ((  overInfusion_2 =1 )) then 
		IsOverInfusionFlowRate_Yes_en(idLevel3_IsOverInfusionFlowRate_1, overInfusion_2, false)
		 else (idLevel3_IsOverInfusionFlowRate_1, overInfusion_2);
		

-- transition trace :
	--POINT__To__IsOverInfusionFlowRate_Monitor_2
		(idLevel3_IsOverInfusionFlowRate_3, overInfusion_4) 
	= 
		 if ((  overInfusion_3 =2 )) then 
		IsOverInfusionFlowRate_Monitor_en(idLevel3_IsOverInfusionFlowRate_2, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, overInfusion_3, false)
		 else (idLevel3_IsOverInfusionFlowRate_2, overInfusion_3);
		

-- transition trace :
	--POINT__To__IsOverInfusionFlowRate_Check_3
		(idLevel3_IsOverInfusionFlowRate_4, overInfusion_5) 
	= IsOverInfusionFlowRate_Check_en(idLevel3_IsOverInfusionFlowRate_3, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, overInfusion_4, false);
		

	(idLevel3_IsOverInfusionFlowRate_5, idCheckAlarm_Level3_3, overInfusion_6) 
	= 

	if ( idLevel3_IsOverInfusionFlowRate_1 = 0) then

	
		 if ((  overInfusion_2 =1 )) then 
		(idLevel3_IsOverInfusionFlowRate_2, idCheckAlarm_Level3_2, overInfusion_3)
		 else
		 if ((  overInfusion_3 =2 )) then 
		(idLevel3_IsOverInfusionFlowRate_3, idCheckAlarm_Level3_2, overInfusion_4)
		 else (idLevel3_IsOverInfusionFlowRate_4, idCheckAlarm_Level3_2, overInfusion_5)

	 else(idLevel3_IsOverInfusionFlowRate_1, idCheckAlarm_Level3_2, overInfusion_2);

	

	(idLevel3_IsOverInfusionFlowRate_6, overInfusion_7) 
	= 
	if ( idLevel3_IsOverInfusionFlowRate_1 = 807) then
	IsOverInfusionFlowRate_Yes_en(idLevel3_IsOverInfusionFlowRate_1, overInfusion_2, false)
	 else (idLevel3_IsOverInfusionFlowRate_1, overInfusion_2);

	

	(idLevel3_IsOverInfusionFlowRate_7, overInfusion_8) 
	= 
	if ( idLevel3_IsOverInfusionFlowRate_1 = 808) then
	IsOverInfusionFlowRate_Check_en(idLevel3_IsOverInfusionFlowRate_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, overInfusion_2, false)
	 else (idLevel3_IsOverInfusionFlowRate_1, overInfusion_2);

	

	(idLevel3_IsOverInfusionFlowRate_8, overInfusion_9) 
	= 
	if ( idLevel3_IsOverInfusionFlowRate_1 = 809) then
	IsOverInfusionFlowRate_Monitor_en(idLevel3_IsOverInfusionFlowRate_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, overInfusion_2, false)
	 else (idLevel3_IsOverInfusionFlowRate_1, overInfusion_2);

	

	(idLevel3_IsOverInfusionFlowRate_9, idCheckAlarm_Level3_4, overInfusion_10) 
	= 
		 if ( idLevel3_IsOverInfusionFlowRate_1 = 0) then 
		(idLevel3_IsOverInfusionFlowRate_5, idCheckAlarm_Level3_3, overInfusion_6)
		 else
		 if ( idLevel3_IsOverInfusionFlowRate_1 = 807) then 
		(idLevel3_IsOverInfusionFlowRate_6, idCheckAlarm_Level3_3, overInfusion_7)
		 else
		 if ( idLevel3_IsOverInfusionFlowRate_1 = 808) then 
		(idLevel3_IsOverInfusionFlowRate_7, idCheckAlarm_Level3_3, overInfusion_8)
		 else
		 if ( idLevel3_IsOverInfusionFlowRate_1 = 809) then 
		(idLevel3_IsOverInfusionFlowRate_8, idCheckAlarm_Level3_3, overInfusion_9)
		 else (idLevel3_IsOverInfusionFlowRate_1, idCheckAlarm_Level3_2, overInfusion_2);


	(idLevel3_IsOverInfusionFlowRate, idCheckAlarm_Level3, overInfusion) 
	= (idLevel3_IsOverInfusionFlowRate_9, idCheckAlarm_Level3_4, overInfusion_10);
	

tel





--During action for state :Level3_IsOverInfusionFlowRate
node Level3_IsOverInfusionFlowRate_du(overInfusion_1:int;
	SYS_STAT_IN_In_Therapy:bool;
	SENSOR_IN_Flow_Rate_Monitored:int;
	DB_IN_Flow_Rate_High:int;
	IM_IN_Flow_Rate_Commanded:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int)

returns (overInfusion:int);


var 	overInfusion_2:int;


let



	(overInfusion_2) 
	= checkOverInfusionFlowRate(overInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min);
	

	(overInfusion) 
	= (overInfusion_2);
	

tel





-- Exit action for state :Level3_IsOverInfusionFlowRate
node Level3_IsOverInfusionFlowRate_ex(idLevel3_IsOverInfusionFlowRate_1:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_High:int;
	IM_IN_Flow_Rate_Commanded:int;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SYS_STAT_IN_In_Therapy:bool;
	overInfusion_1:int;
	idCheckAlarm_Level3_1:int;
	isInner:bool)

returns (idLevel3_IsOverInfusionFlowRate:int;
	overInfusion:int;
	idCheckAlarm_Level3:int);


var 	idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionFlowRate_3, idLevel3_IsOverInfusionFlowRate_4, idLevel3_IsOverInfusionFlowRate_5, idLevel3_IsOverInfusionFlowRate_6:int;
	overInfusion_2, overInfusion_3, overInfusion_4, overInfusion_5:int;
	idCheckAlarm_Level3_2:int;


let



	
	(idLevel3_IsOverInfusionFlowRate_2) 
	= 
	if ( idLevel3_IsOverInfusionFlowRate_1 = 807) then
	IsOverInfusionFlowRate_Yes_ex(idLevel3_IsOverInfusionFlowRate_1, false)
	 else (idLevel3_IsOverInfusionFlowRate_1);

	

	(overInfusion_2, idLevel3_IsOverInfusionFlowRate_3) 
	= 
	if ( idLevel3_IsOverInfusionFlowRate_1 = 808) then
	IsOverInfusionFlowRate_Check_ex(overInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, idLevel3_IsOverInfusionFlowRate_1, false)
	 else (overInfusion_1, idLevel3_IsOverInfusionFlowRate_1);

	

	(overInfusion_3, idLevel3_IsOverInfusionFlowRate_4) 
	= 
	if ( idLevel3_IsOverInfusionFlowRate_1 = 809) then
	IsOverInfusionFlowRate_Monitor_ex(overInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, idLevel3_IsOverInfusionFlowRate_1, false)
	 else (overInfusion_1, idLevel3_IsOverInfusionFlowRate_1);

	

	(idLevel3_IsOverInfusionFlowRate_5, overInfusion_4) 
	= 
		 if ( idLevel3_IsOverInfusionFlowRate_1 = 807) then 
		(idLevel3_IsOverInfusionFlowRate_2, overInfusion_1)
		 else
		 if ( idLevel3_IsOverInfusionFlowRate_1 = 808) then 
		(idLevel3_IsOverInfusionFlowRate_3, overInfusion_2)
		 else
		 if ( idLevel3_IsOverInfusionFlowRate_1 = 809) then 
		(idLevel3_IsOverInfusionFlowRate_4, overInfusion_3)
		 else (idLevel3_IsOverInfusionFlowRate_1, overInfusion_1);


	(overInfusion_5) 
	= if (not isInner) then checkOverInfusionFlowRate(overInfusion_4, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min)
	 else (overInfusion_4);
	

	-- set state as inactive 
	idCheckAlarm_Level3_2
	 = if (not isInner) then 0 else idCheckAlarm_Level3_1;

	idLevel3_IsOverInfusionFlowRate_6 
	= 0;
	

	(idLevel3_IsOverInfusionFlowRate, overInfusion, idCheckAlarm_Level3) 
	= (idLevel3_IsOverInfusionFlowRate_6, overInfusion_5, idCheckAlarm_Level3_2);
	

tel






-- Entry action for state :Level4_IsEnviromentalError
node Level4_IsEnviromentalError_en(idLevel4_IsEnviromentalError_1:int;
	idCheckAlarm_Level4_1:int;
	SENSOR_IN_Temperature_Out_Of_Range:bool;
	SENSOR_IN_Humidity_Out_Of_Range:bool;
	SENSOR_IN_Air_Pressure_Out_Of_Range:bool;
	isInner:bool)

returns (idLevel4_IsEnviromentalError:int;
	idCheckAlarm_Level4:int);


var 	idLevel4_IsEnviromentalError_2, idLevel4_IsEnviromentalError_3, idLevel4_IsEnviromentalError_4, idLevel4_IsEnviromentalError_5, idLevel4_IsEnviromentalError_6, idLevel4_IsEnviromentalError_7:int;
	idCheckAlarm_Level4_2, idCheckAlarm_Level4_3, idCheckAlarm_Level4_4:int;


let



	-- set state as active 
	idCheckAlarm_Level4_2 
	= 802;
	

	
-- transition trace :
	--POINT__To__IsEnviromentalError_Yes_1
		(idLevel4_IsEnviromentalError_2) 
	= 
		 if (( SENSOR_IN_Temperature_Out_Of_Range or SENSOR_IN_Humidity_Out_Of_Range or SENSOR_IN_Air_Pressure_Out_Of_Range )) then 
		IsEnviromentalError_Yes_en(idLevel4_IsEnviromentalError_1, false)
		 else (idLevel4_IsEnviromentalError_1);
		

-- transition trace :
	--POINT__To__IsEnviromentalError_No_2
		(idLevel4_IsEnviromentalError_3) 
	= IsEnviromentalError_No_en(idLevel4_IsEnviromentalError_2, false);
		

	(idLevel4_IsEnviromentalError_4, idCheckAlarm_Level4_3) 
	= 

	if ( idLevel4_IsEnviromentalError_1 = 0) then

	
		 if (( SENSOR_IN_Temperature_Out_Of_Range or SENSOR_IN_Humidity_Out_Of_Range or SENSOR_IN_Air_Pressure_Out_Of_Range )) then 
		(idLevel4_IsEnviromentalError_2, idCheckAlarm_Level4_2)
		 else (idLevel4_IsEnviromentalError_3, idCheckAlarm_Level4_2)

	 else(idLevel4_IsEnviromentalError_1, idCheckAlarm_Level4_2);

	

	(idLevel4_IsEnviromentalError_5) 
	= 
	if ( idLevel4_IsEnviromentalError_1 = 803) then
	IsEnviromentalError_Yes_en(idLevel4_IsEnviromentalError_1, false)
	 else (idLevel4_IsEnviromentalError_1);

	

	(idLevel4_IsEnviromentalError_6) 
	= 
	if ( idLevel4_IsEnviromentalError_1 = 804) then
	IsEnviromentalError_No_en(idLevel4_IsEnviromentalError_1, false)
	 else (idLevel4_IsEnviromentalError_1);

	

	(idLevel4_IsEnviromentalError_7, idCheckAlarm_Level4_4) 
	= 
		 if ( idLevel4_IsEnviromentalError_1 = 0) then 
		(idLevel4_IsEnviromentalError_4, idCheckAlarm_Level4_3)
		 else
		 if ( idLevel4_IsEnviromentalError_1 = 803) then 
		(idLevel4_IsEnviromentalError_5, idCheckAlarm_Level4_3)
		 else
		 if ( idLevel4_IsEnviromentalError_1 = 804) then 
		(idLevel4_IsEnviromentalError_6, idCheckAlarm_Level4_3)
		 else (idLevel4_IsEnviromentalError_1, idCheckAlarm_Level4_2);


	(idLevel4_IsEnviromentalError, idCheckAlarm_Level4) 
	= (idLevel4_IsEnviromentalError_7, idCheckAlarm_Level4_4);
	

tel





-- Exit action for state :Level4_IsEnviromentalError
node Level4_IsEnviromentalError_ex(idLevel4_IsEnviromentalError_1:int;
	idCheckAlarm_Level4_1:int;
	isInner:bool)

returns (idLevel4_IsEnviromentalError:int;
	idCheckAlarm_Level4:int);


var 	idLevel4_IsEnviromentalError_2, idLevel4_IsEnviromentalError_3, idLevel4_IsEnviromentalError_4, idLevel4_IsEnviromentalError_5:int;
	idCheckAlarm_Level4_2:int;


let



	
	(idLevel4_IsEnviromentalError_2) 
	= 
	if ( idLevel4_IsEnviromentalError_1 = 803) then
	IsEnviromentalError_Yes_ex(idLevel4_IsEnviromentalError_1, false)
	 else (idLevel4_IsEnviromentalError_1);

	

	(idLevel4_IsEnviromentalError_3) 
	= 
	if ( idLevel4_IsEnviromentalError_1 = 804) then
	IsEnviromentalError_No_ex(idLevel4_IsEnviromentalError_1, false)
	 else (idLevel4_IsEnviromentalError_1);

	

	(idLevel4_IsEnviromentalError_4) 
	= 
		 if ( idLevel4_IsEnviromentalError_1 = 803) then 
		(idLevel4_IsEnviromentalError_2)
		 else
		 if ( idLevel4_IsEnviromentalError_1 = 804) then 
		(idLevel4_IsEnviromentalError_3)
		 else (idLevel4_IsEnviromentalError_1);


	-- set state as inactive 
	idCheckAlarm_Level4_2
	 = if (not isInner) then 0 else idCheckAlarm_Level4_1;

	idLevel4_IsEnviromentalError_5 
	= 0;
	

	(idLevel4_IsEnviromentalError, idCheckAlarm_Level4) 
	= (idLevel4_IsEnviromentalError_5, idCheckAlarm_Level4_2);
	

tel






-- Entry action for state :Level4_IsHardwareError
node Level4_IsHardwareError_en(idLevel4_IsHardwareError_1:int;
	idCheckAlarm_Level4_1:int;
	SENSOR_IN_Battery_Depleted:bool;
	SENSOR_IN_RTC_Error:bool;
	SENSOR_IN_CPU_Error:bool;
	SENSOR_IN_Memory_Corrupted:bool;
	SENSOR_IN_Pump_Too_Hot:bool;
	SENSOR_IN_WatchDog_Interrupt_Detected:bool;
	isInner:bool)

returns (idLevel4_IsHardwareError:int;
	idCheckAlarm_Level4:int);


var 	idLevel4_IsHardwareError_2, idLevel4_IsHardwareError_3, idLevel4_IsHardwareError_4, idLevel4_IsHardwareError_5, idLevel4_IsHardwareError_6, idLevel4_IsHardwareError_7:int;
	idCheckAlarm_Level4_2, idCheckAlarm_Level4_3, idCheckAlarm_Level4_4:int;


let



	-- set state as active 
	idCheckAlarm_Level4_2 
	= 799;
	

	
-- transition trace :
	--POINT__To__IsHardwareError_Yes_1
		(idLevel4_IsHardwareError_2) 
	= 
		 if (( SENSOR_IN_Battery_Depleted or SENSOR_IN_RTC_Error or SENSOR_IN_CPU_Error or SENSOR_IN_Memory_Corrupted or SENSOR_IN_Pump_Too_Hot or SENSOR_IN_WatchDog_Interrupt_Detected )) then 
		IsHardwareError_Yes_en(idLevel4_IsHardwareError_1, false)
		 else (idLevel4_IsHardwareError_1);
		

-- transition trace :
	--POINT__To__IsHardwareError_No_2
		(idLevel4_IsHardwareError_3) 
	= IsHardwareError_No_en(idLevel4_IsHardwareError_2, false);
		

	(idLevel4_IsHardwareError_4, idCheckAlarm_Level4_3) 
	= 

	if ( idLevel4_IsHardwareError_1 = 0) then

	
		 if (( SENSOR_IN_Battery_Depleted or SENSOR_IN_RTC_Error or SENSOR_IN_CPU_Error or SENSOR_IN_Memory_Corrupted or SENSOR_IN_Pump_Too_Hot or SENSOR_IN_WatchDog_Interrupt_Detected )) then 
		(idLevel4_IsHardwareError_2, idCheckAlarm_Level4_2)
		 else (idLevel4_IsHardwareError_3, idCheckAlarm_Level4_2)

	 else(idLevel4_IsHardwareError_1, idCheckAlarm_Level4_2);

	

	(idLevel4_IsHardwareError_5) 
	= 
	if ( idLevel4_IsHardwareError_1 = 800) then
	IsHardwareError_Yes_en(idLevel4_IsHardwareError_1, false)
	 else (idLevel4_IsHardwareError_1);

	

	(idLevel4_IsHardwareError_6) 
	= 
	if ( idLevel4_IsHardwareError_1 = 801) then
	IsHardwareError_No_en(idLevel4_IsHardwareError_1, false)
	 else (idLevel4_IsHardwareError_1);

	

	(idLevel4_IsHardwareError_7, idCheckAlarm_Level4_4) 
	= 
		 if ( idLevel4_IsHardwareError_1 = 0) then 
		(idLevel4_IsHardwareError_4, idCheckAlarm_Level4_3)
		 else
		 if ( idLevel4_IsHardwareError_1 = 800) then 
		(idLevel4_IsHardwareError_5, idCheckAlarm_Level4_3)
		 else
		 if ( idLevel4_IsHardwareError_1 = 801) then 
		(idLevel4_IsHardwareError_6, idCheckAlarm_Level4_3)
		 else (idLevel4_IsHardwareError_1, idCheckAlarm_Level4_2);


	(idLevel4_IsHardwareError, idCheckAlarm_Level4) 
	= (idLevel4_IsHardwareError_7, idCheckAlarm_Level4_4);
	

tel





-- Exit action for state :Level4_IsHardwareError
node Level4_IsHardwareError_ex(idLevel4_IsHardwareError_1:int;
	idCheckAlarm_Level4_1:int;
	isInner:bool)

returns (idLevel4_IsHardwareError:int;
	idCheckAlarm_Level4:int);


var 	idLevel4_IsHardwareError_2, idLevel4_IsHardwareError_3, idLevel4_IsHardwareError_4, idLevel4_IsHardwareError_5:int;
	idCheckAlarm_Level4_2:int;


let



	
	(idLevel4_IsHardwareError_2) 
	= 
	if ( idLevel4_IsHardwareError_1 = 800) then
	IsHardwareError_Yes_ex(idLevel4_IsHardwareError_1, false)
	 else (idLevel4_IsHardwareError_1);

	

	(idLevel4_IsHardwareError_3) 
	= 
	if ( idLevel4_IsHardwareError_1 = 801) then
	IsHardwareError_No_ex(idLevel4_IsHardwareError_1, false)
	 else (idLevel4_IsHardwareError_1);

	

	(idLevel4_IsHardwareError_4) 
	= 
		 if ( idLevel4_IsHardwareError_1 = 800) then 
		(idLevel4_IsHardwareError_2)
		 else
		 if ( idLevel4_IsHardwareError_1 = 801) then 
		(idLevel4_IsHardwareError_3)
		 else (idLevel4_IsHardwareError_1);


	-- set state as inactive 
	idCheckAlarm_Level4_2
	 = if (not isInner) then 0 else idCheckAlarm_Level4_1;

	idLevel4_IsHardwareError_5 
	= 0;
	

	(idLevel4_IsHardwareError, idCheckAlarm_Level4) 
	= (idLevel4_IsHardwareError_5, idCheckAlarm_Level4_2);
	

tel






-- Entry action for state :Level4_IsEmptyReservoir
node Level4_IsEmptyReservoir_en(idLevel4_IsEmptyReservoir_1:int;
	idCheckAlarm_Level4_1:int;
	SYS_STAT_IN_In_Therapy:bool;
	SYS_STAT_IN_Reservoir_Empty:bool;
	isInner:bool)

returns (idLevel4_IsEmptyReservoir:int;
	idCheckAlarm_Level4:int);


var 	idLevel4_IsEmptyReservoir_2, idLevel4_IsEmptyReservoir_3, idLevel4_IsEmptyReservoir_4, idLevel4_IsEmptyReservoir_5, idLevel4_IsEmptyReservoir_6, idLevel4_IsEmptyReservoir_7:int;
	idCheckAlarm_Level4_2, idCheckAlarm_Level4_3, idCheckAlarm_Level4_4:int;


let



	-- set state as active 
	idCheckAlarm_Level4_2 
	= 796;
	

	
-- transition trace :
	--POINT__To__IsEmptyReservoir_Yes_1
		(idLevel4_IsEmptyReservoir_2) 
	= 
		 if (( SYS_STAT_IN_In_Therapy and SYS_STAT_IN_Reservoir_Empty )) then 
		IsEmptyReservoir_Yes_en(idLevel4_IsEmptyReservoir_1, false)
		 else (idLevel4_IsEmptyReservoir_1);
		

-- transition trace :
	--POINT__To__IsEmptyReservoir_No_2
		(idLevel4_IsEmptyReservoir_3) 
	= IsEmptyReservoir_No_en(idLevel4_IsEmptyReservoir_2, false);
		

	(idLevel4_IsEmptyReservoir_4, idCheckAlarm_Level4_3) 
	= 

	if ( idLevel4_IsEmptyReservoir_1 = 0) then

	
		 if (( SYS_STAT_IN_In_Therapy and SYS_STAT_IN_Reservoir_Empty )) then 
		(idLevel4_IsEmptyReservoir_2, idCheckAlarm_Level4_2)
		 else (idLevel4_IsEmptyReservoir_3, idCheckAlarm_Level4_2)

	 else(idLevel4_IsEmptyReservoir_1, idCheckAlarm_Level4_2);

	

	(idLevel4_IsEmptyReservoir_5) 
	= 
	if ( idLevel4_IsEmptyReservoir_1 = 797) then
	IsEmptyReservoir_No_en(idLevel4_IsEmptyReservoir_1, false)
	 else (idLevel4_IsEmptyReservoir_1);

	

	(idLevel4_IsEmptyReservoir_6) 
	= 
	if ( idLevel4_IsEmptyReservoir_1 = 798) then
	IsEmptyReservoir_Yes_en(idLevel4_IsEmptyReservoir_1, false)
	 else (idLevel4_IsEmptyReservoir_1);

	

	(idLevel4_IsEmptyReservoir_7, idCheckAlarm_Level4_4) 
	= 
		 if ( idLevel4_IsEmptyReservoir_1 = 0) then 
		(idLevel4_IsEmptyReservoir_4, idCheckAlarm_Level4_3)
		 else
		 if ( idLevel4_IsEmptyReservoir_1 = 797) then 
		(idLevel4_IsEmptyReservoir_5, idCheckAlarm_Level4_3)
		 else
		 if ( idLevel4_IsEmptyReservoir_1 = 798) then 
		(idLevel4_IsEmptyReservoir_6, idCheckAlarm_Level4_3)
		 else (idLevel4_IsEmptyReservoir_1, idCheckAlarm_Level4_2);


	(idLevel4_IsEmptyReservoir, idCheckAlarm_Level4) 
	= (idLevel4_IsEmptyReservoir_7, idCheckAlarm_Level4_4);
	

tel





-- Exit action for state :Level4_IsEmptyReservoir
node Level4_IsEmptyReservoir_ex(idLevel4_IsEmptyReservoir_1:int;
	idCheckAlarm_Level4_1:int;
	isInner:bool)

returns (idLevel4_IsEmptyReservoir:int;
	idCheckAlarm_Level4:int);


var 	idLevel4_IsEmptyReservoir_2, idLevel4_IsEmptyReservoir_3, idLevel4_IsEmptyReservoir_4, idLevel4_IsEmptyReservoir_5:int;
	idCheckAlarm_Level4_2:int;


let



	
	(idLevel4_IsEmptyReservoir_2) 
	= 
	if ( idLevel4_IsEmptyReservoir_1 = 797) then
	IsEmptyReservoir_No_ex(idLevel4_IsEmptyReservoir_1, false)
	 else (idLevel4_IsEmptyReservoir_1);

	

	(idLevel4_IsEmptyReservoir_3) 
	= 
	if ( idLevel4_IsEmptyReservoir_1 = 798) then
	IsEmptyReservoir_Yes_ex(idLevel4_IsEmptyReservoir_1, false)
	 else (idLevel4_IsEmptyReservoir_1);

	

	(idLevel4_IsEmptyReservoir_4) 
	= 
		 if ( idLevel4_IsEmptyReservoir_1 = 797) then 
		(idLevel4_IsEmptyReservoir_2)
		 else
		 if ( idLevel4_IsEmptyReservoir_1 = 798) then 
		(idLevel4_IsEmptyReservoir_3)
		 else (idLevel4_IsEmptyReservoir_1);


	-- set state as inactive 
	idCheckAlarm_Level4_2
	 = if (not isInner) then 0 else idCheckAlarm_Level4_1;

	idLevel4_IsEmptyReservoir_5 
	= 0;
	

	(idLevel4_IsEmptyReservoir, idCheckAlarm_Level4) 
	= (idLevel4_IsEmptyReservoir_5, idCheckAlarm_Level4_2);
	

tel






-- Entry action for state :CancelAlarm_OFF
node CancelAlarm_OFF_en(idCheckAlarm_CancelAlarm_1:int;
	isInner:bool)

returns (idCheckAlarm_CancelAlarm:int);


var 	idCheckAlarm_CancelAlarm_2:int;


let



	-- set state as active 
	idCheckAlarm_CancelAlarm_2 
	= 793;
	

	(idCheckAlarm_CancelAlarm) 
	= (idCheckAlarm_CancelAlarm_2);
	

tel





-- Exit action for state :CancelAlarm_OFF
node CancelAlarm_OFF_ex(idCheckAlarm_CancelAlarm_1:int;
	isInner:bool)

returns (idCheckAlarm_CancelAlarm:int);


var 	idCheckAlarm_CancelAlarm_2:int;


let



	-- set state as inactive 
	idCheckAlarm_CancelAlarm_2
	 = if (not isInner) then 0 else idCheckAlarm_CancelAlarm_1;


	(idCheckAlarm_CancelAlarm) 
	= (idCheckAlarm_CancelAlarm_2);
	

tel






-- Entry action for state :CancelAlarm_ON
node CancelAlarm_ON_en(idCheckAlarm_CancelAlarm_1:int;
	currentAlarm_1:int;
	cancelAlarm_1:int;
	ALARM_OUT_Log_Message_ID_1:int;
	isInner:bool)

returns (idCheckAlarm_CancelAlarm:int;
	currentAlarm:int;
	cancelAlarm:int;
	ALARM_OUT_Log_Message_ID:int);


var 	idCheckAlarm_CancelAlarm_2:int;
	cancelAlarm_2:int;
	ALARM_OUT_Log_Message_ID_2:int;


let



	-- set state as active 
	idCheckAlarm_CancelAlarm_2 
	= 792;
	

	cancelAlarm_2 
	= if (not isInner) then  currentAlarm_1 
	 else cancelAlarm_1;
	

	(ALARM_OUT_Log_Message_ID_2) 
	= if (not isInner) then writeLog(3, ALARM_OUT_Log_Message_ID_1)
	 else (ALARM_OUT_Log_Message_ID_1);
	

	(idCheckAlarm_CancelAlarm, currentAlarm, cancelAlarm, ALARM_OUT_Log_Message_ID) 
	= (idCheckAlarm_CancelAlarm_2, currentAlarm_1, cancelAlarm_2, ALARM_OUT_Log_Message_ID_2);
	

tel





--During action for state :CancelAlarm_ON
node CancelAlarm_ON_du(currentAlarm_1:int;
	cancelAlarm_1:int)

returns (currentAlarm:int;
	cancelAlarm:int);


var 	cancelAlarm_2:int;


let



	cancelAlarm_2 
	=  currentAlarm_1 ;
	

	(currentAlarm, cancelAlarm) 
	= (currentAlarm_1, cancelAlarm_2);
	

tel





-- Exit action for state :CancelAlarm_ON
node CancelAlarm_ON_ex(idCheckAlarm_CancelAlarm_1:int;
	isInner:bool)

returns (idCheckAlarm_CancelAlarm:int);


var 	idCheckAlarm_CancelAlarm_2:int;


let



	-- set state as inactive 
	idCheckAlarm_CancelAlarm_2
	 = if (not isInner) then 0 else idCheckAlarm_CancelAlarm_1;


	(idCheckAlarm_CancelAlarm) 
	= (idCheckAlarm_CancelAlarm_2);
	

tel






-- Entry action for state :Notification_Audio
node Notification_Audio_en(idNotification_Audio_1:int;
	idAlarms_Notification_1:int;
	OP_CMD_IN_Disable_Audio:int;
	ALARM_OUT_Is_Audio_Disabled_1:int;
	ALARM_OUT_Audio_Notification_Command_1:int;
	audioTimer_1:int;
	ALARM_OUT_Highest_Level_Alarm_1:int;
	CONST_IN_Audio_Level:int;
	isInner:bool)

returns (idNotification_Audio:int;
	idAlarms_Notification:int;
	ALARM_OUT_Is_Audio_Disabled:int;
	ALARM_OUT_Audio_Notification_Command:int;
	audioTimer:int);


var 	idNotification_Audio_2, idNotification_Audio_3, idNotification_Audio_4, idNotification_Audio_5, idNotification_Audio_6, idNotification_Audio_7, idNotification_Audio_8, idNotification_Audio_9, idNotification_Audio_10, idNotification_Audio_11:int;
	idAlarms_Notification_2, idAlarms_Notification_3, idAlarms_Notification_4:int;
	ALARM_OUT_Is_Audio_Disabled_2, ALARM_OUT_Is_Audio_Disabled_3, ALARM_OUT_Is_Audio_Disabled_4:int;
	ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Audio_Notification_Command_3, ALARM_OUT_Audio_Notification_Command_4, ALARM_OUT_Audio_Notification_Command_5, ALARM_OUT_Audio_Notification_Command_6, ALARM_OUT_Audio_Notification_Command_7, ALARM_OUT_Audio_Notification_Command_8, ALARM_OUT_Audio_Notification_Command_9, ALARM_OUT_Audio_Notification_Command_10, ALARM_OUT_Audio_Notification_Command_11:int;
	audioTimer_2, audioTimer_3, audioTimer_4, audioTimer_5:int;


let



	-- set state as active 
	idAlarms_Notification_2 
	= 865;
	

	ALARM_OUT_Is_Audio_Disabled_2 
	= if (not isInner) then OP_CMD_IN_Disable_Audio
	 else ALARM_OUT_Is_Audio_Disabled_1;
	

	
-- transition trace :
	--POINT__To__Audio_Disabled_1
		(idNotification_Audio_2, ALARM_OUT_Audio_Notification_Command_2) 
	= 
		 if (( OP_CMD_IN_Disable_Audio=1 )) then 
		Audio_Disabled_en(idNotification_Audio_1, ALARM_OUT_Audio_Notification_Command_1, false)
		 else (idNotification_Audio_1, ALARM_OUT_Audio_Notification_Command_1);
		

-- transition trace :
	--POINT__To__Audio_Silenced_2
		(idNotification_Audio_3, audioTimer_2, ALARM_OUT_Audio_Notification_Command_3) 
	= 
		 if (( OP_CMD_IN_Disable_Audio=2 )) then 
		Audio_Silenced_en(idNotification_Audio_2, audioTimer_1, ALARM_OUT_Audio_Notification_Command_2, false)
		 else (idNotification_Audio_2, audioTimer_1, ALARM_OUT_Audio_Notification_Command_2);
		

-- transition trace :
	--POINT__To__Audio_ON_3
		(idNotification_Audio_4, ALARM_OUT_Audio_Notification_Command_4) 
	= 
		 if ((  ALARM_OUT_Highest_Level_Alarm_1 >2 and OP_CMD_IN_Disable_Audio=0 )) then 
		Audio_ON_en(idNotification_Audio_3, CONST_IN_Audio_Level, ALARM_OUT_Audio_Notification_Command_3, false)
		 else (idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3);
		

-- transition trace :
	--POINT__To__Audio_OFF_4
		(idNotification_Audio_5, ALARM_OUT_Audio_Notification_Command_5) 
	= Audio_OFF_en(idNotification_Audio_4, ALARM_OUT_Audio_Notification_Command_4, false);
		

	(idNotification_Audio_6, idAlarms_Notification_3, ALARM_OUT_Is_Audio_Disabled_3, ALARM_OUT_Audio_Notification_Command_6, audioTimer_3) 
	= 

	if ( idNotification_Audio_1 = 0) then

	
		 if (( OP_CMD_IN_Disable_Audio=1 )) then 
		(idNotification_Audio_2, idAlarms_Notification_2, ALARM_OUT_Is_Audio_Disabled_2, ALARM_OUT_Audio_Notification_Command_2, audioTimer_1)
		 else
		 if (( OP_CMD_IN_Disable_Audio=2 )) then 
		(idNotification_Audio_3, idAlarms_Notification_2, ALARM_OUT_Is_Audio_Disabled_2, ALARM_OUT_Audio_Notification_Command_3, audioTimer_2)
		 else
		 if ((  ALARM_OUT_Highest_Level_Alarm_1 >2 and OP_CMD_IN_Disable_Audio=0 )) then 
		(idNotification_Audio_4, idAlarms_Notification_2, ALARM_OUT_Is_Audio_Disabled_2, ALARM_OUT_Audio_Notification_Command_4, audioTimer_2)
		 else (idNotification_Audio_5, idAlarms_Notification_2, ALARM_OUT_Is_Audio_Disabled_2, ALARM_OUT_Audio_Notification_Command_5, audioTimer_2)

	 else(idNotification_Audio_1, idAlarms_Notification_2, ALARM_OUT_Is_Audio_Disabled_2, ALARM_OUT_Audio_Notification_Command_1, audioTimer_1);

	

	(idNotification_Audio_7, ALARM_OUT_Audio_Notification_Command_7) 
	= 
	if ( idNotification_Audio_1 = 866) then
	Audio_ON_en(idNotification_Audio_1, CONST_IN_Audio_Level, ALARM_OUT_Audio_Notification_Command_1, false)
	 else (idNotification_Audio_1, ALARM_OUT_Audio_Notification_Command_1);

	

	(idNotification_Audio_8, ALARM_OUT_Audio_Notification_Command_8) 
	= 
	if ( idNotification_Audio_1 = 867) then
	Audio_OFF_en(idNotification_Audio_1, ALARM_OUT_Audio_Notification_Command_1, false)
	 else (idNotification_Audio_1, ALARM_OUT_Audio_Notification_Command_1);

	

	(idNotification_Audio_9, audioTimer_4, ALARM_OUT_Audio_Notification_Command_9) 
	= 
	if ( idNotification_Audio_1 = 868) then
	Audio_Silenced_en(idNotification_Audio_1, audioTimer_1, ALARM_OUT_Audio_Notification_Command_1, false)
	 else (idNotification_Audio_1, audioTimer_1, ALARM_OUT_Audio_Notification_Command_1);

	

	(idNotification_Audio_10, ALARM_OUT_Audio_Notification_Command_10) 
	= 
	if ( idNotification_Audio_1 = 869) then
	Audio_Disabled_en(idNotification_Audio_1, ALARM_OUT_Audio_Notification_Command_1, false)
	 else (idNotification_Audio_1, ALARM_OUT_Audio_Notification_Command_1);

	

	(idNotification_Audio_11, idAlarms_Notification_4, ALARM_OUT_Is_Audio_Disabled_4, ALARM_OUT_Audio_Notification_Command_11, audioTimer_5) 
	= 
		 if ( idNotification_Audio_1 = 0) then 
		(idNotification_Audio_6, idAlarms_Notification_3, ALARM_OUT_Is_Audio_Disabled_3, ALARM_OUT_Audio_Notification_Command_6, audioTimer_3)
		 else
		 if ( idNotification_Audio_1 = 866) then 
		(idNotification_Audio_7, idAlarms_Notification_3, ALARM_OUT_Is_Audio_Disabled_3, ALARM_OUT_Audio_Notification_Command_7, audioTimer_3)
		 else
		 if ( idNotification_Audio_1 = 867) then 
		(idNotification_Audio_8, idAlarms_Notification_3, ALARM_OUT_Is_Audio_Disabled_3, ALARM_OUT_Audio_Notification_Command_8, audioTimer_3)
		 else
		 if ( idNotification_Audio_1 = 868) then 
		(idNotification_Audio_9, idAlarms_Notification_3, ALARM_OUT_Is_Audio_Disabled_3, ALARM_OUT_Audio_Notification_Command_9, audioTimer_4)
		 else
		 if ( idNotification_Audio_1 = 869) then 
		(idNotification_Audio_10, idAlarms_Notification_3, ALARM_OUT_Is_Audio_Disabled_3, ALARM_OUT_Audio_Notification_Command_10, audioTimer_4)
		 else (idNotification_Audio_1, idAlarms_Notification_2, ALARM_OUT_Is_Audio_Disabled_2, ALARM_OUT_Audio_Notification_Command_1, audioTimer_1);


	(idNotification_Audio, idAlarms_Notification, ALARM_OUT_Is_Audio_Disabled, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	= (idNotification_Audio_11, idAlarms_Notification_4, ALARM_OUT_Is_Audio_Disabled_4, ALARM_OUT_Audio_Notification_Command_11, audioTimer_5);
	

tel





--During action for state :Notification_Audio
node Notification_Audio_du(OP_CMD_IN_Disable_Audio:int;
	ALARM_OUT_Is_Audio_Disabled_1:int)

returns (ALARM_OUT_Is_Audio_Disabled:int);


var 	ALARM_OUT_Is_Audio_Disabled_2:int;


let



	ALARM_OUT_Is_Audio_Disabled_2 
	= OP_CMD_IN_Disable_Audio;
	

	(ALARM_OUT_Is_Audio_Disabled) 
	= (ALARM_OUT_Is_Audio_Disabled_2);
	

tel





-- Exit action for state :Notification_Audio
node Notification_Audio_ex(CONST_IN_Audio_Level:int;
	ALARM_OUT_Audio_Notification_Command_1:int;
	idNotification_Audio_1:int;
	OP_CMD_IN_Disable_Audio:int;
	ALARM_OUT_Is_Audio_Disabled_1:int;
	idAlarms_Notification_1:int;
	isInner:bool)

returns (ALARM_OUT_Audio_Notification_Command:int;
	idNotification_Audio:int;
	ALARM_OUT_Is_Audio_Disabled:int;
	idAlarms_Notification:int);


var 	ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Audio_Notification_Command_3, ALARM_OUT_Audio_Notification_Command_4, ALARM_OUT_Audio_Notification_Command_5, ALARM_OUT_Audio_Notification_Command_6:int;
	idNotification_Audio_2, idNotification_Audio_3, idNotification_Audio_4, idNotification_Audio_5, idNotification_Audio_6, idNotification_Audio_7:int;
	ALARM_OUT_Is_Audio_Disabled_2:int;
	idAlarms_Notification_2:int;


let



	
	(ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2) 
	= 
	if ( idNotification_Audio_1 = 866) then
	Audio_ON_ex(CONST_IN_Audio_Level, ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1, false)
	 else (ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1);

	

	(ALARM_OUT_Audio_Notification_Command_3, idNotification_Audio_3) 
	= 
	if ( idNotification_Audio_1 = 867) then
	Audio_OFF_ex(ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1, false)
	 else (ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1);

	

	(ALARM_OUT_Audio_Notification_Command_4, idNotification_Audio_4) 
	= 
	if ( idNotification_Audio_1 = 868) then
	Audio_Silenced_ex(ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1, false)
	 else (ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1);

	

	(ALARM_OUT_Audio_Notification_Command_5, idNotification_Audio_5) 
	= 
	if ( idNotification_Audio_1 = 869) then
	Audio_Disabled_ex(ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1, false)
	 else (ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1);

	

	(ALARM_OUT_Audio_Notification_Command_6, idNotification_Audio_6) 
	= 
		 if ( idNotification_Audio_1 = 866) then 
		(ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2)
		 else
		 if ( idNotification_Audio_1 = 867) then 
		(ALARM_OUT_Audio_Notification_Command_3, idNotification_Audio_3)
		 else
		 if ( idNotification_Audio_1 = 868) then 
		(ALARM_OUT_Audio_Notification_Command_4, idNotification_Audio_4)
		 else
		 if ( idNotification_Audio_1 = 869) then 
		(ALARM_OUT_Audio_Notification_Command_5, idNotification_Audio_5)
		 else (ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1);


	ALARM_OUT_Is_Audio_Disabled_2 
	= if (not isInner) then OP_CMD_IN_Disable_Audio
	 else ALARM_OUT_Is_Audio_Disabled_1;
	

	-- set state as inactive 
	idAlarms_Notification_2
	 = if (not isInner) then 0 else idAlarms_Notification_1;

	idNotification_Audio_7 
	= 0;
	

	(ALARM_OUT_Audio_Notification_Command, idNotification_Audio, ALARM_OUT_Is_Audio_Disabled, idAlarms_Notification) 
	= (ALARM_OUT_Audio_Notification_Command_6, idNotification_Audio_7, ALARM_OUT_Is_Audio_Disabled_2, idAlarms_Notification_2);
	

tel






-- Entry action for state :Notification_Visual
node Notification_Visual_en(idNotification_Visual_1:int;
	idAlarms_Notification_1:int;
	currentAlarm_1:int;
	ALARM_OUT_Visual_Notification_Message_1:int;
	previousAlarm_1:int;
	isInner:bool)

returns (idNotification_Visual:int;
	idAlarms_Notification:int;
	ALARM_OUT_Visual_Notification_Message:int;
	currentAlarm:int;
	previousAlarm:int);


var 	idNotification_Visual_2, idNotification_Visual_3, idNotification_Visual_4, idNotification_Visual_5, idNotification_Visual_6, idNotification_Visual_7:int;
	idAlarms_Notification_2, idAlarms_Notification_3, idAlarms_Notification_4:int;
	ALARM_OUT_Visual_Notification_Message_2, ALARM_OUT_Visual_Notification_Message_3, ALARM_OUT_Visual_Notification_Message_4, ALARM_OUT_Visual_Notification_Message_5, ALARM_OUT_Visual_Notification_Message_6, ALARM_OUT_Visual_Notification_Message_7:int;
	currentAlarm_2, currentAlarm_3, currentAlarm_4, currentAlarm_5:int;
	previousAlarm_2, previousAlarm_3, previousAlarm_4, previousAlarm_5:int;


let



	-- set state as active 
	idAlarms_Notification_2 
	= 862;
	

	
-- transition trace :
	--POINT__To__Visual_AlarmDisplay_1
		(idNotification_Visual_2, currentAlarm_2, ALARM_OUT_Visual_Notification_Message_2) 
	= 
		 if ((  currentAlarm_1 >0 )) then 
		Visual_AlarmDisplay_en(idNotification_Visual_1, currentAlarm_1, ALARM_OUT_Visual_Notification_Message_1, false)
		 else (idNotification_Visual_1, currentAlarm_1, ALARM_OUT_Visual_Notification_Message_1);
		

-- transition trace :
	--POINT__To__Visual_OFF_2
		(idNotification_Visual_3, ALARM_OUT_Visual_Notification_Message_3, previousAlarm_2) 
	= Visual_OFF_en(idNotification_Visual_2, ALARM_OUT_Visual_Notification_Message_2, previousAlarm_1, false);
		

	(idNotification_Visual_4, idAlarms_Notification_3, ALARM_OUT_Visual_Notification_Message_4, currentAlarm_3, previousAlarm_3) 
	= 

	if ( idNotification_Visual_1 = 0) then

	
		 if ((  currentAlarm_1 >0 )) then 
		(idNotification_Visual_2, idAlarms_Notification_2, ALARM_OUT_Visual_Notification_Message_2, currentAlarm_2, previousAlarm_1)
		 else (idNotification_Visual_3, idAlarms_Notification_2, ALARM_OUT_Visual_Notification_Message_3, currentAlarm_2, previousAlarm_2)

	 else(idNotification_Visual_1, idAlarms_Notification_2, ALARM_OUT_Visual_Notification_Message_1, currentAlarm_1, previousAlarm_1);

	

	(idNotification_Visual_5, ALARM_OUT_Visual_Notification_Message_5, previousAlarm_4) 
	= 
	if ( idNotification_Visual_1 = 863) then
	Visual_OFF_en(idNotification_Visual_1, ALARM_OUT_Visual_Notification_Message_1, previousAlarm_1, false)
	 else (idNotification_Visual_1, ALARM_OUT_Visual_Notification_Message_1, previousAlarm_1);

	

	(idNotification_Visual_6, currentAlarm_4, ALARM_OUT_Visual_Notification_Message_6) 
	= 
	if ( idNotification_Visual_1 = 864) then
	Visual_AlarmDisplay_en(idNotification_Visual_1, currentAlarm_1, ALARM_OUT_Visual_Notification_Message_1, false)
	 else (idNotification_Visual_1, currentAlarm_1, ALARM_OUT_Visual_Notification_Message_1);

	

	(idNotification_Visual_7, idAlarms_Notification_4, ALARM_OUT_Visual_Notification_Message_7, currentAlarm_5, previousAlarm_5) 
	= 
		 if ( idNotification_Visual_1 = 0) then 
		(idNotification_Visual_4, idAlarms_Notification_3, ALARM_OUT_Visual_Notification_Message_4, currentAlarm_3, previousAlarm_3)
		 else
		 if ( idNotification_Visual_1 = 863) then 
		(idNotification_Visual_5, idAlarms_Notification_3, ALARM_OUT_Visual_Notification_Message_5, currentAlarm_3, previousAlarm_4)
		 else
		 if ( idNotification_Visual_1 = 864) then 
		(idNotification_Visual_6, idAlarms_Notification_3, ALARM_OUT_Visual_Notification_Message_6, currentAlarm_4, previousAlarm_4)
		 else (idNotification_Visual_1, idAlarms_Notification_2, ALARM_OUT_Visual_Notification_Message_1, currentAlarm_1, previousAlarm_1);


	(idNotification_Visual, idAlarms_Notification, ALARM_OUT_Visual_Notification_Message, currentAlarm, previousAlarm) 
	= (idNotification_Visual_7, idAlarms_Notification_4, ALARM_OUT_Visual_Notification_Message_7, currentAlarm_5, previousAlarm_5);
	

tel





-- Exit action for state :Notification_Visual
node Notification_Visual_ex(idNotification_Visual_1:int;
	ALARM_OUT_Visual_Notification_Message_1:int;
	currentAlarm_1:int;
	idAlarms_Notification_1:int;
	isInner:bool)

returns (idNotification_Visual:int;
	ALARM_OUT_Visual_Notification_Message:int;
	currentAlarm:int;
	idAlarms_Notification:int);


var 	idNotification_Visual_2, idNotification_Visual_3, idNotification_Visual_4, idNotification_Visual_5:int;
	ALARM_OUT_Visual_Notification_Message_2, ALARM_OUT_Visual_Notification_Message_3:int;
	currentAlarm_2, currentAlarm_3:int;
	idAlarms_Notification_2:int;


let



	
	(idNotification_Visual_2) 
	= 
	if ( idNotification_Visual_1 = 863) then
	Visual_OFF_ex(idNotification_Visual_1, false)
	 else (idNotification_Visual_1);

	

	(currentAlarm_2, ALARM_OUT_Visual_Notification_Message_2, idNotification_Visual_3) 
	= 
	if ( idNotification_Visual_1 = 864) then
	Visual_AlarmDisplay_ex(currentAlarm_1, ALARM_OUT_Visual_Notification_Message_1, idNotification_Visual_1, false)
	 else (currentAlarm_1, ALARM_OUT_Visual_Notification_Message_1, idNotification_Visual_1);

	

	(idNotification_Visual_4, ALARM_OUT_Visual_Notification_Message_3, currentAlarm_3) 
	= 
		 if ( idNotification_Visual_1 = 863) then 
		(idNotification_Visual_2, ALARM_OUT_Visual_Notification_Message_1, currentAlarm_1)
		 else
		 if ( idNotification_Visual_1 = 864) then 
		(idNotification_Visual_3, ALARM_OUT_Visual_Notification_Message_2, currentAlarm_2)
		 else (idNotification_Visual_1, ALARM_OUT_Visual_Notification_Message_1, currentAlarm_1);


	-- set state as inactive 
	idAlarms_Notification_2
	 = if (not isInner) then 0 else idAlarms_Notification_1;

	idNotification_Visual_5 
	= 0;
	

	(idNotification_Visual, ALARM_OUT_Visual_Notification_Message, currentAlarm, idAlarms_Notification) 
	= (idNotification_Visual_5, ALARM_OUT_Visual_Notification_Message_3, currentAlarm_3, idAlarms_Notification_2);
	

tel






-- Entry action for state :CheckAlarm_SetAlarmStatus
node CheckAlarm_SetAlarmStatus_en(idAlarms_CheckAlarm_1:int;
	ALARM_OUT_Highest_Level_Alarm_1:int;
	Max_Alarm_Level_1:int;
	isInner:bool)

returns (idAlarms_CheckAlarm:int;
	ALARM_OUT_Highest_Level_Alarm:int;
	Max_Alarm_Level:int);


var 	idAlarms_CheckAlarm_2:int;
	ALARM_OUT_Highest_Level_Alarm_2:int;
	Max_Alarm_Level_2:int;


let



	-- set state as active 
	idAlarms_CheckAlarm_2 
	= 860;
	

	(ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2) 
	= if (not isInner) then setHighestAlarm(ALARM_OUT_Highest_Level_Alarm_1, Max_Alarm_Level_1)
	 else (ALARM_OUT_Highest_Level_Alarm_1, Max_Alarm_Level_1);
	

	(idAlarms_CheckAlarm, ALARM_OUT_Highest_Level_Alarm, Max_Alarm_Level) 
	= (idAlarms_CheckAlarm_2, ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2);
	

tel





--During action for state :CheckAlarm_SetAlarmStatus
node CheckAlarm_SetAlarmStatus_du(ALARM_OUT_Highest_Level_Alarm_1:int;
	Max_Alarm_Level_1:int)

returns (ALARM_OUT_Highest_Level_Alarm:int;
	Max_Alarm_Level:int);


var 	ALARM_OUT_Highest_Level_Alarm_2:int;
	Max_Alarm_Level_2:int;


let



	(ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2) 
	= setHighestAlarm(ALARM_OUT_Highest_Level_Alarm_1, Max_Alarm_Level_1);
	

	(ALARM_OUT_Highest_Level_Alarm, Max_Alarm_Level) 
	= (ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2);
	

tel





-- Exit action for state :CheckAlarm_SetAlarmStatus
node CheckAlarm_SetAlarmStatus_ex(ALARM_OUT_Highest_Level_Alarm_1:int;
	Max_Alarm_Level_1:int;
	cancelAlarm_1:int;
	idAlarms_CheckAlarm_1:int;
	isInner:bool)

returns (ALARM_OUT_Highest_Level_Alarm:int;
	Max_Alarm_Level:int;
	cancelAlarm:int;
	idAlarms_CheckAlarm:int);


var 	ALARM_OUT_Highest_Level_Alarm_2:int;
	Max_Alarm_Level_2:int;
	cancelAlarm_2:int;
	idAlarms_CheckAlarm_2:int;


let



	(ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2) 
	= if (not isInner) then setHighestAlarm(ALARM_OUT_Highest_Level_Alarm_1, Max_Alarm_Level_1)
	 else (ALARM_OUT_Highest_Level_Alarm_1, Max_Alarm_Level_1);
	

	cancelAlarm_2 
	= if (not isInner) then 0
	 else cancelAlarm_1;
	

	-- set state as inactive 
	idAlarms_CheckAlarm_2
	 = if (not isInner) then 0 else idAlarms_CheckAlarm_1;


	(ALARM_OUT_Highest_Level_Alarm, Max_Alarm_Level, cancelAlarm, idAlarms_CheckAlarm) 
	= (ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2, cancelAlarm_2, idAlarms_CheckAlarm_2);
	

tel






-- Entry action for state :CheckAlarm_Level1
node CheckAlarm_Level1_en(idCheckAlarm_Level1_1:int;
	idAlarms_CheckAlarm_1:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_Low:int;
	IM_IN_Flow_Rate_Commanded:int;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SYS_STAT_IN_In_Therapy:bool;
	idLevel1_IsUnderInfusion_1:int;
	underInfusion_1:int;
	SENSOR_IN_Flow_Rate_Not_Stable:bool;
	idLevel1_IsFlowRateNotStable_1:int;
	CONST_IN_Max_Idle_Duration:int;
	IM_IN_Current_System_Mode:int;
	idLevel1_IsIdleTimeExceeded_1:int;
	idletimer_1:int;
	step_size:real;
	CONST_IN_Max_Paused_Duration:int;
	idLevel1_IsPausedTimeExceeded_1:int;
	pausedtimer_1:int;
	CONFIG_IN_Config_Timer:int;
	CONST_IN_Config_Warning_Duration:int;
	idLevel1_IsConfigTimeWarning_1:int;
	SENSOR_IN_Battery_Low:bool;
	SENSOR_IN_Battery_Unable_To_Charge:bool;
	SENSOR_IN_Supply_Voltage_Out_Of_Range:bool;
	idLevel1_IsBatteryError_1:int;
	SENSOR_IN_Pump_Overheated:bool;
	idLevel1_IsPumpHot_1:int;
	LOGGING_IN_Logging_Failed:bool;
	idLevel1_IsLoggingFailed_1:int;
	SYS_MON_IN_System_Monitor_Failed:bool;
	idLevel1_IsSystemMonitorFailed_1:int;
	isInner:bool)

returns (idCheckAlarm_Level1:int;
	idAlarms_CheckAlarm:int;
	idLevel1_IsUnderInfusion:int;
	underInfusion:int;
	idLevel1_IsFlowRateNotStable:int;
	idLevel1_IsIdleTimeExceeded:int;
	idletimer:int;
	idLevel1_IsPausedTimeExceeded:int;
	pausedtimer:int;
	idLevel1_IsConfigTimeWarning:int;
	idLevel1_IsBatteryError:int;
	idLevel1_IsPumpHot:int;
	idLevel1_IsLoggingFailed:int;
	idLevel1_IsSystemMonitorFailed:int);


var 	idCheckAlarm_Level1_2, idCheckAlarm_Level1_3, idCheckAlarm_Level1_4, idCheckAlarm_Level1_5, idCheckAlarm_Level1_6, idCheckAlarm_Level1_7, idCheckAlarm_Level1_8, idCheckAlarm_Level1_9, idCheckAlarm_Level1_10:int;
	idAlarms_CheckAlarm_2:int;
	idLevel1_IsUnderInfusion_2:int;
	underInfusion_2:int;
	idLevel1_IsFlowRateNotStable_2:int;
	idLevel1_IsIdleTimeExceeded_2:int;
	idletimer_2:int;
	idLevel1_IsPausedTimeExceeded_2:int;
	pausedtimer_2:int;
	idLevel1_IsConfigTimeWarning_2:int;
	idLevel1_IsBatteryError_2:int;
	idLevel1_IsPumpHot_2:int;
	idLevel1_IsLoggingFailed_2:int;
	idLevel1_IsSystemMonitorFailed_2:int;


let



	-- set state as active 
	idAlarms_CheckAlarm_2 
	= 828;
	

	
	(idLevel1_IsUnderInfusion_2, idCheckAlarm_Level1_2, underInfusion_2) 
	= Level1_IsUnderInfusion_en(idLevel1_IsUnderInfusion_1, idCheckAlarm_Level1_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, underInfusion_1, false);

	(idLevel1_IsFlowRateNotStable_2, idCheckAlarm_Level1_3) 
	= Level1_IsFlowRateNotStable_en(idLevel1_IsFlowRateNotStable_1, idCheckAlarm_Level1_2, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Not_Stable, false);

	(idLevel1_IsIdleTimeExceeded_2, idCheckAlarm_Level1_4, idletimer_2) 
	= Level1_IsIdleTimeExceeded_en(idLevel1_IsIdleTimeExceeded_1, idCheckAlarm_Level1_3, IM_IN_Current_System_Mode, CONST_IN_Max_Idle_Duration, step_size, idletimer_1, false);

	(idLevel1_IsPausedTimeExceeded_2, idCheckAlarm_Level1_5, pausedtimer_2) 
	= Level1_IsPausedTimeExceeded_en(idLevel1_IsPausedTimeExceeded_1, idCheckAlarm_Level1_4, IM_IN_Current_System_Mode, CONST_IN_Max_Paused_Duration, step_size, pausedtimer_1, false);

	(idLevel1_IsConfigTimeWarning_2, idCheckAlarm_Level1_6) 
	= Level1_IsConfigTimeWarning_en(idLevel1_IsConfigTimeWarning_1, idCheckAlarm_Level1_5, CONFIG_IN_Config_Timer, CONST_IN_Config_Warning_Duration, step_size, false);

	(idLevel1_IsBatteryError_2, idCheckAlarm_Level1_7) 
	= Level1_IsBatteryError_en(idLevel1_IsBatteryError_1, idCheckAlarm_Level1_6, SENSOR_IN_Battery_Low, SENSOR_IN_Battery_Unable_To_Charge, SENSOR_IN_Supply_Voltage_Out_Of_Range, false);

	(idLevel1_IsPumpHot_2, idCheckAlarm_Level1_8) 
	= Level1_IsPumpHot_en(idLevel1_IsPumpHot_1, idCheckAlarm_Level1_7, SENSOR_IN_Pump_Overheated, false);

	(idLevel1_IsLoggingFailed_2, idCheckAlarm_Level1_9) 
	= Level1_IsLoggingFailed_en(idLevel1_IsLoggingFailed_1, idCheckAlarm_Level1_8, LOGGING_IN_Logging_Failed, false);

	(idLevel1_IsSystemMonitorFailed_2, idCheckAlarm_Level1_10) 
	= Level1_IsSystemMonitorFailed_en(idLevel1_IsSystemMonitorFailed_1, idCheckAlarm_Level1_9, SYS_MON_IN_System_Monitor_Failed, false);


	(idCheckAlarm_Level1, idAlarms_CheckAlarm, idLevel1_IsUnderInfusion, underInfusion, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idletimer, idLevel1_IsPausedTimeExceeded, pausedtimer, idLevel1_IsConfigTimeWarning, idLevel1_IsBatteryError, idLevel1_IsPumpHot, idLevel1_IsLoggingFailed, idLevel1_IsSystemMonitorFailed) 
	= (idCheckAlarm_Level1_10, idAlarms_CheckAlarm_2, idLevel1_IsUnderInfusion_2, underInfusion_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idletimer_2, idLevel1_IsPausedTimeExceeded_2, pausedtimer_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsBatteryError_2, idLevel1_IsPumpHot_2, idLevel1_IsLoggingFailed_2, idLevel1_IsSystemMonitorFailed_2);
	

tel





-- Exit action for state :CheckAlarm_Level1
node CheckAlarm_Level1_ex(idLevel1_IsSystemMonitorFailed_1:int;
	idCheckAlarm_Level1_1:int;
	idLevel1_IsLoggingFailed_1:int;
	idLevel1_IsPumpHot_1:int;
	idLevel1_IsBatteryError_1:int;
	idLevel1_IsConfigTimeWarning_1:int;
	idLevel1_IsPausedTimeExceeded_1:int;
	pausedtimer_1:int;
	idLevel1_IsIdleTimeExceeded_1:int;
	idletimer_1:int;
	idLevel1_IsFlowRateNotStable_1:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_Low:int;
	IM_IN_Flow_Rate_Commanded:int;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SYS_STAT_IN_In_Therapy:bool;
	idLevel1_IsUnderInfusion_1:int;
	underInfusion_1:int;
	idAlarms_CheckAlarm_1:int;
	isInner:bool)

returns (idLevel1_IsSystemMonitorFailed:int;
	idCheckAlarm_Level1:int;
	idLevel1_IsLoggingFailed:int;
	idLevel1_IsPumpHot:int;
	idLevel1_IsBatteryError:int;
	idLevel1_IsConfigTimeWarning:int;
	idLevel1_IsPausedTimeExceeded:int;
	pausedtimer:int;
	idLevel1_IsIdleTimeExceeded:int;
	idletimer:int;
	idLevel1_IsFlowRateNotStable:int;
	idLevel1_IsUnderInfusion:int;
	underInfusion:int;
	idAlarms_CheckAlarm:int);


var 	idLevel1_IsSystemMonitorFailed_2:int;
	idCheckAlarm_Level1_2, idCheckAlarm_Level1_3, idCheckAlarm_Level1_4, idCheckAlarm_Level1_5, idCheckAlarm_Level1_6, idCheckAlarm_Level1_7, idCheckAlarm_Level1_8, idCheckAlarm_Level1_9, idCheckAlarm_Level1_10, idCheckAlarm_Level1_11:int;
	idLevel1_IsLoggingFailed_2:int;
	idLevel1_IsPumpHot_2:int;
	idLevel1_IsBatteryError_2:int;
	idLevel1_IsConfigTimeWarning_2:int;
	idLevel1_IsPausedTimeExceeded_2:int;
	pausedtimer_2:int;
	idLevel1_IsIdleTimeExceeded_2:int;
	idletimer_2:int;
	idLevel1_IsFlowRateNotStable_2:int;
	idLevel1_IsUnderInfusion_2:int;
	underInfusion_2:int;
	idAlarms_CheckAlarm_2:int;


let



	
	(idLevel1_IsSystemMonitorFailed_2, idCheckAlarm_Level1_2) 
	= Level1_IsSystemMonitorFailed_ex(idLevel1_IsSystemMonitorFailed_1, idCheckAlarm_Level1_1, false);

	(idLevel1_IsLoggingFailed_2, idCheckAlarm_Level1_3) 
	= Level1_IsLoggingFailed_ex(idLevel1_IsLoggingFailed_1, idCheckAlarm_Level1_2, false);

	(idLevel1_IsPumpHot_2, idCheckAlarm_Level1_4) 
	= Level1_IsPumpHot_ex(idLevel1_IsPumpHot_1, idCheckAlarm_Level1_3, false);

	(idLevel1_IsBatteryError_2, idCheckAlarm_Level1_5) 
	= Level1_IsBatteryError_ex(idLevel1_IsBatteryError_1, idCheckAlarm_Level1_4, false);

	(idLevel1_IsConfigTimeWarning_2, idCheckAlarm_Level1_6) 
	= Level1_IsConfigTimeWarning_ex(idLevel1_IsConfigTimeWarning_1, idCheckAlarm_Level1_5, false);

	(pausedtimer_2, idLevel1_IsPausedTimeExceeded_2, idCheckAlarm_Level1_7) 
	= Level1_IsPausedTimeExceeded_ex(pausedtimer_1, idLevel1_IsPausedTimeExceeded_1, idCheckAlarm_Level1_6, false);

	(idletimer_2, idLevel1_IsIdleTimeExceeded_2, idCheckAlarm_Level1_8) 
	= Level1_IsIdleTimeExceeded_ex(idletimer_1, idLevel1_IsIdleTimeExceeded_1, idCheckAlarm_Level1_7, false);

	(idLevel1_IsFlowRateNotStable_2, idCheckAlarm_Level1_9) 
	= Level1_IsFlowRateNotStable_ex(idLevel1_IsFlowRateNotStable_1, idCheckAlarm_Level1_8, false);

	(idLevel1_IsUnderInfusion_2, underInfusion_2, idCheckAlarm_Level1_10) 
	= Level1_IsUnderInfusion_ex(idLevel1_IsUnderInfusion_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, underInfusion_1, idCheckAlarm_Level1_9, false);


	-- set state as inactive 
	idAlarms_CheckAlarm_2
	 = if (not isInner) then 0 else idAlarms_CheckAlarm_1;

	idCheckAlarm_Level1_11 
	= 0;
	

	(idLevel1_IsSystemMonitorFailed, idCheckAlarm_Level1, idLevel1_IsLoggingFailed, idLevel1_IsPumpHot, idLevel1_IsBatteryError, idLevel1_IsConfigTimeWarning, idLevel1_IsPausedTimeExceeded, pausedtimer, idLevel1_IsIdleTimeExceeded, idletimer, idLevel1_IsFlowRateNotStable, idLevel1_IsUnderInfusion, underInfusion, idAlarms_CheckAlarm) 
	= (idLevel1_IsSystemMonitorFailed_2, idCheckAlarm_Level1_11, idLevel1_IsLoggingFailed_2, idLevel1_IsPumpHot_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsPausedTimeExceeded_2, pausedtimer_2, idLevel1_IsIdleTimeExceeded_2, idletimer_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsUnderInfusion_2, underInfusion_2, idAlarms_CheckAlarm_2);
	

tel






-- Entry action for state :CheckAlarm_Level2
node CheckAlarm_Level2_en(idCheckAlarm_Level2_1:int;
	idAlarms_CheckAlarm_1:int;
	CONST_IN_Low_Reservoir:int;
	SYS_STAT_IN_In_Therapy:bool;
	SYS_STAT_IN_Reservoir_Volume:int;
	idLevel2_IsLowReservoir_1:int;
	isInner:bool)

returns (idCheckAlarm_Level2:int;
	idAlarms_CheckAlarm:int;
	idLevel2_IsLowReservoir:int);


var 	idCheckAlarm_Level2_2:int;
	idAlarms_CheckAlarm_2:int;
	idLevel2_IsLowReservoir_2:int;


let



	-- set state as active 
	idAlarms_CheckAlarm_2 
	= 824;
	

	
	(idLevel2_IsLowReservoir_2, idCheckAlarm_Level2_2) 
	= Level2_IsLowReservoir_en(idLevel2_IsLowReservoir_1, idCheckAlarm_Level2_1, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Reservoir_Volume, CONST_IN_Low_Reservoir, false);


	(idCheckAlarm_Level2, idAlarms_CheckAlarm, idLevel2_IsLowReservoir) 
	= (idCheckAlarm_Level2_2, idAlarms_CheckAlarm_2, idLevel2_IsLowReservoir_2);
	

tel





-- Exit action for state :CheckAlarm_Level2
node CheckAlarm_Level2_ex(idLevel2_IsLowReservoir_1:int;
	idCheckAlarm_Level2_1:int;
	idAlarms_CheckAlarm_1:int;
	isInner:bool)

returns (idLevel2_IsLowReservoir:int;
	idCheckAlarm_Level2:int;
	idAlarms_CheckAlarm:int);


var 	idLevel2_IsLowReservoir_2:int;
	idCheckAlarm_Level2_2, idCheckAlarm_Level2_3:int;
	idAlarms_CheckAlarm_2:int;


let



	
	(idLevel2_IsLowReservoir_2, idCheckAlarm_Level2_2) 
	= Level2_IsLowReservoir_ex(idLevel2_IsLowReservoir_1, idCheckAlarm_Level2_1, false);


	-- set state as inactive 
	idAlarms_CheckAlarm_2
	 = if (not isInner) then 0 else idAlarms_CheckAlarm_1;

	idCheckAlarm_Level2_3 
	= 0;
	

	(idLevel2_IsLowReservoir, idCheckAlarm_Level2, idAlarms_CheckAlarm) 
	= (idLevel2_IsLowReservoir_2, idCheckAlarm_Level2_3, idAlarms_CheckAlarm_2);
	

tel






-- Entry action for state :CheckAlarm_Level3
node CheckAlarm_Level3_en(idCheckAlarm_Level3_1:int;
	idAlarms_CheckAlarm_1:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_High:int;
	IM_IN_Flow_Rate_Commanded:int;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SYS_STAT_IN_In_Therapy:bool;
	idLevel3_IsOverInfusionFlowRate_1:int;
	overInfusion_1:int;
	DB_IN_VTBI_High:int;
	SYS_STAT_IN_Volume_Infused:int;
	idLevel3_IsOverInfusionVTBI_1:int;
	SENSOR_IN_Air_In_line:bool;
	idLevel3_IsAirInLine_1:int;
	SENSOR_IN_Occlusion:bool;
	idLevel3_IsOcclusion_1:int;
	SENSOR_IN_Door_Open:bool;
	idLevel3_IsDoor_Open_1:int;
	isInner:bool)

returns (idCheckAlarm_Level3:int;
	idAlarms_CheckAlarm:int;
	idLevel3_IsOverInfusionFlowRate:int;
	overInfusion:int;
	idLevel3_IsOverInfusionVTBI:int;
	idLevel3_IsAirInLine:int;
	idLevel3_IsOcclusion:int;
	idLevel3_IsDoor_Open:int);


var 	idCheckAlarm_Level3_2, idCheckAlarm_Level3_3, idCheckAlarm_Level3_4, idCheckAlarm_Level3_5, idCheckAlarm_Level3_6:int;
	idAlarms_CheckAlarm_2:int;
	idLevel3_IsOverInfusionFlowRate_2:int;
	overInfusion_2:int;
	idLevel3_IsOverInfusionVTBI_2:int;
	idLevel3_IsAirInLine_2:int;
	idLevel3_IsOcclusion_2:int;
	idLevel3_IsDoor_Open_2:int;


let



	-- set state as active 
	idAlarms_CheckAlarm_2 
	= 805;
	

	
	(idLevel3_IsOverInfusionFlowRate_2, idCheckAlarm_Level3_2, overInfusion_2) 
	= Level3_IsOverInfusionFlowRate_en(idLevel3_IsOverInfusionFlowRate_1, idCheckAlarm_Level3_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, overInfusion_1, false);

	(idLevel3_IsOverInfusionVTBI_2, idCheckAlarm_Level3_3) 
	= Level3_IsOverInfusionVTBI_en(idLevel3_IsOverInfusionVTBI_1, idCheckAlarm_Level3_2, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Volume_Infused, DB_IN_VTBI_High, false);

	(idLevel3_IsAirInLine_2, idCheckAlarm_Level3_4) 
	= Level3_IsAirInLine_en(idLevel3_IsAirInLine_1, idCheckAlarm_Level3_3, SENSOR_IN_Air_In_line, false);

	(idLevel3_IsOcclusion_2, idCheckAlarm_Level3_5) 
	= Level3_IsOcclusion_en(idLevel3_IsOcclusion_1, idCheckAlarm_Level3_4, SENSOR_IN_Occlusion, false);

	(idLevel3_IsDoor_Open_2, idCheckAlarm_Level3_6) 
	= Level3_IsDoor_Open_en(idLevel3_IsDoor_Open_1, idCheckAlarm_Level3_5, SENSOR_IN_Door_Open, false);


	(idCheckAlarm_Level3, idAlarms_CheckAlarm, idLevel3_IsOverInfusionFlowRate, overInfusion, idLevel3_IsOverInfusionVTBI, idLevel3_IsAirInLine, idLevel3_IsOcclusion, idLevel3_IsDoor_Open) 
	= (idCheckAlarm_Level3_6, idAlarms_CheckAlarm_2, idLevel3_IsOverInfusionFlowRate_2, overInfusion_2, idLevel3_IsOverInfusionVTBI_2, idLevel3_IsAirInLine_2, idLevel3_IsOcclusion_2, idLevel3_IsDoor_Open_2);
	

tel





-- Exit action for state :CheckAlarm_Level3
node CheckAlarm_Level3_ex(idLevel3_IsDoor_Open_1:int;
	idCheckAlarm_Level3_1:int;
	idLevel3_IsOcclusion_1:int;
	idLevel3_IsAirInLine_1:int;
	idLevel3_IsOverInfusionVTBI_1:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_High:int;
	IM_IN_Flow_Rate_Commanded:int;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SYS_STAT_IN_In_Therapy:bool;
	idLevel3_IsOverInfusionFlowRate_1:int;
	overInfusion_1:int;
	idAlarms_CheckAlarm_1:int;
	isInner:bool)

returns (idLevel3_IsDoor_Open:int;
	idCheckAlarm_Level3:int;
	idLevel3_IsOcclusion:int;
	idLevel3_IsAirInLine:int;
	idLevel3_IsOverInfusionVTBI:int;
	idLevel3_IsOverInfusionFlowRate:int;
	overInfusion:int;
	idAlarms_CheckAlarm:int);


var 	idLevel3_IsDoor_Open_2:int;
	idCheckAlarm_Level3_2, idCheckAlarm_Level3_3, idCheckAlarm_Level3_4, idCheckAlarm_Level3_5, idCheckAlarm_Level3_6, idCheckAlarm_Level3_7:int;
	idLevel3_IsOcclusion_2:int;
	idLevel3_IsAirInLine_2:int;
	idLevel3_IsOverInfusionVTBI_2:int;
	idLevel3_IsOverInfusionFlowRate_2:int;
	overInfusion_2:int;
	idAlarms_CheckAlarm_2:int;


let



	
	(idLevel3_IsDoor_Open_2, idCheckAlarm_Level3_2) 
	= Level3_IsDoor_Open_ex(idLevel3_IsDoor_Open_1, idCheckAlarm_Level3_1, false);

	(idLevel3_IsOcclusion_2, idCheckAlarm_Level3_3) 
	= Level3_IsOcclusion_ex(idLevel3_IsOcclusion_1, idCheckAlarm_Level3_2, false);

	(idLevel3_IsAirInLine_2, idCheckAlarm_Level3_4) 
	= Level3_IsAirInLine_ex(idLevel3_IsAirInLine_1, idCheckAlarm_Level3_3, false);

	(idLevel3_IsOverInfusionVTBI_2, idCheckAlarm_Level3_5) 
	= Level3_IsOverInfusionVTBI_ex(idLevel3_IsOverInfusionVTBI_1, idCheckAlarm_Level3_4, false);

	(idLevel3_IsOverInfusionFlowRate_2, overInfusion_2, idCheckAlarm_Level3_6) 
	= Level3_IsOverInfusionFlowRate_ex(idLevel3_IsOverInfusionFlowRate_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, overInfusion_1, idCheckAlarm_Level3_5, false);


	-- set state as inactive 
	idAlarms_CheckAlarm_2
	 = if (not isInner) then 0 else idAlarms_CheckAlarm_1;

	idCheckAlarm_Level3_7 
	= 0;
	

	(idLevel3_IsDoor_Open, idCheckAlarm_Level3, idLevel3_IsOcclusion, idLevel3_IsAirInLine, idLevel3_IsOverInfusionVTBI, idLevel3_IsOverInfusionFlowRate, overInfusion, idAlarms_CheckAlarm) 
	= (idLevel3_IsDoor_Open_2, idCheckAlarm_Level3_7, idLevel3_IsOcclusion_2, idLevel3_IsAirInLine_2, idLevel3_IsOverInfusionVTBI_2, idLevel3_IsOverInfusionFlowRate_2, overInfusion_2, idAlarms_CheckAlarm_2);
	

tel






-- Entry action for state :CheckAlarm_Level4
node CheckAlarm_Level4_en(idCheckAlarm_Level4_1:int;
	idAlarms_CheckAlarm_1:int;
	SYS_STAT_IN_In_Therapy:bool;
	SYS_STAT_IN_Reservoir_Empty:bool;
	idLevel4_IsEmptyReservoir_1:int;
	SENSOR_IN_Battery_Depleted:bool;
	SENSOR_IN_CPU_Error:bool;
	SENSOR_IN_Memory_Corrupted:bool;
	SENSOR_IN_Pump_Too_Hot:bool;
	SENSOR_IN_RTC_Error:bool;
	SENSOR_IN_WatchDog_Interrupt_Detected:bool;
	idLevel4_IsHardwareError_1:int;
	SENSOR_IN_Air_Pressure_Out_Of_Range:bool;
	SENSOR_IN_Humidity_Out_Of_Range:bool;
	SENSOR_IN_Temperature_Out_Of_Range:bool;
	idLevel4_IsEnviromentalError_1:int;
	isInner:bool)

returns (idCheckAlarm_Level4:int;
	idAlarms_CheckAlarm:int;
	idLevel4_IsEmptyReservoir:int;
	idLevel4_IsHardwareError:int;
	idLevel4_IsEnviromentalError:int);


var 	idCheckAlarm_Level4_2, idCheckAlarm_Level4_3, idCheckAlarm_Level4_4:int;
	idAlarms_CheckAlarm_2:int;
	idLevel4_IsEmptyReservoir_2:int;
	idLevel4_IsHardwareError_2:int;
	idLevel4_IsEnviromentalError_2:int;


let



	-- set state as active 
	idAlarms_CheckAlarm_2 
	= 795;
	

	
	(idLevel4_IsEmptyReservoir_2, idCheckAlarm_Level4_2) 
	= Level4_IsEmptyReservoir_en(idLevel4_IsEmptyReservoir_1, idCheckAlarm_Level4_1, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Reservoir_Empty, false);

	(idLevel4_IsHardwareError_2, idCheckAlarm_Level4_3) 
	= Level4_IsHardwareError_en(idLevel4_IsHardwareError_1, idCheckAlarm_Level4_2, SENSOR_IN_Battery_Depleted, SENSOR_IN_RTC_Error, SENSOR_IN_CPU_Error, SENSOR_IN_Memory_Corrupted, SENSOR_IN_Pump_Too_Hot, SENSOR_IN_WatchDog_Interrupt_Detected, false);

	(idLevel4_IsEnviromentalError_2, idCheckAlarm_Level4_4) 
	= Level4_IsEnviromentalError_en(idLevel4_IsEnviromentalError_1, idCheckAlarm_Level4_3, SENSOR_IN_Temperature_Out_Of_Range, SENSOR_IN_Humidity_Out_Of_Range, SENSOR_IN_Air_Pressure_Out_Of_Range, false);


	(idCheckAlarm_Level4, idAlarms_CheckAlarm, idLevel4_IsEmptyReservoir, idLevel4_IsHardwareError, idLevel4_IsEnviromentalError) 
	= (idCheckAlarm_Level4_4, idAlarms_CheckAlarm_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsHardwareError_2, idLevel4_IsEnviromentalError_2);
	

tel





-- Exit action for state :CheckAlarm_Level4
node CheckAlarm_Level4_ex(idLevel4_IsEnviromentalError_1:int;
	idCheckAlarm_Level4_1:int;
	idLevel4_IsHardwareError_1:int;
	idLevel4_IsEmptyReservoir_1:int;
	idAlarms_CheckAlarm_1:int;
	isInner:bool)

returns (idLevel4_IsEnviromentalError:int;
	idCheckAlarm_Level4:int;
	idLevel4_IsHardwareError:int;
	idLevel4_IsEmptyReservoir:int;
	idAlarms_CheckAlarm:int);


var 	idLevel4_IsEnviromentalError_2:int;
	idCheckAlarm_Level4_2, idCheckAlarm_Level4_3, idCheckAlarm_Level4_4, idCheckAlarm_Level4_5:int;
	idLevel4_IsHardwareError_2:int;
	idLevel4_IsEmptyReservoir_2:int;
	idAlarms_CheckAlarm_2:int;


let



	
	(idLevel4_IsEnviromentalError_2, idCheckAlarm_Level4_2) 
	= Level4_IsEnviromentalError_ex(idLevel4_IsEnviromentalError_1, idCheckAlarm_Level4_1, false);

	(idLevel4_IsHardwareError_2, idCheckAlarm_Level4_3) 
	= Level4_IsHardwareError_ex(idLevel4_IsHardwareError_1, idCheckAlarm_Level4_2, false);

	(idLevel4_IsEmptyReservoir_2, idCheckAlarm_Level4_4) 
	= Level4_IsEmptyReservoir_ex(idLevel4_IsEmptyReservoir_1, idCheckAlarm_Level4_3, false);


	-- set state as inactive 
	idAlarms_CheckAlarm_2
	 = if (not isInner) then 0 else idAlarms_CheckAlarm_1;

	idCheckAlarm_Level4_5 
	= 0;
	

	(idLevel4_IsEnviromentalError, idCheckAlarm_Level4, idLevel4_IsHardwareError, idLevel4_IsEmptyReservoir, idAlarms_CheckAlarm) 
	= (idLevel4_IsEnviromentalError_2, idCheckAlarm_Level4_5, idLevel4_IsHardwareError_2, idLevel4_IsEmptyReservoir_2, idAlarms_CheckAlarm_2);
	

tel






-- Entry action for state :CheckAlarm_CancelAlarm
node CheckAlarm_CancelAlarm_en(idCheckAlarm_CancelAlarm_1:int;
	idAlarms_CheckAlarm_1:int;
	ALARM_OUT_Log_Message_ID_1:int;
	cancelAlarm_1:int;
	currentAlarm_1:int;
	isInner:bool)

returns (idCheckAlarm_CancelAlarm:int;
	idAlarms_CheckAlarm:int;
	ALARM_OUT_Log_Message_ID:int;
	cancelAlarm:int;
	currentAlarm:int);


var 	idCheckAlarm_CancelAlarm_2, idCheckAlarm_CancelAlarm_3, idCheckAlarm_CancelAlarm_4, idCheckAlarm_CancelAlarm_5, idCheckAlarm_CancelAlarm_6:int;
	idAlarms_CheckAlarm_2, idAlarms_CheckAlarm_3, idAlarms_CheckAlarm_4:int;
	ALARM_OUT_Log_Message_ID_2, ALARM_OUT_Log_Message_ID_3:int;
	cancelAlarm_2, cancelAlarm_3:int;
	currentAlarm_2, currentAlarm_3:int;


let



	-- set state as active 
	idAlarms_CheckAlarm_2 
	= 791;
	

	
-- transition trace :
	--POINT__To__CancelAlarm_OFF_1
		(idCheckAlarm_CancelAlarm_2) 
	= CancelAlarm_OFF_en(idCheckAlarm_CancelAlarm_1, false);
		

	(idCheckAlarm_CancelAlarm_3, idAlarms_CheckAlarm_3) 
	= 

	if ( idCheckAlarm_CancelAlarm_1 = 0) then

	 (idCheckAlarm_CancelAlarm_2, idAlarms_CheckAlarm_2)

	 else(idCheckAlarm_CancelAlarm_1, idAlarms_CheckAlarm_2);

	

	(idCheckAlarm_CancelAlarm_4, currentAlarm_2, cancelAlarm_2, ALARM_OUT_Log_Message_ID_2) 
	= 
	if ( idCheckAlarm_CancelAlarm_1 = 792) then
	CancelAlarm_ON_en(idCheckAlarm_CancelAlarm_1, currentAlarm_1, cancelAlarm_1, ALARM_OUT_Log_Message_ID_1, false)
	 else (idCheckAlarm_CancelAlarm_1, currentAlarm_1, cancelAlarm_1, ALARM_OUT_Log_Message_ID_1);

	

	(idCheckAlarm_CancelAlarm_5) 
	= 
	if ( idCheckAlarm_CancelAlarm_1 = 793) then
	CancelAlarm_OFF_en(idCheckAlarm_CancelAlarm_1, false)
	 else (idCheckAlarm_CancelAlarm_1);

	

	(idCheckAlarm_CancelAlarm_6, idAlarms_CheckAlarm_4, ALARM_OUT_Log_Message_ID_3, cancelAlarm_3, currentAlarm_3) 
	= 
		 if ( idCheckAlarm_CancelAlarm_1 = 0) then 
		(idCheckAlarm_CancelAlarm_3, idAlarms_CheckAlarm_3, ALARM_OUT_Log_Message_ID_1, cancelAlarm_1, currentAlarm_1)
		 else
		 if ( idCheckAlarm_CancelAlarm_1 = 792) then 
		(idCheckAlarm_CancelAlarm_4, idAlarms_CheckAlarm_3, ALARM_OUT_Log_Message_ID_2, cancelAlarm_2, currentAlarm_2)
		 else
		 if ( idCheckAlarm_CancelAlarm_1 = 793) then 
		(idCheckAlarm_CancelAlarm_5, idAlarms_CheckAlarm_3, ALARM_OUT_Log_Message_ID_2, cancelAlarm_2, currentAlarm_2)
		 else (idCheckAlarm_CancelAlarm_1, idAlarms_CheckAlarm_2, ALARM_OUT_Log_Message_ID_1, cancelAlarm_1, currentAlarm_1);


	(idCheckAlarm_CancelAlarm, idAlarms_CheckAlarm, ALARM_OUT_Log_Message_ID, cancelAlarm, currentAlarm) 
	= (idCheckAlarm_CancelAlarm_6, idAlarms_CheckAlarm_4, ALARM_OUT_Log_Message_ID_3, cancelAlarm_3, currentAlarm_3);
	

tel





-- Exit action for state :CheckAlarm_CancelAlarm
node CheckAlarm_CancelAlarm_ex(idCheckAlarm_CancelAlarm_1:int;
	idAlarms_CheckAlarm_1:int;
	isInner:bool)

returns (idCheckAlarm_CancelAlarm:int;
	idAlarms_CheckAlarm:int);


var 	idCheckAlarm_CancelAlarm_2, idCheckAlarm_CancelAlarm_3, idCheckAlarm_CancelAlarm_4, idCheckAlarm_CancelAlarm_5:int;
	idAlarms_CheckAlarm_2:int;


let



	
	(idCheckAlarm_CancelAlarm_2) 
	= 
	if ( idCheckAlarm_CancelAlarm_1 = 792) then
	CancelAlarm_ON_ex(idCheckAlarm_CancelAlarm_1, false)
	 else (idCheckAlarm_CancelAlarm_1);

	

	(idCheckAlarm_CancelAlarm_3) 
	= 
	if ( idCheckAlarm_CancelAlarm_1 = 793) then
	CancelAlarm_OFF_ex(idCheckAlarm_CancelAlarm_1, false)
	 else (idCheckAlarm_CancelAlarm_1);

	

	(idCheckAlarm_CancelAlarm_4) 
	= 
		 if ( idCheckAlarm_CancelAlarm_1 = 792) then 
		(idCheckAlarm_CancelAlarm_2)
		 else
		 if ( idCheckAlarm_CancelAlarm_1 = 793) then 
		(idCheckAlarm_CancelAlarm_3)
		 else (idCheckAlarm_CancelAlarm_1);


	-- set state as inactive 
	idAlarms_CheckAlarm_2
	 = if (not isInner) then 0 else idAlarms_CheckAlarm_1;

	idCheckAlarm_CancelAlarm_5 
	= 0;
	

	(idCheckAlarm_CancelAlarm, idAlarms_CheckAlarm) 
	= (idCheckAlarm_CancelAlarm_5, idAlarms_CheckAlarm_2);
	

tel






-- Entry action for state :Alarms_Notification
node Alarms_Notification_en(idAlarms_Notification_1:int;
	idAlarmSubSystem_Alarms_1:int;
	ALARM_OUT_Visual_Notification_Message_1:int;
	currentAlarm_1:int;
	idNotification_Visual_1:int;
	previousAlarm_1:int;
	ALARM_OUT_Audio_Notification_Command_1:int;
	ALARM_OUT_Highest_Level_Alarm_1:int;
	ALARM_OUT_Is_Audio_Disabled_1:int;
	CONST_IN_Audio_Level:int;
	OP_CMD_IN_Disable_Audio:int;
	audioTimer_1:int;
	idNotification_Audio_1:int;
	isInner:bool)

returns (idAlarms_Notification:int;
	idAlarmSubSystem_Alarms:int;
	ALARM_OUT_Visual_Notification_Message:int;
	currentAlarm:int;
	idNotification_Visual:int;
	previousAlarm:int;
	ALARM_OUT_Audio_Notification_Command:int;
	ALARM_OUT_Is_Audio_Disabled:int;
	audioTimer:int;
	idNotification_Audio:int);


var 	idAlarms_Notification_2, idAlarms_Notification_3:int;
	idAlarmSubSystem_Alarms_2:int;
	ALARM_OUT_Visual_Notification_Message_2:int;
	currentAlarm_2:int;
	idNotification_Visual_2:int;
	previousAlarm_2:int;
	ALARM_OUT_Audio_Notification_Command_2:int;
	ALARM_OUT_Is_Audio_Disabled_2:int;
	audioTimer_2:int;
	idNotification_Audio_2:int;


let



	-- set state as active 
	idAlarmSubSystem_Alarms_2 
	= 861;
	

	
	(idNotification_Visual_2, idAlarms_Notification_2, ALARM_OUT_Visual_Notification_Message_2, currentAlarm_2, previousAlarm_2) 
	= Notification_Visual_en(idNotification_Visual_1, idAlarms_Notification_1, currentAlarm_1, ALARM_OUT_Visual_Notification_Message_1, previousAlarm_1, false);

	(idNotification_Audio_2, idAlarms_Notification_3, ALARM_OUT_Is_Audio_Disabled_2, ALARM_OUT_Audio_Notification_Command_2, audioTimer_2) 
	= Notification_Audio_en(idNotification_Audio_1, idAlarms_Notification_2, OP_CMD_IN_Disable_Audio, ALARM_OUT_Is_Audio_Disabled_1, ALARM_OUT_Audio_Notification_Command_1, audioTimer_1, ALARM_OUT_Highest_Level_Alarm_1, CONST_IN_Audio_Level, false);


	(idAlarms_Notification, idAlarmSubSystem_Alarms, ALARM_OUT_Visual_Notification_Message, currentAlarm, idNotification_Visual, previousAlarm, ALARM_OUT_Audio_Notification_Command, ALARM_OUT_Is_Audio_Disabled, audioTimer, idNotification_Audio) 
	= (idAlarms_Notification_3, idAlarmSubSystem_Alarms_2, ALARM_OUT_Visual_Notification_Message_2, currentAlarm_2, idNotification_Visual_2, previousAlarm_2, ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Is_Audio_Disabled_2, audioTimer_2, idNotification_Audio_2);
	

tel





-- Exit action for state :Alarms_Notification
node Alarms_Notification_ex(CONST_IN_Audio_Level:int;
	ALARM_OUT_Audio_Notification_Command_1:int;
	idNotification_Audio_1:int;
	OP_CMD_IN_Disable_Audio:int;
	ALARM_OUT_Is_Audio_Disabled_1:int;
	idAlarms_Notification_1:int;
	ALARM_OUT_Visual_Notification_Message_1:int;
	currentAlarm_1:int;
	idNotification_Visual_1:int;
	idAlarmSubSystem_Alarms_1:int;
	isInner:bool)

returns (ALARM_OUT_Audio_Notification_Command:int;
	idNotification_Audio:int;
	ALARM_OUT_Is_Audio_Disabled:int;
	idAlarms_Notification:int;
	ALARM_OUT_Visual_Notification_Message:int;
	currentAlarm:int;
	idNotification_Visual:int;
	idAlarmSubSystem_Alarms:int);


var 	ALARM_OUT_Audio_Notification_Command_2:int;
	idNotification_Audio_2:int;
	ALARM_OUT_Is_Audio_Disabled_2:int;
	idAlarms_Notification_2, idAlarms_Notification_3, idAlarms_Notification_4:int;
	ALARM_OUT_Visual_Notification_Message_2:int;
	currentAlarm_2:int;
	idNotification_Visual_2:int;
	idAlarmSubSystem_Alarms_2:int;


let



	
	(ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2, ALARM_OUT_Is_Audio_Disabled_2, idAlarms_Notification_2) 
	= Notification_Audio_ex(CONST_IN_Audio_Level, ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1, OP_CMD_IN_Disable_Audio, ALARM_OUT_Is_Audio_Disabled_1, idAlarms_Notification_1, false);

	(idNotification_Visual_2, ALARM_OUT_Visual_Notification_Message_2, currentAlarm_2, idAlarms_Notification_3) 
	= Notification_Visual_ex(idNotification_Visual_1, ALARM_OUT_Visual_Notification_Message_1, currentAlarm_1, idAlarms_Notification_2, false);


	-- set state as inactive 
	idAlarmSubSystem_Alarms_2
	 = if (not isInner) then 0 else idAlarmSubSystem_Alarms_1;

	idAlarms_Notification_4 
	= 0;
	

	(ALARM_OUT_Audio_Notification_Command, idNotification_Audio, ALARM_OUT_Is_Audio_Disabled, idAlarms_Notification, ALARM_OUT_Visual_Notification_Message, currentAlarm, idNotification_Visual, idAlarmSubSystem_Alarms) 
	= (ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2, ALARM_OUT_Is_Audio_Disabled_2, idAlarms_Notification_4, ALARM_OUT_Visual_Notification_Message_2, currentAlarm_2, idNotification_Visual_2, idAlarmSubSystem_Alarms_2);
	

tel






-- Entry action for state :Alarms_CheckAlarm
node Alarms_CheckAlarm_en(idAlarms_CheckAlarm_1:int;
	idAlarmSubSystem_Alarms_1:int;
	ALARM_OUT_Log_Message_ID_1:int;
	cancelAlarm_1:int;
	currentAlarm_1:int;
	idCheckAlarm_CancelAlarm_1:int;
	SENSOR_IN_Air_Pressure_Out_Of_Range:bool;
	SENSOR_IN_Battery_Depleted:bool;
	SENSOR_IN_CPU_Error:bool;
	SENSOR_IN_Humidity_Out_Of_Range:bool;
	SENSOR_IN_Memory_Corrupted:bool;
	SENSOR_IN_Pump_Too_Hot:bool;
	SENSOR_IN_RTC_Error:bool;
	SENSOR_IN_Temperature_Out_Of_Range:bool;
	SENSOR_IN_WatchDog_Interrupt_Detected:bool;
	SYS_STAT_IN_In_Therapy:bool;
	SYS_STAT_IN_Reservoir_Empty:bool;
	idCheckAlarm_Level4_1:int;
	idLevel4_IsEmptyReservoir_1:int;
	idLevel4_IsEnviromentalError_1:int;
	idLevel4_IsHardwareError_1:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_High:int;
	DB_IN_VTBI_High:int;
	IM_IN_Flow_Rate_Commanded:int;
	SENSOR_IN_Air_In_line:bool;
	SENSOR_IN_Door_Open:bool;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SENSOR_IN_Occlusion:bool;
	SYS_STAT_IN_Volume_Infused:int;
	idCheckAlarm_Level3_1:int;
	idLevel3_IsAirInLine_1:int;
	idLevel3_IsDoor_Open_1:int;
	idLevel3_IsOcclusion_1:int;
	idLevel3_IsOverInfusionFlowRate_1:int;
	idLevel3_IsOverInfusionVTBI_1:int;
	overInfusion_1:int;
	CONST_IN_Low_Reservoir:int;
	SYS_STAT_IN_Reservoir_Volume:int;
	idCheckAlarm_Level2_1:int;
	idLevel2_IsLowReservoir_1:int;
	CONFIG_IN_Config_Timer:int;
	CONST_IN_Config_Warning_Duration:int;
	CONST_IN_Max_Idle_Duration:int;
	CONST_IN_Max_Paused_Duration:int;
	DB_IN_Flow_Rate_Low:int;
	IM_IN_Current_System_Mode:int;
	LOGGING_IN_Logging_Failed:bool;
	SENSOR_IN_Battery_Low:bool;
	SENSOR_IN_Battery_Unable_To_Charge:bool;
	SENSOR_IN_Flow_Rate_Not_Stable:bool;
	SENSOR_IN_Pump_Overheated:bool;
	SENSOR_IN_Supply_Voltage_Out_Of_Range:bool;
	SYS_MON_IN_System_Monitor_Failed:bool;
	idCheckAlarm_Level1_1:int;
	idLevel1_IsBatteryError_1:int;
	idLevel1_IsConfigTimeWarning_1:int;
	idLevel1_IsFlowRateNotStable_1:int;
	idLevel1_IsIdleTimeExceeded_1:int;
	idLevel1_IsLoggingFailed_1:int;
	idLevel1_IsPausedTimeExceeded_1:int;
	idLevel1_IsPumpHot_1:int;
	idLevel1_IsSystemMonitorFailed_1:int;
	idLevel1_IsUnderInfusion_1:int;
	idletimer_1:int;
	pausedtimer_1:int;
	step_size:real;
	underInfusion_1:int;
	ALARM_OUT_Highest_Level_Alarm_1:int;
	Max_Alarm_Level_1:int;
	isInner:bool)

returns (idAlarms_CheckAlarm:int;
	idAlarmSubSystem_Alarms:int;
	ALARM_OUT_Log_Message_ID:int;
	cancelAlarm:int;
	currentAlarm:int;
	idCheckAlarm_CancelAlarm:int;
	idCheckAlarm_Level4:int;
	idLevel4_IsEmptyReservoir:int;
	idLevel4_IsEnviromentalError:int;
	idLevel4_IsHardwareError:int;
	idCheckAlarm_Level3:int;
	idLevel3_IsAirInLine:int;
	idLevel3_IsDoor_Open:int;
	idLevel3_IsOcclusion:int;
	idLevel3_IsOverInfusionFlowRate:int;
	idLevel3_IsOverInfusionVTBI:int;
	overInfusion:int;
	idCheckAlarm_Level2:int;
	idLevel2_IsLowReservoir:int;
	idCheckAlarm_Level1:int;
	idLevel1_IsBatteryError:int;
	idLevel1_IsConfigTimeWarning:int;
	idLevel1_IsFlowRateNotStable:int;
	idLevel1_IsIdleTimeExceeded:int;
	idLevel1_IsLoggingFailed:int;
	idLevel1_IsPausedTimeExceeded:int;
	idLevel1_IsPumpHot:int;
	idLevel1_IsSystemMonitorFailed:int;
	idLevel1_IsUnderInfusion:int;
	idletimer:int;
	pausedtimer:int;
	underInfusion:int;
	ALARM_OUT_Highest_Level_Alarm:int;
	Max_Alarm_Level:int);


var 	idAlarms_CheckAlarm_2, idAlarms_CheckAlarm_3, idAlarms_CheckAlarm_4, idAlarms_CheckAlarm_5, idAlarms_CheckAlarm_6, idAlarms_CheckAlarm_7:int;
	idAlarmSubSystem_Alarms_2:int;
	ALARM_OUT_Log_Message_ID_2:int;
	cancelAlarm_2:int;
	currentAlarm_2:int;
	idCheckAlarm_CancelAlarm_2:int;
	idCheckAlarm_Level4_2:int;
	idLevel4_IsEmptyReservoir_2:int;
	idLevel4_IsEnviromentalError_2:int;
	idLevel4_IsHardwareError_2:int;
	idCheckAlarm_Level3_2:int;
	idLevel3_IsAirInLine_2:int;
	idLevel3_IsDoor_Open_2:int;
	idLevel3_IsOcclusion_2:int;
	idLevel3_IsOverInfusionFlowRate_2:int;
	idLevel3_IsOverInfusionVTBI_2:int;
	overInfusion_2:int;
	idCheckAlarm_Level2_2:int;
	idLevel2_IsLowReservoir_2:int;
	idCheckAlarm_Level1_2:int;
	idLevel1_IsBatteryError_2:int;
	idLevel1_IsConfigTimeWarning_2:int;
	idLevel1_IsFlowRateNotStable_2:int;
	idLevel1_IsIdleTimeExceeded_2:int;
	idLevel1_IsLoggingFailed_2:int;
	idLevel1_IsPausedTimeExceeded_2:int;
	idLevel1_IsPumpHot_2:int;
	idLevel1_IsSystemMonitorFailed_2:int;
	idLevel1_IsUnderInfusion_2:int;
	idletimer_2:int;
	pausedtimer_2:int;
	underInfusion_2:int;
	ALARM_OUT_Highest_Level_Alarm_2:int;
	Max_Alarm_Level_2:int;


let



	-- set state as active 
	idAlarmSubSystem_Alarms_2 
	= 790;
	

	
	(idCheckAlarm_CancelAlarm_2, idAlarms_CheckAlarm_2, ALARM_OUT_Log_Message_ID_2, cancelAlarm_2, currentAlarm_2) 
	= CheckAlarm_CancelAlarm_en(idCheckAlarm_CancelAlarm_1, idAlarms_CheckAlarm_1, ALARM_OUT_Log_Message_ID_1, cancelAlarm_1, currentAlarm_1, false);

	(idCheckAlarm_Level4_2, idAlarms_CheckAlarm_3, idLevel4_IsEmptyReservoir_2, idLevel4_IsHardwareError_2, idLevel4_IsEnviromentalError_2) 
	= CheckAlarm_Level4_en(idCheckAlarm_Level4_1, idAlarms_CheckAlarm_2, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Reservoir_Empty, idLevel4_IsEmptyReservoir_1, SENSOR_IN_Battery_Depleted, SENSOR_IN_CPU_Error, SENSOR_IN_Memory_Corrupted, SENSOR_IN_Pump_Too_Hot, SENSOR_IN_RTC_Error, SENSOR_IN_WatchDog_Interrupt_Detected, idLevel4_IsHardwareError_1, SENSOR_IN_Air_Pressure_Out_Of_Range, SENSOR_IN_Humidity_Out_Of_Range, SENSOR_IN_Temperature_Out_Of_Range, idLevel4_IsEnviromentalError_1, false);

	(idCheckAlarm_Level3_2, idAlarms_CheckAlarm_4, idLevel3_IsOverInfusionFlowRate_2, overInfusion_2, idLevel3_IsOverInfusionVTBI_2, idLevel3_IsAirInLine_2, idLevel3_IsOcclusion_2, idLevel3_IsDoor_Open_2) 
	= CheckAlarm_Level3_en(idCheckAlarm_Level3_1, idAlarms_CheckAlarm_3, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, idLevel3_IsOverInfusionFlowRate_1, overInfusion_1, DB_IN_VTBI_High, SYS_STAT_IN_Volume_Infused, idLevel3_IsOverInfusionVTBI_1, SENSOR_IN_Air_In_line, idLevel3_IsAirInLine_1, SENSOR_IN_Occlusion, idLevel3_IsOcclusion_1, SENSOR_IN_Door_Open, idLevel3_IsDoor_Open_1, false);

	(idCheckAlarm_Level2_2, idAlarms_CheckAlarm_5, idLevel2_IsLowReservoir_2) 
	= CheckAlarm_Level2_en(idCheckAlarm_Level2_1, idAlarms_CheckAlarm_4, CONST_IN_Low_Reservoir, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Reservoir_Volume, idLevel2_IsLowReservoir_1, false);

	(idCheckAlarm_Level1_2, idAlarms_CheckAlarm_6, idLevel1_IsUnderInfusion_2, underInfusion_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idletimer_2, idLevel1_IsPausedTimeExceeded_2, pausedtimer_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsBatteryError_2, idLevel1_IsPumpHot_2, idLevel1_IsLoggingFailed_2, idLevel1_IsSystemMonitorFailed_2) 
	= CheckAlarm_Level1_en(idCheckAlarm_Level1_1, idAlarms_CheckAlarm_5, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, idLevel1_IsUnderInfusion_1, underInfusion_1, SENSOR_IN_Flow_Rate_Not_Stable, idLevel1_IsFlowRateNotStable_1, CONST_IN_Max_Idle_Duration, IM_IN_Current_System_Mode, idLevel1_IsIdleTimeExceeded_1, idletimer_1, step_size, CONST_IN_Max_Paused_Duration, idLevel1_IsPausedTimeExceeded_1, pausedtimer_1, CONFIG_IN_Config_Timer, CONST_IN_Config_Warning_Duration, idLevel1_IsConfigTimeWarning_1, SENSOR_IN_Battery_Low, SENSOR_IN_Battery_Unable_To_Charge, SENSOR_IN_Supply_Voltage_Out_Of_Range, idLevel1_IsBatteryError_1, SENSOR_IN_Pump_Overheated, idLevel1_IsPumpHot_1, LOGGING_IN_Logging_Failed, idLevel1_IsLoggingFailed_1, SYS_MON_IN_System_Monitor_Failed, idLevel1_IsSystemMonitorFailed_1, false);

	(idAlarms_CheckAlarm_7, ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2) 
	= CheckAlarm_SetAlarmStatus_en(idAlarms_CheckAlarm_6, ALARM_OUT_Highest_Level_Alarm_1, Max_Alarm_Level_1, false);


	(idAlarms_CheckAlarm, idAlarmSubSystem_Alarms, ALARM_OUT_Log_Message_ID, cancelAlarm, currentAlarm, idCheckAlarm_CancelAlarm, idCheckAlarm_Level4, idLevel4_IsEmptyReservoir, idLevel4_IsEnviromentalError, idLevel4_IsHardwareError, idCheckAlarm_Level3, idLevel3_IsAirInLine, idLevel3_IsDoor_Open, idLevel3_IsOcclusion, idLevel3_IsOverInfusionFlowRate, idLevel3_IsOverInfusionVTBI, overInfusion, idCheckAlarm_Level2, idLevel2_IsLowReservoir, idCheckAlarm_Level1, idLevel1_IsBatteryError, idLevel1_IsConfigTimeWarning, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idLevel1_IsLoggingFailed, idLevel1_IsPausedTimeExceeded, idLevel1_IsPumpHot, idLevel1_IsSystemMonitorFailed, idLevel1_IsUnderInfusion, idletimer, pausedtimer, underInfusion, ALARM_OUT_Highest_Level_Alarm, Max_Alarm_Level) 
	= (idAlarms_CheckAlarm_7, idAlarmSubSystem_Alarms_2, ALARM_OUT_Log_Message_ID_2, cancelAlarm_2, currentAlarm_2, idCheckAlarm_CancelAlarm_2, idCheckAlarm_Level4_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsEnviromentalError_2, idLevel4_IsHardwareError_2, idCheckAlarm_Level3_2, idLevel3_IsAirInLine_2, idLevel3_IsDoor_Open_2, idLevel3_IsOcclusion_2, idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionVTBI_2, overInfusion_2, idCheckAlarm_Level2_2, idLevel2_IsLowReservoir_2, idCheckAlarm_Level1_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idLevel1_IsLoggingFailed_2, idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPumpHot_2, idLevel1_IsSystemMonitorFailed_2, idLevel1_IsUnderInfusion_2, idletimer_2, pausedtimer_2, underInfusion_2, ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2);
	

tel





-- Exit action for state :Alarms_CheckAlarm
node Alarms_CheckAlarm_ex(ALARM_OUT_Highest_Level_Alarm_1:int;
	Max_Alarm_Level_1:int;
	cancelAlarm_1:int;
	idAlarms_CheckAlarm_1:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_Low:int;
	IM_IN_Flow_Rate_Commanded:int;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SYS_STAT_IN_In_Therapy:bool;
	idCheckAlarm_Level1_1:int;
	idLevel1_IsBatteryError_1:int;
	idLevel1_IsConfigTimeWarning_1:int;
	idLevel1_IsFlowRateNotStable_1:int;
	idLevel1_IsIdleTimeExceeded_1:int;
	idLevel1_IsLoggingFailed_1:int;
	idLevel1_IsPausedTimeExceeded_1:int;
	idLevel1_IsPumpHot_1:int;
	idLevel1_IsSystemMonitorFailed_1:int;
	idLevel1_IsUnderInfusion_1:int;
	idletimer_1:int;
	pausedtimer_1:int;
	underInfusion_1:int;
	idCheckAlarm_Level2_1:int;
	idLevel2_IsLowReservoir_1:int;
	DB_IN_Flow_Rate_High:int;
	idCheckAlarm_Level3_1:int;
	idLevel3_IsAirInLine_1:int;
	idLevel3_IsDoor_Open_1:int;
	idLevel3_IsOcclusion_1:int;
	idLevel3_IsOverInfusionFlowRate_1:int;
	idLevel3_IsOverInfusionVTBI_1:int;
	overInfusion_1:int;
	idCheckAlarm_Level4_1:int;
	idLevel4_IsEmptyReservoir_1:int;
	idLevel4_IsEnviromentalError_1:int;
	idLevel4_IsHardwareError_1:int;
	idCheckAlarm_CancelAlarm_1:int;
	idAlarmSubSystem_Alarms_1:int;
	isInner:bool)

returns (ALARM_OUT_Highest_Level_Alarm:int;
	Max_Alarm_Level:int;
	cancelAlarm:int;
	idAlarms_CheckAlarm:int;
	idCheckAlarm_Level1:int;
	idLevel1_IsBatteryError:int;
	idLevel1_IsConfigTimeWarning:int;
	idLevel1_IsFlowRateNotStable:int;
	idLevel1_IsIdleTimeExceeded:int;
	idLevel1_IsLoggingFailed:int;
	idLevel1_IsPausedTimeExceeded:int;
	idLevel1_IsPumpHot:int;
	idLevel1_IsSystemMonitorFailed:int;
	idLevel1_IsUnderInfusion:int;
	idletimer:int;
	pausedtimer:int;
	underInfusion:int;
	idCheckAlarm_Level2:int;
	idLevel2_IsLowReservoir:int;
	idCheckAlarm_Level3:int;
	idLevel3_IsAirInLine:int;
	idLevel3_IsDoor_Open:int;
	idLevel3_IsOcclusion:int;
	idLevel3_IsOverInfusionFlowRate:int;
	idLevel3_IsOverInfusionVTBI:int;
	overInfusion:int;
	idCheckAlarm_Level4:int;
	idLevel4_IsEmptyReservoir:int;
	idLevel4_IsEnviromentalError:int;
	idLevel4_IsHardwareError:int;
	idCheckAlarm_CancelAlarm:int;
	idAlarmSubSystem_Alarms:int);


var 	ALARM_OUT_Highest_Level_Alarm_2:int;
	Max_Alarm_Level_2:int;
	cancelAlarm_2:int;
	idAlarms_CheckAlarm_2, idAlarms_CheckAlarm_3, idAlarms_CheckAlarm_4, idAlarms_CheckAlarm_5, idAlarms_CheckAlarm_6, idAlarms_CheckAlarm_7, idAlarms_CheckAlarm_8:int;
	idCheckAlarm_Level1_2:int;
	idLevel1_IsBatteryError_2:int;
	idLevel1_IsConfigTimeWarning_2:int;
	idLevel1_IsFlowRateNotStable_2:int;
	idLevel1_IsIdleTimeExceeded_2:int;
	idLevel1_IsLoggingFailed_2:int;
	idLevel1_IsPausedTimeExceeded_2:int;
	idLevel1_IsPumpHot_2:int;
	idLevel1_IsSystemMonitorFailed_2:int;
	idLevel1_IsUnderInfusion_2:int;
	idletimer_2:int;
	pausedtimer_2:int;
	underInfusion_2:int;
	idCheckAlarm_Level2_2:int;
	idLevel2_IsLowReservoir_2:int;
	idCheckAlarm_Level3_2:int;
	idLevel3_IsAirInLine_2:int;
	idLevel3_IsDoor_Open_2:int;
	idLevel3_IsOcclusion_2:int;
	idLevel3_IsOverInfusionFlowRate_2:int;
	idLevel3_IsOverInfusionVTBI_2:int;
	overInfusion_2:int;
	idCheckAlarm_Level4_2:int;
	idLevel4_IsEmptyReservoir_2:int;
	idLevel4_IsEnviromentalError_2:int;
	idLevel4_IsHardwareError_2:int;
	idCheckAlarm_CancelAlarm_2:int;
	idAlarmSubSystem_Alarms_2:int;


let



	
	(ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2, cancelAlarm_2, idAlarms_CheckAlarm_2) 
	= CheckAlarm_SetAlarmStatus_ex(ALARM_OUT_Highest_Level_Alarm_1, Max_Alarm_Level_1, cancelAlarm_1, idAlarms_CheckAlarm_1, false);

	(idLevel1_IsSystemMonitorFailed_2, idCheckAlarm_Level1_2, idLevel1_IsLoggingFailed_2, idLevel1_IsPumpHot_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsPausedTimeExceeded_2, pausedtimer_2, idLevel1_IsIdleTimeExceeded_2, idletimer_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsUnderInfusion_2, underInfusion_2, idAlarms_CheckAlarm_3) 
	= CheckAlarm_Level1_ex(idLevel1_IsSystemMonitorFailed_1, idCheckAlarm_Level1_1, idLevel1_IsLoggingFailed_1, idLevel1_IsPumpHot_1, idLevel1_IsBatteryError_1, idLevel1_IsConfigTimeWarning_1, idLevel1_IsPausedTimeExceeded_1, pausedtimer_1, idLevel1_IsIdleTimeExceeded_1, idletimer_1, idLevel1_IsFlowRateNotStable_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, idLevel1_IsUnderInfusion_1, underInfusion_1, idAlarms_CheckAlarm_2, false);

	(idLevel2_IsLowReservoir_2, idCheckAlarm_Level2_2, idAlarms_CheckAlarm_4) 
	= CheckAlarm_Level2_ex(idLevel2_IsLowReservoir_1, idCheckAlarm_Level2_1, idAlarms_CheckAlarm_3, false);

	(idLevel3_IsDoor_Open_2, idCheckAlarm_Level3_2, idLevel3_IsOcclusion_2, idLevel3_IsAirInLine_2, idLevel3_IsOverInfusionVTBI_2, idLevel3_IsOverInfusionFlowRate_2, overInfusion_2, idAlarms_CheckAlarm_5) 
	= CheckAlarm_Level3_ex(idLevel3_IsDoor_Open_1, idCheckAlarm_Level3_1, idLevel3_IsOcclusion_1, idLevel3_IsAirInLine_1, idLevel3_IsOverInfusionVTBI_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, idLevel3_IsOverInfusionFlowRate_1, overInfusion_1, idAlarms_CheckAlarm_4, false);

	(idLevel4_IsEnviromentalError_2, idCheckAlarm_Level4_2, idLevel4_IsHardwareError_2, idLevel4_IsEmptyReservoir_2, idAlarms_CheckAlarm_6) 
	= CheckAlarm_Level4_ex(idLevel4_IsEnviromentalError_1, idCheckAlarm_Level4_1, idLevel4_IsHardwareError_1, idLevel4_IsEmptyReservoir_1, idAlarms_CheckAlarm_5, false);

	(idCheckAlarm_CancelAlarm_2, idAlarms_CheckAlarm_7) 
	= CheckAlarm_CancelAlarm_ex(idCheckAlarm_CancelAlarm_1, idAlarms_CheckAlarm_6, false);


	-- set state as inactive 
	idAlarmSubSystem_Alarms_2
	 = if (not isInner) then 0 else idAlarmSubSystem_Alarms_1;

	idAlarms_CheckAlarm_8 
	= 0;
	

	(ALARM_OUT_Highest_Level_Alarm, Max_Alarm_Level, cancelAlarm, idAlarms_CheckAlarm, idCheckAlarm_Level1, idLevel1_IsBatteryError, idLevel1_IsConfigTimeWarning, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idLevel1_IsLoggingFailed, idLevel1_IsPausedTimeExceeded, idLevel1_IsPumpHot, idLevel1_IsSystemMonitorFailed, idLevel1_IsUnderInfusion, idletimer, pausedtimer, underInfusion, idCheckAlarm_Level2, idLevel2_IsLowReservoir, idCheckAlarm_Level3, idLevel3_IsAirInLine, idLevel3_IsDoor_Open, idLevel3_IsOcclusion, idLevel3_IsOverInfusionFlowRate, idLevel3_IsOverInfusionVTBI, overInfusion, idCheckAlarm_Level4, idLevel4_IsEmptyReservoir, idLevel4_IsEnviromentalError, idLevel4_IsHardwareError, idCheckAlarm_CancelAlarm, idAlarmSubSystem_Alarms) 
	= (ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2, cancelAlarm_2, idAlarms_CheckAlarm_8, idCheckAlarm_Level1_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idLevel1_IsLoggingFailed_2, idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPumpHot_2, idLevel1_IsSystemMonitorFailed_2, idLevel1_IsUnderInfusion_2, idletimer_2, pausedtimer_2, underInfusion_2, idCheckAlarm_Level2_2, idLevel2_IsLowReservoir_2, idCheckAlarm_Level3_2, idLevel3_IsAirInLine_2, idLevel3_IsDoor_Open_2, idLevel3_IsOcclusion_2, idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionVTBI_2, overInfusion_2, idCheckAlarm_Level4_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsEnviromentalError_2, idLevel4_IsHardwareError_2, idCheckAlarm_CancelAlarm_2, idAlarmSubSystem_Alarms_2);
	

tel






-- Entry action for state :AlarmSubSystem_NOT_ON
node AlarmSubSystem_NOT_ON_en(idAlarmSubSystem_AlarmSubSystem_1:int;
	isInner:bool)

returns (idAlarmSubSystem_AlarmSubSystem:int);


var 	idAlarmSubSystem_AlarmSubSystem_2:int;


let



	-- set state as active 
	idAlarmSubSystem_AlarmSubSystem_2 
	= 870;
	

	(idAlarmSubSystem_AlarmSubSystem) 
	= (idAlarmSubSystem_AlarmSubSystem_2);
	

tel





-- Exit action for state :AlarmSubSystem_NOT_ON
node AlarmSubSystem_NOT_ON_ex(idAlarmSubSystem_AlarmSubSystem_1:int;
	isInner:bool)

returns (idAlarmSubSystem_AlarmSubSystem:int);


var 	idAlarmSubSystem_AlarmSubSystem_2:int;


let



	-- set state as inactive 
	idAlarmSubSystem_AlarmSubSystem_2
	 = if (not isInner) then 0 else idAlarmSubSystem_AlarmSubSystem_1;


	(idAlarmSubSystem_AlarmSubSystem) 
	= (idAlarmSubSystem_AlarmSubSystem_2);
	

tel






-- Entry action for state :AlarmSubSystem_Alarms
node AlarmSubSystem_Alarms_en(idAlarmSubSystem_Alarms_1:int;
	idAlarmSubSystem_AlarmSubSystem_1:int;
	ALARM_OUT_Highest_Level_Alarm_1:int;
	ALARM_OUT_Log_Message_ID_1:int;
	CONFIG_IN_Config_Timer:int;
	CONST_IN_Config_Warning_Duration:int;
	CONST_IN_Low_Reservoir:int;
	CONST_IN_Max_Idle_Duration:int;
	CONST_IN_Max_Paused_Duration:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_High:int;
	DB_IN_Flow_Rate_Low:int;
	DB_IN_VTBI_High:int;
	IM_IN_Current_System_Mode:int;
	IM_IN_Flow_Rate_Commanded:int;
	LOGGING_IN_Logging_Failed:bool;
	Max_Alarm_Level_1:int;
	SENSOR_IN_Air_In_line:bool;
	SENSOR_IN_Air_Pressure_Out_Of_Range:bool;
	SENSOR_IN_Battery_Depleted:bool;
	SENSOR_IN_Battery_Low:bool;
	SENSOR_IN_Battery_Unable_To_Charge:bool;
	SENSOR_IN_CPU_Error:bool;
	SENSOR_IN_Door_Open:bool;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SENSOR_IN_Flow_Rate_Not_Stable:bool;
	SENSOR_IN_Humidity_Out_Of_Range:bool;
	SENSOR_IN_Memory_Corrupted:bool;
	SENSOR_IN_Occlusion:bool;
	SENSOR_IN_Pump_Overheated:bool;
	SENSOR_IN_Pump_Too_Hot:bool;
	SENSOR_IN_RTC_Error:bool;
	SENSOR_IN_Supply_Voltage_Out_Of_Range:bool;
	SENSOR_IN_Temperature_Out_Of_Range:bool;
	SENSOR_IN_WatchDog_Interrupt_Detected:bool;
	SYS_MON_IN_System_Monitor_Failed:bool;
	SYS_STAT_IN_In_Therapy:bool;
	SYS_STAT_IN_Reservoir_Empty:bool;
	SYS_STAT_IN_Reservoir_Volume:int;
	SYS_STAT_IN_Volume_Infused:int;
	cancelAlarm_1:int;
	currentAlarm_1:int;
	idAlarms_CheckAlarm_1:int;
	idCheckAlarm_CancelAlarm_1:int;
	idCheckAlarm_Level1_1:int;
	idCheckAlarm_Level2_1:int;
	idCheckAlarm_Level3_1:int;
	idCheckAlarm_Level4_1:int;
	idLevel1_IsBatteryError_1:int;
	idLevel1_IsConfigTimeWarning_1:int;
	idLevel1_IsFlowRateNotStable_1:int;
	idLevel1_IsIdleTimeExceeded_1:int;
	idLevel1_IsLoggingFailed_1:int;
	idLevel1_IsPausedTimeExceeded_1:int;
	idLevel1_IsPumpHot_1:int;
	idLevel1_IsSystemMonitorFailed_1:int;
	idLevel1_IsUnderInfusion_1:int;
	idLevel2_IsLowReservoir_1:int;
	idLevel3_IsAirInLine_1:int;
	idLevel3_IsDoor_Open_1:int;
	idLevel3_IsOcclusion_1:int;
	idLevel3_IsOverInfusionFlowRate_1:int;
	idLevel3_IsOverInfusionVTBI_1:int;
	idLevel4_IsEmptyReservoir_1:int;
	idLevel4_IsEnviromentalError_1:int;
	idLevel4_IsHardwareError_1:int;
	idletimer_1:int;
	overInfusion_1:int;
	pausedtimer_1:int;
	step_size:real;
	underInfusion_1:int;
	ALARM_OUT_Audio_Notification_Command_1:int;
	ALARM_OUT_Is_Audio_Disabled_1:int;
	ALARM_OUT_Visual_Notification_Message_1:int;
	CONST_IN_Audio_Level:int;
	OP_CMD_IN_Disable_Audio:int;
	audioTimer_1:int;
	idAlarms_Notification_1:int;
	idNotification_Audio_1:int;
	idNotification_Visual_1:int;
	previousAlarm_1:int;
	isInner:bool)

returns (idAlarmSubSystem_Alarms:int;
	idAlarmSubSystem_AlarmSubSystem:int;
	ALARM_OUT_Highest_Level_Alarm:int;
	ALARM_OUT_Log_Message_ID:int;
	Max_Alarm_Level:int;
	cancelAlarm:int;
	currentAlarm:int;
	idAlarms_CheckAlarm:int;
	idCheckAlarm_CancelAlarm:int;
	idCheckAlarm_Level1:int;
	idCheckAlarm_Level2:int;
	idCheckAlarm_Level3:int;
	idCheckAlarm_Level4:int;
	idLevel1_IsBatteryError:int;
	idLevel1_IsConfigTimeWarning:int;
	idLevel1_IsFlowRateNotStable:int;
	idLevel1_IsIdleTimeExceeded:int;
	idLevel1_IsLoggingFailed:int;
	idLevel1_IsPausedTimeExceeded:int;
	idLevel1_IsPumpHot:int;
	idLevel1_IsSystemMonitorFailed:int;
	idLevel1_IsUnderInfusion:int;
	idLevel2_IsLowReservoir:int;
	idLevel3_IsAirInLine:int;
	idLevel3_IsDoor_Open:int;
	idLevel3_IsOcclusion:int;
	idLevel3_IsOverInfusionFlowRate:int;
	idLevel3_IsOverInfusionVTBI:int;
	idLevel4_IsEmptyReservoir:int;
	idLevel4_IsEnviromentalError:int;
	idLevel4_IsHardwareError:int;
	idletimer:int;
	overInfusion:int;
	pausedtimer:int;
	underInfusion:int;
	ALARM_OUT_Audio_Notification_Command:int;
	ALARM_OUT_Is_Audio_Disabled:int;
	ALARM_OUT_Visual_Notification_Message:int;
	audioTimer:int;
	idAlarms_Notification:int;
	idNotification_Audio:int;
	idNotification_Visual:int;
	previousAlarm:int);


var 	idAlarmSubSystem_Alarms_2, idAlarmSubSystem_Alarms_3:int;
	idAlarmSubSystem_AlarmSubSystem_2:int;
	ALARM_OUT_Highest_Level_Alarm_2:int;
	ALARM_OUT_Log_Message_ID_2:int;
	Max_Alarm_Level_2:int;
	cancelAlarm_2:int;
	currentAlarm_2, currentAlarm_3:int;
	idAlarms_CheckAlarm_2:int;
	idCheckAlarm_CancelAlarm_2:int;
	idCheckAlarm_Level1_2:int;
	idCheckAlarm_Level2_2:int;
	idCheckAlarm_Level3_2:int;
	idCheckAlarm_Level4_2:int;
	idLevel1_IsBatteryError_2:int;
	idLevel1_IsConfigTimeWarning_2:int;
	idLevel1_IsFlowRateNotStable_2:int;
	idLevel1_IsIdleTimeExceeded_2:int;
	idLevel1_IsLoggingFailed_2:int;
	idLevel1_IsPausedTimeExceeded_2:int;
	idLevel1_IsPumpHot_2:int;
	idLevel1_IsSystemMonitorFailed_2:int;
	idLevel1_IsUnderInfusion_2:int;
	idLevel2_IsLowReservoir_2:int;
	idLevel3_IsAirInLine_2:int;
	idLevel3_IsDoor_Open_2:int;
	idLevel3_IsOcclusion_2:int;
	idLevel3_IsOverInfusionFlowRate_2:int;
	idLevel3_IsOverInfusionVTBI_2:int;
	idLevel4_IsEmptyReservoir_2:int;
	idLevel4_IsEnviromentalError_2:int;
	idLevel4_IsHardwareError_2:int;
	idletimer_2:int;
	overInfusion_2:int;
	pausedtimer_2:int;
	underInfusion_2:int;
	ALARM_OUT_Audio_Notification_Command_2:int;
	ALARM_OUT_Is_Audio_Disabled_2:int;
	ALARM_OUT_Visual_Notification_Message_2:int;
	audioTimer_2:int;
	idAlarms_Notification_2:int;
	idNotification_Audio_2:int;
	idNotification_Visual_2:int;
	previousAlarm_2:int;


let



	-- set state as active 
	idAlarmSubSystem_AlarmSubSystem_2 
	= 789;
	

	
	(idAlarms_CheckAlarm_2, idAlarmSubSystem_Alarms_2, ALARM_OUT_Log_Message_ID_2, cancelAlarm_2, currentAlarm_2, idCheckAlarm_CancelAlarm_2, idCheckAlarm_Level4_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsEnviromentalError_2, idLevel4_IsHardwareError_2, idCheckAlarm_Level3_2, idLevel3_IsAirInLine_2, idLevel3_IsDoor_Open_2, idLevel3_IsOcclusion_2, idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionVTBI_2, overInfusion_2, idCheckAlarm_Level2_2, idLevel2_IsLowReservoir_2, idCheckAlarm_Level1_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idLevel1_IsLoggingFailed_2, idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPumpHot_2, idLevel1_IsSystemMonitorFailed_2, idLevel1_IsUnderInfusion_2, idletimer_2, pausedtimer_2, underInfusion_2, ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2) 
	= Alarms_CheckAlarm_en(idAlarms_CheckAlarm_1, idAlarmSubSystem_Alarms_1, ALARM_OUT_Log_Message_ID_1, cancelAlarm_1, currentAlarm_1, idCheckAlarm_CancelAlarm_1, SENSOR_IN_Air_Pressure_Out_Of_Range, SENSOR_IN_Battery_Depleted, SENSOR_IN_CPU_Error, SENSOR_IN_Humidity_Out_Of_Range, SENSOR_IN_Memory_Corrupted, SENSOR_IN_Pump_Too_Hot, SENSOR_IN_RTC_Error, SENSOR_IN_Temperature_Out_Of_Range, SENSOR_IN_WatchDog_Interrupt_Detected, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Reservoir_Empty, idCheckAlarm_Level4_1, idLevel4_IsEmptyReservoir_1, idLevel4_IsEnviromentalError_1, idLevel4_IsHardwareError_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, DB_IN_VTBI_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Air_In_line, SENSOR_IN_Door_Open, SENSOR_IN_Flow_Rate_Monitored, SENSOR_IN_Occlusion, SYS_STAT_IN_Volume_Infused, idCheckAlarm_Level3_1, idLevel3_IsAirInLine_1, idLevel3_IsDoor_Open_1, idLevel3_IsOcclusion_1, idLevel3_IsOverInfusionFlowRate_1, idLevel3_IsOverInfusionVTBI_1, overInfusion_1, CONST_IN_Low_Reservoir, SYS_STAT_IN_Reservoir_Volume, idCheckAlarm_Level2_1, idLevel2_IsLowReservoir_1, CONFIG_IN_Config_Timer, CONST_IN_Config_Warning_Duration, CONST_IN_Max_Idle_Duration, CONST_IN_Max_Paused_Duration, DB_IN_Flow_Rate_Low, IM_IN_Current_System_Mode, LOGGING_IN_Logging_Failed, SENSOR_IN_Battery_Low, SENSOR_IN_Battery_Unable_To_Charge, SENSOR_IN_Flow_Rate_Not_Stable, SENSOR_IN_Pump_Overheated, SENSOR_IN_Supply_Voltage_Out_Of_Range, SYS_MON_IN_System_Monitor_Failed, idCheckAlarm_Level1_1, idLevel1_IsBatteryError_1, idLevel1_IsConfigTimeWarning_1, idLevel1_IsFlowRateNotStable_1, idLevel1_IsIdleTimeExceeded_1, idLevel1_IsLoggingFailed_1, idLevel1_IsPausedTimeExceeded_1, idLevel1_IsPumpHot_1, idLevel1_IsSystemMonitorFailed_1, idLevel1_IsUnderInfusion_1, idletimer_1, pausedtimer_1, step_size, underInfusion_1, ALARM_OUT_Highest_Level_Alarm_1, Max_Alarm_Level_1, false);

	(idAlarms_Notification_2, idAlarmSubSystem_Alarms_3, ALARM_OUT_Visual_Notification_Message_2, currentAlarm_3, idNotification_Visual_2, previousAlarm_2, ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Is_Audio_Disabled_2, audioTimer_2, idNotification_Audio_2) 
	= Alarms_Notification_en(idAlarms_Notification_1, idAlarmSubSystem_Alarms_2, ALARM_OUT_Visual_Notification_Message_1, currentAlarm_2, idNotification_Visual_1, previousAlarm_1, ALARM_OUT_Audio_Notification_Command_1, ALARM_OUT_Highest_Level_Alarm_2, ALARM_OUT_Is_Audio_Disabled_1, CONST_IN_Audio_Level, OP_CMD_IN_Disable_Audio, audioTimer_1, idNotification_Audio_1, false);


	(idAlarmSubSystem_Alarms, idAlarmSubSystem_AlarmSubSystem, ALARM_OUT_Highest_Level_Alarm, ALARM_OUT_Log_Message_ID, Max_Alarm_Level, cancelAlarm, currentAlarm, idAlarms_CheckAlarm, idCheckAlarm_CancelAlarm, idCheckAlarm_Level1, idCheckAlarm_Level2, idCheckAlarm_Level3, idCheckAlarm_Level4, idLevel1_IsBatteryError, idLevel1_IsConfigTimeWarning, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idLevel1_IsLoggingFailed, idLevel1_IsPausedTimeExceeded, idLevel1_IsPumpHot, idLevel1_IsSystemMonitorFailed, idLevel1_IsUnderInfusion, idLevel2_IsLowReservoir, idLevel3_IsAirInLine, idLevel3_IsDoor_Open, idLevel3_IsOcclusion, idLevel3_IsOverInfusionFlowRate, idLevel3_IsOverInfusionVTBI, idLevel4_IsEmptyReservoir, idLevel4_IsEnviromentalError, idLevel4_IsHardwareError, idletimer, overInfusion, pausedtimer, underInfusion, ALARM_OUT_Audio_Notification_Command, ALARM_OUT_Is_Audio_Disabled, ALARM_OUT_Visual_Notification_Message, audioTimer, idAlarms_Notification, idNotification_Audio, idNotification_Visual, previousAlarm) 
	= (idAlarmSubSystem_Alarms_3, idAlarmSubSystem_AlarmSubSystem_2, ALARM_OUT_Highest_Level_Alarm_2, ALARM_OUT_Log_Message_ID_2, Max_Alarm_Level_2, cancelAlarm_2, currentAlarm_3, idAlarms_CheckAlarm_2, idCheckAlarm_CancelAlarm_2, idCheckAlarm_Level1_2, idCheckAlarm_Level2_2, idCheckAlarm_Level3_2, idCheckAlarm_Level4_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idLevel1_IsLoggingFailed_2, idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPumpHot_2, idLevel1_IsSystemMonitorFailed_2, idLevel1_IsUnderInfusion_2, idLevel2_IsLowReservoir_2, idLevel3_IsAirInLine_2, idLevel3_IsDoor_Open_2, idLevel3_IsOcclusion_2, idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionVTBI_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsEnviromentalError_2, idLevel4_IsHardwareError_2, idletimer_2, overInfusion_2, pausedtimer_2, underInfusion_2, ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Is_Audio_Disabled_2, ALARM_OUT_Visual_Notification_Message_2, audioTimer_2, idAlarms_Notification_2, idNotification_Audio_2, idNotification_Visual_2, previousAlarm_2);
	

tel





-- Exit action for state :AlarmSubSystem_Alarms
node AlarmSubSystem_Alarms_ex(CONST_IN_Audio_Level:int;
	ALARM_OUT_Audio_Notification_Command_1:int;
	idNotification_Audio_1:int;
	OP_CMD_IN_Disable_Audio:int;
	ALARM_OUT_Is_Audio_Disabled_1:int;
	idAlarms_Notification_1:int;
	ALARM_OUT_Visual_Notification_Message_1:int;
	currentAlarm_1:int;
	idNotification_Visual_1:int;
	idAlarmSubSystem_Alarms_1:int;
	ALARM_OUT_Highest_Level_Alarm_1:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_High:int;
	DB_IN_Flow_Rate_Low:int;
	IM_IN_Flow_Rate_Commanded:int;
	Max_Alarm_Level_1:int;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SYS_STAT_IN_In_Therapy:bool;
	cancelAlarm_1:int;
	idAlarms_CheckAlarm_1:int;
	idCheckAlarm_CancelAlarm_1:int;
	idCheckAlarm_Level1_1:int;
	idCheckAlarm_Level2_1:int;
	idCheckAlarm_Level3_1:int;
	idCheckAlarm_Level4_1:int;
	idLevel1_IsBatteryError_1:int;
	idLevel1_IsConfigTimeWarning_1:int;
	idLevel1_IsFlowRateNotStable_1:int;
	idLevel1_IsIdleTimeExceeded_1:int;
	idLevel1_IsLoggingFailed_1:int;
	idLevel1_IsPausedTimeExceeded_1:int;
	idLevel1_IsPumpHot_1:int;
	idLevel1_IsSystemMonitorFailed_1:int;
	idLevel1_IsUnderInfusion_1:int;
	idLevel2_IsLowReservoir_1:int;
	idLevel3_IsAirInLine_1:int;
	idLevel3_IsDoor_Open_1:int;
	idLevel3_IsOcclusion_1:int;
	idLevel3_IsOverInfusionFlowRate_1:int;
	idLevel3_IsOverInfusionVTBI_1:int;
	idLevel4_IsEmptyReservoir_1:int;
	idLevel4_IsEnviromentalError_1:int;
	idLevel4_IsHardwareError_1:int;
	idletimer_1:int;
	overInfusion_1:int;
	pausedtimer_1:int;
	underInfusion_1:int;
	idAlarmSubSystem_AlarmSubSystem_1:int;
	isInner:bool)

returns (ALARM_OUT_Audio_Notification_Command:int;
	idNotification_Audio:int;
	ALARM_OUT_Is_Audio_Disabled:int;
	idAlarms_Notification:int;
	ALARM_OUT_Visual_Notification_Message:int;
	currentAlarm:int;
	idNotification_Visual:int;
	idAlarmSubSystem_Alarms:int;
	ALARM_OUT_Highest_Level_Alarm:int;
	Max_Alarm_Level:int;
	cancelAlarm:int;
	idAlarms_CheckAlarm:int;
	idCheckAlarm_CancelAlarm:int;
	idCheckAlarm_Level1:int;
	idCheckAlarm_Level2:int;
	idCheckAlarm_Level3:int;
	idCheckAlarm_Level4:int;
	idLevel1_IsBatteryError:int;
	idLevel1_IsConfigTimeWarning:int;
	idLevel1_IsFlowRateNotStable:int;
	idLevel1_IsIdleTimeExceeded:int;
	idLevel1_IsLoggingFailed:int;
	idLevel1_IsPausedTimeExceeded:int;
	idLevel1_IsPumpHot:int;
	idLevel1_IsSystemMonitorFailed:int;
	idLevel1_IsUnderInfusion:int;
	idLevel2_IsLowReservoir:int;
	idLevel3_IsAirInLine:int;
	idLevel3_IsDoor_Open:int;
	idLevel3_IsOcclusion:int;
	idLevel3_IsOverInfusionFlowRate:int;
	idLevel3_IsOverInfusionVTBI:int;
	idLevel4_IsEmptyReservoir:int;
	idLevel4_IsEnviromentalError:int;
	idLevel4_IsHardwareError:int;
	idletimer:int;
	overInfusion:int;
	pausedtimer:int;
	underInfusion:int;
	idAlarmSubSystem_AlarmSubSystem:int);


var 	ALARM_OUT_Audio_Notification_Command_2:int;
	idNotification_Audio_2:int;
	ALARM_OUT_Is_Audio_Disabled_2:int;
	idAlarms_Notification_2:int;
	ALARM_OUT_Visual_Notification_Message_2:int;
	currentAlarm_2:int;
	idNotification_Visual_2:int;
	idAlarmSubSystem_Alarms_2, idAlarmSubSystem_Alarms_3, idAlarmSubSystem_Alarms_4:int;
	ALARM_OUT_Highest_Level_Alarm_2:int;
	Max_Alarm_Level_2:int;
	cancelAlarm_2:int;
	idAlarms_CheckAlarm_2:int;
	idCheckAlarm_CancelAlarm_2:int;
	idCheckAlarm_Level1_2:int;
	idCheckAlarm_Level2_2:int;
	idCheckAlarm_Level3_2:int;
	idCheckAlarm_Level4_2:int;
	idLevel1_IsBatteryError_2:int;
	idLevel1_IsConfigTimeWarning_2:int;
	idLevel1_IsFlowRateNotStable_2:int;
	idLevel1_IsIdleTimeExceeded_2:int;
	idLevel1_IsLoggingFailed_2:int;
	idLevel1_IsPausedTimeExceeded_2:int;
	idLevel1_IsPumpHot_2:int;
	idLevel1_IsSystemMonitorFailed_2:int;
	idLevel1_IsUnderInfusion_2:int;
	idLevel2_IsLowReservoir_2:int;
	idLevel3_IsAirInLine_2:int;
	idLevel3_IsDoor_Open_2:int;
	idLevel3_IsOcclusion_2:int;
	idLevel3_IsOverInfusionFlowRate_2:int;
	idLevel3_IsOverInfusionVTBI_2:int;
	idLevel4_IsEmptyReservoir_2:int;
	idLevel4_IsEnviromentalError_2:int;
	idLevel4_IsHardwareError_2:int;
	idletimer_2:int;
	overInfusion_2:int;
	pausedtimer_2:int;
	underInfusion_2:int;
	idAlarmSubSystem_AlarmSubSystem_2:int;


let



	
	(ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2, ALARM_OUT_Is_Audio_Disabled_2, idAlarms_Notification_2, ALARM_OUT_Visual_Notification_Message_2, currentAlarm_2, idNotification_Visual_2, idAlarmSubSystem_Alarms_2) 
	= Alarms_Notification_ex(CONST_IN_Audio_Level, ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1, OP_CMD_IN_Disable_Audio, ALARM_OUT_Is_Audio_Disabled_1, idAlarms_Notification_1, ALARM_OUT_Visual_Notification_Message_1, currentAlarm_1, idNotification_Visual_1, idAlarmSubSystem_Alarms_1, false);

	(ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2, cancelAlarm_2, idAlarms_CheckAlarm_2, idCheckAlarm_Level1_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idLevel1_IsLoggingFailed_2, idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPumpHot_2, idLevel1_IsSystemMonitorFailed_2, idLevel1_IsUnderInfusion_2, idletimer_2, pausedtimer_2, underInfusion_2, idCheckAlarm_Level2_2, idLevel2_IsLowReservoir_2, idCheckAlarm_Level3_2, idLevel3_IsAirInLine_2, idLevel3_IsDoor_Open_2, idLevel3_IsOcclusion_2, idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionVTBI_2, overInfusion_2, idCheckAlarm_Level4_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsEnviromentalError_2, idLevel4_IsHardwareError_2, idCheckAlarm_CancelAlarm_2, idAlarmSubSystem_Alarms_3) 
	= Alarms_CheckAlarm_ex(ALARM_OUT_Highest_Level_Alarm_1, Max_Alarm_Level_1, cancelAlarm_1, idAlarms_CheckAlarm_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, idCheckAlarm_Level1_1, idLevel1_IsBatteryError_1, idLevel1_IsConfigTimeWarning_1, idLevel1_IsFlowRateNotStable_1, idLevel1_IsIdleTimeExceeded_1, idLevel1_IsLoggingFailed_1, idLevel1_IsPausedTimeExceeded_1, idLevel1_IsPumpHot_1, idLevel1_IsSystemMonitorFailed_1, idLevel1_IsUnderInfusion_1, idletimer_1, pausedtimer_1, underInfusion_1, idCheckAlarm_Level2_1, idLevel2_IsLowReservoir_1, DB_IN_Flow_Rate_High, idCheckAlarm_Level3_1, idLevel3_IsAirInLine_1, idLevel3_IsDoor_Open_1, idLevel3_IsOcclusion_1, idLevel3_IsOverInfusionFlowRate_1, idLevel3_IsOverInfusionVTBI_1, overInfusion_1, idCheckAlarm_Level4_1, idLevel4_IsEmptyReservoir_1, idLevel4_IsEnviromentalError_1, idLevel4_IsHardwareError_1, idCheckAlarm_CancelAlarm_1, idAlarmSubSystem_Alarms_2, false);


	-- set state as inactive 
	idAlarmSubSystem_AlarmSubSystem_2
	 = if (not isInner) then 0 else idAlarmSubSystem_AlarmSubSystem_1;

	idAlarmSubSystem_Alarms_4 
	= 0;
	

	(ALARM_OUT_Audio_Notification_Command, idNotification_Audio, ALARM_OUT_Is_Audio_Disabled, idAlarms_Notification, ALARM_OUT_Visual_Notification_Message, currentAlarm, idNotification_Visual, idAlarmSubSystem_Alarms, ALARM_OUT_Highest_Level_Alarm, Max_Alarm_Level, cancelAlarm, idAlarms_CheckAlarm, idCheckAlarm_CancelAlarm, idCheckAlarm_Level1, idCheckAlarm_Level2, idCheckAlarm_Level3, idCheckAlarm_Level4, idLevel1_IsBatteryError, idLevel1_IsConfigTimeWarning, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idLevel1_IsLoggingFailed, idLevel1_IsPausedTimeExceeded, idLevel1_IsPumpHot, idLevel1_IsSystemMonitorFailed, idLevel1_IsUnderInfusion, idLevel2_IsLowReservoir, idLevel3_IsAirInLine, idLevel3_IsDoor_Open, idLevel3_IsOcclusion, idLevel3_IsOverInfusionFlowRate, idLevel3_IsOverInfusionVTBI, idLevel4_IsEmptyReservoir, idLevel4_IsEnviromentalError, idLevel4_IsHardwareError, idletimer, overInfusion, pausedtimer, underInfusion, idAlarmSubSystem_AlarmSubSystem) 
	= (ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2, ALARM_OUT_Is_Audio_Disabled_2, idAlarms_Notification_2, ALARM_OUT_Visual_Notification_Message_2, currentAlarm_2, idNotification_Visual_2, idAlarmSubSystem_Alarms_4, ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2, cancelAlarm_2, idAlarms_CheckAlarm_2, idCheckAlarm_CancelAlarm_2, idCheckAlarm_Level1_2, idCheckAlarm_Level2_2, idCheckAlarm_Level3_2, idCheckAlarm_Level4_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idLevel1_IsLoggingFailed_2, idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPumpHot_2, idLevel1_IsSystemMonitorFailed_2, idLevel1_IsUnderInfusion_2, idLevel2_IsLowReservoir_2, idLevel3_IsAirInLine_2, idLevel3_IsDoor_Open_2, idLevel3_IsOcclusion_2, idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionVTBI_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsEnviromentalError_2, idLevel4_IsHardwareError_2, idletimer_2, overInfusion_2, pausedtimer_2, underInfusion_2, idAlarmSubSystem_AlarmSubSystem_2);
	

tel


--***************************************************State :Level1_IsSystemMonitorFailed Automaton***************************************************

node Level1_IsSystemMonitorFailed_node(idLevel1_IsSystemMonitorFailed_1:int;
	SYS_MON_IN_System_Monitor_Failed:bool;
	cancelAlarm_1:int)

returns (idLevel1_IsSystemMonitorFailed:int);


let

	 automaton level1_issystemmonitorfailed

	state POINTLevel1_IsSystemMonitorFailed:
	unless (idLevel1_IsSystemMonitorFailed_1=0) and ( SYS_MON_IN_System_Monitor_Failed ) restart POINT__TO__ISSYSTEMMONITORFAILED_YES_1



	unless (idLevel1_IsSystemMonitorFailed_1=0) restart POINT__TO__ISSYSTEMMONITORFAILED_NO_2



	unless (idLevel1_IsSystemMonitorFailed_1=858) and (  cancelAlarm_1 =18 and not SYS_MON_IN_System_Monitor_Failed ) restart ISSYSTEMMONITORFAILED_YES__TO__ISSYSTEMMONITORFAILED_NO_1



	unless (idLevel1_IsSystemMonitorFailed_1=859) and ( SYS_MON_IN_System_Monitor_Failed ) restart ISSYSTEMMONITORFAILED_NO__TO__ISSYSTEMMONITORFAILED_YES_1



	unless (idLevel1_IsSystemMonitorFailed_1=858) restart ISSYSTEMMONITORFAILED_YES_IDL

	unless (idLevel1_IsSystemMonitorFailed_1=859) restart ISSYSTEMMONITORFAILED_NO_IDL

	let

		(idLevel1_IsSystemMonitorFailed) 
	= (idLevel1_IsSystemMonitorFailed_1);
	

	tel



	state POINT__TO__ISSYSTEMMONITORFAILED_YES_1:

	 var 	idLevel1_IsSystemMonitorFailed_2:int;
	let

		-- transition trace :
	--POINT__To__IsSystemMonitorFailed_Yes_1
		(idLevel1_IsSystemMonitorFailed_2) 
	= IsSystemMonitorFailed_Yes_en(idLevel1_IsSystemMonitorFailed_1, false);
		

	(idLevel1_IsSystemMonitorFailed) 
	=  (idLevel1_IsSystemMonitorFailed_2);


	tel

	until true restart POINTLevel1_IsSystemMonitorFailed



	state POINT__TO__ISSYSTEMMONITORFAILED_NO_2:

	 var 	idLevel1_IsSystemMonitorFailed_2:int;
	let

		-- transition trace :
	--POINT__To__IsSystemMonitorFailed_No_2
		(idLevel1_IsSystemMonitorFailed_2) 
	= IsSystemMonitorFailed_No_en(idLevel1_IsSystemMonitorFailed_1, false);
		

	(idLevel1_IsSystemMonitorFailed) 
	=  (idLevel1_IsSystemMonitorFailed_2);


	tel

	until true restart POINTLevel1_IsSystemMonitorFailed



	state ISSYSTEMMONITORFAILED_YES__TO__ISSYSTEMMONITORFAILED_NO_1:

	 var 	idLevel1_IsSystemMonitorFailed_2, idLevel1_IsSystemMonitorFailed_3:int;
	let

		-- transition trace :
	--IsSystemMonitorFailed_Yes__To__IsSystemMonitorFailed_No_1
		(idLevel1_IsSystemMonitorFailed_2) 
	= IsSystemMonitorFailed_Yes_ex(idLevel1_IsSystemMonitorFailed_1, false);
		

		(idLevel1_IsSystemMonitorFailed_3) 
	= IsSystemMonitorFailed_No_en(idLevel1_IsSystemMonitorFailed_2, false);
		

	(idLevel1_IsSystemMonitorFailed) 
	=  (idLevel1_IsSystemMonitorFailed_3);


	tel

	until true restart POINTLevel1_IsSystemMonitorFailed



	state ISSYSTEMMONITORFAILED_NO__TO__ISSYSTEMMONITORFAILED_YES_1:

	 var 	idLevel1_IsSystemMonitorFailed_2, idLevel1_IsSystemMonitorFailed_3:int;
	let

		-- transition trace :
	--IsSystemMonitorFailed_No__To__IsSystemMonitorFailed_Yes_1
		(idLevel1_IsSystemMonitorFailed_2) 
	= IsSystemMonitorFailed_No_ex(idLevel1_IsSystemMonitorFailed_1, false);
		

		(idLevel1_IsSystemMonitorFailed_3) 
	= IsSystemMonitorFailed_Yes_en(idLevel1_IsSystemMonitorFailed_2, false);
		

	(idLevel1_IsSystemMonitorFailed) 
	=  (idLevel1_IsSystemMonitorFailed_3);


	tel

	until true restart POINTLevel1_IsSystemMonitorFailed



	state ISSYSTEMMONITORFAILED_YES_IDL:

	 	let

		

	(idLevel1_IsSystemMonitorFailed) 
	= (idLevel1_IsSystemMonitorFailed_1);
	

	tel

	until true restart POINTLevel1_IsSystemMonitorFailed



	state ISSYSTEMMONITORFAILED_NO_IDL:

	 	let

		

	(idLevel1_IsSystemMonitorFailed) 
	= (idLevel1_IsSystemMonitorFailed_1);
	

	tel

	until true restart POINTLevel1_IsSystemMonitorFailed



tel


--***************************************************State :Level1_IsLoggingFailed Automaton***************************************************

node Level1_IsLoggingFailed_node(idLevel1_IsLoggingFailed_1:int;
	LOGGING_IN_Logging_Failed:bool;
	cancelAlarm_1:int)

returns (idLevel1_IsLoggingFailed:int);


let

	 automaton level1_isloggingfailed

	state POINTLevel1_IsLoggingFailed:
	unless (idLevel1_IsLoggingFailed_1=0) and ( LOGGING_IN_Logging_Failed ) restart POINT__TO__ISLOGGINGFAILED_YES_1



	unless (idLevel1_IsLoggingFailed_1=0) restart POINT__TO__ISLOGGINGFAILED_NO_2



	unless (idLevel1_IsLoggingFailed_1=855) and (  cancelAlarm_1 =17 and not LOGGING_IN_Logging_Failed ) restart ISLOGGINGFAILED_YES__TO__ISLOGGINGFAILED_NO_1



	unless (idLevel1_IsLoggingFailed_1=856) and ( LOGGING_IN_Logging_Failed ) restart ISLOGGINGFAILED_NO__TO__ISLOGGINGFAILED_YES_1



	unless (idLevel1_IsLoggingFailed_1=855) restart ISLOGGINGFAILED_YES_IDL

	unless (idLevel1_IsLoggingFailed_1=856) restart ISLOGGINGFAILED_NO_IDL

	let

		(idLevel1_IsLoggingFailed) 
	= (idLevel1_IsLoggingFailed_1);
	

	tel



	state POINT__TO__ISLOGGINGFAILED_YES_1:

	 var 	idLevel1_IsLoggingFailed_2:int;
	let

		-- transition trace :
	--POINT__To__IsLoggingFailed_Yes_1
		(idLevel1_IsLoggingFailed_2) 
	= IsLoggingFailed_Yes_en(idLevel1_IsLoggingFailed_1, false);
		

	(idLevel1_IsLoggingFailed) 
	=  (idLevel1_IsLoggingFailed_2);


	tel

	until true restart POINTLevel1_IsLoggingFailed



	state POINT__TO__ISLOGGINGFAILED_NO_2:

	 var 	idLevel1_IsLoggingFailed_2:int;
	let

		-- transition trace :
	--POINT__To__IsLoggingFailed_No_2
		(idLevel1_IsLoggingFailed_2) 
	= IsLoggingFailed_No_en(idLevel1_IsLoggingFailed_1, false);
		

	(idLevel1_IsLoggingFailed) 
	=  (idLevel1_IsLoggingFailed_2);


	tel

	until true restart POINTLevel1_IsLoggingFailed



	state ISLOGGINGFAILED_YES__TO__ISLOGGINGFAILED_NO_1:

	 var 	idLevel1_IsLoggingFailed_2, idLevel1_IsLoggingFailed_3:int;
	let

		-- transition trace :
	--IsLoggingFailed_Yes__To__IsLoggingFailed_No_1
		(idLevel1_IsLoggingFailed_2) 
	= IsLoggingFailed_Yes_ex(idLevel1_IsLoggingFailed_1, false);
		

		(idLevel1_IsLoggingFailed_3) 
	= IsLoggingFailed_No_en(idLevel1_IsLoggingFailed_2, false);
		

	(idLevel1_IsLoggingFailed) 
	=  (idLevel1_IsLoggingFailed_3);


	tel

	until true restart POINTLevel1_IsLoggingFailed



	state ISLOGGINGFAILED_NO__TO__ISLOGGINGFAILED_YES_1:

	 var 	idLevel1_IsLoggingFailed_2, idLevel1_IsLoggingFailed_3:int;
	let

		-- transition trace :
	--IsLoggingFailed_No__To__IsLoggingFailed_Yes_1
		(idLevel1_IsLoggingFailed_2) 
	= IsLoggingFailed_No_ex(idLevel1_IsLoggingFailed_1, false);
		

		(idLevel1_IsLoggingFailed_3) 
	= IsLoggingFailed_Yes_en(idLevel1_IsLoggingFailed_2, false);
		

	(idLevel1_IsLoggingFailed) 
	=  (idLevel1_IsLoggingFailed_3);


	tel

	until true restart POINTLevel1_IsLoggingFailed



	state ISLOGGINGFAILED_YES_IDL:

	 	let

		

	(idLevel1_IsLoggingFailed) 
	= (idLevel1_IsLoggingFailed_1);
	

	tel

	until true restart POINTLevel1_IsLoggingFailed



	state ISLOGGINGFAILED_NO_IDL:

	 	let

		

	(idLevel1_IsLoggingFailed) 
	= (idLevel1_IsLoggingFailed_1);
	

	tel

	until true restart POINTLevel1_IsLoggingFailed



tel


--***************************************************State :Level1_IsPumpHot Automaton***************************************************

node Level1_IsPumpHot_node(idLevel1_IsPumpHot_1:int;
	SENSOR_IN_Pump_Overheated:bool;
	cancelAlarm_1:int)

returns (idLevel1_IsPumpHot:int);


let

	 automaton level1_ispumphot

	state POINTLevel1_IsPumpHot:
	unless (idLevel1_IsPumpHot_1=0) and ( SENSOR_IN_Pump_Overheated ) restart POINT__TO__ISPUMPHOT_YES_1



	unless (idLevel1_IsPumpHot_1=0) restart POINT__TO__ISPUMPHOT_NO_2



	unless (idLevel1_IsPumpHot_1=852) and (  cancelAlarm_1 =16 and not SENSOR_IN_Pump_Overheated ) restart ISPUMPHOT_YES__TO__ISPUMPHOT_NO_1



	unless (idLevel1_IsPumpHot_1=853) and ( SENSOR_IN_Pump_Overheated ) restart ISPUMPHOT_NO__TO__ISPUMPHOT_YES_1



	unless (idLevel1_IsPumpHot_1=852) restart ISPUMPHOT_YES_IDL

	unless (idLevel1_IsPumpHot_1=853) restart ISPUMPHOT_NO_IDL

	let

		(idLevel1_IsPumpHot) 
	= (idLevel1_IsPumpHot_1);
	

	tel



	state POINT__TO__ISPUMPHOT_YES_1:

	 var 	idLevel1_IsPumpHot_2:int;
	let

		-- transition trace :
	--POINT__To__IsPumpHot_Yes_1
		(idLevel1_IsPumpHot_2) 
	= IsPumpHot_Yes_en(idLevel1_IsPumpHot_1, false);
		

	(idLevel1_IsPumpHot) 
	=  (idLevel1_IsPumpHot_2);


	tel

	until true restart POINTLevel1_IsPumpHot



	state POINT__TO__ISPUMPHOT_NO_2:

	 var 	idLevel1_IsPumpHot_2:int;
	let

		-- transition trace :
	--POINT__To__IsPumpHot_No_2
		(idLevel1_IsPumpHot_2) 
	= IsPumpHot_No_en(idLevel1_IsPumpHot_1, false);
		

	(idLevel1_IsPumpHot) 
	=  (idLevel1_IsPumpHot_2);


	tel

	until true restart POINTLevel1_IsPumpHot



	state ISPUMPHOT_YES__TO__ISPUMPHOT_NO_1:

	 var 	idLevel1_IsPumpHot_2, idLevel1_IsPumpHot_3:int;
	let

		-- transition trace :
	--IsPumpHot_Yes__To__IsPumpHot_No_1
		(idLevel1_IsPumpHot_2) 
	= IsPumpHot_Yes_ex(idLevel1_IsPumpHot_1, false);
		

		(idLevel1_IsPumpHot_3) 
	= IsPumpHot_No_en(idLevel1_IsPumpHot_2, false);
		

	(idLevel1_IsPumpHot) 
	=  (idLevel1_IsPumpHot_3);


	tel

	until true restart POINTLevel1_IsPumpHot



	state ISPUMPHOT_NO__TO__ISPUMPHOT_YES_1:

	 var 	idLevel1_IsPumpHot_2, idLevel1_IsPumpHot_3:int;
	let

		-- transition trace :
	--IsPumpHot_No__To__IsPumpHot_Yes_1
		(idLevel1_IsPumpHot_2) 
	= IsPumpHot_No_ex(idLevel1_IsPumpHot_1, false);
		

		(idLevel1_IsPumpHot_3) 
	= IsPumpHot_Yes_en(idLevel1_IsPumpHot_2, false);
		

	(idLevel1_IsPumpHot) 
	=  (idLevel1_IsPumpHot_3);


	tel

	until true restart POINTLevel1_IsPumpHot



	state ISPUMPHOT_YES_IDL:

	 	let

		

	(idLevel1_IsPumpHot) 
	= (idLevel1_IsPumpHot_1);
	

	tel

	until true restart POINTLevel1_IsPumpHot



	state ISPUMPHOT_NO_IDL:

	 	let

		

	(idLevel1_IsPumpHot) 
	= (idLevel1_IsPumpHot_1);
	

	tel

	until true restart POINTLevel1_IsPumpHot



tel


--***************************************************State :Level1_IsBatteryError Automaton***************************************************

node Level1_IsBatteryError_node(idLevel1_IsBatteryError_1:int;
	SENSOR_IN_Battery_Low:bool;
	SENSOR_IN_Battery_Unable_To_Charge:bool;
	SENSOR_IN_Supply_Voltage_Out_Of_Range:bool;
	cancelAlarm_1:int)

returns (idLevel1_IsBatteryError:int);


let

	 automaton level1_isbatteryerror

	state POINTLevel1_IsBatteryError:
	unless (idLevel1_IsBatteryError_1=0) and ( SENSOR_IN_Battery_Low or SENSOR_IN_Battery_Unable_To_Charge or SENSOR_IN_Supply_Voltage_Out_Of_Range ) restart POINT__TO__ISBATTERYERROR_YES_1



	unless (idLevel1_IsBatteryError_1=0) restart POINT__TO__ISBATTERYERROR_NO_2



	unless (idLevel1_IsBatteryError_1=849) and (  cancelAlarm_1 =15 and not (SENSOR_IN_Battery_Low or SENSOR_IN_Battery_Unable_To_Charge or SENSOR_IN_Supply_Voltage_Out_Of_Range) ) restart ISBATTERYERROR_YES__TO__ISBATTERYERROR_NO_1



	unless (idLevel1_IsBatteryError_1=850) and ( SENSOR_IN_Battery_Low or SENSOR_IN_Battery_Unable_To_Charge or SENSOR_IN_Supply_Voltage_Out_Of_Range ) restart ISBATTERYERROR_NO__TO__ISBATTERYERROR_YES_1



	unless (idLevel1_IsBatteryError_1=849) restart ISBATTERYERROR_YES_IDL

	unless (idLevel1_IsBatteryError_1=850) restart ISBATTERYERROR_NO_IDL

	let

		(idLevel1_IsBatteryError) 
	= (idLevel1_IsBatteryError_1);
	

	tel



	state POINT__TO__ISBATTERYERROR_YES_1:

	 var 	idLevel1_IsBatteryError_2:int;
	let

		-- transition trace :
	--POINT__To__IsBatteryError_Yes_1
		(idLevel1_IsBatteryError_2) 
	= IsBatteryError_Yes_en(idLevel1_IsBatteryError_1, false);
		

	(idLevel1_IsBatteryError) 
	=  (idLevel1_IsBatteryError_2);


	tel

	until true restart POINTLevel1_IsBatteryError



	state POINT__TO__ISBATTERYERROR_NO_2:

	 var 	idLevel1_IsBatteryError_2:int;
	let

		-- transition trace :
	--POINT__To__IsBatteryError_No_2
		(idLevel1_IsBatteryError_2) 
	= IsBatteryError_No_en(idLevel1_IsBatteryError_1, false);
		

	(idLevel1_IsBatteryError) 
	=  (idLevel1_IsBatteryError_2);


	tel

	until true restart POINTLevel1_IsBatteryError



	state ISBATTERYERROR_YES__TO__ISBATTERYERROR_NO_1:

	 var 	idLevel1_IsBatteryError_2, idLevel1_IsBatteryError_3:int;
	let

		-- transition trace :
	--IsBatteryError_Yes__To__IsBatteryError_No_1
		(idLevel1_IsBatteryError_2) 
	= IsBatteryError_Yes_ex(idLevel1_IsBatteryError_1, false);
		

		(idLevel1_IsBatteryError_3) 
	= IsBatteryError_No_en(idLevel1_IsBatteryError_2, false);
		

	(idLevel1_IsBatteryError) 
	=  (idLevel1_IsBatteryError_3);


	tel

	until true restart POINTLevel1_IsBatteryError



	state ISBATTERYERROR_NO__TO__ISBATTERYERROR_YES_1:

	 var 	idLevel1_IsBatteryError_2, idLevel1_IsBatteryError_3:int;
	let

		-- transition trace :
	--IsBatteryError_No__To__IsBatteryError_Yes_1
		(idLevel1_IsBatteryError_2) 
	= IsBatteryError_No_ex(idLevel1_IsBatteryError_1, false);
		

		(idLevel1_IsBatteryError_3) 
	= IsBatteryError_Yes_en(idLevel1_IsBatteryError_2, false);
		

	(idLevel1_IsBatteryError) 
	=  (idLevel1_IsBatteryError_3);


	tel

	until true restart POINTLevel1_IsBatteryError



	state ISBATTERYERROR_YES_IDL:

	 	let

		

	(idLevel1_IsBatteryError) 
	= (idLevel1_IsBatteryError_1);
	

	tel

	until true restart POINTLevel1_IsBatteryError



	state ISBATTERYERROR_NO_IDL:

	 	let

		

	(idLevel1_IsBatteryError) 
	= (idLevel1_IsBatteryError_1);
	

	tel

	until true restart POINTLevel1_IsBatteryError



tel


--***************************************************State :Level1_IsConfigTimeWarning Automaton***************************************************

node Level1_IsConfigTimeWarning_node(idLevel1_IsConfigTimeWarning_1:int;
	CONFIG_IN_Config_Timer:int;
	CONST_IN_Config_Warning_Duration:int;
	step_size:real;
	cancelAlarm_1:int)

returns (idLevel1_IsConfigTimeWarning:int);


let

	 automaton level1_isconfigtimewarning

	state POINTLevel1_IsConfigTimeWarning:
	unless (idLevel1_IsConfigTimeWarning_1=0) and ( CONFIG_IN_Config_Timer>Step_Scaling_Factor(CONST_IN_Config_Warning_Duration,step_size) ) restart POINT__TO__ISCONFIGTIMEWARNING_YES_1



	unless (idLevel1_IsConfigTimeWarning_1=0) restart POINT__TO__ISCONFIGTIMEWARNING_NO_2



	unless (idLevel1_IsConfigTimeWarning_1=846) and ( CONFIG_IN_Config_Timer>Step_Scaling_Factor(CONST_IN_Config_Warning_Duration,step_size) ) restart ISCONFIGTIMEWARNING_NO__TO__ISCONFIGTIMEWARNING_YES_1



	unless (idLevel1_IsConfigTimeWarning_1=847) and (  cancelAlarm_1 =14 and not (CONFIG_IN_Config_Timer>Step_Scaling_Factor(CONST_IN_Config_Warning_Duration,step_size)) ) restart ISCONFIGTIMEWARNING_YES__TO__ISCONFIGTIMEWARNING_NO_1



	unless (idLevel1_IsConfigTimeWarning_1=846) restart ISCONFIGTIMEWARNING_NO_IDL

	unless (idLevel1_IsConfigTimeWarning_1=847) restart ISCONFIGTIMEWARNING_YES_IDL

	let

		(idLevel1_IsConfigTimeWarning) 
	= (idLevel1_IsConfigTimeWarning_1);
	

	tel



	state POINT__TO__ISCONFIGTIMEWARNING_YES_1:

	 var 	idLevel1_IsConfigTimeWarning_2:int;
	let

		-- transition trace :
	--POINT__To__IsConfigTimeWarning_Yes_1
		(idLevel1_IsConfigTimeWarning_2) 
	= IsConfigTimeWarning_Yes_en(idLevel1_IsConfigTimeWarning_1, false);
		

	(idLevel1_IsConfigTimeWarning) 
	=  (idLevel1_IsConfigTimeWarning_2);


	tel

	until true restart POINTLevel1_IsConfigTimeWarning



	state POINT__TO__ISCONFIGTIMEWARNING_NO_2:

	 var 	idLevel1_IsConfigTimeWarning_2:int;
	let

		-- transition trace :
	--POINT__To__IsConfigTimeWarning_No_2
		(idLevel1_IsConfigTimeWarning_2) 
	= IsConfigTimeWarning_No_en(idLevel1_IsConfigTimeWarning_1, false);
		

	(idLevel1_IsConfigTimeWarning) 
	=  (idLevel1_IsConfigTimeWarning_2);


	tel

	until true restart POINTLevel1_IsConfigTimeWarning



	state ISCONFIGTIMEWARNING_NO__TO__ISCONFIGTIMEWARNING_YES_1:

	 var 	idLevel1_IsConfigTimeWarning_2, idLevel1_IsConfigTimeWarning_3:int;
	let

		-- transition trace :
	--IsConfigTimeWarning_No__To__IsConfigTimeWarning_Yes_1
		(idLevel1_IsConfigTimeWarning_2) 
	= IsConfigTimeWarning_No_ex(idLevel1_IsConfigTimeWarning_1, false);
		

		(idLevel1_IsConfigTimeWarning_3) 
	= IsConfigTimeWarning_Yes_en(idLevel1_IsConfigTimeWarning_2, false);
		

	(idLevel1_IsConfigTimeWarning) 
	=  (idLevel1_IsConfigTimeWarning_3);


	tel

	until true restart POINTLevel1_IsConfigTimeWarning



	state ISCONFIGTIMEWARNING_YES__TO__ISCONFIGTIMEWARNING_NO_1:

	 var 	idLevel1_IsConfigTimeWarning_2, idLevel1_IsConfigTimeWarning_3:int;
	let

		-- transition trace :
	--IsConfigTimeWarning_Yes__To__IsConfigTimeWarning_No_1
		(idLevel1_IsConfigTimeWarning_2) 
	= IsConfigTimeWarning_Yes_ex(idLevel1_IsConfigTimeWarning_1, false);
		

		(idLevel1_IsConfigTimeWarning_3) 
	= IsConfigTimeWarning_No_en(idLevel1_IsConfigTimeWarning_2, false);
		

	(idLevel1_IsConfigTimeWarning) 
	=  (idLevel1_IsConfigTimeWarning_3);


	tel

	until true restart POINTLevel1_IsConfigTimeWarning



	state ISCONFIGTIMEWARNING_NO_IDL:

	 	let

		

	(idLevel1_IsConfigTimeWarning) 
	= (idLevel1_IsConfigTimeWarning_1);
	

	tel

	until true restart POINTLevel1_IsConfigTimeWarning



	state ISCONFIGTIMEWARNING_YES_IDL:

	 	let

		

	(idLevel1_IsConfigTimeWarning) 
	= (idLevel1_IsConfigTimeWarning_1);
	

	tel

	until true restart POINTLevel1_IsConfigTimeWarning



tel


--***************************************************State :Level1_IsIdleTimeExceeded Automaton***************************************************

node Level1_IsIdleTimeExceeded_node(idLevel1_IsIdleTimeExceeded_1:int;
	IM_IN_Current_System_Mode:int;
	CONST_IN_Max_Idle_Duration:int;
	step_size:real;
	idletimer_1:int;
	cancelAlarm_1:int)

returns (idLevel1_IsIdleTimeExceeded:int;
	idletimer:int);


let

	 automaton level1_isidletimeexceeded

	state POINTLevel1_IsIdleTimeExceeded:
	unless (idLevel1_IsIdleTimeExceeded_1=0) and ( IM_IN_Current_System_Mode=1 and Step_Scaling_Factor(CONST_IN_Max_Idle_Duration,step_size)=1 ) restart POINT__TO__ISIDLETIMEEXCEEDED_YES_1



	unless (idLevel1_IsIdleTimeExceeded_1=0) and ( IM_IN_Current_System_Mode=1 ) restart POINT__TO__ISIDLETIMEEXCEEDED_COUNTING_2



	unless (idLevel1_IsIdleTimeExceeded_1=0) restart POINT__TO__ISIDLETIMEEXCEEDED_NO_3



	unless (idLevel1_IsIdleTimeExceeded_1=842) and (  idletimer_1 >=Step_Scaling_Factor(CONST_IN_Max_Idle_Duration,step_size) ) restart ISIDLETIMEEXCEEDED_COUNTING__TO__ISIDLETIMEEXCEEDED_YES_1



	unless (idLevel1_IsIdleTimeExceeded_1=843) and ( IM_IN_Current_System_Mode=1 and Step_Scaling_Factor(CONST_IN_Max_Idle_Duration,step_size)=1 ) restart ISIDLETIMEEXCEEDED_NO__TO__ISIDLETIMEEXCEEDED_YES_1



	unless (idLevel1_IsIdleTimeExceeded_1=843) and ( IM_IN_Current_System_Mode=1 ) restart ISIDLETIMEEXCEEDED_NO__TO__ISIDLETIMEEXCEEDED_COUNTING_2



	unless (idLevel1_IsIdleTimeExceeded_1=844) and (  cancelAlarm_1 =12 ) restart ISIDLETIMEEXCEEDED_YES__TO__ISIDLETIMEEXCEEDED_NO_1



	unless (idLevel1_IsIdleTimeExceeded_1=842) restart ISIDLETIMEEXCEEDED_COUNTING_IDL

	unless (idLevel1_IsIdleTimeExceeded_1=843) restart ISIDLETIMEEXCEEDED_NO_IDL

	unless (idLevel1_IsIdleTimeExceeded_1=844) restart ISIDLETIMEEXCEEDED_YES_IDL

	let

		(idLevel1_IsIdleTimeExceeded, idletimer) 
	= (idLevel1_IsIdleTimeExceeded_1, idletimer_1);
	

	tel



	state POINT__TO__ISIDLETIMEEXCEEDED_YES_1:

	 var 	idLevel1_IsIdleTimeExceeded_2:int;
	let

		-- transition trace :
	--POINT__To__IsIdleTimeExceeded_Yes_1
		(idLevel1_IsIdleTimeExceeded_2) 
	= IsIdleTimeExceeded_Yes_en(idLevel1_IsIdleTimeExceeded_1, false);
		

	(idLevel1_IsIdleTimeExceeded) 
	=  (idLevel1_IsIdleTimeExceeded_2);

	--add unused variables
	(idletimer) 
	= (idletimer_1);
	

	tel

	until true restart POINTLevel1_IsIdleTimeExceeded



	state POINT__TO__ISIDLETIMEEXCEEDED_COUNTING_2:

	 var 	idLevel1_IsIdleTimeExceeded_2:int;
	idletimer_2, idletimer_3:int;
	let

		-- transition trace :
	--POINT__To__IsIdleTimeExceeded_counting_2
		-- condition Action : idletimer=0;
		
		(idletimer_2) 
	= POINT__To__IsIdleTimeExceeded_counting_2_Condition_Action(idletimer_1);
		

		(idLevel1_IsIdleTimeExceeded_2, idletimer_3) 
	= IsIdleTimeExceeded_counting_en(idLevel1_IsIdleTimeExceeded_1, idletimer_2, false);
		

	(idLevel1_IsIdleTimeExceeded, idletimer) 
	=  (idLevel1_IsIdleTimeExceeded_2, idletimer_3);


	tel

	until true restart POINTLevel1_IsIdleTimeExceeded



	state POINT__TO__ISIDLETIMEEXCEEDED_NO_3:

	 var 	idLevel1_IsIdleTimeExceeded_2:int;
	idletimer_2:int;
	let

		-- transition trace :
	--POINT__To__IsIdleTimeExceeded_No_3
		(idLevel1_IsIdleTimeExceeded_2, idletimer_2) 
	= IsIdleTimeExceeded_No_en(idLevel1_IsIdleTimeExceeded_1, idletimer_1, false);
		

	(idLevel1_IsIdleTimeExceeded, idletimer) 
	=  (idLevel1_IsIdleTimeExceeded_2, idletimer_2);


	tel

	until true restart POINTLevel1_IsIdleTimeExceeded



	state ISIDLETIMEEXCEEDED_COUNTING__TO__ISIDLETIMEEXCEEDED_YES_1:

	 var 	idLevel1_IsIdleTimeExceeded_2, idLevel1_IsIdleTimeExceeded_3:int;
	idletimer_2:int;
	let

		-- transition trace :
	--IsIdleTimeExceeded_counting__To__IsIdleTimeExceeded_Yes_1
		(idletimer_2, idLevel1_IsIdleTimeExceeded_2) 
	= IsIdleTimeExceeded_counting_ex(idletimer_1, idLevel1_IsIdleTimeExceeded_1, false);
		

		(idLevel1_IsIdleTimeExceeded_3) 
	= IsIdleTimeExceeded_Yes_en(idLevel1_IsIdleTimeExceeded_2, false);
		

	(idLevel1_IsIdleTimeExceeded, idletimer) 
	=  (idLevel1_IsIdleTimeExceeded_3, idletimer_2);


	tel

	until true restart POINTLevel1_IsIdleTimeExceeded



	state ISIDLETIMEEXCEEDED_NO__TO__ISIDLETIMEEXCEEDED_YES_1:

	 var 	idLevel1_IsIdleTimeExceeded_2, idLevel1_IsIdleTimeExceeded_3:int;
	idletimer_2:int;
	let

		-- transition trace :
	--IsIdleTimeExceeded_No__To__IsIdleTimeExceeded_Yes_1
		(idletimer_2, idLevel1_IsIdleTimeExceeded_2) 
	= IsIdleTimeExceeded_No_ex(idletimer_1, idLevel1_IsIdleTimeExceeded_1, false);
		

		(idLevel1_IsIdleTimeExceeded_3) 
	= IsIdleTimeExceeded_Yes_en(idLevel1_IsIdleTimeExceeded_2, false);
		

	(idLevel1_IsIdleTimeExceeded, idletimer) 
	=  (idLevel1_IsIdleTimeExceeded_3, idletimer_2);


	tel

	until true restart POINTLevel1_IsIdleTimeExceeded



	state ISIDLETIMEEXCEEDED_NO__TO__ISIDLETIMEEXCEEDED_COUNTING_2:

	 var 	idLevel1_IsIdleTimeExceeded_2, idLevel1_IsIdleTimeExceeded_3:int;
	idletimer_2, idletimer_3, idletimer_4:int;
	let

		-- transition trace :
	--IsIdleTimeExceeded_No__To__IsIdleTimeExceeded_counting_2
		-- condition Action : idletimer=0;
		
		(idletimer_2) 
	= IsIdleTimeExceeded_No__To__IsIdleTimeExceeded_counting_2_Condition_Action(idletimer_1);
		

		(idletimer_3, idLevel1_IsIdleTimeExceeded_2) 
	= IsIdleTimeExceeded_No_ex(idletimer_2, idLevel1_IsIdleTimeExceeded_1, false);
		

		(idLevel1_IsIdleTimeExceeded_3, idletimer_4) 
	= IsIdleTimeExceeded_counting_en(idLevel1_IsIdleTimeExceeded_2, idletimer_3, false);
		

	(idLevel1_IsIdleTimeExceeded, idletimer) 
	=  (idLevel1_IsIdleTimeExceeded_3, idletimer_4);


	tel

	until true restart POINTLevel1_IsIdleTimeExceeded



	state ISIDLETIMEEXCEEDED_YES__TO__ISIDLETIMEEXCEEDED_NO_1:

	 var 	idLevel1_IsIdleTimeExceeded_2, idLevel1_IsIdleTimeExceeded_3:int;
	idletimer_2:int;
	let

		-- transition trace :
	--IsIdleTimeExceeded_Yes__To__IsIdleTimeExceeded_No_1
		(idLevel1_IsIdleTimeExceeded_2) 
	= IsIdleTimeExceeded_Yes_ex(idLevel1_IsIdleTimeExceeded_1, false);
		

		(idLevel1_IsIdleTimeExceeded_3, idletimer_2) 
	= IsIdleTimeExceeded_No_en(idLevel1_IsIdleTimeExceeded_2, idletimer_1, false);
		

	(idLevel1_IsIdleTimeExceeded, idletimer) 
	=  (idLevel1_IsIdleTimeExceeded_3, idletimer_2);


	tel

	until true restart POINTLevel1_IsIdleTimeExceeded



	state ISIDLETIMEEXCEEDED_COUNTING_IDL:

	 var 	idletimer_2:int;
	let

		
	(idletimer_2) 
	= IsIdleTimeExceeded_counting_du(idletimer_1);

		


	(idLevel1_IsIdleTimeExceeded, idletimer) 
	= (idLevel1_IsIdleTimeExceeded_1, idletimer_2);
	

	tel

	until true restart POINTLevel1_IsIdleTimeExceeded



	state ISIDLETIMEEXCEEDED_NO_IDL:

	 var 	idletimer_2:int;
	let

		
	(idletimer_2) 
	= IsIdleTimeExceeded_No_du(idletimer_1);

		


	(idLevel1_IsIdleTimeExceeded, idletimer) 
	= (idLevel1_IsIdleTimeExceeded_1, idletimer_2);
	

	tel

	until true restart POINTLevel1_IsIdleTimeExceeded



	state ISIDLETIMEEXCEEDED_YES_IDL:

	 	let

		

	(idLevel1_IsIdleTimeExceeded, idletimer) 
	= (idLevel1_IsIdleTimeExceeded_1, idletimer_1);
	

	tel

	until true restart POINTLevel1_IsIdleTimeExceeded



tel


--***************************************************State :Level1_IsPausedTimeExceeded Automaton***************************************************

node Level1_IsPausedTimeExceeded_node(idLevel1_IsPausedTimeExceeded_1:int;
	IM_IN_Current_System_Mode:int;
	CONST_IN_Max_Paused_Duration:int;
	step_size:real;
	pausedtimer_1:int;
	cancelAlarm_1:int)

returns (idLevel1_IsPausedTimeExceeded:int;
	pausedtimer:int);


let

	 automaton level1_ispausedtimeexceeded

	state POINTLevel1_IsPausedTimeExceeded:
	unless (idLevel1_IsPausedTimeExceeded_1=0) and ( (IM_IN_Current_System_Mode=6 or IM_IN_Current_System_Mode=7 or IM_IN_Current_System_Mode=8) and Step_Scaling_Factor(CONST_IN_Max_Paused_Duration,step_size)=1 ) restart POINT__TO__ISPAUSEDTIMEEXCEEDED_YES_1



	unless (idLevel1_IsPausedTimeExceeded_1=0) and ( IM_IN_Current_System_Mode=6 or IM_IN_Current_System_Mode=7 or IM_IN_Current_System_Mode=8 ) restart POINT__TO__ISPAUSEDTIMEEXCEEDED_COUNTING_2



	unless (idLevel1_IsPausedTimeExceeded_1=0) restart POINT__TO__ISPAUSEDTIMEEXCEEDED_NO_3



	unless (idLevel1_IsPausedTimeExceeded_1=838) and (  pausedtimer_1 >=Step_Scaling_Factor(CONST_IN_Max_Paused_Duration,step_size) ) restart ISPAUSEDTIMEEXCEEDED_COUNTING__TO__ISPAUSEDTIMEEXCEEDED_YES_1



	unless (idLevel1_IsPausedTimeExceeded_1=839) and ( (IM_IN_Current_System_Mode=6 or IM_IN_Current_System_Mode=7 or IM_IN_Current_System_Mode=8) and Step_Scaling_Factor(CONST_IN_Max_Paused_Duration,step_size)=1 ) restart ISPAUSEDTIMEEXCEEDED_NO__TO__ISPAUSEDTIMEEXCEEDED_YES_1



	unless (idLevel1_IsPausedTimeExceeded_1=839) and ( IM_IN_Current_System_Mode=6 or IM_IN_Current_System_Mode=7 or IM_IN_Current_System_Mode=8 ) restart ISPAUSEDTIMEEXCEEDED_NO__TO__ISPAUSEDTIMEEXCEEDED_COUNTING_2



	unless (idLevel1_IsPausedTimeExceeded_1=840) and (  cancelAlarm_1 =13 ) restart ISPAUSEDTIMEEXCEEDED_YES__TO__ISPAUSEDTIMEEXCEEDED_NO_1



	unless (idLevel1_IsPausedTimeExceeded_1=838) restart ISPAUSEDTIMEEXCEEDED_COUNTING_IDL

	unless (idLevel1_IsPausedTimeExceeded_1=839) restart ISPAUSEDTIMEEXCEEDED_NO_IDL

	unless (idLevel1_IsPausedTimeExceeded_1=840) restart ISPAUSEDTIMEEXCEEDED_YES_IDL

	let

		(idLevel1_IsPausedTimeExceeded, pausedtimer) 
	= (idLevel1_IsPausedTimeExceeded_1, pausedtimer_1);
	

	tel



	state POINT__TO__ISPAUSEDTIMEEXCEEDED_YES_1:

	 var 	idLevel1_IsPausedTimeExceeded_2:int;
	let

		-- transition trace :
	--POINT__To__IsPausedTimeExceeded_Yes_1
		(idLevel1_IsPausedTimeExceeded_2) 
	= IsPausedTimeExceeded_Yes_en(idLevel1_IsPausedTimeExceeded_1, false);
		

	(idLevel1_IsPausedTimeExceeded) 
	=  (idLevel1_IsPausedTimeExceeded_2);

	--add unused variables
	(pausedtimer) 
	= (pausedtimer_1);
	

	tel

	until true restart POINTLevel1_IsPausedTimeExceeded



	state POINT__TO__ISPAUSEDTIMEEXCEEDED_COUNTING_2:

	 var 	idLevel1_IsPausedTimeExceeded_2:int;
	pausedtimer_2, pausedtimer_3:int;
	let

		-- transition trace :
	--POINT__To__IsPausedTimeExceeded_counting_2
		-- condition Action : pausedtimer=0;
		
		(pausedtimer_2) 
	= POINT__To__IsPausedTimeExceeded_counting_2_Condition_Action(pausedtimer_1);
		

		(idLevel1_IsPausedTimeExceeded_2, pausedtimer_3) 
	= IsPausedTimeExceeded_counting_en(idLevel1_IsPausedTimeExceeded_1, pausedtimer_2, false);
		

	(idLevel1_IsPausedTimeExceeded, pausedtimer) 
	=  (idLevel1_IsPausedTimeExceeded_2, pausedtimer_3);


	tel

	until true restart POINTLevel1_IsPausedTimeExceeded



	state POINT__TO__ISPAUSEDTIMEEXCEEDED_NO_3:

	 var 	idLevel1_IsPausedTimeExceeded_2:int;
	pausedtimer_2:int;
	let

		-- transition trace :
	--POINT__To__IsPausedTimeExceeded_No_3
		(idLevel1_IsPausedTimeExceeded_2, pausedtimer_2) 
	= IsPausedTimeExceeded_No_en(idLevel1_IsPausedTimeExceeded_1, pausedtimer_1, false);
		

	(idLevel1_IsPausedTimeExceeded, pausedtimer) 
	=  (idLevel1_IsPausedTimeExceeded_2, pausedtimer_2);


	tel

	until true restart POINTLevel1_IsPausedTimeExceeded



	state ISPAUSEDTIMEEXCEEDED_COUNTING__TO__ISPAUSEDTIMEEXCEEDED_YES_1:

	 var 	idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPausedTimeExceeded_3:int;
	pausedtimer_2:int;
	let

		-- transition trace :
	--IsPausedTimeExceeded_counting__To__IsPausedTimeExceeded_Yes_1
		(pausedtimer_2, idLevel1_IsPausedTimeExceeded_2) 
	= IsPausedTimeExceeded_counting_ex(pausedtimer_1, idLevel1_IsPausedTimeExceeded_1, false);
		

		(idLevel1_IsPausedTimeExceeded_3) 
	= IsPausedTimeExceeded_Yes_en(idLevel1_IsPausedTimeExceeded_2, false);
		

	(idLevel1_IsPausedTimeExceeded, pausedtimer) 
	=  (idLevel1_IsPausedTimeExceeded_3, pausedtimer_2);


	tel

	until true restart POINTLevel1_IsPausedTimeExceeded



	state ISPAUSEDTIMEEXCEEDED_NO__TO__ISPAUSEDTIMEEXCEEDED_YES_1:

	 var 	idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPausedTimeExceeded_3:int;
	pausedtimer_2:int;
	let

		-- transition trace :
	--IsPausedTimeExceeded_No__To__IsPausedTimeExceeded_Yes_1
		(pausedtimer_2, idLevel1_IsPausedTimeExceeded_2) 
	= IsPausedTimeExceeded_No_ex(pausedtimer_1, idLevel1_IsPausedTimeExceeded_1, false);
		

		(idLevel1_IsPausedTimeExceeded_3) 
	= IsPausedTimeExceeded_Yes_en(idLevel1_IsPausedTimeExceeded_2, false);
		

	(idLevel1_IsPausedTimeExceeded, pausedtimer) 
	=  (idLevel1_IsPausedTimeExceeded_3, pausedtimer_2);


	tel

	until true restart POINTLevel1_IsPausedTimeExceeded



	state ISPAUSEDTIMEEXCEEDED_NO__TO__ISPAUSEDTIMEEXCEEDED_COUNTING_2:

	 var 	idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPausedTimeExceeded_3:int;
	pausedtimer_2, pausedtimer_3, pausedtimer_4:int;
	let

		-- transition trace :
	--IsPausedTimeExceeded_No__To__IsPausedTimeExceeded_counting_2
		-- condition Action : pausedtimer=0;
		
		(pausedtimer_2) 
	= IsPausedTimeExceeded_No__To__IsPausedTimeExceeded_counting_2_Condition_Action(pausedtimer_1);
		

		(pausedtimer_3, idLevel1_IsPausedTimeExceeded_2) 
	= IsPausedTimeExceeded_No_ex(pausedtimer_2, idLevel1_IsPausedTimeExceeded_1, false);
		

		(idLevel1_IsPausedTimeExceeded_3, pausedtimer_4) 
	= IsPausedTimeExceeded_counting_en(idLevel1_IsPausedTimeExceeded_2, pausedtimer_3, false);
		

	(idLevel1_IsPausedTimeExceeded, pausedtimer) 
	=  (idLevel1_IsPausedTimeExceeded_3, pausedtimer_4);


	tel

	until true restart POINTLevel1_IsPausedTimeExceeded



	state ISPAUSEDTIMEEXCEEDED_YES__TO__ISPAUSEDTIMEEXCEEDED_NO_1:

	 var 	idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPausedTimeExceeded_3:int;
	pausedtimer_2:int;
	let

		-- transition trace :
	--IsPausedTimeExceeded_Yes__To__IsPausedTimeExceeded_No_1
		(idLevel1_IsPausedTimeExceeded_2) 
	= IsPausedTimeExceeded_Yes_ex(idLevel1_IsPausedTimeExceeded_1, false);
		

		(idLevel1_IsPausedTimeExceeded_3, pausedtimer_2) 
	= IsPausedTimeExceeded_No_en(idLevel1_IsPausedTimeExceeded_2, pausedtimer_1, false);
		

	(idLevel1_IsPausedTimeExceeded, pausedtimer) 
	=  (idLevel1_IsPausedTimeExceeded_3, pausedtimer_2);


	tel

	until true restart POINTLevel1_IsPausedTimeExceeded



	state ISPAUSEDTIMEEXCEEDED_COUNTING_IDL:

	 var 	pausedtimer_2:int;
	let

		
	(pausedtimer_2) 
	= IsPausedTimeExceeded_counting_du(pausedtimer_1);

		


	(idLevel1_IsPausedTimeExceeded, pausedtimer) 
	= (idLevel1_IsPausedTimeExceeded_1, pausedtimer_2);
	

	tel

	until true restart POINTLevel1_IsPausedTimeExceeded



	state ISPAUSEDTIMEEXCEEDED_NO_IDL:

	 var 	pausedtimer_2:int;
	let

		
	(pausedtimer_2) 
	= IsPausedTimeExceeded_No_du(pausedtimer_1);

		


	(idLevel1_IsPausedTimeExceeded, pausedtimer) 
	= (idLevel1_IsPausedTimeExceeded_1, pausedtimer_2);
	

	tel

	until true restart POINTLevel1_IsPausedTimeExceeded



	state ISPAUSEDTIMEEXCEEDED_YES_IDL:

	 	let

		

	(idLevel1_IsPausedTimeExceeded, pausedtimer) 
	= (idLevel1_IsPausedTimeExceeded_1, pausedtimer_1);
	

	tel

	until true restart POINTLevel1_IsPausedTimeExceeded



tel


--***************************************************State :Level1_IsFlowRateNotStable Automaton***************************************************

node Level1_IsFlowRateNotStable_node(idLevel1_IsFlowRateNotStable_1:int;
	SYS_STAT_IN_In_Therapy:bool;
	SENSOR_IN_Flow_Rate_Not_Stable:bool;
	cancelAlarm_1:int)

returns (idLevel1_IsFlowRateNotStable:int);


let

	 automaton level1_isflowratenotstable

	state POINTLevel1_IsFlowRateNotStable:
	unless (idLevel1_IsFlowRateNotStable_1=0) and ( SYS_STAT_IN_In_Therapy and SENSOR_IN_Flow_Rate_Not_Stable ) restart POINT__TO__ISFLOWRATENOTSTABLE_YES_1



	unless (idLevel1_IsFlowRateNotStable_1=0) restart POINT__TO__ISFLOWRATENOTSTABLE_NO_2



	unless (idLevel1_IsFlowRateNotStable_1=835) and (  cancelAlarm_1 =11 and not SENSOR_IN_Flow_Rate_Not_Stable ) restart ISFLOWRATENOTSTABLE_YES__TO__ISFLOWRATENOTSTABLE_NO_1



	unless (idLevel1_IsFlowRateNotStable_1=836) and ( SYS_STAT_IN_In_Therapy and SENSOR_IN_Flow_Rate_Not_Stable ) restart ISFLOWRATENOTSTABLE_NO__TO__ISFLOWRATENOTSTABLE_YES_1



	unless (idLevel1_IsFlowRateNotStable_1=835) restart ISFLOWRATENOTSTABLE_YES_IDL

	unless (idLevel1_IsFlowRateNotStable_1=836) restart ISFLOWRATENOTSTABLE_NO_IDL

	let

		(idLevel1_IsFlowRateNotStable) 
	= (idLevel1_IsFlowRateNotStable_1);
	

	tel



	state POINT__TO__ISFLOWRATENOTSTABLE_YES_1:

	 var 	idLevel1_IsFlowRateNotStable_2:int;
	let

		-- transition trace :
	--POINT__To__IsFlowRateNotStable_Yes_1
		(idLevel1_IsFlowRateNotStable_2) 
	= IsFlowRateNotStable_Yes_en(idLevel1_IsFlowRateNotStable_1, false);
		

	(idLevel1_IsFlowRateNotStable) 
	=  (idLevel1_IsFlowRateNotStable_2);


	tel

	until true restart POINTLevel1_IsFlowRateNotStable



	state POINT__TO__ISFLOWRATENOTSTABLE_NO_2:

	 var 	idLevel1_IsFlowRateNotStable_2:int;
	let

		-- transition trace :
	--POINT__To__IsFlowRateNotStable_No_2
		(idLevel1_IsFlowRateNotStable_2) 
	= IsFlowRateNotStable_No_en(idLevel1_IsFlowRateNotStable_1, false);
		

	(idLevel1_IsFlowRateNotStable) 
	=  (idLevel1_IsFlowRateNotStable_2);


	tel

	until true restart POINTLevel1_IsFlowRateNotStable



	state ISFLOWRATENOTSTABLE_YES__TO__ISFLOWRATENOTSTABLE_NO_1:

	 var 	idLevel1_IsFlowRateNotStable_2, idLevel1_IsFlowRateNotStable_3:int;
	let

		-- transition trace :
	--IsFlowRateNotStable_Yes__To__IsFlowRateNotStable_No_1
		(idLevel1_IsFlowRateNotStable_2) 
	= IsFlowRateNotStable_Yes_ex(idLevel1_IsFlowRateNotStable_1, false);
		

		(idLevel1_IsFlowRateNotStable_3) 
	= IsFlowRateNotStable_No_en(idLevel1_IsFlowRateNotStable_2, false);
		

	(idLevel1_IsFlowRateNotStable) 
	=  (idLevel1_IsFlowRateNotStable_3);


	tel

	until true restart POINTLevel1_IsFlowRateNotStable



	state ISFLOWRATENOTSTABLE_NO__TO__ISFLOWRATENOTSTABLE_YES_1:

	 var 	idLevel1_IsFlowRateNotStable_2, idLevel1_IsFlowRateNotStable_3:int;
	let

		-- transition trace :
	--IsFlowRateNotStable_No__To__IsFlowRateNotStable_Yes_1
		(idLevel1_IsFlowRateNotStable_2) 
	= IsFlowRateNotStable_No_ex(idLevel1_IsFlowRateNotStable_1, false);
		

		(idLevel1_IsFlowRateNotStable_3) 
	= IsFlowRateNotStable_Yes_en(idLevel1_IsFlowRateNotStable_2, false);
		

	(idLevel1_IsFlowRateNotStable) 
	=  (idLevel1_IsFlowRateNotStable_3);


	tel

	until true restart POINTLevel1_IsFlowRateNotStable



	state ISFLOWRATENOTSTABLE_YES_IDL:

	 	let

		

	(idLevel1_IsFlowRateNotStable) 
	= (idLevel1_IsFlowRateNotStable_1);
	

	tel

	until true restart POINTLevel1_IsFlowRateNotStable



	state ISFLOWRATENOTSTABLE_NO_IDL:

	 	let

		

	(idLevel1_IsFlowRateNotStable) 
	= (idLevel1_IsFlowRateNotStable_1);
	

	tel

	until true restart POINTLevel1_IsFlowRateNotStable



tel


--***************************************************State :Level1_IsUnderInfusion Automaton***************************************************

node Level1_IsUnderInfusion_node(idLevel1_IsUnderInfusion_1:int;
	underInfusion_1:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_Low:int;
	IM_IN_Flow_Rate_Commanded:int;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SYS_STAT_IN_In_Therapy:bool;
	cancelAlarm_1:int;
	underInfusionTimer_1:int;
	CONST_IN_Max_Duration_Under_Infusion:int;
	step_size:real)

returns (idLevel1_IsUnderInfusion:int;
	underInfusion:int;
	underInfusionTimer:int);


let

	 automaton level1_isunderinfusion

	state POINTLevel1_IsUnderInfusion:
	unless (idLevel1_IsUnderInfusion_1=0) and (  underInfusion_1 =1 ) restart POINT__TO__ISUNDERINFUSION_YES_1



	unless (idLevel1_IsUnderInfusion_1=0) and (  underInfusion_1 =2 ) restart POINT__TO__ISUNDERINFUSION_MONITOR_2



	unless (idLevel1_IsUnderInfusion_1=0) restart POINT__TO__ISUNDERINFUSION_CHECK_3



	unless (idLevel1_IsUnderInfusion_1=830) and (  cancelAlarm_1 =10 ) restart ISUNDERINFUSION_YES__TO__ISUNDERINFUSION_CHECK_1



	unless (idLevel1_IsUnderInfusion_1=831) and (  underInfusion_1 =1 ) restart ISUNDERINFUSION_CHECK__TO__ISUNDERINFUSION_YES_1



	unless (idLevel1_IsUnderInfusion_1=831) and (  underInfusion_1 =2 ) restart ISUNDERINFUSION_CHECK__TO__ISUNDERINFUSION_MONITOR_2



	unless (idLevel1_IsUnderInfusion_1=832) and (  underInfusion_1 =1 or  underInfusionTimer_1 >Step_Scaling_Factor(CONST_IN_Max_Duration_Under_Infusion,step_size) ) restart ISUNDERINFUSION_MONITOR__TO__ISUNDERINFUSION_YES_1



	unless (idLevel1_IsUnderInfusion_1=832) and (  underInfusion_1 =2 ) restart ISUNDERINFUSION_MONITOR__TO__ISUNDERINFUSION_MONITOR_2



	unless (idLevel1_IsUnderInfusion_1=832) and (  underInfusion_1 =0 ) restart ISUNDERINFUSION_MONITOR__TO__ISUNDERINFUSION_CHECK_3



	unless (idLevel1_IsUnderInfusion_1=830) restart ISUNDERINFUSION_YES_IDL

	unless (idLevel1_IsUnderInfusion_1=831) restart ISUNDERINFUSION_CHECK_IDL

	unless (idLevel1_IsUnderInfusion_1=832) restart ISUNDERINFUSION_MONITOR_IDL

	let

		(idLevel1_IsUnderInfusion, underInfusion, underInfusionTimer) 
	= (idLevel1_IsUnderInfusion_1, underInfusion_1, underInfusionTimer_1);
	

	tel



	state POINT__TO__ISUNDERINFUSION_YES_1:

	 var 	idLevel1_IsUnderInfusion_2:int;
	underInfusion_2:int;
	let

		-- transition trace :
	--POINT__To__IsUnderInfusion_Yes_1
		(idLevel1_IsUnderInfusion_2, underInfusion_2) 
	= IsUnderInfusion_Yes_en(idLevel1_IsUnderInfusion_1, underInfusion_1, false);
		

	(idLevel1_IsUnderInfusion, underInfusion) 
	=  (idLevel1_IsUnderInfusion_2, underInfusion_2);

	--add unused variables
	(underInfusionTimer) 
	= (underInfusionTimer_1);
	

	tel

	until true restart POINTLevel1_IsUnderInfusion



	state POINT__TO__ISUNDERINFUSION_MONITOR_2:

	 var 	idLevel1_IsUnderInfusion_2:int;
	underInfusion_2:int;
	let

		-- transition trace :
	--POINT__To__IsUnderInfusion_Monitor_2
		(idLevel1_IsUnderInfusion_2, underInfusion_2) 
	= IsUnderInfusion_Monitor_en(idLevel1_IsUnderInfusion_1, underInfusion_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, false);
		

	(idLevel1_IsUnderInfusion, underInfusion) 
	=  (idLevel1_IsUnderInfusion_2, underInfusion_2);

	--add unused variables
	(underInfusionTimer) 
	= (underInfusionTimer_1);
	

	tel

	until true restart POINTLevel1_IsUnderInfusion



	state POINT__TO__ISUNDERINFUSION_CHECK_3:

	 var 	idLevel1_IsUnderInfusion_2:int;
	underInfusion_2:int;
	let

		-- transition trace :
	--POINT__To__IsUnderInfusion_Check_3
		(idLevel1_IsUnderInfusion_2, underInfusion_2) 
	= IsUnderInfusion_Check_en(idLevel1_IsUnderInfusion_1, underInfusion_1, false);
		

	(idLevel1_IsUnderInfusion, underInfusion) 
	=  (idLevel1_IsUnderInfusion_2, underInfusion_2);

	--add unused variables
	(underInfusionTimer) 
	= (underInfusionTimer_1);
	

	tel

	until true restart POINTLevel1_IsUnderInfusion



	state ISUNDERINFUSION_YES__TO__ISUNDERINFUSION_CHECK_1:

	 var 	idLevel1_IsUnderInfusion_2, idLevel1_IsUnderInfusion_3:int;
	underInfusion_2:int;
	let

		-- transition trace :
	--IsUnderInfusion_Yes__To__IsUnderInfusion_Check_1
		(idLevel1_IsUnderInfusion_2) 
	= IsUnderInfusion_Yes_ex(idLevel1_IsUnderInfusion_1, false);
		

		(idLevel1_IsUnderInfusion_3, underInfusion_2) 
	= IsUnderInfusion_Check_en(idLevel1_IsUnderInfusion_2, underInfusion_1, false);
		

	(idLevel1_IsUnderInfusion, underInfusion) 
	=  (idLevel1_IsUnderInfusion_3, underInfusion_2);

	--add unused variables
	(underInfusionTimer) 
	= (underInfusionTimer_1);
	

	tel

	until true restart POINTLevel1_IsUnderInfusion



	state ISUNDERINFUSION_CHECK__TO__ISUNDERINFUSION_YES_1:

	 var 	idLevel1_IsUnderInfusion_2, idLevel1_IsUnderInfusion_3:int;
	underInfusion_2:int;
	let

		-- transition trace :
	--IsUnderInfusion_Check__To__IsUnderInfusion_Yes_1
		(idLevel1_IsUnderInfusion_2) 
	= IsUnderInfusion_Check_ex(idLevel1_IsUnderInfusion_1, false);
		

		(idLevel1_IsUnderInfusion_3, underInfusion_2) 
	= IsUnderInfusion_Yes_en(idLevel1_IsUnderInfusion_2, underInfusion_1, false);
		

	(idLevel1_IsUnderInfusion, underInfusion) 
	=  (idLevel1_IsUnderInfusion_3, underInfusion_2);

	--add unused variables
	(underInfusionTimer) 
	= (underInfusionTimer_1);
	

	tel

	until true restart POINTLevel1_IsUnderInfusion



	state ISUNDERINFUSION_CHECK__TO__ISUNDERINFUSION_MONITOR_2:

	 var 	idLevel1_IsUnderInfusion_2, idLevel1_IsUnderInfusion_3:int;
	underInfusion_2:int;
	underInfusionTimer_2:int;
	let

		-- transition trace :
	--IsUnderInfusion_Check__To__IsUnderInfusion_Monitor_2
		-- condition Action : underInfusionTimer=0;
		
		(underInfusionTimer_2) 
	= IsUnderInfusion_Check__To__IsUnderInfusion_Monitor_2_Condition_Action(underInfusionTimer_1);
		

		(idLevel1_IsUnderInfusion_2) 
	= IsUnderInfusion_Check_ex(idLevel1_IsUnderInfusion_1, false);
		

		(idLevel1_IsUnderInfusion_3, underInfusion_2) 
	= IsUnderInfusion_Monitor_en(idLevel1_IsUnderInfusion_2, underInfusion_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, false);
		

	(idLevel1_IsUnderInfusion, underInfusion, underInfusionTimer) 
	=  (idLevel1_IsUnderInfusion_3, underInfusion_2, underInfusionTimer_2);


	tel

	until true restart POINTLevel1_IsUnderInfusion



	state ISUNDERINFUSION_MONITOR__TO__ISUNDERINFUSION_YES_1:

	 var 	idLevel1_IsUnderInfusion_2, idLevel1_IsUnderInfusion_3:int;
	underInfusion_2:int;
	underInfusionTimer_2:int;
	let

		-- transition trace :
	--IsUnderInfusion_Monitor__To__IsUnderInfusion_Yes_1
		-- condition Action : underInfusionTimer=0;
		
		(underInfusionTimer_2) 
	= IsUnderInfusion_Monitor__To__IsUnderInfusion_Yes_1_Condition_Action(underInfusionTimer_1);
		

		(idLevel1_IsUnderInfusion_2) 
	= IsUnderInfusion_Monitor_ex(idLevel1_IsUnderInfusion_1, false);
		

		(idLevel1_IsUnderInfusion_3, underInfusion_2) 
	= IsUnderInfusion_Yes_en(idLevel1_IsUnderInfusion_2, underInfusion_1, false);
		

	(idLevel1_IsUnderInfusion, underInfusion, underInfusionTimer) 
	=  (idLevel1_IsUnderInfusion_3, underInfusion_2, underInfusionTimer_2);


	tel

	until true restart POINTLevel1_IsUnderInfusion



	state ISUNDERINFUSION_MONITOR__TO__ISUNDERINFUSION_MONITOR_2:

	 var 	idLevel1_IsUnderInfusion_2, idLevel1_IsUnderInfusion_3:int;
	underInfusion_2:int;
	underInfusionTimer_2:int;
	let

		-- transition trace :
	--IsUnderInfusion_Monitor__To__IsUnderInfusion_Monitor_2
		-- condition Action : underInfusionTimer++;
		
		(underInfusionTimer_2) 
	= IsUnderInfusion_Monitor__To__IsUnderInfusion_Monitor_2_Condition_Action(underInfusionTimer_1);
		

		(idLevel1_IsUnderInfusion_2) 
	= IsUnderInfusion_Monitor_ex(idLevel1_IsUnderInfusion_1, false);
		

		(idLevel1_IsUnderInfusion_3, underInfusion_2) 
	= IsUnderInfusion_Monitor_en(idLevel1_IsUnderInfusion_2, underInfusion_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, false);
		

	(idLevel1_IsUnderInfusion, underInfusion, underInfusionTimer) 
	=  (idLevel1_IsUnderInfusion_3, underInfusion_2, underInfusionTimer_2);


	tel

	until true restart POINTLevel1_IsUnderInfusion



	state ISUNDERINFUSION_MONITOR__TO__ISUNDERINFUSION_CHECK_3:

	 var 	idLevel1_IsUnderInfusion_2, idLevel1_IsUnderInfusion_3:int;
	underInfusion_2:int;
	underInfusionTimer_2:int;
	let

		-- transition trace :
	--IsUnderInfusion_Monitor__To__IsUnderInfusion_Check_3
		-- condition Action : underInfusionTimer=0;
		
		(underInfusionTimer_2) 
	= IsUnderInfusion_Monitor__To__IsUnderInfusion_Check_3_Condition_Action(underInfusionTimer_1);
		

		(idLevel1_IsUnderInfusion_2) 
	= IsUnderInfusion_Monitor_ex(idLevel1_IsUnderInfusion_1, false);
		

		(idLevel1_IsUnderInfusion_3, underInfusion_2) 
	= IsUnderInfusion_Check_en(idLevel1_IsUnderInfusion_2, underInfusion_1, false);
		

	(idLevel1_IsUnderInfusion, underInfusion, underInfusionTimer) 
	=  (idLevel1_IsUnderInfusion_3, underInfusion_2, underInfusionTimer_2);


	tel

	until true restart POINTLevel1_IsUnderInfusion



	state ISUNDERINFUSION_YES_IDL:

	 var 	underInfusion_2:int;
	let

		
	(underInfusion_2) 
	= IsUnderInfusion_Yes_du(underInfusion_1);

		


	(idLevel1_IsUnderInfusion, underInfusion, underInfusionTimer) 
	= (idLevel1_IsUnderInfusion_1, underInfusion_2, underInfusionTimer_1);
	

	tel

	until true restart POINTLevel1_IsUnderInfusion



	state ISUNDERINFUSION_CHECK_IDL:

	 var 	underInfusion_2:int;
	let

		
	(underInfusion_2) 
	= IsUnderInfusion_Check_du(underInfusion_1);

		


	(idLevel1_IsUnderInfusion, underInfusion, underInfusionTimer) 
	= (idLevel1_IsUnderInfusion_1, underInfusion_2, underInfusionTimer_1);
	

	tel

	until true restart POINTLevel1_IsUnderInfusion



	state ISUNDERINFUSION_MONITOR_IDL:

	 var 	underInfusion_2:int;
	let

		
	(underInfusion_2) 
	= IsUnderInfusion_Monitor_du(underInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min);

		


	(idLevel1_IsUnderInfusion, underInfusion, underInfusionTimer) 
	= (idLevel1_IsUnderInfusion_1, underInfusion_2, underInfusionTimer_1);
	

	tel

	until true restart POINTLevel1_IsUnderInfusion



tel


--***************************************************State :Level2_IsLowReservoir Automaton***************************************************

node Level2_IsLowReservoir_node(idLevel2_IsLowReservoir_1:int;
	SYS_STAT_IN_In_Therapy:bool;
	SYS_STAT_IN_Reservoir_Volume:int;
	CONST_IN_Low_Reservoir:int;
	cancelAlarm_1:int)

returns (idLevel2_IsLowReservoir:int);


let

	 automaton level2_islowreservoir

	state POINTLevel2_IsLowReservoir:
	unless (idLevel2_IsLowReservoir_1=0) and ( SYS_STAT_IN_In_Therapy and SYS_STAT_IN_Reservoir_Volume<CONST_IN_Low_Reservoir ) restart POINT__TO__ISLOWRESERVOIR_YES_1



	unless (idLevel2_IsLowReservoir_1=0) restart POINT__TO__ISLOWRESERVOIR_NO_2



	unless (idLevel2_IsLowReservoir_1=826) and ( SYS_STAT_IN_In_Therapy and SYS_STAT_IN_Reservoir_Volume<CONST_IN_Low_Reservoir ) restart ISLOWRESERVOIR_NO__TO__ISLOWRESERVOIR_YES_1



	unless (idLevel2_IsLowReservoir_1=827) and (  cancelAlarm_1 =9 and not (SYS_STAT_IN_Reservoir_Volume<CONST_IN_Low_Reservoir) ) restart ISLOWRESERVOIR_YES__TO__ISLOWRESERVOIR_NO_1



	unless (idLevel2_IsLowReservoir_1=826) restart ISLOWRESERVOIR_NO_IDL

	unless (idLevel2_IsLowReservoir_1=827) restart ISLOWRESERVOIR_YES_IDL

	let

		(idLevel2_IsLowReservoir) 
	= (idLevel2_IsLowReservoir_1);
	

	tel



	state POINT__TO__ISLOWRESERVOIR_YES_1:

	 var 	idLevel2_IsLowReservoir_2:int;
	let

		-- transition trace :
	--POINT__To__IsLowReservoir_Yes_1
		(idLevel2_IsLowReservoir_2) 
	= IsLowReservoir_Yes_en(idLevel2_IsLowReservoir_1, false);
		

	(idLevel2_IsLowReservoir) 
	=  (idLevel2_IsLowReservoir_2);


	tel

	until true restart POINTLevel2_IsLowReservoir



	state POINT__TO__ISLOWRESERVOIR_NO_2:

	 var 	idLevel2_IsLowReservoir_2:int;
	let

		-- transition trace :
	--POINT__To__IsLowReservoir_No_2
		(idLevel2_IsLowReservoir_2) 
	= IsLowReservoir_No_en(idLevel2_IsLowReservoir_1, false);
		

	(idLevel2_IsLowReservoir) 
	=  (idLevel2_IsLowReservoir_2);


	tel

	until true restart POINTLevel2_IsLowReservoir



	state ISLOWRESERVOIR_NO__TO__ISLOWRESERVOIR_YES_1:

	 var 	idLevel2_IsLowReservoir_2, idLevel2_IsLowReservoir_3:int;
	let

		-- transition trace :
	--IsLowReservoir_No__To__IsLowReservoir_Yes_1
		(idLevel2_IsLowReservoir_2) 
	= IsLowReservoir_No_ex(idLevel2_IsLowReservoir_1, false);
		

		(idLevel2_IsLowReservoir_3) 
	= IsLowReservoir_Yes_en(idLevel2_IsLowReservoir_2, false);
		

	(idLevel2_IsLowReservoir) 
	=  (idLevel2_IsLowReservoir_3);


	tel

	until true restart POINTLevel2_IsLowReservoir



	state ISLOWRESERVOIR_YES__TO__ISLOWRESERVOIR_NO_1:

	 var 	idLevel2_IsLowReservoir_2, idLevel2_IsLowReservoir_3:int;
	let

		-- transition trace :
	--IsLowReservoir_Yes__To__IsLowReservoir_No_1
		(idLevel2_IsLowReservoir_2) 
	= IsLowReservoir_Yes_ex(idLevel2_IsLowReservoir_1, false);
		

		(idLevel2_IsLowReservoir_3) 
	= IsLowReservoir_No_en(idLevel2_IsLowReservoir_2, false);
		

	(idLevel2_IsLowReservoir) 
	=  (idLevel2_IsLowReservoir_3);


	tel

	until true restart POINTLevel2_IsLowReservoir



	state ISLOWRESERVOIR_NO_IDL:

	 	let

		

	(idLevel2_IsLowReservoir) 
	= (idLevel2_IsLowReservoir_1);
	

	tel

	until true restart POINTLevel2_IsLowReservoir



	state ISLOWRESERVOIR_YES_IDL:

	 	let

		

	(idLevel2_IsLowReservoir) 
	= (idLevel2_IsLowReservoir_1);
	

	tel

	until true restart POINTLevel2_IsLowReservoir



tel


--***************************************************State :Level3_IsDoor_Open Automaton***************************************************

node Level3_IsDoor_Open_node(idLevel3_IsDoor_Open_1:int;
	SENSOR_IN_Door_Open:bool;
	cancelAlarm_1:int)

returns (idLevel3_IsDoor_Open:int);


let

	 automaton level3_isdoor_open

	state POINTLevel3_IsDoor_Open:
	unless (idLevel3_IsDoor_Open_1=0) and ( SENSOR_IN_Door_Open ) restart POINT__TO__ISDOOR_OPEN_YES_1



	unless (idLevel3_IsDoor_Open_1=0) restart POINT__TO__ISDOOR_OPEN_NO_2



	unless (idLevel3_IsDoor_Open_1=821) and ( SENSOR_IN_Door_Open ) restart ISDOOR_OPEN_NO__TO__ISDOOR_OPEN_YES_1



	unless (idLevel3_IsDoor_Open_1=822) and (  cancelAlarm_1 =8 and not SENSOR_IN_Door_Open ) restart ISDOOR_OPEN_YES__TO__ISDOOR_OPEN_NO_1



	unless (idLevel3_IsDoor_Open_1=821) restart ISDOOR_OPEN_NO_IDL

	unless (idLevel3_IsDoor_Open_1=822) restart ISDOOR_OPEN_YES_IDL

	let

		(idLevel3_IsDoor_Open) 
	= (idLevel3_IsDoor_Open_1);
	

	tel



	state POINT__TO__ISDOOR_OPEN_YES_1:

	 var 	idLevel3_IsDoor_Open_2:int;
	let

		-- transition trace :
	--POINT__To__IsDoor_Open_Yes_1
		(idLevel3_IsDoor_Open_2) 
	= IsDoor_Open_Yes_en(idLevel3_IsDoor_Open_1, false);
		

	(idLevel3_IsDoor_Open) 
	=  (idLevel3_IsDoor_Open_2);


	tel

	until true restart POINTLevel3_IsDoor_Open



	state POINT__TO__ISDOOR_OPEN_NO_2:

	 var 	idLevel3_IsDoor_Open_2:int;
	let

		-- transition trace :
	--POINT__To__IsDoor_Open_No_2
		(idLevel3_IsDoor_Open_2) 
	= IsDoor_Open_No_en(idLevel3_IsDoor_Open_1, false);
		

	(idLevel3_IsDoor_Open) 
	=  (idLevel3_IsDoor_Open_2);


	tel

	until true restart POINTLevel3_IsDoor_Open



	state ISDOOR_OPEN_NO__TO__ISDOOR_OPEN_YES_1:

	 var 	idLevel3_IsDoor_Open_2, idLevel3_IsDoor_Open_3:int;
	let

		-- transition trace :
	--IsDoor_Open_No__To__IsDoor_Open_Yes_1
		(idLevel3_IsDoor_Open_2) 
	= IsDoor_Open_No_ex(idLevel3_IsDoor_Open_1, false);
		

		(idLevel3_IsDoor_Open_3) 
	= IsDoor_Open_Yes_en(idLevel3_IsDoor_Open_2, false);
		

	(idLevel3_IsDoor_Open) 
	=  (idLevel3_IsDoor_Open_3);


	tel

	until true restart POINTLevel3_IsDoor_Open



	state ISDOOR_OPEN_YES__TO__ISDOOR_OPEN_NO_1:

	 var 	idLevel3_IsDoor_Open_2, idLevel3_IsDoor_Open_3:int;
	let

		-- transition trace :
	--IsDoor_Open_Yes__To__IsDoor_Open_No_1
		(idLevel3_IsDoor_Open_2) 
	= IsDoor_Open_Yes_ex(idLevel3_IsDoor_Open_1, false);
		

		(idLevel3_IsDoor_Open_3) 
	= IsDoor_Open_No_en(idLevel3_IsDoor_Open_2, false);
		

	(idLevel3_IsDoor_Open) 
	=  (idLevel3_IsDoor_Open_3);


	tel

	until true restart POINTLevel3_IsDoor_Open



	state ISDOOR_OPEN_NO_IDL:

	 	let

		

	(idLevel3_IsDoor_Open) 
	= (idLevel3_IsDoor_Open_1);
	

	tel

	until true restart POINTLevel3_IsDoor_Open



	state ISDOOR_OPEN_YES_IDL:

	 	let

		

	(idLevel3_IsDoor_Open) 
	= (idLevel3_IsDoor_Open_1);
	

	tel

	until true restart POINTLevel3_IsDoor_Open



tel


--***************************************************State :Level3_IsOcclusion Automaton***************************************************

node Level3_IsOcclusion_node(idLevel3_IsOcclusion_1:int;
	SENSOR_IN_Occlusion:bool;
	cancelAlarm_1:int)

returns (idLevel3_IsOcclusion:int);


let

	 automaton level3_isocclusion

	state POINTLevel3_IsOcclusion:
	unless (idLevel3_IsOcclusion_1=0) and ( SENSOR_IN_Occlusion ) restart POINT__TO__ISOCCLUSION_YES_1



	unless (idLevel3_IsOcclusion_1=0) restart POINT__TO__ISOCCLUSION_NO_2



	unless (idLevel3_IsOcclusion_1=818) and (  cancelAlarm_1 =7 and not SENSOR_IN_Occlusion ) restart ISOCCLUSION_YES__TO__ISOCCLUSION_NO_1



	unless (idLevel3_IsOcclusion_1=819) and ( SENSOR_IN_Occlusion ) restart ISOCCLUSION_NO__TO__ISOCCLUSION_YES_1



	unless (idLevel3_IsOcclusion_1=818) restart ISOCCLUSION_YES_IDL

	unless (idLevel3_IsOcclusion_1=819) restart ISOCCLUSION_NO_IDL

	let

		(idLevel3_IsOcclusion) 
	= (idLevel3_IsOcclusion_1);
	

	tel



	state POINT__TO__ISOCCLUSION_YES_1:

	 var 	idLevel3_IsOcclusion_2:int;
	let

		-- transition trace :
	--POINT__To__IsOcclusion_Yes_1
		(idLevel3_IsOcclusion_2) 
	= IsOcclusion_Yes_en(idLevel3_IsOcclusion_1, false);
		

	(idLevel3_IsOcclusion) 
	=  (idLevel3_IsOcclusion_2);


	tel

	until true restart POINTLevel3_IsOcclusion



	state POINT__TO__ISOCCLUSION_NO_2:

	 var 	idLevel3_IsOcclusion_2:int;
	let

		-- transition trace :
	--POINT__To__IsOcclusion_No_2
		(idLevel3_IsOcclusion_2) 
	= IsOcclusion_No_en(idLevel3_IsOcclusion_1, false);
		

	(idLevel3_IsOcclusion) 
	=  (idLevel3_IsOcclusion_2);


	tel

	until true restart POINTLevel3_IsOcclusion



	state ISOCCLUSION_YES__TO__ISOCCLUSION_NO_1:

	 var 	idLevel3_IsOcclusion_2, idLevel3_IsOcclusion_3:int;
	let

		-- transition trace :
	--IsOcclusion_Yes__To__IsOcclusion_No_1
		(idLevel3_IsOcclusion_2) 
	= IsOcclusion_Yes_ex(idLevel3_IsOcclusion_1, false);
		

		(idLevel3_IsOcclusion_3) 
	= IsOcclusion_No_en(idLevel3_IsOcclusion_2, false);
		

	(idLevel3_IsOcclusion) 
	=  (idLevel3_IsOcclusion_3);


	tel

	until true restart POINTLevel3_IsOcclusion



	state ISOCCLUSION_NO__TO__ISOCCLUSION_YES_1:

	 var 	idLevel3_IsOcclusion_2, idLevel3_IsOcclusion_3:int;
	let

		-- transition trace :
	--IsOcclusion_No__To__IsOcclusion_Yes_1
		(idLevel3_IsOcclusion_2) 
	= IsOcclusion_No_ex(idLevel3_IsOcclusion_1, false);
		

		(idLevel3_IsOcclusion_3) 
	= IsOcclusion_Yes_en(idLevel3_IsOcclusion_2, false);
		

	(idLevel3_IsOcclusion) 
	=  (idLevel3_IsOcclusion_3);


	tel

	until true restart POINTLevel3_IsOcclusion



	state ISOCCLUSION_YES_IDL:

	 	let

		

	(idLevel3_IsOcclusion) 
	= (idLevel3_IsOcclusion_1);
	

	tel

	until true restart POINTLevel3_IsOcclusion



	state ISOCCLUSION_NO_IDL:

	 	let

		

	(idLevel3_IsOcclusion) 
	= (idLevel3_IsOcclusion_1);
	

	tel

	until true restart POINTLevel3_IsOcclusion



tel


--***************************************************State :Level3_IsAirInLine Automaton***************************************************

node Level3_IsAirInLine_node(idLevel3_IsAirInLine_1:int;
	SENSOR_IN_Air_In_line:bool;
	cancelAlarm_1:int)

returns (idLevel3_IsAirInLine:int);


let

	 automaton level3_isairinline

	state POINTLevel3_IsAirInLine:
	unless (idLevel3_IsAirInLine_1=0) and ( SENSOR_IN_Air_In_line ) restart POINT__TO__ISAIRINLINE_YES_1



	unless (idLevel3_IsAirInLine_1=0) restart POINT__TO__ISAIRINLINE_NO_2



	unless (idLevel3_IsAirInLine_1=815) and (  cancelAlarm_1 =6 and not SENSOR_IN_Air_In_line ) restart ISAIRINLINE_YES__TO__ISAIRINLINE_NO_1



	unless (idLevel3_IsAirInLine_1=816) and ( SENSOR_IN_Air_In_line ) restart ISAIRINLINE_NO__TO__ISAIRINLINE_YES_1



	unless (idLevel3_IsAirInLine_1=815) restart ISAIRINLINE_YES_IDL

	unless (idLevel3_IsAirInLine_1=816) restart ISAIRINLINE_NO_IDL

	let

		(idLevel3_IsAirInLine) 
	= (idLevel3_IsAirInLine_1);
	

	tel



	state POINT__TO__ISAIRINLINE_YES_1:

	 var 	idLevel3_IsAirInLine_2:int;
	let

		-- transition trace :
	--POINT__To__IsAirInLine_Yes_1
		(idLevel3_IsAirInLine_2) 
	= IsAirInLine_Yes_en(idLevel3_IsAirInLine_1, false);
		

	(idLevel3_IsAirInLine) 
	=  (idLevel3_IsAirInLine_2);


	tel

	until true restart POINTLevel3_IsAirInLine



	state POINT__TO__ISAIRINLINE_NO_2:

	 var 	idLevel3_IsAirInLine_2:int;
	let

		-- transition trace :
	--POINT__To__IsAirInLine_No_2
		(idLevel3_IsAirInLine_2) 
	= IsAirInLine_No_en(idLevel3_IsAirInLine_1, false);
		

	(idLevel3_IsAirInLine) 
	=  (idLevel3_IsAirInLine_2);


	tel

	until true restart POINTLevel3_IsAirInLine



	state ISAIRINLINE_YES__TO__ISAIRINLINE_NO_1:

	 var 	idLevel3_IsAirInLine_2, idLevel3_IsAirInLine_3:int;
	let

		-- transition trace :
	--IsAirInLine_Yes__To__IsAirInLine_No_1
		(idLevel3_IsAirInLine_2) 
	= IsAirInLine_Yes_ex(idLevel3_IsAirInLine_1, false);
		

		(idLevel3_IsAirInLine_3) 
	= IsAirInLine_No_en(idLevel3_IsAirInLine_2, false);
		

	(idLevel3_IsAirInLine) 
	=  (idLevel3_IsAirInLine_3);


	tel

	until true restart POINTLevel3_IsAirInLine



	state ISAIRINLINE_NO__TO__ISAIRINLINE_YES_1:

	 var 	idLevel3_IsAirInLine_2, idLevel3_IsAirInLine_3:int;
	let

		-- transition trace :
	--IsAirInLine_No__To__IsAirInLine_Yes_1
		(idLevel3_IsAirInLine_2) 
	= IsAirInLine_No_ex(idLevel3_IsAirInLine_1, false);
		

		(idLevel3_IsAirInLine_3) 
	= IsAirInLine_Yes_en(idLevel3_IsAirInLine_2, false);
		

	(idLevel3_IsAirInLine) 
	=  (idLevel3_IsAirInLine_3);


	tel

	until true restart POINTLevel3_IsAirInLine



	state ISAIRINLINE_YES_IDL:

	 	let

		

	(idLevel3_IsAirInLine) 
	= (idLevel3_IsAirInLine_1);
	

	tel

	until true restart POINTLevel3_IsAirInLine



	state ISAIRINLINE_NO_IDL:

	 	let

		

	(idLevel3_IsAirInLine) 
	= (idLevel3_IsAirInLine_1);
	

	tel

	until true restart POINTLevel3_IsAirInLine



tel


--***************************************************State :Level3_IsOverInfusionVTBI Automaton***************************************************

node Level3_IsOverInfusionVTBI_node(idLevel3_IsOverInfusionVTBI_1:int;
	SYS_STAT_IN_In_Therapy:bool;
	SYS_STAT_IN_Volume_Infused:int;
	DB_IN_VTBI_High:int;
	cancelAlarm_1:int)

returns (idLevel3_IsOverInfusionVTBI:int);


let

	 automaton level3_isoverinfusionvtbi

	state POINTLevel3_IsOverInfusionVTBI:
	unless (idLevel3_IsOverInfusionVTBI_1=0) and ( SYS_STAT_IN_In_Therapy and SYS_STAT_IN_Volume_Infused>DB_IN_VTBI_High ) restart POINT__TO__ISOVERINFUSIONVTBI_YES_1



	unless (idLevel3_IsOverInfusionVTBI_1=0) restart POINT__TO__ISOVERINFUSIONVTBI_NO_2



	unless (idLevel3_IsOverInfusionVTBI_1=812) and ( SYS_STAT_IN_In_Therapy and SYS_STAT_IN_Volume_Infused>DB_IN_VTBI_High ) restart ISOVERINFUSIONVTBI_YES__TO__ISOVERINFUSIONVTBI_YES_1



	unless (idLevel3_IsOverInfusionVTBI_1=812) and (  cancelAlarm_1 =5 ) restart ISOVERINFUSIONVTBI_YES__TO__ISOVERINFUSIONVTBI_NO_2



	unless (idLevel3_IsOverInfusionVTBI_1=813) and ( SYS_STAT_IN_In_Therapy and SYS_STAT_IN_Volume_Infused>DB_IN_VTBI_High ) restart ISOVERINFUSIONVTBI_NO__TO__ISOVERINFUSIONVTBI_YES_1



	unless (idLevel3_IsOverInfusionVTBI_1=812) restart ISOVERINFUSIONVTBI_YES_IDL

	unless (idLevel3_IsOverInfusionVTBI_1=813) restart ISOVERINFUSIONVTBI_NO_IDL

	let

		(idLevel3_IsOverInfusionVTBI) 
	= (idLevel3_IsOverInfusionVTBI_1);
	

	tel



	state POINT__TO__ISOVERINFUSIONVTBI_YES_1:

	 var 	idLevel3_IsOverInfusionVTBI_2:int;
	let

		-- transition trace :
	--POINT__To__IsOverInfusionVTBI_Yes_1
		(idLevel3_IsOverInfusionVTBI_2) 
	= IsOverInfusionVTBI_Yes_en(idLevel3_IsOverInfusionVTBI_1, false);
		

	(idLevel3_IsOverInfusionVTBI) 
	=  (idLevel3_IsOverInfusionVTBI_2);


	tel

	until true restart POINTLevel3_IsOverInfusionVTBI



	state POINT__TO__ISOVERINFUSIONVTBI_NO_2:

	 var 	idLevel3_IsOverInfusionVTBI_2:int;
	let

		-- transition trace :
	--POINT__To__IsOverInfusionVTBI_No_2
		(idLevel3_IsOverInfusionVTBI_2) 
	= IsOverInfusionVTBI_No_en(idLevel3_IsOverInfusionVTBI_1, false);
		

	(idLevel3_IsOverInfusionVTBI) 
	=  (idLevel3_IsOverInfusionVTBI_2);


	tel

	until true restart POINTLevel3_IsOverInfusionVTBI



	state ISOVERINFUSIONVTBI_YES__TO__ISOVERINFUSIONVTBI_YES_1:

	 var 	idLevel3_IsOverInfusionVTBI_2, idLevel3_IsOverInfusionVTBI_3:int;
	let

		-- transition trace :
	--IsOverInfusionVTBI_Yes__To__IsOverInfusionVTBI_Yes_1
		(idLevel3_IsOverInfusionVTBI_2) 
	= IsOverInfusionVTBI_Yes_ex(idLevel3_IsOverInfusionVTBI_1, false);
		

		(idLevel3_IsOverInfusionVTBI_3) 
	= IsOverInfusionVTBI_Yes_en(idLevel3_IsOverInfusionVTBI_2, false);
		

	(idLevel3_IsOverInfusionVTBI) 
	=  (idLevel3_IsOverInfusionVTBI_3);


	tel

	until true restart POINTLevel3_IsOverInfusionVTBI



	state ISOVERINFUSIONVTBI_YES__TO__ISOVERINFUSIONVTBI_NO_2:

	 var 	idLevel3_IsOverInfusionVTBI_2, idLevel3_IsOverInfusionVTBI_3:int;
	let

		-- transition trace :
	--IsOverInfusionVTBI_Yes__To__IsOverInfusionVTBI_No_2
		(idLevel3_IsOverInfusionVTBI_2) 
	= IsOverInfusionVTBI_Yes_ex(idLevel3_IsOverInfusionVTBI_1, false);
		

		(idLevel3_IsOverInfusionVTBI_3) 
	= IsOverInfusionVTBI_No_en(idLevel3_IsOverInfusionVTBI_2, false);
		

	(idLevel3_IsOverInfusionVTBI) 
	=  (idLevel3_IsOverInfusionVTBI_3);


	tel

	until true restart POINTLevel3_IsOverInfusionVTBI



	state ISOVERINFUSIONVTBI_NO__TO__ISOVERINFUSIONVTBI_YES_1:

	 var 	idLevel3_IsOverInfusionVTBI_2, idLevel3_IsOverInfusionVTBI_3:int;
	let

		-- transition trace :
	--IsOverInfusionVTBI_No__To__IsOverInfusionVTBI_Yes_1
		(idLevel3_IsOverInfusionVTBI_2) 
	= IsOverInfusionVTBI_No_ex(idLevel3_IsOverInfusionVTBI_1, false);
		

		(idLevel3_IsOverInfusionVTBI_3) 
	= IsOverInfusionVTBI_Yes_en(idLevel3_IsOverInfusionVTBI_2, false);
		

	(idLevel3_IsOverInfusionVTBI) 
	=  (idLevel3_IsOverInfusionVTBI_3);


	tel

	until true restart POINTLevel3_IsOverInfusionVTBI



	state ISOVERINFUSIONVTBI_YES_IDL:

	 	let

		

	(idLevel3_IsOverInfusionVTBI) 
	= (idLevel3_IsOverInfusionVTBI_1);
	

	tel

	until true restart POINTLevel3_IsOverInfusionVTBI



	state ISOVERINFUSIONVTBI_NO_IDL:

	 	let

		

	(idLevel3_IsOverInfusionVTBI) 
	= (idLevel3_IsOverInfusionVTBI_1);
	

	tel

	until true restart POINTLevel3_IsOverInfusionVTBI



tel


--***************************************************State :Level3_IsOverInfusionFlowRate Automaton***************************************************

node Level3_IsOverInfusionFlowRate_node(idLevel3_IsOverInfusionFlowRate_1:int;
	overInfusion_1:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_High:int;
	IM_IN_Flow_Rate_Commanded:int;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SYS_STAT_IN_In_Therapy:bool;
	cancelAlarm_1:int;
	overInfusionTimer_1:int;
	CONST_IN_Max_Duration_Over_Infusion:int;
	step_size:real)

returns (idLevel3_IsOverInfusionFlowRate:int;
	overInfusion:int;
	overInfusionTimer:int);


let

	 automaton level3_isoverinfusionflowrate

	state POINTLevel3_IsOverInfusionFlowRate:
	unless (idLevel3_IsOverInfusionFlowRate_1=0) and (  overInfusion_1 =1 ) restart POINT__TO__ISOVERINFUSIONFLOWRATE_YES_1



	unless (idLevel3_IsOverInfusionFlowRate_1=0) and (  overInfusion_1 =2 ) restart POINT__TO__ISOVERINFUSIONFLOWRATE_MONITOR_2



	unless (idLevel3_IsOverInfusionFlowRate_1=0) restart POINT__TO__ISOVERINFUSIONFLOWRATE_CHECK_3



	unless (idLevel3_IsOverInfusionFlowRate_1=807) and (  overInfusion_1 =1 ) restart ISOVERINFUSIONFLOWRATE_YES__TO__ISOVERINFUSIONFLOWRATE_YES_1



	unless (idLevel3_IsOverInfusionFlowRate_1=807) and (  cancelAlarm_1 =4 ) restart ISOVERINFUSIONFLOWRATE_YES__TO__ISOVERINFUSIONFLOWRATE_CHECK_2



	unless (idLevel3_IsOverInfusionFlowRate_1=808) and (  overInfusion_1 =1 ) restart ISOVERINFUSIONFLOWRATE_CHECK__TO__ISOVERINFUSIONFLOWRATE_YES_1



	unless (idLevel3_IsOverInfusionFlowRate_1=808) and (  overInfusion_1 =2 ) restart ISOVERINFUSIONFLOWRATE_CHECK__TO__ISOVERINFUSIONFLOWRATE_MONITOR_2



	unless (idLevel3_IsOverInfusionFlowRate_1=809) and (  overInfusion_1 =1 or  overInfusionTimer_1 >Step_Scaling_Factor(CONST_IN_Max_Duration_Over_Infusion,step_size) ) restart ISOVERINFUSIONFLOWRATE_MONITOR__TO__ISOVERINFUSIONFLOWRATE_YES_1



	unless (idLevel3_IsOverInfusionFlowRate_1=809) and (  overInfusion_1 =0 ) restart ISOVERINFUSIONFLOWRATE_MONITOR__TO__ISOVERINFUSIONFLOWRATE_CHECK_2



	unless (idLevel3_IsOverInfusionFlowRate_1=809) and (  overInfusion_1 =2 ) restart ISOVERINFUSIONFLOWRATE_MONITOR__TO__ISOVERINFUSIONFLOWRATE_MONITOR_3



	unless (idLevel3_IsOverInfusionFlowRate_1=807) restart ISOVERINFUSIONFLOWRATE_YES_IDL

	unless (idLevel3_IsOverInfusionFlowRate_1=808) restart ISOVERINFUSIONFLOWRATE_CHECK_IDL

	unless (idLevel3_IsOverInfusionFlowRate_1=809) restart ISOVERINFUSIONFLOWRATE_MONITOR_IDL

	let

		(idLevel3_IsOverInfusionFlowRate, overInfusion, overInfusionTimer) 
	= (idLevel3_IsOverInfusionFlowRate_1, overInfusion_1, overInfusionTimer_1);
	

	tel



	state POINT__TO__ISOVERINFUSIONFLOWRATE_YES_1:

	 var 	idLevel3_IsOverInfusionFlowRate_2:int;
	overInfusion_2:int;
	let

		-- transition trace :
	--POINT__To__IsOverInfusionFlowRate_Yes_1
		(idLevel3_IsOverInfusionFlowRate_2, overInfusion_2) 
	= IsOverInfusionFlowRate_Yes_en(idLevel3_IsOverInfusionFlowRate_1, overInfusion_1, false);
		

	(idLevel3_IsOverInfusionFlowRate, overInfusion) 
	=  (idLevel3_IsOverInfusionFlowRate_2, overInfusion_2);

	--add unused variables
	(overInfusionTimer) 
	= (overInfusionTimer_1);
	

	tel

	until true restart POINTLevel3_IsOverInfusionFlowRate



	state POINT__TO__ISOVERINFUSIONFLOWRATE_MONITOR_2:

	 var 	idLevel3_IsOverInfusionFlowRate_2:int;
	overInfusion_2:int;
	let

		-- transition trace :
	--POINT__To__IsOverInfusionFlowRate_Monitor_2
		(idLevel3_IsOverInfusionFlowRate_2, overInfusion_2) 
	= IsOverInfusionFlowRate_Monitor_en(idLevel3_IsOverInfusionFlowRate_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, overInfusion_1, false);
		

	(idLevel3_IsOverInfusionFlowRate, overInfusion) 
	=  (idLevel3_IsOverInfusionFlowRate_2, overInfusion_2);

	--add unused variables
	(overInfusionTimer) 
	= (overInfusionTimer_1);
	

	tel

	until true restart POINTLevel3_IsOverInfusionFlowRate



	state POINT__TO__ISOVERINFUSIONFLOWRATE_CHECK_3:

	 var 	idLevel3_IsOverInfusionFlowRate_2:int;
	overInfusion_2:int;
	let

		-- transition trace :
	--POINT__To__IsOverInfusionFlowRate_Check_3
		(idLevel3_IsOverInfusionFlowRate_2, overInfusion_2) 
	= IsOverInfusionFlowRate_Check_en(idLevel3_IsOverInfusionFlowRate_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, overInfusion_1, false);
		

	(idLevel3_IsOverInfusionFlowRate, overInfusion) 
	=  (idLevel3_IsOverInfusionFlowRate_2, overInfusion_2);

	--add unused variables
	(overInfusionTimer) 
	= (overInfusionTimer_1);
	

	tel

	until true restart POINTLevel3_IsOverInfusionFlowRate



	state ISOVERINFUSIONFLOWRATE_YES__TO__ISOVERINFUSIONFLOWRATE_YES_1:

	 var 	idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionFlowRate_3:int;
	overInfusion_2:int;
	let

		-- transition trace :
	--IsOverInfusionFlowRate_Yes__To__IsOverInfusionFlowRate_Yes_1
		(idLevel3_IsOverInfusionFlowRate_2) 
	= IsOverInfusionFlowRate_Yes_ex(idLevel3_IsOverInfusionFlowRate_1, false);
		

		(idLevel3_IsOverInfusionFlowRate_3, overInfusion_2) 
	= IsOverInfusionFlowRate_Yes_en(idLevel3_IsOverInfusionFlowRate_2, overInfusion_1, false);
		

	(idLevel3_IsOverInfusionFlowRate, overInfusion) 
	=  (idLevel3_IsOverInfusionFlowRate_3, overInfusion_2);

	--add unused variables
	(overInfusionTimer) 
	= (overInfusionTimer_1);
	

	tel

	until true restart POINTLevel3_IsOverInfusionFlowRate



	state ISOVERINFUSIONFLOWRATE_YES__TO__ISOVERINFUSIONFLOWRATE_CHECK_2:

	 var 	idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionFlowRate_3:int;
	overInfusion_2:int;
	let

		-- transition trace :
	--IsOverInfusionFlowRate_Yes__To__IsOverInfusionFlowRate_Check_2
		(idLevel3_IsOverInfusionFlowRate_2) 
	= IsOverInfusionFlowRate_Yes_ex(idLevel3_IsOverInfusionFlowRate_1, false);
		

		(idLevel3_IsOverInfusionFlowRate_3, overInfusion_2) 
	= IsOverInfusionFlowRate_Check_en(idLevel3_IsOverInfusionFlowRate_2, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, overInfusion_1, false);
		

	(idLevel3_IsOverInfusionFlowRate, overInfusion) 
	=  (idLevel3_IsOverInfusionFlowRate_3, overInfusion_2);

	--add unused variables
	(overInfusionTimer) 
	= (overInfusionTimer_1);
	

	tel

	until true restart POINTLevel3_IsOverInfusionFlowRate



	state ISOVERINFUSIONFLOWRATE_CHECK__TO__ISOVERINFUSIONFLOWRATE_YES_1:

	 var 	idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionFlowRate_3:int;
	overInfusion_2, overInfusion_3:int;
	let

		-- transition trace :
	--IsOverInfusionFlowRate_Check__To__IsOverInfusionFlowRate_Yes_1
		(overInfusion_2, idLevel3_IsOverInfusionFlowRate_2) 
	= IsOverInfusionFlowRate_Check_ex(overInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, idLevel3_IsOverInfusionFlowRate_1, false);
		

		(idLevel3_IsOverInfusionFlowRate_3, overInfusion_3) 
	= IsOverInfusionFlowRate_Yes_en(idLevel3_IsOverInfusionFlowRate_2, overInfusion_2, false);
		

	(idLevel3_IsOverInfusionFlowRate, overInfusion) 
	=  (idLevel3_IsOverInfusionFlowRate_3, overInfusion_3);

	--add unused variables
	(overInfusionTimer) 
	= (overInfusionTimer_1);
	

	tel

	until true restart POINTLevel3_IsOverInfusionFlowRate



	state ISOVERINFUSIONFLOWRATE_CHECK__TO__ISOVERINFUSIONFLOWRATE_MONITOR_2:

	 var 	idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionFlowRate_3:int;
	overInfusion_2, overInfusion_3:int;
	overInfusionTimer_2:int;
	let

		-- transition trace :
	--IsOverInfusionFlowRate_Check__To__IsOverInfusionFlowRate_Monitor_2
		-- condition Action : overInfusionTimer=0;
		
		(overInfusionTimer_2) 
	= IsOverInfusionFlowRate_Check__To__IsOverInfusionFlowRate_Monitor_2_Condition_Action(overInfusionTimer_1);
		

		(overInfusion_2, idLevel3_IsOverInfusionFlowRate_2) 
	= IsOverInfusionFlowRate_Check_ex(overInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, idLevel3_IsOverInfusionFlowRate_1, false);
		

		(idLevel3_IsOverInfusionFlowRate_3, overInfusion_3) 
	= IsOverInfusionFlowRate_Monitor_en(idLevel3_IsOverInfusionFlowRate_2, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, overInfusion_2, false);
		

	(idLevel3_IsOverInfusionFlowRate, overInfusion, overInfusionTimer) 
	=  (idLevel3_IsOverInfusionFlowRate_3, overInfusion_3, overInfusionTimer_2);


	tel

	until true restart POINTLevel3_IsOverInfusionFlowRate



	state ISOVERINFUSIONFLOWRATE_MONITOR__TO__ISOVERINFUSIONFLOWRATE_YES_1:

	 var 	idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionFlowRate_3:int;
	overInfusion_2, overInfusion_3:int;
	overInfusionTimer_2:int;
	let

		-- transition trace :
	--IsOverInfusionFlowRate_Monitor__To__IsOverInfusionFlowRate_Yes_1
		-- condition Action : overInfusionTimer=0;
		
		(overInfusionTimer_2) 
	= IsOverInfusionFlowRate_Monitor__To__IsOverInfusionFlowRate_Yes_1_Condition_Action(overInfusionTimer_1);
		

		(overInfusion_2, idLevel3_IsOverInfusionFlowRate_2) 
	= IsOverInfusionFlowRate_Monitor_ex(overInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, idLevel3_IsOverInfusionFlowRate_1, false);
		

		(idLevel3_IsOverInfusionFlowRate_3, overInfusion_3) 
	= IsOverInfusionFlowRate_Yes_en(idLevel3_IsOverInfusionFlowRate_2, overInfusion_2, false);
		

	(idLevel3_IsOverInfusionFlowRate, overInfusion, overInfusionTimer) 
	=  (idLevel3_IsOverInfusionFlowRate_3, overInfusion_3, overInfusionTimer_2);


	tel

	until true restart POINTLevel3_IsOverInfusionFlowRate



	state ISOVERINFUSIONFLOWRATE_MONITOR__TO__ISOVERINFUSIONFLOWRATE_CHECK_2:

	 var 	idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionFlowRate_3:int;
	overInfusion_2, overInfusion_3:int;
	overInfusionTimer_2:int;
	let

		-- transition trace :
	--IsOverInfusionFlowRate_Monitor__To__IsOverInfusionFlowRate_Check_2
		-- condition Action : overInfusionTimer=0;
		
		(overInfusionTimer_2) 
	= IsOverInfusionFlowRate_Monitor__To__IsOverInfusionFlowRate_Check_2_Condition_Action(overInfusionTimer_1);
		

		(overInfusion_2, idLevel3_IsOverInfusionFlowRate_2) 
	= IsOverInfusionFlowRate_Monitor_ex(overInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, idLevel3_IsOverInfusionFlowRate_1, false);
		

		(idLevel3_IsOverInfusionFlowRate_3, overInfusion_3) 
	= IsOverInfusionFlowRate_Check_en(idLevel3_IsOverInfusionFlowRate_2, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, overInfusion_2, false);
		

	(idLevel3_IsOverInfusionFlowRate, overInfusion, overInfusionTimer) 
	=  (idLevel3_IsOverInfusionFlowRate_3, overInfusion_3, overInfusionTimer_2);


	tel

	until true restart POINTLevel3_IsOverInfusionFlowRate



	state ISOVERINFUSIONFLOWRATE_MONITOR__TO__ISOVERINFUSIONFLOWRATE_MONITOR_3:

	 var 	idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionFlowRate_3:int;
	overInfusion_2, overInfusion_3:int;
	overInfusionTimer_2:int;
	let

		-- transition trace :
	--IsOverInfusionFlowRate_Monitor__To__IsOverInfusionFlowRate_Monitor_3
		-- condition Action : overInfusionTimer++;
		
		(overInfusionTimer_2) 
	= IsOverInfusionFlowRate_Monitor__To__IsOverInfusionFlowRate_Monitor_3_Condition_Action(overInfusionTimer_1);
		

		(overInfusion_2, idLevel3_IsOverInfusionFlowRate_2) 
	= IsOverInfusionFlowRate_Monitor_ex(overInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, idLevel3_IsOverInfusionFlowRate_1, false);
		

		(idLevel3_IsOverInfusionFlowRate_3, overInfusion_3) 
	= IsOverInfusionFlowRate_Monitor_en(idLevel3_IsOverInfusionFlowRate_2, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, overInfusion_2, false);
		

	(idLevel3_IsOverInfusionFlowRate, overInfusion, overInfusionTimer) 
	=  (idLevel3_IsOverInfusionFlowRate_3, overInfusion_3, overInfusionTimer_2);


	tel

	until true restart POINTLevel3_IsOverInfusionFlowRate



	state ISOVERINFUSIONFLOWRATE_YES_IDL:

	 var 	overInfusion_2:int;
	let

		
	(overInfusion_2) 
	= IsOverInfusionFlowRate_Yes_du(overInfusion_1);

		


	(idLevel3_IsOverInfusionFlowRate, overInfusion, overInfusionTimer) 
	= (idLevel3_IsOverInfusionFlowRate_1, overInfusion_2, overInfusionTimer_1);
	

	tel

	until true restart POINTLevel3_IsOverInfusionFlowRate



	state ISOVERINFUSIONFLOWRATE_CHECK_IDL:

	 var 	overInfusion_2:int;
	let

		
	(overInfusion_2) 
	= IsOverInfusionFlowRate_Check_du(overInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min);

		


	(idLevel3_IsOverInfusionFlowRate, overInfusion, overInfusionTimer) 
	= (idLevel3_IsOverInfusionFlowRate_1, overInfusion_2, overInfusionTimer_1);
	

	tel

	until true restart POINTLevel3_IsOverInfusionFlowRate



	state ISOVERINFUSIONFLOWRATE_MONITOR_IDL:

	 var 	overInfusion_2:int;
	let

		
	(overInfusion_2) 
	= IsOverInfusionFlowRate_Monitor_du(overInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min);

		


	(idLevel3_IsOverInfusionFlowRate, overInfusion, overInfusionTimer) 
	= (idLevel3_IsOverInfusionFlowRate_1, overInfusion_2, overInfusionTimer_1);
	

	tel

	until true restart POINTLevel3_IsOverInfusionFlowRate



tel


--***************************************************State :Level4_IsEnviromentalError Automaton***************************************************

node Level4_IsEnviromentalError_node(idLevel4_IsEnviromentalError_1:int;
	SENSOR_IN_Temperature_Out_Of_Range:bool;
	SENSOR_IN_Humidity_Out_Of_Range:bool;
	SENSOR_IN_Air_Pressure_Out_Of_Range:bool;
	cancelAlarm_1:int)

returns (idLevel4_IsEnviromentalError:int);


let

	 automaton level4_isenviromentalerror

	state POINTLevel4_IsEnviromentalError:
	unless (idLevel4_IsEnviromentalError_1=0) and ( SENSOR_IN_Temperature_Out_Of_Range or SENSOR_IN_Humidity_Out_Of_Range or SENSOR_IN_Air_Pressure_Out_Of_Range ) restart POINT__TO__ISENVIROMENTALERROR_YES_1



	unless (idLevel4_IsEnviromentalError_1=0) restart POINT__TO__ISENVIROMENTALERROR_NO_2



	unless (idLevel4_IsEnviromentalError_1=803) and (  cancelAlarm_1 =3 and not (SENSOR_IN_Temperature_Out_Of_Range or SENSOR_IN_Humidity_Out_Of_Range or SENSOR_IN_Air_Pressure_Out_Of_Range) ) restart ISENVIROMENTALERROR_YES__TO__ISENVIROMENTALERROR_NO_1



	unless (idLevel4_IsEnviromentalError_1=804) and ( SENSOR_IN_Temperature_Out_Of_Range or SENSOR_IN_Humidity_Out_Of_Range or SENSOR_IN_Air_Pressure_Out_Of_Range ) restart ISENVIROMENTALERROR_NO__TO__ISENVIROMENTALERROR_YES_1



	unless (idLevel4_IsEnviromentalError_1=803) restart ISENVIROMENTALERROR_YES_IDL

	unless (idLevel4_IsEnviromentalError_1=804) restart ISENVIROMENTALERROR_NO_IDL

	let

		(idLevel4_IsEnviromentalError) 
	= (idLevel4_IsEnviromentalError_1);
	

	tel



	state POINT__TO__ISENVIROMENTALERROR_YES_1:

	 var 	idLevel4_IsEnviromentalError_2:int;
	let

		-- transition trace :
	--POINT__To__IsEnviromentalError_Yes_1
		(idLevel4_IsEnviromentalError_2) 
	= IsEnviromentalError_Yes_en(idLevel4_IsEnviromentalError_1, false);
		

	(idLevel4_IsEnviromentalError) 
	=  (idLevel4_IsEnviromentalError_2);


	tel

	until true restart POINTLevel4_IsEnviromentalError



	state POINT__TO__ISENVIROMENTALERROR_NO_2:

	 var 	idLevel4_IsEnviromentalError_2:int;
	let

		-- transition trace :
	--POINT__To__IsEnviromentalError_No_2
		(idLevel4_IsEnviromentalError_2) 
	= IsEnviromentalError_No_en(idLevel4_IsEnviromentalError_1, false);
		

	(idLevel4_IsEnviromentalError) 
	=  (idLevel4_IsEnviromentalError_2);


	tel

	until true restart POINTLevel4_IsEnviromentalError



	state ISENVIROMENTALERROR_YES__TO__ISENVIROMENTALERROR_NO_1:

	 var 	idLevel4_IsEnviromentalError_2, idLevel4_IsEnviromentalError_3:int;
	let

		-- transition trace :
	--IsEnviromentalError_Yes__To__IsEnviromentalError_No_1
		(idLevel4_IsEnviromentalError_2) 
	= IsEnviromentalError_Yes_ex(idLevel4_IsEnviromentalError_1, false);
		

		(idLevel4_IsEnviromentalError_3) 
	= IsEnviromentalError_No_en(idLevel4_IsEnviromentalError_2, false);
		

	(idLevel4_IsEnviromentalError) 
	=  (idLevel4_IsEnviromentalError_3);


	tel

	until true restart POINTLevel4_IsEnviromentalError



	state ISENVIROMENTALERROR_NO__TO__ISENVIROMENTALERROR_YES_1:

	 var 	idLevel4_IsEnviromentalError_2, idLevel4_IsEnviromentalError_3:int;
	let

		-- transition trace :
	--IsEnviromentalError_No__To__IsEnviromentalError_Yes_1
		(idLevel4_IsEnviromentalError_2) 
	= IsEnviromentalError_No_ex(idLevel4_IsEnviromentalError_1, false);
		

		(idLevel4_IsEnviromentalError_3) 
	= IsEnviromentalError_Yes_en(idLevel4_IsEnviromentalError_2, false);
		

	(idLevel4_IsEnviromentalError) 
	=  (idLevel4_IsEnviromentalError_3);


	tel

	until true restart POINTLevel4_IsEnviromentalError



	state ISENVIROMENTALERROR_YES_IDL:

	 	let

		

	(idLevel4_IsEnviromentalError) 
	= (idLevel4_IsEnviromentalError_1);
	

	tel

	until true restart POINTLevel4_IsEnviromentalError



	state ISENVIROMENTALERROR_NO_IDL:

	 	let

		

	(idLevel4_IsEnviromentalError) 
	= (idLevel4_IsEnviromentalError_1);
	

	tel

	until true restart POINTLevel4_IsEnviromentalError



tel


--***************************************************State :Level4_IsHardwareError Automaton***************************************************

node Level4_IsHardwareError_node(idLevel4_IsHardwareError_1:int;
	SENSOR_IN_Battery_Depleted:bool;
	SENSOR_IN_RTC_Error:bool;
	SENSOR_IN_CPU_Error:bool;
	SENSOR_IN_Memory_Corrupted:bool;
	SENSOR_IN_Pump_Too_Hot:bool;
	SENSOR_IN_WatchDog_Interrupt_Detected:bool;
	cancelAlarm_1:int)

returns (idLevel4_IsHardwareError:int);


let

	 automaton level4_ishardwareerror

	state POINTLevel4_IsHardwareError:
	unless (idLevel4_IsHardwareError_1=0) and ( SENSOR_IN_Battery_Depleted or SENSOR_IN_RTC_Error or SENSOR_IN_CPU_Error or SENSOR_IN_Memory_Corrupted or SENSOR_IN_Pump_Too_Hot or SENSOR_IN_WatchDog_Interrupt_Detected ) restart POINT__TO__ISHARDWAREERROR_YES_1



	unless (idLevel4_IsHardwareError_1=0) restart POINT__TO__ISHARDWAREERROR_NO_2



	unless (idLevel4_IsHardwareError_1=800) and (  cancelAlarm_1 =2 and not (SENSOR_IN_Battery_Depleted or SENSOR_IN_RTC_Error or SENSOR_IN_CPU_Error or SENSOR_IN_Memory_Corrupted or SENSOR_IN_Pump_Too_Hot or SENSOR_IN_WatchDog_Interrupt_Detected) ) restart ISHARDWAREERROR_YES__TO__ISHARDWAREERROR_NO_1



	unless (idLevel4_IsHardwareError_1=801) and ( SENSOR_IN_Battery_Depleted or SENSOR_IN_RTC_Error or SENSOR_IN_CPU_Error or SENSOR_IN_Memory_Corrupted or SENSOR_IN_Pump_Too_Hot or SENSOR_IN_WatchDog_Interrupt_Detected ) restart ISHARDWAREERROR_NO__TO__ISHARDWAREERROR_YES_1



	unless (idLevel4_IsHardwareError_1=800) restart ISHARDWAREERROR_YES_IDL

	unless (idLevel4_IsHardwareError_1=801) restart ISHARDWAREERROR_NO_IDL

	let

		(idLevel4_IsHardwareError) 
	= (idLevel4_IsHardwareError_1);
	

	tel



	state POINT__TO__ISHARDWAREERROR_YES_1:

	 var 	idLevel4_IsHardwareError_2:int;
	let

		-- transition trace :
	--POINT__To__IsHardwareError_Yes_1
		(idLevel4_IsHardwareError_2) 
	= IsHardwareError_Yes_en(idLevel4_IsHardwareError_1, false);
		

	(idLevel4_IsHardwareError) 
	=  (idLevel4_IsHardwareError_2);


	tel

	until true restart POINTLevel4_IsHardwareError



	state POINT__TO__ISHARDWAREERROR_NO_2:

	 var 	idLevel4_IsHardwareError_2:int;
	let

		-- transition trace :
	--POINT__To__IsHardwareError_No_2
		(idLevel4_IsHardwareError_2) 
	= IsHardwareError_No_en(idLevel4_IsHardwareError_1, false);
		

	(idLevel4_IsHardwareError) 
	=  (idLevel4_IsHardwareError_2);


	tel

	until true restart POINTLevel4_IsHardwareError



	state ISHARDWAREERROR_YES__TO__ISHARDWAREERROR_NO_1:

	 var 	idLevel4_IsHardwareError_2, idLevel4_IsHardwareError_3:int;
	let

		-- transition trace :
	--IsHardwareError_Yes__To__IsHardwareError_No_1
		(idLevel4_IsHardwareError_2) 
	= IsHardwareError_Yes_ex(idLevel4_IsHardwareError_1, false);
		

		(idLevel4_IsHardwareError_3) 
	= IsHardwareError_No_en(idLevel4_IsHardwareError_2, false);
		

	(idLevel4_IsHardwareError) 
	=  (idLevel4_IsHardwareError_3);


	tel

	until true restart POINTLevel4_IsHardwareError



	state ISHARDWAREERROR_NO__TO__ISHARDWAREERROR_YES_1:

	 var 	idLevel4_IsHardwareError_2, idLevel4_IsHardwareError_3:int;
	let

		-- transition trace :
	--IsHardwareError_No__To__IsHardwareError_Yes_1
		(idLevel4_IsHardwareError_2) 
	= IsHardwareError_No_ex(idLevel4_IsHardwareError_1, false);
		

		(idLevel4_IsHardwareError_3) 
	= IsHardwareError_Yes_en(idLevel4_IsHardwareError_2, false);
		

	(idLevel4_IsHardwareError) 
	=  (idLevel4_IsHardwareError_3);


	tel

	until true restart POINTLevel4_IsHardwareError



	state ISHARDWAREERROR_YES_IDL:

	 	let

		

	(idLevel4_IsHardwareError) 
	= (idLevel4_IsHardwareError_1);
	

	tel

	until true restart POINTLevel4_IsHardwareError



	state ISHARDWAREERROR_NO_IDL:

	 	let

		

	(idLevel4_IsHardwareError) 
	= (idLevel4_IsHardwareError_1);
	

	tel

	until true restart POINTLevel4_IsHardwareError



tel


--***************************************************State :Level4_IsEmptyReservoir Automaton***************************************************

node Level4_IsEmptyReservoir_node(idLevel4_IsEmptyReservoir_1:int;
	SYS_STAT_IN_In_Therapy:bool;
	SYS_STAT_IN_Reservoir_Empty:bool;
	cancelAlarm_1:int)

returns (idLevel4_IsEmptyReservoir:int);


let

	 automaton level4_isemptyreservoir

	state POINTLevel4_IsEmptyReservoir:
	unless (idLevel4_IsEmptyReservoir_1=0) and ( SYS_STAT_IN_In_Therapy and SYS_STAT_IN_Reservoir_Empty ) restart POINT__TO__ISEMPTYRESERVOIR_YES_1



	unless (idLevel4_IsEmptyReservoir_1=0) restart POINT__TO__ISEMPTYRESERVOIR_NO_2



	unless (idLevel4_IsEmptyReservoir_1=797) and ( SYS_STAT_IN_In_Therapy and SYS_STAT_IN_Reservoir_Empty ) restart ISEMPTYRESERVOIR_NO__TO__ISEMPTYRESERVOIR_YES_1



	unless (idLevel4_IsEmptyReservoir_1=798) and ( SYS_STAT_IN_In_Therapy and SYS_STAT_IN_Reservoir_Empty ) restart ISEMPTYRESERVOIR_YES__TO__ISEMPTYRESERVOIR_YES_1



	unless (idLevel4_IsEmptyReservoir_1=798) and (  cancelAlarm_1 =1 and not SYS_STAT_IN_Reservoir_Empty ) restart ISEMPTYRESERVOIR_YES__TO__ISEMPTYRESERVOIR_NO_2



	unless (idLevel4_IsEmptyReservoir_1=797) restart ISEMPTYRESERVOIR_NO_IDL

	unless (idLevel4_IsEmptyReservoir_1=798) restart ISEMPTYRESERVOIR_YES_IDL

	let

		(idLevel4_IsEmptyReservoir) 
	= (idLevel4_IsEmptyReservoir_1);
	

	tel



	state POINT__TO__ISEMPTYRESERVOIR_YES_1:

	 var 	idLevel4_IsEmptyReservoir_2:int;
	let

		-- transition trace :
	--POINT__To__IsEmptyReservoir_Yes_1
		(idLevel4_IsEmptyReservoir_2) 
	= IsEmptyReservoir_Yes_en(idLevel4_IsEmptyReservoir_1, false);
		

	(idLevel4_IsEmptyReservoir) 
	=  (idLevel4_IsEmptyReservoir_2);


	tel

	until true restart POINTLevel4_IsEmptyReservoir



	state POINT__TO__ISEMPTYRESERVOIR_NO_2:

	 var 	idLevel4_IsEmptyReservoir_2:int;
	let

		-- transition trace :
	--POINT__To__IsEmptyReservoir_No_2
		(idLevel4_IsEmptyReservoir_2) 
	= IsEmptyReservoir_No_en(idLevel4_IsEmptyReservoir_1, false);
		

	(idLevel4_IsEmptyReservoir) 
	=  (idLevel4_IsEmptyReservoir_2);


	tel

	until true restart POINTLevel4_IsEmptyReservoir



	state ISEMPTYRESERVOIR_NO__TO__ISEMPTYRESERVOIR_YES_1:

	 var 	idLevel4_IsEmptyReservoir_2, idLevel4_IsEmptyReservoir_3:int;
	let

		-- transition trace :
	--IsEmptyReservoir_No__To__IsEmptyReservoir_Yes_1
		(idLevel4_IsEmptyReservoir_2) 
	= IsEmptyReservoir_No_ex(idLevel4_IsEmptyReservoir_1, false);
		

		(idLevel4_IsEmptyReservoir_3) 
	= IsEmptyReservoir_Yes_en(idLevel4_IsEmptyReservoir_2, false);
		

	(idLevel4_IsEmptyReservoir) 
	=  (idLevel4_IsEmptyReservoir_3);


	tel

	until true restart POINTLevel4_IsEmptyReservoir



	state ISEMPTYRESERVOIR_YES__TO__ISEMPTYRESERVOIR_YES_1:

	 var 	idLevel4_IsEmptyReservoir_2, idLevel4_IsEmptyReservoir_3:int;
	let

		-- transition trace :
	--IsEmptyReservoir_Yes__To__IsEmptyReservoir_Yes_1
		(idLevel4_IsEmptyReservoir_2) 
	= IsEmptyReservoir_Yes_ex(idLevel4_IsEmptyReservoir_1, false);
		

		(idLevel4_IsEmptyReservoir_3) 
	= IsEmptyReservoir_Yes_en(idLevel4_IsEmptyReservoir_2, false);
		

	(idLevel4_IsEmptyReservoir) 
	=  (idLevel4_IsEmptyReservoir_3);


	tel

	until true restart POINTLevel4_IsEmptyReservoir



	state ISEMPTYRESERVOIR_YES__TO__ISEMPTYRESERVOIR_NO_2:

	 var 	idLevel4_IsEmptyReservoir_2, idLevel4_IsEmptyReservoir_3:int;
	let

		-- transition trace :
	--IsEmptyReservoir_Yes__To__IsEmptyReservoir_No_2
		(idLevel4_IsEmptyReservoir_2) 
	= IsEmptyReservoir_Yes_ex(idLevel4_IsEmptyReservoir_1, false);
		

		(idLevel4_IsEmptyReservoir_3) 
	= IsEmptyReservoir_No_en(idLevel4_IsEmptyReservoir_2, false);
		

	(idLevel4_IsEmptyReservoir) 
	=  (idLevel4_IsEmptyReservoir_3);


	tel

	until true restart POINTLevel4_IsEmptyReservoir



	state ISEMPTYRESERVOIR_NO_IDL:

	 	let

		

	(idLevel4_IsEmptyReservoir) 
	= (idLevel4_IsEmptyReservoir_1);
	

	tel

	until true restart POINTLevel4_IsEmptyReservoir



	state ISEMPTYRESERVOIR_YES_IDL:

	 	let

		

	(idLevel4_IsEmptyReservoir) 
	= (idLevel4_IsEmptyReservoir_1);
	

	tel

	until true restart POINTLevel4_IsEmptyReservoir



tel


--***************************************************State :Notification_Audio Automaton***************************************************

node Notification_Audio_node(idNotification_Audio_1:int;
	OP_CMD_IN_Disable_Audio:int;
	ALARM_OUT_Audio_Notification_Command_1:int;
	audioTimer_1:int;
	ALARM_OUT_Highest_Level_Alarm_1:int;
	CONST_IN_Audio_Level:int;
	CONST_IN_Audio_Auto_Enable_Duration:int;
	step_size:real)

returns (idNotification_Audio:int;
	ALARM_OUT_Audio_Notification_Command:int;
	audioTimer:int);


let

	 automaton notification_audio

	state POINTNotification_Audio:
	unless (idNotification_Audio_1=0) and ( OP_CMD_IN_Disable_Audio=1 ) restart POINT__TO__AUDIO_DISABLED_1



	unless (idNotification_Audio_1=0) and ( OP_CMD_IN_Disable_Audio=2 ) restart POINT__TO__AUDIO_SILENCED_2



	unless (idNotification_Audio_1=0) and (  ALARM_OUT_Highest_Level_Alarm_1 >2 and OP_CMD_IN_Disable_Audio=0 ) restart POINT__TO__AUDIO_ON_3



	unless (idNotification_Audio_1=0) restart POINT__TO__AUDIO_OFF_4



	unless (idNotification_Audio_1=866) and ( OP_CMD_IN_Disable_Audio=1 ) restart AUDIO_ON__TO__AUDIO_DISABLED_1



	unless (idNotification_Audio_1=866) restart AUDIO_ON__TO__ALARMSUBSYSTEM_ALARMSUBSYSTEMJUNCTION994_2



	unless (idNotification_Audio_1=866) and (  ALARM_OUT_Highest_Level_Alarm_1 >2 and OP_CMD_IN_Disable_Audio=0 ) restart AUDIO_ON__TO__AUDIO_ON_3



	unless (idNotification_Audio_1=866) restart AUDIO_ON__TO__AUDIO_OFF_4



	unless (idNotification_Audio_1=867) and ( OP_CMD_IN_Disable_Audio=1 ) restart AUDIO_OFF__TO__AUDIO_DISABLED_1



	unless (idNotification_Audio_1=867) restart AUDIO_OFF__TO__ALARMSUBSYSTEM_ALARMSUBSYSTEMJUNCTION994_2



	unless (idNotification_Audio_1=867) and (  ALARM_OUT_Highest_Level_Alarm_1 >2 and OP_CMD_IN_Disable_Audio=0 ) restart AUDIO_OFF__TO__AUDIO_ON_3



	unless (idNotification_Audio_1=868) and ( OP_CMD_IN_Disable_Audio=1 ) restart AUDIO_SILENCED__TO__AUDIO_DISABLED_1



	unless (idNotification_Audio_1=868) restart AUDIO_SILENCED__TO__ALARMSUBSYSTEM_ALARMSUBSYSTEMJUNCTION996_2



	unless (idNotification_Audio_1=868) and ( ( audioTimer_1 >Step_Scaling_Factor(CONST_IN_Audio_Auto_Enable_Duration,step_size)) or OP_CMD_IN_Disable_Audio=0 ) restart AUDIO_SILENCED__TO__ALARMSUBSYSTEM_ALARMSUBSYSTEMJUNCTION995_3



	unless (idNotification_Audio_1=869) and ( OP_CMD_IN_Disable_Audio=2 ) restart AUDIO_DISABLED__TO__AUDIO_SILENCED_1



	unless (idNotification_Audio_1=869) restart AUDIO_DISABLED__TO__ALARMSUBSYSTEM_ALARMSUBSYSTEMJUNCTION996_2



	unless (idNotification_Audio_1=869) and ( OP_CMD_IN_Disable_Audio=0 ) restart AUDIO_DISABLED__TO__ALARMSUBSYSTEM_ALARMSUBSYSTEMJUNCTION995_3



	unless (idNotification_Audio_1=866) restart AUDIO_ON_IDL

	unless (idNotification_Audio_1=867) restart AUDIO_OFF_IDL

	unless (idNotification_Audio_1=868) restart AUDIO_SILENCED_IDL

	unless (idNotification_Audio_1=869) restart AUDIO_DISABLED_IDL

	let

		(idNotification_Audio, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	= (idNotification_Audio_1, ALARM_OUT_Audio_Notification_Command_1, audioTimer_1);
	

	tel



	state POINT__TO__AUDIO_DISABLED_1:

	 var 	idNotification_Audio_2:int;
	ALARM_OUT_Audio_Notification_Command_2:int;
	let

		-- transition trace :
	--POINT__To__Audio_Disabled_1
		(idNotification_Audio_2, ALARM_OUT_Audio_Notification_Command_2) 
	= Audio_Disabled_en(idNotification_Audio_1, ALARM_OUT_Audio_Notification_Command_1, false);
		

	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command) 
	=  (idNotification_Audio_2, ALARM_OUT_Audio_Notification_Command_2);

	--add unused variables
	(audioTimer) 
	= (audioTimer_1);
	

	tel

	until true restart POINTNotification_Audio



	state POINT__TO__AUDIO_SILENCED_2:

	 var 	idNotification_Audio_2:int;
	ALARM_OUT_Audio_Notification_Command_2:int;
	audioTimer_2:int;
	let

		-- transition trace :
	--POINT__To__Audio_Silenced_2
		(idNotification_Audio_2, audioTimer_2, ALARM_OUT_Audio_Notification_Command_2) 
	= Audio_Silenced_en(idNotification_Audio_1, audioTimer_1, ALARM_OUT_Audio_Notification_Command_1, false);
		

	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	=  (idNotification_Audio_2, ALARM_OUT_Audio_Notification_Command_2, audioTimer_2);


	tel

	until true restart POINTNotification_Audio



	state POINT__TO__AUDIO_ON_3:

	 var 	idNotification_Audio_2:int;
	ALARM_OUT_Audio_Notification_Command_2:int;
	let

		-- transition trace :
	--POINT__To__Audio_ON_3
		(idNotification_Audio_2, ALARM_OUT_Audio_Notification_Command_2) 
	= Audio_ON_en(idNotification_Audio_1, CONST_IN_Audio_Level, ALARM_OUT_Audio_Notification_Command_1, false);
		

	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	=  (idNotification_Audio_2, ALARM_OUT_Audio_Notification_Command_2, audioTimer_1);


	tel

	until true restart POINTNotification_Audio



	state POINT__TO__AUDIO_OFF_4:

	 var 	idNotification_Audio_2:int;
	ALARM_OUT_Audio_Notification_Command_2:int;
	let

		-- transition trace :
	--POINT__To__Audio_OFF_4
		(idNotification_Audio_2, ALARM_OUT_Audio_Notification_Command_2) 
	= Audio_OFF_en(idNotification_Audio_1, ALARM_OUT_Audio_Notification_Command_1, false);
		

	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	=  (idNotification_Audio_2, ALARM_OUT_Audio_Notification_Command_2, audioTimer_1);


	tel

	until true restart POINTNotification_Audio



	state AUDIO_ON__TO__AUDIO_DISABLED_1:

	 var 	idNotification_Audio_2, idNotification_Audio_3:int;
	ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Audio_Notification_Command_3:int;
	let

		-- transition trace :
	--Audio_ON__To__Audio_Disabled_1
		(ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2) 
	= Audio_ON_ex(CONST_IN_Audio_Level, ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1, false);
		

		(idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3) 
	= Audio_Disabled_en(idNotification_Audio_2, ALARM_OUT_Audio_Notification_Command_2, false);
		

	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	=  (idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3, audioTimer_1);


	tel

	until true restart POINTNotification_Audio



	state AUDIO_ON__TO__ALARMSUBSYSTEM_ALARMSUBSYSTEMJUNCTION994_2:

	 var 	idNotification_Audio_2, idNotification_Audio_3:int;
	ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Audio_Notification_Command_3:int;
	audioTimer_2:int;
	let

		

-- transition trace :
	--Audio_ON__To__Junction994_2, Junction994__To__Audio_Silenced_1
		(ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2) 
	= 
		 if (( OP_CMD_IN_Disable_Audio=2 )) then 
		Audio_ON_ex(CONST_IN_Audio_Level, ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1, false)
		 else (ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1);
		

		(idNotification_Audio_3, audioTimer_2, ALARM_OUT_Audio_Notification_Command_3) 
	= 
		 if (( OP_CMD_IN_Disable_Audio=2 )) then 
		Audio_Silenced_en(idNotification_Audio_2, audioTimer_1, ALARM_OUT_Audio_Notification_Command_2, false)
		 else (idNotification_Audio_2, audioTimer_1, ALARM_OUT_Audio_Notification_Command_2);
		

	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	= 
		 if (( OP_CMD_IN_Disable_Audio=2 )) then 
		(idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3, audioTimer_2)
		 else (idNotification_Audio_1, ALARM_OUT_Audio_Notification_Command_1, audioTimer_1);


	tel

	until true restart POINTNotification_Audio



	state AUDIO_ON__TO__AUDIO_ON_3:

	 var 	idNotification_Audio_2, idNotification_Audio_3:int;
	ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Audio_Notification_Command_3:int;
	let

		-- transition trace :
	--Audio_ON__To__Audio_ON_3
		(ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2) 
	= Audio_ON_ex(CONST_IN_Audio_Level, ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1, false);
		

		(idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3) 
	= Audio_ON_en(idNotification_Audio_2, CONST_IN_Audio_Level, ALARM_OUT_Audio_Notification_Command_2, false);
		

	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	=  (idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3, audioTimer_1);


	tel

	until true restart POINTNotification_Audio



	state AUDIO_ON__TO__AUDIO_OFF_4:

	 var 	idNotification_Audio_2, idNotification_Audio_3:int;
	ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Audio_Notification_Command_3:int;
	let

		-- transition trace :
	--Audio_ON__To__Audio_OFF_4
		(ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2) 
	= Audio_ON_ex(CONST_IN_Audio_Level, ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1, false);
		

		(idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3) 
	= Audio_OFF_en(idNotification_Audio_2, ALARM_OUT_Audio_Notification_Command_2, false);
		

	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	=  (idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3, audioTimer_1);


	tel

	until true restart POINTNotification_Audio



	state AUDIO_OFF__TO__AUDIO_DISABLED_1:

	 var 	idNotification_Audio_2, idNotification_Audio_3:int;
	ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Audio_Notification_Command_3:int;
	let

		-- transition trace :
	--Audio_OFF__To__Audio_Disabled_1
		(ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2) 
	= Audio_OFF_ex(ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1, false);
		

		(idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3) 
	= Audio_Disabled_en(idNotification_Audio_2, ALARM_OUT_Audio_Notification_Command_2, false);
		

	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	=  (idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3, audioTimer_1);


	tel

	until true restart POINTNotification_Audio



	state AUDIO_OFF__TO__ALARMSUBSYSTEM_ALARMSUBSYSTEMJUNCTION994_2:

	 var 	idNotification_Audio_2, idNotification_Audio_3:int;
	ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Audio_Notification_Command_3:int;
	audioTimer_2:int;
	let

		

-- transition trace :
	--Audio_OFF__To__Junction994_2, Junction994__To__Audio_Silenced_1
		(ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2) 
	= 
		 if (( OP_CMD_IN_Disable_Audio=2 )) then 
		Audio_OFF_ex(ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1, false)
		 else (ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1);
		

		(idNotification_Audio_3, audioTimer_2, ALARM_OUT_Audio_Notification_Command_3) 
	= 
		 if (( OP_CMD_IN_Disable_Audio=2 )) then 
		Audio_Silenced_en(idNotification_Audio_2, audioTimer_1, ALARM_OUT_Audio_Notification_Command_2, false)
		 else (idNotification_Audio_2, audioTimer_1, ALARM_OUT_Audio_Notification_Command_2);
		

	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	= 
		 if (( OP_CMD_IN_Disable_Audio=2 )) then 
		(idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3, audioTimer_2)
		 else (idNotification_Audio_1, ALARM_OUT_Audio_Notification_Command_1, audioTimer_1);


	tel

	until true restart POINTNotification_Audio



	state AUDIO_OFF__TO__AUDIO_ON_3:

	 var 	idNotification_Audio_2, idNotification_Audio_3:int;
	ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Audio_Notification_Command_3:int;
	let

		-- transition trace :
	--Audio_OFF__To__Audio_ON_3
		(ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2) 
	= Audio_OFF_ex(ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1, false);
		

		(idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3) 
	= Audio_ON_en(idNotification_Audio_2, CONST_IN_Audio_Level, ALARM_OUT_Audio_Notification_Command_2, false);
		

	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	=  (idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3, audioTimer_1);


	tel

	until true restart POINTNotification_Audio



	state AUDIO_SILENCED__TO__AUDIO_DISABLED_1:

	 var 	idNotification_Audio_2, idNotification_Audio_3:int;
	ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Audio_Notification_Command_3:int;
	let

		-- transition trace :
	--Audio_Silenced__To__Audio_Disabled_1
		(ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2) 
	= Audio_Silenced_ex(ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1, false);
		

		(idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3) 
	= Audio_Disabled_en(idNotification_Audio_2, ALARM_OUT_Audio_Notification_Command_2, false);
		

	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	=  (idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3, audioTimer_1);


	tel

	until true restart POINTNotification_Audio



	state AUDIO_SILENCED__TO__ALARMSUBSYSTEM_ALARMSUBSYSTEMJUNCTION996_2:

	 var 	idNotification_Audio_2, idNotification_Audio_3:int;
	ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Audio_Notification_Command_3:int;
	let

		

-- transition trace :
	--Audio_Silenced__To__Junction996_2, Junction996__To__Audio_ON_1
		(ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2) 
	= 
		 if ((  ALARM_OUT_Highest_Level_Alarm_1 >2 and OP_CMD_IN_Disable_Audio=0 )) then 
		Audio_Silenced_ex(ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1, false)
		 else (ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1);
		

		(idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3) 
	= 
		 if ((  ALARM_OUT_Highest_Level_Alarm_1 >2 and OP_CMD_IN_Disable_Audio=0 )) then 
		Audio_ON_en(idNotification_Audio_2, CONST_IN_Audio_Level, ALARM_OUT_Audio_Notification_Command_2, false)
		 else (idNotification_Audio_2, ALARM_OUT_Audio_Notification_Command_2);
		

	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	= 
		 if ((  ALARM_OUT_Highest_Level_Alarm_1 >2 and OP_CMD_IN_Disable_Audio=0 )) then 
		(idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3, audioTimer_1)
		 else (idNotification_Audio_1, ALARM_OUT_Audio_Notification_Command_1, audioTimer_1);


	tel

	until true restart POINTNotification_Audio



	state AUDIO_SILENCED__TO__ALARMSUBSYSTEM_ALARMSUBSYSTEMJUNCTION995_3:

	 var 	idNotification_Audio_2, idNotification_Audio_3:int;
	ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Audio_Notification_Command_3:int;
	let

		

-- transition trace :
	--Audio_Silenced__To__Junction995_3, Junction995__To__Audio_OFF_1
		(ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2) 
	= Audio_Silenced_ex(ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1, false);
		

		(idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3) 
	= Audio_OFF_en(idNotification_Audio_2, ALARM_OUT_Audio_Notification_Command_2, false);
		

	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	=  (idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3, audioTimer_1);


	tel

	until true restart POINTNotification_Audio



	state AUDIO_DISABLED__TO__AUDIO_SILENCED_1:

	 var 	idNotification_Audio_2, idNotification_Audio_3:int;
	ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Audio_Notification_Command_3:int;
	audioTimer_2:int;
	let

		-- transition trace :
	--Audio_Disabled__To__Audio_Silenced_1
		(ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2) 
	= Audio_Disabled_ex(ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1, false);
		

		(idNotification_Audio_3, audioTimer_2, ALARM_OUT_Audio_Notification_Command_3) 
	= Audio_Silenced_en(idNotification_Audio_2, audioTimer_1, ALARM_OUT_Audio_Notification_Command_2, false);
		

	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	=  (idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3, audioTimer_2);


	tel

	until true restart POINTNotification_Audio



	state AUDIO_DISABLED__TO__ALARMSUBSYSTEM_ALARMSUBSYSTEMJUNCTION996_2:

	 var 	idNotification_Audio_2, idNotification_Audio_3:int;
	ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Audio_Notification_Command_3:int;
	let

		

-- transition trace :
	--Audio_Disabled__To__Junction996_2, Junction996__To__Audio_ON_1
		(ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2) 
	= 
		 if ((  ALARM_OUT_Highest_Level_Alarm_1 >2 and OP_CMD_IN_Disable_Audio=0 )) then 
		Audio_Disabled_ex(ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1, false)
		 else (ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1);
		

		(idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3) 
	= 
		 if ((  ALARM_OUT_Highest_Level_Alarm_1 >2 and OP_CMD_IN_Disable_Audio=0 )) then 
		Audio_ON_en(idNotification_Audio_2, CONST_IN_Audio_Level, ALARM_OUT_Audio_Notification_Command_2, false)
		 else (idNotification_Audio_2, ALARM_OUT_Audio_Notification_Command_2);
		

	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	= 
		 if ((  ALARM_OUT_Highest_Level_Alarm_1 >2 and OP_CMD_IN_Disable_Audio=0 )) then 
		(idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3, audioTimer_1)
		 else (idNotification_Audio_1, ALARM_OUT_Audio_Notification_Command_1, audioTimer_1);


	tel

	until true restart POINTNotification_Audio



	state AUDIO_DISABLED__TO__ALARMSUBSYSTEM_ALARMSUBSYSTEMJUNCTION995_3:

	 var 	idNotification_Audio_2, idNotification_Audio_3:int;
	ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Audio_Notification_Command_3:int;
	let

		

-- transition trace :
	--Audio_Disabled__To__Junction995_3, Junction995__To__Audio_OFF_1
		(ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2) 
	= Audio_Disabled_ex(ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1, false);
		

		(idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3) 
	= Audio_OFF_en(idNotification_Audio_2, ALARM_OUT_Audio_Notification_Command_2, false);
		

	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	=  (idNotification_Audio_3, ALARM_OUT_Audio_Notification_Command_3, audioTimer_1);


	tel

	until true restart POINTNotification_Audio



	state AUDIO_ON_IDL:

	 var 	ALARM_OUT_Audio_Notification_Command_2:int;
	let

		
	(ALARM_OUT_Audio_Notification_Command_2) 
	= Audio_ON_du(CONST_IN_Audio_Level, ALARM_OUT_Audio_Notification_Command_1);

		


	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	= (idNotification_Audio_1, ALARM_OUT_Audio_Notification_Command_2, audioTimer_1);
	

	tel

	until true restart POINTNotification_Audio



	state AUDIO_OFF_IDL:

	 var 	ALARM_OUT_Audio_Notification_Command_2:int;
	let

		
	(ALARM_OUT_Audio_Notification_Command_2) 
	= Audio_OFF_du(ALARM_OUT_Audio_Notification_Command_1);

		


	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	= (idNotification_Audio_1, ALARM_OUT_Audio_Notification_Command_2, audioTimer_1);
	

	tel

	until true restart POINTNotification_Audio



	state AUDIO_SILENCED_IDL:

	 var 	ALARM_OUT_Audio_Notification_Command_2:int;
	audioTimer_2:int;
	let

		
	(audioTimer_2, ALARM_OUT_Audio_Notification_Command_2) 
	= Audio_Silenced_du(audioTimer_1, ALARM_OUT_Audio_Notification_Command_1);

		


	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	= (idNotification_Audio_1, ALARM_OUT_Audio_Notification_Command_2, audioTimer_2);
	

	tel

	until true restart POINTNotification_Audio



	state AUDIO_DISABLED_IDL:

	 var 	ALARM_OUT_Audio_Notification_Command_2:int;
	let

		
	(ALARM_OUT_Audio_Notification_Command_2) 
	= Audio_Disabled_du(ALARM_OUT_Audio_Notification_Command_1);

		


	(idNotification_Audio, ALARM_OUT_Audio_Notification_Command, audioTimer) 
	= (idNotification_Audio_1, ALARM_OUT_Audio_Notification_Command_2, audioTimer_1);
	

	tel

	until true restart POINTNotification_Audio



tel


--***************************************************State :Notification_Visual Automaton***************************************************

node Notification_Visual_node(idNotification_Visual_1:int;
	currentAlarm_1:int;
	ALARM_OUT_Visual_Notification_Message_1:int;
	previousAlarm_1:int)

returns (idNotification_Visual:int;
	ALARM_OUT_Visual_Notification_Message:int;
	currentAlarm:int;
	previousAlarm:int);


let

	 automaton notification_visual

	state POINTNotification_Visual:
	unless (idNotification_Visual_1=0) and (  currentAlarm_1 >0 ) restart POINT__TO__VISUAL_ALARMDISPLAY_1



	unless (idNotification_Visual_1=0) restart POINT__TO__VISUAL_OFF_2



	unless (idNotification_Visual_1=863) and (  currentAlarm_1 >0 ) restart VISUAL_OFF__TO__VISUAL_ALARMDISPLAY_1



	unless (idNotification_Visual_1=864) and (  currentAlarm_1 =0 ) restart VISUAL_ALARMDISPLAY__TO__VISUAL_OFF_1



	unless (idNotification_Visual_1=864) and (  currentAlarm_1 >0 ) restart VISUAL_ALARMDISPLAY__TO__VISUAL_ALARMDISPLAY_2



	unless (idNotification_Visual_1=863) restart VISUAL_OFF_IDL

	unless (idNotification_Visual_1=864) restart VISUAL_ALARMDISPLAY_IDL

	let

		(idNotification_Visual, ALARM_OUT_Visual_Notification_Message, currentAlarm, previousAlarm) 
	= (idNotification_Visual_1, ALARM_OUT_Visual_Notification_Message_1, currentAlarm_1, previousAlarm_1);
	

	tel



	state POINT__TO__VISUAL_ALARMDISPLAY_1:

	 var 	idNotification_Visual_2:int;
	ALARM_OUT_Visual_Notification_Message_2:int;
	currentAlarm_2:int;
	let

		-- transition trace :
	--POINT__To__Visual_AlarmDisplay_1
		(idNotification_Visual_2, currentAlarm_2, ALARM_OUT_Visual_Notification_Message_2) 
	= Visual_AlarmDisplay_en(idNotification_Visual_1, currentAlarm_1, ALARM_OUT_Visual_Notification_Message_1, false);
		

	(idNotification_Visual, ALARM_OUT_Visual_Notification_Message, currentAlarm) 
	=  (idNotification_Visual_2, ALARM_OUT_Visual_Notification_Message_2, currentAlarm_2);

	--add unused variables
	(previousAlarm) 
	= (previousAlarm_1);
	

	tel

	until true restart POINTNotification_Visual



	state POINT__TO__VISUAL_OFF_2:

	 var 	idNotification_Visual_2:int;
	ALARM_OUT_Visual_Notification_Message_2:int;
	previousAlarm_2:int;
	let

		-- transition trace :
	--POINT__To__Visual_OFF_2
		(idNotification_Visual_2, ALARM_OUT_Visual_Notification_Message_2, previousAlarm_2) 
	= Visual_OFF_en(idNotification_Visual_1, ALARM_OUT_Visual_Notification_Message_1, previousAlarm_1, false);
		

	(idNotification_Visual, ALARM_OUT_Visual_Notification_Message, currentAlarm, previousAlarm) 
	=  (idNotification_Visual_2, ALARM_OUT_Visual_Notification_Message_2, currentAlarm_1, previousAlarm_2);


	tel

	until true restart POINTNotification_Visual



	state VISUAL_OFF__TO__VISUAL_ALARMDISPLAY_1:

	 var 	idNotification_Visual_2, idNotification_Visual_3:int;
	ALARM_OUT_Visual_Notification_Message_2:int;
	currentAlarm_2:int;
	let

		-- transition trace :
	--Visual_OFF__To__Visual_AlarmDisplay_1
		(idNotification_Visual_2) 
	= Visual_OFF_ex(idNotification_Visual_1, false);
		

		(idNotification_Visual_3, currentAlarm_2, ALARM_OUT_Visual_Notification_Message_2) 
	= Visual_AlarmDisplay_en(idNotification_Visual_2, currentAlarm_1, ALARM_OUT_Visual_Notification_Message_1, false);
		

	(idNotification_Visual, ALARM_OUT_Visual_Notification_Message, currentAlarm, previousAlarm) 
	=  (idNotification_Visual_3, ALARM_OUT_Visual_Notification_Message_2, currentAlarm_2, previousAlarm_1);


	tel

	until true restart POINTNotification_Visual



	state VISUAL_ALARMDISPLAY__TO__VISUAL_OFF_1:

	 var 	idNotification_Visual_2, idNotification_Visual_3:int;
	ALARM_OUT_Visual_Notification_Message_2, ALARM_OUT_Visual_Notification_Message_3:int;
	currentAlarm_2:int;
	previousAlarm_2:int;
	let

		-- transition trace :
	--Visual_AlarmDisplay__To__Visual_OFF_1
		(currentAlarm_2, ALARM_OUT_Visual_Notification_Message_2, idNotification_Visual_2) 
	= Visual_AlarmDisplay_ex(currentAlarm_1, ALARM_OUT_Visual_Notification_Message_1, idNotification_Visual_1, false);
		

		(idNotification_Visual_3, ALARM_OUT_Visual_Notification_Message_3, previousAlarm_2) 
	= Visual_OFF_en(idNotification_Visual_2, ALARM_OUT_Visual_Notification_Message_2, previousAlarm_1, false);
		

	(idNotification_Visual, ALARM_OUT_Visual_Notification_Message, currentAlarm, previousAlarm) 
	=  (idNotification_Visual_3, ALARM_OUT_Visual_Notification_Message_3, currentAlarm_2, previousAlarm_2);


	tel

	until true restart POINTNotification_Visual



	state VISUAL_ALARMDISPLAY__TO__VISUAL_ALARMDISPLAY_2:

	 var 	idNotification_Visual_2, idNotification_Visual_3:int;
	ALARM_OUT_Visual_Notification_Message_2, ALARM_OUT_Visual_Notification_Message_3:int;
	currentAlarm_2, currentAlarm_3:int;
	let

		-- transition trace :
	--Visual_AlarmDisplay__To__Visual_AlarmDisplay_2
		(currentAlarm_2, ALARM_OUT_Visual_Notification_Message_2, idNotification_Visual_2) 
	= Visual_AlarmDisplay_ex(currentAlarm_1, ALARM_OUT_Visual_Notification_Message_1, idNotification_Visual_1, false);
		

		(idNotification_Visual_3, currentAlarm_3, ALARM_OUT_Visual_Notification_Message_3) 
	= Visual_AlarmDisplay_en(idNotification_Visual_2, currentAlarm_2, ALARM_OUT_Visual_Notification_Message_2, false);
		

	(idNotification_Visual, ALARM_OUT_Visual_Notification_Message, currentAlarm, previousAlarm) 
	=  (idNotification_Visual_3, ALARM_OUT_Visual_Notification_Message_3, currentAlarm_3, previousAlarm_1);


	tel

	until true restart POINTNotification_Visual



	state VISUAL_OFF_IDL:

	 	let

		

	(idNotification_Visual, ALARM_OUT_Visual_Notification_Message, currentAlarm, previousAlarm) 
	= (idNotification_Visual_1, ALARM_OUT_Visual_Notification_Message_1, currentAlarm_1, previousAlarm_1);
	

	tel

	until true restart POINTNotification_Visual



	state VISUAL_ALARMDISPLAY_IDL:

	 var 	ALARM_OUT_Visual_Notification_Message_2:int;
	currentAlarm_2:int;
	let

		
	(currentAlarm_2, ALARM_OUT_Visual_Notification_Message_2) 
	= Visual_AlarmDisplay_du(currentAlarm_1, ALARM_OUT_Visual_Notification_Message_1);

		


	(idNotification_Visual, ALARM_OUT_Visual_Notification_Message, currentAlarm, previousAlarm) 
	= (idNotification_Visual_1, ALARM_OUT_Visual_Notification_Message_2, currentAlarm_2, previousAlarm_1);
	

	tel

	until true restart POINTNotification_Visual



tel


--***************************************************State :CheckAlarm_Level1 Automaton***************************************************

node CheckAlarm_Level1_node(idCheckAlarm_Level1_1:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_Low:int;
	IM_IN_Flow_Rate_Commanded:int;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SYS_STAT_IN_In_Therapy:bool;
	idLevel1_IsUnderInfusion_1:int;
	underInfusion_1:int;
	SENSOR_IN_Flow_Rate_Not_Stable:bool;
	idLevel1_IsFlowRateNotStable_1:int;
	CONST_IN_Max_Idle_Duration:int;
	IM_IN_Current_System_Mode:int;
	idLevel1_IsIdleTimeExceeded_1:int;
	idletimer_1:int;
	step_size:real;
	CONST_IN_Max_Paused_Duration:int;
	idLevel1_IsPausedTimeExceeded_1:int;
	pausedtimer_1:int;
	CONFIG_IN_Config_Timer:int;
	CONST_IN_Config_Warning_Duration:int;
	idLevel1_IsConfigTimeWarning_1:int;
	SENSOR_IN_Battery_Low:bool;
	SENSOR_IN_Battery_Unable_To_Charge:bool;
	SENSOR_IN_Supply_Voltage_Out_Of_Range:bool;
	idLevel1_IsBatteryError_1:int;
	SENSOR_IN_Pump_Overheated:bool;
	idLevel1_IsPumpHot_1:int;
	LOGGING_IN_Logging_Failed:bool;
	idLevel1_IsLoggingFailed_1:int;
	SYS_MON_IN_System_Monitor_Failed:bool;
	idLevel1_IsSystemMonitorFailed_1:int;
	CONST_IN_Max_Duration_Under_Infusion:int;
	cancelAlarm_1:int;
	underInfusionTimer_1:int)

returns (idCheckAlarm_Level1:int;
	idLevel1_IsUnderInfusion:int;
	underInfusion:int;
	idLevel1_IsFlowRateNotStable:int;
	idLevel1_IsIdleTimeExceeded:int;
	idletimer:int;
	idLevel1_IsPausedTimeExceeded:int;
	pausedtimer:int;
	idLevel1_IsConfigTimeWarning:int;
	idLevel1_IsBatteryError:int;
	idLevel1_IsPumpHot:int;
	idLevel1_IsLoggingFailed:int;
	idLevel1_IsSystemMonitorFailed:int;
	underInfusionTimer:int);


let

	 automaton checkalarm_level1

	state POINTCheckAlarm_Level1:
	unless (idCheckAlarm_Level1_1=0) restart CHECKALARM_LEVEL1_PARALLEL_ENTRY
	unless true  restart CHECKALARM_LEVEL1_PARALLEL_IDL

	let

		(idCheckAlarm_Level1, idLevel1_IsUnderInfusion, underInfusion, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idletimer, idLevel1_IsPausedTimeExceeded, pausedtimer, idLevel1_IsConfigTimeWarning, idLevel1_IsBatteryError, idLevel1_IsPumpHot, idLevel1_IsLoggingFailed, idLevel1_IsSystemMonitorFailed, underInfusionTimer) 
	= (idCheckAlarm_Level1_1, idLevel1_IsUnderInfusion_1, underInfusion_1, idLevel1_IsFlowRateNotStable_1, idLevel1_IsIdleTimeExceeded_1, idletimer_1, idLevel1_IsPausedTimeExceeded_1, pausedtimer_1, idLevel1_IsConfigTimeWarning_1, idLevel1_IsBatteryError_1, idLevel1_IsPumpHot_1, idLevel1_IsLoggingFailed_1, idLevel1_IsSystemMonitorFailed_1, underInfusionTimer_1);
	

	tel



	state CHECKALARM_LEVEL1_PARALLEL_ENTRY:

	 var 	idCheckAlarm_Level1_2, idCheckAlarm_Level1_3, idCheckAlarm_Level1_4, idCheckAlarm_Level1_5, idCheckAlarm_Level1_6, idCheckAlarm_Level1_7, idCheckAlarm_Level1_8, idCheckAlarm_Level1_9, idCheckAlarm_Level1_10:int;
	idLevel1_IsUnderInfusion_2:int;
	underInfusion_2:int;
	idLevel1_IsFlowRateNotStable_2:int;
	idLevel1_IsIdleTimeExceeded_2:int;
	idletimer_2:int;
	idLevel1_IsPausedTimeExceeded_2:int;
	pausedtimer_2:int;
	idLevel1_IsConfigTimeWarning_2:int;
	idLevel1_IsBatteryError_2:int;
	idLevel1_IsPumpHot_2:int;
	idLevel1_IsLoggingFailed_2:int;
	idLevel1_IsSystemMonitorFailed_2:int;
	let

		
	(idLevel1_IsUnderInfusion_2, idCheckAlarm_Level1_2, underInfusion_2) 
	= Level1_IsUnderInfusion_en(idLevel1_IsUnderInfusion_1, idCheckAlarm_Level1_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, underInfusion_1, false);

	(idLevel1_IsFlowRateNotStable_2, idCheckAlarm_Level1_3) 
	= Level1_IsFlowRateNotStable_en(idLevel1_IsFlowRateNotStable_1, idCheckAlarm_Level1_2, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Not_Stable, false);

	(idLevel1_IsIdleTimeExceeded_2, idCheckAlarm_Level1_4, idletimer_2) 
	= Level1_IsIdleTimeExceeded_en(idLevel1_IsIdleTimeExceeded_1, idCheckAlarm_Level1_3, IM_IN_Current_System_Mode, CONST_IN_Max_Idle_Duration, step_size, idletimer_1, false);

	(idLevel1_IsPausedTimeExceeded_2, idCheckAlarm_Level1_5, pausedtimer_2) 
	= Level1_IsPausedTimeExceeded_en(idLevel1_IsPausedTimeExceeded_1, idCheckAlarm_Level1_4, IM_IN_Current_System_Mode, CONST_IN_Max_Paused_Duration, step_size, pausedtimer_1, false);

	(idLevel1_IsConfigTimeWarning_2, idCheckAlarm_Level1_6) 
	= Level1_IsConfigTimeWarning_en(idLevel1_IsConfigTimeWarning_1, idCheckAlarm_Level1_5, CONFIG_IN_Config_Timer, CONST_IN_Config_Warning_Duration, step_size, false);

	(idLevel1_IsBatteryError_2, idCheckAlarm_Level1_7) 
	= Level1_IsBatteryError_en(idLevel1_IsBatteryError_1, idCheckAlarm_Level1_6, SENSOR_IN_Battery_Low, SENSOR_IN_Battery_Unable_To_Charge, SENSOR_IN_Supply_Voltage_Out_Of_Range, false);

	(idLevel1_IsPumpHot_2, idCheckAlarm_Level1_8) 
	= Level1_IsPumpHot_en(idLevel1_IsPumpHot_1, idCheckAlarm_Level1_7, SENSOR_IN_Pump_Overheated, false);

	(idLevel1_IsLoggingFailed_2, idCheckAlarm_Level1_9) 
	= Level1_IsLoggingFailed_en(idLevel1_IsLoggingFailed_1, idCheckAlarm_Level1_8, LOGGING_IN_Logging_Failed, false);

	(idLevel1_IsSystemMonitorFailed_2, idCheckAlarm_Level1_10) 
	= Level1_IsSystemMonitorFailed_en(idLevel1_IsSystemMonitorFailed_1, idCheckAlarm_Level1_9, SYS_MON_IN_System_Monitor_Failed, false);


	(idCheckAlarm_Level1, idLevel1_IsUnderInfusion, underInfusion, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idletimer, idLevel1_IsPausedTimeExceeded, pausedtimer, idLevel1_IsConfigTimeWarning, idLevel1_IsBatteryError, idLevel1_IsPumpHot, idLevel1_IsLoggingFailed, idLevel1_IsSystemMonitorFailed) 
	= (idCheckAlarm_Level1_10, idLevel1_IsUnderInfusion_2, underInfusion_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idletimer_2, idLevel1_IsPausedTimeExceeded_2, pausedtimer_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsBatteryError_2, idLevel1_IsPumpHot_2, idLevel1_IsLoggingFailed_2, idLevel1_IsSystemMonitorFailed_2);
	
	--add unused variables
	(underInfusionTimer) 
	= (underInfusionTimer_1);
	

	tel

	until true restart POINTCheckAlarm_Level1



	state CHECKALARM_LEVEL1_PARALLEL_IDL:

	 var 	idLevel1_IsUnderInfusion_2:int;
	underInfusion_2, underInfusion_3:int;
	idLevel1_IsFlowRateNotStable_2:int;
	idLevel1_IsIdleTimeExceeded_2:int;
	idletimer_2:int;
	idLevel1_IsPausedTimeExceeded_2:int;
	pausedtimer_2:int;
	idLevel1_IsConfigTimeWarning_2:int;
	idLevel1_IsBatteryError_2:int;
	idLevel1_IsPumpHot_2:int;
	idLevel1_IsLoggingFailed_2:int;
	idLevel1_IsSystemMonitorFailed_2:int;
	underInfusionTimer_2:int;
	let

		
	(underInfusion_2) 
	= if not (idLevel1_IsUnderInfusion_1= 0 ) then Level1_IsUnderInfusion_du(underInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min)

		 else (underInfusion_1);

		


		(idLevel1_IsUnderInfusion_2, underInfusion_3, underInfusionTimer_2)
	= if not (idLevel1_IsUnderInfusion_1= 0 ) then Level1_IsUnderInfusion_node(idLevel1_IsUnderInfusion_1, underInfusion_2, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, cancelAlarm_1, underInfusionTimer_1, CONST_IN_Max_Duration_Under_Infusion, step_size)

		 else (idLevel1_IsUnderInfusion_1, underInfusion_2, underInfusionTimer_1);

		

		

		(idLevel1_IsFlowRateNotStable_2)
	= if not (idLevel1_IsFlowRateNotStable_1= 0 ) then Level1_IsFlowRateNotStable_node(idLevel1_IsFlowRateNotStable_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Not_Stable, cancelAlarm_1)

		 else (idLevel1_IsFlowRateNotStable_1);

		

		

		(idLevel1_IsIdleTimeExceeded_2, idletimer_2)
	= if not (idLevel1_IsIdleTimeExceeded_1= 0 ) then Level1_IsIdleTimeExceeded_node(idLevel1_IsIdleTimeExceeded_1, IM_IN_Current_System_Mode, CONST_IN_Max_Idle_Duration, step_size, idletimer_1, cancelAlarm_1)

		 else (idLevel1_IsIdleTimeExceeded_1, idletimer_1);

		

		

		(idLevel1_IsPausedTimeExceeded_2, pausedtimer_2)
	= if not (idLevel1_IsPausedTimeExceeded_1= 0 ) then Level1_IsPausedTimeExceeded_node(idLevel1_IsPausedTimeExceeded_1, IM_IN_Current_System_Mode, CONST_IN_Max_Paused_Duration, step_size, pausedtimer_1, cancelAlarm_1)

		 else (idLevel1_IsPausedTimeExceeded_1, pausedtimer_1);

		

		

		(idLevel1_IsConfigTimeWarning_2)
	= if not (idLevel1_IsConfigTimeWarning_1= 0 ) then Level1_IsConfigTimeWarning_node(idLevel1_IsConfigTimeWarning_1, CONFIG_IN_Config_Timer, CONST_IN_Config_Warning_Duration, step_size, cancelAlarm_1)

		 else (idLevel1_IsConfigTimeWarning_1);

		

		

		(idLevel1_IsBatteryError_2)
	= if not (idLevel1_IsBatteryError_1= 0 ) then Level1_IsBatteryError_node(idLevel1_IsBatteryError_1, SENSOR_IN_Battery_Low, SENSOR_IN_Battery_Unable_To_Charge, SENSOR_IN_Supply_Voltage_Out_Of_Range, cancelAlarm_1)

		 else (idLevel1_IsBatteryError_1);

		

		

		(idLevel1_IsPumpHot_2)
	= if not (idLevel1_IsPumpHot_1= 0 ) then Level1_IsPumpHot_node(idLevel1_IsPumpHot_1, SENSOR_IN_Pump_Overheated, cancelAlarm_1)

		 else (idLevel1_IsPumpHot_1);

		

		

		(idLevel1_IsLoggingFailed_2)
	= if not (idLevel1_IsLoggingFailed_1= 0 ) then Level1_IsLoggingFailed_node(idLevel1_IsLoggingFailed_1, LOGGING_IN_Logging_Failed, cancelAlarm_1)

		 else (idLevel1_IsLoggingFailed_1);

		

		

		(idLevel1_IsSystemMonitorFailed_2)
	= if not (idLevel1_IsSystemMonitorFailed_1= 0 ) then Level1_IsSystemMonitorFailed_node(idLevel1_IsSystemMonitorFailed_1, SYS_MON_IN_System_Monitor_Failed, cancelAlarm_1)

		 else (idLevel1_IsSystemMonitorFailed_1);

		

		

	(idCheckAlarm_Level1, idLevel1_IsUnderInfusion, underInfusion, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idletimer, idLevel1_IsPausedTimeExceeded, pausedtimer, idLevel1_IsConfigTimeWarning, idLevel1_IsBatteryError, idLevel1_IsPumpHot, idLevel1_IsLoggingFailed, idLevel1_IsSystemMonitorFailed, underInfusionTimer) 
	= (idCheckAlarm_Level1_1, idLevel1_IsUnderInfusion_2, underInfusion_3, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idletimer_2, idLevel1_IsPausedTimeExceeded_2, pausedtimer_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsBatteryError_2, idLevel1_IsPumpHot_2, idLevel1_IsLoggingFailed_2, idLevel1_IsSystemMonitorFailed_2, underInfusionTimer_2);
	

	tel

	until true restart POINTCheckAlarm_Level1



tel


--***************************************************State :CheckAlarm_Level2 Automaton***************************************************

node CheckAlarm_Level2_node(idCheckAlarm_Level2_1:int;
	CONST_IN_Low_Reservoir:int;
	SYS_STAT_IN_In_Therapy:bool;
	SYS_STAT_IN_Reservoir_Volume:int;
	idLevel2_IsLowReservoir_1:int;
	cancelAlarm_1:int)

returns (idCheckAlarm_Level2:int;
	idLevel2_IsLowReservoir:int);


let

	 automaton checkalarm_level2

	state POINTCheckAlarm_Level2:
	unless (idCheckAlarm_Level2_1=0) restart POINT__TO__LEVEL2_ISLOWRESERVOIR_1



	unless true  restart CHECKALARM_LEVEL2_PARALLEL_IDL

	let

		(idCheckAlarm_Level2, idLevel2_IsLowReservoir) 
	= (idCheckAlarm_Level2_1, idLevel2_IsLowReservoir_1);
	

	tel



	state POINT__TO__LEVEL2_ISLOWRESERVOIR_1:

	 var 	idCheckAlarm_Level2_2:int;
	idLevel2_IsLowReservoir_2:int;
	let

		-- transition trace :
	--POINT__To__Level2_IsLowReservoir_1
		(idLevel2_IsLowReservoir_2, idCheckAlarm_Level2_2) 
	= Level2_IsLowReservoir_en(idLevel2_IsLowReservoir_1, idCheckAlarm_Level2_1, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Reservoir_Volume, CONST_IN_Low_Reservoir, false);
		

	(idCheckAlarm_Level2, idLevel2_IsLowReservoir) 
	=  (idCheckAlarm_Level2_2, idLevel2_IsLowReservoir_2);


	tel

	until true restart POINTCheckAlarm_Level2



	state CHECKALARM_LEVEL2_PARALLEL_IDL:

	 var 	idLevel2_IsLowReservoir_2:int;
	let

		

		(idLevel2_IsLowReservoir_2)
	= if not (idLevel2_IsLowReservoir_1= 0 ) then Level2_IsLowReservoir_node(idLevel2_IsLowReservoir_1, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Reservoir_Volume, CONST_IN_Low_Reservoir, cancelAlarm_1)

		 else (idLevel2_IsLowReservoir_1);

		

		

	(idCheckAlarm_Level2, idLevel2_IsLowReservoir) 
	= (idCheckAlarm_Level2_1, idLevel2_IsLowReservoir_2);
	

	tel

	until true restart POINTCheckAlarm_Level2



tel


--***************************************************State :CheckAlarm_Level3 Automaton***************************************************

node CheckAlarm_Level3_node(idCheckAlarm_Level3_1:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_High:int;
	IM_IN_Flow_Rate_Commanded:int;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SYS_STAT_IN_In_Therapy:bool;
	idLevel3_IsOverInfusionFlowRate_1:int;
	overInfusion_1:int;
	DB_IN_VTBI_High:int;
	SYS_STAT_IN_Volume_Infused:int;
	idLevel3_IsOverInfusionVTBI_1:int;
	SENSOR_IN_Air_In_line:bool;
	idLevel3_IsAirInLine_1:int;
	SENSOR_IN_Occlusion:bool;
	idLevel3_IsOcclusion_1:int;
	SENSOR_IN_Door_Open:bool;
	idLevel3_IsDoor_Open_1:int;
	CONST_IN_Max_Duration_Over_Infusion:int;
	cancelAlarm_1:int;
	overInfusionTimer_1:int;
	step_size:real)

returns (idCheckAlarm_Level3:int;
	idLevel3_IsOverInfusionFlowRate:int;
	overInfusion:int;
	idLevel3_IsOverInfusionVTBI:int;
	idLevel3_IsAirInLine:int;
	idLevel3_IsOcclusion:int;
	idLevel3_IsDoor_Open:int;
	overInfusionTimer:int);


let

	 automaton checkalarm_level3

	state POINTCheckAlarm_Level3:
	unless (idCheckAlarm_Level3_1=0) restart CHECKALARM_LEVEL3_PARALLEL_ENTRY
	unless true  restart CHECKALARM_LEVEL3_PARALLEL_IDL

	let

		(idCheckAlarm_Level3, idLevel3_IsOverInfusionFlowRate, overInfusion, idLevel3_IsOverInfusionVTBI, idLevel3_IsAirInLine, idLevel3_IsOcclusion, idLevel3_IsDoor_Open, overInfusionTimer) 
	= (idCheckAlarm_Level3_1, idLevel3_IsOverInfusionFlowRate_1, overInfusion_1, idLevel3_IsOverInfusionVTBI_1, idLevel3_IsAirInLine_1, idLevel3_IsOcclusion_1, idLevel3_IsDoor_Open_1, overInfusionTimer_1);
	

	tel



	state CHECKALARM_LEVEL3_PARALLEL_ENTRY:

	 var 	idCheckAlarm_Level3_2, idCheckAlarm_Level3_3, idCheckAlarm_Level3_4, idCheckAlarm_Level3_5, idCheckAlarm_Level3_6:int;
	idLevel3_IsOverInfusionFlowRate_2:int;
	overInfusion_2:int;
	idLevel3_IsOverInfusionVTBI_2:int;
	idLevel3_IsAirInLine_2:int;
	idLevel3_IsOcclusion_2:int;
	idLevel3_IsDoor_Open_2:int;
	let

		
	(idLevel3_IsOverInfusionFlowRate_2, idCheckAlarm_Level3_2, overInfusion_2) 
	= Level3_IsOverInfusionFlowRate_en(idLevel3_IsOverInfusionFlowRate_1, idCheckAlarm_Level3_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, overInfusion_1, false);

	(idLevel3_IsOverInfusionVTBI_2, idCheckAlarm_Level3_3) 
	= Level3_IsOverInfusionVTBI_en(idLevel3_IsOverInfusionVTBI_1, idCheckAlarm_Level3_2, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Volume_Infused, DB_IN_VTBI_High, false);

	(idLevel3_IsAirInLine_2, idCheckAlarm_Level3_4) 
	= Level3_IsAirInLine_en(idLevel3_IsAirInLine_1, idCheckAlarm_Level3_3, SENSOR_IN_Air_In_line, false);

	(idLevel3_IsOcclusion_2, idCheckAlarm_Level3_5) 
	= Level3_IsOcclusion_en(idLevel3_IsOcclusion_1, idCheckAlarm_Level3_4, SENSOR_IN_Occlusion, false);

	(idLevel3_IsDoor_Open_2, idCheckAlarm_Level3_6) 
	= Level3_IsDoor_Open_en(idLevel3_IsDoor_Open_1, idCheckAlarm_Level3_5, SENSOR_IN_Door_Open, false);


	(idCheckAlarm_Level3, idLevel3_IsOverInfusionFlowRate, overInfusion, idLevel3_IsOverInfusionVTBI, idLevel3_IsAirInLine, idLevel3_IsOcclusion, idLevel3_IsDoor_Open) 
	= (idCheckAlarm_Level3_6, idLevel3_IsOverInfusionFlowRate_2, overInfusion_2, idLevel3_IsOverInfusionVTBI_2, idLevel3_IsAirInLine_2, idLevel3_IsOcclusion_2, idLevel3_IsDoor_Open_2);
	
	--add unused variables
	(overInfusionTimer) 
	= (overInfusionTimer_1);
	

	tel

	until true restart POINTCheckAlarm_Level3



	state CHECKALARM_LEVEL3_PARALLEL_IDL:

	 var 	idLevel3_IsOverInfusionFlowRate_2:int;
	overInfusion_2, overInfusion_3:int;
	idLevel3_IsOverInfusionVTBI_2:int;
	idLevel3_IsAirInLine_2:int;
	idLevel3_IsOcclusion_2:int;
	idLevel3_IsDoor_Open_2:int;
	overInfusionTimer_2:int;
	let

		
	(overInfusion_2) 
	= if not (idLevel3_IsOverInfusionFlowRate_1= 0 ) then Level3_IsOverInfusionFlowRate_du(overInfusion_1, SYS_STAT_IN_In_Therapy, SENSOR_IN_Flow_Rate_Monitored, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min)

		 else (overInfusion_1);

		


		(idLevel3_IsOverInfusionFlowRate_2, overInfusion_3, overInfusionTimer_2)
	= if not (idLevel3_IsOverInfusionFlowRate_1= 0 ) then Level3_IsOverInfusionFlowRate_node(idLevel3_IsOverInfusionFlowRate_1, overInfusion_2, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, cancelAlarm_1, overInfusionTimer_1, CONST_IN_Max_Duration_Over_Infusion, step_size)

		 else (idLevel3_IsOverInfusionFlowRate_1, overInfusion_2, overInfusionTimer_1);

		

		

		(idLevel3_IsOverInfusionVTBI_2)
	= if not (idLevel3_IsOverInfusionVTBI_1= 0 ) then Level3_IsOverInfusionVTBI_node(idLevel3_IsOverInfusionVTBI_1, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Volume_Infused, DB_IN_VTBI_High, cancelAlarm_1)

		 else (idLevel3_IsOverInfusionVTBI_1);

		

		

		(idLevel3_IsAirInLine_2)
	= if not (idLevel3_IsAirInLine_1= 0 ) then Level3_IsAirInLine_node(idLevel3_IsAirInLine_1, SENSOR_IN_Air_In_line, cancelAlarm_1)

		 else (idLevel3_IsAirInLine_1);

		

		

		(idLevel3_IsOcclusion_2)
	= if not (idLevel3_IsOcclusion_1= 0 ) then Level3_IsOcclusion_node(idLevel3_IsOcclusion_1, SENSOR_IN_Occlusion, cancelAlarm_1)

		 else (idLevel3_IsOcclusion_1);

		

		

		(idLevel3_IsDoor_Open_2)
	= if not (idLevel3_IsDoor_Open_1= 0 ) then Level3_IsDoor_Open_node(idLevel3_IsDoor_Open_1, SENSOR_IN_Door_Open, cancelAlarm_1)

		 else (idLevel3_IsDoor_Open_1);

		

		

	(idCheckAlarm_Level3, idLevel3_IsOverInfusionFlowRate, overInfusion, idLevel3_IsOverInfusionVTBI, idLevel3_IsAirInLine, idLevel3_IsOcclusion, idLevel3_IsDoor_Open, overInfusionTimer) 
	= (idCheckAlarm_Level3_1, idLevel3_IsOverInfusionFlowRate_2, overInfusion_3, idLevel3_IsOverInfusionVTBI_2, idLevel3_IsAirInLine_2, idLevel3_IsOcclusion_2, idLevel3_IsDoor_Open_2, overInfusionTimer_2);
	

	tel

	until true restart POINTCheckAlarm_Level3



tel


--***************************************************State :CheckAlarm_Level4 Automaton***************************************************

node CheckAlarm_Level4_node(idCheckAlarm_Level4_1:int;
	SYS_STAT_IN_In_Therapy:bool;
	SYS_STAT_IN_Reservoir_Empty:bool;
	idLevel4_IsEmptyReservoir_1:int;
	SENSOR_IN_Battery_Depleted:bool;
	SENSOR_IN_CPU_Error:bool;
	SENSOR_IN_Memory_Corrupted:bool;
	SENSOR_IN_Pump_Too_Hot:bool;
	SENSOR_IN_RTC_Error:bool;
	SENSOR_IN_WatchDog_Interrupt_Detected:bool;
	idLevel4_IsHardwareError_1:int;
	SENSOR_IN_Air_Pressure_Out_Of_Range:bool;
	SENSOR_IN_Humidity_Out_Of_Range:bool;
	SENSOR_IN_Temperature_Out_Of_Range:bool;
	idLevel4_IsEnviromentalError_1:int;
	cancelAlarm_1:int)

returns (idCheckAlarm_Level4:int;
	idLevel4_IsEmptyReservoir:int;
	idLevel4_IsHardwareError:int;
	idLevel4_IsEnviromentalError:int);


let

	 automaton checkalarm_level4

	state POINTCheckAlarm_Level4:
	unless (idCheckAlarm_Level4_1=0) restart CHECKALARM_LEVEL4_PARALLEL_ENTRY
	unless true  restart CHECKALARM_LEVEL4_PARALLEL_IDL

	let

		(idCheckAlarm_Level4, idLevel4_IsEmptyReservoir, idLevel4_IsHardwareError, idLevel4_IsEnviromentalError) 
	= (idCheckAlarm_Level4_1, idLevel4_IsEmptyReservoir_1, idLevel4_IsHardwareError_1, idLevel4_IsEnviromentalError_1);
	

	tel



	state CHECKALARM_LEVEL4_PARALLEL_ENTRY:

	 var 	idCheckAlarm_Level4_2, idCheckAlarm_Level4_3, idCheckAlarm_Level4_4:int;
	idLevel4_IsEmptyReservoir_2:int;
	idLevel4_IsHardwareError_2:int;
	idLevel4_IsEnviromentalError_2:int;
	let

		
	(idLevel4_IsEmptyReservoir_2, idCheckAlarm_Level4_2) 
	= Level4_IsEmptyReservoir_en(idLevel4_IsEmptyReservoir_1, idCheckAlarm_Level4_1, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Reservoir_Empty, false);

	(idLevel4_IsHardwareError_2, idCheckAlarm_Level4_3) 
	= Level4_IsHardwareError_en(idLevel4_IsHardwareError_1, idCheckAlarm_Level4_2, SENSOR_IN_Battery_Depleted, SENSOR_IN_RTC_Error, SENSOR_IN_CPU_Error, SENSOR_IN_Memory_Corrupted, SENSOR_IN_Pump_Too_Hot, SENSOR_IN_WatchDog_Interrupt_Detected, false);

	(idLevel4_IsEnviromentalError_2, idCheckAlarm_Level4_4) 
	= Level4_IsEnviromentalError_en(idLevel4_IsEnviromentalError_1, idCheckAlarm_Level4_3, SENSOR_IN_Temperature_Out_Of_Range, SENSOR_IN_Humidity_Out_Of_Range, SENSOR_IN_Air_Pressure_Out_Of_Range, false);


	(idCheckAlarm_Level4, idLevel4_IsEmptyReservoir, idLevel4_IsHardwareError, idLevel4_IsEnviromentalError) 
	= (idCheckAlarm_Level4_4, idLevel4_IsEmptyReservoir_2, idLevel4_IsHardwareError_2, idLevel4_IsEnviromentalError_2);
	

	tel

	until true restart POINTCheckAlarm_Level4



	state CHECKALARM_LEVEL4_PARALLEL_IDL:

	 var 	idLevel4_IsEmptyReservoir_2:int;
	idLevel4_IsHardwareError_2:int;
	idLevel4_IsEnviromentalError_2:int;
	let

		

		(idLevel4_IsEmptyReservoir_2)
	= if not (idLevel4_IsEmptyReservoir_1= 0 ) then Level4_IsEmptyReservoir_node(idLevel4_IsEmptyReservoir_1, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Reservoir_Empty, cancelAlarm_1)

		 else (idLevel4_IsEmptyReservoir_1);

		

		

		(idLevel4_IsHardwareError_2)
	= if not (idLevel4_IsHardwareError_1= 0 ) then Level4_IsHardwareError_node(idLevel4_IsHardwareError_1, SENSOR_IN_Battery_Depleted, SENSOR_IN_RTC_Error, SENSOR_IN_CPU_Error, SENSOR_IN_Memory_Corrupted, SENSOR_IN_Pump_Too_Hot, SENSOR_IN_WatchDog_Interrupt_Detected, cancelAlarm_1)

		 else (idLevel4_IsHardwareError_1);

		

		

		(idLevel4_IsEnviromentalError_2)
	= if not (idLevel4_IsEnviromentalError_1= 0 ) then Level4_IsEnviromentalError_node(idLevel4_IsEnviromentalError_1, SENSOR_IN_Temperature_Out_Of_Range, SENSOR_IN_Humidity_Out_Of_Range, SENSOR_IN_Air_Pressure_Out_Of_Range, cancelAlarm_1)

		 else (idLevel4_IsEnviromentalError_1);

		

		

	(idCheckAlarm_Level4, idLevel4_IsEmptyReservoir, idLevel4_IsHardwareError, idLevel4_IsEnviromentalError) 
	= (idCheckAlarm_Level4_1, idLevel4_IsEmptyReservoir_2, idLevel4_IsHardwareError_2, idLevel4_IsEnviromentalError_2);
	

	tel

	until true restart POINTCheckAlarm_Level4



tel


--***************************************************State :CheckAlarm_CancelAlarm Automaton***************************************************

node CheckAlarm_CancelAlarm_node(idCheckAlarm_CancelAlarm_1:int;
	currentAlarm_1:int;
	OP_CMD_IN_Notification_Cancel:bool;
	ALARM_OUT_Log_Message_ID_1:int;
	cancelAlarm_1:int)

returns (idCheckAlarm_CancelAlarm:int;
	ALARM_OUT_Log_Message_ID:int;
	cancelAlarm:int;
	currentAlarm:int);


let

	 automaton checkalarm_cancelalarm

	state POINTCheckAlarm_CancelAlarm:
	unless (idCheckAlarm_CancelAlarm_1=0) restart POINT__TO__CANCELALARM_OFF_1



	unless (idCheckAlarm_CancelAlarm_1=792) restart CANCELALARM_ON__TO__CANCELALARM_OFF_1



	unless (idCheckAlarm_CancelAlarm_1=793) and (  currentAlarm_1 >0 and OP_CMD_IN_Notification_Cancel ) restart CANCELALARM_OFF__TO__CANCELALARM_ON_1



	unless (idCheckAlarm_CancelAlarm_1=792) restart CANCELALARM_ON_IDL

	unless (idCheckAlarm_CancelAlarm_1=793) restart CANCELALARM_OFF_IDL

	let

		(idCheckAlarm_CancelAlarm, ALARM_OUT_Log_Message_ID, cancelAlarm, currentAlarm) 
	= (idCheckAlarm_CancelAlarm_1, ALARM_OUT_Log_Message_ID_1, cancelAlarm_1, currentAlarm_1);
	

	tel



	state POINT__TO__CANCELALARM_OFF_1:

	 var 	idCheckAlarm_CancelAlarm_2:int;
	let

		-- transition trace :
	--POINT__To__CancelAlarm_OFF_1
		(idCheckAlarm_CancelAlarm_2) 
	= CancelAlarm_OFF_en(idCheckAlarm_CancelAlarm_1, false);
		

	(idCheckAlarm_CancelAlarm) 
	=  (idCheckAlarm_CancelAlarm_2);

	--add unused variables
	(ALARM_OUT_Log_Message_ID, cancelAlarm, currentAlarm) 
	= (ALARM_OUT_Log_Message_ID_1, cancelAlarm_1, currentAlarm_1);
	

	tel

	until true restart POINTCheckAlarm_CancelAlarm



	state CANCELALARM_ON__TO__CANCELALARM_OFF_1:

	 var 	idCheckAlarm_CancelAlarm_2, idCheckAlarm_CancelAlarm_3:int;
	let

		-- transition trace :
	--CancelAlarm_ON__To__CancelAlarm_OFF_1
		(idCheckAlarm_CancelAlarm_2) 
	= CancelAlarm_ON_ex(idCheckAlarm_CancelAlarm_1, false);
		

		(idCheckAlarm_CancelAlarm_3) 
	= CancelAlarm_OFF_en(idCheckAlarm_CancelAlarm_2, false);
		

	(idCheckAlarm_CancelAlarm) 
	=  (idCheckAlarm_CancelAlarm_3);

	--add unused variables
	(ALARM_OUT_Log_Message_ID, cancelAlarm, currentAlarm) 
	= (ALARM_OUT_Log_Message_ID_1, cancelAlarm_1, currentAlarm_1);
	

	tel

	until true restart POINTCheckAlarm_CancelAlarm



	state CANCELALARM_OFF__TO__CANCELALARM_ON_1:

	 var 	idCheckAlarm_CancelAlarm_2, idCheckAlarm_CancelAlarm_3:int;
	ALARM_OUT_Log_Message_ID_2:int;
	cancelAlarm_2:int;
	currentAlarm_2:int;
	let

		-- transition trace :
	--CancelAlarm_OFF__To__CancelAlarm_ON_1
		(idCheckAlarm_CancelAlarm_2) 
	= CancelAlarm_OFF_ex(idCheckAlarm_CancelAlarm_1, false);
		

		(idCheckAlarm_CancelAlarm_3, currentAlarm_2, cancelAlarm_2, ALARM_OUT_Log_Message_ID_2) 
	= CancelAlarm_ON_en(idCheckAlarm_CancelAlarm_2, currentAlarm_1, cancelAlarm_1, ALARM_OUT_Log_Message_ID_1, false);
		

	(idCheckAlarm_CancelAlarm, ALARM_OUT_Log_Message_ID, cancelAlarm, currentAlarm) 
	=  (idCheckAlarm_CancelAlarm_3, ALARM_OUT_Log_Message_ID_2, cancelAlarm_2, currentAlarm_2);


	tel

	until true restart POINTCheckAlarm_CancelAlarm



	state CANCELALARM_ON_IDL:

	 var 	cancelAlarm_2:int;
	currentAlarm_2:int;
	let

		
	(currentAlarm_2, cancelAlarm_2) 
	= CancelAlarm_ON_du(currentAlarm_1, cancelAlarm_1);

		


	(idCheckAlarm_CancelAlarm, ALARM_OUT_Log_Message_ID, cancelAlarm, currentAlarm) 
	= (idCheckAlarm_CancelAlarm_1, ALARM_OUT_Log_Message_ID_1, cancelAlarm_2, currentAlarm_2);
	

	tel

	until true restart POINTCheckAlarm_CancelAlarm



	state CANCELALARM_OFF_IDL:

	 	let

		

	(idCheckAlarm_CancelAlarm, ALARM_OUT_Log_Message_ID, cancelAlarm, currentAlarm) 
	= (idCheckAlarm_CancelAlarm_1, ALARM_OUT_Log_Message_ID_1, cancelAlarm_1, currentAlarm_1);
	

	tel

	until true restart POINTCheckAlarm_CancelAlarm



tel


--***************************************************State :Alarms_Notification Automaton***************************************************

node Alarms_Notification_node(idAlarms_Notification_1:int;
	ALARM_OUT_Visual_Notification_Message_1:int;
	currentAlarm_1:int;
	idNotification_Visual_1:int;
	previousAlarm_1:int;
	ALARM_OUT_Audio_Notification_Command_1:int;
	ALARM_OUT_Highest_Level_Alarm_1:int;
	ALARM_OUT_Is_Audio_Disabled_1:int;
	CONST_IN_Audio_Level:int;
	OP_CMD_IN_Disable_Audio:int;
	audioTimer_1:int;
	idNotification_Audio_1:int;
	CONST_IN_Audio_Auto_Enable_Duration:int;
	step_size:real)

returns (idAlarms_Notification:int;
	ALARM_OUT_Visual_Notification_Message:int;
	currentAlarm:int;
	idNotification_Visual:int;
	previousAlarm:int;
	ALARM_OUT_Audio_Notification_Command:int;
	ALARM_OUT_Is_Audio_Disabled:int;
	audioTimer:int;
	idNotification_Audio:int);


let

	 automaton alarms_notification

	state POINTAlarms_Notification:
	unless (idAlarms_Notification_1=0) restart ALARMS_NOTIFICATION_PARALLEL_ENTRY
	unless true  restart ALARMS_NOTIFICATION_PARALLEL_IDL

	let

		(idAlarms_Notification, ALARM_OUT_Visual_Notification_Message, currentAlarm, idNotification_Visual, previousAlarm, ALARM_OUT_Audio_Notification_Command, ALARM_OUT_Is_Audio_Disabled, audioTimer, idNotification_Audio) 
	= (idAlarms_Notification_1, ALARM_OUT_Visual_Notification_Message_1, currentAlarm_1, idNotification_Visual_1, previousAlarm_1, ALARM_OUT_Audio_Notification_Command_1, ALARM_OUT_Is_Audio_Disabled_1, audioTimer_1, idNotification_Audio_1);
	

	tel



	state ALARMS_NOTIFICATION_PARALLEL_ENTRY:

	 var 	idAlarms_Notification_2, idAlarms_Notification_3:int;
	ALARM_OUT_Visual_Notification_Message_2:int;
	currentAlarm_2:int;
	idNotification_Visual_2:int;
	previousAlarm_2:int;
	ALARM_OUT_Audio_Notification_Command_2:int;
	ALARM_OUT_Is_Audio_Disabled_2:int;
	audioTimer_2:int;
	idNotification_Audio_2:int;
	let

		
	(idNotification_Visual_2, idAlarms_Notification_2, ALARM_OUT_Visual_Notification_Message_2, currentAlarm_2, previousAlarm_2) 
	= Notification_Visual_en(idNotification_Visual_1, idAlarms_Notification_1, currentAlarm_1, ALARM_OUT_Visual_Notification_Message_1, previousAlarm_1, false);

	(idNotification_Audio_2, idAlarms_Notification_3, ALARM_OUT_Is_Audio_Disabled_2, ALARM_OUT_Audio_Notification_Command_2, audioTimer_2) 
	= Notification_Audio_en(idNotification_Audio_1, idAlarms_Notification_2, OP_CMD_IN_Disable_Audio, ALARM_OUT_Is_Audio_Disabled_1, ALARM_OUT_Audio_Notification_Command_1, audioTimer_1, ALARM_OUT_Highest_Level_Alarm_1, CONST_IN_Audio_Level, false);


	(idAlarms_Notification, ALARM_OUT_Visual_Notification_Message, currentAlarm, idNotification_Visual, previousAlarm, ALARM_OUT_Audio_Notification_Command, ALARM_OUT_Is_Audio_Disabled, audioTimer, idNotification_Audio) 
	= (idAlarms_Notification_3, ALARM_OUT_Visual_Notification_Message_2, currentAlarm_2, idNotification_Visual_2, previousAlarm_2, ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Is_Audio_Disabled_2, audioTimer_2, idNotification_Audio_2);
	

	tel

	until true restart POINTAlarms_Notification



	state ALARMS_NOTIFICATION_PARALLEL_IDL:

	 var 	ALARM_OUT_Visual_Notification_Message_2:int;
	currentAlarm_2:int;
	idNotification_Visual_2:int;
	previousAlarm_2:int;
	ALARM_OUT_Audio_Notification_Command_2:int;
	ALARM_OUT_Is_Audio_Disabled_2:int;
	audioTimer_2:int;
	idNotification_Audio_2:int;
	let

		

		(idNotification_Visual_2, ALARM_OUT_Visual_Notification_Message_2, currentAlarm_2, previousAlarm_2)
	= if not (idNotification_Visual_1= 0 ) then Notification_Visual_node(idNotification_Visual_1, currentAlarm_1, ALARM_OUT_Visual_Notification_Message_1, previousAlarm_1)

		 else (idNotification_Visual_1, ALARM_OUT_Visual_Notification_Message_1, currentAlarm_1, previousAlarm_1);

		

		
	(ALARM_OUT_Is_Audio_Disabled_2) 
	= if not (idNotification_Audio_1= 0 ) then Notification_Audio_du(OP_CMD_IN_Disable_Audio, ALARM_OUT_Is_Audio_Disabled_1)

		 else (ALARM_OUT_Is_Audio_Disabled_1);

		


		(idNotification_Audio_2, ALARM_OUT_Audio_Notification_Command_2, audioTimer_2)
	= if not (idNotification_Audio_1= 0 ) then Notification_Audio_node(idNotification_Audio_1, OP_CMD_IN_Disable_Audio, ALARM_OUT_Audio_Notification_Command_1, audioTimer_1, ALARM_OUT_Highest_Level_Alarm_1, CONST_IN_Audio_Level, CONST_IN_Audio_Auto_Enable_Duration, step_size)

		 else (idNotification_Audio_1, ALARM_OUT_Audio_Notification_Command_1, audioTimer_1);

		

		

	(idAlarms_Notification, ALARM_OUT_Visual_Notification_Message, currentAlarm, idNotification_Visual, previousAlarm, ALARM_OUT_Audio_Notification_Command, ALARM_OUT_Is_Audio_Disabled, audioTimer, idNotification_Audio) 
	= (idAlarms_Notification_1, ALARM_OUT_Visual_Notification_Message_2, currentAlarm_2, idNotification_Visual_2, previousAlarm_2, ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Is_Audio_Disabled_2, audioTimer_2, idNotification_Audio_2);
	

	tel

	until true restart POINTAlarms_Notification



tel


--***************************************************State :Alarms_CheckAlarm Automaton***************************************************

node Alarms_CheckAlarm_node(idAlarms_CheckAlarm_1:int;
	ALARM_OUT_Log_Message_ID_1:int;
	cancelAlarm_1:int;
	currentAlarm_1:int;
	idCheckAlarm_CancelAlarm_1:int;
	SENSOR_IN_Air_Pressure_Out_Of_Range:bool;
	SENSOR_IN_Battery_Depleted:bool;
	SENSOR_IN_CPU_Error:bool;
	SENSOR_IN_Humidity_Out_Of_Range:bool;
	SENSOR_IN_Memory_Corrupted:bool;
	SENSOR_IN_Pump_Too_Hot:bool;
	SENSOR_IN_RTC_Error:bool;
	SENSOR_IN_Temperature_Out_Of_Range:bool;
	SENSOR_IN_WatchDog_Interrupt_Detected:bool;
	SYS_STAT_IN_In_Therapy:bool;
	SYS_STAT_IN_Reservoir_Empty:bool;
	idCheckAlarm_Level4_1:int;
	idLevel4_IsEmptyReservoir_1:int;
	idLevel4_IsEnviromentalError_1:int;
	idLevel4_IsHardwareError_1:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_High:int;
	DB_IN_VTBI_High:int;
	IM_IN_Flow_Rate_Commanded:int;
	SENSOR_IN_Air_In_line:bool;
	SENSOR_IN_Door_Open:bool;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SENSOR_IN_Occlusion:bool;
	SYS_STAT_IN_Volume_Infused:int;
	idCheckAlarm_Level3_1:int;
	idLevel3_IsAirInLine_1:int;
	idLevel3_IsDoor_Open_1:int;
	idLevel3_IsOcclusion_1:int;
	idLevel3_IsOverInfusionFlowRate_1:int;
	idLevel3_IsOverInfusionVTBI_1:int;
	overInfusion_1:int;
	CONST_IN_Low_Reservoir:int;
	SYS_STAT_IN_Reservoir_Volume:int;
	idCheckAlarm_Level2_1:int;
	idLevel2_IsLowReservoir_1:int;
	CONFIG_IN_Config_Timer:int;
	CONST_IN_Config_Warning_Duration:int;
	CONST_IN_Max_Idle_Duration:int;
	CONST_IN_Max_Paused_Duration:int;
	DB_IN_Flow_Rate_Low:int;
	IM_IN_Current_System_Mode:int;
	LOGGING_IN_Logging_Failed:bool;
	SENSOR_IN_Battery_Low:bool;
	SENSOR_IN_Battery_Unable_To_Charge:bool;
	SENSOR_IN_Flow_Rate_Not_Stable:bool;
	SENSOR_IN_Pump_Overheated:bool;
	SENSOR_IN_Supply_Voltage_Out_Of_Range:bool;
	SYS_MON_IN_System_Monitor_Failed:bool;
	idCheckAlarm_Level1_1:int;
	idLevel1_IsBatteryError_1:int;
	idLevel1_IsConfigTimeWarning_1:int;
	idLevel1_IsFlowRateNotStable_1:int;
	idLevel1_IsIdleTimeExceeded_1:int;
	idLevel1_IsLoggingFailed_1:int;
	idLevel1_IsPausedTimeExceeded_1:int;
	idLevel1_IsPumpHot_1:int;
	idLevel1_IsSystemMonitorFailed_1:int;
	idLevel1_IsUnderInfusion_1:int;
	idletimer_1:int;
	pausedtimer_1:int;
	step_size:real;
	underInfusion_1:int;
	ALARM_OUT_Highest_Level_Alarm_1:int;
	Max_Alarm_Level_1:int;
	OP_CMD_IN_Notification_Cancel:bool;
	CONST_IN_Max_Duration_Over_Infusion:int;
	overInfusionTimer_1:int;
	CONST_IN_Max_Duration_Under_Infusion:int;
	underInfusionTimer_1:int)

returns (idAlarms_CheckAlarm:int;
	ALARM_OUT_Log_Message_ID:int;
	cancelAlarm:int;
	currentAlarm:int;
	idCheckAlarm_CancelAlarm:int;
	idCheckAlarm_Level4:int;
	idLevel4_IsEmptyReservoir:int;
	idLevel4_IsEnviromentalError:int;
	idLevel4_IsHardwareError:int;
	idCheckAlarm_Level3:int;
	idLevel3_IsAirInLine:int;
	idLevel3_IsDoor_Open:int;
	idLevel3_IsOcclusion:int;
	idLevel3_IsOverInfusionFlowRate:int;
	idLevel3_IsOverInfusionVTBI:int;
	overInfusion:int;
	idCheckAlarm_Level2:int;
	idLevel2_IsLowReservoir:int;
	idCheckAlarm_Level1:int;
	idLevel1_IsBatteryError:int;
	idLevel1_IsConfigTimeWarning:int;
	idLevel1_IsFlowRateNotStable:int;
	idLevel1_IsIdleTimeExceeded:int;
	idLevel1_IsLoggingFailed:int;
	idLevel1_IsPausedTimeExceeded:int;
	idLevel1_IsPumpHot:int;
	idLevel1_IsSystemMonitorFailed:int;
	idLevel1_IsUnderInfusion:int;
	idletimer:int;
	pausedtimer:int;
	underInfusion:int;
	ALARM_OUT_Highest_Level_Alarm:int;
	Max_Alarm_Level:int;
	overInfusionTimer:int;
	underInfusionTimer:int);


let

	 automaton alarms_checkalarm

	state POINTAlarms_CheckAlarm:
	unless (idAlarms_CheckAlarm_1=0) restart ALARMS_CHECKALARM_PARALLEL_ENTRY
	unless true  restart ALARMS_CHECKALARM_PARALLEL_IDL

	let

		(idAlarms_CheckAlarm, ALARM_OUT_Log_Message_ID, cancelAlarm, currentAlarm, idCheckAlarm_CancelAlarm, idCheckAlarm_Level4, idLevel4_IsEmptyReservoir, idLevel4_IsEnviromentalError, idLevel4_IsHardwareError, idCheckAlarm_Level3, idLevel3_IsAirInLine, idLevel3_IsDoor_Open, idLevel3_IsOcclusion, idLevel3_IsOverInfusionFlowRate, idLevel3_IsOverInfusionVTBI, overInfusion, idCheckAlarm_Level2, idLevel2_IsLowReservoir, idCheckAlarm_Level1, idLevel1_IsBatteryError, idLevel1_IsConfigTimeWarning, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idLevel1_IsLoggingFailed, idLevel1_IsPausedTimeExceeded, idLevel1_IsPumpHot, idLevel1_IsSystemMonitorFailed, idLevel1_IsUnderInfusion, idletimer, pausedtimer, underInfusion, ALARM_OUT_Highest_Level_Alarm, Max_Alarm_Level, overInfusionTimer, underInfusionTimer) 
	= (idAlarms_CheckAlarm_1, ALARM_OUT_Log_Message_ID_1, cancelAlarm_1, currentAlarm_1, idCheckAlarm_CancelAlarm_1, idCheckAlarm_Level4_1, idLevel4_IsEmptyReservoir_1, idLevel4_IsEnviromentalError_1, idLevel4_IsHardwareError_1, idCheckAlarm_Level3_1, idLevel3_IsAirInLine_1, idLevel3_IsDoor_Open_1, idLevel3_IsOcclusion_1, idLevel3_IsOverInfusionFlowRate_1, idLevel3_IsOverInfusionVTBI_1, overInfusion_1, idCheckAlarm_Level2_1, idLevel2_IsLowReservoir_1, idCheckAlarm_Level1_1, idLevel1_IsBatteryError_1, idLevel1_IsConfigTimeWarning_1, idLevel1_IsFlowRateNotStable_1, idLevel1_IsIdleTimeExceeded_1, idLevel1_IsLoggingFailed_1, idLevel1_IsPausedTimeExceeded_1, idLevel1_IsPumpHot_1, idLevel1_IsSystemMonitorFailed_1, idLevel1_IsUnderInfusion_1, idletimer_1, pausedtimer_1, underInfusion_1, ALARM_OUT_Highest_Level_Alarm_1, Max_Alarm_Level_1, overInfusionTimer_1, underInfusionTimer_1);
	

	tel



	state ALARMS_CHECKALARM_PARALLEL_ENTRY:

	 var 	idAlarms_CheckAlarm_2, idAlarms_CheckAlarm_3, idAlarms_CheckAlarm_4, idAlarms_CheckAlarm_5, idAlarms_CheckAlarm_6, idAlarms_CheckAlarm_7:int;
	ALARM_OUT_Log_Message_ID_2:int;
	cancelAlarm_2:int;
	currentAlarm_2:int;
	idCheckAlarm_CancelAlarm_2:int;
	idCheckAlarm_Level4_2:int;
	idLevel4_IsEmptyReservoir_2:int;
	idLevel4_IsEnviromentalError_2:int;
	idLevel4_IsHardwareError_2:int;
	idCheckAlarm_Level3_2:int;
	idLevel3_IsAirInLine_2:int;
	idLevel3_IsDoor_Open_2:int;
	idLevel3_IsOcclusion_2:int;
	idLevel3_IsOverInfusionFlowRate_2:int;
	idLevel3_IsOverInfusionVTBI_2:int;
	overInfusion_2:int;
	idCheckAlarm_Level2_2:int;
	idLevel2_IsLowReservoir_2:int;
	idCheckAlarm_Level1_2:int;
	idLevel1_IsBatteryError_2:int;
	idLevel1_IsConfigTimeWarning_2:int;
	idLevel1_IsFlowRateNotStable_2:int;
	idLevel1_IsIdleTimeExceeded_2:int;
	idLevel1_IsLoggingFailed_2:int;
	idLevel1_IsPausedTimeExceeded_2:int;
	idLevel1_IsPumpHot_2:int;
	idLevel1_IsSystemMonitorFailed_2:int;
	idLevel1_IsUnderInfusion_2:int;
	idletimer_2:int;
	pausedtimer_2:int;
	underInfusion_2:int;
	ALARM_OUT_Highest_Level_Alarm_2:int;
	Max_Alarm_Level_2:int;
	let

		
	(idCheckAlarm_CancelAlarm_2, idAlarms_CheckAlarm_2, ALARM_OUT_Log_Message_ID_2, cancelAlarm_2, currentAlarm_2) 
	= CheckAlarm_CancelAlarm_en(idCheckAlarm_CancelAlarm_1, idAlarms_CheckAlarm_1, ALARM_OUT_Log_Message_ID_1, cancelAlarm_1, currentAlarm_1, false);

	(idCheckAlarm_Level4_2, idAlarms_CheckAlarm_3, idLevel4_IsEmptyReservoir_2, idLevel4_IsHardwareError_2, idLevel4_IsEnviromentalError_2) 
	= CheckAlarm_Level4_en(idCheckAlarm_Level4_1, idAlarms_CheckAlarm_2, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Reservoir_Empty, idLevel4_IsEmptyReservoir_1, SENSOR_IN_Battery_Depleted, SENSOR_IN_CPU_Error, SENSOR_IN_Memory_Corrupted, SENSOR_IN_Pump_Too_Hot, SENSOR_IN_RTC_Error, SENSOR_IN_WatchDog_Interrupt_Detected, idLevel4_IsHardwareError_1, SENSOR_IN_Air_Pressure_Out_Of_Range, SENSOR_IN_Humidity_Out_Of_Range, SENSOR_IN_Temperature_Out_Of_Range, idLevel4_IsEnviromentalError_1, false);

	(idCheckAlarm_Level3_2, idAlarms_CheckAlarm_4, idLevel3_IsOverInfusionFlowRate_2, overInfusion_2, idLevel3_IsOverInfusionVTBI_2, idLevel3_IsAirInLine_2, idLevel3_IsOcclusion_2, idLevel3_IsDoor_Open_2) 
	= CheckAlarm_Level3_en(idCheckAlarm_Level3_1, idAlarms_CheckAlarm_3, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, idLevel3_IsOverInfusionFlowRate_1, overInfusion_1, DB_IN_VTBI_High, SYS_STAT_IN_Volume_Infused, idLevel3_IsOverInfusionVTBI_1, SENSOR_IN_Air_In_line, idLevel3_IsAirInLine_1, SENSOR_IN_Occlusion, idLevel3_IsOcclusion_1, SENSOR_IN_Door_Open, idLevel3_IsDoor_Open_1, false);

	(idCheckAlarm_Level2_2, idAlarms_CheckAlarm_5, idLevel2_IsLowReservoir_2) 
	= CheckAlarm_Level2_en(idCheckAlarm_Level2_1, idAlarms_CheckAlarm_4, CONST_IN_Low_Reservoir, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Reservoir_Volume, idLevel2_IsLowReservoir_1, false);

	(idCheckAlarm_Level1_2, idAlarms_CheckAlarm_6, idLevel1_IsUnderInfusion_2, underInfusion_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idletimer_2, idLevel1_IsPausedTimeExceeded_2, pausedtimer_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsBatteryError_2, idLevel1_IsPumpHot_2, idLevel1_IsLoggingFailed_2, idLevel1_IsSystemMonitorFailed_2) 
	= CheckAlarm_Level1_en(idCheckAlarm_Level1_1, idAlarms_CheckAlarm_5, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, idLevel1_IsUnderInfusion_1, underInfusion_1, SENSOR_IN_Flow_Rate_Not_Stable, idLevel1_IsFlowRateNotStable_1, CONST_IN_Max_Idle_Duration, IM_IN_Current_System_Mode, idLevel1_IsIdleTimeExceeded_1, idletimer_1, step_size, CONST_IN_Max_Paused_Duration, idLevel1_IsPausedTimeExceeded_1, pausedtimer_1, CONFIG_IN_Config_Timer, CONST_IN_Config_Warning_Duration, idLevel1_IsConfigTimeWarning_1, SENSOR_IN_Battery_Low, SENSOR_IN_Battery_Unable_To_Charge, SENSOR_IN_Supply_Voltage_Out_Of_Range, idLevel1_IsBatteryError_1, SENSOR_IN_Pump_Overheated, idLevel1_IsPumpHot_1, LOGGING_IN_Logging_Failed, idLevel1_IsLoggingFailed_1, SYS_MON_IN_System_Monitor_Failed, idLevel1_IsSystemMonitorFailed_1, false);

	(idAlarms_CheckAlarm_7, ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2) 
	= CheckAlarm_SetAlarmStatus_en(idAlarms_CheckAlarm_6, ALARM_OUT_Highest_Level_Alarm_1, Max_Alarm_Level_1, false);


	(idAlarms_CheckAlarm, ALARM_OUT_Log_Message_ID, cancelAlarm, currentAlarm, idCheckAlarm_CancelAlarm, idCheckAlarm_Level4, idLevel4_IsEmptyReservoir, idLevel4_IsEnviromentalError, idLevel4_IsHardwareError, idCheckAlarm_Level3, idLevel3_IsAirInLine, idLevel3_IsDoor_Open, idLevel3_IsOcclusion, idLevel3_IsOverInfusionFlowRate, idLevel3_IsOverInfusionVTBI, overInfusion, idCheckAlarm_Level2, idLevel2_IsLowReservoir, idCheckAlarm_Level1, idLevel1_IsBatteryError, idLevel1_IsConfigTimeWarning, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idLevel1_IsLoggingFailed, idLevel1_IsPausedTimeExceeded, idLevel1_IsPumpHot, idLevel1_IsSystemMonitorFailed, idLevel1_IsUnderInfusion, idletimer, pausedtimer, underInfusion, ALARM_OUT_Highest_Level_Alarm, Max_Alarm_Level) 
	= (idAlarms_CheckAlarm_7, ALARM_OUT_Log_Message_ID_2, cancelAlarm_2, currentAlarm_2, idCheckAlarm_CancelAlarm_2, idCheckAlarm_Level4_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsEnviromentalError_2, idLevel4_IsHardwareError_2, idCheckAlarm_Level3_2, idLevel3_IsAirInLine_2, idLevel3_IsDoor_Open_2, idLevel3_IsOcclusion_2, idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionVTBI_2, overInfusion_2, idCheckAlarm_Level2_2, idLevel2_IsLowReservoir_2, idCheckAlarm_Level1_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idLevel1_IsLoggingFailed_2, idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPumpHot_2, idLevel1_IsSystemMonitorFailed_2, idLevel1_IsUnderInfusion_2, idletimer_2, pausedtimer_2, underInfusion_2, ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2);
	
	--add unused variables
	(overInfusionTimer, underInfusionTimer) 
	= (overInfusionTimer_1, underInfusionTimer_1);
	

	tel

	until true restart POINTAlarms_CheckAlarm



	state ALARMS_CHECKALARM_PARALLEL_IDL:

	 var 	ALARM_OUT_Log_Message_ID_2:int;
	cancelAlarm_2:int;
	currentAlarm_2:int;
	idCheckAlarm_CancelAlarm_2:int;
	idCheckAlarm_Level4_2:int;
	idLevel4_IsEmptyReservoir_2:int;
	idLevel4_IsEnviromentalError_2:int;
	idLevel4_IsHardwareError_2:int;
	idCheckAlarm_Level3_2:int;
	idLevel3_IsAirInLine_2:int;
	idLevel3_IsDoor_Open_2:int;
	idLevel3_IsOcclusion_2:int;
	idLevel3_IsOverInfusionFlowRate_2:int;
	idLevel3_IsOverInfusionVTBI_2:int;
	overInfusion_2:int;
	idCheckAlarm_Level2_2:int;
	idLevel2_IsLowReservoir_2:int;
	idCheckAlarm_Level1_2:int;
	idLevel1_IsBatteryError_2:int;
	idLevel1_IsConfigTimeWarning_2:int;
	idLevel1_IsFlowRateNotStable_2:int;
	idLevel1_IsIdleTimeExceeded_2:int;
	idLevel1_IsLoggingFailed_2:int;
	idLevel1_IsPausedTimeExceeded_2:int;
	idLevel1_IsPumpHot_2:int;
	idLevel1_IsSystemMonitorFailed_2:int;
	idLevel1_IsUnderInfusion_2:int;
	idletimer_2:int;
	pausedtimer_2:int;
	underInfusion_2:int;
	ALARM_OUT_Highest_Level_Alarm_2:int;
	Max_Alarm_Level_2:int;
	overInfusionTimer_2:int;
	underInfusionTimer_2:int;
	let

		

		(idCheckAlarm_CancelAlarm_2, ALARM_OUT_Log_Message_ID_2, cancelAlarm_2, currentAlarm_2)
	= if not (idCheckAlarm_CancelAlarm_1= 0 ) then CheckAlarm_CancelAlarm_node(idCheckAlarm_CancelAlarm_1, currentAlarm_1, OP_CMD_IN_Notification_Cancel, ALARM_OUT_Log_Message_ID_1, cancelAlarm_1)

		 else (idCheckAlarm_CancelAlarm_1, ALARM_OUT_Log_Message_ID_1, cancelAlarm_1, currentAlarm_1);

		

		

		(idCheckAlarm_Level4_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsHardwareError_2, idLevel4_IsEnviromentalError_2)
	= if not (idCheckAlarm_Level4_1= 0 ) then CheckAlarm_Level4_node(idCheckAlarm_Level4_1, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Reservoir_Empty, idLevel4_IsEmptyReservoir_1, SENSOR_IN_Battery_Depleted, SENSOR_IN_CPU_Error, SENSOR_IN_Memory_Corrupted, SENSOR_IN_Pump_Too_Hot, SENSOR_IN_RTC_Error, SENSOR_IN_WatchDog_Interrupt_Detected, idLevel4_IsHardwareError_1, SENSOR_IN_Air_Pressure_Out_Of_Range, SENSOR_IN_Humidity_Out_Of_Range, SENSOR_IN_Temperature_Out_Of_Range, idLevel4_IsEnviromentalError_1, cancelAlarm_2)

		 else (idCheckAlarm_Level4_1, idLevel4_IsEmptyReservoir_1, idLevel4_IsHardwareError_1, idLevel4_IsEnviromentalError_1);

		

		

		(idCheckAlarm_Level3_2, idLevel3_IsOverInfusionFlowRate_2, overInfusion_2, idLevel3_IsOverInfusionVTBI_2, idLevel3_IsAirInLine_2, idLevel3_IsOcclusion_2, idLevel3_IsDoor_Open_2, overInfusionTimer_2)
	= if not (idCheckAlarm_Level3_1= 0 ) then CheckAlarm_Level3_node(idCheckAlarm_Level3_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, idLevel3_IsOverInfusionFlowRate_1, overInfusion_1, DB_IN_VTBI_High, SYS_STAT_IN_Volume_Infused, idLevel3_IsOverInfusionVTBI_1, SENSOR_IN_Air_In_line, idLevel3_IsAirInLine_1, SENSOR_IN_Occlusion, idLevel3_IsOcclusion_1, SENSOR_IN_Door_Open, idLevel3_IsDoor_Open_1, CONST_IN_Max_Duration_Over_Infusion, cancelAlarm_2, overInfusionTimer_1, step_size)

		 else (idCheckAlarm_Level3_1, idLevel3_IsOverInfusionFlowRate_1, overInfusion_1, idLevel3_IsOverInfusionVTBI_1, idLevel3_IsAirInLine_1, idLevel3_IsOcclusion_1, idLevel3_IsDoor_Open_1, overInfusionTimer_1);

		

		

		(idCheckAlarm_Level2_2, idLevel2_IsLowReservoir_2)
	= if not (idCheckAlarm_Level2_1= 0 ) then CheckAlarm_Level2_node(idCheckAlarm_Level2_1, CONST_IN_Low_Reservoir, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Reservoir_Volume, idLevel2_IsLowReservoir_1, cancelAlarm_2)

		 else (idCheckAlarm_Level2_1, idLevel2_IsLowReservoir_1);

		

		

		(idCheckAlarm_Level1_2, idLevel1_IsUnderInfusion_2, underInfusion_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idletimer_2, idLevel1_IsPausedTimeExceeded_2, pausedtimer_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsBatteryError_2, idLevel1_IsPumpHot_2, idLevel1_IsLoggingFailed_2, idLevel1_IsSystemMonitorFailed_2, underInfusionTimer_2)
	= if not (idCheckAlarm_Level1_1= 0 ) then CheckAlarm_Level1_node(idCheckAlarm_Level1_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, idLevel1_IsUnderInfusion_1, underInfusion_1, SENSOR_IN_Flow_Rate_Not_Stable, idLevel1_IsFlowRateNotStable_1, CONST_IN_Max_Idle_Duration, IM_IN_Current_System_Mode, idLevel1_IsIdleTimeExceeded_1, idletimer_1, step_size, CONST_IN_Max_Paused_Duration, idLevel1_IsPausedTimeExceeded_1, pausedtimer_1, CONFIG_IN_Config_Timer, CONST_IN_Config_Warning_Duration, idLevel1_IsConfigTimeWarning_1, SENSOR_IN_Battery_Low, SENSOR_IN_Battery_Unable_To_Charge, SENSOR_IN_Supply_Voltage_Out_Of_Range, idLevel1_IsBatteryError_1, SENSOR_IN_Pump_Overheated, idLevel1_IsPumpHot_1, LOGGING_IN_Logging_Failed, idLevel1_IsLoggingFailed_1, SYS_MON_IN_System_Monitor_Failed, idLevel1_IsSystemMonitorFailed_1, CONST_IN_Max_Duration_Under_Infusion, cancelAlarm_2, underInfusionTimer_1)

		 else (idCheckAlarm_Level1_1, idLevel1_IsUnderInfusion_1, underInfusion_1, idLevel1_IsFlowRateNotStable_1, idLevel1_IsIdleTimeExceeded_1, idletimer_1, idLevel1_IsPausedTimeExceeded_1, pausedtimer_1, idLevel1_IsConfigTimeWarning_1, idLevel1_IsBatteryError_1, idLevel1_IsPumpHot_1, idLevel1_IsLoggingFailed_1, idLevel1_IsSystemMonitorFailed_1, underInfusionTimer_1);

		

		
	(ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2) 
	= CheckAlarm_SetAlarmStatus_du(ALARM_OUT_Highest_Level_Alarm_1, Max_Alarm_Level_1);

		


	(idAlarms_CheckAlarm, ALARM_OUT_Log_Message_ID, cancelAlarm, currentAlarm, idCheckAlarm_CancelAlarm, idCheckAlarm_Level4, idLevel4_IsEmptyReservoir, idLevel4_IsEnviromentalError, idLevel4_IsHardwareError, idCheckAlarm_Level3, idLevel3_IsAirInLine, idLevel3_IsDoor_Open, idLevel3_IsOcclusion, idLevel3_IsOverInfusionFlowRate, idLevel3_IsOverInfusionVTBI, overInfusion, idCheckAlarm_Level2, idLevel2_IsLowReservoir, idCheckAlarm_Level1, idLevel1_IsBatteryError, idLevel1_IsConfigTimeWarning, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idLevel1_IsLoggingFailed, idLevel1_IsPausedTimeExceeded, idLevel1_IsPumpHot, idLevel1_IsSystemMonitorFailed, idLevel1_IsUnderInfusion, idletimer, pausedtimer, underInfusion, ALARM_OUT_Highest_Level_Alarm, Max_Alarm_Level, overInfusionTimer, underInfusionTimer) 
	= (idAlarms_CheckAlarm_1, ALARM_OUT_Log_Message_ID_2, cancelAlarm_2, currentAlarm_2, idCheckAlarm_CancelAlarm_2, idCheckAlarm_Level4_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsEnviromentalError_2, idLevel4_IsHardwareError_2, idCheckAlarm_Level3_2, idLevel3_IsAirInLine_2, idLevel3_IsDoor_Open_2, idLevel3_IsOcclusion_2, idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionVTBI_2, overInfusion_2, idCheckAlarm_Level2_2, idLevel2_IsLowReservoir_2, idCheckAlarm_Level1_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idLevel1_IsLoggingFailed_2, idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPumpHot_2, idLevel1_IsSystemMonitorFailed_2, idLevel1_IsUnderInfusion_2, idletimer_2, pausedtimer_2, underInfusion_2, ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2, overInfusionTimer_2, underInfusionTimer_2);
	

	tel

	until true restart POINTAlarms_CheckAlarm



tel


--***************************************************State :AlarmSubSystem_Alarms Automaton***************************************************

node AlarmSubSystem_Alarms_node(idAlarmSubSystem_Alarms_1:int;
	ALARM_OUT_Highest_Level_Alarm_1:int;
	ALARM_OUT_Log_Message_ID_1:int;
	CONFIG_IN_Config_Timer:int;
	CONST_IN_Config_Warning_Duration:int;
	CONST_IN_Low_Reservoir:int;
	CONST_IN_Max_Idle_Duration:int;
	CONST_IN_Max_Paused_Duration:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_High:int;
	DB_IN_Flow_Rate_Low:int;
	DB_IN_VTBI_High:int;
	IM_IN_Current_System_Mode:int;
	IM_IN_Flow_Rate_Commanded:int;
	LOGGING_IN_Logging_Failed:bool;
	Max_Alarm_Level_1:int;
	SENSOR_IN_Air_In_line:bool;
	SENSOR_IN_Air_Pressure_Out_Of_Range:bool;
	SENSOR_IN_Battery_Depleted:bool;
	SENSOR_IN_Battery_Low:bool;
	SENSOR_IN_Battery_Unable_To_Charge:bool;
	SENSOR_IN_CPU_Error:bool;
	SENSOR_IN_Door_Open:bool;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SENSOR_IN_Flow_Rate_Not_Stable:bool;
	SENSOR_IN_Humidity_Out_Of_Range:bool;
	SENSOR_IN_Memory_Corrupted:bool;
	SENSOR_IN_Occlusion:bool;
	SENSOR_IN_Pump_Overheated:bool;
	SENSOR_IN_Pump_Too_Hot:bool;
	SENSOR_IN_RTC_Error:bool;
	SENSOR_IN_Supply_Voltage_Out_Of_Range:bool;
	SENSOR_IN_Temperature_Out_Of_Range:bool;
	SENSOR_IN_WatchDog_Interrupt_Detected:bool;
	SYS_MON_IN_System_Monitor_Failed:bool;
	SYS_STAT_IN_In_Therapy:bool;
	SYS_STAT_IN_Reservoir_Empty:bool;
	SYS_STAT_IN_Reservoir_Volume:int;
	SYS_STAT_IN_Volume_Infused:int;
	cancelAlarm_1:int;
	currentAlarm_1:int;
	idAlarms_CheckAlarm_1:int;
	idCheckAlarm_CancelAlarm_1:int;
	idCheckAlarm_Level1_1:int;
	idCheckAlarm_Level2_1:int;
	idCheckAlarm_Level3_1:int;
	idCheckAlarm_Level4_1:int;
	idLevel1_IsBatteryError_1:int;
	idLevel1_IsConfigTimeWarning_1:int;
	idLevel1_IsFlowRateNotStable_1:int;
	idLevel1_IsIdleTimeExceeded_1:int;
	idLevel1_IsLoggingFailed_1:int;
	idLevel1_IsPausedTimeExceeded_1:int;
	idLevel1_IsPumpHot_1:int;
	idLevel1_IsSystemMonitorFailed_1:int;
	idLevel1_IsUnderInfusion_1:int;
	idLevel2_IsLowReservoir_1:int;
	idLevel3_IsAirInLine_1:int;
	idLevel3_IsDoor_Open_1:int;
	idLevel3_IsOcclusion_1:int;
	idLevel3_IsOverInfusionFlowRate_1:int;
	idLevel3_IsOverInfusionVTBI_1:int;
	idLevel4_IsEmptyReservoir_1:int;
	idLevel4_IsEnviromentalError_1:int;
	idLevel4_IsHardwareError_1:int;
	idletimer_1:int;
	overInfusion_1:int;
	pausedtimer_1:int;
	step_size:real;
	underInfusion_1:int;
	ALARM_OUT_Audio_Notification_Command_1:int;
	ALARM_OUT_Is_Audio_Disabled_1:int;
	ALARM_OUT_Visual_Notification_Message_1:int;
	CONST_IN_Audio_Level:int;
	OP_CMD_IN_Disable_Audio:int;
	audioTimer_1:int;
	idAlarms_Notification_1:int;
	idNotification_Audio_1:int;
	idNotification_Visual_1:int;
	previousAlarm_1:int;
	CONST_IN_Max_Duration_Over_Infusion:int;
	CONST_IN_Max_Duration_Under_Infusion:int;
	OP_CMD_IN_Notification_Cancel:bool;
	overInfusionTimer_1:int;
	underInfusionTimer_1:int;
	CONST_IN_Audio_Auto_Enable_Duration:int)

returns (idAlarmSubSystem_Alarms:int;
	ALARM_OUT_Highest_Level_Alarm:int;
	ALARM_OUT_Log_Message_ID:int;
	Max_Alarm_Level:int;
	cancelAlarm:int;
	currentAlarm:int;
	idAlarms_CheckAlarm:int;
	idCheckAlarm_CancelAlarm:int;
	idCheckAlarm_Level1:int;
	idCheckAlarm_Level2:int;
	idCheckAlarm_Level3:int;
	idCheckAlarm_Level4:int;
	idLevel1_IsBatteryError:int;
	idLevel1_IsConfigTimeWarning:int;
	idLevel1_IsFlowRateNotStable:int;
	idLevel1_IsIdleTimeExceeded:int;
	idLevel1_IsLoggingFailed:int;
	idLevel1_IsPausedTimeExceeded:int;
	idLevel1_IsPumpHot:int;
	idLevel1_IsSystemMonitorFailed:int;
	idLevel1_IsUnderInfusion:int;
	idLevel2_IsLowReservoir:int;
	idLevel3_IsAirInLine:int;
	idLevel3_IsDoor_Open:int;
	idLevel3_IsOcclusion:int;
	idLevel3_IsOverInfusionFlowRate:int;
	idLevel3_IsOverInfusionVTBI:int;
	idLevel4_IsEmptyReservoir:int;
	idLevel4_IsEnviromentalError:int;
	idLevel4_IsHardwareError:int;
	idletimer:int;
	overInfusion:int;
	pausedtimer:int;
	underInfusion:int;
	ALARM_OUT_Audio_Notification_Command:int;
	ALARM_OUT_Is_Audio_Disabled:int;
	ALARM_OUT_Visual_Notification_Message:int;
	audioTimer:int;
	idAlarms_Notification:int;
	idNotification_Audio:int;
	idNotification_Visual:int;
	previousAlarm:int;
	overInfusionTimer:int;
	underInfusionTimer:int);


let

	 automaton alarmsubsystem_alarms

	state POINTAlarmSubSystem_Alarms:
	unless (idAlarmSubSystem_Alarms_1=0) restart ALARMSUBSYSTEM_ALARMS_PARALLEL_ENTRY
	unless true  restart ALARMSUBSYSTEM_ALARMS_PARALLEL_IDL

	let

		(idAlarmSubSystem_Alarms, ALARM_OUT_Highest_Level_Alarm, ALARM_OUT_Log_Message_ID, Max_Alarm_Level, cancelAlarm, currentAlarm, idAlarms_CheckAlarm, idCheckAlarm_CancelAlarm, idCheckAlarm_Level1, idCheckAlarm_Level2, idCheckAlarm_Level3, idCheckAlarm_Level4, idLevel1_IsBatteryError, idLevel1_IsConfigTimeWarning, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idLevel1_IsLoggingFailed, idLevel1_IsPausedTimeExceeded, idLevel1_IsPumpHot, idLevel1_IsSystemMonitorFailed, idLevel1_IsUnderInfusion, idLevel2_IsLowReservoir, idLevel3_IsAirInLine, idLevel3_IsDoor_Open, idLevel3_IsOcclusion, idLevel3_IsOverInfusionFlowRate, idLevel3_IsOverInfusionVTBI, idLevel4_IsEmptyReservoir, idLevel4_IsEnviromentalError, idLevel4_IsHardwareError, idletimer, overInfusion, pausedtimer, underInfusion, ALARM_OUT_Audio_Notification_Command, ALARM_OUT_Is_Audio_Disabled, ALARM_OUT_Visual_Notification_Message, audioTimer, idAlarms_Notification, idNotification_Audio, idNotification_Visual, previousAlarm, overInfusionTimer, underInfusionTimer) 
	= (idAlarmSubSystem_Alarms_1, ALARM_OUT_Highest_Level_Alarm_1, ALARM_OUT_Log_Message_ID_1, Max_Alarm_Level_1, cancelAlarm_1, currentAlarm_1, idAlarms_CheckAlarm_1, idCheckAlarm_CancelAlarm_1, idCheckAlarm_Level1_1, idCheckAlarm_Level2_1, idCheckAlarm_Level3_1, idCheckAlarm_Level4_1, idLevel1_IsBatteryError_1, idLevel1_IsConfigTimeWarning_1, idLevel1_IsFlowRateNotStable_1, idLevel1_IsIdleTimeExceeded_1, idLevel1_IsLoggingFailed_1, idLevel1_IsPausedTimeExceeded_1, idLevel1_IsPumpHot_1, idLevel1_IsSystemMonitorFailed_1, idLevel1_IsUnderInfusion_1, idLevel2_IsLowReservoir_1, idLevel3_IsAirInLine_1, idLevel3_IsDoor_Open_1, idLevel3_IsOcclusion_1, idLevel3_IsOverInfusionFlowRate_1, idLevel3_IsOverInfusionVTBI_1, idLevel4_IsEmptyReservoir_1, idLevel4_IsEnviromentalError_1, idLevel4_IsHardwareError_1, idletimer_1, overInfusion_1, pausedtimer_1, underInfusion_1, ALARM_OUT_Audio_Notification_Command_1, ALARM_OUT_Is_Audio_Disabled_1, ALARM_OUT_Visual_Notification_Message_1, audioTimer_1, idAlarms_Notification_1, idNotification_Audio_1, idNotification_Visual_1, previousAlarm_1, overInfusionTimer_1, underInfusionTimer_1);
	

	tel



	state ALARMSUBSYSTEM_ALARMS_PARALLEL_ENTRY:

	 var 	idAlarmSubSystem_Alarms_2, idAlarmSubSystem_Alarms_3:int;
	ALARM_OUT_Highest_Level_Alarm_2:int;
	ALARM_OUT_Log_Message_ID_2:int;
	Max_Alarm_Level_2:int;
	cancelAlarm_2:int;
	currentAlarm_2, currentAlarm_3:int;
	idAlarms_CheckAlarm_2:int;
	idCheckAlarm_CancelAlarm_2:int;
	idCheckAlarm_Level1_2:int;
	idCheckAlarm_Level2_2:int;
	idCheckAlarm_Level3_2:int;
	idCheckAlarm_Level4_2:int;
	idLevel1_IsBatteryError_2:int;
	idLevel1_IsConfigTimeWarning_2:int;
	idLevel1_IsFlowRateNotStable_2:int;
	idLevel1_IsIdleTimeExceeded_2:int;
	idLevel1_IsLoggingFailed_2:int;
	idLevel1_IsPausedTimeExceeded_2:int;
	idLevel1_IsPumpHot_2:int;
	idLevel1_IsSystemMonitorFailed_2:int;
	idLevel1_IsUnderInfusion_2:int;
	idLevel2_IsLowReservoir_2:int;
	idLevel3_IsAirInLine_2:int;
	idLevel3_IsDoor_Open_2:int;
	idLevel3_IsOcclusion_2:int;
	idLevel3_IsOverInfusionFlowRate_2:int;
	idLevel3_IsOverInfusionVTBI_2:int;
	idLevel4_IsEmptyReservoir_2:int;
	idLevel4_IsEnviromentalError_2:int;
	idLevel4_IsHardwareError_2:int;
	idletimer_2:int;
	overInfusion_2:int;
	pausedtimer_2:int;
	underInfusion_2:int;
	ALARM_OUT_Audio_Notification_Command_2:int;
	ALARM_OUT_Is_Audio_Disabled_2:int;
	ALARM_OUT_Visual_Notification_Message_2:int;
	audioTimer_2:int;
	idAlarms_Notification_2:int;
	idNotification_Audio_2:int;
	idNotification_Visual_2:int;
	previousAlarm_2:int;
	let

		
	(idAlarms_CheckAlarm_2, idAlarmSubSystem_Alarms_2, ALARM_OUT_Log_Message_ID_2, cancelAlarm_2, currentAlarm_2, idCheckAlarm_CancelAlarm_2, idCheckAlarm_Level4_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsEnviromentalError_2, idLevel4_IsHardwareError_2, idCheckAlarm_Level3_2, idLevel3_IsAirInLine_2, idLevel3_IsDoor_Open_2, idLevel3_IsOcclusion_2, idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionVTBI_2, overInfusion_2, idCheckAlarm_Level2_2, idLevel2_IsLowReservoir_2, idCheckAlarm_Level1_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idLevel1_IsLoggingFailed_2, idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPumpHot_2, idLevel1_IsSystemMonitorFailed_2, idLevel1_IsUnderInfusion_2, idletimer_2, pausedtimer_2, underInfusion_2, ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2) 
	= Alarms_CheckAlarm_en(idAlarms_CheckAlarm_1, idAlarmSubSystem_Alarms_1, ALARM_OUT_Log_Message_ID_1, cancelAlarm_1, currentAlarm_1, idCheckAlarm_CancelAlarm_1, SENSOR_IN_Air_Pressure_Out_Of_Range, SENSOR_IN_Battery_Depleted, SENSOR_IN_CPU_Error, SENSOR_IN_Humidity_Out_Of_Range, SENSOR_IN_Memory_Corrupted, SENSOR_IN_Pump_Too_Hot, SENSOR_IN_RTC_Error, SENSOR_IN_Temperature_Out_Of_Range, SENSOR_IN_WatchDog_Interrupt_Detected, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Reservoir_Empty, idCheckAlarm_Level4_1, idLevel4_IsEmptyReservoir_1, idLevel4_IsEnviromentalError_1, idLevel4_IsHardwareError_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, DB_IN_VTBI_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Air_In_line, SENSOR_IN_Door_Open, SENSOR_IN_Flow_Rate_Monitored, SENSOR_IN_Occlusion, SYS_STAT_IN_Volume_Infused, idCheckAlarm_Level3_1, idLevel3_IsAirInLine_1, idLevel3_IsDoor_Open_1, idLevel3_IsOcclusion_1, idLevel3_IsOverInfusionFlowRate_1, idLevel3_IsOverInfusionVTBI_1, overInfusion_1, CONST_IN_Low_Reservoir, SYS_STAT_IN_Reservoir_Volume, idCheckAlarm_Level2_1, idLevel2_IsLowReservoir_1, CONFIG_IN_Config_Timer, CONST_IN_Config_Warning_Duration, CONST_IN_Max_Idle_Duration, CONST_IN_Max_Paused_Duration, DB_IN_Flow_Rate_Low, IM_IN_Current_System_Mode, LOGGING_IN_Logging_Failed, SENSOR_IN_Battery_Low, SENSOR_IN_Battery_Unable_To_Charge, SENSOR_IN_Flow_Rate_Not_Stable, SENSOR_IN_Pump_Overheated, SENSOR_IN_Supply_Voltage_Out_Of_Range, SYS_MON_IN_System_Monitor_Failed, idCheckAlarm_Level1_1, idLevel1_IsBatteryError_1, idLevel1_IsConfigTimeWarning_1, idLevel1_IsFlowRateNotStable_1, idLevel1_IsIdleTimeExceeded_1, idLevel1_IsLoggingFailed_1, idLevel1_IsPausedTimeExceeded_1, idLevel1_IsPumpHot_1, idLevel1_IsSystemMonitorFailed_1, idLevel1_IsUnderInfusion_1, idletimer_1, pausedtimer_1, step_size, underInfusion_1, ALARM_OUT_Highest_Level_Alarm_1, Max_Alarm_Level_1, false);

	(idAlarms_Notification_2, idAlarmSubSystem_Alarms_3, ALARM_OUT_Visual_Notification_Message_2, currentAlarm_3, idNotification_Visual_2, previousAlarm_2, ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Is_Audio_Disabled_2, audioTimer_2, idNotification_Audio_2) 
	= Alarms_Notification_en(idAlarms_Notification_1, idAlarmSubSystem_Alarms_2, ALARM_OUT_Visual_Notification_Message_1, currentAlarm_2, idNotification_Visual_1, previousAlarm_1, ALARM_OUT_Audio_Notification_Command_1, ALARM_OUT_Highest_Level_Alarm_2, ALARM_OUT_Is_Audio_Disabled_1, CONST_IN_Audio_Level, OP_CMD_IN_Disable_Audio, audioTimer_1, idNotification_Audio_1, false);


	(idAlarmSubSystem_Alarms, ALARM_OUT_Highest_Level_Alarm, ALARM_OUT_Log_Message_ID, Max_Alarm_Level, cancelAlarm, currentAlarm, idAlarms_CheckAlarm, idCheckAlarm_CancelAlarm, idCheckAlarm_Level1, idCheckAlarm_Level2, idCheckAlarm_Level3, idCheckAlarm_Level4, idLevel1_IsBatteryError, idLevel1_IsConfigTimeWarning, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idLevel1_IsLoggingFailed, idLevel1_IsPausedTimeExceeded, idLevel1_IsPumpHot, idLevel1_IsSystemMonitorFailed, idLevel1_IsUnderInfusion, idLevel2_IsLowReservoir, idLevel3_IsAirInLine, idLevel3_IsDoor_Open, idLevel3_IsOcclusion, idLevel3_IsOverInfusionFlowRate, idLevel3_IsOverInfusionVTBI, idLevel4_IsEmptyReservoir, idLevel4_IsEnviromentalError, idLevel4_IsHardwareError, idletimer, overInfusion, pausedtimer, underInfusion, ALARM_OUT_Audio_Notification_Command, ALARM_OUT_Is_Audio_Disabled, ALARM_OUT_Visual_Notification_Message, audioTimer, idAlarms_Notification, idNotification_Audio, idNotification_Visual, previousAlarm) 
	= (idAlarmSubSystem_Alarms_3, ALARM_OUT_Highest_Level_Alarm_2, ALARM_OUT_Log_Message_ID_2, Max_Alarm_Level_2, cancelAlarm_2, currentAlarm_3, idAlarms_CheckAlarm_2, idCheckAlarm_CancelAlarm_2, idCheckAlarm_Level1_2, idCheckAlarm_Level2_2, idCheckAlarm_Level3_2, idCheckAlarm_Level4_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idLevel1_IsLoggingFailed_2, idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPumpHot_2, idLevel1_IsSystemMonitorFailed_2, idLevel1_IsUnderInfusion_2, idLevel2_IsLowReservoir_2, idLevel3_IsAirInLine_2, idLevel3_IsDoor_Open_2, idLevel3_IsOcclusion_2, idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionVTBI_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsEnviromentalError_2, idLevel4_IsHardwareError_2, idletimer_2, overInfusion_2, pausedtimer_2, underInfusion_2, ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Is_Audio_Disabled_2, ALARM_OUT_Visual_Notification_Message_2, audioTimer_2, idAlarms_Notification_2, idNotification_Audio_2, idNotification_Visual_2, previousAlarm_2);
	
	--add unused variables
	(overInfusionTimer, underInfusionTimer) 
	= (overInfusionTimer_1, underInfusionTimer_1);
	

	tel

	until true restart POINTAlarmSubSystem_Alarms



	state ALARMSUBSYSTEM_ALARMS_PARALLEL_IDL:

	 var 	ALARM_OUT_Highest_Level_Alarm_2:int;
	ALARM_OUT_Log_Message_ID_2:int;
	Max_Alarm_Level_2:int;
	cancelAlarm_2:int;
	currentAlarm_2, currentAlarm_3:int;
	idAlarms_CheckAlarm_2:int;
	idCheckAlarm_CancelAlarm_2:int;
	idCheckAlarm_Level1_2:int;
	idCheckAlarm_Level2_2:int;
	idCheckAlarm_Level3_2:int;
	idCheckAlarm_Level4_2:int;
	idLevel1_IsBatteryError_2:int;
	idLevel1_IsConfigTimeWarning_2:int;
	idLevel1_IsFlowRateNotStable_2:int;
	idLevel1_IsIdleTimeExceeded_2:int;
	idLevel1_IsLoggingFailed_2:int;
	idLevel1_IsPausedTimeExceeded_2:int;
	idLevel1_IsPumpHot_2:int;
	idLevel1_IsSystemMonitorFailed_2:int;
	idLevel1_IsUnderInfusion_2:int;
	idLevel2_IsLowReservoir_2:int;
	idLevel3_IsAirInLine_2:int;
	idLevel3_IsDoor_Open_2:int;
	idLevel3_IsOcclusion_2:int;
	idLevel3_IsOverInfusionFlowRate_2:int;
	idLevel3_IsOverInfusionVTBI_2:int;
	idLevel4_IsEmptyReservoir_2:int;
	idLevel4_IsEnviromentalError_2:int;
	idLevel4_IsHardwareError_2:int;
	idletimer_2:int;
	overInfusion_2:int;
	pausedtimer_2:int;
	underInfusion_2:int;
	ALARM_OUT_Audio_Notification_Command_2:int;
	ALARM_OUT_Is_Audio_Disabled_2:int;
	ALARM_OUT_Visual_Notification_Message_2:int;
	audioTimer_2:int;
	idAlarms_Notification_2:int;
	idNotification_Audio_2:int;
	idNotification_Visual_2:int;
	previousAlarm_2:int;
	overInfusionTimer_2:int;
	underInfusionTimer_2:int;
	let

		

		(idAlarms_CheckAlarm_2, ALARM_OUT_Log_Message_ID_2, cancelAlarm_2, currentAlarm_2, idCheckAlarm_CancelAlarm_2, idCheckAlarm_Level4_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsEnviromentalError_2, idLevel4_IsHardwareError_2, idCheckAlarm_Level3_2, idLevel3_IsAirInLine_2, idLevel3_IsDoor_Open_2, idLevel3_IsOcclusion_2, idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionVTBI_2, overInfusion_2, idCheckAlarm_Level2_2, idLevel2_IsLowReservoir_2, idCheckAlarm_Level1_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idLevel1_IsLoggingFailed_2, idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPumpHot_2, idLevel1_IsSystemMonitorFailed_2, idLevel1_IsUnderInfusion_2, idletimer_2, pausedtimer_2, underInfusion_2, ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2, overInfusionTimer_2, underInfusionTimer_2)
	= if not (idAlarms_CheckAlarm_1= 0 ) then Alarms_CheckAlarm_node(idAlarms_CheckAlarm_1, ALARM_OUT_Log_Message_ID_1, cancelAlarm_1, currentAlarm_1, idCheckAlarm_CancelAlarm_1, SENSOR_IN_Air_Pressure_Out_Of_Range, SENSOR_IN_Battery_Depleted, SENSOR_IN_CPU_Error, SENSOR_IN_Humidity_Out_Of_Range, SENSOR_IN_Memory_Corrupted, SENSOR_IN_Pump_Too_Hot, SENSOR_IN_RTC_Error, SENSOR_IN_Temperature_Out_Of_Range, SENSOR_IN_WatchDog_Interrupt_Detected, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Reservoir_Empty, idCheckAlarm_Level4_1, idLevel4_IsEmptyReservoir_1, idLevel4_IsEnviromentalError_1, idLevel4_IsHardwareError_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, DB_IN_VTBI_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Air_In_line, SENSOR_IN_Door_Open, SENSOR_IN_Flow_Rate_Monitored, SENSOR_IN_Occlusion, SYS_STAT_IN_Volume_Infused, idCheckAlarm_Level3_1, idLevel3_IsAirInLine_1, idLevel3_IsDoor_Open_1, idLevel3_IsOcclusion_1, idLevel3_IsOverInfusionFlowRate_1, idLevel3_IsOverInfusionVTBI_1, overInfusion_1, CONST_IN_Low_Reservoir, SYS_STAT_IN_Reservoir_Volume, idCheckAlarm_Level2_1, idLevel2_IsLowReservoir_1, CONFIG_IN_Config_Timer, CONST_IN_Config_Warning_Duration, CONST_IN_Max_Idle_Duration, CONST_IN_Max_Paused_Duration, DB_IN_Flow_Rate_Low, IM_IN_Current_System_Mode, LOGGING_IN_Logging_Failed, SENSOR_IN_Battery_Low, SENSOR_IN_Battery_Unable_To_Charge, SENSOR_IN_Flow_Rate_Not_Stable, SENSOR_IN_Pump_Overheated, SENSOR_IN_Supply_Voltage_Out_Of_Range, SYS_MON_IN_System_Monitor_Failed, idCheckAlarm_Level1_1, idLevel1_IsBatteryError_1, idLevel1_IsConfigTimeWarning_1, idLevel1_IsFlowRateNotStable_1, idLevel1_IsIdleTimeExceeded_1, idLevel1_IsLoggingFailed_1, idLevel1_IsPausedTimeExceeded_1, idLevel1_IsPumpHot_1, idLevel1_IsSystemMonitorFailed_1, idLevel1_IsUnderInfusion_1, idletimer_1, pausedtimer_1, step_size, underInfusion_1, ALARM_OUT_Highest_Level_Alarm_1, Max_Alarm_Level_1, OP_CMD_IN_Notification_Cancel, CONST_IN_Max_Duration_Over_Infusion, overInfusionTimer_1, CONST_IN_Max_Duration_Under_Infusion, underInfusionTimer_1)

		 else (idAlarms_CheckAlarm_1, ALARM_OUT_Log_Message_ID_1, cancelAlarm_1, currentAlarm_1, idCheckAlarm_CancelAlarm_1, idCheckAlarm_Level4_1, idLevel4_IsEmptyReservoir_1, idLevel4_IsEnviromentalError_1, idLevel4_IsHardwareError_1, idCheckAlarm_Level3_1, idLevel3_IsAirInLine_1, idLevel3_IsDoor_Open_1, idLevel3_IsOcclusion_1, idLevel3_IsOverInfusionFlowRate_1, idLevel3_IsOverInfusionVTBI_1, overInfusion_1, idCheckAlarm_Level2_1, idLevel2_IsLowReservoir_1, idCheckAlarm_Level1_1, idLevel1_IsBatteryError_1, idLevel1_IsConfigTimeWarning_1, idLevel1_IsFlowRateNotStable_1, idLevel1_IsIdleTimeExceeded_1, idLevel1_IsLoggingFailed_1, idLevel1_IsPausedTimeExceeded_1, idLevel1_IsPumpHot_1, idLevel1_IsSystemMonitorFailed_1, idLevel1_IsUnderInfusion_1, idletimer_1, pausedtimer_1, underInfusion_1, ALARM_OUT_Highest_Level_Alarm_1, Max_Alarm_Level_1, overInfusionTimer_1, underInfusionTimer_1);

		

		

		(idAlarms_Notification_2, ALARM_OUT_Visual_Notification_Message_2, currentAlarm_3, idNotification_Visual_2, previousAlarm_2, ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Is_Audio_Disabled_2, audioTimer_2, idNotification_Audio_2)
	= if not (idAlarms_Notification_1= 0 ) then Alarms_Notification_node(idAlarms_Notification_1, ALARM_OUT_Visual_Notification_Message_1, currentAlarm_2, idNotification_Visual_1, previousAlarm_1, ALARM_OUT_Audio_Notification_Command_1, ALARM_OUT_Highest_Level_Alarm_2, ALARM_OUT_Is_Audio_Disabled_1, CONST_IN_Audio_Level, OP_CMD_IN_Disable_Audio, audioTimer_1, idNotification_Audio_1, CONST_IN_Audio_Auto_Enable_Duration, step_size)

		 else (idAlarms_Notification_1, ALARM_OUT_Visual_Notification_Message_1, currentAlarm_2, idNotification_Visual_1, previousAlarm_1, ALARM_OUT_Audio_Notification_Command_1, ALARM_OUT_Is_Audio_Disabled_1, audioTimer_1, idNotification_Audio_1);

		

		

	(idAlarmSubSystem_Alarms, ALARM_OUT_Highest_Level_Alarm, ALARM_OUT_Log_Message_ID, Max_Alarm_Level, cancelAlarm, currentAlarm, idAlarms_CheckAlarm, idCheckAlarm_CancelAlarm, idCheckAlarm_Level1, idCheckAlarm_Level2, idCheckAlarm_Level3, idCheckAlarm_Level4, idLevel1_IsBatteryError, idLevel1_IsConfigTimeWarning, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idLevel1_IsLoggingFailed, idLevel1_IsPausedTimeExceeded, idLevel1_IsPumpHot, idLevel1_IsSystemMonitorFailed, idLevel1_IsUnderInfusion, idLevel2_IsLowReservoir, idLevel3_IsAirInLine, idLevel3_IsDoor_Open, idLevel3_IsOcclusion, idLevel3_IsOverInfusionFlowRate, idLevel3_IsOverInfusionVTBI, idLevel4_IsEmptyReservoir, idLevel4_IsEnviromentalError, idLevel4_IsHardwareError, idletimer, overInfusion, pausedtimer, underInfusion, ALARM_OUT_Audio_Notification_Command, ALARM_OUT_Is_Audio_Disabled, ALARM_OUT_Visual_Notification_Message, audioTimer, idAlarms_Notification, idNotification_Audio, idNotification_Visual, previousAlarm, overInfusionTimer, underInfusionTimer) 
	= (idAlarmSubSystem_Alarms_1, ALARM_OUT_Highest_Level_Alarm_2, ALARM_OUT_Log_Message_ID_2, Max_Alarm_Level_2, cancelAlarm_2, currentAlarm_3, idAlarms_CheckAlarm_2, idCheckAlarm_CancelAlarm_2, idCheckAlarm_Level1_2, idCheckAlarm_Level2_2, idCheckAlarm_Level3_2, idCheckAlarm_Level4_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idLevel1_IsLoggingFailed_2, idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPumpHot_2, idLevel1_IsSystemMonitorFailed_2, idLevel1_IsUnderInfusion_2, idLevel2_IsLowReservoir_2, idLevel3_IsAirInLine_2, idLevel3_IsDoor_Open_2, idLevel3_IsOcclusion_2, idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionVTBI_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsEnviromentalError_2, idLevel4_IsHardwareError_2, idletimer_2, overInfusion_2, pausedtimer_2, underInfusion_2, ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Is_Audio_Disabled_2, ALARM_OUT_Visual_Notification_Message_2, audioTimer_2, idAlarms_Notification_2, idNotification_Audio_2, idNotification_Visual_2, previousAlarm_2, overInfusionTimer_2, underInfusionTimer_2);
	

	tel

	until true restart POINTAlarmSubSystem_Alarms



tel


--***************************************************State :AlarmSubSystem_AlarmSubSystem Automaton***************************************************

node AlarmSubSystem_AlarmSubSystem_node(idAlarmSubSystem_AlarmSubSystem_1:int;
	TLM_MODE_IN_System_On:bool;
	ALARM_OUT_Audio_Notification_Command_1:int;
	ALARM_OUT_Highest_Level_Alarm_1:int;
	ALARM_OUT_Is_Audio_Disabled_1:int;
	ALARM_OUT_Log_Message_ID_1:int;
	ALARM_OUT_Visual_Notification_Message_1:int;
	CONFIG_IN_Config_Timer:int;
	CONST_IN_Audio_Level:int;
	CONST_IN_Config_Warning_Duration:int;
	CONST_IN_Low_Reservoir:int;
	CONST_IN_Max_Idle_Duration:int;
	CONST_IN_Max_Paused_Duration:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	DB_IN_Flow_Rate_High:int;
	DB_IN_Flow_Rate_Low:int;
	DB_IN_VTBI_High:int;
	IM_IN_Current_System_Mode:int;
	IM_IN_Flow_Rate_Commanded:int;
	LOGGING_IN_Logging_Failed:bool;
	Max_Alarm_Level_1:int;
	OP_CMD_IN_Disable_Audio:int;
	SENSOR_IN_Air_In_line:bool;
	SENSOR_IN_Air_Pressure_Out_Of_Range:bool;
	SENSOR_IN_Battery_Depleted:bool;
	SENSOR_IN_Battery_Low:bool;
	SENSOR_IN_Battery_Unable_To_Charge:bool;
	SENSOR_IN_CPU_Error:bool;
	SENSOR_IN_Door_Open:bool;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SENSOR_IN_Flow_Rate_Not_Stable:bool;
	SENSOR_IN_Humidity_Out_Of_Range:bool;
	SENSOR_IN_Memory_Corrupted:bool;
	SENSOR_IN_Occlusion:bool;
	SENSOR_IN_Pump_Overheated:bool;
	SENSOR_IN_Pump_Too_Hot:bool;
	SENSOR_IN_RTC_Error:bool;
	SENSOR_IN_Supply_Voltage_Out_Of_Range:bool;
	SENSOR_IN_Temperature_Out_Of_Range:bool;
	SENSOR_IN_WatchDog_Interrupt_Detected:bool;
	SYS_MON_IN_System_Monitor_Failed:bool;
	SYS_STAT_IN_In_Therapy:bool;
	SYS_STAT_IN_Reservoir_Empty:bool;
	SYS_STAT_IN_Reservoir_Volume:int;
	SYS_STAT_IN_Volume_Infused:int;
	audioTimer_1:int;
	cancelAlarm_1:int;
	currentAlarm_1:int;
	idAlarmSubSystem_Alarms_1:int;
	idAlarms_CheckAlarm_1:int;
	idAlarms_Notification_1:int;
	idCheckAlarm_CancelAlarm_1:int;
	idCheckAlarm_Level1_1:int;
	idCheckAlarm_Level2_1:int;
	idCheckAlarm_Level3_1:int;
	idCheckAlarm_Level4_1:int;
	idLevel1_IsBatteryError_1:int;
	idLevel1_IsConfigTimeWarning_1:int;
	idLevel1_IsFlowRateNotStable_1:int;
	idLevel1_IsIdleTimeExceeded_1:int;
	idLevel1_IsLoggingFailed_1:int;
	idLevel1_IsPausedTimeExceeded_1:int;
	idLevel1_IsPumpHot_1:int;
	idLevel1_IsSystemMonitorFailed_1:int;
	idLevel1_IsUnderInfusion_1:int;
	idLevel2_IsLowReservoir_1:int;
	idLevel3_IsAirInLine_1:int;
	idLevel3_IsDoor_Open_1:int;
	idLevel3_IsOcclusion_1:int;
	idLevel3_IsOverInfusionFlowRate_1:int;
	idLevel3_IsOverInfusionVTBI_1:int;
	idLevel4_IsEmptyReservoir_1:int;
	idLevel4_IsEnviromentalError_1:int;
	idLevel4_IsHardwareError_1:int;
	idNotification_Audio_1:int;
	idNotification_Visual_1:int;
	idletimer_1:int;
	overInfusion_1:int;
	pausedtimer_1:int;
	previousAlarm_1:int;
	step_size:real;
	underInfusion_1:int;
	CONST_IN_Max_Duration_Over_Infusion:int;
	CONST_IN_Max_Duration_Under_Infusion:int;
	OP_CMD_IN_Notification_Cancel:bool;
	overInfusionTimer_1:int;
	underInfusionTimer_1:int;
	CONST_IN_Audio_Auto_Enable_Duration:int)

returns (idAlarmSubSystem_AlarmSubSystem:int;
	ALARM_OUT_Audio_Notification_Command:int;
	ALARM_OUT_Highest_Level_Alarm:int;
	ALARM_OUT_Is_Audio_Disabled:int;
	ALARM_OUT_Log_Message_ID:int;
	ALARM_OUT_Visual_Notification_Message:int;
	Max_Alarm_Level:int;
	audioTimer:int;
	cancelAlarm:int;
	currentAlarm:int;
	idAlarmSubSystem_Alarms:int;
	idAlarms_CheckAlarm:int;
	idAlarms_Notification:int;
	idCheckAlarm_CancelAlarm:int;
	idCheckAlarm_Level1:int;
	idCheckAlarm_Level2:int;
	idCheckAlarm_Level3:int;
	idCheckAlarm_Level4:int;
	idLevel1_IsBatteryError:int;
	idLevel1_IsConfigTimeWarning:int;
	idLevel1_IsFlowRateNotStable:int;
	idLevel1_IsIdleTimeExceeded:int;
	idLevel1_IsLoggingFailed:int;
	idLevel1_IsPausedTimeExceeded:int;
	idLevel1_IsPumpHot:int;
	idLevel1_IsSystemMonitorFailed:int;
	idLevel1_IsUnderInfusion:int;
	idLevel2_IsLowReservoir:int;
	idLevel3_IsAirInLine:int;
	idLevel3_IsDoor_Open:int;
	idLevel3_IsOcclusion:int;
	idLevel3_IsOverInfusionFlowRate:int;
	idLevel3_IsOverInfusionVTBI:int;
	idLevel4_IsEmptyReservoir:int;
	idLevel4_IsEnviromentalError:int;
	idLevel4_IsHardwareError:int;
	idNotification_Audio:int;
	idNotification_Visual:int;
	idletimer:int;
	overInfusion:int;
	pausedtimer:int;
	previousAlarm:int;
	underInfusion:int;
	overInfusionTimer:int;
	underInfusionTimer:int);


let

	 automaton alarmsubsystem_alarmsubsystem

	state POINTAlarmSubSystem_AlarmSubSystem:
	unless (idAlarmSubSystem_AlarmSubSystem_1=0) and ( TLM_MODE_IN_System_On ) restart POINT__TO__ALARMSUBSYSTEM_ALARMS_1



	unless (idAlarmSubSystem_AlarmSubSystem_1=0) restart POINT__TO__ALARMSUBSYSTEM_NOT_ON_2



	unless (idAlarmSubSystem_AlarmSubSystem_1=789) and ( not TLM_MODE_IN_System_On ) restart ALARMSUBSYSTEM_ALARMS__TO__ALARMSUBSYSTEM_NOT_ON_1



	unless (idAlarmSubSystem_AlarmSubSystem_1=870) and ( TLM_MODE_IN_System_On ) restart ALARMSUBSYSTEM_NOT_ON__TO__ALARMSUBSYSTEM_ALARMS_1



	unless (idAlarmSubSystem_AlarmSubSystem_1=789) restart ALARMSUBSYSTEM_ALARMS_IDL

	unless (idAlarmSubSystem_AlarmSubSystem_1=870) restart ALARMSUBSYSTEM_NOT_ON_IDL

	let

		(idAlarmSubSystem_AlarmSubSystem, ALARM_OUT_Audio_Notification_Command, ALARM_OUT_Highest_Level_Alarm, ALARM_OUT_Is_Audio_Disabled, ALARM_OUT_Log_Message_ID, ALARM_OUT_Visual_Notification_Message, Max_Alarm_Level, audioTimer, cancelAlarm, currentAlarm, idAlarmSubSystem_Alarms, idAlarms_CheckAlarm, idAlarms_Notification, idCheckAlarm_CancelAlarm, idCheckAlarm_Level1, idCheckAlarm_Level2, idCheckAlarm_Level3, idCheckAlarm_Level4, idLevel1_IsBatteryError, idLevel1_IsConfigTimeWarning, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idLevel1_IsLoggingFailed, idLevel1_IsPausedTimeExceeded, idLevel1_IsPumpHot, idLevel1_IsSystemMonitorFailed, idLevel1_IsUnderInfusion, idLevel2_IsLowReservoir, idLevel3_IsAirInLine, idLevel3_IsDoor_Open, idLevel3_IsOcclusion, idLevel3_IsOverInfusionFlowRate, idLevel3_IsOverInfusionVTBI, idLevel4_IsEmptyReservoir, idLevel4_IsEnviromentalError, idLevel4_IsHardwareError, idNotification_Audio, idNotification_Visual, idletimer, overInfusion, pausedtimer, previousAlarm, underInfusion, overInfusionTimer, underInfusionTimer) 
	= (idAlarmSubSystem_AlarmSubSystem_1, ALARM_OUT_Audio_Notification_Command_1, ALARM_OUT_Highest_Level_Alarm_1, ALARM_OUT_Is_Audio_Disabled_1, ALARM_OUT_Log_Message_ID_1, ALARM_OUT_Visual_Notification_Message_1, Max_Alarm_Level_1, audioTimer_1, cancelAlarm_1, currentAlarm_1, idAlarmSubSystem_Alarms_1, idAlarms_CheckAlarm_1, idAlarms_Notification_1, idCheckAlarm_CancelAlarm_1, idCheckAlarm_Level1_1, idCheckAlarm_Level2_1, idCheckAlarm_Level3_1, idCheckAlarm_Level4_1, idLevel1_IsBatteryError_1, idLevel1_IsConfigTimeWarning_1, idLevel1_IsFlowRateNotStable_1, idLevel1_IsIdleTimeExceeded_1, idLevel1_IsLoggingFailed_1, idLevel1_IsPausedTimeExceeded_1, idLevel1_IsPumpHot_1, idLevel1_IsSystemMonitorFailed_1, idLevel1_IsUnderInfusion_1, idLevel2_IsLowReservoir_1, idLevel3_IsAirInLine_1, idLevel3_IsDoor_Open_1, idLevel3_IsOcclusion_1, idLevel3_IsOverInfusionFlowRate_1, idLevel3_IsOverInfusionVTBI_1, idLevel4_IsEmptyReservoir_1, idLevel4_IsEnviromentalError_1, idLevel4_IsHardwareError_1, idNotification_Audio_1, idNotification_Visual_1, idletimer_1, overInfusion_1, pausedtimer_1, previousAlarm_1, underInfusion_1, overInfusionTimer_1, underInfusionTimer_1);
	

	tel



	state POINT__TO__ALARMSUBSYSTEM_ALARMS_1:

	 var 	idAlarmSubSystem_AlarmSubSystem_2:int;
	ALARM_OUT_Audio_Notification_Command_2:int;
	ALARM_OUT_Highest_Level_Alarm_2:int;
	ALARM_OUT_Is_Audio_Disabled_2:int;
	ALARM_OUT_Log_Message_ID_2:int;
	ALARM_OUT_Visual_Notification_Message_2:int;
	Max_Alarm_Level_2:int;
	audioTimer_2:int;
	cancelAlarm_2:int;
	currentAlarm_2:int;
	idAlarmSubSystem_Alarms_2:int;
	idAlarms_CheckAlarm_2:int;
	idAlarms_Notification_2:int;
	idCheckAlarm_CancelAlarm_2:int;
	idCheckAlarm_Level1_2:int;
	idCheckAlarm_Level2_2:int;
	idCheckAlarm_Level3_2:int;
	idCheckAlarm_Level4_2:int;
	idLevel1_IsBatteryError_2:int;
	idLevel1_IsConfigTimeWarning_2:int;
	idLevel1_IsFlowRateNotStable_2:int;
	idLevel1_IsIdleTimeExceeded_2:int;
	idLevel1_IsLoggingFailed_2:int;
	idLevel1_IsPausedTimeExceeded_2:int;
	idLevel1_IsPumpHot_2:int;
	idLevel1_IsSystemMonitorFailed_2:int;
	idLevel1_IsUnderInfusion_2:int;
	idLevel2_IsLowReservoir_2:int;
	idLevel3_IsAirInLine_2:int;
	idLevel3_IsDoor_Open_2:int;
	idLevel3_IsOcclusion_2:int;
	idLevel3_IsOverInfusionFlowRate_2:int;
	idLevel3_IsOverInfusionVTBI_2:int;
	idLevel4_IsEmptyReservoir_2:int;
	idLevel4_IsEnviromentalError_2:int;
	idLevel4_IsHardwareError_2:int;
	idNotification_Audio_2:int;
	idNotification_Visual_2:int;
	idletimer_2:int;
	overInfusion_2:int;
	pausedtimer_2:int;
	previousAlarm_2:int;
	underInfusion_2:int;
	let

		-- transition trace :
	--POINT__To__AlarmSubSystem_Alarms_1
		(idAlarmSubSystem_Alarms_2, idAlarmSubSystem_AlarmSubSystem_2, ALARM_OUT_Highest_Level_Alarm_2, ALARM_OUT_Log_Message_ID_2, Max_Alarm_Level_2, cancelAlarm_2, currentAlarm_2, idAlarms_CheckAlarm_2, idCheckAlarm_CancelAlarm_2, idCheckAlarm_Level1_2, idCheckAlarm_Level2_2, idCheckAlarm_Level3_2, idCheckAlarm_Level4_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idLevel1_IsLoggingFailed_2, idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPumpHot_2, idLevel1_IsSystemMonitorFailed_2, idLevel1_IsUnderInfusion_2, idLevel2_IsLowReservoir_2, idLevel3_IsAirInLine_2, idLevel3_IsDoor_Open_2, idLevel3_IsOcclusion_2, idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionVTBI_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsEnviromentalError_2, idLevel4_IsHardwareError_2, idletimer_2, overInfusion_2, pausedtimer_2, underInfusion_2, ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Is_Audio_Disabled_2, ALARM_OUT_Visual_Notification_Message_2, audioTimer_2, idAlarms_Notification_2, idNotification_Audio_2, idNotification_Visual_2, previousAlarm_2) 
	= AlarmSubSystem_Alarms_en(idAlarmSubSystem_Alarms_1, idAlarmSubSystem_AlarmSubSystem_1, ALARM_OUT_Highest_Level_Alarm_1, ALARM_OUT_Log_Message_ID_1, CONFIG_IN_Config_Timer, CONST_IN_Config_Warning_Duration, CONST_IN_Low_Reservoir, CONST_IN_Max_Idle_Duration, CONST_IN_Max_Paused_Duration, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, DB_IN_Flow_Rate_Low, DB_IN_VTBI_High, IM_IN_Current_System_Mode, IM_IN_Flow_Rate_Commanded, LOGGING_IN_Logging_Failed, Max_Alarm_Level_1, SENSOR_IN_Air_In_line, SENSOR_IN_Air_Pressure_Out_Of_Range, SENSOR_IN_Battery_Depleted, SENSOR_IN_Battery_Low, SENSOR_IN_Battery_Unable_To_Charge, SENSOR_IN_CPU_Error, SENSOR_IN_Door_Open, SENSOR_IN_Flow_Rate_Monitored, SENSOR_IN_Flow_Rate_Not_Stable, SENSOR_IN_Humidity_Out_Of_Range, SENSOR_IN_Memory_Corrupted, SENSOR_IN_Occlusion, SENSOR_IN_Pump_Overheated, SENSOR_IN_Pump_Too_Hot, SENSOR_IN_RTC_Error, SENSOR_IN_Supply_Voltage_Out_Of_Range, SENSOR_IN_Temperature_Out_Of_Range, SENSOR_IN_WatchDog_Interrupt_Detected, SYS_MON_IN_System_Monitor_Failed, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Reservoir_Empty, SYS_STAT_IN_Reservoir_Volume, SYS_STAT_IN_Volume_Infused, cancelAlarm_1, currentAlarm_1, idAlarms_CheckAlarm_1, idCheckAlarm_CancelAlarm_1, idCheckAlarm_Level1_1, idCheckAlarm_Level2_1, idCheckAlarm_Level3_1, idCheckAlarm_Level4_1, idLevel1_IsBatteryError_1, idLevel1_IsConfigTimeWarning_1, idLevel1_IsFlowRateNotStable_1, idLevel1_IsIdleTimeExceeded_1, idLevel1_IsLoggingFailed_1, idLevel1_IsPausedTimeExceeded_1, idLevel1_IsPumpHot_1, idLevel1_IsSystemMonitorFailed_1, idLevel1_IsUnderInfusion_1, idLevel2_IsLowReservoir_1, idLevel3_IsAirInLine_1, idLevel3_IsDoor_Open_1, idLevel3_IsOcclusion_1, idLevel3_IsOverInfusionFlowRate_1, idLevel3_IsOverInfusionVTBI_1, idLevel4_IsEmptyReservoir_1, idLevel4_IsEnviromentalError_1, idLevel4_IsHardwareError_1, idletimer_1, overInfusion_1, pausedtimer_1, step_size, underInfusion_1, ALARM_OUT_Audio_Notification_Command_1, ALARM_OUT_Is_Audio_Disabled_1, ALARM_OUT_Visual_Notification_Message_1, CONST_IN_Audio_Level, OP_CMD_IN_Disable_Audio, audioTimer_1, idAlarms_Notification_1, idNotification_Audio_1, idNotification_Visual_1, previousAlarm_1, false);
		

	(idAlarmSubSystem_AlarmSubSystem, ALARM_OUT_Audio_Notification_Command, ALARM_OUT_Highest_Level_Alarm, ALARM_OUT_Is_Audio_Disabled, ALARM_OUT_Log_Message_ID, ALARM_OUT_Visual_Notification_Message, Max_Alarm_Level, audioTimer, cancelAlarm, currentAlarm, idAlarmSubSystem_Alarms, idAlarms_CheckAlarm, idAlarms_Notification, idCheckAlarm_CancelAlarm, idCheckAlarm_Level1, idCheckAlarm_Level2, idCheckAlarm_Level3, idCheckAlarm_Level4, idLevel1_IsBatteryError, idLevel1_IsConfigTimeWarning, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idLevel1_IsLoggingFailed, idLevel1_IsPausedTimeExceeded, idLevel1_IsPumpHot, idLevel1_IsSystemMonitorFailed, idLevel1_IsUnderInfusion, idLevel2_IsLowReservoir, idLevel3_IsAirInLine, idLevel3_IsDoor_Open, idLevel3_IsOcclusion, idLevel3_IsOverInfusionFlowRate, idLevel3_IsOverInfusionVTBI, idLevel4_IsEmptyReservoir, idLevel4_IsEnviromentalError, idLevel4_IsHardwareError, idNotification_Audio, idNotification_Visual, idletimer, overInfusion, pausedtimer, previousAlarm, underInfusion) 
	=  (idAlarmSubSystem_AlarmSubSystem_2, ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Highest_Level_Alarm_2, ALARM_OUT_Is_Audio_Disabled_2, ALARM_OUT_Log_Message_ID_2, ALARM_OUT_Visual_Notification_Message_2, Max_Alarm_Level_2, audioTimer_2, cancelAlarm_2, currentAlarm_2, idAlarmSubSystem_Alarms_2, idAlarms_CheckAlarm_2, idAlarms_Notification_2, idCheckAlarm_CancelAlarm_2, idCheckAlarm_Level1_2, idCheckAlarm_Level2_2, idCheckAlarm_Level3_2, idCheckAlarm_Level4_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idLevel1_IsLoggingFailed_2, idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPumpHot_2, idLevel1_IsSystemMonitorFailed_2, idLevel1_IsUnderInfusion_2, idLevel2_IsLowReservoir_2, idLevel3_IsAirInLine_2, idLevel3_IsDoor_Open_2, idLevel3_IsOcclusion_2, idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionVTBI_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsEnviromentalError_2, idLevel4_IsHardwareError_2, idNotification_Audio_2, idNotification_Visual_2, idletimer_2, overInfusion_2, pausedtimer_2, previousAlarm_2, underInfusion_2);

	--add unused variables
	(overInfusionTimer, underInfusionTimer) 
	= (overInfusionTimer_1, underInfusionTimer_1);
	

	tel

	until true restart POINTAlarmSubSystem_AlarmSubSystem



	state POINT__TO__ALARMSUBSYSTEM_NOT_ON_2:

	 var 	idAlarmSubSystem_AlarmSubSystem_2:int;
	let

		-- transition trace :
	--POINT__To__AlarmSubSystem_NOT_ON_2
		(idAlarmSubSystem_AlarmSubSystem_2) 
	= AlarmSubSystem_NOT_ON_en(idAlarmSubSystem_AlarmSubSystem_1, false);
		

	(idAlarmSubSystem_AlarmSubSystem, ALARM_OUT_Audio_Notification_Command, ALARM_OUT_Highest_Level_Alarm, ALARM_OUT_Is_Audio_Disabled, ALARM_OUT_Log_Message_ID, ALARM_OUT_Visual_Notification_Message, Max_Alarm_Level, audioTimer, cancelAlarm, currentAlarm, idAlarmSubSystem_Alarms, idAlarms_CheckAlarm, idAlarms_Notification, idCheckAlarm_CancelAlarm, idCheckAlarm_Level1, idCheckAlarm_Level2, idCheckAlarm_Level3, idCheckAlarm_Level4, idLevel1_IsBatteryError, idLevel1_IsConfigTimeWarning, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idLevel1_IsLoggingFailed, idLevel1_IsPausedTimeExceeded, idLevel1_IsPumpHot, idLevel1_IsSystemMonitorFailed, idLevel1_IsUnderInfusion, idLevel2_IsLowReservoir, idLevel3_IsAirInLine, idLevel3_IsDoor_Open, idLevel3_IsOcclusion, idLevel3_IsOverInfusionFlowRate, idLevel3_IsOverInfusionVTBI, idLevel4_IsEmptyReservoir, idLevel4_IsEnviromentalError, idLevel4_IsHardwareError, idNotification_Audio, idNotification_Visual, idletimer, overInfusion, pausedtimer, previousAlarm, underInfusion) 
	=  (idAlarmSubSystem_AlarmSubSystem_2, ALARM_OUT_Audio_Notification_Command_1, ALARM_OUT_Highest_Level_Alarm_1, ALARM_OUT_Is_Audio_Disabled_1, ALARM_OUT_Log_Message_ID_1, ALARM_OUT_Visual_Notification_Message_1, Max_Alarm_Level_1, audioTimer_1, cancelAlarm_1, currentAlarm_1, idAlarmSubSystem_Alarms_1, idAlarms_CheckAlarm_1, idAlarms_Notification_1, idCheckAlarm_CancelAlarm_1, idCheckAlarm_Level1_1, idCheckAlarm_Level2_1, idCheckAlarm_Level3_1, idCheckAlarm_Level4_1, idLevel1_IsBatteryError_1, idLevel1_IsConfigTimeWarning_1, idLevel1_IsFlowRateNotStable_1, idLevel1_IsIdleTimeExceeded_1, idLevel1_IsLoggingFailed_1, idLevel1_IsPausedTimeExceeded_1, idLevel1_IsPumpHot_1, idLevel1_IsSystemMonitorFailed_1, idLevel1_IsUnderInfusion_1, idLevel2_IsLowReservoir_1, idLevel3_IsAirInLine_1, idLevel3_IsDoor_Open_1, idLevel3_IsOcclusion_1, idLevel3_IsOverInfusionFlowRate_1, idLevel3_IsOverInfusionVTBI_1, idLevel4_IsEmptyReservoir_1, idLevel4_IsEnviromentalError_1, idLevel4_IsHardwareError_1, idNotification_Audio_1, idNotification_Visual_1, idletimer_1, overInfusion_1, pausedtimer_1, previousAlarm_1, underInfusion_1);

	--add unused variables
	(overInfusionTimer, underInfusionTimer) 
	= (overInfusionTimer_1, underInfusionTimer_1);
	

	tel

	until true restart POINTAlarmSubSystem_AlarmSubSystem



	state ALARMSUBSYSTEM_ALARMS__TO__ALARMSUBSYSTEM_NOT_ON_1:

	 var 	idAlarmSubSystem_AlarmSubSystem_2, idAlarmSubSystem_AlarmSubSystem_3:int;
	ALARM_OUT_Audio_Notification_Command_2:int;
	ALARM_OUT_Highest_Level_Alarm_2:int;
	ALARM_OUT_Is_Audio_Disabled_2:int;
	ALARM_OUT_Visual_Notification_Message_2:int;
	Max_Alarm_Level_2:int;
	cancelAlarm_2:int;
	currentAlarm_2:int;
	idAlarmSubSystem_Alarms_2:int;
	idAlarms_CheckAlarm_2:int;
	idAlarms_Notification_2:int;
	idCheckAlarm_CancelAlarm_2:int;
	idCheckAlarm_Level1_2:int;
	idCheckAlarm_Level2_2:int;
	idCheckAlarm_Level3_2:int;
	idCheckAlarm_Level4_2:int;
	idLevel1_IsBatteryError_2:int;
	idLevel1_IsConfigTimeWarning_2:int;
	idLevel1_IsFlowRateNotStable_2:int;
	idLevel1_IsIdleTimeExceeded_2:int;
	idLevel1_IsLoggingFailed_2:int;
	idLevel1_IsPausedTimeExceeded_2:int;
	idLevel1_IsPumpHot_2:int;
	idLevel1_IsSystemMonitorFailed_2:int;
	idLevel1_IsUnderInfusion_2:int;
	idLevel2_IsLowReservoir_2:int;
	idLevel3_IsAirInLine_2:int;
	idLevel3_IsDoor_Open_2:int;
	idLevel3_IsOcclusion_2:int;
	idLevel3_IsOverInfusionFlowRate_2:int;
	idLevel3_IsOverInfusionVTBI_2:int;
	idLevel4_IsEmptyReservoir_2:int;
	idLevel4_IsEnviromentalError_2:int;
	idLevel4_IsHardwareError_2:int;
	idNotification_Audio_2:int;
	idNotification_Visual_2:int;
	idletimer_2:int;
	overInfusion_2:int;
	pausedtimer_2:int;
	underInfusion_2:int;
	let

		-- transition trace :
	--AlarmSubSystem_Alarms__To__AlarmSubSystem_NOT_ON_1
		(ALARM_OUT_Audio_Notification_Command_2, idNotification_Audio_2, ALARM_OUT_Is_Audio_Disabled_2, idAlarms_Notification_2, ALARM_OUT_Visual_Notification_Message_2, currentAlarm_2, idNotification_Visual_2, idAlarmSubSystem_Alarms_2, ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2, cancelAlarm_2, idAlarms_CheckAlarm_2, idCheckAlarm_CancelAlarm_2, idCheckAlarm_Level1_2, idCheckAlarm_Level2_2, idCheckAlarm_Level3_2, idCheckAlarm_Level4_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idLevel1_IsLoggingFailed_2, idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPumpHot_2, idLevel1_IsSystemMonitorFailed_2, idLevel1_IsUnderInfusion_2, idLevel2_IsLowReservoir_2, idLevel3_IsAirInLine_2, idLevel3_IsDoor_Open_2, idLevel3_IsOcclusion_2, idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionVTBI_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsEnviromentalError_2, idLevel4_IsHardwareError_2, idletimer_2, overInfusion_2, pausedtimer_2, underInfusion_2, idAlarmSubSystem_AlarmSubSystem_2) 
	= AlarmSubSystem_Alarms_ex(CONST_IN_Audio_Level, ALARM_OUT_Audio_Notification_Command_1, idNotification_Audio_1, OP_CMD_IN_Disable_Audio, ALARM_OUT_Is_Audio_Disabled_1, idAlarms_Notification_1, ALARM_OUT_Visual_Notification_Message_1, currentAlarm_1, idNotification_Visual_1, idAlarmSubSystem_Alarms_1, ALARM_OUT_Highest_Level_Alarm_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, DB_IN_Flow_Rate_Low, IM_IN_Flow_Rate_Commanded, Max_Alarm_Level_1, SENSOR_IN_Flow_Rate_Monitored, SYS_STAT_IN_In_Therapy, cancelAlarm_1, idAlarms_CheckAlarm_1, idCheckAlarm_CancelAlarm_1, idCheckAlarm_Level1_1, idCheckAlarm_Level2_1, idCheckAlarm_Level3_1, idCheckAlarm_Level4_1, idLevel1_IsBatteryError_1, idLevel1_IsConfigTimeWarning_1, idLevel1_IsFlowRateNotStable_1, idLevel1_IsIdleTimeExceeded_1, idLevel1_IsLoggingFailed_1, idLevel1_IsPausedTimeExceeded_1, idLevel1_IsPumpHot_1, idLevel1_IsSystemMonitorFailed_1, idLevel1_IsUnderInfusion_1, idLevel2_IsLowReservoir_1, idLevel3_IsAirInLine_1, idLevel3_IsDoor_Open_1, idLevel3_IsOcclusion_1, idLevel3_IsOverInfusionFlowRate_1, idLevel3_IsOverInfusionVTBI_1, idLevel4_IsEmptyReservoir_1, idLevel4_IsEnviromentalError_1, idLevel4_IsHardwareError_1, idletimer_1, overInfusion_1, pausedtimer_1, underInfusion_1, idAlarmSubSystem_AlarmSubSystem_1, false);
		

		(idAlarmSubSystem_AlarmSubSystem_3) 
	= AlarmSubSystem_NOT_ON_en(idAlarmSubSystem_AlarmSubSystem_2, false);
		

	(idAlarmSubSystem_AlarmSubSystem, ALARM_OUT_Audio_Notification_Command, ALARM_OUT_Highest_Level_Alarm, ALARM_OUT_Is_Audio_Disabled, ALARM_OUT_Log_Message_ID, ALARM_OUT_Visual_Notification_Message, Max_Alarm_Level, audioTimer, cancelAlarm, currentAlarm, idAlarmSubSystem_Alarms, idAlarms_CheckAlarm, idAlarms_Notification, idCheckAlarm_CancelAlarm, idCheckAlarm_Level1, idCheckAlarm_Level2, idCheckAlarm_Level3, idCheckAlarm_Level4, idLevel1_IsBatteryError, idLevel1_IsConfigTimeWarning, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idLevel1_IsLoggingFailed, idLevel1_IsPausedTimeExceeded, idLevel1_IsPumpHot, idLevel1_IsSystemMonitorFailed, idLevel1_IsUnderInfusion, idLevel2_IsLowReservoir, idLevel3_IsAirInLine, idLevel3_IsDoor_Open, idLevel3_IsOcclusion, idLevel3_IsOverInfusionFlowRate, idLevel3_IsOverInfusionVTBI, idLevel4_IsEmptyReservoir, idLevel4_IsEnviromentalError, idLevel4_IsHardwareError, idNotification_Audio, idNotification_Visual, idletimer, overInfusion, pausedtimer, previousAlarm, underInfusion) 
	=  (idAlarmSubSystem_AlarmSubSystem_3, ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Highest_Level_Alarm_2, ALARM_OUT_Is_Audio_Disabled_2, ALARM_OUT_Log_Message_ID_1, ALARM_OUT_Visual_Notification_Message_2, Max_Alarm_Level_2, audioTimer_1, cancelAlarm_2, currentAlarm_2, idAlarmSubSystem_Alarms_2, idAlarms_CheckAlarm_2, idAlarms_Notification_2, idCheckAlarm_CancelAlarm_2, idCheckAlarm_Level1_2, idCheckAlarm_Level2_2, idCheckAlarm_Level3_2, idCheckAlarm_Level4_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idLevel1_IsLoggingFailed_2, idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPumpHot_2, idLevel1_IsSystemMonitorFailed_2, idLevel1_IsUnderInfusion_2, idLevel2_IsLowReservoir_2, idLevel3_IsAirInLine_2, idLevel3_IsDoor_Open_2, idLevel3_IsOcclusion_2, idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionVTBI_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsEnviromentalError_2, idLevel4_IsHardwareError_2, idNotification_Audio_2, idNotification_Visual_2, idletimer_2, overInfusion_2, pausedtimer_2, previousAlarm_1, underInfusion_2);

	--add unused variables
	(overInfusionTimer, underInfusionTimer) 
	= (overInfusionTimer_1, underInfusionTimer_1);
	

	tel

	until true restart POINTAlarmSubSystem_AlarmSubSystem



	state ALARMSUBSYSTEM_NOT_ON__TO__ALARMSUBSYSTEM_ALARMS_1:

	 var 	idAlarmSubSystem_AlarmSubSystem_2, idAlarmSubSystem_AlarmSubSystem_3:int;
	ALARM_OUT_Audio_Notification_Command_2:int;
	ALARM_OUT_Highest_Level_Alarm_2:int;
	ALARM_OUT_Is_Audio_Disabled_2:int;
	ALARM_OUT_Log_Message_ID_2:int;
	ALARM_OUT_Visual_Notification_Message_2:int;
	Max_Alarm_Level_2:int;
	audioTimer_2:int;
	cancelAlarm_2:int;
	currentAlarm_2:int;
	idAlarmSubSystem_Alarms_2:int;
	idAlarms_CheckAlarm_2:int;
	idAlarms_Notification_2:int;
	idCheckAlarm_CancelAlarm_2:int;
	idCheckAlarm_Level1_2:int;
	idCheckAlarm_Level2_2:int;
	idCheckAlarm_Level3_2:int;
	idCheckAlarm_Level4_2:int;
	idLevel1_IsBatteryError_2:int;
	idLevel1_IsConfigTimeWarning_2:int;
	idLevel1_IsFlowRateNotStable_2:int;
	idLevel1_IsIdleTimeExceeded_2:int;
	idLevel1_IsLoggingFailed_2:int;
	idLevel1_IsPausedTimeExceeded_2:int;
	idLevel1_IsPumpHot_2:int;
	idLevel1_IsSystemMonitorFailed_2:int;
	idLevel1_IsUnderInfusion_2:int;
	idLevel2_IsLowReservoir_2:int;
	idLevel3_IsAirInLine_2:int;
	idLevel3_IsDoor_Open_2:int;
	idLevel3_IsOcclusion_2:int;
	idLevel3_IsOverInfusionFlowRate_2:int;
	idLevel3_IsOverInfusionVTBI_2:int;
	idLevel4_IsEmptyReservoir_2:int;
	idLevel4_IsEnviromentalError_2:int;
	idLevel4_IsHardwareError_2:int;
	idNotification_Audio_2:int;
	idNotification_Visual_2:int;
	idletimer_2:int;
	overInfusion_2:int;
	pausedtimer_2:int;
	previousAlarm_2:int;
	underInfusion_2:int;
	let

		-- transition trace :
	--AlarmSubSystem_NOT_ON__To__AlarmSubSystem_Alarms_1
		(idAlarmSubSystem_AlarmSubSystem_2) 
	= AlarmSubSystem_NOT_ON_ex(idAlarmSubSystem_AlarmSubSystem_1, false);
		

		(idAlarmSubSystem_Alarms_2, idAlarmSubSystem_AlarmSubSystem_3, ALARM_OUT_Highest_Level_Alarm_2, ALARM_OUT_Log_Message_ID_2, Max_Alarm_Level_2, cancelAlarm_2, currentAlarm_2, idAlarms_CheckAlarm_2, idCheckAlarm_CancelAlarm_2, idCheckAlarm_Level1_2, idCheckAlarm_Level2_2, idCheckAlarm_Level3_2, idCheckAlarm_Level4_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idLevel1_IsLoggingFailed_2, idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPumpHot_2, idLevel1_IsSystemMonitorFailed_2, idLevel1_IsUnderInfusion_2, idLevel2_IsLowReservoir_2, idLevel3_IsAirInLine_2, idLevel3_IsDoor_Open_2, idLevel3_IsOcclusion_2, idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionVTBI_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsEnviromentalError_2, idLevel4_IsHardwareError_2, idletimer_2, overInfusion_2, pausedtimer_2, underInfusion_2, ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Is_Audio_Disabled_2, ALARM_OUT_Visual_Notification_Message_2, audioTimer_2, idAlarms_Notification_2, idNotification_Audio_2, idNotification_Visual_2, previousAlarm_2) 
	= AlarmSubSystem_Alarms_en(idAlarmSubSystem_Alarms_1, idAlarmSubSystem_AlarmSubSystem_2, ALARM_OUT_Highest_Level_Alarm_1, ALARM_OUT_Log_Message_ID_1, CONFIG_IN_Config_Timer, CONST_IN_Config_Warning_Duration, CONST_IN_Low_Reservoir, CONST_IN_Max_Idle_Duration, CONST_IN_Max_Paused_Duration, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, DB_IN_Flow_Rate_Low, DB_IN_VTBI_High, IM_IN_Current_System_Mode, IM_IN_Flow_Rate_Commanded, LOGGING_IN_Logging_Failed, Max_Alarm_Level_1, SENSOR_IN_Air_In_line, SENSOR_IN_Air_Pressure_Out_Of_Range, SENSOR_IN_Battery_Depleted, SENSOR_IN_Battery_Low, SENSOR_IN_Battery_Unable_To_Charge, SENSOR_IN_CPU_Error, SENSOR_IN_Door_Open, SENSOR_IN_Flow_Rate_Monitored, SENSOR_IN_Flow_Rate_Not_Stable, SENSOR_IN_Humidity_Out_Of_Range, SENSOR_IN_Memory_Corrupted, SENSOR_IN_Occlusion, SENSOR_IN_Pump_Overheated, SENSOR_IN_Pump_Too_Hot, SENSOR_IN_RTC_Error, SENSOR_IN_Supply_Voltage_Out_Of_Range, SENSOR_IN_Temperature_Out_Of_Range, SENSOR_IN_WatchDog_Interrupt_Detected, SYS_MON_IN_System_Monitor_Failed, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Reservoir_Empty, SYS_STAT_IN_Reservoir_Volume, SYS_STAT_IN_Volume_Infused, cancelAlarm_1, currentAlarm_1, idAlarms_CheckAlarm_1, idCheckAlarm_CancelAlarm_1, idCheckAlarm_Level1_1, idCheckAlarm_Level2_1, idCheckAlarm_Level3_1, idCheckAlarm_Level4_1, idLevel1_IsBatteryError_1, idLevel1_IsConfigTimeWarning_1, idLevel1_IsFlowRateNotStable_1, idLevel1_IsIdleTimeExceeded_1, idLevel1_IsLoggingFailed_1, idLevel1_IsPausedTimeExceeded_1, idLevel1_IsPumpHot_1, idLevel1_IsSystemMonitorFailed_1, idLevel1_IsUnderInfusion_1, idLevel2_IsLowReservoir_1, idLevel3_IsAirInLine_1, idLevel3_IsDoor_Open_1, idLevel3_IsOcclusion_1, idLevel3_IsOverInfusionFlowRate_1, idLevel3_IsOverInfusionVTBI_1, idLevel4_IsEmptyReservoir_1, idLevel4_IsEnviromentalError_1, idLevel4_IsHardwareError_1, idletimer_1, overInfusion_1, pausedtimer_1, step_size, underInfusion_1, ALARM_OUT_Audio_Notification_Command_1, ALARM_OUT_Is_Audio_Disabled_1, ALARM_OUT_Visual_Notification_Message_1, CONST_IN_Audio_Level, OP_CMD_IN_Disable_Audio, audioTimer_1, idAlarms_Notification_1, idNotification_Audio_1, idNotification_Visual_1, previousAlarm_1, false);
		

	(idAlarmSubSystem_AlarmSubSystem, ALARM_OUT_Audio_Notification_Command, ALARM_OUT_Highest_Level_Alarm, ALARM_OUT_Is_Audio_Disabled, ALARM_OUT_Log_Message_ID, ALARM_OUT_Visual_Notification_Message, Max_Alarm_Level, audioTimer, cancelAlarm, currentAlarm, idAlarmSubSystem_Alarms, idAlarms_CheckAlarm, idAlarms_Notification, idCheckAlarm_CancelAlarm, idCheckAlarm_Level1, idCheckAlarm_Level2, idCheckAlarm_Level3, idCheckAlarm_Level4, idLevel1_IsBatteryError, idLevel1_IsConfigTimeWarning, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idLevel1_IsLoggingFailed, idLevel1_IsPausedTimeExceeded, idLevel1_IsPumpHot, idLevel1_IsSystemMonitorFailed, idLevel1_IsUnderInfusion, idLevel2_IsLowReservoir, idLevel3_IsAirInLine, idLevel3_IsDoor_Open, idLevel3_IsOcclusion, idLevel3_IsOverInfusionFlowRate, idLevel3_IsOverInfusionVTBI, idLevel4_IsEmptyReservoir, idLevel4_IsEnviromentalError, idLevel4_IsHardwareError, idNotification_Audio, idNotification_Visual, idletimer, overInfusion, pausedtimer, previousAlarm, underInfusion) 
	=  (idAlarmSubSystem_AlarmSubSystem_3, ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Highest_Level_Alarm_2, ALARM_OUT_Is_Audio_Disabled_2, ALARM_OUT_Log_Message_ID_2, ALARM_OUT_Visual_Notification_Message_2, Max_Alarm_Level_2, audioTimer_2, cancelAlarm_2, currentAlarm_2, idAlarmSubSystem_Alarms_2, idAlarms_CheckAlarm_2, idAlarms_Notification_2, idCheckAlarm_CancelAlarm_2, idCheckAlarm_Level1_2, idCheckAlarm_Level2_2, idCheckAlarm_Level3_2, idCheckAlarm_Level4_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idLevel1_IsLoggingFailed_2, idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPumpHot_2, idLevel1_IsSystemMonitorFailed_2, idLevel1_IsUnderInfusion_2, idLevel2_IsLowReservoir_2, idLevel3_IsAirInLine_2, idLevel3_IsDoor_Open_2, idLevel3_IsOcclusion_2, idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionVTBI_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsEnviromentalError_2, idLevel4_IsHardwareError_2, idNotification_Audio_2, idNotification_Visual_2, idletimer_2, overInfusion_2, pausedtimer_2, previousAlarm_2, underInfusion_2);

	--add unused variables
	(overInfusionTimer, underInfusionTimer) 
	= (overInfusionTimer_1, underInfusionTimer_1);
	

	tel

	until true restart POINTAlarmSubSystem_AlarmSubSystem



	state ALARMSUBSYSTEM_ALARMS_IDL:

	 var 	ALARM_OUT_Audio_Notification_Command_2:int;
	ALARM_OUT_Highest_Level_Alarm_2:int;
	ALARM_OUT_Is_Audio_Disabled_2:int;
	ALARM_OUT_Log_Message_ID_2:int;
	ALARM_OUT_Visual_Notification_Message_2:int;
	Max_Alarm_Level_2:int;
	audioTimer_2:int;
	cancelAlarm_2:int;
	currentAlarm_2, currentAlarm_3:int;
	idAlarms_CheckAlarm_2:int;
	idAlarms_Notification_2:int;
	idCheckAlarm_CancelAlarm_2:int;
	idCheckAlarm_Level1_2:int;
	idCheckAlarm_Level2_2:int;
	idCheckAlarm_Level3_2:int;
	idCheckAlarm_Level4_2:int;
	idLevel1_IsBatteryError_2:int;
	idLevel1_IsConfigTimeWarning_2:int;
	idLevel1_IsFlowRateNotStable_2:int;
	idLevel1_IsIdleTimeExceeded_2:int;
	idLevel1_IsLoggingFailed_2:int;
	idLevel1_IsPausedTimeExceeded_2:int;
	idLevel1_IsPumpHot_2:int;
	idLevel1_IsSystemMonitorFailed_2:int;
	idLevel1_IsUnderInfusion_2:int;
	idLevel2_IsLowReservoir_2:int;
	idLevel3_IsAirInLine_2:int;
	idLevel3_IsDoor_Open_2:int;
	idLevel3_IsOcclusion_2:int;
	idLevel3_IsOverInfusionFlowRate_2:int;
	idLevel3_IsOverInfusionVTBI_2:int;
	idLevel4_IsEmptyReservoir_2:int;
	idLevel4_IsEnviromentalError_2:int;
	idLevel4_IsHardwareError_2:int;
	idNotification_Audio_2:int;
	idNotification_Visual_2:int;
	idletimer_2:int;
	overInfusion_2:int;
	pausedtimer_2:int;
	previousAlarm_2:int;
	underInfusion_2:int;
	overInfusionTimer_2:int;
	underInfusionTimer_2:int;
	let

		

		(idAlarms_CheckAlarm_2, ALARM_OUT_Log_Message_ID_2, cancelAlarm_2, currentAlarm_2, idCheckAlarm_CancelAlarm_2, idCheckAlarm_Level4_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsEnviromentalError_2, idLevel4_IsHardwareError_2, idCheckAlarm_Level3_2, idLevel3_IsAirInLine_2, idLevel3_IsDoor_Open_2, idLevel3_IsOcclusion_2, idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionVTBI_2, overInfusion_2, idCheckAlarm_Level2_2, idLevel2_IsLowReservoir_2, idCheckAlarm_Level1_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idLevel1_IsLoggingFailed_2, idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPumpHot_2, idLevel1_IsSystemMonitorFailed_2, idLevel1_IsUnderInfusion_2, idletimer_2, pausedtimer_2, underInfusion_2, ALARM_OUT_Highest_Level_Alarm_2, Max_Alarm_Level_2, overInfusionTimer_2, underInfusionTimer_2)
	= if not (idAlarms_CheckAlarm_1= 0 ) then Alarms_CheckAlarm_node(idAlarms_CheckAlarm_1, ALARM_OUT_Log_Message_ID_1, cancelAlarm_1, currentAlarm_1, idCheckAlarm_CancelAlarm_1, SENSOR_IN_Air_Pressure_Out_Of_Range, SENSOR_IN_Battery_Depleted, SENSOR_IN_CPU_Error, SENSOR_IN_Humidity_Out_Of_Range, SENSOR_IN_Memory_Corrupted, SENSOR_IN_Pump_Too_Hot, SENSOR_IN_RTC_Error, SENSOR_IN_Temperature_Out_Of_Range, SENSOR_IN_WatchDog_Interrupt_Detected, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Reservoir_Empty, idCheckAlarm_Level4_1, idLevel4_IsEmptyReservoir_1, idLevel4_IsEnviromentalError_1, idLevel4_IsHardwareError_1, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, DB_IN_VTBI_High, IM_IN_Flow_Rate_Commanded, SENSOR_IN_Air_In_line, SENSOR_IN_Door_Open, SENSOR_IN_Flow_Rate_Monitored, SENSOR_IN_Occlusion, SYS_STAT_IN_Volume_Infused, idCheckAlarm_Level3_1, idLevel3_IsAirInLine_1, idLevel3_IsDoor_Open_1, idLevel3_IsOcclusion_1, idLevel3_IsOverInfusionFlowRate_1, idLevel3_IsOverInfusionVTBI_1, overInfusion_1, CONST_IN_Low_Reservoir, SYS_STAT_IN_Reservoir_Volume, idCheckAlarm_Level2_1, idLevel2_IsLowReservoir_1, CONFIG_IN_Config_Timer, CONST_IN_Config_Warning_Duration, CONST_IN_Max_Idle_Duration, CONST_IN_Max_Paused_Duration, DB_IN_Flow_Rate_Low, IM_IN_Current_System_Mode, LOGGING_IN_Logging_Failed, SENSOR_IN_Battery_Low, SENSOR_IN_Battery_Unable_To_Charge, SENSOR_IN_Flow_Rate_Not_Stable, SENSOR_IN_Pump_Overheated, SENSOR_IN_Supply_Voltage_Out_Of_Range, SYS_MON_IN_System_Monitor_Failed, idCheckAlarm_Level1_1, idLevel1_IsBatteryError_1, idLevel1_IsConfigTimeWarning_1, idLevel1_IsFlowRateNotStable_1, idLevel1_IsIdleTimeExceeded_1, idLevel1_IsLoggingFailed_1, idLevel1_IsPausedTimeExceeded_1, idLevel1_IsPumpHot_1, idLevel1_IsSystemMonitorFailed_1, idLevel1_IsUnderInfusion_1, idletimer_1, pausedtimer_1, step_size, underInfusion_1, ALARM_OUT_Highest_Level_Alarm_1, Max_Alarm_Level_1, OP_CMD_IN_Notification_Cancel, CONST_IN_Max_Duration_Over_Infusion, overInfusionTimer_1, CONST_IN_Max_Duration_Under_Infusion, underInfusionTimer_1)

		 else (idAlarms_CheckAlarm_1, ALARM_OUT_Log_Message_ID_1, cancelAlarm_1, currentAlarm_1, idCheckAlarm_CancelAlarm_1, idCheckAlarm_Level4_1, idLevel4_IsEmptyReservoir_1, idLevel4_IsEnviromentalError_1, idLevel4_IsHardwareError_1, idCheckAlarm_Level3_1, idLevel3_IsAirInLine_1, idLevel3_IsDoor_Open_1, idLevel3_IsOcclusion_1, idLevel3_IsOverInfusionFlowRate_1, idLevel3_IsOverInfusionVTBI_1, overInfusion_1, idCheckAlarm_Level2_1, idLevel2_IsLowReservoir_1, idCheckAlarm_Level1_1, idLevel1_IsBatteryError_1, idLevel1_IsConfigTimeWarning_1, idLevel1_IsFlowRateNotStable_1, idLevel1_IsIdleTimeExceeded_1, idLevel1_IsLoggingFailed_1, idLevel1_IsPausedTimeExceeded_1, idLevel1_IsPumpHot_1, idLevel1_IsSystemMonitorFailed_1, idLevel1_IsUnderInfusion_1, idletimer_1, pausedtimer_1, underInfusion_1, ALARM_OUT_Highest_Level_Alarm_1, Max_Alarm_Level_1, overInfusionTimer_1, underInfusionTimer_1);

		

		

		(idAlarms_Notification_2, ALARM_OUT_Visual_Notification_Message_2, currentAlarm_3, idNotification_Visual_2, previousAlarm_2, ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Is_Audio_Disabled_2, audioTimer_2, idNotification_Audio_2)
	= if not (idAlarms_Notification_1= 0 ) then Alarms_Notification_node(idAlarms_Notification_1, ALARM_OUT_Visual_Notification_Message_1, currentAlarm_2, idNotification_Visual_1, previousAlarm_1, ALARM_OUT_Audio_Notification_Command_1, ALARM_OUT_Highest_Level_Alarm_2, ALARM_OUT_Is_Audio_Disabled_1, CONST_IN_Audio_Level, OP_CMD_IN_Disable_Audio, audioTimer_1, idNotification_Audio_1, CONST_IN_Audio_Auto_Enable_Duration, step_size)

		 else (idAlarms_Notification_1, ALARM_OUT_Visual_Notification_Message_1, currentAlarm_2, idNotification_Visual_1, previousAlarm_1, ALARM_OUT_Audio_Notification_Command_1, ALARM_OUT_Is_Audio_Disabled_1, audioTimer_1, idNotification_Audio_1);

		

		

	(idAlarmSubSystem_AlarmSubSystem, ALARM_OUT_Audio_Notification_Command, ALARM_OUT_Highest_Level_Alarm, ALARM_OUT_Is_Audio_Disabled, ALARM_OUT_Log_Message_ID, ALARM_OUT_Visual_Notification_Message, Max_Alarm_Level, audioTimer, cancelAlarm, currentAlarm, idAlarmSubSystem_Alarms, idAlarms_CheckAlarm, idAlarms_Notification, idCheckAlarm_CancelAlarm, idCheckAlarm_Level1, idCheckAlarm_Level2, idCheckAlarm_Level3, idCheckAlarm_Level4, idLevel1_IsBatteryError, idLevel1_IsConfigTimeWarning, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idLevel1_IsLoggingFailed, idLevel1_IsPausedTimeExceeded, idLevel1_IsPumpHot, idLevel1_IsSystemMonitorFailed, idLevel1_IsUnderInfusion, idLevel2_IsLowReservoir, idLevel3_IsAirInLine, idLevel3_IsDoor_Open, idLevel3_IsOcclusion, idLevel3_IsOverInfusionFlowRate, idLevel3_IsOverInfusionVTBI, idLevel4_IsEmptyReservoir, idLevel4_IsEnviromentalError, idLevel4_IsHardwareError, idNotification_Audio, idNotification_Visual, idletimer, overInfusion, pausedtimer, previousAlarm, underInfusion, overInfusionTimer, underInfusionTimer) 
	= (idAlarmSubSystem_AlarmSubSystem_1, ALARM_OUT_Audio_Notification_Command_2, ALARM_OUT_Highest_Level_Alarm_2, ALARM_OUT_Is_Audio_Disabled_2, ALARM_OUT_Log_Message_ID_2, ALARM_OUT_Visual_Notification_Message_2, Max_Alarm_Level_2, audioTimer_2, cancelAlarm_2, currentAlarm_3, idAlarmSubSystem_Alarms_1, idAlarms_CheckAlarm_2, idAlarms_Notification_2, idCheckAlarm_CancelAlarm_2, idCheckAlarm_Level1_2, idCheckAlarm_Level2_2, idCheckAlarm_Level3_2, idCheckAlarm_Level4_2, idLevel1_IsBatteryError_2, idLevel1_IsConfigTimeWarning_2, idLevel1_IsFlowRateNotStable_2, idLevel1_IsIdleTimeExceeded_2, idLevel1_IsLoggingFailed_2, idLevel1_IsPausedTimeExceeded_2, idLevel1_IsPumpHot_2, idLevel1_IsSystemMonitorFailed_2, idLevel1_IsUnderInfusion_2, idLevel2_IsLowReservoir_2, idLevel3_IsAirInLine_2, idLevel3_IsDoor_Open_2, idLevel3_IsOcclusion_2, idLevel3_IsOverInfusionFlowRate_2, idLevel3_IsOverInfusionVTBI_2, idLevel4_IsEmptyReservoir_2, idLevel4_IsEnviromentalError_2, idLevel4_IsHardwareError_2, idNotification_Audio_2, idNotification_Visual_2, idletimer_2, overInfusion_2, pausedtimer_2, previousAlarm_2, underInfusion_2, overInfusionTimer_2, underInfusionTimer_2);
	

	tel

	until true restart POINTAlarmSubSystem_AlarmSubSystem



	state ALARMSUBSYSTEM_NOT_ON_IDL:

	 	let

		

	(idAlarmSubSystem_AlarmSubSystem, ALARM_OUT_Audio_Notification_Command, ALARM_OUT_Highest_Level_Alarm, ALARM_OUT_Is_Audio_Disabled, ALARM_OUT_Log_Message_ID, ALARM_OUT_Visual_Notification_Message, Max_Alarm_Level, audioTimer, cancelAlarm, currentAlarm, idAlarmSubSystem_Alarms, idAlarms_CheckAlarm, idAlarms_Notification, idCheckAlarm_CancelAlarm, idCheckAlarm_Level1, idCheckAlarm_Level2, idCheckAlarm_Level3, idCheckAlarm_Level4, idLevel1_IsBatteryError, idLevel1_IsConfigTimeWarning, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idLevel1_IsLoggingFailed, idLevel1_IsPausedTimeExceeded, idLevel1_IsPumpHot, idLevel1_IsSystemMonitorFailed, idLevel1_IsUnderInfusion, idLevel2_IsLowReservoir, idLevel3_IsAirInLine, idLevel3_IsDoor_Open, idLevel3_IsOcclusion, idLevel3_IsOverInfusionFlowRate, idLevel3_IsOverInfusionVTBI, idLevel4_IsEmptyReservoir, idLevel4_IsEnviromentalError, idLevel4_IsHardwareError, idNotification_Audio, idNotification_Visual, idletimer, overInfusion, pausedtimer, previousAlarm, underInfusion, overInfusionTimer, underInfusionTimer) 
	= (idAlarmSubSystem_AlarmSubSystem_1, ALARM_OUT_Audio_Notification_Command_1, ALARM_OUT_Highest_Level_Alarm_1, ALARM_OUT_Is_Audio_Disabled_1, ALARM_OUT_Log_Message_ID_1, ALARM_OUT_Visual_Notification_Message_1, Max_Alarm_Level_1, audioTimer_1, cancelAlarm_1, currentAlarm_1, idAlarmSubSystem_Alarms_1, idAlarms_CheckAlarm_1, idAlarms_Notification_1, idCheckAlarm_CancelAlarm_1, idCheckAlarm_Level1_1, idCheckAlarm_Level2_1, idCheckAlarm_Level3_1, idCheckAlarm_Level4_1, idLevel1_IsBatteryError_1, idLevel1_IsConfigTimeWarning_1, idLevel1_IsFlowRateNotStable_1, idLevel1_IsIdleTimeExceeded_1, idLevel1_IsLoggingFailed_1, idLevel1_IsPausedTimeExceeded_1, idLevel1_IsPumpHot_1, idLevel1_IsSystemMonitorFailed_1, idLevel1_IsUnderInfusion_1, idLevel2_IsLowReservoir_1, idLevel3_IsAirInLine_1, idLevel3_IsDoor_Open_1, idLevel3_IsOcclusion_1, idLevel3_IsOverInfusionFlowRate_1, idLevel3_IsOverInfusionVTBI_1, idLevel4_IsEmptyReservoir_1, idLevel4_IsEnviromentalError_1, idLevel4_IsHardwareError_1, idNotification_Audio_1, idNotification_Visual_1, idletimer_1, overInfusion_1, pausedtimer_1, previousAlarm_1, underInfusion_1, overInfusionTimer_1, underInfusionTimer_1);
	

	tel

	until true restart POINTAlarmSubSystem_AlarmSubSystem



tel


--***************************************************State :AlarmSubSystem_AlarmSubSystem Automaton***************************************************

node GPCA_Alarm_AlarmSubSystem(IM_IN_Flow_Rate_Commanded:int;
	IM_IN_Current_System_Mode:int;
	TLM_MODE_IN_System_On:bool;
	SYS_MON_IN_System_Monitor_Failed:bool;
	LOGGING_IN_Logging_Failed:bool;
	OP_CMD_IN_Disable_Audio:int;
	OP_CMD_IN_Notification_Cancel:bool;
	DB_IN_Flow_Rate_High:int;
	DB_IN_Flow_Rate_Low:int;
	DB_IN_VTBI_High:int;
	SENSOR_IN_Flow_Rate_Monitored:int;
	SENSOR_IN_Flow_Rate_Not_Stable:bool;
	SENSOR_IN_Air_In_line:bool;
	SENSOR_IN_Occlusion:bool;
	SENSOR_IN_Door_Open:bool;
	SENSOR_IN_Air_Pressure_Out_Of_Range:bool;
	SENSOR_IN_Temperature_Out_Of_Range:bool;
	SENSOR_IN_Humidity_Out_Of_Range:bool;
	SENSOR_IN_Battery_Depleted:bool;
	SENSOR_IN_Battery_Low:bool;
	SENSOR_IN_Battery_Unable_To_Charge:bool;
	SENSOR_IN_Supply_Voltage_Out_Of_Range:bool;
	SENSOR_IN_CPU_Error:bool;
	SENSOR_IN_RTC_Error:bool;
	SENSOR_IN_WatchDog_Interrupt_Detected:bool;
	SENSOR_IN_Memory_Corrupted:bool;
	SENSOR_IN_Pump_Overheated:bool;
	SENSOR_IN_Pump_Too_Hot:bool;
	CONST_IN_Audio_Auto_Enable_Duration:int;
	CONST_IN_Audio_Level:int;
	CONST_IN_Low_Reservoir:int;
	CONST_IN_Max_Duration_Over_Infusion:int;
	CONST_IN_Max_Duration_Under_Infusion:int;
	CONST_IN_Tolerance_Max:int;
	CONST_IN_Tolerance_Min:int;
	CONST_IN_Config_Warning_Duration:int;
	CONST_IN_Max_Idle_Duration:int;
	CONST_IN_Max_Paused_Duration:int;
	SYS_STAT_IN_Reservoir_Empty:bool;
	SYS_STAT_IN_Reservoir_Volume:int;
	SYS_STAT_IN_Volume_Infused:int;
	SYS_STAT_IN_In_Therapy:bool;
	CONFIG_IN_Config_Timer:int)

returns (ALARM_OUT_Is_Audio_Disabled:int;
	ALARM_OUT_Visual_Notification_Message:int;
	ALARM_OUT_Audio_Notification_Command:int;
	ALARM_OUT_Highest_Level_Alarm:int;
	ALARM_OUT_Log_Message_ID:int);


var ALARM_OUT_Is_Audio_Disabled_1: int;

	ALARM_OUT_Visual_Notification_Message_1: int;

	ALARM_OUT_Audio_Notification_Command_1: int;

	ALARM_OUT_Highest_Level_Alarm_1: int;

	ALARM_OUT_Log_Message_ID_1: int;

	Max_Alarm_Level, Max_Alarm_Level_1: int;

	audioTimer, audioTimer_1: int;

	cancelAlarm, cancelAlarm_1: int;

	currentAlarm, currentAlarm_1: int;

	idletimer, idletimer_1: int;

	overInfusion, overInfusion_1: int;

	overInfusionTimer, overInfusionTimer_1: int;

	pausedtimer, pausedtimer_1: int;

	previousAlarm, previousAlarm_1: int;

	underInfusion, underInfusion_1: int;

	underInfusionTimer, underInfusionTimer_1: int;

	idAlarmSubSystem_AlarmSubSystem, idAlarmSubSystem_AlarmSubSystem_1: int;

	idAlarmSubSystem_Alarms, idAlarmSubSystem_Alarms_1: int;

	idAlarms_CheckAlarm, idAlarms_CheckAlarm_1: int;

	idAlarms_Notification, idAlarms_Notification_1: int;

	idCheckAlarm_CancelAlarm, idCheckAlarm_CancelAlarm_1: int;

	idCheckAlarm_Level4, idCheckAlarm_Level4_1: int;

	idCheckAlarm_Level3, idCheckAlarm_Level3_1: int;

	idCheckAlarm_Level2, idCheckAlarm_Level2_1: int;

	idCheckAlarm_Level1, idCheckAlarm_Level1_1: int;

	idNotification_Visual, idNotification_Visual_1: int;

	idNotification_Audio, idNotification_Audio_1: int;

	idLevel4_IsEmptyReservoir, idLevel4_IsEmptyReservoir_1: int;

	idLevel4_IsHardwareError, idLevel4_IsHardwareError_1: int;

	idLevel4_IsEnviromentalError, idLevel4_IsEnviromentalError_1: int;

	idLevel3_IsOverInfusionFlowRate, idLevel3_IsOverInfusionFlowRate_1: int;

	idLevel3_IsOverInfusionVTBI, idLevel3_IsOverInfusionVTBI_1: int;

	idLevel3_IsAirInLine, idLevel3_IsAirInLine_1: int;

	idLevel3_IsOcclusion, idLevel3_IsOcclusion_1: int;

	idLevel3_IsDoor_Open, idLevel3_IsDoor_Open_1: int;

	idLevel2_IsLowReservoir, idLevel2_IsLowReservoir_1: int;

	idLevel1_IsUnderInfusion, idLevel1_IsUnderInfusion_1: int;

	idLevel1_IsFlowRateNotStable, idLevel1_IsFlowRateNotStable_1: int;

	idLevel1_IsPausedTimeExceeded, idLevel1_IsPausedTimeExceeded_1: int;

	idLevel1_IsIdleTimeExceeded, idLevel1_IsIdleTimeExceeded_1: int;

	idLevel1_IsConfigTimeWarning, idLevel1_IsConfigTimeWarning_1: int;

	idLevel1_IsBatteryError, idLevel1_IsBatteryError_1: int;

	idLevel1_IsPumpHot, idLevel1_IsPumpHot_1: int;

	idLevel1_IsLoggingFailed, idLevel1_IsLoggingFailed_1: int;

	idLevel1_IsSystemMonitorFailed, idLevel1_IsSystemMonitorFailed_1: int;

		step_size: real;

	let

	ALARM_OUT_Is_Audio_Disabled_1 = 0 -> pre ALARM_OUT_Is_Audio_Disabled;

	ALARM_OUT_Visual_Notification_Message_1 = 0 -> pre ALARM_OUT_Visual_Notification_Message;

	ALARM_OUT_Audio_Notification_Command_1 = 0 -> pre ALARM_OUT_Audio_Notification_Command;

	ALARM_OUT_Highest_Level_Alarm_1 = 0 -> pre ALARM_OUT_Highest_Level_Alarm;

	ALARM_OUT_Log_Message_ID_1 = 0 -> pre ALARM_OUT_Log_Message_ID;

	Max_Alarm_Level_1 = 0 -> pre Max_Alarm_Level;

	audioTimer_1 = 0 -> pre audioTimer;

	cancelAlarm_1 = 0 -> pre cancelAlarm;

	currentAlarm_1 = 0 -> pre currentAlarm;

	idletimer_1 = 0 -> pre idletimer;

	overInfusion_1 = 0 -> pre overInfusion;

	overInfusionTimer_1 = 0 -> pre overInfusionTimer;

	pausedtimer_1 = 0 -> pre pausedtimer;

	previousAlarm_1 = 0 -> pre previousAlarm;

	underInfusion_1 = 0 -> pre underInfusion;

	underInfusionTimer_1 = 0 -> pre underInfusionTimer;

	idAlarmSubSystem_AlarmSubSystem_1 = 0 -> pre idAlarmSubSystem_AlarmSubSystem;

	idAlarmSubSystem_Alarms_1 = 0 -> pre idAlarmSubSystem_Alarms;

	idAlarms_CheckAlarm_1 = 0 -> pre idAlarms_CheckAlarm;

	idAlarms_Notification_1 = 0 -> pre idAlarms_Notification;

	idCheckAlarm_CancelAlarm_1 = 0 -> pre idCheckAlarm_CancelAlarm;

	idCheckAlarm_Level4_1 = 0 -> pre idCheckAlarm_Level4;

	idCheckAlarm_Level3_1 = 0 -> pre idCheckAlarm_Level3;

	idCheckAlarm_Level2_1 = 0 -> pre idCheckAlarm_Level2;

	idCheckAlarm_Level1_1 = 0 -> pre idCheckAlarm_Level1;

	idNotification_Visual_1 = 0 -> pre idNotification_Visual;

	idNotification_Audio_1 = 0 -> pre idNotification_Audio;

	idLevel4_IsEmptyReservoir_1 = 0 -> pre idLevel4_IsEmptyReservoir;

	idLevel4_IsHardwareError_1 = 0 -> pre idLevel4_IsHardwareError;

	idLevel4_IsEnviromentalError_1 = 0 -> pre idLevel4_IsEnviromentalError;

	idLevel3_IsOverInfusionFlowRate_1 = 0 -> pre idLevel3_IsOverInfusionFlowRate;

	idLevel3_IsOverInfusionVTBI_1 = 0 -> pre idLevel3_IsOverInfusionVTBI;

	idLevel3_IsAirInLine_1 = 0 -> pre idLevel3_IsAirInLine;

	idLevel3_IsOcclusion_1 = 0 -> pre idLevel3_IsOcclusion;

	idLevel3_IsDoor_Open_1 = 0 -> pre idLevel3_IsDoor_Open;

	idLevel2_IsLowReservoir_1 = 0 -> pre idLevel2_IsLowReservoir;

	idLevel1_IsUnderInfusion_1 = 0 -> pre idLevel1_IsUnderInfusion;

	idLevel1_IsFlowRateNotStable_1 = 0 -> pre idLevel1_IsFlowRateNotStable;

	idLevel1_IsPausedTimeExceeded_1 = 0 -> pre idLevel1_IsPausedTimeExceeded;

	idLevel1_IsIdleTimeExceeded_1 = 0 -> pre idLevel1_IsIdleTimeExceeded;

	idLevel1_IsConfigTimeWarning_1 = 0 -> pre idLevel1_IsConfigTimeWarning;

	idLevel1_IsBatteryError_1 = 0 -> pre idLevel1_IsBatteryError;

	idLevel1_IsPumpHot_1 = 0 -> pre idLevel1_IsPumpHot;

	idLevel1_IsLoggingFailed_1 = 0 -> pre idLevel1_IsLoggingFailed;

	idLevel1_IsSystemMonitorFailed_1 = 0 -> pre idLevel1_IsSystemMonitorFailed;

	step_size = 1.000000;

	



	(idAlarmSubSystem_AlarmSubSystem, ALARM_OUT_Audio_Notification_Command, ALARM_OUT_Highest_Level_Alarm, ALARM_OUT_Is_Audio_Disabled, ALARM_OUT_Log_Message_ID, ALARM_OUT_Visual_Notification_Message, Max_Alarm_Level, audioTimer, cancelAlarm, currentAlarm, idAlarmSubSystem_Alarms, idAlarms_CheckAlarm, idAlarms_Notification, idCheckAlarm_CancelAlarm, idCheckAlarm_Level1, idCheckAlarm_Level2, idCheckAlarm_Level3, idCheckAlarm_Level4, idLevel1_IsBatteryError, idLevel1_IsConfigTimeWarning, idLevel1_IsFlowRateNotStable, idLevel1_IsIdleTimeExceeded, idLevel1_IsLoggingFailed, idLevel1_IsPausedTimeExceeded, idLevel1_IsPumpHot, idLevel1_IsSystemMonitorFailed, idLevel1_IsUnderInfusion, idLevel2_IsLowReservoir, idLevel3_IsAirInLine, idLevel3_IsDoor_Open, idLevel3_IsOcclusion, idLevel3_IsOverInfusionFlowRate, idLevel3_IsOverInfusionVTBI, idLevel4_IsEmptyReservoir, idLevel4_IsEnviromentalError, idLevel4_IsHardwareError, idNotification_Audio, idNotification_Visual, idletimer, overInfusion, pausedtimer, previousAlarm, underInfusion, overInfusionTimer, underInfusionTimer)
	 = AlarmSubSystem_AlarmSubSystem_node(idAlarmSubSystem_AlarmSubSystem_1, TLM_MODE_IN_System_On, ALARM_OUT_Audio_Notification_Command_1, ALARM_OUT_Highest_Level_Alarm_1, ALARM_OUT_Is_Audio_Disabled_1, ALARM_OUT_Log_Message_ID_1, ALARM_OUT_Visual_Notification_Message_1, CONFIG_IN_Config_Timer, CONST_IN_Audio_Level, CONST_IN_Config_Warning_Duration, CONST_IN_Low_Reservoir, CONST_IN_Max_Idle_Duration, CONST_IN_Max_Paused_Duration, CONST_IN_Tolerance_Max, CONST_IN_Tolerance_Min, DB_IN_Flow_Rate_High, DB_IN_Flow_Rate_Low, DB_IN_VTBI_High, IM_IN_Current_System_Mode, IM_IN_Flow_Rate_Commanded, LOGGING_IN_Logging_Failed, Max_Alarm_Level_1, OP_CMD_IN_Disable_Audio, SENSOR_IN_Air_In_line, SENSOR_IN_Air_Pressure_Out_Of_Range, SENSOR_IN_Battery_Depleted, SENSOR_IN_Battery_Low, SENSOR_IN_Battery_Unable_To_Charge, SENSOR_IN_CPU_Error, SENSOR_IN_Door_Open, SENSOR_IN_Flow_Rate_Monitored, SENSOR_IN_Flow_Rate_Not_Stable, SENSOR_IN_Humidity_Out_Of_Range, SENSOR_IN_Memory_Corrupted, SENSOR_IN_Occlusion, SENSOR_IN_Pump_Overheated, SENSOR_IN_Pump_Too_Hot, SENSOR_IN_RTC_Error, SENSOR_IN_Supply_Voltage_Out_Of_Range, SENSOR_IN_Temperature_Out_Of_Range, SENSOR_IN_WatchDog_Interrupt_Detected, SYS_MON_IN_System_Monitor_Failed, SYS_STAT_IN_In_Therapy, SYS_STAT_IN_Reservoir_Empty, SYS_STAT_IN_Reservoir_Volume, SYS_STAT_IN_Volume_Infused, audioTimer_1, cancelAlarm_1, currentAlarm_1, idAlarmSubSystem_Alarms_1, idAlarms_CheckAlarm_1, idAlarms_Notification_1, idCheckAlarm_CancelAlarm_1, idCheckAlarm_Level1_1, idCheckAlarm_Level2_1, idCheckAlarm_Level3_1, idCheckAlarm_Level4_1, idLevel1_IsBatteryError_1, idLevel1_IsConfigTimeWarning_1, idLevel1_IsFlowRateNotStable_1, idLevel1_IsIdleTimeExceeded_1, idLevel1_IsLoggingFailed_1, idLevel1_IsPausedTimeExceeded_1, idLevel1_IsPumpHot_1, idLevel1_IsSystemMonitorFailed_1, idLevel1_IsUnderInfusion_1, idLevel2_IsLowReservoir_1, idLevel3_IsAirInLine_1, idLevel3_IsDoor_Open_1, idLevel3_IsOcclusion_1, idLevel3_IsOverInfusionFlowRate_1, idLevel3_IsOverInfusionVTBI_1, idLevel4_IsEmptyReservoir_1, idLevel4_IsEnviromentalError_1, idLevel4_IsHardwareError_1, idNotification_Audio_1, idNotification_Visual_1, idletimer_1, overInfusion_1, pausedtimer_1, previousAlarm_1, step_size, underInfusion_1, CONST_IN_Max_Duration_Over_Infusion, CONST_IN_Max_Duration_Under_Infusion, OP_CMD_IN_Notification_Cancel, overInfusionTimer_1, underInfusionTimer_1, CONST_IN_Audio_Auto_Enable_Duration);


--unused outputs
	

tel



node GPCA_Alarm (In1_1_1 : int; In2_1_1 : int; In3_1_1 : bool; In4_1_1 : bool; In5_1_1 : bool; In6_1_1 : int; In7_1_1 : bool; In8_1_1 : int; In9_1_1 : int; In10_1_1 : int; In11_1_1 : int; In12_1_1 : bool; In13_1_1 : bool; In14_1_1 : bool; In15_1_1 : bool; In16_1_1 : bool; In17_1_1 : bool; In18_1_1 : bool; In19_1_1 : bool; In20_1_1 : bool; In21_1_1 : bool; In22_1_1 : bool; In23_1_1 : bool; In24_1_1 : bool; In25_1_1 : bool; In26_1_1 : bool; In27_1_1 : bool; In28_1_1 : bool; In29_1_1 : int; In30_1_1 : int; In31_1_1 : int; In32_1_1 : int; In33_1_1 : int; In34_1_1 : int; In35_1_1 : int; In36_1_1 : int; In37_1_1 : int; In38_1_1 : int; In39_1_1 : bool; In40_1_1 : int; In41_1_1 : int; In42_1_1 : bool; In43_1_1 : int)
returns (Out1_1_1 : int;
	Out2_2_1 : int;
	Out3_3_1 : int;
	Out4_4_1 : int;
	Out5_5_1 : int); 
var
	AlarmSubSystem_1_1 : int; AlarmSubSystem_2_1 : int; AlarmSubSystem_3_1 : int; AlarmSubSystem_4_1 : int; AlarmSubSystem_5_1 : int;
let 
	(AlarmSubSystem_1_1, AlarmSubSystem_2_1, AlarmSubSystem_3_1, AlarmSubSystem_4_1, AlarmSubSystem_5_1) =  GPCA_Alarm_AlarmSubSystem(In1_1_1, In2_1_1, In3_1_1, In4_1_1, In5_1_1, In6_1_1, In7_1_1, In8_1_1, In9_1_1, In10_1_1, In11_1_1, In12_1_1, In13_1_1, In14_1_1, In15_1_1, In16_1_1, In17_1_1, In18_1_1, In19_1_1, In20_1_1, In21_1_1, In22_1_1, In23_1_1, In24_1_1, In25_1_1, In26_1_1, In27_1_1, In28_1_1, In29_1_1, In30_1_1, In31_1_1, In32_1_1, In33_1_1, In34_1_1, In35_1_1, In36_1_1, In37_1_1, In38_1_1, In39_1_1, In40_1_1, In41_1_1, In42_1_1, In43_1_1);
	Out1_1_1 = AlarmSubSystem_1_1;
	Out2_2_1 = AlarmSubSystem_2_1;
	Out3_3_1 = AlarmSubSystem_3_1;
	Out4_4_1 = AlarmSubSystem_4_1;
	Out5_5_1 = AlarmSubSystem_5_1;
tel

