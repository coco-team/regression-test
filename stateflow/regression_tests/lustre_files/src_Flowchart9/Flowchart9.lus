-- This file has been generated by cocoSim


-- System nodes






node TOP_B__To__Flowchart9_Flowchart9Junction1514_1_Condition_Action(y_1:int)

returns (y:int);


var 	y_2:int;


let



	y_2 
	=  y_1  + 1;
	

	(y) 
	= (y_2);
	

tel







node TOP_A__To__Flowchart9_Flowchart9Junction1512_1_Condition_Action(x_1:int)

returns (x:int);


var 	x_2:int;


let



	x_2 
	=  x_1  + 1;
	

	(x) 
	= (x_2);
	

tel






-- Entry action for state :TOP_A
node TOP_A_en(idTOP_A_1:int;
	idFlowchart9_TOP_1:int;
	isInner:bool)

returns (idTOP_A:int;
	idFlowchart9_TOP:int);


var 	idTOP_A_2:int;
	idFlowchart9_TOP_2:int;


let



	-- set state as active 
	idFlowchart9_TOP_2 
	= 1509;
	

	-- case of state without states but contains transitions 
	idTOP_A_2 
	= -1;
	

	(idTOP_A, idFlowchart9_TOP) 
	= (idTOP_A_2, idFlowchart9_TOP_2);
	

tel





-- Exit action for state :TOP_A
node TOP_A_ex(idFlowchart9_TOP_1:int;
	isInner:bool)

returns (idFlowchart9_TOP:int);


var 	idFlowchart9_TOP_2:int;


let



	-- set state as inactive 
	idFlowchart9_TOP_2
	 = if (not isInner) then 0 else idFlowchart9_TOP_1;


	(idFlowchart9_TOP) 
	= (idFlowchart9_TOP_2);
	

tel






-- Entry action for state :TOP_B
node TOP_B_en(idTOP_B_1:int;
	idFlowchart9_TOP_1:int;
	isInner:bool)

returns (idTOP_B:int;
	idFlowchart9_TOP:int);


var 	idTOP_B_2:int;
	idFlowchart9_TOP_2:int;


let



	-- set state as active 
	idFlowchart9_TOP_2 
	= 1510;
	

	-- case of state without states but contains transitions 
	idTOP_B_2 
	= -1;
	

	(idTOP_B, idFlowchart9_TOP) 
	= (idTOP_B_2, idFlowchart9_TOP_2);
	

tel





-- Exit action for state :TOP_B
node TOP_B_ex(idFlowchart9_TOP_1:int;
	isInner:bool)

returns (idFlowchart9_TOP:int);


var 	idFlowchart9_TOP_2:int;


let



	-- set state as inactive 
	idFlowchart9_TOP_2
	 = if (not isInner) then 0 else idFlowchart9_TOP_1;


	(idFlowchart9_TOP) 
	= (idFlowchart9_TOP_2);
	

tel






-- Entry action for state :Flowchart9_TOP
node Flowchart9_TOP_en(idFlowchart9_TOP_1:int;
	idFlowchart9_Flowchart9_1:int;
	idTOP_A_1:int;
	idTOP_B_1:int;
	isInner:bool)

returns (idFlowchart9_TOP:int;
	idFlowchart9_Flowchart9:int;
	idTOP_A:int;
	idTOP_B:int);


var 	idFlowchart9_TOP_2, idFlowchart9_TOP_3, idFlowchart9_TOP_4, idFlowchart9_TOP_5, idFlowchart9_TOP_6:int;
	idFlowchart9_Flowchart9_2, idFlowchart9_Flowchart9_3, idFlowchart9_Flowchart9_4:int;
	idTOP_A_2, idTOP_A_3, idTOP_A_4, idTOP_A_5:int;
	idTOP_B_2, idTOP_B_3:int;


let



	-- set state as active 
	idFlowchart9_Flowchart9_2 
	= 1511;
	

	
-- transition trace :
	--POINT__To__TOP_A_1
		(idTOP_A_2, idFlowchart9_TOP_2) 
	= TOP_A_en(idTOP_A_1, idFlowchart9_TOP_1, false);
		

	(idFlowchart9_TOP_3, idFlowchart9_Flowchart9_3, idTOP_A_3) 
	= 

	if ( idFlowchart9_TOP_1 = 0) then

	 (idFlowchart9_TOP_2, idFlowchart9_Flowchart9_2, idTOP_A_2)

	 else(idFlowchart9_TOP_1, idFlowchart9_Flowchart9_2, idTOP_A_1);

	

	(idTOP_A_4, idFlowchart9_TOP_4) 
	= 
	if ( idFlowchart9_TOP_1 = 1509) then
	TOP_A_en(idTOP_A_1, idFlowchart9_TOP_1, false)
	 else (idTOP_A_1, idFlowchart9_TOP_1);

	

	(idTOP_B_2, idFlowchart9_TOP_5) 
	= 
	if ( idFlowchart9_TOP_1 = 1510) then
	TOP_B_en(idTOP_B_1, idFlowchart9_TOP_1, false)
	 else (idTOP_B_1, idFlowchart9_TOP_1);

	

	(idFlowchart9_TOP_6, idFlowchart9_Flowchart9_4, idTOP_A_5, idTOP_B_3) 
	= 
		 if ( idFlowchart9_TOP_1 = 0) then 
		(idFlowchart9_TOP_3, idFlowchart9_Flowchart9_3, idTOP_A_3, idTOP_B_1)
		 else
		 if ( idFlowchart9_TOP_1 = 1509) then 
		(idFlowchart9_TOP_4, idFlowchart9_Flowchart9_3, idTOP_A_4, idTOP_B_1)
		 else
		 if ( idFlowchart9_TOP_1 = 1510) then 
		(idFlowchart9_TOP_5, idFlowchart9_Flowchart9_3, idTOP_A_4, idTOP_B_2)
		 else (idFlowchart9_TOP_1, idFlowchart9_Flowchart9_2, idTOP_A_1, idTOP_B_1);


	(idFlowchart9_TOP, idFlowchart9_Flowchart9, idTOP_A, idTOP_B) 
	= (idFlowchart9_TOP_6, idFlowchart9_Flowchart9_4, idTOP_A_5, idTOP_B_3);
	

tel





-- Exit action for state :Flowchart9_TOP
node Flowchart9_TOP_ex(idFlowchart9_TOP_1:int;
	idFlowchart9_Flowchart9_1:int;
	isInner:bool)

returns (idFlowchart9_TOP:int;
	idFlowchart9_Flowchart9:int);


var 	idFlowchart9_TOP_2, idFlowchart9_TOP_3, idFlowchart9_TOP_4, idFlowchart9_TOP_5:int;
	idFlowchart9_Flowchart9_2:int;


let



	
	(idFlowchart9_TOP_2) 
	= 
	if ( idFlowchart9_TOP_1 = 1509) then
	TOP_A_ex(idFlowchart9_TOP_1, false)
	 else (idFlowchart9_TOP_1);

	

	(idFlowchart9_TOP_3) 
	= 
	if ( idFlowchart9_TOP_1 = 1510) then
	TOP_B_ex(idFlowchart9_TOP_1, false)
	 else (idFlowchart9_TOP_1);

	

	(idFlowchart9_TOP_4) 
	= 
		 if ( idFlowchart9_TOP_1 = 1509) then 
		(idFlowchart9_TOP_2)
		 else
		 if ( idFlowchart9_TOP_1 = 1510) then 
		(idFlowchart9_TOP_3)
		 else (idFlowchart9_TOP_1);


	-- set state as inactive 
	idFlowchart9_Flowchart9_2
	 = if (not isInner) then 0 else idFlowchart9_Flowchart9_1;

	idFlowchart9_TOP_5 
	= 0;
	

	(idFlowchart9_TOP, idFlowchart9_Flowchart9) 
	= (idFlowchart9_TOP_5, idFlowchart9_Flowchart9_2);
	

tel


--***************************************************State :TOP_A Automaton***************************************************

node TOP_A_node(idTOP_A_1:int;
	x_1:int)

returns (idTOP_A:int;
	x:int);


let

	 automaton top_a

	state POINTTOP_A:
	unless true restart TOP_A__TO__FLOWCHART9_FLOWCHART9JUNCTION1512_1



	let

		(idTOP_A, x) 
	= (idTOP_A_1, x_1);
	

	tel



	state TOP_A__TO__FLOWCHART9_FLOWCHART9JUNCTION1512_1:

	 var 	x_2:int;
	let

		-- transition trace :
	--TOP_A__To__Junction1512_1
		-- condition Action : x++
		
		(x_2) 
	= TOP_A__To__Flowchart9_Flowchart9Junction1512_1_Condition_Action(x_1);
		

	(idTOP_A, x) 
	=  (idTOP_A_1, x_2);


	tel

	until true restart POINTTOP_A



tel


--***************************************************State :TOP_B Automaton***************************************************

node TOP_B_node(idTOP_B_1:int;
	y_1:int)

returns (idTOP_B:int;
	y:int);


let

	 automaton top_b

	state POINTTOP_B:
	unless true restart TOP_B__TO__FLOWCHART9_FLOWCHART9JUNCTION1514_1



	let

		(idTOP_B, y) 
	= (idTOP_B_1, y_1);
	

	tel



	state TOP_B__TO__FLOWCHART9_FLOWCHART9JUNCTION1514_1:

	 var 	y_2:int;
	let

		-- transition trace :
	--TOP_B__To__Junction1514_1
		-- condition Action : y++
		
		(y_2) 
	= TOP_B__To__Flowchart9_Flowchart9Junction1514_1_Condition_Action(y_1);
		

	(idTOP_B, y) 
	=  (idTOP_B_1, y_2);


	tel

	until true restart POINTTOP_B



tel


--***************************************************State :Flowchart9_TOP Automaton***************************************************

node Flowchart9_TOP_node(idFlowchart9_TOP_1:int;
	idTOP_A_1:int;
	E:bool;
	idTOP_B_1:int;
	x_1:int;
	y_1:int)

returns (idFlowchart9_TOP:int;
	idTOP_A:int;
	idTOP_B:int;
	x:int;
	y:int);


let

	 automaton flowchart9_top

	state POINTFlowchart9_TOP:
	unless (idFlowchart9_TOP_1=0) restart POINT__TO__TOP_A_1



	unless (idFlowchart9_TOP_1=1509) and E restart TOP_A__TO__TOP_B_1



	unless (idFlowchart9_TOP_1=1510) and E restart TOP_B__TO__TOP_A_1



	unless (idFlowchart9_TOP_1=1509) restart TOP_A_IDL

	unless (idFlowchart9_TOP_1=1510) restart TOP_B_IDL

	let

		(idFlowchart9_TOP, idTOP_A, idTOP_B, x, y) 
	= (idFlowchart9_TOP_1, idTOP_A_1, idTOP_B_1, x_1, y_1);
	

	tel



	state POINT__TO__TOP_A_1:

	 var 	idFlowchart9_TOP_2:int;
	idTOP_A_2:int;
	let

		-- transition trace :
	--POINT__To__TOP_A_1
		(idTOP_A_2, idFlowchart9_TOP_2) 
	= TOP_A_en(idTOP_A_1, idFlowchart9_TOP_1, false);
		

	(idFlowchart9_TOP, idTOP_A) 
	=  (idFlowchart9_TOP_2, idTOP_A_2);

	--add unused variables
	(idTOP_B, x, y) 
	= (idTOP_B_1, x_1, y_1);
	

	tel

	until true restart POINTFlowchart9_TOP



	state TOP_A__TO__TOP_B_1:

	 var 	idFlowchart9_TOP_2, idFlowchart9_TOP_3:int;
	idTOP_B_2:int;
	let

		-- transition trace :
	--TOP_A__To__TOP_B_1
		(idFlowchart9_TOP_2) 
	= TOP_A_ex(idFlowchart9_TOP_1, false);
		

		(idTOP_B_2, idFlowchart9_TOP_3) 
	= TOP_B_en(idTOP_B_1, idFlowchart9_TOP_2, false);
		

	(idFlowchart9_TOP, idTOP_A, idTOP_B) 
	=  (idFlowchart9_TOP_3, idTOP_A_1, idTOP_B_2);

	--add unused variables
	(x, y) 
	= (x_1, y_1);
	

	tel

	until true restart POINTFlowchart9_TOP



	state TOP_B__TO__TOP_A_1:

	 var 	idFlowchart9_TOP_2, idFlowchart9_TOP_3:int;
	idTOP_A_2:int;
	let

		-- transition trace :
	--TOP_B__To__TOP_A_1
		(idFlowchart9_TOP_2) 
	= TOP_B_ex(idFlowchart9_TOP_1, false);
		

		(idTOP_A_2, idFlowchart9_TOP_3) 
	= TOP_A_en(idTOP_A_1, idFlowchart9_TOP_2, false);
		

	(idFlowchart9_TOP, idTOP_A, idTOP_B) 
	=  (idFlowchart9_TOP_3, idTOP_A_2, idTOP_B_1);

	--add unused variables
	(x, y) 
	= (x_1, y_1);
	

	tel

	until true restart POINTFlowchart9_TOP



	state TOP_A_IDL:

	 var 	idTOP_A_2:int;
	x_2:int;
	let

		
	(idTOP_A_2, x_2) 
	= TOP_A_node(idTOP_A_1, x_1);

		


	(idFlowchart9_TOP, idTOP_A, idTOP_B, x) 
	= (idFlowchart9_TOP_1, idTOP_A_2, idTOP_B_1, x_2);
	
	--add unused variables
	(y) 
	= (y_1);
	

	tel

	until true restart POINTFlowchart9_TOP



	state TOP_B_IDL:

	 var 	idTOP_B_2:int;
	y_2:int;
	let

		
	(idTOP_B_2, y_2) 
	= TOP_B_node(idTOP_B_1, y_1);

		


	(idFlowchart9_TOP, idTOP_A, idTOP_B, x, y) 
	= (idFlowchart9_TOP_1, idTOP_A_1, idTOP_B_2, x_1, y_2);
	

	tel

	until true restart POINTFlowchart9_TOP



tel


--***************************************************State :Flowchart9_Flowchart9 Automaton***************************************************

node Flowchart9_Flowchart9_node(idFlowchart9_Flowchart9_1:int;
	idFlowchart9_TOP_1:int;
	idTOP_A_1:int;
	idTOP_B_1:int;
	E:bool;
	x_1:int;
	y_1:int)

returns (idFlowchart9_Flowchart9:int;
	idFlowchart9_TOP:int;
	idTOP_A:int;
	idTOP_B:int;
	x:int;
	y:int);


let

	 automaton flowchart9_flowchart9

	state POINTFlowchart9_Flowchart9:
	unless (idFlowchart9_Flowchart9_1=0) restart POINT__TO__FLOWCHART9_TOP_1



	unless true  restart FLOWCHART9_FLOWCHART9_PARALLEL_IDL

	let

		(idFlowchart9_Flowchart9, idFlowchart9_TOP, idTOP_A, idTOP_B, x, y) 
	= (idFlowchart9_Flowchart9_1, idFlowchart9_TOP_1, idTOP_A_1, idTOP_B_1, x_1, y_1);
	

	tel



	state POINT__TO__FLOWCHART9_TOP_1:

	 var 	idFlowchart9_Flowchart9_2:int;
	idFlowchart9_TOP_2:int;
	idTOP_A_2:int;
	idTOP_B_2:int;
	let

		-- transition trace :
	--POINT__To__Flowchart9_TOP_1
		(idFlowchart9_TOP_2, idFlowchart9_Flowchart9_2, idTOP_A_2, idTOP_B_2) 
	= Flowchart9_TOP_en(idFlowchart9_TOP_1, idFlowchart9_Flowchart9_1, idTOP_A_1, idTOP_B_1, false);
		

	(idFlowchart9_Flowchart9, idFlowchart9_TOP, idTOP_A, idTOP_B) 
	=  (idFlowchart9_Flowchart9_2, idFlowchart9_TOP_2, idTOP_A_2, idTOP_B_2);

	--add unused variables
	(x, y) 
	= (x_1, y_1);
	

	tel

	until true restart POINTFlowchart9_Flowchart9



	state FLOWCHART9_FLOWCHART9_PARALLEL_IDL:

	 var 	idFlowchart9_TOP_2:int;
	idTOP_A_2:int;
	idTOP_B_2:int;
	x_2:int;
	y_2:int;
	let

		

		(idFlowchart9_TOP_2, idTOP_A_2, idTOP_B_2, x_2, y_2)
	= if not (idFlowchart9_TOP_1= 0 ) then Flowchart9_TOP_node(idFlowchart9_TOP_1, idTOP_A_1, E, idTOP_B_1, x_1, y_1)

		 else (idFlowchart9_TOP_1, idTOP_A_1, idTOP_B_1, x_1, y_1);

		

		

	(idFlowchart9_Flowchart9, idFlowchart9_TOP, idTOP_A, idTOP_B, x, y) 
	= (idFlowchart9_Flowchart9_1, idFlowchart9_TOP_2, idTOP_A_2, idTOP_B_2, x_2, y_2);
	

	tel

	until true restart POINTFlowchart9_Flowchart9



tel


--***************************************************State :Flowchart9_Flowchart9 Automaton***************************************************

node Flowchart9_Flowchart9(E:bool)

returns (x:int;
	y:int);


var x_1: int;

	y_1: int;

	idFlowchart9_Flowchart9, idFlowchart9_Flowchart9_1: int;

	idTOP_A, idTOP_A_1: int;

	idTOP_B, idTOP_B_1: int;

	idFlowchart9_TOP, idFlowchart9_TOP_1: int;

	let

	x_1 = 0 -> pre x;

	y_1 = 0 -> pre y;

	idFlowchart9_Flowchart9_1 = 0 -> pre idFlowchart9_Flowchart9;

	idTOP_A_1 = 0 -> pre idTOP_A;

	idTOP_B_1 = 0 -> pre idTOP_B;

	idFlowchart9_TOP_1 = 0 -> pre idFlowchart9_TOP;

	



	(idFlowchart9_Flowchart9, idFlowchart9_TOP, idTOP_A, idTOP_B, x, y)
	 = 

	 if E then Flowchart9_Flowchart9_node(idFlowchart9_Flowchart9_1, idFlowchart9_TOP_1, idTOP_A_1, idTOP_B_1, E, x_1, y_1)

	 else (idFlowchart9_Flowchart9_1, idFlowchart9_TOP_1, idTOP_A_1, idTOP_B_1, x_1, y_1);

	


--unused outputs
	

tel



node Flowchart9 (In1_1_1 : real)
returns (Out1_1_1 : int;
	Out2_2_1 : int); 
var
	Flowchart9_1_1 : int; Flowchart9_2_1 : int;
	In1_1_1_event: bool;
let 
	In1_1_1_event = false -> ((pre(In1_1_1) > 0.0 and In1_1_1 <= 0.0) or (pre(In1_1_1) <= 0.0 and In1_1_1 > 0.0));
	(Flowchart9_1_1, Flowchart9_2_1) =  Flowchart9_Flowchart9(In1_1_1_event);
	Out1_1_1 = Flowchart9_1_1;
	Out2_2_1 = Flowchart9_2_1;
tel

