-- This file has been generated by cocoSim


-- Properties nodes
node GPCA_INFUSION_MGR_prop1 (Sys_On_1_1 : bool; Infusion_initial_1_1 : bool; In3_1_1 : bool; In4_1_1 : bool; In5_1_1 : bool; In6_1_1 : int; In7_1_1 : int; In8_1_1 : real; In9_1_1 : int; In10_1_1 : real; In11_1_1 : real; In12_1_1 : int; In13_1_1 : real; In14_1_1 : real; In15_1_1 : int; In16_1_1 : int; In17_1_1 : int; In18_1_1 : int; In19_1_1 : bool; In20_1_1 : int)
returns (prop1_1_1 : bool);
var
	CompareToConstant_1_1 : bool;
	Constant_1_1 : real;
	LogicalOperator_1_1 : bool;
	LogicalOperator1_1_1 : bool;
	LogicalOperator2_1_1 : bool;
	Memory_1_1 : real;
	Sys_mode_1_1 : int;
	GPCA_INFUSION_MGR_Flow_Rate_1_1 : int;
	GPCA_INFUSION_MGR_out3_1_1 : real;
	GPCA_INFUSION_MGR_out4_1_1 : bool;
	GPCA_INFUSION_MGR_out5_1_1 : int;
	GPCA_INFUSION_MGR_out6_1_1 : real;
	GPCA_INFUSION_MGR_out7_1_1 : bool;
let
	CompareToConstant_1_1 = Sys_mode_1_1 = 1;
	Constant_1_1 = 0.0000000000;
	LogicalOperator_1_1 = (if Memory_1_1 = 0.0 then false else true) and Sys_On_1_1;
	LogicalOperator1_1_1 = not LogicalOperator_1_1;
	LogicalOperator2_1_1 = LogicalOperator1_1_1 or CompareToConstant_1_1;
	Memory_1_1 = 1.0000000000 -> pre Constant_1_1;
	prop1_1_1 = LogicalOperator2_1_1;

	(GPCA_INFUSION_MGR_Flow_Rate_1_1, Sys_mode_1_1, GPCA_INFUSION_MGR_out3_1_1, GPCA_INFUSION_MGR_out4_1_1, GPCA_INFUSION_MGR_out5_1_1, GPCA_INFUSION_MGR_out6_1_1, GPCA_INFUSION_MGR_out7_1_1) = GPCA_INFUSION_MGR(Sys_On_1_1, Infusion_initial_1_1, In3_1_1, In4_1_1, In5_1_1, In6_1_1, In7_1_1, In8_1_1, In9_1_1, In10_1_1, In11_1_1, In12_1_1, In13_1_1, In14_1_1, In15_1_1, In16_1_1, In17_1_1, In18_1_1, In19_1_1, In20_1_1);
	--%PROPERTY prop1_1_1; 
 
tel

node GPCA_INFUSION_MGR_prop2 (Sys_On_1_1 : bool; Infusion_initial_1_1 : bool; In3_1_1 : bool; In4_1_1 : bool; In5_1_1 : bool; In6_1_1 : int; In7_1_1 : int; In8_1_1 : real; In9_1_1 : int; In10_1_1 : real; In11_1_1 : real; In12_1_1 : int; In13_1_1 : real; In14_1_1 : real; In15_1_1 : int; In16_1_1 : int; In17_1_1 : int; In18_1_1 : int; In19_1_1 : bool; In20_1_1 : int)
returns (prop2_1_1 : bool);
var
	CompareToConstant_1_1 : bool;
	CompareToZero_1_1 : bool;
	CompareToZero1_1_1 : bool;
	Constant_1_1 : real;
	LogicalOperator_1_1 : bool;
	LogicalOperator1_1_1 : bool;
	LogicalOperator2_1_1 : bool;
	LogicalOperator3_1_1 : bool;
	LogicalOperator4_1_1 : bool;
	LogicalOperator5_1_1 : bool;
	Memory_1_1 : real;
	Memory1_1_1 : int;
	Flow_Rate_1_1 : int;
	Sys_mode_1_1 : int;
	GPCA_INFUSION_MGR_out3_1_1 : real;
	GPCA_INFUSION_MGR_out4_1_1 : bool;
	GPCA_INFUSION_MGR_out5_1_1 : int;
	GPCA_INFUSION_MGR_out6_1_1 : real;
	GPCA_INFUSION_MGR_out7_1_1 : bool;
let
	CompareToConstant_1_1 = Sys_mode_1_1 = 1;
	CompareToZero_1_1 = Memory1_1_1 = 0;
	CompareToZero1_1_1 = Flow_Rate_1_1 = 0;
	Constant_1_1 = 0.0000000000;
	LogicalOperator_1_1 = LogicalOperator3_1_1 and CompareToZero_1_1;
	LogicalOperator1_1_1 = not LogicalOperator4_1_1;
	LogicalOperator2_1_1 = LogicalOperator1_1_1 or LogicalOperator5_1_1;
	LogicalOperator3_1_1 = not (if Memory_1_1 = 0.0 then false else true);
	LogicalOperator4_1_1 = LogicalOperator_1_1 and Sys_On_1_1;
	LogicalOperator5_1_1 = CompareToConstant_1_1 and CompareToZero1_1_1;
	Memory_1_1 = 1.0000000000 -> pre Constant_1_1;
	Memory1_1_1 = 0 -> pre Sys_mode_1_1;
	prop2_1_1 = LogicalOperator2_1_1;

	(Flow_Rate_1_1, Sys_mode_1_1, GPCA_INFUSION_MGR_out3_1_1, GPCA_INFUSION_MGR_out4_1_1, GPCA_INFUSION_MGR_out5_1_1, GPCA_INFUSION_MGR_out6_1_1, GPCA_INFUSION_MGR_out7_1_1) = GPCA_INFUSION_MGR(Sys_On_1_1, Infusion_initial_1_1, In3_1_1, In4_1_1, In5_1_1, In6_1_1, In7_1_1, In8_1_1, In9_1_1, In10_1_1, In11_1_1, In12_1_1, In13_1_1, In14_1_1, In15_1_1, In16_1_1, In17_1_1, In18_1_1, In19_1_1, In20_1_1);
	--%PROPERTY prop2_1_1; 
 
tel


-- System nodes




node POINT__To__InfusionMGR_writeLogJunction308_1_Condition_Action(logEvent:int;
	IM_OUT_Log_Message_ID_1:int)

returns (IM_OUT_Log_Message_ID:int);


var 	IM_OUT_Log_Message_ID_2:int;


let



	IM_OUT_Log_Message_ID_2 
	= logEvent;
	

	(IM_OUT_Log_Message_ID) 
	= (IM_OUT_Log_Message_ID_2);
	

tel


--***************************************************State :InfusionMGR_writeLog Automaton***************************************************

node InfusionMGR_writeLog_node(idInfusionMGR_writeLog_1:int;
	IM_OUT_Log_Message_ID_1:int;
	logEvent:int)

returns (idInfusionMGR_writeLog:int;
	IM_OUT_Log_Message_ID:int);


let

	 automaton infusionmgr_writelog

	state POINTInfusionMGR_writeLog:
	unless (idInfusionMGR_writeLog_1=0) restart POINT__TO__INFUSIONMGR_WRITELOGJUNCTION308_1



	let

		(idInfusionMGR_writeLog, IM_OUT_Log_Message_ID) 
	= (idInfusionMGR_writeLog_1, IM_OUT_Log_Message_ID_1);
	

	tel



	state POINT__TO__INFUSIONMGR_WRITELOGJUNCTION308_1:

	 var 	IM_OUT_Log_Message_ID_2:int;
	let

		-- transition trace :
	--POINT__To__Junction308_1
		-- condition Action : IM_OUT_Log_Message_ID=logEvent;
		
		(IM_OUT_Log_Message_ID_2) 
	= POINT__To__InfusionMGR_writeLogJunction308_1_Condition_Action(logEvent, IM_OUT_Log_Message_ID_1);
		

	(idInfusionMGR_writeLog, IM_OUT_Log_Message_ID) 
	=  (idInfusionMGR_writeLog_1, IM_OUT_Log_Message_ID_2);


	tel

	until true restart POINTInfusionMGR_writeLog



tel


--***************************************************State :InfusionMGR_writeLog Automaton***************************************************

node writeLog(logEvent:int;
	IM_OUT_Log_Message_ID_1:int)

returns (IM_OUT_Log_Message_ID:int);


var idInfusionMGR_writeLog, idInfusionMGR_writeLog_1: int;

	let

	idInfusionMGR_writeLog_1 = 0 -> pre idInfusionMGR_writeLog;

	



	(idInfusionMGR_writeLog, IM_OUT_Log_Message_ID)
	 = InfusionMGR_writeLog_node(idInfusionMGR_writeLog_1, IM_OUT_Log_Message_ID_1, logEvent);



tel







node POINT__To__InfusionMGR_Step_Scaling_FactorJunction313_1_Condition_Action(inputVal:real;
	step_size:real;
	returnVal_1:real)

returns (returnVal:real);


var 	returnVal_2:real;


let



	returnVal_2 
	= inputVal/step_size;
	

	(returnVal) 
	= (returnVal_2);
	

tel


--***************************************************State :InfusionMGR_Step_Scaling_Factor Automaton***************************************************

node InfusionMGR_Step_Scaling_Factor_node(idInfusionMGR_Step_Scaling_Factor_1:int;
	inputVal:real;
	returnVal_1:real;
	step_size:real)

returns (idInfusionMGR_Step_Scaling_Factor:int;
	returnVal:real);


let

	 automaton infusionmgr_step_scaling_factor

	state POINTInfusionMGR_Step_Scaling_Factor:
	unless (idInfusionMGR_Step_Scaling_Factor_1=0) restart POINT__TO__INFUSIONMGR_STEP_SCALING_FACTORJUNCTION313_1



	let

		(idInfusionMGR_Step_Scaling_Factor, returnVal) 
	= (idInfusionMGR_Step_Scaling_Factor_1, returnVal_1);
	

	tel



	state POINT__TO__INFUSIONMGR_STEP_SCALING_FACTORJUNCTION313_1:

	 var 	returnVal_2:real;
	let

		-- transition trace :
	--POINT__To__Junction313_1
		-- condition Action : returnVal=inputVal/step_size;
		
		(returnVal_2) 
	= POINT__To__InfusionMGR_Step_Scaling_FactorJunction313_1_Condition_Action(inputVal, step_size, returnVal_1);
		

	(idInfusionMGR_Step_Scaling_Factor, returnVal) 
	=  (idInfusionMGR_Step_Scaling_Factor_1, returnVal_2);


	tel

	until true restart POINTInfusionMGR_Step_Scaling_Factor



tel


--***************************************************State :InfusionMGR_Step_Scaling_Factor Automaton***************************************************

node Step_Scaling_Factor(inputVal:real;
	step_size:real)

returns (returnVal:real);


var returnVal_1: real;

	idInfusionMGR_Step_Scaling_Factor, idInfusionMGR_Step_Scaling_Factor_1: int;

	let

	returnVal_1 = 0.0 -> pre returnVal;

	idInfusionMGR_Step_Scaling_Factor_1 = 0 -> pre idInfusionMGR_Step_Scaling_Factor;

	



	(idInfusionMGR_Step_Scaling_Factor, returnVal)
	 = InfusionMGR_Step_Scaling_Factor_node(idInfusionMGR_Step_Scaling_Factor_1, inputVal, returnVal_1, step_size);


--unused outputs
	

tel







node POINT__To__Infusion_Manager_resetAllInfusionDetailsJunction303_1_Condition_Action(IM_OUT_Lock_Timer_1:real;
	inPatientBolus_1:bool;
	number_pbolus_1:int;
	IM_OUT_Is_Locked_Out_1:bool)

returns (IM_OUT_Lock_Timer:real;
	inPatientBolus:bool;
	number_pbolus:int;
	IM_OUT_Is_Locked_Out:bool);


var 	IM_OUT_Lock_Timer_2:real;
	inPatientBolus_2:bool;
	number_pbolus_2:int;
	IM_OUT_Is_Locked_Out_2:bool;


let



	IM_OUT_Lock_Timer_2 
	= 0.;
	

	inPatientBolus_2 
	= false;
	

	number_pbolus_2 
	= 0;
	

	IM_OUT_Is_Locked_Out_2 
	= false;
	

	(IM_OUT_Lock_Timer, inPatientBolus, number_pbolus, IM_OUT_Is_Locked_Out) 
	= (IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2, IM_OUT_Is_Locked_Out_2);
	

tel


--***************************************************State :Infusion_Manager_resetAllInfusionDetails Automaton***************************************************

node Infusion_Manager_resetAllInfusionDetails_node(idInfusion_Manager_resetAllInfusionDetails_1:int;
	IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_Lock_Timer_1:real;
	inPatientBolus_1:bool;
	number_pbolus_1:int)

returns (idInfusion_Manager_resetAllInfusionDetails:int;
	IM_OUT_Is_Locked_Out:bool;
	IM_OUT_Lock_Timer:real;
	inPatientBolus:bool;
	number_pbolus:int);


let

	 automaton infusion_manager_resetallinfusiondetails

	state POINTInfusion_Manager_resetAllInfusionDetails:
	unless (idInfusion_Manager_resetAllInfusionDetails_1=0) restart POINT__TO__INFUSION_MANAGER_RESETALLINFUSIONDETAILSJUNCTION303_1



	let

		(idInfusion_Manager_resetAllInfusionDetails, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, number_pbolus) 
	= (idInfusion_Manager_resetAllInfusionDetails_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1);
	

	tel



	state POINT__TO__INFUSION_MANAGER_RESETALLINFUSIONDETAILSJUNCTION303_1:

	 var 	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Lock_Timer_2:real;
	inPatientBolus_2:bool;
	number_pbolus_2:int;
	let

		-- transition trace :
	--POINT__To__Junction303_1
		-- condition Action : IM_OUT_Lock_Timer=0;inPatientBolus=0;number_pbolus=0;IM_OUT_Is_Locked_Out=false;
		
		(IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2, IM_OUT_Is_Locked_Out_2) 
	= POINT__To__Infusion_Manager_resetAllInfusionDetailsJunction303_1_Condition_Action(IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1, IM_OUT_Is_Locked_Out_1);
		

	(idInfusion_Manager_resetAllInfusionDetails, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, number_pbolus) 
	=  (idInfusion_Manager_resetAllInfusionDetails_1, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2);


	tel

	until true restart POINTInfusion_Manager_resetAllInfusionDetails



tel


--***************************************************State :Infusion_Manager_resetAllInfusionDetails Automaton***************************************************

node resetAllInfusionDetails(IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_Lock_Timer_1:real;
	inPatientBolus_1:bool;
	number_pbolus_1:int)

returns (IM_OUT_Is_Locked_Out:bool;
	IM_OUT_Lock_Timer:real;
	inPatientBolus:bool;
	number_pbolus:int);


var idInfusion_Manager_resetAllInfusionDetails, idInfusion_Manager_resetAllInfusionDetails_1: int;

	let

	idInfusion_Manager_resetAllInfusionDetails_1 = 0 -> pre idInfusion_Manager_resetAllInfusionDetails;

	



	(idInfusion_Manager_resetAllInfusionDetails, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, number_pbolus)
	 = Infusion_Manager_resetAllInfusionDetails_node(idInfusion_Manager_resetAllInfusionDetails_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1);



tel







node POINT__To__Infusion_Manager_sbolus_dur_timer_funJunction305_1_Condition_Action(sbolus_dur_timer_1:int;
	sbolus_timer_1:real;
	pbolus_timer_1:real;
	number_pbolus_1:int;
	pbolus_dur_timer_1:int;
	sbolusInter_timer_1:real;
	paused_KVO_timer_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Actual_Infusion_Duration_1:real;
	IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_Log_Message_ID_1:int)

returns (sbolus_dur_timer:int;
	sbolus_timer:real;
	pbolus_timer:real;
	number_pbolus:int;
	pbolus_dur_timer:int;
	sbolusInter_timer:real;
	paused_KVO_timer:int;
	IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Actual_Infusion_Duration:real;
	IM_OUT_Is_Locked_Out:bool;
	IM_OUT_Log_Message_ID:int);


var 	sbolus_dur_timer_2:int;
	sbolus_timer_2:real;
	pbolus_timer_2:real;
	number_pbolus_2:int;
	pbolus_dur_timer_2:int;
	sbolusInter_timer_2:real;
	paused_KVO_timer_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Actual_Infusion_Duration_2:real;
	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Log_Message_ID_2:int;


let



	sbolus_dur_timer_2 
	= 0;
	

	sbolus_timer_2 
	= 0.;
	

	pbolus_timer_2 
	= 0.;
	

	number_pbolus_2 
	= 0;
	

	pbolus_dur_timer_2 
	= 0;
	

	sbolusInter_timer_2 
	= 0.;
	

	paused_KVO_timer_2 
	= 0;
	

	IM_OUT_Flow_Rate_Commanded_2 
	= 0;
	

	IM_OUT_Actual_Infusion_Duration_2 
	= 0.;
	

	IM_OUT_Is_Locked_Out_2 
	= false;
	

	(IM_OUT_Log_Message_ID_2) 
	= writeLog(1, IM_OUT_Log_Message_ID_1);
	

	(sbolus_dur_timer, sbolus_timer, pbolus_timer, number_pbolus, pbolus_dur_timer, sbolusInter_timer, paused_KVO_timer, IM_OUT_Flow_Rate_Commanded, IM_OUT_Actual_Infusion_Duration, IM_OUT_Is_Locked_Out, IM_OUT_Log_Message_ID) 
	= (sbolus_dur_timer_2, sbolus_timer_2, pbolus_timer_2, number_pbolus_2, pbolus_dur_timer_2, sbolusInter_timer_2, paused_KVO_timer_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Actual_Infusion_Duration_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Log_Message_ID_2);
	

tel


--***************************************************State :Infusion_Manager_sbolus_dur_timer_fun Automaton***************************************************

node Infusion_Manager_sbolus_dur_timer_fun_node(idInfusion_Manager_sbolus_dur_timer_fun_1:int;
	IM_OUT_Actual_Infusion_Duration_1:real;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_Log_Message_ID_1:int;
	number_pbolus_1:int;
	paused_KVO_timer_1:int;
	pbolus_dur_timer_1:int;
	pbolus_timer_1:real;
	sbolusInter_timer_1:real;
	sbolus_dur_timer_1:int;
	sbolus_timer_1:real)

returns (idInfusion_Manager_sbolus_dur_timer_fun:int;
	IM_OUT_Actual_Infusion_Duration:real;
	IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Is_Locked_Out:bool;
	IM_OUT_Log_Message_ID:int;
	number_pbolus:int;
	paused_KVO_timer:int;
	pbolus_dur_timer:int;
	pbolus_timer:real;
	sbolusInter_timer:real;
	sbolus_dur_timer:int;
	sbolus_timer:real);


let

	 automaton infusion_manager_sbolus_dur_timer_fun

	state POINTInfusion_Manager_sbolus_dur_timer_fun:
	unless (idInfusion_Manager_sbolus_dur_timer_fun_1=0) restart POINT__TO__INFUSION_MANAGER_SBOLUS_DUR_TIMER_FUNJUNCTION305_1



	let

		(idInfusion_Manager_sbolus_dur_timer_fun, IM_OUT_Actual_Infusion_Duration, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Log_Message_ID, number_pbolus, paused_KVO_timer, pbolus_dur_timer, pbolus_timer, sbolusInter_timer, sbolus_dur_timer, sbolus_timer) 
	= (idInfusion_Manager_sbolus_dur_timer_fun_1, IM_OUT_Actual_Infusion_Duration_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Log_Message_ID_1, number_pbolus_1, paused_KVO_timer_1, pbolus_dur_timer_1, pbolus_timer_1, sbolusInter_timer_1, sbolus_dur_timer_1, sbolus_timer_1);
	

	tel



	state POINT__TO__INFUSION_MANAGER_SBOLUS_DUR_TIMER_FUNJUNCTION305_1:

	 var 	IM_OUT_Actual_Infusion_Duration_2:real;
	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Log_Message_ID_2:int;
	number_pbolus_2:int;
	paused_KVO_timer_2:int;
	pbolus_dur_timer_2:int;
	pbolus_timer_2:real;
	sbolusInter_timer_2:real;
	sbolus_dur_timer_2:int;
	sbolus_timer_2:real;
	let

		-- transition trace :
	--POINT__To__Junction305_1
		-- condition Action : sbolus_dur_timer=0;sbolus_timer=0;pbolus_timer=0;number_pbolus=0;pbolus_dur_timer=0;sbolusInter_timer=0;paused_KVO_timer=0;IM_OUT_Flow_Rate_Commanded=0;IM_OUT_Actual_Infusion_Duration=0;IM_OUT_Is_Locked_Out=false;writeLog(1);
		
		(sbolus_dur_timer_2, sbolus_timer_2, pbolus_timer_2, number_pbolus_2, pbolus_dur_timer_2, sbolusInter_timer_2, paused_KVO_timer_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Actual_Infusion_Duration_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Log_Message_ID_2) 
	= POINT__To__Infusion_Manager_sbolus_dur_timer_funJunction305_1_Condition_Action(sbolus_dur_timer_1, sbolus_timer_1, pbolus_timer_1, number_pbolus_1, pbolus_dur_timer_1, sbolusInter_timer_1, paused_KVO_timer_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Actual_Infusion_Duration_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Log_Message_ID_1);
		

	(idInfusion_Manager_sbolus_dur_timer_fun, IM_OUT_Actual_Infusion_Duration, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Log_Message_ID, number_pbolus, paused_KVO_timer, pbolus_dur_timer, pbolus_timer, sbolusInter_timer, sbolus_dur_timer, sbolus_timer) 
	=  (idInfusion_Manager_sbolus_dur_timer_fun_1, IM_OUT_Actual_Infusion_Duration_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Log_Message_ID_2, number_pbolus_2, paused_KVO_timer_2, pbolus_dur_timer_2, pbolus_timer_2, sbolusInter_timer_2, sbolus_dur_timer_2, sbolus_timer_2);


	tel

	until true restart POINTInfusion_Manager_sbolus_dur_timer_fun



tel


--***************************************************State :Infusion_Manager_sbolus_dur_timer_fun Automaton***************************************************

node sbolus_dur_timer_fun(sbolus_dur_timer_1:int;
	IM_OUT_Actual_Infusion_Duration_1:real;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_Log_Message_ID_1:int;
	number_pbolus_1:int;
	paused_KVO_timer_1:int;
	pbolus_dur_timer_1:int;
	pbolus_timer_1:real;
	sbolusInter_timer_1:real;
	sbolus_timer_1:real)

returns (IM_OUT_Actual_Infusion_Duration:real;
	IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Is_Locked_Out:bool;
	IM_OUT_Log_Message_ID:int;
	number_pbolus:int;
	paused_KVO_timer:int;
	pbolus_dur_timer:int;
	pbolus_timer:real;
	sbolusInter_timer:real;
	sbolus_dur_timer:int;
	sbolus_timer:real);


var idInfusion_Manager_sbolus_dur_timer_fun, idInfusion_Manager_sbolus_dur_timer_fun_1: int;

	let

	idInfusion_Manager_sbolus_dur_timer_fun_1 = 0 -> pre idInfusion_Manager_sbolus_dur_timer_fun;

	



	(idInfusion_Manager_sbolus_dur_timer_fun, IM_OUT_Actual_Infusion_Duration, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Log_Message_ID, number_pbolus, paused_KVO_timer, pbolus_dur_timer, pbolus_timer, sbolusInter_timer, sbolus_dur_timer, sbolus_timer)
	 = Infusion_Manager_sbolus_dur_timer_fun_node(idInfusion_Manager_sbolus_dur_timer_fun_1, IM_OUT_Actual_Infusion_Duration_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Log_Message_ID_1, number_pbolus_1, paused_KVO_timer_1, pbolus_dur_timer_1, pbolus_timer_1, sbolusInter_timer_1, sbolus_dur_timer_1, sbolus_timer_1);



tel







node POINT__To__THERAPY_TherapyExitOperationsJunction301_1_Condition_Action(IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_New_Infusion_1:bool;
	IM_OUT_Is_Locked_Out_1:bool)

returns (IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_New_Infusion:bool;
	IM_OUT_Is_Locked_Out:bool);


var 	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_New_Infusion_2:bool;
	IM_OUT_Is_Locked_Out_2:bool;


let



	IM_OUT_Flow_Rate_Commanded_2 
	= 0;
	

	IM_OUT_New_Infusion_2 
	= false;
	

	IM_OUT_Is_Locked_Out_2 
	= false;
	

	(IM_OUT_Flow_Rate_Commanded, IM_OUT_New_Infusion, IM_OUT_Is_Locked_Out) 
	= (IM_OUT_Flow_Rate_Commanded_2, IM_OUT_New_Infusion_2, IM_OUT_Is_Locked_Out_2);
	

tel


--***************************************************State :THERAPY_TherapyExitOperations Automaton***************************************************

node THERAPY_TherapyExitOperations_node(idTHERAPY_TherapyExitOperations_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_New_Infusion_1:bool)

returns (idTHERAPY_TherapyExitOperations:int;
	IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Is_Locked_Out:bool;
	IM_OUT_New_Infusion:bool);


let

	 automaton therapy_therapyexitoperations

	state POINTTHERAPY_TherapyExitOperations:
	unless (idTHERAPY_TherapyExitOperations_1=0) restart POINT__TO__THERAPY_THERAPYEXITOPERATIONSJUNCTION301_1



	let

		(idTHERAPY_TherapyExitOperations, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_New_Infusion) 
	= (idTHERAPY_TherapyExitOperations_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Is_Locked_Out_1, IM_OUT_New_Infusion_1);
	

	tel



	state POINT__TO__THERAPY_THERAPYEXITOPERATIONSJUNCTION301_1:

	 var 	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_New_Infusion_2:bool;
	let

		-- transition trace :
	--POINT__To__Junction301_1
		-- condition Action : IM_OUT_Flow_Rate_Commanded=0;IM_OUT_New_Infusion=0;IM_OUT_Is_Locked_Out=false;
		
		(IM_OUT_Flow_Rate_Commanded_2, IM_OUT_New_Infusion_2, IM_OUT_Is_Locked_Out_2) 
	= POINT__To__THERAPY_TherapyExitOperationsJunction301_1_Condition_Action(IM_OUT_Flow_Rate_Commanded_1, IM_OUT_New_Infusion_1, IM_OUT_Is_Locked_Out_1);
		

	(idTHERAPY_TherapyExitOperations, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_New_Infusion) 
	=  (idTHERAPY_TherapyExitOperations_1, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Is_Locked_Out_2, IM_OUT_New_Infusion_2);


	tel

	until true restart POINTTHERAPY_TherapyExitOperations



tel


--***************************************************State :THERAPY_TherapyExitOperations Automaton***************************************************

node TherapyExitOperations(IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_New_Infusion_1:bool)

returns (IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Is_Locked_Out:bool;
	IM_OUT_New_Infusion:bool);


var idTHERAPY_TherapyExitOperations, idTHERAPY_TherapyExitOperations_1: int;

	let

	idTHERAPY_TherapyExitOperations_1 = 0 -> pre idTHERAPY_TherapyExitOperations;

	



	(idTHERAPY_TherapyExitOperations, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_New_Infusion)
	 = THERAPY_TherapyExitOperations_node(idTHERAPY_TherapyExitOperations_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Is_Locked_Out_1, IM_OUT_New_Infusion_1);



tel







node ACTIVE_sbolus_triggerJunction275__To__ACTIVE_sbolus_triggerJunction277_2_Condition_Action(sb_1:bool)

returns (sb:bool);


var 	sb_2:bool;


let



	sb_2 
	= true;
	

	(sb) 
	= (sb_2);
	

tel






node POINT__To__ACTIVE_sbolus_triggerJunction275_1_Condition_Action(sb_1:bool)

returns (sb:bool);


var 	sb_2:bool;


let



	sb_2 
	= false;
	

	(sb) 
	= (sb_2);
	

tel






node ACTIVE_sbolus_triggerJunction275__To__ACTIVE_sbolus_triggerJunction276_1_Condition_Action(sb_1:bool)

returns (sb:bool);


var 	sb_2:bool;


let



	sb_2 
	= false;
	

	(sb) 
	= (sb_2);
	

tel


--***************************************************State :ACTIVE_sbolus_trigger Automaton***************************************************

node ACTIVE_sbolus_trigger_node(idACTIVE_sbolus_trigger_1:int;
	sb_1:bool;
	sbolusInter_timer:real;
	CONFIG_IN_Interval_Intermittent_Bolus:real;
	step_size:real)

returns (idACTIVE_sbolus_trigger:int;
	sb:bool);


let

	 automaton active_sbolus_trigger

	state POINTACTIVE_sbolus_trigger:
	unless (idACTIVE_sbolus_trigger_1=0) restart POINT__TO__ACTIVE_SBOLUS_TRIGGERJUNCTION275_1



	let

		(idACTIVE_sbolus_trigger, sb) 
	= (idACTIVE_sbolus_trigger_1, sb_1);
	

	tel



	state POINT__TO__ACTIVE_SBOLUS_TRIGGERJUNCTION275_1:

	 var 	sb_2, sb_3, sb_4, sb_5:bool;
	let

		

-- transition trace :
	--POINT__To__Junction275_1, Junction275__To__Junction276_1
		-- condition Action : sb=0;
		
		(sb_2) 
	= POINT__To__ACTIVE_sbolus_triggerJunction275_1_Condition_Action(sb_1);
		

		-- condition Action : sb=0;
		
		(sb_3) 
	= 
		 if (( sbolusInter_timer>Step_Scaling_Factor(CONFIG_IN_Interval_Intermittent_Bolus,step_size) or sbolusInter_timer<Step_Scaling_Factor(CONFIG_IN_Interval_Intermittent_Bolus,step_size) )) then 
		ACTIVE_sbolus_triggerJunction275__To__ACTIVE_sbolus_triggerJunction276_1_Condition_Action(sb_2)
		 else (sb_2);
		


-- transition trace :
	--POINT__To__Junction275_1, Junction275__To__Junction277_2
		-- condition Action : sb=0;
		
		(sb_4) 
	= POINT__To__ACTIVE_sbolus_triggerJunction275_1_Condition_Action(sb_1);
		

		-- condition Action : sb=1;
		
		(sb_5) 
	= 
		 if (( sbolusInter_timer=Step_Scaling_Factor(CONFIG_IN_Interval_Intermittent_Bolus,step_size) )) then 
		ACTIVE_sbolus_triggerJunction275__To__ACTIVE_sbolus_triggerJunction277_2_Condition_Action(sb_4)
		 else (sb_4);
		

	(idACTIVE_sbolus_trigger, sb) 
	= 
		 if (( sbolusInter_timer>Step_Scaling_Factor(CONFIG_IN_Interval_Intermittent_Bolus,step_size) or sbolusInter_timer<Step_Scaling_Factor(CONFIG_IN_Interval_Intermittent_Bolus,step_size) )) then 
		(idACTIVE_sbolus_trigger_1, sb_3)
		 else
		 if (( sbolusInter_timer=Step_Scaling_Factor(CONFIG_IN_Interval_Intermittent_Bolus,step_size) )) then 
		(idACTIVE_sbolus_trigger_1, sb_5)
		 else (idACTIVE_sbolus_trigger_1, sb_4);


	tel

	until true restart POINTACTIVE_sbolus_trigger



tel


--***************************************************State :ACTIVE_sbolus_trigger Automaton***************************************************

node sbolus_trigger(sbolusInter_timer:real;
	CONFIG_IN_Interval_Intermittent_Bolus:real;
	step_size:real)

returns (sb:bool);


var sb_1: bool;

	idACTIVE_sbolus_trigger, idACTIVE_sbolus_trigger_1: int;

	let

	sb_1 = false -> pre sb;

	idACTIVE_sbolus_trigger_1 = 0 -> pre idACTIVE_sbolus_trigger;

	



	(idACTIVE_sbolus_trigger, sb)
	 = ACTIVE_sbolus_trigger_node(idACTIVE_sbolus_trigger_1, sb_1, sbolusInter_timer, CONFIG_IN_Interval_Intermittent_Bolus, step_size);


--unused outputs
	

tel







node POINT__To__OFF_sbolus_trigger2Junction269_1_Condition_Action(sbolusInter_timer_1:real)

returns (sbolusInter_timer:real);


var 	sbolusInter_timer_2:real;


let



	sbolusInter_timer_2 
	= 0.;
	

	(sbolusInter_timer) 
	= (sbolusInter_timer_2);
	

tel


--***************************************************State :OFF_sbolus_trigger2 Automaton***************************************************

node OFF_sbolus_trigger2_node(idOFF_sbolus_trigger2_1:int;
	sb:bool;
	sbolusInter_timer_1:real)

returns (idOFF_sbolus_trigger2:int;
	sbolusInter_timer:real);


let

	 automaton off_sbolus_trigger2

	state POINTOFF_sbolus_trigger2:
	unless (idOFF_sbolus_trigger2_1=0) and ( sb ) restart POINT__TO__OFF_SBOLUS_TRIGGER2JUNCTION269_1



	let

		(idOFF_sbolus_trigger2, sbolusInter_timer) 
	= (idOFF_sbolus_trigger2_1, sbolusInter_timer_1);
	

	tel



	state POINT__TO__OFF_SBOLUS_TRIGGER2JUNCTION269_1:

	 var 	sbolusInter_timer_2:real;
	let

		-- transition trace :
	--POINT__To__Junction269_1
		-- condition Action : sbolusInter_timer=0;
		
		(sbolusInter_timer_2) 
	= POINT__To__OFF_sbolus_trigger2Junction269_1_Condition_Action(sbolusInter_timer_1);
		

	(idOFF_sbolus_trigger2, sbolusInter_timer) 
	=  (idOFF_sbolus_trigger2_1, sbolusInter_timer_2);


	tel

	until true restart POINTOFF_sbolus_trigger2



tel


--***************************************************State :OFF_sbolus_trigger2 Automaton***************************************************

node sbolus_trigger2(sb:bool;
	sbolusInter_timer_1:real)

returns (sbolusInter_timer:real);


var idOFF_sbolus_trigger2, idOFF_sbolus_trigger2_1: int;

	let

	idOFF_sbolus_trigger2_1 = 0 -> pre idOFF_sbolus_trigger2;

	



	(idOFF_sbolus_trigger2, sbolusInter_timer)
	 = OFF_sbolus_trigger2_node(idOFF_sbolus_trigger2_1, sb, sbolusInter_timer_1);



tel






























node InfusionMGR_InfusionMGRJunction247__To__InfusionMGR_InfusionMGRJunction246_1_Condition_Action(IM_OUT_Actual_Infusion_Duration_1:real)

returns (IM_OUT_Actual_Infusion_Duration:real);


var 	IM_OUT_Actual_Infusion_Duration_2:real;


let



	IM_OUT_Actual_Infusion_Duration_2 
	=  IM_OUT_Actual_Infusion_Duration_1  + 1.;
	

	(IM_OUT_Actual_Infusion_Duration) 
	= (IM_OUT_Actual_Infusion_Duration_2);
	

tel














node Infusion_Manager_IDLE__To__InfusionMGR_InfusionMGRJunction234_2_Condition_Action(IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_Lock_Timer_1:real;
	inPatientBolus_1:bool;
	number_pbolus_1:int)

returns (IM_OUT_Is_Locked_Out:bool;
	IM_OUT_Lock_Timer:real;
	inPatientBolus:bool;
	number_pbolus:int);


var 	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Lock_Timer_2:real;
	inPatientBolus_2:bool;
	number_pbolus_2:int;


let



	(IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2) 
	= resetAllInfusionDetails(IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1);
	

	(IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, number_pbolus) 
	= (IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2);
	

tel




















node InfusionMGR_InfusionMGRJunction234__To__Infusion_Manager_THERAPY_1_Condition_Action(IM_OUT_New_Infusion_1:bool)

returns (IM_OUT_New_Infusion:bool);


var 	IM_OUT_New_Infusion_2:bool;


let



	IM_OUT_New_Infusion_2 
	= true;
	

	(IM_OUT_New_Infusion) 
	= (IM_OUT_New_Infusion_2);
	

tel






node PATIENT_ON__To__PATIENT_LOCKOUT_1_Condition_Action(IM_OUT_Lock_Timer_1:real)

returns (IM_OUT_Lock_Timer:real);


var 	IM_OUT_Lock_Timer_2:real;


let



	IM_OUT_Lock_Timer_2 
	= 0.;
	

	(IM_OUT_Lock_Timer) 
	= (IM_OUT_Lock_Timer_2);
	

tel








-- Entry action for state :Arbiter_Manual_Paused_KVO
node Arbiter_Manual_Paused_KVO_en(idPAUSED_Arbiter_1:int;
	CONFIG_IN_Flow_Rate_KVO:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Current_System_Mode_1:int;
	isInner:bool)

returns (idPAUSED_Arbiter:int;
	IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Current_System_Mode:int);


var 	idPAUSED_Arbiter_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Current_System_Mode_2:int;


let



	-- set state as active 
	idPAUSED_Arbiter_2 
	= 218;
	

	IM_OUT_Flow_Rate_Commanded_2 
	= if (not isInner) then CONFIG_IN_Flow_Rate_KVO
	 else IM_OUT_Flow_Rate_Commanded_1;
	

	IM_OUT_Current_System_Mode_2 
	= if (not isInner) then 8
	 else IM_OUT_Current_System_Mode_1;
	

	(idPAUSED_Arbiter, IM_OUT_Flow_Rate_Commanded, IM_OUT_Current_System_Mode) 
	= (idPAUSED_Arbiter_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2);
	

tel





--During action for state :Arbiter_Manual_Paused_KVO
node Arbiter_Manual_Paused_KVO_du(CONFIG_IN_Flow_Rate_KVO:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Current_System_Mode_1:int)

returns (IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Current_System_Mode:int);


var 	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Current_System_Mode_2:int;


let



	IM_OUT_Flow_Rate_Commanded_2 
	= CONFIG_IN_Flow_Rate_KVO;
	

	IM_OUT_Current_System_Mode_2 
	= 8;
	

	(IM_OUT_Flow_Rate_Commanded, IM_OUT_Current_System_Mode) 
	= (IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2);
	

tel





-- Exit action for state :Arbiter_Manual_Paused_KVO
node Arbiter_Manual_Paused_KVO_ex(CONFIG_IN_Flow_Rate_KVO:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Current_System_Mode_1:int;
	idPAUSED_Arbiter_1:int;
	isInner:bool)

returns (IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Current_System_Mode:int;
	idPAUSED_Arbiter:int);


var 	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Current_System_Mode_2:int;
	idPAUSED_Arbiter_2:int;


let



	IM_OUT_Flow_Rate_Commanded_2 
	= if (not isInner) then CONFIG_IN_Flow_Rate_KVO
	 else IM_OUT_Flow_Rate_Commanded_1;
	

	IM_OUT_Current_System_Mode_2 
	= if (not isInner) then 8
	 else IM_OUT_Current_System_Mode_1;
	

	-- set state as inactive 
	idPAUSED_Arbiter_2
	 = if (not isInner) then 0 else idPAUSED_Arbiter_1;


	(IM_OUT_Flow_Rate_Commanded, IM_OUT_Current_System_Mode, idPAUSED_Arbiter) 
	= (IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2, idPAUSED_Arbiter_1);
	

tel






-- Entry action for state :Arbiter_Paused_KVO
node Arbiter_Paused_KVO_en(idPAUSED_Arbiter_1:int;
	CONFIG_IN_Flow_Rate_KVO:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Current_System_Mode_1:int;
	isInner:bool)

returns (idPAUSED_Arbiter:int;
	IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Current_System_Mode:int);


var 	idPAUSED_Arbiter_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Current_System_Mode_2:int;


let



	-- set state as active 
	idPAUSED_Arbiter_2 
	= 217;
	

	IM_OUT_Flow_Rate_Commanded_2 
	= if (not isInner) then CONFIG_IN_Flow_Rate_KVO
	 else IM_OUT_Flow_Rate_Commanded_1;
	

	IM_OUT_Current_System_Mode_2 
	= if (not isInner) then 7
	 else IM_OUT_Current_System_Mode_1;
	

	(idPAUSED_Arbiter, IM_OUT_Flow_Rate_Commanded, IM_OUT_Current_System_Mode) 
	= (idPAUSED_Arbiter_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2);
	

tel





--During action for state :Arbiter_Paused_KVO
node Arbiter_Paused_KVO_du(CONFIG_IN_Flow_Rate_KVO:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Current_System_Mode_1:int)

returns (IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Current_System_Mode:int);


var 	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Current_System_Mode_2:int;


let



	IM_OUT_Flow_Rate_Commanded_2 
	= CONFIG_IN_Flow_Rate_KVO;
	

	IM_OUT_Current_System_Mode_2 
	= 7;
	

	(IM_OUT_Flow_Rate_Commanded, IM_OUT_Current_System_Mode) 
	= (IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2);
	

tel





-- Exit action for state :Arbiter_Paused_KVO
node Arbiter_Paused_KVO_ex(CONFIG_IN_Flow_Rate_KVO:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Current_System_Mode_1:int;
	idPAUSED_Arbiter_1:int;
	isInner:bool)

returns (IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Current_System_Mode:int;
	idPAUSED_Arbiter:int);


var 	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Current_System_Mode_2:int;
	idPAUSED_Arbiter_2:int;


let



	IM_OUT_Flow_Rate_Commanded_2 
	= if (not isInner) then CONFIG_IN_Flow_Rate_KVO
	 else IM_OUT_Flow_Rate_Commanded_1;
	

	IM_OUT_Current_System_Mode_2 
	= if (not isInner) then 7
	 else IM_OUT_Current_System_Mode_1;
	

	-- set state as inactive 
	idPAUSED_Arbiter_2
	 = if (not isInner) then 0 else idPAUSED_Arbiter_1;


	(IM_OUT_Flow_Rate_Commanded, IM_OUT_Current_System_Mode, idPAUSED_Arbiter) 
	= (IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2, idPAUSED_Arbiter_1);
	

tel






-- Entry action for state :Arbiter_Paused_NoKVO
node Arbiter_Paused_NoKVO_en(idPAUSED_Arbiter_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Current_System_Mode_1:int;
	isInner:bool)

returns (idPAUSED_Arbiter:int;
	IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Current_System_Mode:int);


var 	idPAUSED_Arbiter_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Current_System_Mode_2:int;


let



	-- set state as active 
	idPAUSED_Arbiter_2 
	= 216;
	

	IM_OUT_Flow_Rate_Commanded_2 
	= if (not isInner) then 0
	 else IM_OUT_Flow_Rate_Commanded_1;
	

	IM_OUT_Current_System_Mode_2 
	= if (not isInner) then 6
	 else IM_OUT_Current_System_Mode_1;
	

	(idPAUSED_Arbiter, IM_OUT_Flow_Rate_Commanded, IM_OUT_Current_System_Mode) 
	= (idPAUSED_Arbiter_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2);
	

tel





--During action for state :Arbiter_Paused_NoKVO
node Arbiter_Paused_NoKVO_du(IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Current_System_Mode_1:int)

returns (IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Current_System_Mode:int);


var 	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Current_System_Mode_2:int;


let



	IM_OUT_Flow_Rate_Commanded_2 
	= 0;
	

	IM_OUT_Current_System_Mode_2 
	= 6;
	

	(IM_OUT_Flow_Rate_Commanded, IM_OUT_Current_System_Mode) 
	= (IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2);
	

tel





-- Exit action for state :Arbiter_Paused_NoKVO
node Arbiter_Paused_NoKVO_ex(IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Current_System_Mode_1:int;
	idPAUSED_Arbiter_1:int;
	isInner:bool)

returns (IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Current_System_Mode:int;
	idPAUSED_Arbiter:int);


var 	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Current_System_Mode_2:int;
	idPAUSED_Arbiter_2:int;


let



	IM_OUT_Flow_Rate_Commanded_2 
	= if (not isInner) then 0
	 else IM_OUT_Flow_Rate_Commanded_1;
	

	IM_OUT_Current_System_Mode_2 
	= if (not isInner) then 6
	 else IM_OUT_Current_System_Mode_1;
	

	-- set state as inactive 
	idPAUSED_Arbiter_2
	 = if (not isInner) then 0 else idPAUSED_Arbiter_1;


	(IM_OUT_Flow_Rate_Commanded, IM_OUT_Current_System_Mode, idPAUSED_Arbiter) 
	= (IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2, idPAUSED_Arbiter_1);
	

tel






-- Entry action for state :PAUSED_Arbiter
node PAUSED_Arbiter_en(idPAUSED_Arbiter_1:int;
	idTHERAPY_PAUSED_1:int;
	idPAUSED_Alarm_Paused_1:int;
	ALARM_IN_Highest_Level_Alarm:int;
	IM_OUT_Current_System_Mode_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	CONFIG_IN_Flow_Rate_KVO:int;
	isInner:bool)

returns (idPAUSED_Arbiter:int;
	idTHERAPY_PAUSED:int;
	IM_OUT_Current_System_Mode:int;
	IM_OUT_Flow_Rate_Commanded:int);


var 	idPAUSED_Arbiter_2, idPAUSED_Arbiter_3, idPAUSED_Arbiter_4, idPAUSED_Arbiter_5, idPAUSED_Arbiter_6, idPAUSED_Arbiter_7, idPAUSED_Arbiter_8, idPAUSED_Arbiter_9:int;
	idTHERAPY_PAUSED_2, idTHERAPY_PAUSED_3, idTHERAPY_PAUSED_4:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3, IM_OUT_Current_System_Mode_4, IM_OUT_Current_System_Mode_5, IM_OUT_Current_System_Mode_6, IM_OUT_Current_System_Mode_7, IM_OUT_Current_System_Mode_8, IM_OUT_Current_System_Mode_9:int;
	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Flow_Rate_Commanded_5, IM_OUT_Flow_Rate_Commanded_6, IM_OUT_Flow_Rate_Commanded_7, IM_OUT_Flow_Rate_Commanded_8, IM_OUT_Flow_Rate_Commanded_9:int;


let



	-- set state as active 
	idTHERAPY_PAUSED_2 
	= 215;
	

	


-- transition trace :
	--POINT__To__Junction281_1, Junction281__To__Arbiter_Paused_NoKVO_1
		(idPAUSED_Arbiter_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2) 
	= 
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=4 )) then 
		Arbiter_Paused_NoKVO_en(idPAUSED_Arbiter_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false)
		 else (idPAUSED_Arbiter_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);
		


-- transition trace :
	--POINT__To__Junction281_1, Junction281__To__Arbiter_Paused_KVO_2
		(idPAUSED_Arbiter_3, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Current_System_Mode_3) 
	= 
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=3 )) then 
		Arbiter_Paused_KVO_en(idPAUSED_Arbiter_1, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false)
		 else (idPAUSED_Arbiter_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);
		


-- transition trace :
	--POINT__To__Junction281_1, Junction281__To__Arbiter_Manual_Paused_KVO_3
		(idPAUSED_Arbiter_4, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Current_System_Mode_4) 
	= Arbiter_Manual_Paused_KVO_en(idPAUSED_Arbiter_1, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false);
		

	(idPAUSED_Arbiter_5, idTHERAPY_PAUSED_3, IM_OUT_Current_System_Mode_5, IM_OUT_Flow_Rate_Commanded_5) 
	= 

	if ( idPAUSED_Arbiter_1 = 0) then

	
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=4 )) then 
		(idPAUSED_Arbiter_2, idTHERAPY_PAUSED_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2)
		 else
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=3 )) then 
		(idPAUSED_Arbiter_3, idTHERAPY_PAUSED_2, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3)
		 else (idPAUSED_Arbiter_4, idTHERAPY_PAUSED_2, IM_OUT_Current_System_Mode_4, IM_OUT_Flow_Rate_Commanded_4)

	 else(idPAUSED_Arbiter_1, idTHERAPY_PAUSED_2, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1);

	

	(idPAUSED_Arbiter_6, IM_OUT_Flow_Rate_Commanded_6, IM_OUT_Current_System_Mode_6) 
	= 
	if ( idPAUSED_Arbiter_1 = 216) then
	Arbiter_Paused_NoKVO_en(idPAUSED_Arbiter_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false)
	 else (idPAUSED_Arbiter_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);

	

	(idPAUSED_Arbiter_7, IM_OUT_Flow_Rate_Commanded_7, IM_OUT_Current_System_Mode_7) 
	= 
	if ( idPAUSED_Arbiter_1 = 217) then
	Arbiter_Paused_KVO_en(idPAUSED_Arbiter_1, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false)
	 else (idPAUSED_Arbiter_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);

	

	(idPAUSED_Arbiter_8, IM_OUT_Flow_Rate_Commanded_8, IM_OUT_Current_System_Mode_8) 
	= 
	if ( idPAUSED_Arbiter_1 = 218) then
	Arbiter_Manual_Paused_KVO_en(idPAUSED_Arbiter_1, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false)
	 else (idPAUSED_Arbiter_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);

	

	(idPAUSED_Arbiter_9, idTHERAPY_PAUSED_4, IM_OUT_Current_System_Mode_9, IM_OUT_Flow_Rate_Commanded_9) 
	= 
		 if ( idPAUSED_Arbiter_1 = 0) then 
		(idPAUSED_Arbiter_5, idTHERAPY_PAUSED_3, IM_OUT_Current_System_Mode_5, IM_OUT_Flow_Rate_Commanded_5)
		 else
		 if ( idPAUSED_Arbiter_1 = 216) then 
		(idPAUSED_Arbiter_6, idTHERAPY_PAUSED_3, IM_OUT_Current_System_Mode_6, IM_OUT_Flow_Rate_Commanded_6)
		 else
		 if ( idPAUSED_Arbiter_1 = 217) then 
		(idPAUSED_Arbiter_7, idTHERAPY_PAUSED_3, IM_OUT_Current_System_Mode_7, IM_OUT_Flow_Rate_Commanded_7)
		 else
		 if ( idPAUSED_Arbiter_1 = 218) then 
		(idPAUSED_Arbiter_8, idTHERAPY_PAUSED_3, IM_OUT_Current_System_Mode_8, IM_OUT_Flow_Rate_Commanded_8)
		 else (idPAUSED_Arbiter_1, idTHERAPY_PAUSED_2, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1);


	(idPAUSED_Arbiter, idTHERAPY_PAUSED, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded) 
	= (idPAUSED_Arbiter_9, idTHERAPY_PAUSED_4, IM_OUT_Current_System_Mode_9, IM_OUT_Flow_Rate_Commanded_9);
	

tel





-- Exit action for state :PAUSED_Arbiter
node PAUSED_Arbiter_ex(IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Current_System_Mode_1:int;
	idPAUSED_Arbiter_1:int;
	CONFIG_IN_Flow_Rate_KVO:int;
	idTHERAPY_PAUSED_1:int;
	isInner:bool)

returns (IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Current_System_Mode:int;
	idPAUSED_Arbiter:int;
	idTHERAPY_PAUSED:int);


var 	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Flow_Rate_Commanded_5:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3, IM_OUT_Current_System_Mode_4, IM_OUT_Current_System_Mode_5:int;
	idPAUSED_Arbiter_2, idPAUSED_Arbiter_3, idPAUSED_Arbiter_4, idPAUSED_Arbiter_5, idPAUSED_Arbiter_6:int;
	idTHERAPY_PAUSED_2:int;


let



	
	(IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2, idPAUSED_Arbiter_2) 
	= 
	if ( idPAUSED_Arbiter_1 = 216) then
	Arbiter_Paused_NoKVO_ex(IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1, false)
	 else (IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1);

	

	(IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Current_System_Mode_3, idPAUSED_Arbiter_3) 
	= 
	if ( idPAUSED_Arbiter_1 = 217) then
	Arbiter_Paused_KVO_ex(CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1, false)
	 else (IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1);

	

	(IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Current_System_Mode_4, idPAUSED_Arbiter_4) 
	= 
	if ( idPAUSED_Arbiter_1 = 218) then
	Arbiter_Manual_Paused_KVO_ex(CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1, false)
	 else (IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1);

	

	(IM_OUT_Flow_Rate_Commanded_5, IM_OUT_Current_System_Mode_5, idPAUSED_Arbiter_5) 
	= 
		 if ( idPAUSED_Arbiter_1 = 216) then 
		(IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2, idPAUSED_Arbiter_2)
		 else
		 if ( idPAUSED_Arbiter_1 = 217) then 
		(IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Current_System_Mode_3, idPAUSED_Arbiter_3)
		 else
		 if ( idPAUSED_Arbiter_1 = 218) then 
		(IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Current_System_Mode_4, idPAUSED_Arbiter_4)
		 else (IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1);


	-- set state as inactive 
	idTHERAPY_PAUSED_2
	 = if (not isInner) then 0 else idTHERAPY_PAUSED_1;

	idPAUSED_Arbiter_6 
	= 0;
	

	(IM_OUT_Flow_Rate_Commanded, IM_OUT_Current_System_Mode, idPAUSED_Arbiter, idTHERAPY_PAUSED) 
	= (IM_OUT_Flow_Rate_Commanded_5, IM_OUT_Current_System_Mode_5, idPAUSED_Arbiter_6, idTHERAPY_PAUSED_1);
	

tel






-- Entry action for state :Manual_Paused_OFF
node Manual_Paused_OFF_en(idPAUSED_Manual_Paused_1:int;
	isInner:bool)

returns (idPAUSED_Manual_Paused:int);


var 	idPAUSED_Manual_Paused_2:int;


let



	-- set state as active 
	idPAUSED_Manual_Paused_2 
	= 223;
	

	(idPAUSED_Manual_Paused) 
	= (idPAUSED_Manual_Paused_2);
	

tel





-- Exit action for state :Manual_Paused_OFF
node Manual_Paused_OFF_ex(idPAUSED_Manual_Paused_1:int;
	isInner:bool)

returns (idPAUSED_Manual_Paused:int);


var 	idPAUSED_Manual_Paused_2:int;


let



	-- set state as inactive 
	idPAUSED_Manual_Paused_2
	 = if (not isInner) then 0 else idPAUSED_Manual_Paused_1;


	(idPAUSED_Manual_Paused) 
	= (idPAUSED_Manual_Paused_1);
	

tel






-- Entry action for state :Manual_Paused_ON
node Manual_Paused_ON_en(idPAUSED_Manual_Paused_1:int;
	isInner:bool)

returns (idPAUSED_Manual_Paused:int);


var 	idPAUSED_Manual_Paused_2:int;


let



	-- set state as active 
	idPAUSED_Manual_Paused_2 
	= 224;
	

	(idPAUSED_Manual_Paused) 
	= (idPAUSED_Manual_Paused_2);
	

tel





-- Exit action for state :Manual_Paused_ON
node Manual_Paused_ON_ex(idPAUSED_Manual_Paused_1:int;
	isInner:bool)

returns (idPAUSED_Manual_Paused:int);


var 	idPAUSED_Manual_Paused_2:int;


let



	-- set state as inactive 
	idPAUSED_Manual_Paused_2
	 = if (not isInner) then 0 else idPAUSED_Manual_Paused_1;


	(idPAUSED_Manual_Paused) 
	= (idPAUSED_Manual_Paused_1);
	

tel






-- Entry action for state :PAUSED_Manual_Paused
node PAUSED_Manual_Paused_en(idPAUSED_Manual_Paused_1:int;
	idTHERAPY_PAUSED_1:int;
	OP_CMD_IN_Infusion_Inhibit:bool;
	isInner:bool)

returns (idPAUSED_Manual_Paused:int;
	idTHERAPY_PAUSED:int);


var 	idPAUSED_Manual_Paused_2, idPAUSED_Manual_Paused_3, idPAUSED_Manual_Paused_4, idPAUSED_Manual_Paused_5, idPAUSED_Manual_Paused_6, idPAUSED_Manual_Paused_7:int;
	idTHERAPY_PAUSED_2, idTHERAPY_PAUSED_3, idTHERAPY_PAUSED_4:int;


let



	-- set state as active 
	idTHERAPY_PAUSED_2 
	= 222;
	

	
-- transition trace :
	--POINT__To__Manual_Paused_ON_1
		(idPAUSED_Manual_Paused_2) 
	= 
		 if (( OP_CMD_IN_Infusion_Inhibit )) then 
		Manual_Paused_ON_en(idPAUSED_Manual_Paused_1, false)
		 else (idPAUSED_Manual_Paused_1);
		

-- transition trace :
	--POINT__To__Manual_Paused_OFF_2
		(idPAUSED_Manual_Paused_3) 
	= Manual_Paused_OFF_en(idPAUSED_Manual_Paused_2, false);
		

	(idPAUSED_Manual_Paused_4, idTHERAPY_PAUSED_3) 
	= 

	if ( idPAUSED_Manual_Paused_1 = 0) then

	
		 if (( OP_CMD_IN_Infusion_Inhibit )) then 
		(idPAUSED_Manual_Paused_2, idTHERAPY_PAUSED_2)
		 else (idPAUSED_Manual_Paused_3, idTHERAPY_PAUSED_2)

	 else(idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_2);

	

	(idPAUSED_Manual_Paused_5) 
	= 
	if ( idPAUSED_Manual_Paused_1 = 223) then
	Manual_Paused_OFF_en(idPAUSED_Manual_Paused_1, false)
	 else (idPAUSED_Manual_Paused_1);

	

	(idPAUSED_Manual_Paused_6) 
	= 
	if ( idPAUSED_Manual_Paused_1 = 224) then
	Manual_Paused_ON_en(idPAUSED_Manual_Paused_1, false)
	 else (idPAUSED_Manual_Paused_1);

	

	(idPAUSED_Manual_Paused_7, idTHERAPY_PAUSED_4) 
	= 
		 if ( idPAUSED_Manual_Paused_1 = 0) then 
		(idPAUSED_Manual_Paused_4, idTHERAPY_PAUSED_3)
		 else
		 if ( idPAUSED_Manual_Paused_1 = 223) then 
		(idPAUSED_Manual_Paused_5, idTHERAPY_PAUSED_3)
		 else
		 if ( idPAUSED_Manual_Paused_1 = 224) then 
		(idPAUSED_Manual_Paused_6, idTHERAPY_PAUSED_3)
		 else (idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_2);


	(idPAUSED_Manual_Paused, idTHERAPY_PAUSED) 
	= (idPAUSED_Manual_Paused_7, idTHERAPY_PAUSED_4);
	

tel





-- Exit action for state :PAUSED_Manual_Paused
node PAUSED_Manual_Paused_ex(idPAUSED_Manual_Paused_1:int;
	idTHERAPY_PAUSED_1:int;
	isInner:bool)

returns (idPAUSED_Manual_Paused:int;
	idTHERAPY_PAUSED:int);


var 	idPAUSED_Manual_Paused_2, idPAUSED_Manual_Paused_3, idPAUSED_Manual_Paused_4, idPAUSED_Manual_Paused_5:int;
	idTHERAPY_PAUSED_2:int;


let



	
	(idPAUSED_Manual_Paused_2) 
	= 
	if ( idPAUSED_Manual_Paused_1 = 223) then
	Manual_Paused_OFF_ex(idPAUSED_Manual_Paused_1, false)
	 else (idPAUSED_Manual_Paused_1);

	

	(idPAUSED_Manual_Paused_3) 
	= 
	if ( idPAUSED_Manual_Paused_1 = 224) then
	Manual_Paused_ON_ex(idPAUSED_Manual_Paused_1, false)
	 else (idPAUSED_Manual_Paused_1);

	

	(idPAUSED_Manual_Paused_4) 
	= 
		 if ( idPAUSED_Manual_Paused_1 = 223) then 
		(idPAUSED_Manual_Paused_2)
		 else
		 if ( idPAUSED_Manual_Paused_1 = 224) then 
		(idPAUSED_Manual_Paused_3)
		 else (idPAUSED_Manual_Paused_1);


	-- set state as inactive 
	idTHERAPY_PAUSED_2
	 = if (not isInner) then 0 else idTHERAPY_PAUSED_1;

	idPAUSED_Manual_Paused_5 
	= 0;
	

	(idPAUSED_Manual_Paused, idTHERAPY_PAUSED) 
	= (idPAUSED_Manual_Paused_5, idTHERAPY_PAUSED_1);
	

tel






-- Entry action for state :Alarm_Paused_OFF
node Alarm_Paused_OFF_en(idPAUSED_Alarm_Paused_1:int;
	isInner:bool)

returns (idPAUSED_Alarm_Paused:int);


var 	idPAUSED_Alarm_Paused_2:int;


let



	-- set state as active 
	idPAUSED_Alarm_Paused_2 
	= 220;
	

	(idPAUSED_Alarm_Paused) 
	= (idPAUSED_Alarm_Paused_2);
	

tel





-- Exit action for state :Alarm_Paused_OFF
node Alarm_Paused_OFF_ex(idPAUSED_Alarm_Paused_1:int;
	isInner:bool)

returns (idPAUSED_Alarm_Paused:int);


var 	idPAUSED_Alarm_Paused_2:int;


let



	-- set state as inactive 
	idPAUSED_Alarm_Paused_2
	 = if (not isInner) then 0 else idPAUSED_Alarm_Paused_1;


	(idPAUSED_Alarm_Paused) 
	= (idPAUSED_Alarm_Paused_1);
	

tel






-- Entry action for state :Alarm_Paused_ON
node Alarm_Paused_ON_en(idPAUSED_Alarm_Paused_1:int;
	isInner:bool)

returns (idPAUSED_Alarm_Paused:int);


var 	idPAUSED_Alarm_Paused_2:int;


let



	-- set state as active 
	idPAUSED_Alarm_Paused_2 
	= 221;
	

	(idPAUSED_Alarm_Paused) 
	= (idPAUSED_Alarm_Paused_2);
	

tel





-- Exit action for state :Alarm_Paused_ON
node Alarm_Paused_ON_ex(idPAUSED_Alarm_Paused_1:int;
	isInner:bool)

returns (idPAUSED_Alarm_Paused:int);


var 	idPAUSED_Alarm_Paused_2:int;


let



	-- set state as inactive 
	idPAUSED_Alarm_Paused_2
	 = if (not isInner) then 0 else idPAUSED_Alarm_Paused_1;


	(idPAUSED_Alarm_Paused) 
	= (idPAUSED_Alarm_Paused_1);
	

tel






-- Entry action for state :PAUSED_Alarm_Paused
node PAUSED_Alarm_Paused_en(idPAUSED_Alarm_Paused_1:int;
	idTHERAPY_PAUSED_1:int;
	ALARM_IN_Highest_Level_Alarm:int;
	isInner:bool)

returns (idPAUSED_Alarm_Paused:int;
	idTHERAPY_PAUSED:int);


var 	idPAUSED_Alarm_Paused_2, idPAUSED_Alarm_Paused_3, idPAUSED_Alarm_Paused_4, idPAUSED_Alarm_Paused_5, idPAUSED_Alarm_Paused_6, idPAUSED_Alarm_Paused_7:int;
	idTHERAPY_PAUSED_2, idTHERAPY_PAUSED_3, idTHERAPY_PAUSED_4:int;


let



	-- set state as active 
	idTHERAPY_PAUSED_2 
	= 219;
	

	
-- transition trace :
	--POINT__To__Alarm_Paused_ON_1
		(idPAUSED_Alarm_Paused_2) 
	= 
		 if (( ALARM_IN_Highest_Level_Alarm>=3 )) then 
		Alarm_Paused_ON_en(idPAUSED_Alarm_Paused_1, false)
		 else (idPAUSED_Alarm_Paused_1);
		

-- transition trace :
	--POINT__To__Alarm_Paused_OFF_2
		(idPAUSED_Alarm_Paused_3) 
	= Alarm_Paused_OFF_en(idPAUSED_Alarm_Paused_2, false);
		

	(idPAUSED_Alarm_Paused_4, idTHERAPY_PAUSED_3) 
	= 

	if ( idPAUSED_Alarm_Paused_1 = 0) then

	
		 if (( ALARM_IN_Highest_Level_Alarm>=3 )) then 
		(idPAUSED_Alarm_Paused_2, idTHERAPY_PAUSED_2)
		 else (idPAUSED_Alarm_Paused_3, idTHERAPY_PAUSED_2)

	 else(idPAUSED_Alarm_Paused_1, idTHERAPY_PAUSED_2);

	

	(idPAUSED_Alarm_Paused_5) 
	= 
	if ( idPAUSED_Alarm_Paused_1 = 220) then
	Alarm_Paused_OFF_en(idPAUSED_Alarm_Paused_1, false)
	 else (idPAUSED_Alarm_Paused_1);

	

	(idPAUSED_Alarm_Paused_6) 
	= 
	if ( idPAUSED_Alarm_Paused_1 = 221) then
	Alarm_Paused_ON_en(idPAUSED_Alarm_Paused_1, false)
	 else (idPAUSED_Alarm_Paused_1);

	

	(idPAUSED_Alarm_Paused_7, idTHERAPY_PAUSED_4) 
	= 
		 if ( idPAUSED_Alarm_Paused_1 = 0) then 
		(idPAUSED_Alarm_Paused_4, idTHERAPY_PAUSED_3)
		 else
		 if ( idPAUSED_Alarm_Paused_1 = 220) then 
		(idPAUSED_Alarm_Paused_5, idTHERAPY_PAUSED_3)
		 else
		 if ( idPAUSED_Alarm_Paused_1 = 221) then 
		(idPAUSED_Alarm_Paused_6, idTHERAPY_PAUSED_3)
		 else (idPAUSED_Alarm_Paused_1, idTHERAPY_PAUSED_2);


	(idPAUSED_Alarm_Paused, idTHERAPY_PAUSED) 
	= (idPAUSED_Alarm_Paused_7, idTHERAPY_PAUSED_4);
	

tel





-- Exit action for state :PAUSED_Alarm_Paused
node PAUSED_Alarm_Paused_ex(idPAUSED_Alarm_Paused_1:int;
	idTHERAPY_PAUSED_1:int;
	isInner:bool)

returns (idPAUSED_Alarm_Paused:int;
	idTHERAPY_PAUSED:int);


var 	idPAUSED_Alarm_Paused_2, idPAUSED_Alarm_Paused_3, idPAUSED_Alarm_Paused_4, idPAUSED_Alarm_Paused_5:int;
	idTHERAPY_PAUSED_2:int;


let



	
	(idPAUSED_Alarm_Paused_2) 
	= 
	if ( idPAUSED_Alarm_Paused_1 = 220) then
	Alarm_Paused_OFF_ex(idPAUSED_Alarm_Paused_1, false)
	 else (idPAUSED_Alarm_Paused_1);

	

	(idPAUSED_Alarm_Paused_3) 
	= 
	if ( idPAUSED_Alarm_Paused_1 = 221) then
	Alarm_Paused_ON_ex(idPAUSED_Alarm_Paused_1, false)
	 else (idPAUSED_Alarm_Paused_1);

	

	(idPAUSED_Alarm_Paused_4) 
	= 
		 if ( idPAUSED_Alarm_Paused_1 = 220) then 
		(idPAUSED_Alarm_Paused_2)
		 else
		 if ( idPAUSED_Alarm_Paused_1 = 221) then 
		(idPAUSED_Alarm_Paused_3)
		 else (idPAUSED_Alarm_Paused_1);


	-- set state as inactive 
	idTHERAPY_PAUSED_2
	 = if (not isInner) then 0 else idTHERAPY_PAUSED_1;

	idPAUSED_Alarm_Paused_5 
	= 0;
	

	(idPAUSED_Alarm_Paused, idTHERAPY_PAUSED) 
	= (idPAUSED_Alarm_Paused_5, idTHERAPY_PAUSED_1);
	

tel






-- Entry action for state :THERAPY_PAUSED
node THERAPY_PAUSED_en(idTHERAPY_PAUSED_1:int;
	idInfusion_Manager_THERAPY_1:int;
	ALARM_IN_Highest_Level_Alarm:int;
	idPAUSED_Alarm_Paused_1:int;
	OP_CMD_IN_Infusion_Inhibit:bool;
	idPAUSED_Manual_Paused_1:int;
	CONFIG_IN_Flow_Rate_KVO:int;
	IM_OUT_Current_System_Mode_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	idPAUSED_Arbiter_1:int;
	isInner:bool)

returns (idTHERAPY_PAUSED:int;
	idInfusion_Manager_THERAPY:int;
	idPAUSED_Alarm_Paused:int;
	idPAUSED_Manual_Paused:int;
	IM_OUT_Current_System_Mode:int;
	IM_OUT_Flow_Rate_Commanded:int;
	idPAUSED_Arbiter:int);


var 	idTHERAPY_PAUSED_2, idTHERAPY_PAUSED_3, idTHERAPY_PAUSED_4:int;
	idInfusion_Manager_THERAPY_2:int;
	idPAUSED_Alarm_Paused_2:int;
	idPAUSED_Manual_Paused_2:int;
	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	idPAUSED_Arbiter_2:int;


let



	-- set state as active 
	idInfusion_Manager_THERAPY_2 
	= 214;
	

	
	(idPAUSED_Alarm_Paused_2, idTHERAPY_PAUSED_2) 
	= PAUSED_Alarm_Paused_en(idPAUSED_Alarm_Paused_1, idTHERAPY_PAUSED_1, ALARM_IN_Highest_Level_Alarm, false);

	(idPAUSED_Manual_Paused_2, idTHERAPY_PAUSED_3) 
	= PAUSED_Manual_Paused_en(idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_2, OP_CMD_IN_Infusion_Inhibit, false);

	(idPAUSED_Arbiter_2, idTHERAPY_PAUSED_4, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2) 
	= PAUSED_Arbiter_en(idPAUSED_Arbiter_1, idTHERAPY_PAUSED_3, idPAUSED_Alarm_Paused_2, ALARM_IN_Highest_Level_Alarm, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, CONFIG_IN_Flow_Rate_KVO, false);


	(idTHERAPY_PAUSED, idInfusion_Manager_THERAPY, idPAUSED_Alarm_Paused, idPAUSED_Manual_Paused, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, idPAUSED_Arbiter) 
	= (idTHERAPY_PAUSED_4, idInfusion_Manager_THERAPY_2, idPAUSED_Alarm_Paused_2, idPAUSED_Manual_Paused_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idPAUSED_Arbiter_2);
	

tel





-- Exit action for state :THERAPY_PAUSED
node THERAPY_PAUSED_ex(IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Current_System_Mode_1:int;
	idPAUSED_Arbiter_1:int;
	CONFIG_IN_Flow_Rate_KVO:int;
	idTHERAPY_PAUSED_1:int;
	idPAUSED_Manual_Paused_1:int;
	idPAUSED_Alarm_Paused_1:int;
	idInfusion_Manager_THERAPY_1:int;
	isInner:bool)

returns (IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Current_System_Mode:int;
	idPAUSED_Arbiter:int;
	idTHERAPY_PAUSED:int;
	idPAUSED_Manual_Paused:int;
	idPAUSED_Alarm_Paused:int;
	idInfusion_Manager_THERAPY:int);


var 	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Current_System_Mode_2:int;
	idPAUSED_Arbiter_2:int;
	idTHERAPY_PAUSED_2, idTHERAPY_PAUSED_3, idTHERAPY_PAUSED_4, idTHERAPY_PAUSED_5:int;
	idPAUSED_Manual_Paused_2:int;
	idPAUSED_Alarm_Paused_2:int;
	idInfusion_Manager_THERAPY_2:int;


let



	
	(IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2, idPAUSED_Arbiter_2, idTHERAPY_PAUSED_2) 
	= PAUSED_Arbiter_ex(IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1, CONFIG_IN_Flow_Rate_KVO, idTHERAPY_PAUSED_1, false);

	(idPAUSED_Manual_Paused_2, idTHERAPY_PAUSED_3) 
	= PAUSED_Manual_Paused_ex(idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_2, false);

	(idPAUSED_Alarm_Paused_2, idTHERAPY_PAUSED_4) 
	= PAUSED_Alarm_Paused_ex(idPAUSED_Alarm_Paused_1, idTHERAPY_PAUSED_3, false);


	-- set state as inactive 
	idInfusion_Manager_THERAPY_2
	 = if (not isInner) then 0 else idInfusion_Manager_THERAPY_1;

	idTHERAPY_PAUSED_5 
	= 0;
	

	(IM_OUT_Flow_Rate_Commanded, IM_OUT_Current_System_Mode, idPAUSED_Arbiter, idTHERAPY_PAUSED, idPAUSED_Manual_Paused, idPAUSED_Alarm_Paused, idInfusion_Manager_THERAPY) 
	= (IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2, idPAUSED_Arbiter_2, idTHERAPY_PAUSED_5, idPAUSED_Manual_Paused_2, idPAUSED_Alarm_Paused_2, idInfusion_Manager_THERAPY_1);
	

tel






-- Entry action for state :Arbiter_Intermittent_Bolus
node Arbiter_Intermittent_Bolus_en(idACTIVE_Arbiter_1:int;
	CONFIG_IN_Flow_Rate_Intermittent_Bolus:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Current_System_Mode_1:int;
	isInner:bool)

returns (idACTIVE_Arbiter:int;
	IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Current_System_Mode:int);


var 	idACTIVE_Arbiter_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Current_System_Mode_2:int;


let



	-- set state as active 
	idACTIVE_Arbiter_2 
	= 200;
	

	IM_OUT_Flow_Rate_Commanded_2 
	= if (not isInner) then CONFIG_IN_Flow_Rate_Intermittent_Bolus
	 else IM_OUT_Flow_Rate_Commanded_1;
	

	IM_OUT_Current_System_Mode_2 
	= if (not isInner) then 3
	 else IM_OUT_Current_System_Mode_1;
	

	(idACTIVE_Arbiter, IM_OUT_Flow_Rate_Commanded, IM_OUT_Current_System_Mode) 
	= (idACTIVE_Arbiter_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2);
	

tel





--During action for state :Arbiter_Intermittent_Bolus
node Arbiter_Intermittent_Bolus_du(CONFIG_IN_Flow_Rate_Intermittent_Bolus:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Current_System_Mode_1:int)

returns (IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Current_System_Mode:int);


var 	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Current_System_Mode_2:int;


let



	IM_OUT_Flow_Rate_Commanded_2 
	= CONFIG_IN_Flow_Rate_Intermittent_Bolus;
	

	IM_OUT_Current_System_Mode_2 
	= 3;
	

	(IM_OUT_Flow_Rate_Commanded, IM_OUT_Current_System_Mode) 
	= (IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2);
	

tel





-- Exit action for state :Arbiter_Intermittent_Bolus
node Arbiter_Intermittent_Bolus_ex(idACTIVE_Arbiter_1:int;
	isInner:bool)

returns (idACTIVE_Arbiter:int);


var 	idACTIVE_Arbiter_2:int;


let



	-- set state as inactive 
	idACTIVE_Arbiter_2
	 = if (not isInner) then 0 else idACTIVE_Arbiter_1;


	(idACTIVE_Arbiter) 
	= (idACTIVE_Arbiter_1);
	

tel






-- Entry action for state :Arbiter_Patient_Bolus
node Arbiter_Patient_Bolus_en(idACTIVE_Arbiter_1:int;
	CONFIG_IN_Flow_Rate_Patient_Bolus:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Current_System_Mode_1:int;
	isInner:bool)

returns (idACTIVE_Arbiter:int;
	IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Current_System_Mode:int);


var 	idACTIVE_Arbiter_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Current_System_Mode_2:int;


let



	-- set state as active 
	idACTIVE_Arbiter_2 
	= 199;
	

	IM_OUT_Flow_Rate_Commanded_2 
	= if (not isInner) then CONFIG_IN_Flow_Rate_Patient_Bolus
	 else IM_OUT_Flow_Rate_Commanded_1;
	

	IM_OUT_Current_System_Mode_2 
	= if (not isInner) then 4
	 else IM_OUT_Current_System_Mode_1;
	

	(idACTIVE_Arbiter, IM_OUT_Flow_Rate_Commanded, IM_OUT_Current_System_Mode) 
	= (idACTIVE_Arbiter_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2);
	

tel





--During action for state :Arbiter_Patient_Bolus
node Arbiter_Patient_Bolus_du(CONFIG_IN_Flow_Rate_Patient_Bolus:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Current_System_Mode_1:int)

returns (IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Current_System_Mode:int);


var 	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Current_System_Mode_2:int;


let



	IM_OUT_Flow_Rate_Commanded_2 
	= CONFIG_IN_Flow_Rate_Patient_Bolus;
	

	IM_OUT_Current_System_Mode_2 
	= 4;
	

	(IM_OUT_Flow_Rate_Commanded, IM_OUT_Current_System_Mode) 
	= (IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2);
	

tel





-- Exit action for state :Arbiter_Patient_Bolus
node Arbiter_Patient_Bolus_ex(idACTIVE_Arbiter_1:int;
	isInner:bool)

returns (idACTIVE_Arbiter:int);


var 	idACTIVE_Arbiter_2:int;


let



	-- set state as inactive 
	idACTIVE_Arbiter_2
	 = if (not isInner) then 0 else idACTIVE_Arbiter_1;


	(idACTIVE_Arbiter) 
	= (idACTIVE_Arbiter_1);
	

tel






-- Entry action for state :Arbiter_Basal
node Arbiter_Basal_en(idACTIVE_Arbiter_1:int;
	CONFIG_IN_Flow_Rate_Basal:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Current_System_Mode_1:int;
	isInner:bool)

returns (idACTIVE_Arbiter:int;
	IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Current_System_Mode:int);


var 	idACTIVE_Arbiter_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Current_System_Mode_2:int;


let



	-- set state as active 
	idACTIVE_Arbiter_2 
	= 201;
	

	IM_OUT_Flow_Rate_Commanded_2 
	= if (not isInner) then CONFIG_IN_Flow_Rate_Basal
	 else IM_OUT_Flow_Rate_Commanded_1;
	

	IM_OUT_Current_System_Mode_2 
	= if (not isInner) then 2
	 else IM_OUT_Current_System_Mode_1;
	

	(idACTIVE_Arbiter, IM_OUT_Flow_Rate_Commanded, IM_OUT_Current_System_Mode) 
	= (idACTIVE_Arbiter_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2);
	

tel





--During action for state :Arbiter_Basal
node Arbiter_Basal_du(CONFIG_IN_Flow_Rate_Basal:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Current_System_Mode_1:int)

returns (IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Current_System_Mode:int);


var 	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Current_System_Mode_2:int;


let



	IM_OUT_Flow_Rate_Commanded_2 
	= CONFIG_IN_Flow_Rate_Basal;
	

	IM_OUT_Current_System_Mode_2 
	= 2;
	

	(IM_OUT_Flow_Rate_Commanded, IM_OUT_Current_System_Mode) 
	= (IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2);
	

tel





-- Exit action for state :Arbiter_Basal
node Arbiter_Basal_ex(idACTIVE_Arbiter_1:int;
	isInner:bool)

returns (idACTIVE_Arbiter:int);


var 	idACTIVE_Arbiter_2:int;


let



	-- set state as inactive 
	idACTIVE_Arbiter_2
	 = if (not isInner) then 0 else idACTIVE_Arbiter_1;


	(idACTIVE_Arbiter) 
	= (idACTIVE_Arbiter_1);
	

tel






-- Entry action for state :ACTIVE_Arbiter
node ACTIVE_Arbiter_en(idACTIVE_Arbiter_1:int;
	idTHERAPY_ACTIVE_1:int;
	idACTIVE_PATIENT_1:int;
	CONFIG_IN_Flow_Rate_Patient_Bolus:int;
	IM_OUT_Current_System_Mode_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	idACTIVE_INTERMITTENT_1:int;
	CONFIG_IN_Flow_Rate_Intermittent_Bolus:int;
	CONFIG_IN_Flow_Rate_Basal:int;
	isInner:bool)

returns (idACTIVE_Arbiter:int;
	idTHERAPY_ACTIVE:int;
	IM_OUT_Current_System_Mode:int;
	IM_OUT_Flow_Rate_Commanded:int);


var 	idACTIVE_Arbiter_2, idACTIVE_Arbiter_3, idACTIVE_Arbiter_4, idACTIVE_Arbiter_5, idACTIVE_Arbiter_6, idACTIVE_Arbiter_7, idACTIVE_Arbiter_8, idACTIVE_Arbiter_9:int;
	idTHERAPY_ACTIVE_2, idTHERAPY_ACTIVE_3, idTHERAPY_ACTIVE_4:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3, IM_OUT_Current_System_Mode_4, IM_OUT_Current_System_Mode_5, IM_OUT_Current_System_Mode_6, IM_OUT_Current_System_Mode_7, IM_OUT_Current_System_Mode_8, IM_OUT_Current_System_Mode_9:int;
	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Flow_Rate_Commanded_5, IM_OUT_Flow_Rate_Commanded_6, IM_OUT_Flow_Rate_Commanded_7, IM_OUT_Flow_Rate_Commanded_8, IM_OUT_Flow_Rate_Commanded_9:int;


let



	-- set state as active 
	idTHERAPY_ACTIVE_2 
	= 198;
	

	


-- transition trace :
	--POINT__To__Junction245_1, Junction245__To__Arbiter_Patient_Bolus_1
		(idACTIVE_Arbiter_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2) 
	= 
		 if (( (idACTIVE_PATIENT_1 = 206) )) then 
		Arbiter_Patient_Bolus_en(idACTIVE_Arbiter_1, CONFIG_IN_Flow_Rate_Patient_Bolus, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false)
		 else (idACTIVE_Arbiter_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);
		


-- transition trace :
	--POINT__To__Junction245_1, Junction245__To__Arbiter_Intermittent_Bolus_2
		(idACTIVE_Arbiter_3, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Current_System_Mode_3) 
	= 
		 if (( (idACTIVE_INTERMITTENT_1 = 210) )) then 
		Arbiter_Intermittent_Bolus_en(idACTIVE_Arbiter_1, CONFIG_IN_Flow_Rate_Intermittent_Bolus, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false)
		 else (idACTIVE_Arbiter_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);
		


-- transition trace :
	--POINT__To__Junction245_1, Junction245__To__Arbiter_Basal_3
		(idACTIVE_Arbiter_4, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Current_System_Mode_4) 
	= Arbiter_Basal_en(idACTIVE_Arbiter_1, CONFIG_IN_Flow_Rate_Basal, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false);
		

	(idACTIVE_Arbiter_5, idTHERAPY_ACTIVE_3, IM_OUT_Current_System_Mode_5, IM_OUT_Flow_Rate_Commanded_5) 
	= 

	if ( idACTIVE_Arbiter_1 = 0) then

	
		 if (( (idACTIVE_PATIENT_1 = 206) )) then 
		(idACTIVE_Arbiter_2, idTHERAPY_ACTIVE_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2)
		 else
		 if (( (idACTIVE_INTERMITTENT_1 = 210) )) then 
		(idACTIVE_Arbiter_3, idTHERAPY_ACTIVE_2, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3)
		 else (idACTIVE_Arbiter_4, idTHERAPY_ACTIVE_2, IM_OUT_Current_System_Mode_4, IM_OUT_Flow_Rate_Commanded_4)

	 else(idACTIVE_Arbiter_1, idTHERAPY_ACTIVE_2, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1);

	

	(idACTIVE_Arbiter_6, IM_OUT_Flow_Rate_Commanded_6, IM_OUT_Current_System_Mode_6) 
	= 
	if ( idACTIVE_Arbiter_1 = 199) then
	Arbiter_Patient_Bolus_en(idACTIVE_Arbiter_1, CONFIG_IN_Flow_Rate_Patient_Bolus, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false)
	 else (idACTIVE_Arbiter_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);

	

	(idACTIVE_Arbiter_7, IM_OUT_Flow_Rate_Commanded_7, IM_OUT_Current_System_Mode_7) 
	= 
	if ( idACTIVE_Arbiter_1 = 200) then
	Arbiter_Intermittent_Bolus_en(idACTIVE_Arbiter_1, CONFIG_IN_Flow_Rate_Intermittent_Bolus, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false)
	 else (idACTIVE_Arbiter_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);

	

	(idACTIVE_Arbiter_8, IM_OUT_Flow_Rate_Commanded_8, IM_OUT_Current_System_Mode_8) 
	= 
	if ( idACTIVE_Arbiter_1 = 201) then
	Arbiter_Basal_en(idACTIVE_Arbiter_1, CONFIG_IN_Flow_Rate_Basal, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false)
	 else (idACTIVE_Arbiter_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);

	

	(idACTIVE_Arbiter_9, idTHERAPY_ACTIVE_4, IM_OUT_Current_System_Mode_9, IM_OUT_Flow_Rate_Commanded_9) 
	= 
		 if ( idACTIVE_Arbiter_1 = 0) then 
		(idACTIVE_Arbiter_5, idTHERAPY_ACTIVE_3, IM_OUT_Current_System_Mode_5, IM_OUT_Flow_Rate_Commanded_5)
		 else
		 if ( idACTIVE_Arbiter_1 = 199) then 
		(idACTIVE_Arbiter_6, idTHERAPY_ACTIVE_3, IM_OUT_Current_System_Mode_6, IM_OUT_Flow_Rate_Commanded_6)
		 else
		 if ( idACTIVE_Arbiter_1 = 200) then 
		(idACTIVE_Arbiter_7, idTHERAPY_ACTIVE_3, IM_OUT_Current_System_Mode_7, IM_OUT_Flow_Rate_Commanded_7)
		 else
		 if ( idACTIVE_Arbiter_1 = 201) then 
		(idACTIVE_Arbiter_8, idTHERAPY_ACTIVE_3, IM_OUT_Current_System_Mode_8, IM_OUT_Flow_Rate_Commanded_8)
		 else (idACTIVE_Arbiter_1, idTHERAPY_ACTIVE_2, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1);


	(idACTIVE_Arbiter, idTHERAPY_ACTIVE, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded) 
	= (idACTIVE_Arbiter_9, idTHERAPY_ACTIVE_4, IM_OUT_Current_System_Mode_9, IM_OUT_Flow_Rate_Commanded_9);
	

tel





-- Exit action for state :ACTIVE_Arbiter
node ACTIVE_Arbiter_ex(idACTIVE_Arbiter_1:int;
	idTHERAPY_ACTIVE_1:int;
	isInner:bool)

returns (idACTIVE_Arbiter:int;
	idTHERAPY_ACTIVE:int);


var 	idACTIVE_Arbiter_2, idACTIVE_Arbiter_3, idACTIVE_Arbiter_4, idACTIVE_Arbiter_5, idACTIVE_Arbiter_6:int;
	idTHERAPY_ACTIVE_2:int;


let



	
	(idACTIVE_Arbiter_2) 
	= 
	if ( idACTIVE_Arbiter_1 = 199) then
	Arbiter_Patient_Bolus_ex(idACTIVE_Arbiter_1, false)
	 else (idACTIVE_Arbiter_1);

	

	(idACTIVE_Arbiter_3) 
	= 
	if ( idACTIVE_Arbiter_1 = 200) then
	Arbiter_Intermittent_Bolus_ex(idACTIVE_Arbiter_1, false)
	 else (idACTIVE_Arbiter_1);

	

	(idACTIVE_Arbiter_4) 
	= 
	if ( idACTIVE_Arbiter_1 = 201) then
	Arbiter_Basal_ex(idACTIVE_Arbiter_1, false)
	 else (idACTIVE_Arbiter_1);

	

	(idACTIVE_Arbiter_5) 
	= 
		 if ( idACTIVE_Arbiter_1 = 199) then 
		(idACTIVE_Arbiter_2)
		 else
		 if ( idACTIVE_Arbiter_1 = 200) then 
		(idACTIVE_Arbiter_3)
		 else
		 if ( idACTIVE_Arbiter_1 = 201) then 
		(idACTIVE_Arbiter_4)
		 else (idACTIVE_Arbiter_1);


	-- set state as inactive 
	idTHERAPY_ACTIVE_2
	 = if (not isInner) then 0 else idTHERAPY_ACTIVE_1;

	idACTIVE_Arbiter_6 
	= 0;
	

	(idACTIVE_Arbiter, idTHERAPY_ACTIVE) 
	= (idACTIVE_Arbiter_6, idTHERAPY_ACTIVE_1);
	

tel






-- Entry action for state :INTERMITTENT_OFF
node INTERMITTENT_OFF_en(idACTIVE_INTERMITTENT_1:int;
	sbolus_timer_1:real;
	sbolusInter_timer_1:real;
	CONFIG_IN_Interval_Intermittent_Bolus:real;
	step_size:real;
	sbolus_req_1:bool;
	isInner:bool)

returns (idACTIVE_INTERMITTENT:int;
	sbolus_timer:real;
	sbolusInter_timer:real;
	sbolus_req:bool);


var 	idACTIVE_INTERMITTENT_2:int;
	sbolus_timer_2:real;
	sbolusInter_timer_2:real;
	sbolus_req_2:bool;


let



	-- set state as active 
	idACTIVE_INTERMITTENT_2 
	= 211;
	

	sbolus_timer_2 
	= if (not isInner) then 0.
	 else sbolus_timer_1;
	

	sbolus_req_2 
	= if (not isInner) then sbolus_trigger( sbolusInter_timer_1 ,CONFIG_IN_Interval_Intermittent_Bolus,step_size)
	 else sbolus_req_1;
	

	(sbolusInter_timer_2) 
	= if (not isInner) then sbolus_trigger2( sbolus_req_2 , sbolusInter_timer_1)
	 else (sbolusInter_timer_1);
	

	(idACTIVE_INTERMITTENT, sbolus_timer, sbolusInter_timer, sbolus_req) 
	= (idACTIVE_INTERMITTENT_2, sbolus_timer_2, sbolusInter_timer_2, sbolus_req_2);
	

tel





--During action for state :INTERMITTENT_OFF
node INTERMITTENT_OFF_du(sbolusInter_timer_1:real;
	CONFIG_IN_Interval_Intermittent_Bolus:real;
	step_size:real;
	sbolus_req_1:bool)

returns (sbolusInter_timer:real;
	sbolus_req:bool);


var 	sbolusInter_timer_2:real;
	sbolus_req_2:bool;


let



	sbolus_req_2 
	= sbolus_trigger( sbolusInter_timer_1 ,CONFIG_IN_Interval_Intermittent_Bolus,step_size);
	

	(sbolusInter_timer_2) 
	= sbolus_trigger2( sbolus_req_2 , sbolusInter_timer_1);
	

	(sbolusInter_timer, sbolus_req) 
	= (sbolusInter_timer_2, sbolus_req_2);
	

tel





-- Exit action for state :INTERMITTENT_OFF
node INTERMITTENT_OFF_ex(idACTIVE_INTERMITTENT_1:int;
	isInner:bool)

returns (idACTIVE_INTERMITTENT:int);


var 	idACTIVE_INTERMITTENT_2:int;


let



	-- set state as inactive 
	idACTIVE_INTERMITTENT_2
	 = if (not isInner) then 0 else idACTIVE_INTERMITTENT_1;


	(idACTIVE_INTERMITTENT) 
	= (idACTIVE_INTERMITTENT_1);
	

tel






--During action for state :INTERMITTENT_ON
node INTERMITTENT_ON_du(sbolus_timer_1:real;
	sbolus_req_1:bool)

returns (sbolus_timer:real;
	sbolus_req:bool);


var 	sbolus_timer_2:real;
	sbolus_req_2:bool;


let



	sbolus_timer_2 
	=  sbolus_timer_1  + 1.;
	

	sbolus_req_2 
	= false;
	

	(sbolus_timer, sbolus_req) 
	= (sbolus_timer_2, sbolus_req_2);
	

tel





-- Exit action for state :INTERMITTENT_ON
node INTERMITTENT_ON_ex(sbolus_timer_1:real;
	sbolus_req_1:bool;
	idACTIVE_INTERMITTENT_1:int;
	isInner:bool)

returns (sbolus_timer:real;
	sbolus_req:bool;
	idACTIVE_INTERMITTENT:int);


var 	sbolus_timer_2:real;
	sbolus_req_2:bool;
	idACTIVE_INTERMITTENT_2:int;


let



	sbolus_timer_2 
	= if (not isInner) then  sbolus_timer_1  + 1.
	 else sbolus_timer_1;
	

	sbolus_req_2 
	= if (not isInner) then false
	 else sbolus_req_1;
	

	-- set state as inactive 
	idACTIVE_INTERMITTENT_2
	 = if (not isInner) then 0 else idACTIVE_INTERMITTENT_1;


	(sbolus_timer, sbolus_req, idACTIVE_INTERMITTENT) 
	= (sbolus_timer_2, sbolus_req_2, idACTIVE_INTERMITTENT_1);
	

tel





-- Entry action for state :INTERMITTENT_ON
node INTERMITTENT_ON_en(idACTIVE_INTERMITTENT_1:int;
	isInner:bool)

returns (idACTIVE_INTERMITTENT:int);


var 	idACTIVE_INTERMITTENT_2:int;


let



	-- set state as active 
	idACTIVE_INTERMITTENT_2 
	= 210;
	

	(idACTIVE_INTERMITTENT) 
	= (idACTIVE_INTERMITTENT_2);
	

tel






-- Entry action for state :ACTIVE_INTERMITTENT
node ACTIVE_INTERMITTENT_en(idACTIVE_INTERMITTENT_1:int;
	idTHERAPY_ACTIVE_1:int;
	sbolusInter_timer_1:real;
	CONFIG_IN_Interval_Intermittent_Bolus:real;
	sbolus_req_1:bool;
	sbolus_timer_1:real;
	step_size:real;
	isInner:bool)

returns (idACTIVE_INTERMITTENT:int;
	idTHERAPY_ACTIVE:int;
	sbolusInter_timer:real;
	sbolus_req:bool;
	sbolus_timer:real);


var 	idACTIVE_INTERMITTENT_2, idACTIVE_INTERMITTENT_3, idACTIVE_INTERMITTENT_4, idACTIVE_INTERMITTENT_5, idACTIVE_INTERMITTENT_6:int;
	idTHERAPY_ACTIVE_2, idTHERAPY_ACTIVE_3, idTHERAPY_ACTIVE_4:int;
	sbolusInter_timer_2, sbolusInter_timer_3, sbolusInter_timer_4, sbolusInter_timer_5, sbolusInter_timer_6:real;
	sbolus_req_2, sbolus_req_3, sbolus_req_4, sbolus_req_5:bool;
	sbolus_timer_2, sbolus_timer_3, sbolus_timer_4, sbolus_timer_5:real;


let



	-- set state as active 
	idTHERAPY_ACTIVE_2 
	= 209;
	

	sbolusInter_timer_2 
	= if (not isInner) then  sbolusInter_timer_1  + 1.
	 else sbolusInter_timer_1;
	

	
-- transition trace :
	--POINT__To__INTERMITTENT_OFF_1
		(idACTIVE_INTERMITTENT_2, sbolus_timer_2, sbolusInter_timer_3, sbolus_req_2) 
	= INTERMITTENT_OFF_en(idACTIVE_INTERMITTENT_1, sbolus_timer_1, sbolusInter_timer_2, CONFIG_IN_Interval_Intermittent_Bolus, step_size, sbolus_req_1, false);
		

	(idACTIVE_INTERMITTENT_3, idTHERAPY_ACTIVE_3, sbolusInter_timer_4, sbolus_req_3, sbolus_timer_3) 
	= 

	if ( idACTIVE_INTERMITTENT_1 = 0) then

	 (idACTIVE_INTERMITTENT_2, idTHERAPY_ACTIVE_2, sbolusInter_timer_3, sbolus_req_2, sbolus_timer_2)

	 else(idACTIVE_INTERMITTENT_1, idTHERAPY_ACTIVE_2, sbolusInter_timer_2, sbolus_req_1, sbolus_timer_1);

	

	(idACTIVE_INTERMITTENT_4) 
	= 
	if ( idACTIVE_INTERMITTENT_1 = 210) then
	INTERMITTENT_ON_en(idACTIVE_INTERMITTENT_1, false)
	 else (idACTIVE_INTERMITTENT_1);

	

	(idACTIVE_INTERMITTENT_5, sbolus_timer_4, sbolusInter_timer_5, sbolus_req_4) 
	= 
	if ( idACTIVE_INTERMITTENT_1 = 211) then
	INTERMITTENT_OFF_en(idACTIVE_INTERMITTENT_1, sbolus_timer_1, sbolusInter_timer_2, CONFIG_IN_Interval_Intermittent_Bolus, step_size, sbolus_req_1, false)
	 else (idACTIVE_INTERMITTENT_1, sbolus_timer_1, sbolusInter_timer_2, sbolus_req_1);

	

	(idACTIVE_INTERMITTENT_6, idTHERAPY_ACTIVE_4, sbolusInter_timer_6, sbolus_req_5, sbolus_timer_5) 
	= 
		 if ( idACTIVE_INTERMITTENT_1 = 0) then 
		(idACTIVE_INTERMITTENT_3, idTHERAPY_ACTIVE_3, sbolusInter_timer_4, sbolus_req_3, sbolus_timer_3)
		 else
		 if ( idACTIVE_INTERMITTENT_1 = 210) then 
		(idACTIVE_INTERMITTENT_4, idTHERAPY_ACTIVE_3, sbolusInter_timer_4, sbolus_req_3, sbolus_timer_3)
		 else
		 if ( idACTIVE_INTERMITTENT_1 = 211) then 
		(idACTIVE_INTERMITTENT_5, idTHERAPY_ACTIVE_3, sbolusInter_timer_5, sbolus_req_4, sbolus_timer_4)
		 else (idACTIVE_INTERMITTENT_1, idTHERAPY_ACTIVE_2, sbolusInter_timer_2, sbolus_req_1, sbolus_timer_1);


	(idACTIVE_INTERMITTENT, idTHERAPY_ACTIVE, sbolusInter_timer, sbolus_req, sbolus_timer) 
	= (idACTIVE_INTERMITTENT_6, idTHERAPY_ACTIVE_4, sbolusInter_timer_6, sbolus_req_5, sbolus_timer_5);
	

tel





--During action for state :ACTIVE_INTERMITTENT
node ACTIVE_INTERMITTENT_du(sbolusInter_timer_1:real)

returns (sbolusInter_timer:real);


var 	sbolusInter_timer_2:real;


let



	sbolusInter_timer_2 
	=  sbolusInter_timer_1  + 1.;
	

	(sbolusInter_timer) 
	= (sbolusInter_timer_2);
	

tel





-- Exit action for state :ACTIVE_INTERMITTENT
node ACTIVE_INTERMITTENT_ex(sbolus_timer_1:real;
	sbolus_req_1:bool;
	idACTIVE_INTERMITTENT_1:int;
	idTHERAPY_ACTIVE_1:int;
	isInner:bool)

returns (sbolus_timer:real;
	sbolus_req:bool;
	idACTIVE_INTERMITTENT:int;
	idTHERAPY_ACTIVE:int);


var 	sbolus_timer_2, sbolus_timer_3:real;
	sbolus_req_2, sbolus_req_3:bool;
	idACTIVE_INTERMITTENT_2, idACTIVE_INTERMITTENT_3, idACTIVE_INTERMITTENT_4, idACTIVE_INTERMITTENT_5:int;
	idTHERAPY_ACTIVE_2:int;


let



	
	(sbolus_timer_2, sbolus_req_2, idACTIVE_INTERMITTENT_2) 
	= 
	if ( idACTIVE_INTERMITTENT_1 = 210) then
	INTERMITTENT_ON_ex(sbolus_timer_1, sbolus_req_1, idACTIVE_INTERMITTENT_1, false)
	 else (sbolus_timer_1, sbolus_req_1, idACTIVE_INTERMITTENT_1);

	

	(idACTIVE_INTERMITTENT_3) 
	= 
	if ( idACTIVE_INTERMITTENT_1 = 211) then
	INTERMITTENT_OFF_ex(idACTIVE_INTERMITTENT_1, false)
	 else (idACTIVE_INTERMITTENT_1);

	

	(sbolus_timer_3, sbolus_req_3, idACTIVE_INTERMITTENT_4) 
	= 
		 if ( idACTIVE_INTERMITTENT_1 = 210) then 
		(sbolus_timer_2, sbolus_req_2, idACTIVE_INTERMITTENT_2)
		 else
		 if ( idACTIVE_INTERMITTENT_1 = 211) then 
		(sbolus_timer_2, sbolus_req_2, idACTIVE_INTERMITTENT_3)
		 else (sbolus_timer_1, sbolus_req_1, idACTIVE_INTERMITTENT_1);


	-- set state as inactive 
	idTHERAPY_ACTIVE_2
	 = if (not isInner) then 0 else idTHERAPY_ACTIVE_1;

	idACTIVE_INTERMITTENT_5 
	= 0;
	

	(sbolus_timer, sbolus_req, idACTIVE_INTERMITTENT, idTHERAPY_ACTIVE) 
	= (sbolus_timer_3, sbolus_req_3, idACTIVE_INTERMITTENT_5, idTHERAPY_ACTIVE_1);
	

tel






-- Entry action for state :PATIENT_OFF
node PATIENT_OFF_en(idACTIVE_PATIENT_1:int;
	pbolus_timer_1:real;
	inPatientBolus_1:bool;
	IM_OUT_Is_Locked_Out_1:bool;
	isInner:bool)

returns (idACTIVE_PATIENT:int;
	pbolus_timer:real;
	inPatientBolus:bool;
	IM_OUT_Is_Locked_Out:bool);


var 	idACTIVE_PATIENT_2:int;
	pbolus_timer_2:real;
	inPatientBolus_2:bool;
	IM_OUT_Is_Locked_Out_2:bool;


let



	-- set state as active 
	idACTIVE_PATIENT_2 
	= 207;
	

	pbolus_timer_2 
	= if (not isInner) then 0.
	 else pbolus_timer_1;
	

	inPatientBolus_2 
	= if (not isInner) then false
	 else inPatientBolus_1;
	

	IM_OUT_Is_Locked_Out_2 
	= if (not isInner) then false
	 else IM_OUT_Is_Locked_Out_1;
	

	(idACTIVE_PATIENT, pbolus_timer, inPatientBolus, IM_OUT_Is_Locked_Out) 
	= (idACTIVE_PATIENT_2, pbolus_timer_2, inPatientBolus_2, IM_OUT_Is_Locked_Out_2);
	

tel





-- Exit action for state :PATIENT_OFF
node PATIENT_OFF_ex(idACTIVE_PATIENT_1:int;
	isInner:bool)

returns (idACTIVE_PATIENT:int);


var 	idACTIVE_PATIENT_2:int;


let



	-- set state as inactive 
	idACTIVE_PATIENT_2
	 = if (not isInner) then 0 else idACTIVE_PATIENT_1;


	(idACTIVE_PATIENT) 
	= (idACTIVE_PATIENT_1);
	

tel






-- Entry action for state :PATIENT_LOCKOUT
node PATIENT_LOCKOUT_en(idACTIVE_PATIENT_1:int;
	IM_OUT_Lock_Timer_1:real;
	IM_OUT_Is_Locked_Out_1:bool;
	isInner:bool)

returns (idACTIVE_PATIENT:int;
	IM_OUT_Lock_Timer:real;
	IM_OUT_Is_Locked_Out:bool);


var 	idACTIVE_PATIENT_2:int;
	IM_OUT_Lock_Timer_2:real;
	IM_OUT_Is_Locked_Out_2:bool;


let



	-- set state as active 
	idACTIVE_PATIENT_2 
	= 208;
	

	IM_OUT_Lock_Timer_2 
	= if (not isInner) then  IM_OUT_Lock_Timer_1  + 1.
	 else IM_OUT_Lock_Timer_1;
	

	IM_OUT_Is_Locked_Out_2 
	= if (not isInner) then true
	 else IM_OUT_Is_Locked_Out_1;
	

	(idACTIVE_PATIENT, IM_OUT_Lock_Timer, IM_OUT_Is_Locked_Out) 
	= (idACTIVE_PATIENT_2, IM_OUT_Lock_Timer_2, IM_OUT_Is_Locked_Out_2);
	

tel





--During action for state :PATIENT_LOCKOUT
node PATIENT_LOCKOUT_du(IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_Lock_Timer_1:real)

returns (IM_OUT_Is_Locked_Out:bool;
	IM_OUT_Lock_Timer:real);


var 	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Lock_Timer_2:real;


let



	IM_OUT_Is_Locked_Out_2 
	= true;
	

	IM_OUT_Lock_Timer_2 
	=  IM_OUT_Lock_Timer_1  + 1.;
	

	(IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer) 
	= (IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2);
	

tel





-- Exit action for state :PATIENT_LOCKOUT
node PATIENT_LOCKOUT_ex(idACTIVE_PATIENT_1:int;
	isInner:bool)

returns (idACTIVE_PATIENT:int);


var 	idACTIVE_PATIENT_2:int;


let



	-- set state as inactive 
	idACTIVE_PATIENT_2
	 = if (not isInner) then 0 else idACTIVE_PATIENT_1;


	(idACTIVE_PATIENT) 
	= (idACTIVE_PATIENT_1);
	

tel






-- Entry action for state :PATIENT_ON
node PATIENT_ON_en(idACTIVE_PATIENT_1:int;
	number_pbolus_1:int;
	inPatientBolus_1:bool;
	pbolus_timer_1:real;
	IM_OUT_Is_Locked_Out_1:bool;
	isInner:bool)

returns (idACTIVE_PATIENT:int;
	number_pbolus:int;
	inPatientBolus:bool;
	pbolus_timer:real;
	IM_OUT_Is_Locked_Out:bool);


var 	idACTIVE_PATIENT_2:int;
	number_pbolus_2:int;
	inPatientBolus_2:bool;
	pbolus_timer_2:real;
	IM_OUT_Is_Locked_Out_2:bool;


let



	-- set state as active 
	idACTIVE_PATIENT_2 
	= 206;
	

	number_pbolus_2 
	= if (not isInner) then  number_pbolus_1  + 1
	 else number_pbolus_1;
	

	inPatientBolus_2 
	= if (not isInner) then true
	 else inPatientBolus_1;
	

	pbolus_timer_2 
	= if (not isInner) then  pbolus_timer_1  + 1.
	 else pbolus_timer_1;
	

	IM_OUT_Is_Locked_Out_2 
	= if (not isInner) then false
	 else IM_OUT_Is_Locked_Out_1;
	

	(idACTIVE_PATIENT, number_pbolus, inPatientBolus, pbolus_timer, IM_OUT_Is_Locked_Out) 
	= (idACTIVE_PATIENT_2, number_pbolus_2, inPatientBolus_2, pbolus_timer_2, IM_OUT_Is_Locked_Out_2);
	

tel





--During action for state :PATIENT_ON
node PATIENT_ON_du(pbolus_timer_1:real)

returns (pbolus_timer:real);


var 	pbolus_timer_2:real;


let



	pbolus_timer_2 
	=  pbolus_timer_1  + 1.;
	

	(pbolus_timer) 
	= (pbolus_timer_2);
	

tel





-- Exit action for state :PATIENT_ON
node PATIENT_ON_ex(pbolus_timer_1:real;
	idACTIVE_PATIENT_1:int;
	isInner:bool)

returns (pbolus_timer:real;
	idACTIVE_PATIENT:int);


var 	pbolus_timer_2:real;
	idACTIVE_PATIENT_2:int;


let



	pbolus_timer_2 
	= if (not isInner) then  pbolus_timer_1  + 1.
	 else pbolus_timer_1;
	

	-- set state as inactive 
	idACTIVE_PATIENT_2
	 = if (not isInner) then 0 else idACTIVE_PATIENT_1;


	(pbolus_timer, idACTIVE_PATIENT) 
	= (pbolus_timer_2, idACTIVE_PATIENT_1);
	

tel






-- Entry action for state :ACTIVE_PATIENT
node ACTIVE_PATIENT_en(idACTIVE_PATIENT_1:int;
	idTHERAPY_ACTIVE_1:int;
	inPatientBolus_1:bool;
	IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_Lock_Timer_1:real;
	pbolus_timer_1:real;
	number_pbolus_1:int;
	isInner:bool)

returns (idACTIVE_PATIENT:int;
	idTHERAPY_ACTIVE:int;
	IM_OUT_Is_Locked_Out:bool;
	IM_OUT_Lock_Timer:real;
	inPatientBolus:bool;
	pbolus_timer:real;
	number_pbolus:int);


var 	idACTIVE_PATIENT_2, idACTIVE_PATIENT_3, idACTIVE_PATIENT_4, idACTIVE_PATIENT_5, idACTIVE_PATIENT_6, idACTIVE_PATIENT_7, idACTIVE_PATIENT_8:int;
	idTHERAPY_ACTIVE_2, idTHERAPY_ACTIVE_3, idTHERAPY_ACTIVE_4:int;
	IM_OUT_Is_Locked_Out_2, IM_OUT_Is_Locked_Out_3, IM_OUT_Is_Locked_Out_4, IM_OUT_Is_Locked_Out_5, IM_OUT_Is_Locked_Out_6, IM_OUT_Is_Locked_Out_7, IM_OUT_Is_Locked_Out_8:bool;
	IM_OUT_Lock_Timer_2, IM_OUT_Lock_Timer_3, IM_OUT_Lock_Timer_4, IM_OUT_Lock_Timer_5:real;
	inPatientBolus_2, inPatientBolus_3, inPatientBolus_4, inPatientBolus_5, inPatientBolus_6:bool;
	pbolus_timer_2, pbolus_timer_3, pbolus_timer_4, pbolus_timer_5, pbolus_timer_6:real;
	number_pbolus_2, number_pbolus_3:int;


let



	-- set state as active 
	idTHERAPY_ACTIVE_2 
	= 205;
	

	
-- transition trace :
	--POINT__To__PATIENT_LOCKOUT_1
		(idACTIVE_PATIENT_2, IM_OUT_Lock_Timer_2, IM_OUT_Is_Locked_Out_2) 
	= 
		 if ((  inPatientBolus_1  )) then 
		PATIENT_LOCKOUT_en(idACTIVE_PATIENT_1, IM_OUT_Lock_Timer_1, IM_OUT_Is_Locked_Out_1, false)
		 else (idACTIVE_PATIENT_1, IM_OUT_Lock_Timer_1, IM_OUT_Is_Locked_Out_1);
		

-- transition trace :
	--POINT__To__PATIENT_OFF_2
		(idACTIVE_PATIENT_3, pbolus_timer_2, inPatientBolus_2, IM_OUT_Is_Locked_Out_3) 
	= PATIENT_OFF_en(idACTIVE_PATIENT_2, pbolus_timer_1, inPatientBolus_1, IM_OUT_Is_Locked_Out_2, false);
		

	(idACTIVE_PATIENT_4, idTHERAPY_ACTIVE_3, IM_OUT_Is_Locked_Out_4, IM_OUT_Lock_Timer_3, inPatientBolus_3, pbolus_timer_3) 
	= 

	if ( idACTIVE_PATIENT_1 = 0) then

	
		 if ((  inPatientBolus_1  )) then 
		(idACTIVE_PATIENT_2, idTHERAPY_ACTIVE_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_1, pbolus_timer_1)
		 else (idACTIVE_PATIENT_3, idTHERAPY_ACTIVE_2, IM_OUT_Is_Locked_Out_3, IM_OUT_Lock_Timer_2, inPatientBolus_2, pbolus_timer_2)

	 else(idACTIVE_PATIENT_1, idTHERAPY_ACTIVE_2, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, pbolus_timer_1);

	

	(idACTIVE_PATIENT_5, number_pbolus_2, inPatientBolus_4, pbolus_timer_4, IM_OUT_Is_Locked_Out_5) 
	= 
	if ( idACTIVE_PATIENT_1 = 206) then
	PATIENT_ON_en(idACTIVE_PATIENT_1, number_pbolus_1, inPatientBolus_1, pbolus_timer_1, IM_OUT_Is_Locked_Out_1, false)
	 else (idACTIVE_PATIENT_1, number_pbolus_1, inPatientBolus_1, pbolus_timer_1, IM_OUT_Is_Locked_Out_1);

	

	(idACTIVE_PATIENT_6, pbolus_timer_5, inPatientBolus_5, IM_OUT_Is_Locked_Out_6) 
	= 
	if ( idACTIVE_PATIENT_1 = 207) then
	PATIENT_OFF_en(idACTIVE_PATIENT_1, pbolus_timer_1, inPatientBolus_1, IM_OUT_Is_Locked_Out_1, false)
	 else (idACTIVE_PATIENT_1, pbolus_timer_1, inPatientBolus_1, IM_OUT_Is_Locked_Out_1);

	

	(idACTIVE_PATIENT_7, IM_OUT_Lock_Timer_4, IM_OUT_Is_Locked_Out_7) 
	= 
	if ( idACTIVE_PATIENT_1 = 208) then
	PATIENT_LOCKOUT_en(idACTIVE_PATIENT_1, IM_OUT_Lock_Timer_1, IM_OUT_Is_Locked_Out_1, false)
	 else (idACTIVE_PATIENT_1, IM_OUT_Lock_Timer_1, IM_OUT_Is_Locked_Out_1);

	

	(idACTIVE_PATIENT_8, idTHERAPY_ACTIVE_4, IM_OUT_Is_Locked_Out_8, IM_OUT_Lock_Timer_5, inPatientBolus_6, pbolus_timer_6, number_pbolus_3) 
	= 
		 if ( idACTIVE_PATIENT_1 = 0) then 
		(idACTIVE_PATIENT_4, idTHERAPY_ACTIVE_3, IM_OUT_Is_Locked_Out_4, IM_OUT_Lock_Timer_3, inPatientBolus_3, pbolus_timer_3, number_pbolus_1)
		 else
		 if ( idACTIVE_PATIENT_1 = 206) then 
		(idACTIVE_PATIENT_5, idTHERAPY_ACTIVE_3, IM_OUT_Is_Locked_Out_5, IM_OUT_Lock_Timer_3, inPatientBolus_4, pbolus_timer_4, number_pbolus_2)
		 else
		 if ( idACTIVE_PATIENT_1 = 207) then 
		(idACTIVE_PATIENT_6, idTHERAPY_ACTIVE_3, IM_OUT_Is_Locked_Out_6, IM_OUT_Lock_Timer_3, inPatientBolus_5, pbolus_timer_5, number_pbolus_2)
		 else
		 if ( idACTIVE_PATIENT_1 = 208) then 
		(idACTIVE_PATIENT_7, idTHERAPY_ACTIVE_3, IM_OUT_Is_Locked_Out_7, IM_OUT_Lock_Timer_4, inPatientBolus_5, pbolus_timer_5, number_pbolus_2)
		 else (idACTIVE_PATIENT_1, idTHERAPY_ACTIVE_2, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, pbolus_timer_1, number_pbolus_1);


	(idACTIVE_PATIENT, idTHERAPY_ACTIVE, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, pbolus_timer, number_pbolus) 
	= (idACTIVE_PATIENT_8, idTHERAPY_ACTIVE_4, IM_OUT_Is_Locked_Out_8, IM_OUT_Lock_Timer_5, inPatientBolus_6, pbolus_timer_6, number_pbolus_3);
	

tel





-- Exit action for state :ACTIVE_PATIENT
node ACTIVE_PATIENT_ex(pbolus_timer_1:real;
	idACTIVE_PATIENT_1:int;
	idTHERAPY_ACTIVE_1:int;
	isInner:bool)

returns (pbolus_timer:real;
	idACTIVE_PATIENT:int;
	idTHERAPY_ACTIVE:int);


var 	pbolus_timer_2, pbolus_timer_3:real;
	idACTIVE_PATIENT_2, idACTIVE_PATIENT_3, idACTIVE_PATIENT_4, idACTIVE_PATIENT_5, idACTIVE_PATIENT_6:int;
	idTHERAPY_ACTIVE_2:int;


let



	
	(pbolus_timer_2, idACTIVE_PATIENT_2) 
	= 
	if ( idACTIVE_PATIENT_1 = 206) then
	PATIENT_ON_ex(pbolus_timer_1, idACTIVE_PATIENT_1, false)
	 else (pbolus_timer_1, idACTIVE_PATIENT_1);

	

	(idACTIVE_PATIENT_3) 
	= 
	if ( idACTIVE_PATIENT_1 = 207) then
	PATIENT_OFF_ex(idACTIVE_PATIENT_1, false)
	 else (idACTIVE_PATIENT_1);

	

	(idACTIVE_PATIENT_4) 
	= 
	if ( idACTIVE_PATIENT_1 = 208) then
	PATIENT_LOCKOUT_ex(idACTIVE_PATIENT_1, false)
	 else (idACTIVE_PATIENT_1);

	

	(pbolus_timer_3, idACTIVE_PATIENT_5) 
	= 
		 if ( idACTIVE_PATIENT_1 = 206) then 
		(pbolus_timer_2, idACTIVE_PATIENT_2)
		 else
		 if ( idACTIVE_PATIENT_1 = 207) then 
		(pbolus_timer_2, idACTIVE_PATIENT_3)
		 else
		 if ( idACTIVE_PATIENT_1 = 208) then 
		(pbolus_timer_2, idACTIVE_PATIENT_4)
		 else (pbolus_timer_1, idACTIVE_PATIENT_1);


	-- set state as inactive 
	idTHERAPY_ACTIVE_2
	 = if (not isInner) then 0 else idTHERAPY_ACTIVE_1;

	idACTIVE_PATIENT_6 
	= 0;
	

	(pbolus_timer, idACTIVE_PATIENT, idTHERAPY_ACTIVE) 
	= (pbolus_timer_3, idACTIVE_PATIENT_6, idTHERAPY_ACTIVE_1);
	

tel






-- Entry action for state :BASAL_OFF
node BASAL_OFF_en(idACTIVE_BASAL_1:int;
	isInner:bool)

returns (idACTIVE_BASAL:int);


var 	idACTIVE_BASAL_2:int;


let



	-- set state as active 
	idACTIVE_BASAL_2 
	= 204;
	

	(idACTIVE_BASAL) 
	= (idACTIVE_BASAL_2);
	

tel





-- Exit action for state :BASAL_OFF
node BASAL_OFF_ex(idACTIVE_BASAL_1:int;
	isInner:bool)

returns (idACTIVE_BASAL:int);


var 	idACTIVE_BASAL_2:int;


let



	-- set state as inactive 
	idACTIVE_BASAL_2
	 = if (not isInner) then 0 else idACTIVE_BASAL_1;


	(idACTIVE_BASAL) 
	= (idACTIVE_BASAL_1);
	

tel






-- Entry action for state :BASAL_ON
node BASAL_ON_en(idACTIVE_BASAL_1:int;
	isInner:bool)

returns (idACTIVE_BASAL:int);


var 	idACTIVE_BASAL_2:int;


let



	-- set state as active 
	idACTIVE_BASAL_2 
	= 203;
	

	(idACTIVE_BASAL) 
	= (idACTIVE_BASAL_2);
	

tel





-- Exit action for state :BASAL_ON
node BASAL_ON_ex(idACTIVE_BASAL_1:int;
	isInner:bool)

returns (idACTIVE_BASAL:int);


var 	idACTIVE_BASAL_2:int;


let



	-- set state as inactive 
	idACTIVE_BASAL_2
	 = if (not isInner) then 0 else idACTIVE_BASAL_1;


	(idACTIVE_BASAL) 
	= (idACTIVE_BASAL_1);
	

tel






-- Entry action for state :ACTIVE_BASAL
node ACTIVE_BASAL_en(idACTIVE_BASAL_1:int;
	idTHERAPY_ACTIVE_1:int;
	isInner:bool)

returns (idACTIVE_BASAL:int;
	idTHERAPY_ACTIVE:int);


var 	idACTIVE_BASAL_2, idACTIVE_BASAL_3, idACTIVE_BASAL_4, idACTIVE_BASAL_5, idACTIVE_BASAL_6:int;
	idTHERAPY_ACTIVE_2, idTHERAPY_ACTIVE_3, idTHERAPY_ACTIVE_4:int;


let



	-- set state as active 
	idTHERAPY_ACTIVE_2 
	= 202;
	

	
-- transition trace :
	--POINT__To__BASAL_ON_1
		(idACTIVE_BASAL_2) 
	= BASAL_ON_en(idACTIVE_BASAL_1, false);
		

	(idACTIVE_BASAL_3, idTHERAPY_ACTIVE_3) 
	= 

	if ( idACTIVE_BASAL_1 = 0) then

	 (idACTIVE_BASAL_2, idTHERAPY_ACTIVE_2)

	 else(idACTIVE_BASAL_1, idTHERAPY_ACTIVE_2);

	

	(idACTIVE_BASAL_4) 
	= 
	if ( idACTIVE_BASAL_1 = 203) then
	BASAL_ON_en(idACTIVE_BASAL_1, false)
	 else (idACTIVE_BASAL_1);

	

	(idACTIVE_BASAL_5) 
	= 
	if ( idACTIVE_BASAL_1 = 204) then
	BASAL_OFF_en(idACTIVE_BASAL_1, false)
	 else (idACTIVE_BASAL_1);

	

	(idACTIVE_BASAL_6, idTHERAPY_ACTIVE_4) 
	= 
		 if ( idACTIVE_BASAL_1 = 0) then 
		(idACTIVE_BASAL_3, idTHERAPY_ACTIVE_3)
		 else
		 if ( idACTIVE_BASAL_1 = 203) then 
		(idACTIVE_BASAL_4, idTHERAPY_ACTIVE_3)
		 else
		 if ( idACTIVE_BASAL_1 = 204) then 
		(idACTIVE_BASAL_5, idTHERAPY_ACTIVE_3)
		 else (idACTIVE_BASAL_1, idTHERAPY_ACTIVE_2);


	(idACTIVE_BASAL, idTHERAPY_ACTIVE) 
	= (idACTIVE_BASAL_6, idTHERAPY_ACTIVE_4);
	

tel





-- Exit action for state :ACTIVE_BASAL
node ACTIVE_BASAL_ex(idACTIVE_BASAL_1:int;
	idTHERAPY_ACTIVE_1:int;
	isInner:bool)

returns (idACTIVE_BASAL:int;
	idTHERAPY_ACTIVE:int);


var 	idACTIVE_BASAL_2, idACTIVE_BASAL_3, idACTIVE_BASAL_4, idACTIVE_BASAL_5:int;
	idTHERAPY_ACTIVE_2:int;


let



	
	(idACTIVE_BASAL_2) 
	= 
	if ( idACTIVE_BASAL_1 = 203) then
	BASAL_ON_ex(idACTIVE_BASAL_1, false)
	 else (idACTIVE_BASAL_1);

	

	(idACTIVE_BASAL_3) 
	= 
	if ( idACTIVE_BASAL_1 = 204) then
	BASAL_OFF_ex(idACTIVE_BASAL_1, false)
	 else (idACTIVE_BASAL_1);

	

	(idACTIVE_BASAL_4) 
	= 
		 if ( idACTIVE_BASAL_1 = 203) then 
		(idACTIVE_BASAL_2)
		 else
		 if ( idACTIVE_BASAL_1 = 204) then 
		(idACTIVE_BASAL_3)
		 else (idACTIVE_BASAL_1);


	-- set state as inactive 
	idTHERAPY_ACTIVE_2
	 = if (not isInner) then 0 else idTHERAPY_ACTIVE_1;

	idACTIVE_BASAL_5 
	= 0;
	

	(idACTIVE_BASAL, idTHERAPY_ACTIVE) 
	= (idACTIVE_BASAL_5, idTHERAPY_ACTIVE_1);
	

tel






-- Entry action for state :THERAPY_ACTIVE
node THERAPY_ACTIVE_en(idTHERAPY_ACTIVE_1:int;
	idInfusion_Manager_THERAPY_1:int;
	idACTIVE_BASAL_1:int;
	IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_Lock_Timer_1:real;
	idACTIVE_PATIENT_1:int;
	inPatientBolus_1:bool;
	number_pbolus_1:int;
	pbolus_timer_1:real;
	CONFIG_IN_Interval_Intermittent_Bolus:real;
	idACTIVE_INTERMITTENT_1:int;
	sbolusInter_timer_1:real;
	sbolus_req_1:bool;
	sbolus_timer_1:real;
	step_size:real;
	CONFIG_IN_Flow_Rate_Basal:int;
	CONFIG_IN_Flow_Rate_Intermittent_Bolus:int;
	CONFIG_IN_Flow_Rate_Patient_Bolus:int;
	IM_OUT_Current_System_Mode_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	idACTIVE_Arbiter_1:int;
	isInner:bool)

returns (idTHERAPY_ACTIVE:int;
	idInfusion_Manager_THERAPY:int;
	idACTIVE_BASAL:int;
	IM_OUT_Is_Locked_Out:bool;
	IM_OUT_Lock_Timer:real;
	idACTIVE_PATIENT:int;
	inPatientBolus:bool;
	number_pbolus:int;
	pbolus_timer:real;
	idACTIVE_INTERMITTENT:int;
	sbolusInter_timer:real;
	sbolus_req:bool;
	sbolus_timer:real;
	IM_OUT_Current_System_Mode:int;
	IM_OUT_Flow_Rate_Commanded:int;
	idACTIVE_Arbiter:int);


var 	idTHERAPY_ACTIVE_2, idTHERAPY_ACTIVE_3, idTHERAPY_ACTIVE_4, idTHERAPY_ACTIVE_5:int;
	idInfusion_Manager_THERAPY_2:int;
	idACTIVE_BASAL_2:int;
	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Lock_Timer_2:real;
	idACTIVE_PATIENT_2:int;
	inPatientBolus_2:bool;
	number_pbolus_2:int;
	pbolus_timer_2:real;
	idACTIVE_INTERMITTENT_2:int;
	sbolusInter_timer_2:real;
	sbolus_req_2:bool;
	sbolus_timer_2:real;
	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	idACTIVE_Arbiter_2:int;


let



	-- set state as active 
	idInfusion_Manager_THERAPY_2 
	= 197;
	

	
	(idACTIVE_BASAL_2, idTHERAPY_ACTIVE_2) 
	= ACTIVE_BASAL_en(idACTIVE_BASAL_1, idTHERAPY_ACTIVE_1, false);

	(idACTIVE_PATIENT_2, idTHERAPY_ACTIVE_3, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, pbolus_timer_2, number_pbolus_2) 
	= ACTIVE_PATIENT_en(idACTIVE_PATIENT_1, idTHERAPY_ACTIVE_2, inPatientBolus_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, pbolus_timer_1, number_pbolus_1, false);

	(idACTIVE_INTERMITTENT_2, idTHERAPY_ACTIVE_4, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_2) 
	= ACTIVE_INTERMITTENT_en(idACTIVE_INTERMITTENT_1, idTHERAPY_ACTIVE_3, sbolusInter_timer_1, CONFIG_IN_Interval_Intermittent_Bolus, sbolus_req_1, sbolus_timer_1, step_size, false);

	(idACTIVE_Arbiter_2, idTHERAPY_ACTIVE_5, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2) 
	= ACTIVE_Arbiter_en(idACTIVE_Arbiter_1, idTHERAPY_ACTIVE_4, idACTIVE_PATIENT_2, CONFIG_IN_Flow_Rate_Patient_Bolus, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idACTIVE_INTERMITTENT_2, CONFIG_IN_Flow_Rate_Intermittent_Bolus, CONFIG_IN_Flow_Rate_Basal, false);


	(idTHERAPY_ACTIVE, idInfusion_Manager_THERAPY, idACTIVE_BASAL, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, idACTIVE_PATIENT, inPatientBolus, number_pbolus, pbolus_timer, idACTIVE_INTERMITTENT, sbolusInter_timer, sbolus_req, sbolus_timer, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, idACTIVE_Arbiter) 
	= (idTHERAPY_ACTIVE_5, idInfusion_Manager_THERAPY_2, idACTIVE_BASAL_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, idACTIVE_PATIENT_2, inPatientBolus_2, number_pbolus_2, pbolus_timer_2, idACTIVE_INTERMITTENT_2, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idACTIVE_Arbiter_2);
	

tel





-- Exit action for state :THERAPY_ACTIVE
node THERAPY_ACTIVE_ex(idACTIVE_Arbiter_1:int;
	idTHERAPY_ACTIVE_1:int;
	idACTIVE_INTERMITTENT_1:int;
	sbolus_req_1:bool;
	sbolus_timer_1:real;
	idACTIVE_PATIENT_1:int;
	pbolus_timer_1:real;
	idACTIVE_BASAL_1:int;
	idInfusion_Manager_THERAPY_1:int;
	isInner:bool)

returns (idACTIVE_Arbiter:int;
	idTHERAPY_ACTIVE:int;
	idACTIVE_INTERMITTENT:int;
	sbolus_req:bool;
	sbolus_timer:real;
	idACTIVE_PATIENT:int;
	pbolus_timer:real;
	idACTIVE_BASAL:int;
	idInfusion_Manager_THERAPY:int);


var 	idACTIVE_Arbiter_2:int;
	idTHERAPY_ACTIVE_2, idTHERAPY_ACTIVE_3, idTHERAPY_ACTIVE_4, idTHERAPY_ACTIVE_5, idTHERAPY_ACTIVE_6:int;
	idACTIVE_INTERMITTENT_2:int;
	sbolus_req_2:bool;
	sbolus_timer_2:real;
	idACTIVE_PATIENT_2:int;
	pbolus_timer_2:real;
	idACTIVE_BASAL_2:int;
	idInfusion_Manager_THERAPY_2:int;


let



	
	(idACTIVE_Arbiter_2, idTHERAPY_ACTIVE_2) 
	= ACTIVE_Arbiter_ex(idACTIVE_Arbiter_1, idTHERAPY_ACTIVE_1, false);

	(sbolus_timer_2, sbolus_req_2, idACTIVE_INTERMITTENT_2, idTHERAPY_ACTIVE_3) 
	= ACTIVE_INTERMITTENT_ex(sbolus_timer_1, sbolus_req_1, idACTIVE_INTERMITTENT_1, idTHERAPY_ACTIVE_2, false);

	(pbolus_timer_2, idACTIVE_PATIENT_2, idTHERAPY_ACTIVE_4) 
	= ACTIVE_PATIENT_ex(pbolus_timer_1, idACTIVE_PATIENT_1, idTHERAPY_ACTIVE_3, false);

	(idACTIVE_BASAL_2, idTHERAPY_ACTIVE_5) 
	= ACTIVE_BASAL_ex(idACTIVE_BASAL_1, idTHERAPY_ACTIVE_4, false);


	-- set state as inactive 
	idInfusion_Manager_THERAPY_2
	 = if (not isInner) then 0 else idInfusion_Manager_THERAPY_1;

	idTHERAPY_ACTIVE_6 
	= 0;
	

	(idACTIVE_Arbiter, idTHERAPY_ACTIVE, idACTIVE_INTERMITTENT, sbolus_req, sbolus_timer, idACTIVE_PATIENT, pbolus_timer, idACTIVE_BASAL, idInfusion_Manager_THERAPY) 
	= (idACTIVE_Arbiter_2, idTHERAPY_ACTIVE_6, idACTIVE_INTERMITTENT_2, sbolus_req_2, sbolus_timer_2, idACTIVE_PATIENT_2, pbolus_timer_2, idACTIVE_BASAL_2, idInfusion_Manager_THERAPY_1);
	

tel






--During action for state :Infusion_Manager_THERAPY
node Infusion_Manager_THERAPY_du(IM_OUT_New_Infusion_1:bool)

returns (IM_OUT_New_Infusion:bool);


var 	IM_OUT_New_Infusion_2:bool;


let



	IM_OUT_New_Infusion_2 
	= false;
	

	(IM_OUT_New_Infusion) 
	= (IM_OUT_New_Infusion_2);
	

tel





-- Exit action for state :Infusion_Manager_THERAPY
node Infusion_Manager_THERAPY_ex(idACTIVE_Arbiter_1:int;
	idTHERAPY_ACTIVE_1:int;
	idACTIVE_INTERMITTENT_1:int;
	sbolus_req_1:bool;
	sbolus_timer_1:real;
	idACTIVE_PATIENT_1:int;
	pbolus_timer_1:real;
	idACTIVE_BASAL_1:int;
	idInfusion_Manager_THERAPY_1:int;
	CONFIG_IN_Flow_Rate_KVO:int;
	IM_OUT_Current_System_Mode_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	idPAUSED_Alarm_Paused_1:int;
	idPAUSED_Arbiter_1:int;
	idPAUSED_Manual_Paused_1:int;
	idTHERAPY_PAUSED_1:int;
	IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_New_Infusion_1:bool;
	idInfusionMGR_Infusion_Manager_1:int;
	isInner:bool)

returns (idACTIVE_Arbiter:int;
	idTHERAPY_ACTIVE:int;
	idACTIVE_INTERMITTENT:int;
	sbolus_req:bool;
	sbolus_timer:real;
	idACTIVE_PATIENT:int;
	pbolus_timer:real;
	idACTIVE_BASAL:int;
	idInfusion_Manager_THERAPY:int;
	IM_OUT_Current_System_Mode:int;
	IM_OUT_Flow_Rate_Commanded:int;
	idPAUSED_Alarm_Paused:int;
	idPAUSED_Arbiter:int;
	idPAUSED_Manual_Paused:int;
	idTHERAPY_PAUSED:int;
	IM_OUT_Is_Locked_Out:bool;
	IM_OUT_New_Infusion:bool;
	idInfusionMGR_Infusion_Manager:int);


var 	idACTIVE_Arbiter_2, idACTIVE_Arbiter_3:int;
	idTHERAPY_ACTIVE_2, idTHERAPY_ACTIVE_3:int;
	idACTIVE_INTERMITTENT_2, idACTIVE_INTERMITTENT_3:int;
	sbolus_req_2, sbolus_req_3:bool;
	sbolus_timer_2, sbolus_timer_3:real;
	idACTIVE_PATIENT_2, idACTIVE_PATIENT_3:int;
	pbolus_timer_2, pbolus_timer_3:real;
	idACTIVE_BASAL_2, idACTIVE_BASAL_3:int;
	idInfusion_Manager_THERAPY_2, idInfusion_Manager_THERAPY_3, idInfusion_Manager_THERAPY_4, idInfusion_Manager_THERAPY_5:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3:int;
	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Flow_Rate_Commanded_4:int;
	idPAUSED_Alarm_Paused_2, idPAUSED_Alarm_Paused_3:int;
	idPAUSED_Arbiter_2, idPAUSED_Arbiter_3:int;
	idPAUSED_Manual_Paused_2, idPAUSED_Manual_Paused_3:int;
	idTHERAPY_PAUSED_2, idTHERAPY_PAUSED_3:int;
	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_New_Infusion_2:bool;
	idInfusionMGR_Infusion_Manager_2:int;


let



	
	(idACTIVE_Arbiter_2, idTHERAPY_ACTIVE_2, idACTIVE_INTERMITTENT_2, sbolus_req_2, sbolus_timer_2, idACTIVE_PATIENT_2, pbolus_timer_2, idACTIVE_BASAL_2, idInfusion_Manager_THERAPY_2) 
	= 
	if ( idInfusion_Manager_THERAPY_1 = 197) then
	THERAPY_ACTIVE_ex(idACTIVE_Arbiter_1, idTHERAPY_ACTIVE_1, idACTIVE_INTERMITTENT_1, sbolus_req_1, sbolus_timer_1, idACTIVE_PATIENT_1, pbolus_timer_1, idACTIVE_BASAL_1, idInfusion_Manager_THERAPY_1, false)
	 else (idACTIVE_Arbiter_1, idTHERAPY_ACTIVE_1, idACTIVE_INTERMITTENT_1, sbolus_req_1, sbolus_timer_1, idACTIVE_PATIENT_1, pbolus_timer_1, idACTIVE_BASAL_1, idInfusion_Manager_THERAPY_1);

	

	(IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2, idPAUSED_Arbiter_2, idTHERAPY_PAUSED_2, idPAUSED_Manual_Paused_2, idPAUSED_Alarm_Paused_2, idInfusion_Manager_THERAPY_3) 
	= 
	if ( idInfusion_Manager_THERAPY_1 = 214) then
	THERAPY_PAUSED_ex(IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1, CONFIG_IN_Flow_Rate_KVO, idTHERAPY_PAUSED_1, idPAUSED_Manual_Paused_1, idPAUSED_Alarm_Paused_1, idInfusion_Manager_THERAPY_1, false)
	 else (IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1, idTHERAPY_PAUSED_1, idPAUSED_Manual_Paused_1, idPAUSED_Alarm_Paused_1, idInfusion_Manager_THERAPY_1);

	

	(idACTIVE_Arbiter_3, idTHERAPY_ACTIVE_3, idACTIVE_INTERMITTENT_3, sbolus_req_3, sbolus_timer_3, idACTIVE_PATIENT_3, pbolus_timer_3, idACTIVE_BASAL_3, idInfusion_Manager_THERAPY_4, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, idPAUSED_Alarm_Paused_3, idPAUSED_Arbiter_3, idPAUSED_Manual_Paused_3, idTHERAPY_PAUSED_3) 
	= 
		 if ( idInfusion_Manager_THERAPY_1 = 197) then 
		(idACTIVE_Arbiter_2, idTHERAPY_ACTIVE_2, idACTIVE_INTERMITTENT_2, sbolus_req_2, sbolus_timer_2, idACTIVE_PATIENT_2, pbolus_timer_2, idACTIVE_BASAL_2, idInfusion_Manager_THERAPY_2, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_1)
		 else
		 if ( idInfusion_Manager_THERAPY_1 = 214) then 
		(idACTIVE_Arbiter_2, idTHERAPY_ACTIVE_2, idACTIVE_INTERMITTENT_2, sbolus_req_2, sbolus_timer_2, idACTIVE_PATIENT_2, pbolus_timer_2, idACTIVE_BASAL_2, idInfusion_Manager_THERAPY_3, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_PAUSED_2)
		 else (idACTIVE_Arbiter_1, idTHERAPY_ACTIVE_1, idACTIVE_INTERMITTENT_1, sbolus_req_1, sbolus_timer_1, idACTIVE_PATIENT_1, pbolus_timer_1, idACTIVE_BASAL_1, idInfusion_Manager_THERAPY_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_1);


	(IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Is_Locked_Out_2, IM_OUT_New_Infusion_2) 
	= if (not isInner) then TherapyExitOperations(IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Is_Locked_Out_1, IM_OUT_New_Infusion_1)
	 else (IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Is_Locked_Out_1, IM_OUT_New_Infusion_1);
	

	-- set state as inactive 
	idInfusionMGR_Infusion_Manager_2
	 = if (not isInner) then 0 else idInfusionMGR_Infusion_Manager_1;

	idInfusion_Manager_THERAPY_5 
	= 0;
	

	(idACTIVE_Arbiter, idTHERAPY_ACTIVE, idACTIVE_INTERMITTENT, sbolus_req, sbolus_timer, idACTIVE_PATIENT, pbolus_timer, idACTIVE_BASAL, idInfusion_Manager_THERAPY, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_PAUSED, IM_OUT_Is_Locked_Out, IM_OUT_New_Infusion, idInfusionMGR_Infusion_Manager) 
	= (idACTIVE_Arbiter_3, idTHERAPY_ACTIVE_3, idACTIVE_INTERMITTENT_3, sbolus_req_3, sbolus_timer_3, idACTIVE_PATIENT_3, pbolus_timer_3, idACTIVE_BASAL_3, idInfusion_Manager_THERAPY_5, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_4, idPAUSED_Alarm_Paused_3, idPAUSED_Arbiter_3, idPAUSED_Manual_Paused_3, idTHERAPY_PAUSED_3, IM_OUT_Is_Locked_Out_2, IM_OUT_New_Infusion_2, idInfusionMGR_Infusion_Manager_1);
	

tel





-- Entry action for state :Infusion_Manager_THERAPY
node Infusion_Manager_THERAPY_en(idInfusion_Manager_THERAPY_1:int;
	idInfusionMGR_Infusion_Manager_1:int;
	OP_CMD_IN_Infusion_Inhibit:bool;
	ALARM_IN_Highest_Level_Alarm:int;
	CONFIG_IN_Flow_Rate_KVO:int;
	IM_OUT_Current_System_Mode_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	idPAUSED_Alarm_Paused_1:int;
	idPAUSED_Arbiter_1:int;
	idPAUSED_Manual_Paused_1:int;
	idTHERAPY_PAUSED_1:int;
	CONFIG_IN_Flow_Rate_Basal:int;
	CONFIG_IN_Flow_Rate_Intermittent_Bolus:int;
	CONFIG_IN_Flow_Rate_Patient_Bolus:int;
	CONFIG_IN_Interval_Intermittent_Bolus:real;
	IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_Lock_Timer_1:real;
	idACTIVE_Arbiter_1:int;
	idACTIVE_BASAL_1:int;
	idACTIVE_INTERMITTENT_1:int;
	idACTIVE_PATIENT_1:int;
	idTHERAPY_ACTIVE_1:int;
	inPatientBolus_1:bool;
	number_pbolus_1:int;
	pbolus_timer_1:real;
	sbolusInter_timer_1:real;
	sbolus_req_1:bool;
	sbolus_timer_1:real;
	step_size:real;
	isInner:bool)

returns (idInfusion_Manager_THERAPY:int;
	idInfusionMGR_Infusion_Manager:int;
	IM_OUT_Current_System_Mode:int;
	IM_OUT_Flow_Rate_Commanded:int;
	idPAUSED_Alarm_Paused:int;
	idPAUSED_Arbiter:int;
	idPAUSED_Manual_Paused:int;
	idTHERAPY_PAUSED:int;
	IM_OUT_Is_Locked_Out:bool;
	IM_OUT_Lock_Timer:real;
	idACTIVE_Arbiter:int;
	idACTIVE_BASAL:int;
	idACTIVE_INTERMITTENT:int;
	idACTIVE_PATIENT:int;
	idTHERAPY_ACTIVE:int;
	inPatientBolus:bool;
	number_pbolus:int;
	pbolus_timer:real;
	sbolusInter_timer:real;
	sbolus_req:bool;
	sbolus_timer:real);


var 	idInfusion_Manager_THERAPY_2, idInfusion_Manager_THERAPY_3, idInfusion_Manager_THERAPY_4, idInfusion_Manager_THERAPY_5, idInfusion_Manager_THERAPY_6, idInfusion_Manager_THERAPY_7:int;
	idInfusionMGR_Infusion_Manager_2, idInfusionMGR_Infusion_Manager_3, idInfusionMGR_Infusion_Manager_4:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3, IM_OUT_Current_System_Mode_4, IM_OUT_Current_System_Mode_5, IM_OUT_Current_System_Mode_6, IM_OUT_Current_System_Mode_7:int;
	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Flow_Rate_Commanded_5, IM_OUT_Flow_Rate_Commanded_6, IM_OUT_Flow_Rate_Commanded_7:int;
	idPAUSED_Alarm_Paused_2, idPAUSED_Alarm_Paused_3, idPAUSED_Alarm_Paused_4, idPAUSED_Alarm_Paused_5:int;
	idPAUSED_Arbiter_2, idPAUSED_Arbiter_3, idPAUSED_Arbiter_4, idPAUSED_Arbiter_5:int;
	idPAUSED_Manual_Paused_2, idPAUSED_Manual_Paused_3, idPAUSED_Manual_Paused_4, idPAUSED_Manual_Paused_5:int;
	idTHERAPY_PAUSED_2, idTHERAPY_PAUSED_3, idTHERAPY_PAUSED_4, idTHERAPY_PAUSED_5:int;
	IM_OUT_Is_Locked_Out_2, IM_OUT_Is_Locked_Out_3, IM_OUT_Is_Locked_Out_4, IM_OUT_Is_Locked_Out_5:bool;
	IM_OUT_Lock_Timer_2, IM_OUT_Lock_Timer_3, IM_OUT_Lock_Timer_4, IM_OUT_Lock_Timer_5:real;
	idACTIVE_Arbiter_2, idACTIVE_Arbiter_3, idACTIVE_Arbiter_4, idACTIVE_Arbiter_5:int;
	idACTIVE_BASAL_2, idACTIVE_BASAL_3, idACTIVE_BASAL_4, idACTIVE_BASAL_5:int;
	idACTIVE_INTERMITTENT_2, idACTIVE_INTERMITTENT_3, idACTIVE_INTERMITTENT_4, idACTIVE_INTERMITTENT_5:int;
	idACTIVE_PATIENT_2, idACTIVE_PATIENT_3, idACTIVE_PATIENT_4, idACTIVE_PATIENT_5:int;
	idTHERAPY_ACTIVE_2, idTHERAPY_ACTIVE_3, idTHERAPY_ACTIVE_4, idTHERAPY_ACTIVE_5:int;
	inPatientBolus_2, inPatientBolus_3, inPatientBolus_4, inPatientBolus_5:bool;
	number_pbolus_2, number_pbolus_3, number_pbolus_4, number_pbolus_5:int;
	pbolus_timer_2, pbolus_timer_3, pbolus_timer_4, pbolus_timer_5:real;
	sbolusInter_timer_2, sbolusInter_timer_3, sbolusInter_timer_4, sbolusInter_timer_5:real;
	sbolus_req_2, sbolus_req_3, sbolus_req_4, sbolus_req_5:bool;
	sbolus_timer_2, sbolus_timer_3, sbolus_timer_4, sbolus_timer_5:real;


let



	-- set state as active 
	idInfusionMGR_Infusion_Manager_2 
	= 196;
	

	
-- transition trace :
	--POINT__To__THERAPY_PAUSED_1
		(idTHERAPY_PAUSED_2, idInfusion_Manager_THERAPY_2, idPAUSED_Alarm_Paused_2, idPAUSED_Manual_Paused_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idPAUSED_Arbiter_2) 
	= 
		 if (( OP_CMD_IN_Infusion_Inhibit or ALARM_IN_Highest_Level_Alarm>=3 )) then 
		THERAPY_PAUSED_en(idTHERAPY_PAUSED_1, idInfusion_Manager_THERAPY_1, ALARM_IN_Highest_Level_Alarm, idPAUSED_Alarm_Paused_1, OP_CMD_IN_Infusion_Inhibit, idPAUSED_Manual_Paused_1, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idPAUSED_Arbiter_1, false)
		 else (idTHERAPY_PAUSED_1, idInfusion_Manager_THERAPY_1, idPAUSED_Alarm_Paused_1, idPAUSED_Manual_Paused_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idPAUSED_Arbiter_1);
		

-- transition trace :
	--POINT__To__THERAPY_ACTIVE_2
		(idTHERAPY_ACTIVE_2, idInfusion_Manager_THERAPY_3, idACTIVE_BASAL_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, idACTIVE_PATIENT_2, inPatientBolus_2, number_pbolus_2, pbolus_timer_2, idACTIVE_INTERMITTENT_2, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_2, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, idACTIVE_Arbiter_2) 
	= THERAPY_ACTIVE_en(idTHERAPY_ACTIVE_1, idInfusion_Manager_THERAPY_2, idACTIVE_BASAL_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, idACTIVE_PATIENT_1, inPatientBolus_1, number_pbolus_1, pbolus_timer_1, CONFIG_IN_Interval_Intermittent_Bolus, idACTIVE_INTERMITTENT_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1, step_size, CONFIG_IN_Flow_Rate_Basal, CONFIG_IN_Flow_Rate_Intermittent_Bolus, CONFIG_IN_Flow_Rate_Patient_Bolus, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idACTIVE_Arbiter_1, false);
		

	(idInfusion_Manager_THERAPY_4, idInfusionMGR_Infusion_Manager_3, IM_OUT_Current_System_Mode_4, IM_OUT_Flow_Rate_Commanded_4, idPAUSED_Alarm_Paused_3, idPAUSED_Arbiter_3, idPAUSED_Manual_Paused_3, idTHERAPY_PAUSED_3, IM_OUT_Is_Locked_Out_3, IM_OUT_Lock_Timer_3, idACTIVE_Arbiter_3, idACTIVE_BASAL_3, idACTIVE_INTERMITTENT_3, idACTIVE_PATIENT_3, idTHERAPY_ACTIVE_3, inPatientBolus_3, number_pbolus_3, pbolus_timer_3, sbolusInter_timer_3, sbolus_req_3, sbolus_timer_3) 
	= 

	if ( idInfusion_Manager_THERAPY_1 = 0) then

	
		 if (( OP_CMD_IN_Infusion_Inhibit or ALARM_IN_Highest_Level_Alarm>=3 )) then 
		(idInfusion_Manager_THERAPY_2, idInfusionMGR_Infusion_Manager_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_PAUSED_2, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idTHERAPY_ACTIVE_1, inPatientBolus_1, number_pbolus_1, pbolus_timer_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1)
		 else (idInfusion_Manager_THERAPY_3, idInfusionMGR_Infusion_Manager_2, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_PAUSED_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, idACTIVE_Arbiter_2, idACTIVE_BASAL_2, idACTIVE_INTERMITTENT_2, idACTIVE_PATIENT_2, idTHERAPY_ACTIVE_2, inPatientBolus_2, number_pbolus_2, pbolus_timer_2, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_2)

	 else(idInfusion_Manager_THERAPY_1, idInfusionMGR_Infusion_Manager_2, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idTHERAPY_ACTIVE_1, inPatientBolus_1, number_pbolus_1, pbolus_timer_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1);

	

	(idTHERAPY_ACTIVE_4, idInfusion_Manager_THERAPY_5, idACTIVE_BASAL_4, IM_OUT_Is_Locked_Out_4, IM_OUT_Lock_Timer_4, idACTIVE_PATIENT_4, inPatientBolus_4, number_pbolus_4, pbolus_timer_4, idACTIVE_INTERMITTENT_4, sbolusInter_timer_4, sbolus_req_4, sbolus_timer_4, IM_OUT_Current_System_Mode_5, IM_OUT_Flow_Rate_Commanded_5, idACTIVE_Arbiter_4) 
	= 
	if ( idInfusion_Manager_THERAPY_1 = 197) then
	THERAPY_ACTIVE_en(idTHERAPY_ACTIVE_1, idInfusion_Manager_THERAPY_1, idACTIVE_BASAL_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, idACTIVE_PATIENT_1, inPatientBolus_1, number_pbolus_1, pbolus_timer_1, CONFIG_IN_Interval_Intermittent_Bolus, idACTIVE_INTERMITTENT_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1, step_size, CONFIG_IN_Flow_Rate_Basal, CONFIG_IN_Flow_Rate_Intermittent_Bolus, CONFIG_IN_Flow_Rate_Patient_Bolus, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idACTIVE_Arbiter_1, false)
	 else (idTHERAPY_ACTIVE_1, idInfusion_Manager_THERAPY_1, idACTIVE_BASAL_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, idACTIVE_PATIENT_1, inPatientBolus_1, number_pbolus_1, pbolus_timer_1, idACTIVE_INTERMITTENT_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idACTIVE_Arbiter_1);

	

	(idTHERAPY_PAUSED_4, idInfusion_Manager_THERAPY_6, idPAUSED_Alarm_Paused_4, idPAUSED_Manual_Paused_4, IM_OUT_Current_System_Mode_6, IM_OUT_Flow_Rate_Commanded_6, idPAUSED_Arbiter_4) 
	= 
	if ( idInfusion_Manager_THERAPY_1 = 214) then
	THERAPY_PAUSED_en(idTHERAPY_PAUSED_1, idInfusion_Manager_THERAPY_1, ALARM_IN_Highest_Level_Alarm, idPAUSED_Alarm_Paused_1, OP_CMD_IN_Infusion_Inhibit, idPAUSED_Manual_Paused_1, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idPAUSED_Arbiter_1, false)
	 else (idTHERAPY_PAUSED_1, idInfusion_Manager_THERAPY_1, idPAUSED_Alarm_Paused_1, idPAUSED_Manual_Paused_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idPAUSED_Arbiter_1);

	

	(idInfusion_Manager_THERAPY_7, idInfusionMGR_Infusion_Manager_4, IM_OUT_Current_System_Mode_7, IM_OUT_Flow_Rate_Commanded_7, idPAUSED_Alarm_Paused_5, idPAUSED_Arbiter_5, idPAUSED_Manual_Paused_5, idTHERAPY_PAUSED_5, IM_OUT_Is_Locked_Out_5, IM_OUT_Lock_Timer_5, idACTIVE_Arbiter_5, idACTIVE_BASAL_5, idACTIVE_INTERMITTENT_5, idACTIVE_PATIENT_5, idTHERAPY_ACTIVE_5, inPatientBolus_5, number_pbolus_5, pbolus_timer_5, sbolusInter_timer_5, sbolus_req_5, sbolus_timer_5) 
	= 
		 if ( idInfusion_Manager_THERAPY_1 = 0) then 
		(idInfusion_Manager_THERAPY_4, idInfusionMGR_Infusion_Manager_3, IM_OUT_Current_System_Mode_4, IM_OUT_Flow_Rate_Commanded_4, idPAUSED_Alarm_Paused_3, idPAUSED_Arbiter_3, idPAUSED_Manual_Paused_3, idTHERAPY_PAUSED_3, IM_OUT_Is_Locked_Out_3, IM_OUT_Lock_Timer_3, idACTIVE_Arbiter_3, idACTIVE_BASAL_3, idACTIVE_INTERMITTENT_3, idACTIVE_PATIENT_3, idTHERAPY_ACTIVE_3, inPatientBolus_3, number_pbolus_3, pbolus_timer_3, sbolusInter_timer_3, sbolus_req_3, sbolus_timer_3)
		 else
		 if ( idInfusion_Manager_THERAPY_1 = 197) then 
		(idInfusion_Manager_THERAPY_5, idInfusionMGR_Infusion_Manager_3, IM_OUT_Current_System_Mode_5, IM_OUT_Flow_Rate_Commanded_5, idPAUSED_Alarm_Paused_3, idPAUSED_Arbiter_3, idPAUSED_Manual_Paused_3, idTHERAPY_PAUSED_3, IM_OUT_Is_Locked_Out_4, IM_OUT_Lock_Timer_4, idACTIVE_Arbiter_4, idACTIVE_BASAL_4, idACTIVE_INTERMITTENT_4, idACTIVE_PATIENT_4, idTHERAPY_ACTIVE_4, inPatientBolus_4, number_pbolus_4, pbolus_timer_4, sbolusInter_timer_4, sbolus_req_4, sbolus_timer_4)
		 else
		 if ( idInfusion_Manager_THERAPY_1 = 214) then 
		(idInfusion_Manager_THERAPY_6, idInfusionMGR_Infusion_Manager_3, IM_OUT_Current_System_Mode_6, IM_OUT_Flow_Rate_Commanded_6, idPAUSED_Alarm_Paused_4, idPAUSED_Arbiter_4, idPAUSED_Manual_Paused_4, idTHERAPY_PAUSED_4, IM_OUT_Is_Locked_Out_4, IM_OUT_Lock_Timer_4, idACTIVE_Arbiter_4, idACTIVE_BASAL_4, idACTIVE_INTERMITTENT_4, idACTIVE_PATIENT_4, idTHERAPY_ACTIVE_4, inPatientBolus_4, number_pbolus_4, pbolus_timer_4, sbolusInter_timer_4, sbolus_req_4, sbolus_timer_4)
		 else (idInfusion_Manager_THERAPY_1, idInfusionMGR_Infusion_Manager_2, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idTHERAPY_ACTIVE_1, inPatientBolus_1, number_pbolus_1, pbolus_timer_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1);


	(idInfusion_Manager_THERAPY, idInfusionMGR_Infusion_Manager, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_PAUSED, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idTHERAPY_ACTIVE, inPatientBolus, number_pbolus, pbolus_timer, sbolusInter_timer, sbolus_req, sbolus_timer) 
	= (idInfusion_Manager_THERAPY_7, idInfusionMGR_Infusion_Manager_4, IM_OUT_Current_System_Mode_7, IM_OUT_Flow_Rate_Commanded_7, idPAUSED_Alarm_Paused_5, idPAUSED_Arbiter_5, idPAUSED_Manual_Paused_5, idTHERAPY_PAUSED_5, IM_OUT_Is_Locked_Out_5, IM_OUT_Lock_Timer_5, idACTIVE_Arbiter_5, idACTIVE_BASAL_5, idACTIVE_INTERMITTENT_5, idACTIVE_PATIENT_5, idTHERAPY_ACTIVE_5, inPatientBolus_5, number_pbolus_5, pbolus_timer_5, sbolusInter_timer_5, sbolus_req_5, sbolus_timer_5);
	

tel






-- Entry action for state :Infusion_Manager_IDLE
node Infusion_Manager_IDLE_en(idInfusionMGR_Infusion_Manager_1:int;
	IM_OUT_Current_System_Mode_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_Lock_Timer_1:real;
	inPatientBolus_1:bool;
	number_pbolus_1:int;
	isInner:bool)

returns (idInfusionMGR_Infusion_Manager:int;
	IM_OUT_Current_System_Mode:int;
	IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Is_Locked_Out:bool;
	IM_OUT_Lock_Timer:real;
	inPatientBolus:bool;
	number_pbolus:int);


var 	idInfusionMGR_Infusion_Manager_2:int;
	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Lock_Timer_2:real;
	inPatientBolus_2:bool;
	number_pbolus_2:int;


let



	-- set state as active 
	idInfusionMGR_Infusion_Manager_2 
	= 226;
	

	IM_OUT_Current_System_Mode_2 
	= if (not isInner) then 1
	 else IM_OUT_Current_System_Mode_1;
	

	IM_OUT_Flow_Rate_Commanded_2 
	= if (not isInner) then 0
	 else IM_OUT_Flow_Rate_Commanded_1;
	

	(IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2) 
	= if (not isInner) then resetAllInfusionDetails(IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1)
	 else (IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1);
	

	(idInfusionMGR_Infusion_Manager, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, number_pbolus) 
	= (idInfusionMGR_Infusion_Manager_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2);
	

tel





--During action for state :Infusion_Manager_IDLE
node Infusion_Manager_IDLE_du(IM_OUT_Current_System_Mode_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int)

returns (IM_OUT_Current_System_Mode:int;
	IM_OUT_Flow_Rate_Commanded:int);


var 	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;


let



	IM_OUT_Current_System_Mode_2 
	= 1;
	

	IM_OUT_Flow_Rate_Commanded_2 
	= 0;
	

	(IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded) 
	= (IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2);
	

tel





-- Exit action for state :Infusion_Manager_IDLE
node Infusion_Manager_IDLE_ex(IM_OUT_Current_System_Mode_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_Lock_Timer_1:real;
	inPatientBolus_1:bool;
	number_pbolus_1:int;
	idInfusionMGR_Infusion_Manager_1:int;
	isInner:bool)

returns (IM_OUT_Current_System_Mode:int;
	IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Is_Locked_Out:bool;
	IM_OUT_Lock_Timer:real;
	inPatientBolus:bool;
	number_pbolus:int;
	idInfusionMGR_Infusion_Manager:int);


var 	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Lock_Timer_2:real;
	inPatientBolus_2:bool;
	number_pbolus_2:int;
	idInfusionMGR_Infusion_Manager_2:int;


let



	IM_OUT_Current_System_Mode_2 
	= if (not isInner) then 1
	 else IM_OUT_Current_System_Mode_1;
	

	IM_OUT_Flow_Rate_Commanded_2 
	= if (not isInner) then 0
	 else IM_OUT_Flow_Rate_Commanded_1;
	

	(IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2) 
	= if (not isInner) then resetAllInfusionDetails(IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1)
	 else (IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1);
	

	-- set state as inactive 
	idInfusionMGR_Infusion_Manager_2
	 = if (not isInner) then 0 else idInfusionMGR_Infusion_Manager_1;


	(IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, number_pbolus, idInfusionMGR_Infusion_Manager) 
	= (IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2, idInfusionMGR_Infusion_Manager_1);
	

tel






-- Entry action for state :InfusionMGR_Infusion_Manager
node InfusionMGR_Infusion_Manager_en(idInfusionMGR_Infusion_Manager_1:int;
	idInfusionMGR_InfusionMGR_1:int;
	IM_OUT_Current_System_Mode_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_Lock_Timer_1:real;
	inPatientBolus_1:bool;
	number_pbolus_1:int;
	ALARM_IN_Highest_Level_Alarm:int;
	CONFIG_IN_Flow_Rate_Basal:int;
	CONFIG_IN_Flow_Rate_Intermittent_Bolus:int;
	CONFIG_IN_Flow_Rate_KVO:int;
	CONFIG_IN_Flow_Rate_Patient_Bolus:int;
	CONFIG_IN_Interval_Intermittent_Bolus:real;
	OP_CMD_IN_Infusion_Inhibit:bool;
	idACTIVE_Arbiter_1:int;
	idACTIVE_BASAL_1:int;
	idACTIVE_INTERMITTENT_1:int;
	idACTIVE_PATIENT_1:int;
	idInfusion_Manager_THERAPY_1:int;
	idPAUSED_Alarm_Paused_1:int;
	idPAUSED_Arbiter_1:int;
	idPAUSED_Manual_Paused_1:int;
	idTHERAPY_ACTIVE_1:int;
	idTHERAPY_PAUSED_1:int;
	pbolus_timer_1:real;
	sbolusInter_timer_1:real;
	sbolus_req_1:bool;
	sbolus_timer_1:real;
	step_size:real;
	isInner:bool)

returns (idInfusionMGR_Infusion_Manager:int;
	idInfusionMGR_InfusionMGR:int;
	IM_OUT_Current_System_Mode:int;
	IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Is_Locked_Out:bool;
	IM_OUT_Lock_Timer:real;
	inPatientBolus:bool;
	number_pbolus:int;
	idACTIVE_Arbiter:int;
	idACTIVE_BASAL:int;
	idACTIVE_INTERMITTENT:int;
	idACTIVE_PATIENT:int;
	idInfusion_Manager_THERAPY:int;
	idPAUSED_Alarm_Paused:int;
	idPAUSED_Arbiter:int;
	idPAUSED_Manual_Paused:int;
	idTHERAPY_ACTIVE:int;
	idTHERAPY_PAUSED:int;
	pbolus_timer:real;
	sbolusInter_timer:real;
	sbolus_req:bool;
	sbolus_timer:real);


var 	idInfusionMGR_Infusion_Manager_2, idInfusionMGR_Infusion_Manager_3, idInfusionMGR_Infusion_Manager_4, idInfusionMGR_Infusion_Manager_5, idInfusionMGR_Infusion_Manager_6:int;
	idInfusionMGR_InfusionMGR_2, idInfusionMGR_InfusionMGR_3, idInfusionMGR_InfusionMGR_4:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3, IM_OUT_Current_System_Mode_4, IM_OUT_Current_System_Mode_5, IM_OUT_Current_System_Mode_6:int;
	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Flow_Rate_Commanded_5, IM_OUT_Flow_Rate_Commanded_6:int;
	IM_OUT_Is_Locked_Out_2, IM_OUT_Is_Locked_Out_3, IM_OUT_Is_Locked_Out_4, IM_OUT_Is_Locked_Out_5, IM_OUT_Is_Locked_Out_6:bool;
	IM_OUT_Lock_Timer_2, IM_OUT_Lock_Timer_3, IM_OUT_Lock_Timer_4, IM_OUT_Lock_Timer_5, IM_OUT_Lock_Timer_6:real;
	inPatientBolus_2, inPatientBolus_3, inPatientBolus_4, inPatientBolus_5, inPatientBolus_6:bool;
	number_pbolus_2, number_pbolus_3, number_pbolus_4, number_pbolus_5, number_pbolus_6:int;
	idACTIVE_Arbiter_2, idACTIVE_Arbiter_3:int;
	idACTIVE_BASAL_2, idACTIVE_BASAL_3:int;
	idACTIVE_INTERMITTENT_2, idACTIVE_INTERMITTENT_3:int;
	idACTIVE_PATIENT_2, idACTIVE_PATIENT_3:int;
	idInfusion_Manager_THERAPY_2, idInfusion_Manager_THERAPY_3:int;
	idPAUSED_Alarm_Paused_2, idPAUSED_Alarm_Paused_3:int;
	idPAUSED_Arbiter_2, idPAUSED_Arbiter_3:int;
	idPAUSED_Manual_Paused_2, idPAUSED_Manual_Paused_3:int;
	idTHERAPY_ACTIVE_2, idTHERAPY_ACTIVE_3:int;
	idTHERAPY_PAUSED_2, idTHERAPY_PAUSED_3:int;
	pbolus_timer_2, pbolus_timer_3:real;
	sbolusInter_timer_2, sbolusInter_timer_3:real;
	sbolus_req_2, sbolus_req_3:bool;
	sbolus_timer_2, sbolus_timer_3:real;


let



	-- set state as active 
	idInfusionMGR_InfusionMGR_2 
	= 195;
	

	
-- transition trace :
	--POINT__To__Infusion_Manager_IDLE_1
		(idInfusionMGR_Infusion_Manager_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2) 
	= Infusion_Manager_IDLE_en(idInfusionMGR_Infusion_Manager_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1, false);
		

	(idInfusionMGR_Infusion_Manager_3, idInfusionMGR_InfusionMGR_3, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Is_Locked_Out_3, IM_OUT_Lock_Timer_3, inPatientBolus_3, number_pbolus_3) 
	= 

	if ( idInfusionMGR_Infusion_Manager_1 = 0) then

	 (idInfusionMGR_Infusion_Manager_2, idInfusionMGR_InfusionMGR_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2)

	 else(idInfusionMGR_Infusion_Manager_1, idInfusionMGR_InfusionMGR_2, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1);

	

	(idInfusion_Manager_THERAPY_2, idInfusionMGR_Infusion_Manager_4, IM_OUT_Current_System_Mode_4, IM_OUT_Flow_Rate_Commanded_4, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_PAUSED_2, IM_OUT_Is_Locked_Out_4, IM_OUT_Lock_Timer_4, idACTIVE_Arbiter_2, idACTIVE_BASAL_2, idACTIVE_INTERMITTENT_2, idACTIVE_PATIENT_2, idTHERAPY_ACTIVE_2, inPatientBolus_4, number_pbolus_4, pbolus_timer_2, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_2) 
	= 
	if ( idInfusionMGR_Infusion_Manager_1 = 196) then
	Infusion_Manager_THERAPY_en(idInfusion_Manager_THERAPY_1, idInfusionMGR_Infusion_Manager_1, OP_CMD_IN_Infusion_Inhibit, ALARM_IN_Highest_Level_Alarm, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_1, CONFIG_IN_Flow_Rate_Basal, CONFIG_IN_Flow_Rate_Intermittent_Bolus, CONFIG_IN_Flow_Rate_Patient_Bolus, CONFIG_IN_Interval_Intermittent_Bolus, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idTHERAPY_ACTIVE_1, inPatientBolus_1, number_pbolus_1, pbolus_timer_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1, step_size, false)
	 else (idInfusion_Manager_THERAPY_1, idInfusionMGR_Infusion_Manager_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idTHERAPY_ACTIVE_1, inPatientBolus_1, number_pbolus_1, pbolus_timer_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1);

	

	(idInfusionMGR_Infusion_Manager_5, IM_OUT_Current_System_Mode_5, IM_OUT_Flow_Rate_Commanded_5, IM_OUT_Is_Locked_Out_5, IM_OUT_Lock_Timer_5, inPatientBolus_5, number_pbolus_5) 
	= 
	if ( idInfusionMGR_Infusion_Manager_1 = 226) then
	Infusion_Manager_IDLE_en(idInfusionMGR_Infusion_Manager_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1, false)
	 else (idInfusionMGR_Infusion_Manager_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1);

	

	(idInfusionMGR_Infusion_Manager_6, idInfusionMGR_InfusionMGR_4, IM_OUT_Current_System_Mode_6, IM_OUT_Flow_Rate_Commanded_6, IM_OUT_Is_Locked_Out_6, IM_OUT_Lock_Timer_6, inPatientBolus_6, number_pbolus_6, idACTIVE_Arbiter_3, idACTIVE_BASAL_3, idACTIVE_INTERMITTENT_3, idACTIVE_PATIENT_3, idInfusion_Manager_THERAPY_3, idPAUSED_Alarm_Paused_3, idPAUSED_Arbiter_3, idPAUSED_Manual_Paused_3, idTHERAPY_ACTIVE_3, idTHERAPY_PAUSED_3, pbolus_timer_3, sbolusInter_timer_3, sbolus_req_3, sbolus_timer_3) 
	= 
		 if ( idInfusionMGR_Infusion_Manager_1 = 0) then 
		(idInfusionMGR_Infusion_Manager_3, idInfusionMGR_InfusionMGR_3, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Is_Locked_Out_3, IM_OUT_Lock_Timer_3, inPatientBolus_3, number_pbolus_3, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idInfusion_Manager_THERAPY_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_ACTIVE_1, idTHERAPY_PAUSED_1, pbolus_timer_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1)
		 else
		 if ( idInfusionMGR_Infusion_Manager_1 = 196) then 
		(idInfusionMGR_Infusion_Manager_4, idInfusionMGR_InfusionMGR_3, IM_OUT_Current_System_Mode_4, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Is_Locked_Out_4, IM_OUT_Lock_Timer_4, inPatientBolus_4, number_pbolus_4, idACTIVE_Arbiter_2, idACTIVE_BASAL_2, idACTIVE_INTERMITTENT_2, idACTIVE_PATIENT_2, idInfusion_Manager_THERAPY_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_ACTIVE_2, idTHERAPY_PAUSED_2, pbolus_timer_2, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_2)
		 else
		 if ( idInfusionMGR_Infusion_Manager_1 = 226) then 
		(idInfusionMGR_Infusion_Manager_5, idInfusionMGR_InfusionMGR_3, IM_OUT_Current_System_Mode_5, IM_OUT_Flow_Rate_Commanded_5, IM_OUT_Is_Locked_Out_5, IM_OUT_Lock_Timer_5, inPatientBolus_5, number_pbolus_5, idACTIVE_Arbiter_2, idACTIVE_BASAL_2, idACTIVE_INTERMITTENT_2, idACTIVE_PATIENT_2, idInfusion_Manager_THERAPY_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_ACTIVE_2, idTHERAPY_PAUSED_2, pbolus_timer_2, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_2)
		 else (idInfusionMGR_Infusion_Manager_1, idInfusionMGR_InfusionMGR_2, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idInfusion_Manager_THERAPY_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_ACTIVE_1, idTHERAPY_PAUSED_1, pbolus_timer_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1);


	(idInfusionMGR_Infusion_Manager, idInfusionMGR_InfusionMGR, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, number_pbolus, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idInfusion_Manager_THERAPY, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_ACTIVE, idTHERAPY_PAUSED, pbolus_timer, sbolusInter_timer, sbolus_req, sbolus_timer) 
	= (idInfusionMGR_Infusion_Manager_6, idInfusionMGR_InfusionMGR_4, IM_OUT_Current_System_Mode_6, IM_OUT_Flow_Rate_Commanded_6, IM_OUT_Is_Locked_Out_6, IM_OUT_Lock_Timer_6, inPatientBolus_6, number_pbolus_6, idACTIVE_Arbiter_3, idACTIVE_BASAL_3, idACTIVE_INTERMITTENT_3, idACTIVE_PATIENT_3, idInfusion_Manager_THERAPY_3, idPAUSED_Alarm_Paused_3, idPAUSED_Arbiter_3, idPAUSED_Manual_Paused_3, idTHERAPY_ACTIVE_3, idTHERAPY_PAUSED_3, pbolus_timer_3, sbolusInter_timer_3, sbolus_req_3, sbolus_timer_3);
	

tel





-- Exit action for state :InfusionMGR_Infusion_Manager
node InfusionMGR_Infusion_Manager_ex(idACTIVE_Arbiter_1:int;
	idTHERAPY_ACTIVE_1:int;
	idACTIVE_INTERMITTENT_1:int;
	sbolus_req_1:bool;
	sbolus_timer_1:real;
	idACTIVE_PATIENT_1:int;
	pbolus_timer_1:real;
	idACTIVE_BASAL_1:int;
	idInfusion_Manager_THERAPY_1:int;
	CONFIG_IN_Flow_Rate_KVO:int;
	IM_OUT_Current_System_Mode_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	idPAUSED_Alarm_Paused_1:int;
	idPAUSED_Arbiter_1:int;
	idPAUSED_Manual_Paused_1:int;
	idTHERAPY_PAUSED_1:int;
	IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_New_Infusion_1:bool;
	idInfusionMGR_Infusion_Manager_1:int;
	IM_OUT_Lock_Timer_1:real;
	inPatientBolus_1:bool;
	number_pbolus_1:int;
	idInfusionMGR_InfusionMGR_1:int;
	isInner:bool)

returns (idACTIVE_Arbiter:int;
	idTHERAPY_ACTIVE:int;
	idACTIVE_INTERMITTENT:int;
	sbolus_req:bool;
	sbolus_timer:real;
	idACTIVE_PATIENT:int;
	pbolus_timer:real;
	idACTIVE_BASAL:int;
	idInfusion_Manager_THERAPY:int;
	IM_OUT_Current_System_Mode:int;
	IM_OUT_Flow_Rate_Commanded:int;
	idPAUSED_Alarm_Paused:int;
	idPAUSED_Arbiter:int;
	idPAUSED_Manual_Paused:int;
	idTHERAPY_PAUSED:int;
	IM_OUT_Is_Locked_Out:bool;
	IM_OUT_New_Infusion:bool;
	idInfusionMGR_Infusion_Manager:int;
	IM_OUT_Lock_Timer:real;
	inPatientBolus:bool;
	number_pbolus:int;
	idInfusionMGR_InfusionMGR:int);


var 	idACTIVE_Arbiter_2, idACTIVE_Arbiter_3:int;
	idTHERAPY_ACTIVE_2, idTHERAPY_ACTIVE_3:int;
	idACTIVE_INTERMITTENT_2, idACTIVE_INTERMITTENT_3:int;
	sbolus_req_2, sbolus_req_3:bool;
	sbolus_timer_2, sbolus_timer_3:real;
	idACTIVE_PATIENT_2, idACTIVE_PATIENT_3:int;
	pbolus_timer_2, pbolus_timer_3:real;
	idACTIVE_BASAL_2, idACTIVE_BASAL_3:int;
	idInfusion_Manager_THERAPY_2, idInfusion_Manager_THERAPY_3:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3, IM_OUT_Current_System_Mode_4:int;
	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Flow_Rate_Commanded_4:int;
	idPAUSED_Alarm_Paused_2, idPAUSED_Alarm_Paused_3:int;
	idPAUSED_Arbiter_2, idPAUSED_Arbiter_3:int;
	idPAUSED_Manual_Paused_2, idPAUSED_Manual_Paused_3:int;
	idTHERAPY_PAUSED_2, idTHERAPY_PAUSED_3:int;
	IM_OUT_Is_Locked_Out_2, IM_OUT_Is_Locked_Out_3, IM_OUT_Is_Locked_Out_4:bool;
	IM_OUT_New_Infusion_2, IM_OUT_New_Infusion_3:bool;
	idInfusionMGR_Infusion_Manager_2, idInfusionMGR_Infusion_Manager_3, idInfusionMGR_Infusion_Manager_4, idInfusionMGR_Infusion_Manager_5:int;
	IM_OUT_Lock_Timer_2, IM_OUT_Lock_Timer_3:real;
	inPatientBolus_2, inPatientBolus_3:bool;
	number_pbolus_2, number_pbolus_3:int;
	idInfusionMGR_InfusionMGR_2:int;


let



	
	(idACTIVE_Arbiter_2, idTHERAPY_ACTIVE_2, idACTIVE_INTERMITTENT_2, sbolus_req_2, sbolus_timer_2, idACTIVE_PATIENT_2, pbolus_timer_2, idACTIVE_BASAL_2, idInfusion_Manager_THERAPY_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_PAUSED_2, IM_OUT_Is_Locked_Out_2, IM_OUT_New_Infusion_2, idInfusionMGR_Infusion_Manager_2) 
	= 
	if ( idInfusionMGR_Infusion_Manager_1 = 196) then
	Infusion_Manager_THERAPY_ex(idACTIVE_Arbiter_1, idTHERAPY_ACTIVE_1, idACTIVE_INTERMITTENT_1, sbolus_req_1, sbolus_timer_1, idACTIVE_PATIENT_1, pbolus_timer_1, idACTIVE_BASAL_1, idInfusion_Manager_THERAPY_1, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_1, IM_OUT_Is_Locked_Out_1, IM_OUT_New_Infusion_1, idInfusionMGR_Infusion_Manager_1, false)
	 else (idACTIVE_Arbiter_1, idTHERAPY_ACTIVE_1, idACTIVE_INTERMITTENT_1, sbolus_req_1, sbolus_timer_1, idACTIVE_PATIENT_1, pbolus_timer_1, idACTIVE_BASAL_1, idInfusion_Manager_THERAPY_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_1, IM_OUT_Is_Locked_Out_1, IM_OUT_New_Infusion_1, idInfusionMGR_Infusion_Manager_1);

	

	(IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Is_Locked_Out_3, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2, idInfusionMGR_Infusion_Manager_3) 
	= 
	if ( idInfusionMGR_Infusion_Manager_1 = 226) then
	Infusion_Manager_IDLE_ex(IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1, idInfusionMGR_Infusion_Manager_1, false)
	 else (IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1, idInfusionMGR_Infusion_Manager_1);

	

	(idACTIVE_Arbiter_3, idTHERAPY_ACTIVE_3, idACTIVE_INTERMITTENT_3, sbolus_req_3, sbolus_timer_3, idACTIVE_PATIENT_3, pbolus_timer_3, idACTIVE_BASAL_3, idInfusion_Manager_THERAPY_3, IM_OUT_Current_System_Mode_4, IM_OUT_Flow_Rate_Commanded_4, idPAUSED_Alarm_Paused_3, idPAUSED_Arbiter_3, idPAUSED_Manual_Paused_3, idTHERAPY_PAUSED_3, IM_OUT_Is_Locked_Out_4, IM_OUT_New_Infusion_3, idInfusionMGR_Infusion_Manager_4, IM_OUT_Lock_Timer_3, inPatientBolus_3, number_pbolus_3) 
	= 
		 if ( idInfusionMGR_Infusion_Manager_1 = 196) then 
		(idACTIVE_Arbiter_2, idTHERAPY_ACTIVE_2, idACTIVE_INTERMITTENT_2, sbolus_req_2, sbolus_timer_2, idACTIVE_PATIENT_2, pbolus_timer_2, idACTIVE_BASAL_2, idInfusion_Manager_THERAPY_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_PAUSED_2, IM_OUT_Is_Locked_Out_2, IM_OUT_New_Infusion_2, idInfusionMGR_Infusion_Manager_2, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1)
		 else
		 if ( idInfusionMGR_Infusion_Manager_1 = 226) then 
		(idACTIVE_Arbiter_2, idTHERAPY_ACTIVE_2, idACTIVE_INTERMITTENT_2, sbolus_req_2, sbolus_timer_2, idACTIVE_PATIENT_2, pbolus_timer_2, idACTIVE_BASAL_2, idInfusion_Manager_THERAPY_2, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_PAUSED_2, IM_OUT_Is_Locked_Out_3, IM_OUT_New_Infusion_2, idInfusionMGR_Infusion_Manager_3, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2)
		 else (idACTIVE_Arbiter_1, idTHERAPY_ACTIVE_1, idACTIVE_INTERMITTENT_1, sbolus_req_1, sbolus_timer_1, idACTIVE_PATIENT_1, pbolus_timer_1, idACTIVE_BASAL_1, idInfusion_Manager_THERAPY_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_1, IM_OUT_Is_Locked_Out_1, IM_OUT_New_Infusion_1, idInfusionMGR_Infusion_Manager_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1);


	-- set state as inactive 
	idInfusionMGR_InfusionMGR_2
	 = if (not isInner) then 0 else idInfusionMGR_InfusionMGR_1;

	idInfusionMGR_Infusion_Manager_5 
	= 0;
	

	(idACTIVE_Arbiter, idTHERAPY_ACTIVE, idACTIVE_INTERMITTENT, sbolus_req, sbolus_timer, idACTIVE_PATIENT, pbolus_timer, idACTIVE_BASAL, idInfusion_Manager_THERAPY, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_PAUSED, IM_OUT_Is_Locked_Out, IM_OUT_New_Infusion, idInfusionMGR_Infusion_Manager, IM_OUT_Lock_Timer, inPatientBolus, number_pbolus, idInfusionMGR_InfusionMGR) 
	= (idACTIVE_Arbiter_3, idTHERAPY_ACTIVE_3, idACTIVE_INTERMITTENT_3, sbolus_req_3, sbolus_timer_3, idACTIVE_PATIENT_3, pbolus_timer_3, idACTIVE_BASAL_3, idInfusion_Manager_THERAPY_3, IM_OUT_Current_System_Mode_4, IM_OUT_Flow_Rate_Commanded_4, idPAUSED_Alarm_Paused_3, idPAUSED_Arbiter_3, idPAUSED_Manual_Paused_3, idTHERAPY_PAUSED_3, IM_OUT_Is_Locked_Out_4, IM_OUT_New_Infusion_3, idInfusionMGR_Infusion_Manager_5, IM_OUT_Lock_Timer_3, inPatientBolus_3, number_pbolus_3, idInfusionMGR_InfusionMGR_1);
	

tel






-- Entry action for state :InfusionMGR_NOT_ON
node InfusionMGR_NOT_ON_en(idInfusionMGR_InfusionMGR_1:int;
	IM_OUT_Current_System_Mode_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	isInner:bool)

returns (idInfusionMGR_InfusionMGR:int;
	IM_OUT_Current_System_Mode:int;
	IM_OUT_Flow_Rate_Commanded:int);


var 	idInfusionMGR_InfusionMGR_2:int;
	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;


let



	-- set state as active 
	idInfusionMGR_InfusionMGR_2 
	= 194;
	

	IM_OUT_Current_System_Mode_2 
	= if (not isInner) then 0
	 else IM_OUT_Current_System_Mode_1;
	

	IM_OUT_Flow_Rate_Commanded_2 
	= if (not isInner) then 0
	 else IM_OUT_Flow_Rate_Commanded_1;
	

	(idInfusionMGR_InfusionMGR, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded) 
	= (idInfusionMGR_InfusionMGR_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2);
	

tel





--During action for state :InfusionMGR_NOT_ON
node InfusionMGR_NOT_ON_du(IM_OUT_Current_System_Mode_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int)

returns (IM_OUT_Current_System_Mode:int;
	IM_OUT_Flow_Rate_Commanded:int);


var 	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;


let



	IM_OUT_Current_System_Mode_2 
	= 0;
	

	IM_OUT_Flow_Rate_Commanded_2 
	= 0;
	

	(IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded) 
	= (IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2);
	

tel





-- Exit action for state :InfusionMGR_NOT_ON
node InfusionMGR_NOT_ON_ex(IM_OUT_Current_System_Mode_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	idInfusionMGR_InfusionMGR_1:int;
	isInner:bool)

returns (IM_OUT_Current_System_Mode:int;
	IM_OUT_Flow_Rate_Commanded:int;
	idInfusionMGR_InfusionMGR:int);


var 	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	idInfusionMGR_InfusionMGR_2:int;


let



	IM_OUT_Current_System_Mode_2 
	= if (not isInner) then 0
	 else IM_OUT_Current_System_Mode_1;
	

	IM_OUT_Flow_Rate_Commanded_2 
	= if (not isInner) then 0
	 else IM_OUT_Flow_Rate_Commanded_1;
	

	-- set state as inactive 
	idInfusionMGR_InfusionMGR_2
	 = if (not isInner) then 0 else idInfusionMGR_InfusionMGR_1;


	(IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, idInfusionMGR_InfusionMGR) 
	= (IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idInfusionMGR_InfusionMGR_1);
	

tel


--***************************************************State :PAUSED_Arbiter Automaton***************************************************

node PAUSED_Arbiter_node(idPAUSED_Arbiter_1:int;
	idPAUSED_Alarm_Paused_1:int;
	ALARM_IN_Highest_Level_Alarm:int;
	IM_OUT_Current_System_Mode_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	CONFIG_IN_Flow_Rate_KVO:int)

returns (idPAUSED_Arbiter:int;
	IM_OUT_Current_System_Mode:int;
	IM_OUT_Flow_Rate_Commanded:int);


let

	 automaton paused_arbiter

	state POINTPAUSED_Arbiter:
	unless (idPAUSED_Arbiter_1=0) restart POINT__TO__INFUSIONMGR_INFUSIONMGRJUNCTION281_1



	unless (idPAUSED_Arbiter_1=216) restart ARBITER_PAUSED_NOKVO__TO__INFUSIONMGR_INFUSIONMGRJUNCTION283_1



	unless (idPAUSED_Arbiter_1=217) restart ARBITER_PAUSED_KVO__TO__INFUSIONMGR_INFUSIONMGRJUNCTION283_1



	unless (idPAUSED_Arbiter_1=218) restart ARBITER_MANUAL_PAUSED_KVO__TO__INFUSIONMGR_INFUSIONMGRJUNCTION283_1



	unless (idPAUSED_Arbiter_1=216) restart ARBITER_PAUSED_NOKVO_IDL

	unless (idPAUSED_Arbiter_1=217) restart ARBITER_PAUSED_KVO_IDL

	unless (idPAUSED_Arbiter_1=218) restart ARBITER_MANUAL_PAUSED_KVO_IDL

	let

		(idPAUSED_Arbiter, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded) 
	= (idPAUSED_Arbiter_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1);
	

	tel



	state POINT__TO__INFUSIONMGR_INFUSIONMGRJUNCTION281_1:

	 var 	idPAUSED_Arbiter_2, idPAUSED_Arbiter_3, idPAUSED_Arbiter_4:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3, IM_OUT_Current_System_Mode_4:int;
	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Flow_Rate_Commanded_4:int;
	let

		

-- transition trace :
	--POINT__To__Junction281_1, Junction281__To__Arbiter_Paused_NoKVO_1
		(idPAUSED_Arbiter_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2) 
	= 
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=4 )) then 
		Arbiter_Paused_NoKVO_en(idPAUSED_Arbiter_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false)
		 else (idPAUSED_Arbiter_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);
		


-- transition trace :
	--POINT__To__Junction281_1, Junction281__To__Arbiter_Paused_KVO_2
		(idPAUSED_Arbiter_3, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Current_System_Mode_3) 
	= 
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=3 )) then 
		Arbiter_Paused_KVO_en(idPAUSED_Arbiter_1, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false)
		 else (idPAUSED_Arbiter_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);
		


-- transition trace :
	--POINT__To__Junction281_1, Junction281__To__Arbiter_Manual_Paused_KVO_3
		(idPAUSED_Arbiter_4, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Current_System_Mode_4) 
	= Arbiter_Manual_Paused_KVO_en(idPAUSED_Arbiter_1, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false);
		

	(idPAUSED_Arbiter, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded) 
	= 
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=4 )) then 
		(idPAUSED_Arbiter_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2)
		 else
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=3 )) then 
		(idPAUSED_Arbiter_3, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3)
		 else (idPAUSED_Arbiter_4, IM_OUT_Current_System_Mode_4, IM_OUT_Flow_Rate_Commanded_4);


	tel

	until true restart POINTPAUSED_Arbiter



	state ARBITER_PAUSED_NOKVO__TO__INFUSIONMGR_INFUSIONMGRJUNCTION283_1:

	 var 	idPAUSED_Arbiter_2, idPAUSED_Arbiter_3, idPAUSED_Arbiter_4, idPAUSED_Arbiter_5, idPAUSED_Arbiter_6, idPAUSED_Arbiter_7:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3, IM_OUT_Current_System_Mode_4, IM_OUT_Current_System_Mode_5, IM_OUT_Current_System_Mode_6, IM_OUT_Current_System_Mode_7:int;
	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Flow_Rate_Commanded_5, IM_OUT_Flow_Rate_Commanded_6, IM_OUT_Flow_Rate_Commanded_7:int;
	let

		





-- transition trace :
	--Arbiter_Paused_NoKVO__To__Junction283_1, Junction283__To__Junction282_1, Junction282__To__Junction281_1, Junction281__To__Arbiter_Paused_NoKVO_1
		(IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2, idPAUSED_Arbiter_2) 
	= 
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=4 )) then 
		Arbiter_Paused_NoKVO_ex(IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1, false)
		 else (IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1);
		

		(idPAUSED_Arbiter_3, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Current_System_Mode_3) 
	= 
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=4 )) then 
		Arbiter_Paused_NoKVO_en(idPAUSED_Arbiter_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2, false)
		 else (idPAUSED_Arbiter_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2);
		


-- transition trace :
	--Arbiter_Paused_NoKVO__To__Junction283_1, Junction283__To__Junction282_1, Junction282__To__Junction281_1, Junction281__To__Arbiter_Paused_KVO_2
		(IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Current_System_Mode_4, idPAUSED_Arbiter_4) 
	= 
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=3 )) then 
		Arbiter_Paused_NoKVO_ex(IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1, false)
		 else (IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1);
		

		(idPAUSED_Arbiter_5, IM_OUT_Flow_Rate_Commanded_5, IM_OUT_Current_System_Mode_5) 
	= 
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=3 )) then 
		Arbiter_Paused_KVO_en(idPAUSED_Arbiter_4, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Current_System_Mode_4, false)
		 else (idPAUSED_Arbiter_4, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Current_System_Mode_4);
		


-- transition trace :
	--Arbiter_Paused_NoKVO__To__Junction283_1, Junction283__To__Junction282_1, Junction282__To__Junction281_1, Junction281__To__Arbiter_Manual_Paused_KVO_3
		(IM_OUT_Flow_Rate_Commanded_6, IM_OUT_Current_System_Mode_6, idPAUSED_Arbiter_6) 
	= Arbiter_Paused_NoKVO_ex(IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1, false);
		

		(idPAUSED_Arbiter_7, IM_OUT_Flow_Rate_Commanded_7, IM_OUT_Current_System_Mode_7) 
	= Arbiter_Manual_Paused_KVO_en(idPAUSED_Arbiter_6, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_6, IM_OUT_Current_System_Mode_6, false);
		

	(idPAUSED_Arbiter, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded) 
	= 
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=4 )) then 
		(idPAUSED_Arbiter_3, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3)
		 else
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=3 )) then 
		(idPAUSED_Arbiter_5, IM_OUT_Current_System_Mode_5, IM_OUT_Flow_Rate_Commanded_5)
		 else (idPAUSED_Arbiter_7, IM_OUT_Current_System_Mode_7, IM_OUT_Flow_Rate_Commanded_7);


	tel

	until true restart POINTPAUSED_Arbiter



	state ARBITER_PAUSED_KVO__TO__INFUSIONMGR_INFUSIONMGRJUNCTION283_1:

	 var 	idPAUSED_Arbiter_2, idPAUSED_Arbiter_3, idPAUSED_Arbiter_4, idPAUSED_Arbiter_5, idPAUSED_Arbiter_6, idPAUSED_Arbiter_7:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3, IM_OUT_Current_System_Mode_4, IM_OUT_Current_System_Mode_5, IM_OUT_Current_System_Mode_6, IM_OUT_Current_System_Mode_7:int;
	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Flow_Rate_Commanded_5, IM_OUT_Flow_Rate_Commanded_6, IM_OUT_Flow_Rate_Commanded_7:int;
	let

		





-- transition trace :
	--Arbiter_Paused_KVO__To__Junction283_1, Junction283__To__Junction282_1, Junction282__To__Junction281_1, Junction281__To__Arbiter_Paused_NoKVO_1
		(IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2, idPAUSED_Arbiter_2) 
	= 
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=4 )) then 
		Arbiter_Paused_KVO_ex(CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1, false)
		 else (IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1);
		

		(idPAUSED_Arbiter_3, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Current_System_Mode_3) 
	= 
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=4 )) then 
		Arbiter_Paused_NoKVO_en(idPAUSED_Arbiter_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2, false)
		 else (idPAUSED_Arbiter_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2);
		


-- transition trace :
	--Arbiter_Paused_KVO__To__Junction283_1, Junction283__To__Junction282_1, Junction282__To__Junction281_1, Junction281__To__Arbiter_Paused_KVO_2
		(IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Current_System_Mode_4, idPAUSED_Arbiter_4) 
	= 
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=3 )) then 
		Arbiter_Paused_KVO_ex(CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1, false)
		 else (IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1);
		

		(idPAUSED_Arbiter_5, IM_OUT_Flow_Rate_Commanded_5, IM_OUT_Current_System_Mode_5) 
	= 
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=3 )) then 
		Arbiter_Paused_KVO_en(idPAUSED_Arbiter_4, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Current_System_Mode_4, false)
		 else (idPAUSED_Arbiter_4, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Current_System_Mode_4);
		


-- transition trace :
	--Arbiter_Paused_KVO__To__Junction283_1, Junction283__To__Junction282_1, Junction282__To__Junction281_1, Junction281__To__Arbiter_Manual_Paused_KVO_3
		(IM_OUT_Flow_Rate_Commanded_6, IM_OUT_Current_System_Mode_6, idPAUSED_Arbiter_6) 
	= Arbiter_Paused_KVO_ex(CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1, false);
		

		(idPAUSED_Arbiter_7, IM_OUT_Flow_Rate_Commanded_7, IM_OUT_Current_System_Mode_7) 
	= Arbiter_Manual_Paused_KVO_en(idPAUSED_Arbiter_6, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_6, IM_OUT_Current_System_Mode_6, false);
		

	(idPAUSED_Arbiter, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded) 
	= 
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=4 )) then 
		(idPAUSED_Arbiter_3, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3)
		 else
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=3 )) then 
		(idPAUSED_Arbiter_5, IM_OUT_Current_System_Mode_5, IM_OUT_Flow_Rate_Commanded_5)
		 else (idPAUSED_Arbiter_7, IM_OUT_Current_System_Mode_7, IM_OUT_Flow_Rate_Commanded_7);


	tel

	until true restart POINTPAUSED_Arbiter



	state ARBITER_MANUAL_PAUSED_KVO__TO__INFUSIONMGR_INFUSIONMGRJUNCTION283_1:

	 var 	idPAUSED_Arbiter_2, idPAUSED_Arbiter_3, idPAUSED_Arbiter_4, idPAUSED_Arbiter_5, idPAUSED_Arbiter_6, idPAUSED_Arbiter_7:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3, IM_OUT_Current_System_Mode_4, IM_OUT_Current_System_Mode_5, IM_OUT_Current_System_Mode_6, IM_OUT_Current_System_Mode_7:int;
	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Flow_Rate_Commanded_5, IM_OUT_Flow_Rate_Commanded_6, IM_OUT_Flow_Rate_Commanded_7:int;
	let

		





-- transition trace :
	--Arbiter_Manual_Paused_KVO__To__Junction283_1, Junction283__To__Junction282_1, Junction282__To__Junction281_1, Junction281__To__Arbiter_Paused_NoKVO_1
		(IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2, idPAUSED_Arbiter_2) 
	= 
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=4 )) then 
		Arbiter_Manual_Paused_KVO_ex(CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1, false)
		 else (IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1);
		

		(idPAUSED_Arbiter_3, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Current_System_Mode_3) 
	= 
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=4 )) then 
		Arbiter_Paused_NoKVO_en(idPAUSED_Arbiter_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2, false)
		 else (idPAUSED_Arbiter_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2);
		


-- transition trace :
	--Arbiter_Manual_Paused_KVO__To__Junction283_1, Junction283__To__Junction282_1, Junction282__To__Junction281_1, Junction281__To__Arbiter_Paused_KVO_2
		(IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Current_System_Mode_4, idPAUSED_Arbiter_4) 
	= 
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=3 )) then 
		Arbiter_Manual_Paused_KVO_ex(CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1, false)
		 else (IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1);
		

		(idPAUSED_Arbiter_5, IM_OUT_Flow_Rate_Commanded_5, IM_OUT_Current_System_Mode_5) 
	= 
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=3 )) then 
		Arbiter_Paused_KVO_en(idPAUSED_Arbiter_4, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Current_System_Mode_4, false)
		 else (idPAUSED_Arbiter_4, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Current_System_Mode_4);
		


-- transition trace :
	--Arbiter_Manual_Paused_KVO__To__Junction283_1, Junction283__To__Junction282_1, Junction282__To__Junction281_1, Junction281__To__Arbiter_Manual_Paused_KVO_3
		(IM_OUT_Flow_Rate_Commanded_6, IM_OUT_Current_System_Mode_6, idPAUSED_Arbiter_6) 
	= Arbiter_Manual_Paused_KVO_ex(CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1, false);
		

		(idPAUSED_Arbiter_7, IM_OUT_Flow_Rate_Commanded_7, IM_OUT_Current_System_Mode_7) 
	= Arbiter_Manual_Paused_KVO_en(idPAUSED_Arbiter_6, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_6, IM_OUT_Current_System_Mode_6, false);
		

	(idPAUSED_Arbiter, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded) 
	= 
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=4 )) then 
		(idPAUSED_Arbiter_3, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3)
		 else
		 if (( (idPAUSED_Alarm_Paused_1 = 221) and ALARM_IN_Highest_Level_Alarm=3 )) then 
		(idPAUSED_Arbiter_5, IM_OUT_Current_System_Mode_5, IM_OUT_Flow_Rate_Commanded_5)
		 else (idPAUSED_Arbiter_7, IM_OUT_Current_System_Mode_7, IM_OUT_Flow_Rate_Commanded_7);


	tel

	until true restart POINTPAUSED_Arbiter



	state ARBITER_PAUSED_NOKVO_IDL:

	 var 	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	let

		
	(IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2) 
	= Arbiter_Paused_NoKVO_du(IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);

		


	(idPAUSED_Arbiter, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded) 
	= (idPAUSED_Arbiter_1, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2);
	

	tel

	until true restart POINTPAUSED_Arbiter



	state ARBITER_PAUSED_KVO_IDL:

	 var 	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	let

		
	(IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2) 
	= Arbiter_Paused_KVO_du(CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);

		


	(idPAUSED_Arbiter, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded) 
	= (idPAUSED_Arbiter_1, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2);
	

	tel

	until true restart POINTPAUSED_Arbiter



	state ARBITER_MANUAL_PAUSED_KVO_IDL:

	 var 	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	let

		
	(IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2) 
	= Arbiter_Manual_Paused_KVO_du(CONFIG_IN_Flow_Rate_KVO, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);

		


	(idPAUSED_Arbiter, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded) 
	= (idPAUSED_Arbiter_1, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2);
	

	tel

	until true restart POINTPAUSED_Arbiter



tel


--***************************************************State :PAUSED_Manual_Paused Automaton***************************************************

node PAUSED_Manual_Paused_node(idPAUSED_Manual_Paused_1:int;
	OP_CMD_IN_Infusion_Inhibit:bool;
	OP_CMD_IN_Infusion_Initiate:bool)

returns (idPAUSED_Manual_Paused:int);


let

	 automaton paused_manual_paused

	state POINTPAUSED_Manual_Paused:
	unless (idPAUSED_Manual_Paused_1=0) and ( OP_CMD_IN_Infusion_Inhibit ) restart POINT__TO__MANUAL_PAUSED_ON_1



	unless (idPAUSED_Manual_Paused_1=0) restart POINT__TO__MANUAL_PAUSED_OFF_2



	unless (idPAUSED_Manual_Paused_1=223) and ( OP_CMD_IN_Infusion_Inhibit ) restart MANUAL_PAUSED_OFF__TO__MANUAL_PAUSED_ON_1



	unless (idPAUSED_Manual_Paused_1=224) and ( OP_CMD_IN_Infusion_Initiate and not OP_CMD_IN_Infusion_Inhibit ) restart MANUAL_PAUSED_ON__TO__MANUAL_PAUSED_OFF_1



	unless (idPAUSED_Manual_Paused_1=223) restart MANUAL_PAUSED_OFF_IDL

	unless (idPAUSED_Manual_Paused_1=224) restart MANUAL_PAUSED_ON_IDL

	let

		(idPAUSED_Manual_Paused) 
	= (idPAUSED_Manual_Paused_1);
	

	tel



	state POINT__TO__MANUAL_PAUSED_ON_1:

	 var 	idPAUSED_Manual_Paused_2:int;
	let

		-- transition trace :
	--POINT__To__Manual_Paused_ON_1
		(idPAUSED_Manual_Paused_2) 
	= Manual_Paused_ON_en(idPAUSED_Manual_Paused_1, false);
		

	(idPAUSED_Manual_Paused) 
	=  (idPAUSED_Manual_Paused_2);


	tel

	until true restart POINTPAUSED_Manual_Paused



	state POINT__TO__MANUAL_PAUSED_OFF_2:

	 var 	idPAUSED_Manual_Paused_2:int;
	let

		-- transition trace :
	--POINT__To__Manual_Paused_OFF_2
		(idPAUSED_Manual_Paused_2) 
	= Manual_Paused_OFF_en(idPAUSED_Manual_Paused_1, false);
		

	(idPAUSED_Manual_Paused) 
	=  (idPAUSED_Manual_Paused_2);


	tel

	until true restart POINTPAUSED_Manual_Paused



	state MANUAL_PAUSED_OFF__TO__MANUAL_PAUSED_ON_1:

	 var 	idPAUSED_Manual_Paused_2, idPAUSED_Manual_Paused_3:int;
	let

		-- transition trace :
	--Manual_Paused_OFF__To__Manual_Paused_ON_1
		(idPAUSED_Manual_Paused_2) 
	= Manual_Paused_OFF_ex(idPAUSED_Manual_Paused_1, false);
		

		(idPAUSED_Manual_Paused_3) 
	= Manual_Paused_ON_en(idPAUSED_Manual_Paused_2, false);
		

	(idPAUSED_Manual_Paused) 
	=  (idPAUSED_Manual_Paused_3);


	tel

	until true restart POINTPAUSED_Manual_Paused



	state MANUAL_PAUSED_ON__TO__MANUAL_PAUSED_OFF_1:

	 var 	idPAUSED_Manual_Paused_2, idPAUSED_Manual_Paused_3:int;
	let

		-- transition trace :
	--Manual_Paused_ON__To__Manual_Paused_OFF_1
		(idPAUSED_Manual_Paused_2) 
	= Manual_Paused_ON_ex(idPAUSED_Manual_Paused_1, false);
		

		(idPAUSED_Manual_Paused_3) 
	= Manual_Paused_OFF_en(idPAUSED_Manual_Paused_2, false);
		

	(idPAUSED_Manual_Paused) 
	=  (idPAUSED_Manual_Paused_3);


	tel

	until true restart POINTPAUSED_Manual_Paused



	state MANUAL_PAUSED_OFF_IDL:

	 	let

		

	(idPAUSED_Manual_Paused) 
	= (idPAUSED_Manual_Paused_1);
	

	tel

	until true restart POINTPAUSED_Manual_Paused



	state MANUAL_PAUSED_ON_IDL:

	 	let

		

	(idPAUSED_Manual_Paused) 
	= (idPAUSED_Manual_Paused_1);
	

	tel

	until true restart POINTPAUSED_Manual_Paused



tel


--***************************************************State :PAUSED_Alarm_Paused Automaton***************************************************

node PAUSED_Alarm_Paused_node(idPAUSED_Alarm_Paused_1:int;
	ALARM_IN_Highest_Level_Alarm:int;
	OP_CMD_IN_Infusion_Initiate:bool)

returns (idPAUSED_Alarm_Paused:int);


let

	 automaton paused_alarm_paused

	state POINTPAUSED_Alarm_Paused:
	unless (idPAUSED_Alarm_Paused_1=0) and ( ALARM_IN_Highest_Level_Alarm>=3 ) restart POINT__TO__ALARM_PAUSED_ON_1



	unless (idPAUSED_Alarm_Paused_1=0) restart POINT__TO__ALARM_PAUSED_OFF_2



	unless (idPAUSED_Alarm_Paused_1=220) and ( ALARM_IN_Highest_Level_Alarm>=3 ) restart ALARM_PAUSED_OFF__TO__ALARM_PAUSED_ON_1



	unless (idPAUSED_Alarm_Paused_1=221) and ( OP_CMD_IN_Infusion_Initiate and ALARM_IN_Highest_Level_Alarm<3 ) restart ALARM_PAUSED_ON__TO__ALARM_PAUSED_OFF_1



	unless (idPAUSED_Alarm_Paused_1=220) restart ALARM_PAUSED_OFF_IDL

	unless (idPAUSED_Alarm_Paused_1=221) restart ALARM_PAUSED_ON_IDL

	let

		(idPAUSED_Alarm_Paused) 
	= (idPAUSED_Alarm_Paused_1);
	

	tel



	state POINT__TO__ALARM_PAUSED_ON_1:

	 var 	idPAUSED_Alarm_Paused_2:int;
	let

		-- transition trace :
	--POINT__To__Alarm_Paused_ON_1
		(idPAUSED_Alarm_Paused_2) 
	= Alarm_Paused_ON_en(idPAUSED_Alarm_Paused_1, false);
		

	(idPAUSED_Alarm_Paused) 
	=  (idPAUSED_Alarm_Paused_2);


	tel

	until true restart POINTPAUSED_Alarm_Paused



	state POINT__TO__ALARM_PAUSED_OFF_2:

	 var 	idPAUSED_Alarm_Paused_2:int;
	let

		-- transition trace :
	--POINT__To__Alarm_Paused_OFF_2
		(idPAUSED_Alarm_Paused_2) 
	= Alarm_Paused_OFF_en(idPAUSED_Alarm_Paused_1, false);
		

	(idPAUSED_Alarm_Paused) 
	=  (idPAUSED_Alarm_Paused_2);


	tel

	until true restart POINTPAUSED_Alarm_Paused



	state ALARM_PAUSED_OFF__TO__ALARM_PAUSED_ON_1:

	 var 	idPAUSED_Alarm_Paused_2, idPAUSED_Alarm_Paused_3:int;
	let

		-- transition trace :
	--Alarm_Paused_OFF__To__Alarm_Paused_ON_1
		(idPAUSED_Alarm_Paused_2) 
	= Alarm_Paused_OFF_ex(idPAUSED_Alarm_Paused_1, false);
		

		(idPAUSED_Alarm_Paused_3) 
	= Alarm_Paused_ON_en(idPAUSED_Alarm_Paused_2, false);
		

	(idPAUSED_Alarm_Paused) 
	=  (idPAUSED_Alarm_Paused_3);


	tel

	until true restart POINTPAUSED_Alarm_Paused



	state ALARM_PAUSED_ON__TO__ALARM_PAUSED_OFF_1:

	 var 	idPAUSED_Alarm_Paused_2, idPAUSED_Alarm_Paused_3:int;
	let

		-- transition trace :
	--Alarm_Paused_ON__To__Alarm_Paused_OFF_1
		(idPAUSED_Alarm_Paused_2) 
	= Alarm_Paused_ON_ex(idPAUSED_Alarm_Paused_1, false);
		

		(idPAUSED_Alarm_Paused_3) 
	= Alarm_Paused_OFF_en(idPAUSED_Alarm_Paused_2, false);
		

	(idPAUSED_Alarm_Paused) 
	=  (idPAUSED_Alarm_Paused_3);


	tel

	until true restart POINTPAUSED_Alarm_Paused



	state ALARM_PAUSED_OFF_IDL:

	 	let

		

	(idPAUSED_Alarm_Paused) 
	= (idPAUSED_Alarm_Paused_1);
	

	tel

	until true restart POINTPAUSED_Alarm_Paused



	state ALARM_PAUSED_ON_IDL:

	 	let

		

	(idPAUSED_Alarm_Paused) 
	= (idPAUSED_Alarm_Paused_1);
	

	tel

	until true restart POINTPAUSED_Alarm_Paused



tel


--***************************************************State :THERAPY_PAUSED Automaton***************************************************

node THERAPY_PAUSED_node(idTHERAPY_PAUSED_1:int;
	ALARM_IN_Highest_Level_Alarm:int;
	idPAUSED_Alarm_Paused_1:int;
	OP_CMD_IN_Infusion_Inhibit:bool;
	idPAUSED_Manual_Paused_1:int;
	CONFIG_IN_Flow_Rate_KVO:int;
	IM_OUT_Current_System_Mode_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	idPAUSED_Arbiter_1:int;
	OP_CMD_IN_Infusion_Initiate:bool)

returns (idTHERAPY_PAUSED:int;
	idPAUSED_Alarm_Paused:int;
	idPAUSED_Manual_Paused:int;
	IM_OUT_Current_System_Mode:int;
	IM_OUT_Flow_Rate_Commanded:int;
	idPAUSED_Arbiter:int);


let

	 automaton therapy_paused

	state POINTTHERAPY_PAUSED:
	unless (idTHERAPY_PAUSED_1=0) restart THERAPY_PAUSED_PARALLEL_ENTRY
	unless true  restart THERAPY_PAUSED_PARALLEL_IDL

	let

		(idTHERAPY_PAUSED, idPAUSED_Alarm_Paused, idPAUSED_Manual_Paused, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, idPAUSED_Arbiter) 
	= (idTHERAPY_PAUSED_1, idPAUSED_Alarm_Paused_1, idPAUSED_Manual_Paused_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idPAUSED_Arbiter_1);
	

	tel



	state THERAPY_PAUSED_PARALLEL_ENTRY:

	 var 	idTHERAPY_PAUSED_2, idTHERAPY_PAUSED_3, idTHERAPY_PAUSED_4:int;
	idPAUSED_Alarm_Paused_2:int;
	idPAUSED_Manual_Paused_2:int;
	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	idPAUSED_Arbiter_2:int;
	let

		
	(idPAUSED_Alarm_Paused_2, idTHERAPY_PAUSED_2) 
	= PAUSED_Alarm_Paused_en(idPAUSED_Alarm_Paused_1, idTHERAPY_PAUSED_1, ALARM_IN_Highest_Level_Alarm, false);

	(idPAUSED_Manual_Paused_2, idTHERAPY_PAUSED_3) 
	= PAUSED_Manual_Paused_en(idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_2, OP_CMD_IN_Infusion_Inhibit, false);

	(idPAUSED_Arbiter_2, idTHERAPY_PAUSED_4, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2) 
	= PAUSED_Arbiter_en(idPAUSED_Arbiter_1, idTHERAPY_PAUSED_3, idPAUSED_Alarm_Paused_2, ALARM_IN_Highest_Level_Alarm, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, CONFIG_IN_Flow_Rate_KVO, false);


	(idTHERAPY_PAUSED, idPAUSED_Alarm_Paused, idPAUSED_Manual_Paused, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, idPAUSED_Arbiter) 
	= (idTHERAPY_PAUSED_4, idPAUSED_Alarm_Paused_2, idPAUSED_Manual_Paused_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idPAUSED_Arbiter_2);
	

	tel

	until true restart POINTTHERAPY_PAUSED



	state THERAPY_PAUSED_PARALLEL_IDL:

	 var 	idPAUSED_Alarm_Paused_2:int;
	idPAUSED_Manual_Paused_2:int;
	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	idPAUSED_Arbiter_2:int;
	let

		

		(idPAUSED_Alarm_Paused_2)
	= if not (idPAUSED_Alarm_Paused_1= 0 ) then PAUSED_Alarm_Paused_node(idPAUSED_Alarm_Paused_1, ALARM_IN_Highest_Level_Alarm, OP_CMD_IN_Infusion_Initiate)

		 else (idPAUSED_Alarm_Paused_1);

		

		

		(idPAUSED_Manual_Paused_2)
	= if not (idPAUSED_Manual_Paused_1= 0 ) then PAUSED_Manual_Paused_node(idPAUSED_Manual_Paused_1, OP_CMD_IN_Infusion_Inhibit, OP_CMD_IN_Infusion_Initiate)

		 else (idPAUSED_Manual_Paused_1);

		

		

		(idPAUSED_Arbiter_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2)
	= if not (idPAUSED_Arbiter_1= 0 ) then PAUSED_Arbiter_node(idPAUSED_Arbiter_1, idPAUSED_Alarm_Paused_2, ALARM_IN_Highest_Level_Alarm, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, CONFIG_IN_Flow_Rate_KVO)

		 else (idPAUSED_Arbiter_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1);

		

		

	(idTHERAPY_PAUSED, idPAUSED_Alarm_Paused, idPAUSED_Manual_Paused, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, idPAUSED_Arbiter) 
	= (idTHERAPY_PAUSED_1, idPAUSED_Alarm_Paused_2, idPAUSED_Manual_Paused_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idPAUSED_Arbiter_2);
	

	tel

	until true restart POINTTHERAPY_PAUSED



tel


--***************************************************State :ACTIVE_Arbiter Automaton***************************************************

node ACTIVE_Arbiter_node(idACTIVE_Arbiter_1:int;
	idACTIVE_PATIENT_1:int;
	CONFIG_IN_Flow_Rate_Patient_Bolus:int;
	IM_OUT_Current_System_Mode_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	idACTIVE_INTERMITTENT_1:int;
	CONFIG_IN_Flow_Rate_Intermittent_Bolus:int;
	CONFIG_IN_Flow_Rate_Basal:int;
	IM_OUT_Actual_Infusion_Duration_1:real)

returns (idACTIVE_Arbiter:int;
	IM_OUT_Current_System_Mode:int;
	IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Actual_Infusion_Duration:real);


let

	 automaton active_arbiter

	state POINTACTIVE_Arbiter:
	unless (idACTIVE_Arbiter_1=0) restart POINT__TO__INFUSIONMGR_INFUSIONMGRJUNCTION245_1



	unless (idACTIVE_Arbiter_1=199) restart ARBITER_PATIENT_BOLUS__TO__INFUSIONMGR_INFUSIONMGRJUNCTION247_1



	unless (idACTIVE_Arbiter_1=200) restart ARBITER_INTERMITTENT_BOLUS__TO__INFUSIONMGR_INFUSIONMGRJUNCTION247_1



	unless (idACTIVE_Arbiter_1=201) restart ARBITER_BASAL__TO__INFUSIONMGR_INFUSIONMGRJUNCTION247_1



	unless (idACTIVE_Arbiter_1=199) restart ARBITER_PATIENT_BOLUS_IDL

	unless (idACTIVE_Arbiter_1=200) restart ARBITER_INTERMITTENT_BOLUS_IDL

	unless (idACTIVE_Arbiter_1=201) restart ARBITER_BASAL_IDL

	let

		(idACTIVE_Arbiter, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Actual_Infusion_Duration) 
	= (idACTIVE_Arbiter_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Actual_Infusion_Duration_1);
	

	tel



	state POINT__TO__INFUSIONMGR_INFUSIONMGRJUNCTION245_1:

	 var 	idACTIVE_Arbiter_2, idACTIVE_Arbiter_3, idACTIVE_Arbiter_4:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3, IM_OUT_Current_System_Mode_4:int;
	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Flow_Rate_Commanded_4:int;
	let

		

-- transition trace :
	--POINT__To__Junction245_1, Junction245__To__Arbiter_Patient_Bolus_1
		(idACTIVE_Arbiter_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2) 
	= 
		 if (( (idACTIVE_PATIENT_1 = 206) )) then 
		Arbiter_Patient_Bolus_en(idACTIVE_Arbiter_1, CONFIG_IN_Flow_Rate_Patient_Bolus, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false)
		 else (idACTIVE_Arbiter_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);
		


-- transition trace :
	--POINT__To__Junction245_1, Junction245__To__Arbiter_Intermittent_Bolus_2
		(idACTIVE_Arbiter_3, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Current_System_Mode_3) 
	= 
		 if (( (idACTIVE_INTERMITTENT_1 = 210) )) then 
		Arbiter_Intermittent_Bolus_en(idACTIVE_Arbiter_1, CONFIG_IN_Flow_Rate_Intermittent_Bolus, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false)
		 else (idACTIVE_Arbiter_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);
		


-- transition trace :
	--POINT__To__Junction245_1, Junction245__To__Arbiter_Basal_3
		(idACTIVE_Arbiter_4, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Current_System_Mode_4) 
	= Arbiter_Basal_en(idACTIVE_Arbiter_1, CONFIG_IN_Flow_Rate_Basal, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false);
		

	(idACTIVE_Arbiter, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded) 
	= 
		 if (( (idACTIVE_PATIENT_1 = 206) )) then 
		(idACTIVE_Arbiter_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2)
		 else
		 if (( (idACTIVE_INTERMITTENT_1 = 210) )) then 
		(idACTIVE_Arbiter_3, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3)
		 else (idACTIVE_Arbiter_4, IM_OUT_Current_System_Mode_4, IM_OUT_Flow_Rate_Commanded_4);

	--add unused variables
	(IM_OUT_Actual_Infusion_Duration) 
	= (IM_OUT_Actual_Infusion_Duration_1);
	

	tel

	until true restart POINTACTIVE_Arbiter



	state ARBITER_PATIENT_BOLUS__TO__INFUSIONMGR_INFUSIONMGRJUNCTION247_1:

	 var 	idACTIVE_Arbiter_2, idACTIVE_Arbiter_3, idACTIVE_Arbiter_4, idACTIVE_Arbiter_5, idACTIVE_Arbiter_6, idACTIVE_Arbiter_7:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3, IM_OUT_Current_System_Mode_4:int;
	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Flow_Rate_Commanded_4:int;
	IM_OUT_Actual_Infusion_Duration_2, IM_OUT_Actual_Infusion_Duration_3, IM_OUT_Actual_Infusion_Duration_4:real;
	let

		





-- transition trace :
	--Arbiter_Patient_Bolus__To__Junction247_1, Junction247__To__Junction246_1, Junction246__To__Junction245_1, Junction245__To__Arbiter_Patient_Bolus_1
		-- condition Action : IM_OUT_Actual_Infusion_Duration++
		
		(IM_OUT_Actual_Infusion_Duration_2) 
	= InfusionMGR_InfusionMGRJunction247__To__InfusionMGR_InfusionMGRJunction246_1_Condition_Action(IM_OUT_Actual_Infusion_Duration_1);
		

		(idACTIVE_Arbiter_2) 
	= 
		 if (( (idACTIVE_PATIENT_1 = 206) )) then 
		Arbiter_Patient_Bolus_ex(idACTIVE_Arbiter_1, false)
		 else (idACTIVE_Arbiter_1);
		

		(idACTIVE_Arbiter_3, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2) 
	= 
		 if (( (idACTIVE_PATIENT_1 = 206) )) then 
		Arbiter_Patient_Bolus_en(idACTIVE_Arbiter_2, CONFIG_IN_Flow_Rate_Patient_Bolus, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false)
		 else (idACTIVE_Arbiter_2, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);
		


-- transition trace :
	--Arbiter_Patient_Bolus__To__Junction247_1, Junction247__To__Junction246_1, Junction246__To__Junction245_1, Junction245__To__Arbiter_Intermittent_Bolus_2
		-- condition Action : IM_OUT_Actual_Infusion_Duration++
		
		(IM_OUT_Actual_Infusion_Duration_3) 
	= InfusionMGR_InfusionMGRJunction247__To__InfusionMGR_InfusionMGRJunction246_1_Condition_Action(IM_OUT_Actual_Infusion_Duration_1);
		

		(idACTIVE_Arbiter_4) 
	= 
		 if (( (idACTIVE_INTERMITTENT_1 = 210) )) then 
		Arbiter_Patient_Bolus_ex(idACTIVE_Arbiter_1, false)
		 else (idACTIVE_Arbiter_1);
		

		(idACTIVE_Arbiter_5, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Current_System_Mode_3) 
	= 
		 if (( (idACTIVE_INTERMITTENT_1 = 210) )) then 
		Arbiter_Intermittent_Bolus_en(idACTIVE_Arbiter_4, CONFIG_IN_Flow_Rate_Intermittent_Bolus, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false)
		 else (idACTIVE_Arbiter_4, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);
		


-- transition trace :
	--Arbiter_Patient_Bolus__To__Junction247_1, Junction247__To__Junction246_1, Junction246__To__Junction245_1, Junction245__To__Arbiter_Basal_3
		-- condition Action : IM_OUT_Actual_Infusion_Duration++
		
		(IM_OUT_Actual_Infusion_Duration_4) 
	= InfusionMGR_InfusionMGRJunction247__To__InfusionMGR_InfusionMGRJunction246_1_Condition_Action(IM_OUT_Actual_Infusion_Duration_1);
		

		(idACTIVE_Arbiter_6) 
	= Arbiter_Patient_Bolus_ex(idACTIVE_Arbiter_1, false);
		

		(idACTIVE_Arbiter_7, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Current_System_Mode_4) 
	= Arbiter_Basal_en(idACTIVE_Arbiter_6, CONFIG_IN_Flow_Rate_Basal, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false);
		

	(idACTIVE_Arbiter, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Actual_Infusion_Duration) 
	= 
		 if (( (idACTIVE_PATIENT_1 = 206) )) then 
		(idACTIVE_Arbiter_3, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Actual_Infusion_Duration_2)
		 else
		 if (( (idACTIVE_INTERMITTENT_1 = 210) )) then 
		(idACTIVE_Arbiter_5, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Actual_Infusion_Duration_3)
		 else (idACTIVE_Arbiter_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Actual_Infusion_Duration_4);


	tel

	until true restart POINTACTIVE_Arbiter



	state ARBITER_INTERMITTENT_BOLUS__TO__INFUSIONMGR_INFUSIONMGRJUNCTION247_1:

	 var 	idACTIVE_Arbiter_2, idACTIVE_Arbiter_3, idACTIVE_Arbiter_4, idACTIVE_Arbiter_5, idACTIVE_Arbiter_6, idACTIVE_Arbiter_7:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3, IM_OUT_Current_System_Mode_4:int;
	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Flow_Rate_Commanded_4:int;
	IM_OUT_Actual_Infusion_Duration_2, IM_OUT_Actual_Infusion_Duration_3, IM_OUT_Actual_Infusion_Duration_4:real;
	let

		





-- transition trace :
	--Arbiter_Intermittent_Bolus__To__Junction247_1, Junction247__To__Junction246_1, Junction246__To__Junction245_1, Junction245__To__Arbiter_Patient_Bolus_1
		-- condition Action : IM_OUT_Actual_Infusion_Duration++
		
		(IM_OUT_Actual_Infusion_Duration_2) 
	= InfusionMGR_InfusionMGRJunction247__To__InfusionMGR_InfusionMGRJunction246_1_Condition_Action(IM_OUT_Actual_Infusion_Duration_1);
		

		(idACTIVE_Arbiter_2) 
	= 
		 if (( (idACTIVE_PATIENT_1 = 206) )) then 
		Arbiter_Intermittent_Bolus_ex(idACTIVE_Arbiter_1, false)
		 else (idACTIVE_Arbiter_1);
		

		(idACTIVE_Arbiter_3, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2) 
	= 
		 if (( (idACTIVE_PATIENT_1 = 206) )) then 
		Arbiter_Patient_Bolus_en(idACTIVE_Arbiter_2, CONFIG_IN_Flow_Rate_Patient_Bolus, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false)
		 else (idACTIVE_Arbiter_2, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);
		


-- transition trace :
	--Arbiter_Intermittent_Bolus__To__Junction247_1, Junction247__To__Junction246_1, Junction246__To__Junction245_1, Junction245__To__Arbiter_Intermittent_Bolus_2
		-- condition Action : IM_OUT_Actual_Infusion_Duration++
		
		(IM_OUT_Actual_Infusion_Duration_3) 
	= InfusionMGR_InfusionMGRJunction247__To__InfusionMGR_InfusionMGRJunction246_1_Condition_Action(IM_OUT_Actual_Infusion_Duration_1);
		

		(idACTIVE_Arbiter_4) 
	= 
		 if (( (idACTIVE_INTERMITTENT_1 = 210) )) then 
		Arbiter_Intermittent_Bolus_ex(idACTIVE_Arbiter_1, false)
		 else (idACTIVE_Arbiter_1);
		

		(idACTIVE_Arbiter_5, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Current_System_Mode_3) 
	= 
		 if (( (idACTIVE_INTERMITTENT_1 = 210) )) then 
		Arbiter_Intermittent_Bolus_en(idACTIVE_Arbiter_4, CONFIG_IN_Flow_Rate_Intermittent_Bolus, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false)
		 else (idACTIVE_Arbiter_4, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);
		


-- transition trace :
	--Arbiter_Intermittent_Bolus__To__Junction247_1, Junction247__To__Junction246_1, Junction246__To__Junction245_1, Junction245__To__Arbiter_Basal_3
		-- condition Action : IM_OUT_Actual_Infusion_Duration++
		
		(IM_OUT_Actual_Infusion_Duration_4) 
	= InfusionMGR_InfusionMGRJunction247__To__InfusionMGR_InfusionMGRJunction246_1_Condition_Action(IM_OUT_Actual_Infusion_Duration_1);
		

		(idACTIVE_Arbiter_6) 
	= Arbiter_Intermittent_Bolus_ex(idACTIVE_Arbiter_1, false);
		

		(idACTIVE_Arbiter_7, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Current_System_Mode_4) 
	= Arbiter_Basal_en(idACTIVE_Arbiter_6, CONFIG_IN_Flow_Rate_Basal, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false);
		

	(idACTIVE_Arbiter, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Actual_Infusion_Duration) 
	= 
		 if (( (idACTIVE_PATIENT_1 = 206) )) then 
		(idACTIVE_Arbiter_3, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Actual_Infusion_Duration_2)
		 else
		 if (( (idACTIVE_INTERMITTENT_1 = 210) )) then 
		(idACTIVE_Arbiter_5, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Actual_Infusion_Duration_3)
		 else (idACTIVE_Arbiter_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Actual_Infusion_Duration_4);


	tel

	until true restart POINTACTIVE_Arbiter



	state ARBITER_BASAL__TO__INFUSIONMGR_INFUSIONMGRJUNCTION247_1:

	 var 	idACTIVE_Arbiter_2, idACTIVE_Arbiter_3, idACTIVE_Arbiter_4, idACTIVE_Arbiter_5, idACTIVE_Arbiter_6, idACTIVE_Arbiter_7:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3, IM_OUT_Current_System_Mode_4:int;
	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Flow_Rate_Commanded_4:int;
	IM_OUT_Actual_Infusion_Duration_2, IM_OUT_Actual_Infusion_Duration_3, IM_OUT_Actual_Infusion_Duration_4:real;
	let

		





-- transition trace :
	--Arbiter_Basal__To__Junction247_1, Junction247__To__Junction246_1, Junction246__To__Junction245_1, Junction245__To__Arbiter_Patient_Bolus_1
		-- condition Action : IM_OUT_Actual_Infusion_Duration++
		
		(IM_OUT_Actual_Infusion_Duration_2) 
	= InfusionMGR_InfusionMGRJunction247__To__InfusionMGR_InfusionMGRJunction246_1_Condition_Action(IM_OUT_Actual_Infusion_Duration_1);
		

		(idACTIVE_Arbiter_2) 
	= 
		 if (( (idACTIVE_PATIENT_1 = 206) )) then 
		Arbiter_Basal_ex(idACTIVE_Arbiter_1, false)
		 else (idACTIVE_Arbiter_1);
		

		(idACTIVE_Arbiter_3, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2) 
	= 
		 if (( (idACTIVE_PATIENT_1 = 206) )) then 
		Arbiter_Patient_Bolus_en(idACTIVE_Arbiter_2, CONFIG_IN_Flow_Rate_Patient_Bolus, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false)
		 else (idACTIVE_Arbiter_2, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);
		


-- transition trace :
	--Arbiter_Basal__To__Junction247_1, Junction247__To__Junction246_1, Junction246__To__Junction245_1, Junction245__To__Arbiter_Intermittent_Bolus_2
		-- condition Action : IM_OUT_Actual_Infusion_Duration++
		
		(IM_OUT_Actual_Infusion_Duration_3) 
	= InfusionMGR_InfusionMGRJunction247__To__InfusionMGR_InfusionMGRJunction246_1_Condition_Action(IM_OUT_Actual_Infusion_Duration_1);
		

		(idACTIVE_Arbiter_4) 
	= 
		 if (( (idACTIVE_INTERMITTENT_1 = 210) )) then 
		Arbiter_Basal_ex(idACTIVE_Arbiter_1, false)
		 else (idACTIVE_Arbiter_1);
		

		(idACTIVE_Arbiter_5, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Current_System_Mode_3) 
	= 
		 if (( (idACTIVE_INTERMITTENT_1 = 210) )) then 
		Arbiter_Intermittent_Bolus_en(idACTIVE_Arbiter_4, CONFIG_IN_Flow_Rate_Intermittent_Bolus, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false)
		 else (idACTIVE_Arbiter_4, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);
		


-- transition trace :
	--Arbiter_Basal__To__Junction247_1, Junction247__To__Junction246_1, Junction246__To__Junction245_1, Junction245__To__Arbiter_Basal_3
		-- condition Action : IM_OUT_Actual_Infusion_Duration++
		
		(IM_OUT_Actual_Infusion_Duration_4) 
	= InfusionMGR_InfusionMGRJunction247__To__InfusionMGR_InfusionMGRJunction246_1_Condition_Action(IM_OUT_Actual_Infusion_Duration_1);
		

		(idACTIVE_Arbiter_6) 
	= Arbiter_Basal_ex(idACTIVE_Arbiter_1, false);
		

		(idACTIVE_Arbiter_7, IM_OUT_Flow_Rate_Commanded_4, IM_OUT_Current_System_Mode_4) 
	= Arbiter_Basal_en(idACTIVE_Arbiter_6, CONFIG_IN_Flow_Rate_Basal, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, false);
		

	(idACTIVE_Arbiter, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Actual_Infusion_Duration) 
	= 
		 if (( (idACTIVE_PATIENT_1 = 206) )) then 
		(idACTIVE_Arbiter_3, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Actual_Infusion_Duration_2)
		 else
		 if (( (idACTIVE_INTERMITTENT_1 = 210) )) then 
		(idACTIVE_Arbiter_5, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Actual_Infusion_Duration_3)
		 else (idACTIVE_Arbiter_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Actual_Infusion_Duration_4);


	tel

	until true restart POINTACTIVE_Arbiter



	state ARBITER_PATIENT_BOLUS_IDL:

	 var 	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	let

		
	(IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2) 
	= Arbiter_Patient_Bolus_du(CONFIG_IN_Flow_Rate_Patient_Bolus, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);

		


	(idACTIVE_Arbiter, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Actual_Infusion_Duration) 
	= (idACTIVE_Arbiter_1, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Actual_Infusion_Duration_1);
	

	tel

	until true restart POINTACTIVE_Arbiter



	state ARBITER_INTERMITTENT_BOLUS_IDL:

	 var 	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	let

		
	(IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2) 
	= Arbiter_Intermittent_Bolus_du(CONFIG_IN_Flow_Rate_Intermittent_Bolus, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);

		


	(idACTIVE_Arbiter, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Actual_Infusion_Duration) 
	= (idACTIVE_Arbiter_1, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Actual_Infusion_Duration_1);
	

	tel

	until true restart POINTACTIVE_Arbiter



	state ARBITER_BASAL_IDL:

	 var 	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	let

		
	(IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2) 
	= Arbiter_Basal_du(CONFIG_IN_Flow_Rate_Basal, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1);

		


	(idACTIVE_Arbiter, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Actual_Infusion_Duration) 
	= (idACTIVE_Arbiter_1, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Actual_Infusion_Duration_1);
	

	tel

	until true restart POINTACTIVE_Arbiter



tel


--***************************************************State :ACTIVE_INTERMITTENT Automaton***************************************************

node ACTIVE_INTERMITTENT_node(idACTIVE_INTERMITTENT_1:int;
	CONFIG_IN_Interval_Intermittent_Bolus:real;
	sbolusInter_timer_1:real;
	sbolus_req_1:bool;
	sbolus_timer_1:real;
	step_size:real;
	CONFIG_IN_Duration_Intermittent_Bolus:real;
	ALARM_IN_Highest_Level_Alarm:int)

returns (idACTIVE_INTERMITTENT:int;
	sbolusInter_timer:real;
	sbolus_req:bool;
	sbolus_timer:real);


let

	 automaton active_intermittent

	state POINTACTIVE_INTERMITTENT:
	unless (idACTIVE_INTERMITTENT_1=0) restart POINT__TO__INTERMITTENT_OFF_1



	unless (idACTIVE_INTERMITTENT_1=210) and (  sbolus_timer_1 >=Step_Scaling_Factor(CONFIG_IN_Duration_Intermittent_Bolus - 1.,step_size) or ALARM_IN_Highest_Level_Alarm=2 ) restart INTERMITTENT_ON__TO__INTERMITTENT_OFF_1



	unless (idACTIVE_INTERMITTENT_1=211) and (  sbolus_req_1  and ALARM_IN_Highest_Level_Alarm<2 ) restart INTERMITTENT_OFF__TO__INTERMITTENT_ON_1



	unless (idACTIVE_INTERMITTENT_1=210) restart INTERMITTENT_ON_IDL

	unless (idACTIVE_INTERMITTENT_1=211) restart INTERMITTENT_OFF_IDL

	let

		(idACTIVE_INTERMITTENT, sbolusInter_timer, sbolus_req, sbolus_timer) 
	= (idACTIVE_INTERMITTENT_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1);
	

	tel



	state POINT__TO__INTERMITTENT_OFF_1:

	 var 	idACTIVE_INTERMITTENT_2:int;
	sbolusInter_timer_2:real;
	sbolus_req_2:bool;
	sbolus_timer_2:real;
	let

		-- transition trace :
	--POINT__To__INTERMITTENT_OFF_1
		(idACTIVE_INTERMITTENT_2, sbolus_timer_2, sbolusInter_timer_2, sbolus_req_2) 
	= INTERMITTENT_OFF_en(idACTIVE_INTERMITTENT_1, sbolus_timer_1, sbolusInter_timer_1, CONFIG_IN_Interval_Intermittent_Bolus, step_size, sbolus_req_1, false);
		

	(idACTIVE_INTERMITTENT, sbolusInter_timer, sbolus_req, sbolus_timer) 
	=  (idACTIVE_INTERMITTENT_2, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_2);


	tel

	until true restart POINTACTIVE_INTERMITTENT



	state INTERMITTENT_ON__TO__INTERMITTENT_OFF_1:

	 var 	idACTIVE_INTERMITTENT_2, idACTIVE_INTERMITTENT_3:int;
	sbolusInter_timer_2:real;
	sbolus_req_2, sbolus_req_3:bool;
	sbolus_timer_2, sbolus_timer_3:real;
	let

		-- transition trace :
	--INTERMITTENT_ON__To__INTERMITTENT_OFF_1
		(sbolus_timer_2, sbolus_req_2, idACTIVE_INTERMITTENT_2) 
	= INTERMITTENT_ON_ex(sbolus_timer_1, sbolus_req_1, idACTIVE_INTERMITTENT_1, false);
		

		(idACTIVE_INTERMITTENT_3, sbolus_timer_3, sbolusInter_timer_2, sbolus_req_3) 
	= INTERMITTENT_OFF_en(idACTIVE_INTERMITTENT_2, sbolus_timer_2, sbolusInter_timer_1, CONFIG_IN_Interval_Intermittent_Bolus, step_size, sbolus_req_2, false);
		

	(idACTIVE_INTERMITTENT, sbolusInter_timer, sbolus_req, sbolus_timer) 
	=  (idACTIVE_INTERMITTENT_3, sbolusInter_timer_2, sbolus_req_3, sbolus_timer_3);


	tel

	until true restart POINTACTIVE_INTERMITTENT



	state INTERMITTENT_OFF__TO__INTERMITTENT_ON_1:

	 var 	idACTIVE_INTERMITTENT_2, idACTIVE_INTERMITTENT_3:int;
	let

		-- transition trace :
	--INTERMITTENT_OFF__To__INTERMITTENT_ON_1
		(idACTIVE_INTERMITTENT_2) 
	= INTERMITTENT_OFF_ex(idACTIVE_INTERMITTENT_1, false);
		

		(idACTIVE_INTERMITTENT_3) 
	= INTERMITTENT_ON_en(idACTIVE_INTERMITTENT_2, false);
		

	(idACTIVE_INTERMITTENT, sbolusInter_timer, sbolus_req, sbolus_timer) 
	=  (idACTIVE_INTERMITTENT_3, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1);


	tel

	until true restart POINTACTIVE_INTERMITTENT



	state INTERMITTENT_ON_IDL:

	 var 	sbolus_req_2:bool;
	sbolus_timer_2:real;
	let

		
	(sbolus_timer_2, sbolus_req_2) 
	= INTERMITTENT_ON_du(sbolus_timer_1, sbolus_req_1);

		


	(idACTIVE_INTERMITTENT, sbolusInter_timer, sbolus_req, sbolus_timer) 
	= (idACTIVE_INTERMITTENT_1, sbolusInter_timer_1, sbolus_req_2, sbolus_timer_2);
	

	tel

	until true restart POINTACTIVE_INTERMITTENT



	state INTERMITTENT_OFF_IDL:

	 var 	sbolusInter_timer_2:real;
	sbolus_req_2:bool;
	let

		
	(sbolusInter_timer_2, sbolus_req_2) 
	= INTERMITTENT_OFF_du(sbolusInter_timer_1, CONFIG_IN_Interval_Intermittent_Bolus, step_size, sbolus_req_1);

		


	(idACTIVE_INTERMITTENT, sbolusInter_timer, sbolus_req, sbolus_timer) 
	= (idACTIVE_INTERMITTENT_1, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_1);
	

	tel

	until true restart POINTACTIVE_INTERMITTENT



tel


--***************************************************State :ACTIVE_PATIENT Automaton***************************************************

node ACTIVE_PATIENT_node(idACTIVE_PATIENT_1:int;
	inPatientBolus_1:bool;
	IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_Lock_Timer_1:real;
	pbolus_timer_1:real;
	CONFIG_IN_Duration_Patient_Bolus:real;
	step_size:real;
	ALARM_IN_Highest_Level_Alarm:int;
	PATIENT_IN_Patient_Bolus_Request:bool;
	number_pbolus_1:int;
	CONFIG_IN_Max_Number_of_Patient_Bolus:int;
	CONFIG_IN_Lockout_Period_Patient_Bolus:real)

returns (idACTIVE_PATIENT:int;
	IM_OUT_Is_Locked_Out:bool;
	IM_OUT_Lock_Timer:real;
	inPatientBolus:bool;
	pbolus_timer:real;
	number_pbolus:int);


let

	 automaton active_patient

	state POINTACTIVE_PATIENT:
	unless (idACTIVE_PATIENT_1=0) and (  inPatientBolus_1  ) restart POINT__TO__PATIENT_LOCKOUT_1



	unless (idACTIVE_PATIENT_1=0) restart POINT__TO__PATIENT_OFF_2



	unless (idACTIVE_PATIENT_1=206) and (  pbolus_timer_1 >=Step_Scaling_Factor(CONFIG_IN_Duration_Patient_Bolus - 1.,step_size) or ALARM_IN_Highest_Level_Alarm=2 ) restart PATIENT_ON__TO__PATIENT_LOCKOUT_1



	unless (idACTIVE_PATIENT_1=207) and ( PATIENT_IN_Patient_Bolus_Request and ALARM_IN_Highest_Level_Alarm<2 and  number_pbolus_1 <CONFIG_IN_Max_Number_of_Patient_Bolus ) restart PATIENT_OFF__TO__PATIENT_ON_1



	unless (idACTIVE_PATIENT_1=208) and (  IM_OUT_Lock_Timer_1 >=Step_Scaling_Factor(CONFIG_IN_Lockout_Period_Patient_Bolus - 1.,step_size) ) restart PATIENT_LOCKOUT__TO__PATIENT_OFF_1



	unless (idACTIVE_PATIENT_1=206) restart PATIENT_ON_IDL

	unless (idACTIVE_PATIENT_1=207) restart PATIENT_OFF_IDL

	unless (idACTIVE_PATIENT_1=208) restart PATIENT_LOCKOUT_IDL

	let

		(idACTIVE_PATIENT, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, pbolus_timer, number_pbolus) 
	= (idACTIVE_PATIENT_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, pbolus_timer_1, number_pbolus_1);
	

	tel



	state POINT__TO__PATIENT_LOCKOUT_1:

	 var 	idACTIVE_PATIENT_2:int;
	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Lock_Timer_2:real;
	let

		-- transition trace :
	--POINT__To__PATIENT_LOCKOUT_1
		(idACTIVE_PATIENT_2, IM_OUT_Lock_Timer_2, IM_OUT_Is_Locked_Out_2) 
	= PATIENT_LOCKOUT_en(idACTIVE_PATIENT_1, IM_OUT_Lock_Timer_1, IM_OUT_Is_Locked_Out_1, false);
		

	(idACTIVE_PATIENT, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer) 
	=  (idACTIVE_PATIENT_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2);

	--add unused variables
	(inPatientBolus, number_pbolus, pbolus_timer) 
	= (inPatientBolus_1, number_pbolus_1, pbolus_timer_1);
	

	tel

	until true restart POINTACTIVE_PATIENT



	state POINT__TO__PATIENT_OFF_2:

	 var 	idACTIVE_PATIENT_2:int;
	IM_OUT_Is_Locked_Out_2:bool;
	inPatientBolus_2:bool;
	pbolus_timer_2:real;
	let

		-- transition trace :
	--POINT__To__PATIENT_OFF_2
		(idACTIVE_PATIENT_2, pbolus_timer_2, inPatientBolus_2, IM_OUT_Is_Locked_Out_2) 
	= PATIENT_OFF_en(idACTIVE_PATIENT_1, pbolus_timer_1, inPatientBolus_1, IM_OUT_Is_Locked_Out_1, false);
		

	(idACTIVE_PATIENT, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, pbolus_timer) 
	=  (idACTIVE_PATIENT_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_1, inPatientBolus_2, pbolus_timer_2);

	--add unused variables
	(number_pbolus) 
	= (number_pbolus_1);
	

	tel

	until true restart POINTACTIVE_PATIENT



	state PATIENT_ON__TO__PATIENT_LOCKOUT_1:

	 var 	idACTIVE_PATIENT_2, idACTIVE_PATIENT_3:int;
	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Lock_Timer_2, IM_OUT_Lock_Timer_3:real;
	pbolus_timer_2:real;
	let

		-- transition trace :
	--PATIENT_ON__To__PATIENT_LOCKOUT_1
		-- condition Action : IM_OUT_Lock_Timer=0;
		
		(IM_OUT_Lock_Timer_2) 
	= PATIENT_ON__To__PATIENT_LOCKOUT_1_Condition_Action(IM_OUT_Lock_Timer_1);
		

		(pbolus_timer_2, idACTIVE_PATIENT_2) 
	= PATIENT_ON_ex(pbolus_timer_1, idACTIVE_PATIENT_1, false);
		

		(idACTIVE_PATIENT_3, IM_OUT_Lock_Timer_3, IM_OUT_Is_Locked_Out_2) 
	= PATIENT_LOCKOUT_en(idACTIVE_PATIENT_2, IM_OUT_Lock_Timer_2, IM_OUT_Is_Locked_Out_1, false);
		

	(idACTIVE_PATIENT, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, pbolus_timer) 
	=  (idACTIVE_PATIENT_3, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_3, inPatientBolus_1, pbolus_timer_2);

	--add unused variables
	(number_pbolus) 
	= (number_pbolus_1);
	

	tel

	until true restart POINTACTIVE_PATIENT



	state PATIENT_OFF__TO__PATIENT_ON_1:

	 var 	idACTIVE_PATIENT_2, idACTIVE_PATIENT_3:int;
	IM_OUT_Is_Locked_Out_2:bool;
	inPatientBolus_2:bool;
	pbolus_timer_2:real;
	number_pbolus_2:int;
	let

		-- transition trace :
	--PATIENT_OFF__To__PATIENT_ON_1
		(idACTIVE_PATIENT_2) 
	= PATIENT_OFF_ex(idACTIVE_PATIENT_1, false);
		

		(idACTIVE_PATIENT_3, number_pbolus_2, inPatientBolus_2, pbolus_timer_2, IM_OUT_Is_Locked_Out_2) 
	= PATIENT_ON_en(idACTIVE_PATIENT_2, number_pbolus_1, inPatientBolus_1, pbolus_timer_1, IM_OUT_Is_Locked_Out_1, false);
		

	(idACTIVE_PATIENT, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, pbolus_timer, number_pbolus) 
	=  (idACTIVE_PATIENT_3, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_1, inPatientBolus_2, pbolus_timer_2, number_pbolus_2);


	tel

	until true restart POINTACTIVE_PATIENT



	state PATIENT_LOCKOUT__TO__PATIENT_OFF_1:

	 var 	idACTIVE_PATIENT_2, idACTIVE_PATIENT_3:int;
	IM_OUT_Is_Locked_Out_2:bool;
	inPatientBolus_2:bool;
	pbolus_timer_2:real;
	let

		-- transition trace :
	--PATIENT_LOCKOUT__To__PATIENT_OFF_1
		(idACTIVE_PATIENT_2) 
	= PATIENT_LOCKOUT_ex(idACTIVE_PATIENT_1, false);
		

		(idACTIVE_PATIENT_3, pbolus_timer_2, inPatientBolus_2, IM_OUT_Is_Locked_Out_2) 
	= PATIENT_OFF_en(idACTIVE_PATIENT_2, pbolus_timer_1, inPatientBolus_1, IM_OUT_Is_Locked_Out_1, false);
		

	(idACTIVE_PATIENT, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, pbolus_timer, number_pbolus) 
	=  (idACTIVE_PATIENT_3, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_1, inPatientBolus_2, pbolus_timer_2, number_pbolus_1);


	tel

	until true restart POINTACTIVE_PATIENT



	state PATIENT_ON_IDL:

	 var 	pbolus_timer_2:real;
	let

		
	(pbolus_timer_2) 
	= PATIENT_ON_du(pbolus_timer_1);

		


	(idACTIVE_PATIENT, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, pbolus_timer, number_pbolus) 
	= (idACTIVE_PATIENT_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, pbolus_timer_2, number_pbolus_1);
	

	tel

	until true restart POINTACTIVE_PATIENT



	state PATIENT_OFF_IDL:

	 	let

		

	(idACTIVE_PATIENT, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, pbolus_timer, number_pbolus) 
	= (idACTIVE_PATIENT_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, pbolus_timer_1, number_pbolus_1);
	

	tel

	until true restart POINTACTIVE_PATIENT



	state PATIENT_LOCKOUT_IDL:

	 var 	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Lock_Timer_2:real;
	let

		
	(IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2) 
	= PATIENT_LOCKOUT_du(IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1);

		


	(idACTIVE_PATIENT, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, pbolus_timer, number_pbolus) 
	= (idACTIVE_PATIENT_1, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_1, pbolus_timer_1, number_pbolus_1);
	

	tel

	until true restart POINTACTIVE_PATIENT



tel


--***************************************************State :ACTIVE_BASAL Automaton***************************************************

node ACTIVE_BASAL_node(idACTIVE_BASAL_1:int;
	IM_OUT_Actual_Infusion_Duration_1:real;
	CONFIG_IN_Infusion_Total_Duration:real;
	step_size:real;
	OP_CMD_IN_Infusion_Initiate:bool)

returns (idACTIVE_BASAL:int);


let

	 automaton active_basal

	state POINTACTIVE_BASAL:
	unless (idACTIVE_BASAL_1=0) restart POINT__TO__BASAL_ON_1



	unless (idACTIVE_BASAL_1=203) and (  IM_OUT_Actual_Infusion_Duration_1 >=Step_Scaling_Factor(CONFIG_IN_Infusion_Total_Duration - 1.,step_size) ) restart BASAL_ON__TO__BASAL_OFF_1



	unless (idACTIVE_BASAL_1=204) and ( OP_CMD_IN_Infusion_Initiate ) restart BASAL_OFF__TO__BASAL_ON_1



	unless (idACTIVE_BASAL_1=203) restart BASAL_ON_IDL

	unless (idACTIVE_BASAL_1=204) restart BASAL_OFF_IDL

	let

		(idACTIVE_BASAL) 
	= (idACTIVE_BASAL_1);
	

	tel



	state POINT__TO__BASAL_ON_1:

	 var 	idACTIVE_BASAL_2:int;
	let

		-- transition trace :
	--POINT__To__BASAL_ON_1
		(idACTIVE_BASAL_2) 
	= BASAL_ON_en(idACTIVE_BASAL_1, false);
		

	(idACTIVE_BASAL) 
	=  (idACTIVE_BASAL_2);


	tel

	until true restart POINTACTIVE_BASAL



	state BASAL_ON__TO__BASAL_OFF_1:

	 var 	idACTIVE_BASAL_2, idACTIVE_BASAL_3:int;
	let

		-- transition trace :
	--BASAL_ON__To__BASAL_OFF_1
		(idACTIVE_BASAL_2) 
	= BASAL_ON_ex(idACTIVE_BASAL_1, false);
		

		(idACTIVE_BASAL_3) 
	= BASAL_OFF_en(idACTIVE_BASAL_2, false);
		

	(idACTIVE_BASAL) 
	=  (idACTIVE_BASAL_3);


	tel

	until true restart POINTACTIVE_BASAL



	state BASAL_OFF__TO__BASAL_ON_1:

	 var 	idACTIVE_BASAL_2, idACTIVE_BASAL_3:int;
	let

		-- transition trace :
	--BASAL_OFF__To__BASAL_ON_1
		(idACTIVE_BASAL_2) 
	= BASAL_OFF_ex(idACTIVE_BASAL_1, false);
		

		(idACTIVE_BASAL_3) 
	= BASAL_ON_en(idACTIVE_BASAL_2, false);
		

	(idACTIVE_BASAL) 
	=  (idACTIVE_BASAL_3);


	tel

	until true restart POINTACTIVE_BASAL



	state BASAL_ON_IDL:

	 	let

		

	(idACTIVE_BASAL) 
	= (idACTIVE_BASAL_1);
	

	tel

	until true restart POINTACTIVE_BASAL



	state BASAL_OFF_IDL:

	 	let

		

	(idACTIVE_BASAL) 
	= (idACTIVE_BASAL_1);
	

	tel

	until true restart POINTACTIVE_BASAL



tel


--***************************************************State :THERAPY_ACTIVE Automaton***************************************************

node THERAPY_ACTIVE_node(idTHERAPY_ACTIVE_1:int;
	idACTIVE_BASAL_1:int;
	IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_Lock_Timer_1:real;
	idACTIVE_PATIENT_1:int;
	inPatientBolus_1:bool;
	number_pbolus_1:int;
	pbolus_timer_1:real;
	CONFIG_IN_Interval_Intermittent_Bolus:real;
	idACTIVE_INTERMITTENT_1:int;
	sbolusInter_timer_1:real;
	sbolus_req_1:bool;
	sbolus_timer_1:real;
	step_size:real;
	CONFIG_IN_Flow_Rate_Basal:int;
	CONFIG_IN_Flow_Rate_Intermittent_Bolus:int;
	CONFIG_IN_Flow_Rate_Patient_Bolus:int;
	IM_OUT_Current_System_Mode_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	idACTIVE_Arbiter_1:int;
	CONFIG_IN_Infusion_Total_Duration:real;
	IM_OUT_Actual_Infusion_Duration_1:real;
	OP_CMD_IN_Infusion_Initiate:bool;
	ALARM_IN_Highest_Level_Alarm:int;
	CONFIG_IN_Duration_Patient_Bolus:real;
	CONFIG_IN_Lockout_Period_Patient_Bolus:real;
	CONFIG_IN_Max_Number_of_Patient_Bolus:int;
	PATIENT_IN_Patient_Bolus_Request:bool;
	CONFIG_IN_Duration_Intermittent_Bolus:real)

returns (idTHERAPY_ACTIVE:int;
	idACTIVE_BASAL:int;
	IM_OUT_Is_Locked_Out:bool;
	IM_OUT_Lock_Timer:real;
	idACTIVE_PATIENT:int;
	inPatientBolus:bool;
	number_pbolus:int;
	pbolus_timer:real;
	idACTIVE_INTERMITTENT:int;
	sbolusInter_timer:real;
	sbolus_req:bool;
	sbolus_timer:real;
	IM_OUT_Current_System_Mode:int;
	IM_OUT_Flow_Rate_Commanded:int;
	idACTIVE_Arbiter:int;
	IM_OUT_Actual_Infusion_Duration:real);


let

	 automaton therapy_active

	state POINTTHERAPY_ACTIVE:
	unless (idTHERAPY_ACTIVE_1=0) restart THERAPY_ACTIVE_PARALLEL_ENTRY
	unless true  restart THERAPY_ACTIVE_PARALLEL_IDL

	let

		(idTHERAPY_ACTIVE, idACTIVE_BASAL, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, idACTIVE_PATIENT, inPatientBolus, number_pbolus, pbolus_timer, idACTIVE_INTERMITTENT, sbolusInter_timer, sbolus_req, sbolus_timer, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, idACTIVE_Arbiter, IM_OUT_Actual_Infusion_Duration) 
	= (idTHERAPY_ACTIVE_1, idACTIVE_BASAL_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, idACTIVE_PATIENT_1, inPatientBolus_1, number_pbolus_1, pbolus_timer_1, idACTIVE_INTERMITTENT_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idACTIVE_Arbiter_1, IM_OUT_Actual_Infusion_Duration_1);
	

	tel



	state THERAPY_ACTIVE_PARALLEL_ENTRY:

	 var 	idTHERAPY_ACTIVE_2, idTHERAPY_ACTIVE_3, idTHERAPY_ACTIVE_4, idTHERAPY_ACTIVE_5:int;
	idACTIVE_BASAL_2:int;
	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Lock_Timer_2:real;
	idACTIVE_PATIENT_2:int;
	inPatientBolus_2:bool;
	number_pbolus_2:int;
	pbolus_timer_2:real;
	idACTIVE_INTERMITTENT_2:int;
	sbolusInter_timer_2:real;
	sbolus_req_2:bool;
	sbolus_timer_2:real;
	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	idACTIVE_Arbiter_2:int;
	let

		
	(idACTIVE_BASAL_2, idTHERAPY_ACTIVE_2) 
	= ACTIVE_BASAL_en(idACTIVE_BASAL_1, idTHERAPY_ACTIVE_1, false);

	(idACTIVE_PATIENT_2, idTHERAPY_ACTIVE_3, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, pbolus_timer_2, number_pbolus_2) 
	= ACTIVE_PATIENT_en(idACTIVE_PATIENT_1, idTHERAPY_ACTIVE_2, inPatientBolus_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, pbolus_timer_1, number_pbolus_1, false);

	(idACTIVE_INTERMITTENT_2, idTHERAPY_ACTIVE_4, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_2) 
	= ACTIVE_INTERMITTENT_en(idACTIVE_INTERMITTENT_1, idTHERAPY_ACTIVE_3, sbolusInter_timer_1, CONFIG_IN_Interval_Intermittent_Bolus, sbolus_req_1, sbolus_timer_1, step_size, false);

	(idACTIVE_Arbiter_2, idTHERAPY_ACTIVE_5, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2) 
	= ACTIVE_Arbiter_en(idACTIVE_Arbiter_1, idTHERAPY_ACTIVE_4, idACTIVE_PATIENT_2, CONFIG_IN_Flow_Rate_Patient_Bolus, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idACTIVE_INTERMITTENT_2, CONFIG_IN_Flow_Rate_Intermittent_Bolus, CONFIG_IN_Flow_Rate_Basal, false);


	(idTHERAPY_ACTIVE, idACTIVE_BASAL, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, idACTIVE_PATIENT, inPatientBolus, number_pbolus, pbolus_timer, idACTIVE_INTERMITTENT, sbolusInter_timer, sbolus_req, sbolus_timer, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, idACTIVE_Arbiter) 
	= (idTHERAPY_ACTIVE_5, idACTIVE_BASAL_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, idACTIVE_PATIENT_2, inPatientBolus_2, number_pbolus_2, pbolus_timer_2, idACTIVE_INTERMITTENT_2, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idACTIVE_Arbiter_2);
	
	--add unused variables
	(IM_OUT_Actual_Infusion_Duration) 
	= (IM_OUT_Actual_Infusion_Duration_1);
	

	tel

	until true restart POINTTHERAPY_ACTIVE



	state THERAPY_ACTIVE_PARALLEL_IDL:

	 var 	idACTIVE_BASAL_2:int;
	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Lock_Timer_2:real;
	idACTIVE_PATIENT_2:int;
	inPatientBolus_2:bool;
	number_pbolus_2:int;
	pbolus_timer_2:real;
	idACTIVE_INTERMITTENT_2:int;
	sbolusInter_timer_2, sbolusInter_timer_3:real;
	sbolus_req_2:bool;
	sbolus_timer_2:real;
	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	idACTIVE_Arbiter_2:int;
	IM_OUT_Actual_Infusion_Duration_2:real;
	let

		

		(idACTIVE_BASAL_2)
	= if not (idACTIVE_BASAL_1= 0 ) then ACTIVE_BASAL_node(idACTIVE_BASAL_1, IM_OUT_Actual_Infusion_Duration_1, CONFIG_IN_Infusion_Total_Duration, step_size, OP_CMD_IN_Infusion_Initiate)

		 else (idACTIVE_BASAL_1);

		

		

		(idACTIVE_PATIENT_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, pbolus_timer_2, number_pbolus_2)
	= if not (idACTIVE_PATIENT_1= 0 ) then ACTIVE_PATIENT_node(idACTIVE_PATIENT_1, inPatientBolus_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, pbolus_timer_1, CONFIG_IN_Duration_Patient_Bolus, step_size, ALARM_IN_Highest_Level_Alarm, PATIENT_IN_Patient_Bolus_Request, number_pbolus_1, CONFIG_IN_Max_Number_of_Patient_Bolus, CONFIG_IN_Lockout_Period_Patient_Bolus)

		 else (idACTIVE_PATIENT_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, pbolus_timer_1, number_pbolus_1);

		

		
	(sbolusInter_timer_2) 
	= if not (idACTIVE_INTERMITTENT_1= 0 ) then ACTIVE_INTERMITTENT_du(sbolusInter_timer_1)

		 else (sbolusInter_timer_1);

		


		(idACTIVE_INTERMITTENT_2, sbolusInter_timer_3, sbolus_req_2, sbolus_timer_2)
	= if not (idACTIVE_INTERMITTENT_1= 0 ) then ACTIVE_INTERMITTENT_node(idACTIVE_INTERMITTENT_1, CONFIG_IN_Interval_Intermittent_Bolus, sbolusInter_timer_2, sbolus_req_1, sbolus_timer_1, step_size, CONFIG_IN_Duration_Intermittent_Bolus, ALARM_IN_Highest_Level_Alarm)

		 else (idACTIVE_INTERMITTENT_1, sbolusInter_timer_2, sbolus_req_1, sbolus_timer_1);

		

		

		(idACTIVE_Arbiter_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Actual_Infusion_Duration_2)
	= if not (idACTIVE_Arbiter_1= 0 ) then ACTIVE_Arbiter_node(idACTIVE_Arbiter_1, idACTIVE_PATIENT_2, CONFIG_IN_Flow_Rate_Patient_Bolus, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idACTIVE_INTERMITTENT_2, CONFIG_IN_Flow_Rate_Intermittent_Bolus, CONFIG_IN_Flow_Rate_Basal, IM_OUT_Actual_Infusion_Duration_1)

		 else (idACTIVE_Arbiter_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Actual_Infusion_Duration_1);

		

		

	(idTHERAPY_ACTIVE, idACTIVE_BASAL, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, idACTIVE_PATIENT, inPatientBolus, number_pbolus, pbolus_timer, idACTIVE_INTERMITTENT, sbolusInter_timer, sbolus_req, sbolus_timer, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, idACTIVE_Arbiter, IM_OUT_Actual_Infusion_Duration) 
	= (idTHERAPY_ACTIVE_1, idACTIVE_BASAL_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, idACTIVE_PATIENT_2, inPatientBolus_2, number_pbolus_2, pbolus_timer_2, idACTIVE_INTERMITTENT_2, sbolusInter_timer_3, sbolus_req_2, sbolus_timer_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idACTIVE_Arbiter_2, IM_OUT_Actual_Infusion_Duration_2);
	

	tel

	until true restart POINTTHERAPY_ACTIVE



tel


--***************************************************State :Infusion_Manager_THERAPY Automaton***************************************************

node Infusion_Manager_THERAPY_node(idInfusion_Manager_THERAPY_1:int;
	OP_CMD_IN_Infusion_Inhibit:bool;
	ALARM_IN_Highest_Level_Alarm:int;
	CONFIG_IN_Flow_Rate_KVO:int;
	IM_OUT_Current_System_Mode_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	idPAUSED_Alarm_Paused_1:int;
	idPAUSED_Arbiter_1:int;
	idPAUSED_Manual_Paused_1:int;
	idTHERAPY_PAUSED_1:int;
	CONFIG_IN_Flow_Rate_Basal:int;
	CONFIG_IN_Flow_Rate_Intermittent_Bolus:int;
	CONFIG_IN_Flow_Rate_Patient_Bolus:int;
	CONFIG_IN_Interval_Intermittent_Bolus:real;
	IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_Lock_Timer_1:real;
	idACTIVE_Arbiter_1:int;
	idACTIVE_BASAL_1:int;
	idACTIVE_INTERMITTENT_1:int;
	idACTIVE_PATIENT_1:int;
	idTHERAPY_ACTIVE_1:int;
	inPatientBolus_1:bool;
	number_pbolus_1:int;
	pbolus_timer_1:real;
	sbolusInter_timer_1:real;
	sbolus_req_1:bool;
	sbolus_timer_1:real;
	step_size:real;
	OP_CMD_IN_Infusion_Initiate:bool;
	CONFIG_IN_Infusion_Total_Duration:real;
	IM_OUT_Actual_Infusion_Duration_1:real;
	CONFIG_IN_Duration_Patient_Bolus:real;
	CONFIG_IN_Lockout_Period_Patient_Bolus:real;
	CONFIG_IN_Max_Number_of_Patient_Bolus:int;
	PATIENT_IN_Patient_Bolus_Request:bool;
	CONFIG_IN_Duration_Intermittent_Bolus:real)

returns (idInfusion_Manager_THERAPY:int;
	IM_OUT_Current_System_Mode:int;
	IM_OUT_Flow_Rate_Commanded:int;
	idPAUSED_Alarm_Paused:int;
	idPAUSED_Arbiter:int;
	idPAUSED_Manual_Paused:int;
	idTHERAPY_PAUSED:int;
	IM_OUT_Is_Locked_Out:bool;
	IM_OUT_Lock_Timer:real;
	idACTIVE_Arbiter:int;
	idACTIVE_BASAL:int;
	idACTIVE_INTERMITTENT:int;
	idACTIVE_PATIENT:int;
	idTHERAPY_ACTIVE:int;
	inPatientBolus:bool;
	number_pbolus:int;
	pbolus_timer:real;
	sbolusInter_timer:real;
	sbolus_req:bool;
	sbolus_timer:real;
	IM_OUT_Actual_Infusion_Duration:real);


let

	 automaton infusion_manager_therapy

	state POINTInfusion_Manager_THERAPY:
	unless (idInfusion_Manager_THERAPY_1=0) and ( OP_CMD_IN_Infusion_Inhibit or ALARM_IN_Highest_Level_Alarm>=3 ) restart POINT__TO__THERAPY_PAUSED_1



	unless (idInfusion_Manager_THERAPY_1=0) restart POINT__TO__THERAPY_ACTIVE_2



	unless (idInfusion_Manager_THERAPY_1=197) and ( OP_CMD_IN_Infusion_Inhibit or ALARM_IN_Highest_Level_Alarm>=3 ) restart THERAPY_ACTIVE__TO__THERAPY_PAUSED_1



	unless (idInfusion_Manager_THERAPY_1=214) and ( OP_CMD_IN_Infusion_Initiate and ALARM_IN_Highest_Level_Alarm<3 and not OP_CMD_IN_Infusion_Inhibit ) restart THERAPY_PAUSED__TO__THERAPY_ACTIVE_1



	unless (idInfusion_Manager_THERAPY_1=197) restart THERAPY_ACTIVE_IDL

	unless (idInfusion_Manager_THERAPY_1=214) restart THERAPY_PAUSED_IDL

	let

		(idInfusion_Manager_THERAPY, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_PAUSED, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idTHERAPY_ACTIVE, inPatientBolus, number_pbolus, pbolus_timer, sbolusInter_timer, sbolus_req, sbolus_timer, IM_OUT_Actual_Infusion_Duration) 
	= (idInfusion_Manager_THERAPY_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idTHERAPY_ACTIVE_1, inPatientBolus_1, number_pbolus_1, pbolus_timer_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1, IM_OUT_Actual_Infusion_Duration_1);
	

	tel



	state POINT__TO__THERAPY_PAUSED_1:

	 var 	idInfusion_Manager_THERAPY_2:int;
	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	idPAUSED_Alarm_Paused_2:int;
	idPAUSED_Arbiter_2:int;
	idPAUSED_Manual_Paused_2:int;
	idTHERAPY_PAUSED_2:int;
	let

		-- transition trace :
	--POINT__To__THERAPY_PAUSED_1
		(idTHERAPY_PAUSED_2, idInfusion_Manager_THERAPY_2, idPAUSED_Alarm_Paused_2, idPAUSED_Manual_Paused_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idPAUSED_Arbiter_2) 
	= THERAPY_PAUSED_en(idTHERAPY_PAUSED_1, idInfusion_Manager_THERAPY_1, ALARM_IN_Highest_Level_Alarm, idPAUSED_Alarm_Paused_1, OP_CMD_IN_Infusion_Inhibit, idPAUSED_Manual_Paused_1, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idPAUSED_Arbiter_1, false);
		

	(idInfusion_Manager_THERAPY, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_PAUSED) 
	=  (idInfusion_Manager_THERAPY_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_PAUSED_2);

	--add unused variables
	(IM_OUT_Actual_Infusion_Duration, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idTHERAPY_ACTIVE, inPatientBolus, number_pbolus, pbolus_timer, sbolusInter_timer, sbolus_req, sbolus_timer) 
	= (IM_OUT_Actual_Infusion_Duration_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idTHERAPY_ACTIVE_1, inPatientBolus_1, number_pbolus_1, pbolus_timer_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1);
	

	tel

	until true restart POINTInfusion_Manager_THERAPY



	state POINT__TO__THERAPY_ACTIVE_2:

	 var 	idInfusion_Manager_THERAPY_2:int;
	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Lock_Timer_2:real;
	idACTIVE_Arbiter_2:int;
	idACTIVE_BASAL_2:int;
	idACTIVE_INTERMITTENT_2:int;
	idACTIVE_PATIENT_2:int;
	idTHERAPY_ACTIVE_2:int;
	inPatientBolus_2:bool;
	number_pbolus_2:int;
	pbolus_timer_2:real;
	sbolusInter_timer_2:real;
	sbolus_req_2:bool;
	sbolus_timer_2:real;
	let

		-- transition trace :
	--POINT__To__THERAPY_ACTIVE_2
		(idTHERAPY_ACTIVE_2, idInfusion_Manager_THERAPY_2, idACTIVE_BASAL_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, idACTIVE_PATIENT_2, inPatientBolus_2, number_pbolus_2, pbolus_timer_2, idACTIVE_INTERMITTENT_2, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idACTIVE_Arbiter_2) 
	= THERAPY_ACTIVE_en(idTHERAPY_ACTIVE_1, idInfusion_Manager_THERAPY_1, idACTIVE_BASAL_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, idACTIVE_PATIENT_1, inPatientBolus_1, number_pbolus_1, pbolus_timer_1, CONFIG_IN_Interval_Intermittent_Bolus, idACTIVE_INTERMITTENT_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1, step_size, CONFIG_IN_Flow_Rate_Basal, CONFIG_IN_Flow_Rate_Intermittent_Bolus, CONFIG_IN_Flow_Rate_Patient_Bolus, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idACTIVE_Arbiter_1, false);
		

	(idInfusion_Manager_THERAPY, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_PAUSED, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idTHERAPY_ACTIVE, inPatientBolus, number_pbolus, pbolus_timer, sbolusInter_timer, sbolus_req, sbolus_timer) 
	=  (idInfusion_Manager_THERAPY_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_1, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, idACTIVE_Arbiter_2, idACTIVE_BASAL_2, idACTIVE_INTERMITTENT_2, idACTIVE_PATIENT_2, idTHERAPY_ACTIVE_2, inPatientBolus_2, number_pbolus_2, pbolus_timer_2, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_2);

	--add unused variables
	(IM_OUT_Actual_Infusion_Duration) 
	= (IM_OUT_Actual_Infusion_Duration_1);
	

	tel

	until true restart POINTInfusion_Manager_THERAPY



	state THERAPY_ACTIVE__TO__THERAPY_PAUSED_1:

	 var 	idInfusion_Manager_THERAPY_2, idInfusion_Manager_THERAPY_3:int;
	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	idPAUSED_Alarm_Paused_2:int;
	idPAUSED_Arbiter_2:int;
	idPAUSED_Manual_Paused_2:int;
	idTHERAPY_PAUSED_2:int;
	idACTIVE_Arbiter_2:int;
	idACTIVE_BASAL_2:int;
	idACTIVE_INTERMITTENT_2:int;
	idACTIVE_PATIENT_2:int;
	idTHERAPY_ACTIVE_2:int;
	pbolus_timer_2:real;
	sbolus_req_2:bool;
	sbolus_timer_2:real;
	let

		-- transition trace :
	--THERAPY_ACTIVE__To__THERAPY_PAUSED_1
		(idACTIVE_Arbiter_2, idTHERAPY_ACTIVE_2, idACTIVE_INTERMITTENT_2, sbolus_req_2, sbolus_timer_2, idACTIVE_PATIENT_2, pbolus_timer_2, idACTIVE_BASAL_2, idInfusion_Manager_THERAPY_2) 
	= THERAPY_ACTIVE_ex(idACTIVE_Arbiter_1, idTHERAPY_ACTIVE_1, idACTIVE_INTERMITTENT_1, sbolus_req_1, sbolus_timer_1, idACTIVE_PATIENT_1, pbolus_timer_1, idACTIVE_BASAL_1, idInfusion_Manager_THERAPY_1, false);
		

		(idTHERAPY_PAUSED_2, idInfusion_Manager_THERAPY_3, idPAUSED_Alarm_Paused_2, idPAUSED_Manual_Paused_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idPAUSED_Arbiter_2) 
	= THERAPY_PAUSED_en(idTHERAPY_PAUSED_1, idInfusion_Manager_THERAPY_2, ALARM_IN_Highest_Level_Alarm, idPAUSED_Alarm_Paused_1, OP_CMD_IN_Infusion_Inhibit, idPAUSED_Manual_Paused_1, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idPAUSED_Arbiter_1, false);
		

	(idInfusion_Manager_THERAPY, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_PAUSED, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idTHERAPY_ACTIVE, inPatientBolus, number_pbolus, pbolus_timer, sbolusInter_timer, sbolus_req, sbolus_timer) 
	=  (idInfusion_Manager_THERAPY_3, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_PAUSED_2, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, idACTIVE_Arbiter_2, idACTIVE_BASAL_2, idACTIVE_INTERMITTENT_2, idACTIVE_PATIENT_2, idTHERAPY_ACTIVE_2, inPatientBolus_1, number_pbolus_1, pbolus_timer_2, sbolusInter_timer_1, sbolus_req_2, sbolus_timer_2);

	--add unused variables
	(IM_OUT_Actual_Infusion_Duration) 
	= (IM_OUT_Actual_Infusion_Duration_1);
	

	tel

	until true restart POINTInfusion_Manager_THERAPY



	state THERAPY_PAUSED__TO__THERAPY_ACTIVE_1:

	 var 	idInfusion_Manager_THERAPY_2, idInfusion_Manager_THERAPY_3:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3:int;
	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3:int;
	idPAUSED_Alarm_Paused_2:int;
	idPAUSED_Arbiter_2:int;
	idPAUSED_Manual_Paused_2:int;
	idTHERAPY_PAUSED_2:int;
	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Lock_Timer_2:real;
	idACTIVE_Arbiter_2:int;
	idACTIVE_BASAL_2:int;
	idACTIVE_INTERMITTENT_2:int;
	idACTIVE_PATIENT_2:int;
	idTHERAPY_ACTIVE_2:int;
	inPatientBolus_2:bool;
	number_pbolus_2:int;
	pbolus_timer_2:real;
	sbolusInter_timer_2:real;
	sbolus_req_2:bool;
	sbolus_timer_2:real;
	let

		-- transition trace :
	--THERAPY_PAUSED__To__THERAPY_ACTIVE_1
		(IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Current_System_Mode_2, idPAUSED_Arbiter_2, idTHERAPY_PAUSED_2, idPAUSED_Manual_Paused_2, idPAUSED_Alarm_Paused_2, idInfusion_Manager_THERAPY_2) 
	= THERAPY_PAUSED_ex(IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Current_System_Mode_1, idPAUSED_Arbiter_1, CONFIG_IN_Flow_Rate_KVO, idTHERAPY_PAUSED_1, idPAUSED_Manual_Paused_1, idPAUSED_Alarm_Paused_1, idInfusion_Manager_THERAPY_1, false);
		

		(idTHERAPY_ACTIVE_2, idInfusion_Manager_THERAPY_3, idACTIVE_BASAL_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, idACTIVE_PATIENT_2, inPatientBolus_2, number_pbolus_2, pbolus_timer_2, idACTIVE_INTERMITTENT_2, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_2, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, idACTIVE_Arbiter_2) 
	= THERAPY_ACTIVE_en(idTHERAPY_ACTIVE_1, idInfusion_Manager_THERAPY_2, idACTIVE_BASAL_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, idACTIVE_PATIENT_1, inPatientBolus_1, number_pbolus_1, pbolus_timer_1, CONFIG_IN_Interval_Intermittent_Bolus, idACTIVE_INTERMITTENT_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1, step_size, CONFIG_IN_Flow_Rate_Basal, CONFIG_IN_Flow_Rate_Intermittent_Bolus, CONFIG_IN_Flow_Rate_Patient_Bolus, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idACTIVE_Arbiter_1, false);
		

	(idInfusion_Manager_THERAPY, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_PAUSED, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idTHERAPY_ACTIVE, inPatientBolus, number_pbolus, pbolus_timer, sbolusInter_timer, sbolus_req, sbolus_timer) 
	=  (idInfusion_Manager_THERAPY_3, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_PAUSED_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, idACTIVE_Arbiter_2, idACTIVE_BASAL_2, idACTIVE_INTERMITTENT_2, idACTIVE_PATIENT_2, idTHERAPY_ACTIVE_2, inPatientBolus_2, number_pbolus_2, pbolus_timer_2, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_2);

	--add unused variables
	(IM_OUT_Actual_Infusion_Duration) 
	= (IM_OUT_Actual_Infusion_Duration_1);
	

	tel

	until true restart POINTInfusion_Manager_THERAPY



	state THERAPY_ACTIVE_IDL:

	 var 	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Lock_Timer_2:real;
	idACTIVE_Arbiter_2:int;
	idACTIVE_BASAL_2:int;
	idACTIVE_INTERMITTENT_2:int;
	idACTIVE_PATIENT_2:int;
	inPatientBolus_2:bool;
	number_pbolus_2:int;
	pbolus_timer_2:real;
	sbolusInter_timer_2, sbolusInter_timer_3:real;
	sbolus_req_2:bool;
	sbolus_timer_2:real;
	IM_OUT_Actual_Infusion_Duration_2:real;
	let

		

		(idACTIVE_BASAL_2)
	= if not (idACTIVE_BASAL_1= 0 ) then ACTIVE_BASAL_node(idACTIVE_BASAL_1, IM_OUT_Actual_Infusion_Duration_1, CONFIG_IN_Infusion_Total_Duration, step_size, OP_CMD_IN_Infusion_Initiate)

		 else (idACTIVE_BASAL_1);

		

		

		(idACTIVE_PATIENT_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, pbolus_timer_2, number_pbolus_2)
	= if not (idACTIVE_PATIENT_1= 0 ) then ACTIVE_PATIENT_node(idACTIVE_PATIENT_1, inPatientBolus_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, pbolus_timer_1, CONFIG_IN_Duration_Patient_Bolus, step_size, ALARM_IN_Highest_Level_Alarm, PATIENT_IN_Patient_Bolus_Request, number_pbolus_1, CONFIG_IN_Max_Number_of_Patient_Bolus, CONFIG_IN_Lockout_Period_Patient_Bolus)

		 else (idACTIVE_PATIENT_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, pbolus_timer_1, number_pbolus_1);

		

		
	(sbolusInter_timer_2) 
	= if not (idACTIVE_INTERMITTENT_1= 0 ) then ACTIVE_INTERMITTENT_du(sbolusInter_timer_1)

		 else (sbolusInter_timer_1);

		


		(idACTIVE_INTERMITTENT_2, sbolusInter_timer_3, sbolus_req_2, sbolus_timer_2)
	= if not (idACTIVE_INTERMITTENT_1= 0 ) then ACTIVE_INTERMITTENT_node(idACTIVE_INTERMITTENT_1, CONFIG_IN_Interval_Intermittent_Bolus, sbolusInter_timer_2, sbolus_req_1, sbolus_timer_1, step_size, CONFIG_IN_Duration_Intermittent_Bolus, ALARM_IN_Highest_Level_Alarm)

		 else (idACTIVE_INTERMITTENT_1, sbolusInter_timer_2, sbolus_req_1, sbolus_timer_1);

		

		

		(idACTIVE_Arbiter_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Actual_Infusion_Duration_2)
	= if not (idACTIVE_Arbiter_1= 0 ) then ACTIVE_Arbiter_node(idACTIVE_Arbiter_1, idACTIVE_PATIENT_2, CONFIG_IN_Flow_Rate_Patient_Bolus, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idACTIVE_INTERMITTENT_2, CONFIG_IN_Flow_Rate_Intermittent_Bolus, CONFIG_IN_Flow_Rate_Basal, IM_OUT_Actual_Infusion_Duration_1)

		 else (idACTIVE_Arbiter_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Actual_Infusion_Duration_1);

		

		

	(idInfusion_Manager_THERAPY, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_PAUSED, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idTHERAPY_ACTIVE, inPatientBolus, number_pbolus, pbolus_timer, sbolusInter_timer, sbolus_req, sbolus_timer, IM_OUT_Actual_Infusion_Duration) 
	= (idInfusion_Manager_THERAPY_1, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_1, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, idACTIVE_Arbiter_2, idACTIVE_BASAL_2, idACTIVE_INTERMITTENT_2, idACTIVE_PATIENT_2, idTHERAPY_ACTIVE_1, inPatientBolus_2, number_pbolus_2, pbolus_timer_2, sbolusInter_timer_3, sbolus_req_2, sbolus_timer_2, IM_OUT_Actual_Infusion_Duration_2);
	

	tel

	until true restart POINTInfusion_Manager_THERAPY



	state THERAPY_PAUSED_IDL:

	 var 	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	idPAUSED_Alarm_Paused_2:int;
	idPAUSED_Arbiter_2:int;
	idPAUSED_Manual_Paused_2:int;
	let

		

		(idPAUSED_Alarm_Paused_2)
	= if not (idPAUSED_Alarm_Paused_1= 0 ) then PAUSED_Alarm_Paused_node(idPAUSED_Alarm_Paused_1, ALARM_IN_Highest_Level_Alarm, OP_CMD_IN_Infusion_Initiate)

		 else (idPAUSED_Alarm_Paused_1);

		

		

		(idPAUSED_Manual_Paused_2)
	= if not (idPAUSED_Manual_Paused_1= 0 ) then PAUSED_Manual_Paused_node(idPAUSED_Manual_Paused_1, OP_CMD_IN_Infusion_Inhibit, OP_CMD_IN_Infusion_Initiate)

		 else (idPAUSED_Manual_Paused_1);

		

		

		(idPAUSED_Arbiter_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2)
	= if not (idPAUSED_Arbiter_1= 0 ) then PAUSED_Arbiter_node(idPAUSED_Arbiter_1, idPAUSED_Alarm_Paused_2, ALARM_IN_Highest_Level_Alarm, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, CONFIG_IN_Flow_Rate_KVO)

		 else (idPAUSED_Arbiter_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1);

		

		

	(idInfusion_Manager_THERAPY, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_PAUSED, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idTHERAPY_ACTIVE, inPatientBolus, number_pbolus, pbolus_timer, sbolusInter_timer, sbolus_req, sbolus_timer, IM_OUT_Actual_Infusion_Duration) 
	= (idInfusion_Manager_THERAPY_1, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_PAUSED_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idTHERAPY_ACTIVE_1, inPatientBolus_1, number_pbolus_1, pbolus_timer_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1, IM_OUT_Actual_Infusion_Duration_1);
	

	tel

	until true restart POINTInfusion_Manager_THERAPY



tel


--***************************************************State :InfusionMGR_Infusion_Manager Automaton***************************************************

node InfusionMGR_Infusion_Manager_node(idInfusionMGR_Infusion_Manager_1:int;
	IM_OUT_Current_System_Mode_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_Lock_Timer_1:real;
	inPatientBolus_1:bool;
	number_pbolus_1:int;
	OP_CMD_IN_Infusion_Initiate:bool;
	CONFIG_IN_Configured:int;
	SYS_STAT_IN_Reservoir_Empty:bool;
	IM_OUT_New_Infusion_1:bool;
	CONFIG_IN_Flow_Rate_KVO:int;
	idACTIVE_Arbiter_1:int;
	idACTIVE_BASAL_1:int;
	idACTIVE_INTERMITTENT_1:int;
	idACTIVE_PATIENT_1:int;
	idInfusion_Manager_THERAPY_1:int;
	idPAUSED_Alarm_Paused_1:int;
	idPAUSED_Arbiter_1:int;
	idPAUSED_Manual_Paused_1:int;
	idTHERAPY_ACTIVE_1:int;
	idTHERAPY_PAUSED_1:int;
	pbolus_timer_1:real;
	sbolus_req_1:bool;
	sbolus_timer_1:real;
	ALARM_IN_Highest_Level_Alarm:int;
	CONFIG_IN_Flow_Rate_Basal:int;
	CONFIG_IN_Flow_Rate_Intermittent_Bolus:int;
	CONFIG_IN_Flow_Rate_Patient_Bolus:int;
	CONFIG_IN_Interval_Intermittent_Bolus:real;
	OP_CMD_IN_Infusion_Inhibit:bool;
	sbolusInter_timer_1:real;
	step_size:real;
	IM_OUT_Actual_Infusion_Duration_1:real;
	CONFIG_IN_Infusion_Total_Duration:real;
	SYS_STAT_Volume_Infused:int;
	CONFIG_IN_VTBI_Total:int;
	OP_CMD_IN_Infusion_Cancel:bool;
	CONFIG_IN_Duration_Intermittent_Bolus:real;
	CONFIG_IN_Duration_Patient_Bolus:real;
	CONFIG_IN_Lockout_Period_Patient_Bolus:real;
	CONFIG_IN_Max_Number_of_Patient_Bolus:int;
	PATIENT_IN_Patient_Bolus_Request:bool)

returns (idInfusionMGR_Infusion_Manager:int;
	IM_OUT_Current_System_Mode:int;
	IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Is_Locked_Out:bool;
	IM_OUT_Lock_Timer:real;
	inPatientBolus:bool;
	number_pbolus:int;
	IM_OUT_New_Infusion:bool;
	idACTIVE_Arbiter:int;
	idACTIVE_BASAL:int;
	idACTIVE_INTERMITTENT:int;
	idACTIVE_PATIENT:int;
	idInfusion_Manager_THERAPY:int;
	idPAUSED_Alarm_Paused:int;
	idPAUSED_Arbiter:int;
	idPAUSED_Manual_Paused:int;
	idTHERAPY_ACTIVE:int;
	idTHERAPY_PAUSED:int;
	pbolus_timer:real;
	sbolus_req:bool;
	sbolus_timer:real;
	sbolusInter_timer:real;
	IM_OUT_Actual_Infusion_Duration:real);


let

	 automaton infusionmgr_infusion_manager

	state POINTInfusionMGR_Infusion_Manager:
	unless (idInfusionMGR_Infusion_Manager_1=0) restart POINT__TO__INFUSION_MANAGER_IDLE_1



	unless (idInfusionMGR_Infusion_Manager_1=196) and ( OP_CMD_IN_Infusion_Initiate and CONFIG_IN_Configured=1 and not SYS_STAT_IN_Reservoir_Empty ) restart INFUSION_MANAGER_THERAPY__TO__INFUSIONMGR_INFUSIONMGRJUNCTION234_1



	unless (idInfusionMGR_Infusion_Manager_1=196) and (  IM_OUT_Actual_Infusion_Duration_1 >=Step_Scaling_Factor(CONFIG_IN_Infusion_Total_Duration - 1.,step_size) or SYS_STAT_Volume_Infused>=CONFIG_IN_VTBI_Total or (CONFIG_IN_Configured<1) or (OP_CMD_IN_Infusion_Cancel) ) restart INFUSION_MANAGER_THERAPY__TO__INFUSION_MANAGER_IDLE_2



	unless (idInfusionMGR_Infusion_Manager_1=226) and ( OP_CMD_IN_Infusion_Cancel ) restart INFUSION_MANAGER_IDLE__TO__INFUSION_MANAGER_IDLE_1



	unless (idInfusionMGR_Infusion_Manager_1=226) and ( OP_CMD_IN_Infusion_Initiate and CONFIG_IN_Configured>0 and not SYS_STAT_IN_Reservoir_Empty ) restart INFUSION_MANAGER_IDLE__TO__INFUSIONMGR_INFUSIONMGRJUNCTION234_2



	unless (idInfusionMGR_Infusion_Manager_1=196) restart INFUSION_MANAGER_THERAPY_IDL

	unless (idInfusionMGR_Infusion_Manager_1=226) restart INFUSION_MANAGER_IDLE_IDL

	let

		(idInfusionMGR_Infusion_Manager, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, number_pbolus, IM_OUT_New_Infusion, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idInfusion_Manager_THERAPY, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_ACTIVE, idTHERAPY_PAUSED, pbolus_timer, sbolus_req, sbolus_timer, sbolusInter_timer, IM_OUT_Actual_Infusion_Duration) 
	= (idInfusionMGR_Infusion_Manager_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1, IM_OUT_New_Infusion_1, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idInfusion_Manager_THERAPY_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_ACTIVE_1, idTHERAPY_PAUSED_1, pbolus_timer_1, sbolus_req_1, sbolus_timer_1, sbolusInter_timer_1, IM_OUT_Actual_Infusion_Duration_1);
	

	tel



	state POINT__TO__INFUSION_MANAGER_IDLE_1:

	 var 	idInfusionMGR_Infusion_Manager_2:int;
	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Lock_Timer_2:real;
	inPatientBolus_2:bool;
	number_pbolus_2:int;
	let

		-- transition trace :
	--POINT__To__Infusion_Manager_IDLE_1
		(idInfusionMGR_Infusion_Manager_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2) 
	= Infusion_Manager_IDLE_en(idInfusionMGR_Infusion_Manager_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1, false);
		

	(idInfusionMGR_Infusion_Manager, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, number_pbolus) 
	=  (idInfusionMGR_Infusion_Manager_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2);

	--add unused variables
	(IM_OUT_Actual_Infusion_Duration, IM_OUT_New_Infusion, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idInfusion_Manager_THERAPY, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_ACTIVE, idTHERAPY_PAUSED, pbolus_timer, sbolusInter_timer, sbolus_req, sbolus_timer) 
	= (IM_OUT_Actual_Infusion_Duration_1, IM_OUT_New_Infusion_1, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idInfusion_Manager_THERAPY_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_ACTIVE_1, idTHERAPY_PAUSED_1, pbolus_timer_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1);
	

	tel

	until true restart POINTInfusionMGR_Infusion_Manager



	state INFUSION_MANAGER_THERAPY__TO__INFUSIONMGR_INFUSIONMGRJUNCTION234_1:

	 var 	idInfusionMGR_Infusion_Manager_2, idInfusionMGR_Infusion_Manager_3:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3:int;
	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3:int;
	IM_OUT_Is_Locked_Out_2, IM_OUT_Is_Locked_Out_3:bool;
	IM_OUT_Lock_Timer_2:real;
	inPatientBolus_2:bool;
	number_pbolus_2:int;
	IM_OUT_New_Infusion_2, IM_OUT_New_Infusion_3:bool;
	idACTIVE_Arbiter_2, idACTIVE_Arbiter_3:int;
	idACTIVE_BASAL_2, idACTIVE_BASAL_3:int;
	idACTIVE_INTERMITTENT_2, idACTIVE_INTERMITTENT_3:int;
	idACTIVE_PATIENT_2, idACTIVE_PATIENT_3:int;
	idInfusion_Manager_THERAPY_2, idInfusion_Manager_THERAPY_3:int;
	idPAUSED_Alarm_Paused_2, idPAUSED_Alarm_Paused_3:int;
	idPAUSED_Arbiter_2, idPAUSED_Arbiter_3:int;
	idPAUSED_Manual_Paused_2, idPAUSED_Manual_Paused_3:int;
	idTHERAPY_ACTIVE_2, idTHERAPY_ACTIVE_3:int;
	idTHERAPY_PAUSED_2, idTHERAPY_PAUSED_3:int;
	pbolus_timer_2, pbolus_timer_3:real;
	sbolus_req_2, sbolus_req_3:bool;
	sbolus_timer_2, sbolus_timer_3:real;
	sbolusInter_timer_2:real;
	let

		

-- transition trace :
	--Infusion_Manager_THERAPY__To__Junction234_1, Junction234__To__Infusion_Manager_THERAPY_1
		-- condition Action : IM_OUT_New_Infusion=1;
		
		(IM_OUT_New_Infusion_2) 
	= InfusionMGR_InfusionMGRJunction234__To__Infusion_Manager_THERAPY_1_Condition_Action(IM_OUT_New_Infusion_1);
		

		(idACTIVE_Arbiter_2, idTHERAPY_ACTIVE_2, idACTIVE_INTERMITTENT_2, sbolus_req_2, sbolus_timer_2, idACTIVE_PATIENT_2, pbolus_timer_2, idACTIVE_BASAL_2, idInfusion_Manager_THERAPY_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_PAUSED_2, IM_OUT_Is_Locked_Out_2, IM_OUT_New_Infusion_3, idInfusionMGR_Infusion_Manager_2) 
	= Infusion_Manager_THERAPY_ex(idACTIVE_Arbiter_1, idTHERAPY_ACTIVE_1, idACTIVE_INTERMITTENT_1, sbolus_req_1, sbolus_timer_1, idACTIVE_PATIENT_1, pbolus_timer_1, idACTIVE_BASAL_1, idInfusion_Manager_THERAPY_1, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_1, IM_OUT_Is_Locked_Out_1, IM_OUT_New_Infusion_2, idInfusionMGR_Infusion_Manager_1, false);
		

		(idInfusion_Manager_THERAPY_3, idInfusionMGR_Infusion_Manager_3, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, idPAUSED_Alarm_Paused_3, idPAUSED_Arbiter_3, idPAUSED_Manual_Paused_3, idTHERAPY_PAUSED_3, IM_OUT_Is_Locked_Out_3, IM_OUT_Lock_Timer_2, idACTIVE_Arbiter_3, idACTIVE_BASAL_3, idACTIVE_INTERMITTENT_3, idACTIVE_PATIENT_3, idTHERAPY_ACTIVE_3, inPatientBolus_2, number_pbolus_2, pbolus_timer_3, sbolusInter_timer_2, sbolus_req_3, sbolus_timer_3) 
	= Infusion_Manager_THERAPY_en(idInfusion_Manager_THERAPY_2, idInfusionMGR_Infusion_Manager_2, OP_CMD_IN_Infusion_Inhibit, ALARM_IN_Highest_Level_Alarm, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_PAUSED_2, CONFIG_IN_Flow_Rate_Basal, CONFIG_IN_Flow_Rate_Intermittent_Bolus, CONFIG_IN_Flow_Rate_Patient_Bolus, CONFIG_IN_Interval_Intermittent_Bolus, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_1, idACTIVE_Arbiter_2, idACTIVE_BASAL_2, idACTIVE_INTERMITTENT_2, idACTIVE_PATIENT_2, idTHERAPY_ACTIVE_2, inPatientBolus_1, number_pbolus_1, pbolus_timer_2, sbolusInter_timer_1, sbolus_req_2, sbolus_timer_2, step_size, false);
		

	(idInfusionMGR_Infusion_Manager, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, number_pbolus, IM_OUT_New_Infusion, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idInfusion_Manager_THERAPY, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_ACTIVE, idTHERAPY_PAUSED, pbolus_timer, sbolus_req, sbolus_timer, sbolusInter_timer) 
	=  (idInfusionMGR_Infusion_Manager_3, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Is_Locked_Out_3, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2, IM_OUT_New_Infusion_3, idACTIVE_Arbiter_3, idACTIVE_BASAL_3, idACTIVE_INTERMITTENT_3, idACTIVE_PATIENT_3, idInfusion_Manager_THERAPY_3, idPAUSED_Alarm_Paused_3, idPAUSED_Arbiter_3, idPAUSED_Manual_Paused_3, idTHERAPY_ACTIVE_3, idTHERAPY_PAUSED_3, pbolus_timer_3, sbolus_req_3, sbolus_timer_3, sbolusInter_timer_2);

	--add unused variables
	(IM_OUT_Actual_Infusion_Duration) 
	= (IM_OUT_Actual_Infusion_Duration_1);
	

	tel

	until true restart POINTInfusionMGR_Infusion_Manager



	state INFUSION_MANAGER_THERAPY__TO__INFUSION_MANAGER_IDLE_2:

	 var 	idInfusionMGR_Infusion_Manager_2, idInfusionMGR_Infusion_Manager_3:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3:int;
	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3:int;
	IM_OUT_Is_Locked_Out_2, IM_OUT_Is_Locked_Out_3:bool;
	IM_OUT_Lock_Timer_2:real;
	inPatientBolus_2:bool;
	number_pbolus_2:int;
	IM_OUT_New_Infusion_2:bool;
	idACTIVE_Arbiter_2:int;
	idACTIVE_BASAL_2:int;
	idACTIVE_INTERMITTENT_2:int;
	idACTIVE_PATIENT_2:int;
	idInfusion_Manager_THERAPY_2:int;
	idPAUSED_Alarm_Paused_2:int;
	idPAUSED_Arbiter_2:int;
	idPAUSED_Manual_Paused_2:int;
	idTHERAPY_ACTIVE_2:int;
	idTHERAPY_PAUSED_2:int;
	pbolus_timer_2:real;
	sbolus_req_2:bool;
	sbolus_timer_2:real;
	let

		-- transition trace :
	--Infusion_Manager_THERAPY__To__Infusion_Manager_IDLE_2
		(idACTIVE_Arbiter_2, idTHERAPY_ACTIVE_2, idACTIVE_INTERMITTENT_2, sbolus_req_2, sbolus_timer_2, idACTIVE_PATIENT_2, pbolus_timer_2, idACTIVE_BASAL_2, idInfusion_Manager_THERAPY_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_PAUSED_2, IM_OUT_Is_Locked_Out_2, IM_OUT_New_Infusion_2, idInfusionMGR_Infusion_Manager_2) 
	= Infusion_Manager_THERAPY_ex(idACTIVE_Arbiter_1, idTHERAPY_ACTIVE_1, idACTIVE_INTERMITTENT_1, sbolus_req_1, sbolus_timer_1, idACTIVE_PATIENT_1, pbolus_timer_1, idACTIVE_BASAL_1, idInfusion_Manager_THERAPY_1, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_1, IM_OUT_Is_Locked_Out_1, IM_OUT_New_Infusion_1, idInfusionMGR_Infusion_Manager_1, false);
		

		(idInfusionMGR_Infusion_Manager_3, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Is_Locked_Out_3, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2) 
	= Infusion_Manager_IDLE_en(idInfusionMGR_Infusion_Manager_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1, false);
		

	(idInfusionMGR_Infusion_Manager, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, number_pbolus, IM_OUT_New_Infusion, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idInfusion_Manager_THERAPY, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_ACTIVE, idTHERAPY_PAUSED, pbolus_timer, sbolus_req, sbolus_timer, sbolusInter_timer) 
	=  (idInfusionMGR_Infusion_Manager_3, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Is_Locked_Out_3, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2, IM_OUT_New_Infusion_2, idACTIVE_Arbiter_2, idACTIVE_BASAL_2, idACTIVE_INTERMITTENT_2, idACTIVE_PATIENT_2, idInfusion_Manager_THERAPY_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_ACTIVE_2, idTHERAPY_PAUSED_2, pbolus_timer_2, sbolus_req_2, sbolus_timer_2, sbolusInter_timer_1);

	--add unused variables
	(IM_OUT_Actual_Infusion_Duration) 
	= (IM_OUT_Actual_Infusion_Duration_1);
	

	tel

	until true restart POINTInfusionMGR_Infusion_Manager



	state INFUSION_MANAGER_IDLE__TO__INFUSION_MANAGER_IDLE_1:

	 var 	idInfusionMGR_Infusion_Manager_2, idInfusionMGR_Infusion_Manager_3:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3:int;
	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3:int;
	IM_OUT_Is_Locked_Out_2, IM_OUT_Is_Locked_Out_3:bool;
	IM_OUT_Lock_Timer_2, IM_OUT_Lock_Timer_3:real;
	inPatientBolus_2, inPatientBolus_3:bool;
	number_pbolus_2, number_pbolus_3:int;
	let

		-- transition trace :
	--Infusion_Manager_IDLE__To__Infusion_Manager_IDLE_1
		(IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2, idInfusionMGR_Infusion_Manager_2) 
	= Infusion_Manager_IDLE_ex(IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1, idInfusionMGR_Infusion_Manager_1, false);
		

		(idInfusionMGR_Infusion_Manager_3, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Is_Locked_Out_3, IM_OUT_Lock_Timer_3, inPatientBolus_3, number_pbolus_3) 
	= Infusion_Manager_IDLE_en(idInfusionMGR_Infusion_Manager_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2, false);
		

	(idInfusionMGR_Infusion_Manager, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, number_pbolus, IM_OUT_New_Infusion, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idInfusion_Manager_THERAPY, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_ACTIVE, idTHERAPY_PAUSED, pbolus_timer, sbolus_req, sbolus_timer, sbolusInter_timer) 
	=  (idInfusionMGR_Infusion_Manager_3, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Is_Locked_Out_3, IM_OUT_Lock_Timer_3, inPatientBolus_3, number_pbolus_3, IM_OUT_New_Infusion_1, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idInfusion_Manager_THERAPY_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_ACTIVE_1, idTHERAPY_PAUSED_1, pbolus_timer_1, sbolus_req_1, sbolus_timer_1, sbolusInter_timer_1);

	--add unused variables
	(IM_OUT_Actual_Infusion_Duration) 
	= (IM_OUT_Actual_Infusion_Duration_1);
	

	tel

	until true restart POINTInfusionMGR_Infusion_Manager



	state INFUSION_MANAGER_IDLE__TO__INFUSIONMGR_INFUSIONMGRJUNCTION234_2:

	 var 	idInfusionMGR_Infusion_Manager_2, idInfusionMGR_Infusion_Manager_3:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3:int;
	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3:int;
	IM_OUT_Is_Locked_Out_2, IM_OUT_Is_Locked_Out_3, IM_OUT_Is_Locked_Out_4:bool;
	IM_OUT_Lock_Timer_2, IM_OUT_Lock_Timer_3, IM_OUT_Lock_Timer_4:real;
	inPatientBolus_2, inPatientBolus_3, inPatientBolus_4:bool;
	number_pbolus_2, number_pbolus_3, number_pbolus_4:int;
	IM_OUT_New_Infusion_2:bool;
	idACTIVE_Arbiter_2:int;
	idACTIVE_BASAL_2:int;
	idACTIVE_INTERMITTENT_2:int;
	idACTIVE_PATIENT_2:int;
	idInfusion_Manager_THERAPY_2:int;
	idPAUSED_Alarm_Paused_2:int;
	idPAUSED_Arbiter_2:int;
	idPAUSED_Manual_Paused_2:int;
	idTHERAPY_ACTIVE_2:int;
	idTHERAPY_PAUSED_2:int;
	pbolus_timer_2:real;
	sbolus_req_2:bool;
	sbolus_timer_2:real;
	sbolusInter_timer_2:real;
	let

		

-- transition trace :
	--Infusion_Manager_IDLE__To__Junction234_2, Junction234__To__Infusion_Manager_THERAPY_1
		-- condition Action : resetAllInfusionDetails();
		
		(IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2) 
	= Infusion_Manager_IDLE__To__InfusionMGR_InfusionMGRJunction234_2_Condition_Action(IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1);
		

		-- condition Action : IM_OUT_New_Infusion=1;
		
		(IM_OUT_New_Infusion_2) 
	= InfusionMGR_InfusionMGRJunction234__To__Infusion_Manager_THERAPY_1_Condition_Action(IM_OUT_New_Infusion_1);
		

		(IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Is_Locked_Out_3, IM_OUT_Lock_Timer_3, inPatientBolus_3, number_pbolus_3, idInfusionMGR_Infusion_Manager_2) 
	= Infusion_Manager_IDLE_ex(IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2, idInfusionMGR_Infusion_Manager_1, false);
		

		(idInfusion_Manager_THERAPY_2, idInfusionMGR_Infusion_Manager_3, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_PAUSED_2, IM_OUT_Is_Locked_Out_4, IM_OUT_Lock_Timer_4, idACTIVE_Arbiter_2, idACTIVE_BASAL_2, idACTIVE_INTERMITTENT_2, idACTIVE_PATIENT_2, idTHERAPY_ACTIVE_2, inPatientBolus_4, number_pbolus_4, pbolus_timer_2, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_2) 
	= Infusion_Manager_THERAPY_en(idInfusion_Manager_THERAPY_1, idInfusionMGR_Infusion_Manager_2, OP_CMD_IN_Infusion_Inhibit, ALARM_IN_Highest_Level_Alarm, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_1, CONFIG_IN_Flow_Rate_Basal, CONFIG_IN_Flow_Rate_Intermittent_Bolus, CONFIG_IN_Flow_Rate_Patient_Bolus, CONFIG_IN_Interval_Intermittent_Bolus, IM_OUT_Is_Locked_Out_3, IM_OUT_Lock_Timer_3, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idTHERAPY_ACTIVE_1, inPatientBolus_3, number_pbolus_3, pbolus_timer_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1, step_size, false);
		

	(idInfusionMGR_Infusion_Manager, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, number_pbolus, IM_OUT_New_Infusion, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idInfusion_Manager_THERAPY, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_ACTIVE, idTHERAPY_PAUSED, pbolus_timer, sbolus_req, sbolus_timer, sbolusInter_timer) 
	=  (idInfusionMGR_Infusion_Manager_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2, IM_OUT_New_Infusion_1, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idInfusion_Manager_THERAPY_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_ACTIVE_1, idTHERAPY_PAUSED_1, pbolus_timer_1, sbolus_req_1, sbolus_timer_1, sbolusInter_timer_1);

	--add unused variables
	(IM_OUT_Actual_Infusion_Duration) 
	= (IM_OUT_Actual_Infusion_Duration_1);
	

	tel

	until true restart POINTInfusionMGR_Infusion_Manager



	state INFUSION_MANAGER_THERAPY_IDL:

	 var 	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Lock_Timer_2:real;
	inPatientBolus_2:bool;
	number_pbolus_2:int;
	IM_OUT_New_Infusion_2:bool;
	idACTIVE_Arbiter_2:int;
	idACTIVE_BASAL_2:int;
	idACTIVE_INTERMITTENT_2:int;
	idACTIVE_PATIENT_2:int;
	idInfusion_Manager_THERAPY_2:int;
	idPAUSED_Alarm_Paused_2:int;
	idPAUSED_Arbiter_2:int;
	idPAUSED_Manual_Paused_2:int;
	idTHERAPY_ACTIVE_2:int;
	idTHERAPY_PAUSED_2:int;
	pbolus_timer_2:real;
	sbolus_req_2:bool;
	sbolus_timer_2:real;
	sbolusInter_timer_2:real;
	IM_OUT_Actual_Infusion_Duration_2:real;
	let

		
	(IM_OUT_New_Infusion_2) 
	= Infusion_Manager_THERAPY_du(IM_OUT_New_Infusion_1);

		

	(idInfusion_Manager_THERAPY_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_PAUSED_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, idACTIVE_Arbiter_2, idACTIVE_BASAL_2, idACTIVE_INTERMITTENT_2, idACTIVE_PATIENT_2, idTHERAPY_ACTIVE_2, inPatientBolus_2, number_pbolus_2, pbolus_timer_2, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_2, IM_OUT_Actual_Infusion_Duration_2) 
	= Infusion_Manager_THERAPY_node(idInfusion_Manager_THERAPY_1, OP_CMD_IN_Infusion_Inhibit, ALARM_IN_Highest_Level_Alarm, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_1, CONFIG_IN_Flow_Rate_Basal, CONFIG_IN_Flow_Rate_Intermittent_Bolus, CONFIG_IN_Flow_Rate_Patient_Bolus, CONFIG_IN_Interval_Intermittent_Bolus, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idTHERAPY_ACTIVE_1, inPatientBolus_1, number_pbolus_1, pbolus_timer_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1, step_size, OP_CMD_IN_Infusion_Initiate, CONFIG_IN_Infusion_Total_Duration, IM_OUT_Actual_Infusion_Duration_1, CONFIG_IN_Duration_Patient_Bolus, CONFIG_IN_Lockout_Period_Patient_Bolus, CONFIG_IN_Max_Number_of_Patient_Bolus, PATIENT_IN_Patient_Bolus_Request, CONFIG_IN_Duration_Intermittent_Bolus);

		


	(idInfusionMGR_Infusion_Manager, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, number_pbolus, IM_OUT_New_Infusion, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idInfusion_Manager_THERAPY, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_ACTIVE, idTHERAPY_PAUSED, pbolus_timer, sbolus_req, sbolus_timer, sbolusInter_timer, IM_OUT_Actual_Infusion_Duration) 
	= (idInfusionMGR_Infusion_Manager_1, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2, IM_OUT_New_Infusion_2, idACTIVE_Arbiter_2, idACTIVE_BASAL_2, idACTIVE_INTERMITTENT_2, idACTIVE_PATIENT_2, idInfusion_Manager_THERAPY_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_ACTIVE_2, idTHERAPY_PAUSED_2, pbolus_timer_2, sbolus_req_2, sbolus_timer_2, sbolusInter_timer_2, IM_OUT_Actual_Infusion_Duration_2);
	

	tel

	until true restart POINTInfusionMGR_Infusion_Manager



	state INFUSION_MANAGER_IDLE_IDL:

	 var 	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	let

		
	(IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2) 
	= Infusion_Manager_IDLE_du(IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1);

		


	(idInfusionMGR_Infusion_Manager, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, inPatientBolus, number_pbolus, IM_OUT_New_Infusion, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idInfusion_Manager_THERAPY, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_ACTIVE, idTHERAPY_PAUSED, pbolus_timer, sbolus_req, sbolus_timer, sbolusInter_timer, IM_OUT_Actual_Infusion_Duration) 
	= (idInfusionMGR_Infusion_Manager_1, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1, IM_OUT_New_Infusion_1, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idInfusion_Manager_THERAPY_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_ACTIVE_1, idTHERAPY_PAUSED_1, pbolus_timer_1, sbolus_req_1, sbolus_timer_1, sbolusInter_timer_1, IM_OUT_Actual_Infusion_Duration_1);
	

	tel

	until true restart POINTInfusionMGR_Infusion_Manager



tel


--***************************************************State :InfusionMGR_InfusionMGR Automaton***************************************************

node InfusionMGR_InfusionMGR_node(idInfusionMGR_InfusionMGR_1:int;
	TLM_MODE_IN_System_On:bool;
	ALARM_IN_Highest_Level_Alarm:int;
	CONFIG_IN_Flow_Rate_Basal:int;
	CONFIG_IN_Flow_Rate_Intermittent_Bolus:int;
	CONFIG_IN_Flow_Rate_KVO:int;
	CONFIG_IN_Flow_Rate_Patient_Bolus:int;
	CONFIG_IN_Interval_Intermittent_Bolus:real;
	IM_OUT_Current_System_Mode_1:int;
	IM_OUT_Flow_Rate_Commanded_1:int;
	IM_OUT_Is_Locked_Out_1:bool;
	IM_OUT_Lock_Timer_1:real;
	OP_CMD_IN_Infusion_Inhibit:bool;
	idACTIVE_Arbiter_1:int;
	idACTIVE_BASAL_1:int;
	idACTIVE_INTERMITTENT_1:int;
	idACTIVE_PATIENT_1:int;
	idInfusionMGR_Infusion_Manager_1:int;
	idInfusion_Manager_THERAPY_1:int;
	idPAUSED_Alarm_Paused_1:int;
	idPAUSED_Arbiter_1:int;
	idPAUSED_Manual_Paused_1:int;
	idTHERAPY_ACTIVE_1:int;
	idTHERAPY_PAUSED_1:int;
	inPatientBolus_1:bool;
	number_pbolus_1:int;
	pbolus_timer_1:real;
	sbolusInter_timer_1:real;
	sbolus_req_1:bool;
	sbolus_timer_1:real;
	step_size:real;
	IM_OUT_New_Infusion_1:bool;
	CONFIG_IN_Configured:int;
	CONFIG_IN_Duration_Intermittent_Bolus:real;
	CONFIG_IN_Duration_Patient_Bolus:real;
	CONFIG_IN_Infusion_Total_Duration:real;
	CONFIG_IN_Lockout_Period_Patient_Bolus:real;
	CONFIG_IN_Max_Number_of_Patient_Bolus:int;
	CONFIG_IN_VTBI_Total:int;
	IM_OUT_Actual_Infusion_Duration_1:real;
	OP_CMD_IN_Infusion_Cancel:bool;
	OP_CMD_IN_Infusion_Initiate:bool;
	PATIENT_IN_Patient_Bolus_Request:bool;
	SYS_STAT_IN_Reservoir_Empty:bool;
	SYS_STAT_Volume_Infused:int)

returns (idInfusionMGR_InfusionMGR:int;
	IM_OUT_Current_System_Mode:int;
	IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Is_Locked_Out:bool;
	IM_OUT_Lock_Timer:real;
	idACTIVE_Arbiter:int;
	idACTIVE_BASAL:int;
	idACTIVE_INTERMITTENT:int;
	idACTIVE_PATIENT:int;
	idInfusionMGR_Infusion_Manager:int;
	idInfusion_Manager_THERAPY:int;
	idPAUSED_Alarm_Paused:int;
	idPAUSED_Arbiter:int;
	idPAUSED_Manual_Paused:int;
	idTHERAPY_ACTIVE:int;
	idTHERAPY_PAUSED:int;
	inPatientBolus:bool;
	number_pbolus:int;
	pbolus_timer:real;
	sbolusInter_timer:real;
	sbolus_req:bool;
	sbolus_timer:real;
	IM_OUT_New_Infusion:bool;
	IM_OUT_Actual_Infusion_Duration:real);


let

	 automaton infusionmgr_infusionmgr

	state POINTInfusionMGR_InfusionMGR:
	unless (idInfusionMGR_InfusionMGR_1=0) and ( TLM_MODE_IN_System_On ) restart POINT__TO__INFUSIONMGR_INFUSION_MANAGER_1



	unless (idInfusionMGR_InfusionMGR_1=0) restart POINT__TO__INFUSIONMGR_NOT_ON_2



	unless (idInfusionMGR_InfusionMGR_1=194) and ( TLM_MODE_IN_System_On ) restart INFUSIONMGR_NOT_ON__TO__INFUSIONMGR_INFUSION_MANAGER_1



	unless (idInfusionMGR_InfusionMGR_1=195) and ( not TLM_MODE_IN_System_On ) restart INFUSIONMGR_INFUSION_MANAGER__TO__INFUSIONMGR_NOT_ON_1



	unless (idInfusionMGR_InfusionMGR_1=194) restart INFUSIONMGR_NOT_ON_IDL

	unless (idInfusionMGR_InfusionMGR_1=195) restart INFUSIONMGR_INFUSION_MANAGER_IDL

	let

		(idInfusionMGR_InfusionMGR, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idInfusionMGR_Infusion_Manager, idInfusion_Manager_THERAPY, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_ACTIVE, idTHERAPY_PAUSED, inPatientBolus, number_pbolus, pbolus_timer, sbolusInter_timer, sbolus_req, sbolus_timer, IM_OUT_New_Infusion, IM_OUT_Actual_Infusion_Duration) 
	= (idInfusionMGR_InfusionMGR_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idInfusionMGR_Infusion_Manager_1, idInfusion_Manager_THERAPY_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_ACTIVE_1, idTHERAPY_PAUSED_1, inPatientBolus_1, number_pbolus_1, pbolus_timer_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1, IM_OUT_New_Infusion_1, IM_OUT_Actual_Infusion_Duration_1);
	

	tel



	state POINT__TO__INFUSIONMGR_INFUSION_MANAGER_1:

	 var 	idInfusionMGR_InfusionMGR_2:int;
	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Lock_Timer_2:real;
	idACTIVE_Arbiter_2:int;
	idACTIVE_BASAL_2:int;
	idACTIVE_INTERMITTENT_2:int;
	idACTIVE_PATIENT_2:int;
	idInfusionMGR_Infusion_Manager_2:int;
	idInfusion_Manager_THERAPY_2:int;
	idPAUSED_Alarm_Paused_2:int;
	idPAUSED_Arbiter_2:int;
	idPAUSED_Manual_Paused_2:int;
	idTHERAPY_ACTIVE_2:int;
	idTHERAPY_PAUSED_2:int;
	inPatientBolus_2:bool;
	number_pbolus_2:int;
	pbolus_timer_2:real;
	sbolusInter_timer_2:real;
	sbolus_req_2:bool;
	sbolus_timer_2:real;
	let

		-- transition trace :
	--POINT__To__InfusionMGR_Infusion_Manager_1
		(idInfusionMGR_Infusion_Manager_2, idInfusionMGR_InfusionMGR_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2, idACTIVE_Arbiter_2, idACTIVE_BASAL_2, idACTIVE_INTERMITTENT_2, idACTIVE_PATIENT_2, idInfusion_Manager_THERAPY_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_ACTIVE_2, idTHERAPY_PAUSED_2, pbolus_timer_2, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_2) 
	= InfusionMGR_Infusion_Manager_en(idInfusionMGR_Infusion_Manager_1, idInfusionMGR_InfusionMGR_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1, ALARM_IN_Highest_Level_Alarm, CONFIG_IN_Flow_Rate_Basal, CONFIG_IN_Flow_Rate_Intermittent_Bolus, CONFIG_IN_Flow_Rate_KVO, CONFIG_IN_Flow_Rate_Patient_Bolus, CONFIG_IN_Interval_Intermittent_Bolus, OP_CMD_IN_Infusion_Inhibit, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idInfusion_Manager_THERAPY_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_ACTIVE_1, idTHERAPY_PAUSED_1, pbolus_timer_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1, step_size, false);
		

	(idInfusionMGR_InfusionMGR, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idInfusionMGR_Infusion_Manager, idInfusion_Manager_THERAPY, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_ACTIVE, idTHERAPY_PAUSED, inPatientBolus, number_pbolus, pbolus_timer, sbolusInter_timer, sbolus_req, sbolus_timer) 
	=  (idInfusionMGR_InfusionMGR_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, idACTIVE_Arbiter_2, idACTIVE_BASAL_2, idACTIVE_INTERMITTENT_2, idACTIVE_PATIENT_2, idInfusionMGR_Infusion_Manager_2, idInfusion_Manager_THERAPY_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_ACTIVE_2, idTHERAPY_PAUSED_2, inPatientBolus_2, number_pbolus_2, pbolus_timer_2, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_2);

	--add unused variables
	(IM_OUT_Actual_Infusion_Duration, IM_OUT_New_Infusion) 
	= (IM_OUT_Actual_Infusion_Duration_1, IM_OUT_New_Infusion_1);
	

	tel

	until true restart POINTInfusionMGR_InfusionMGR



	state POINT__TO__INFUSIONMGR_NOT_ON_2:

	 var 	idInfusionMGR_InfusionMGR_2:int;
	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	let

		-- transition trace :
	--POINT__To__InfusionMGR_NOT_ON_2
		(idInfusionMGR_InfusionMGR_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2) 
	= InfusionMGR_NOT_ON_en(idInfusionMGR_InfusionMGR_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, false);
		

	(idInfusionMGR_InfusionMGR, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idInfusionMGR_Infusion_Manager, idInfusion_Manager_THERAPY, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_ACTIVE, idTHERAPY_PAUSED, inPatientBolus, number_pbolus, pbolus_timer, sbolusInter_timer, sbolus_req, sbolus_timer) 
	=  (idInfusionMGR_InfusionMGR_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idInfusionMGR_Infusion_Manager_1, idInfusion_Manager_THERAPY_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_ACTIVE_1, idTHERAPY_PAUSED_1, inPatientBolus_1, number_pbolus_1, pbolus_timer_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1);

	--add unused variables
	(IM_OUT_Actual_Infusion_Duration, IM_OUT_New_Infusion) 
	= (IM_OUT_Actual_Infusion_Duration_1, IM_OUT_New_Infusion_1);
	

	tel

	until true restart POINTInfusionMGR_InfusionMGR



	state INFUSIONMGR_NOT_ON__TO__INFUSIONMGR_INFUSION_MANAGER_1:

	 var 	idInfusionMGR_InfusionMGR_2, idInfusionMGR_InfusionMGR_3:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3:int;
	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3:int;
	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Lock_Timer_2:real;
	idACTIVE_Arbiter_2:int;
	idACTIVE_BASAL_2:int;
	idACTIVE_INTERMITTENT_2:int;
	idACTIVE_PATIENT_2:int;
	idInfusionMGR_Infusion_Manager_2:int;
	idInfusion_Manager_THERAPY_2:int;
	idPAUSED_Alarm_Paused_2:int;
	idPAUSED_Arbiter_2:int;
	idPAUSED_Manual_Paused_2:int;
	idTHERAPY_ACTIVE_2:int;
	idTHERAPY_PAUSED_2:int;
	inPatientBolus_2:bool;
	number_pbolus_2:int;
	pbolus_timer_2:real;
	sbolusInter_timer_2:real;
	sbolus_req_2:bool;
	sbolus_timer_2:real;
	let

		-- transition trace :
	--InfusionMGR_NOT_ON__To__InfusionMGR_Infusion_Manager_1
		(IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idInfusionMGR_InfusionMGR_2) 
	= InfusionMGR_NOT_ON_ex(IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idInfusionMGR_InfusionMGR_1, false);
		

		(idInfusionMGR_Infusion_Manager_2, idInfusionMGR_InfusionMGR_3, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2, idACTIVE_Arbiter_2, idACTIVE_BASAL_2, idACTIVE_INTERMITTENT_2, idACTIVE_PATIENT_2, idInfusion_Manager_THERAPY_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_ACTIVE_2, idTHERAPY_PAUSED_2, pbolus_timer_2, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_2) 
	= InfusionMGR_Infusion_Manager_en(idInfusionMGR_Infusion_Manager_1, idInfusionMGR_InfusionMGR_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1, ALARM_IN_Highest_Level_Alarm, CONFIG_IN_Flow_Rate_Basal, CONFIG_IN_Flow_Rate_Intermittent_Bolus, CONFIG_IN_Flow_Rate_KVO, CONFIG_IN_Flow_Rate_Patient_Bolus, CONFIG_IN_Interval_Intermittent_Bolus, OP_CMD_IN_Infusion_Inhibit, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idInfusion_Manager_THERAPY_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_ACTIVE_1, idTHERAPY_PAUSED_1, pbolus_timer_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1, step_size, false);
		

	(idInfusionMGR_InfusionMGR, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idInfusionMGR_Infusion_Manager, idInfusion_Manager_THERAPY, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_ACTIVE, idTHERAPY_PAUSED, inPatientBolus, number_pbolus, pbolus_timer, sbolusInter_timer, sbolus_req, sbolus_timer) 
	=  (idInfusionMGR_InfusionMGR_3, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, idACTIVE_Arbiter_2, idACTIVE_BASAL_2, idACTIVE_INTERMITTENT_2, idACTIVE_PATIENT_2, idInfusionMGR_Infusion_Manager_2, idInfusion_Manager_THERAPY_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_ACTIVE_2, idTHERAPY_PAUSED_2, inPatientBolus_2, number_pbolus_2, pbolus_timer_2, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_2);

	--add unused variables
	(IM_OUT_Actual_Infusion_Duration, IM_OUT_New_Infusion) 
	= (IM_OUT_Actual_Infusion_Duration_1, IM_OUT_New_Infusion_1);
	

	tel

	until true restart POINTInfusionMGR_InfusionMGR



	state INFUSIONMGR_INFUSION_MANAGER__TO__INFUSIONMGR_NOT_ON_1:

	 var 	idInfusionMGR_InfusionMGR_2, idInfusionMGR_InfusionMGR_3:int;
	IM_OUT_Current_System_Mode_2, IM_OUT_Current_System_Mode_3:int;
	IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Flow_Rate_Commanded_3:int;
	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Lock_Timer_2:real;
	idACTIVE_Arbiter_2:int;
	idACTIVE_BASAL_2:int;
	idACTIVE_INTERMITTENT_2:int;
	idACTIVE_PATIENT_2:int;
	idInfusionMGR_Infusion_Manager_2:int;
	idInfusion_Manager_THERAPY_2:int;
	idPAUSED_Alarm_Paused_2:int;
	idPAUSED_Arbiter_2:int;
	idPAUSED_Manual_Paused_2:int;
	idTHERAPY_ACTIVE_2:int;
	idTHERAPY_PAUSED_2:int;
	inPatientBolus_2:bool;
	number_pbolus_2:int;
	pbolus_timer_2:real;
	sbolus_req_2:bool;
	sbolus_timer_2:real;
	IM_OUT_New_Infusion_2:bool;
	let

		-- transition trace :
	--InfusionMGR_Infusion_Manager__To__InfusionMGR_NOT_ON_1
		(idACTIVE_Arbiter_2, idTHERAPY_ACTIVE_2, idACTIVE_INTERMITTENT_2, sbolus_req_2, sbolus_timer_2, idACTIVE_PATIENT_2, pbolus_timer_2, idACTIVE_BASAL_2, idInfusion_Manager_THERAPY_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_PAUSED_2, IM_OUT_Is_Locked_Out_2, IM_OUT_New_Infusion_2, idInfusionMGR_Infusion_Manager_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2, idInfusionMGR_InfusionMGR_2) 
	= InfusionMGR_Infusion_Manager_ex(idACTIVE_Arbiter_1, idTHERAPY_ACTIVE_1, idACTIVE_INTERMITTENT_1, sbolus_req_1, sbolus_timer_1, idACTIVE_PATIENT_1, pbolus_timer_1, idACTIVE_BASAL_1, idInfusion_Manager_THERAPY_1, CONFIG_IN_Flow_Rate_KVO, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_PAUSED_1, IM_OUT_Is_Locked_Out_1, IM_OUT_New_Infusion_1, idInfusionMGR_Infusion_Manager_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1, idInfusionMGR_InfusionMGR_1, false);
		

		(idInfusionMGR_InfusionMGR_3, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3) 
	= InfusionMGR_NOT_ON_en(idInfusionMGR_InfusionMGR_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, false);
		

	(idInfusionMGR_InfusionMGR, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idInfusionMGR_Infusion_Manager, idInfusion_Manager_THERAPY, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_ACTIVE, idTHERAPY_PAUSED, inPatientBolus, number_pbolus, pbolus_timer, sbolusInter_timer, sbolus_req, sbolus_timer, IM_OUT_New_Infusion) 
	=  (idInfusionMGR_InfusionMGR_3, IM_OUT_Current_System_Mode_3, IM_OUT_Flow_Rate_Commanded_3, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, idACTIVE_Arbiter_2, idACTIVE_BASAL_2, idACTIVE_INTERMITTENT_2, idACTIVE_PATIENT_2, idInfusionMGR_Infusion_Manager_2, idInfusion_Manager_THERAPY_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_ACTIVE_2, idTHERAPY_PAUSED_2, inPatientBolus_2, number_pbolus_2, pbolus_timer_2, sbolusInter_timer_1, sbolus_req_2, sbolus_timer_2, IM_OUT_New_Infusion_2);

	--add unused variables
	(IM_OUT_Actual_Infusion_Duration) 
	= (IM_OUT_Actual_Infusion_Duration_1);
	

	tel

	until true restart POINTInfusionMGR_InfusionMGR



	state INFUSIONMGR_NOT_ON_IDL:

	 var 	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	let

		
	(IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2) 
	= InfusionMGR_NOT_ON_du(IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1);

		


	(idInfusionMGR_InfusionMGR, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idInfusionMGR_Infusion_Manager, idInfusion_Manager_THERAPY, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_ACTIVE, idTHERAPY_PAUSED, inPatientBolus, number_pbolus, pbolus_timer, sbolusInter_timer, sbolus_req, sbolus_timer, IM_OUT_New_Infusion) 
	= (idInfusionMGR_InfusionMGR_1, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idInfusionMGR_Infusion_Manager_1, idInfusion_Manager_THERAPY_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_ACTIVE_1, idTHERAPY_PAUSED_1, inPatientBolus_1, number_pbolus_1, pbolus_timer_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1, IM_OUT_New_Infusion_1);
	
	--add unused variables
	(IM_OUT_Actual_Infusion_Duration) 
	= (IM_OUT_Actual_Infusion_Duration_1);
	

	tel

	until true restart POINTInfusionMGR_InfusionMGR



	state INFUSIONMGR_INFUSION_MANAGER_IDL:

	 var 	IM_OUT_Current_System_Mode_2:int;
	IM_OUT_Flow_Rate_Commanded_2:int;
	IM_OUT_Is_Locked_Out_2:bool;
	IM_OUT_Lock_Timer_2:real;
	idACTIVE_Arbiter_2:int;
	idACTIVE_BASAL_2:int;
	idACTIVE_INTERMITTENT_2:int;
	idACTIVE_PATIENT_2:int;
	idInfusionMGR_Infusion_Manager_2:int;
	idInfusion_Manager_THERAPY_2:int;
	idPAUSED_Alarm_Paused_2:int;
	idPAUSED_Arbiter_2:int;
	idPAUSED_Manual_Paused_2:int;
	idTHERAPY_ACTIVE_2:int;
	idTHERAPY_PAUSED_2:int;
	inPatientBolus_2:bool;
	number_pbolus_2:int;
	pbolus_timer_2:real;
	sbolusInter_timer_2:real;
	sbolus_req_2:bool;
	sbolus_timer_2:real;
	IM_OUT_New_Infusion_2:bool;
	IM_OUT_Actual_Infusion_Duration_2:real;
	let

		
	(idInfusionMGR_Infusion_Manager_2, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, inPatientBolus_2, number_pbolus_2, IM_OUT_New_Infusion_2, idACTIVE_Arbiter_2, idACTIVE_BASAL_2, idACTIVE_INTERMITTENT_2, idACTIVE_PATIENT_2, idInfusion_Manager_THERAPY_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_ACTIVE_2, idTHERAPY_PAUSED_2, pbolus_timer_2, sbolus_req_2, sbolus_timer_2, sbolusInter_timer_2, IM_OUT_Actual_Infusion_Duration_2) 
	= InfusionMGR_Infusion_Manager_node(idInfusionMGR_Infusion_Manager_1, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, inPatientBolus_1, number_pbolus_1, OP_CMD_IN_Infusion_Initiate, CONFIG_IN_Configured, SYS_STAT_IN_Reservoir_Empty, IM_OUT_New_Infusion_1, CONFIG_IN_Flow_Rate_KVO, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idInfusion_Manager_THERAPY_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_ACTIVE_1, idTHERAPY_PAUSED_1, pbolus_timer_1, sbolus_req_1, sbolus_timer_1, ALARM_IN_Highest_Level_Alarm, CONFIG_IN_Flow_Rate_Basal, CONFIG_IN_Flow_Rate_Intermittent_Bolus, CONFIG_IN_Flow_Rate_Patient_Bolus, CONFIG_IN_Interval_Intermittent_Bolus, OP_CMD_IN_Infusion_Inhibit, sbolusInter_timer_1, step_size, IM_OUT_Actual_Infusion_Duration_1, CONFIG_IN_Infusion_Total_Duration, SYS_STAT_Volume_Infused, CONFIG_IN_VTBI_Total, OP_CMD_IN_Infusion_Cancel, CONFIG_IN_Duration_Intermittent_Bolus, CONFIG_IN_Duration_Patient_Bolus, CONFIG_IN_Lockout_Period_Patient_Bolus, CONFIG_IN_Max_Number_of_Patient_Bolus, PATIENT_IN_Patient_Bolus_Request);

		


	(idInfusionMGR_InfusionMGR, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idInfusionMGR_Infusion_Manager, idInfusion_Manager_THERAPY, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_ACTIVE, idTHERAPY_PAUSED, inPatientBolus, number_pbolus, pbolus_timer, sbolusInter_timer, sbolus_req, sbolus_timer, IM_OUT_New_Infusion, IM_OUT_Actual_Infusion_Duration) 
	= (idInfusionMGR_InfusionMGR_1, IM_OUT_Current_System_Mode_2, IM_OUT_Flow_Rate_Commanded_2, IM_OUT_Is_Locked_Out_2, IM_OUT_Lock_Timer_2, idACTIVE_Arbiter_2, idACTIVE_BASAL_2, idACTIVE_INTERMITTENT_2, idACTIVE_PATIENT_2, idInfusionMGR_Infusion_Manager_2, idInfusion_Manager_THERAPY_2, idPAUSED_Alarm_Paused_2, idPAUSED_Arbiter_2, idPAUSED_Manual_Paused_2, idTHERAPY_ACTIVE_2, idTHERAPY_PAUSED_2, inPatientBolus_2, number_pbolus_2, pbolus_timer_2, sbolusInter_timer_2, sbolus_req_2, sbolus_timer_2, IM_OUT_New_Infusion_2, IM_OUT_Actual_Infusion_Duration_2);
	

	tel

	until true restart POINTInfusionMGR_InfusionMGR



tel


--***************************************************State :InfusionMGR_InfusionMGR Automaton***************************************************

node GPCA_INFUSION_MGR_InfusionMGR(TLM_MODE_IN_System_On:bool;
	OP_CMD_IN_Infusion_Initiate:bool;
	OP_CMD_IN_Infusion_Inhibit:bool;
	OP_CMD_IN_Infusion_Cancel:bool;
	PATIENT_IN_Patient_Bolus_Request:bool;
	CONFIG_IN_Flow_Rate_Basal:int;
	CONFIG_IN_Flow_Rate_Intermittent_Bolus:int;
	CONFIG_IN_Duration_Intermittent_Bolus:real;
	CONFIG_IN_Flow_Rate_Patient_Bolus:int;
	CONFIG_IN_Duration_Patient_Bolus:real;
	CONFIG_IN_Lockout_Period_Patient_Bolus:real;
	CONFIG_IN_Max_Number_of_Patient_Bolus:int;
	CONFIG_IN_Interval_Intermittent_Bolus:real;
	CONFIG_IN_Infusion_Total_Duration:real;
	CONFIG_IN_VTBI_Total:int;
	CONFIG_IN_Configured:int;
	CONFIG_IN_Flow_Rate_KVO:int;
	ALARM_IN_Highest_Level_Alarm:int;
	SYS_STAT_IN_Reservoir_Empty:bool;
	SYS_STAT_Volume_Infused:int)

returns (IM_OUT_Flow_Rate_Commanded:int;
	IM_OUT_Current_System_Mode:int;
	IM_OUT_Lock_Timer:real;
	IM_OUT_New_Infusion:bool;
	IM_OUT_Log_Message_ID:int;
	IM_OUT_Actual_Infusion_Duration:real;
	IM_OUT_Is_Locked_Out:bool);


var IM_OUT_Flow_Rate_Commanded_1: int;

	IM_OUT_Current_System_Mode_1: int;

	IM_OUT_Lock_Timer_1: real;

	IM_OUT_New_Infusion_1: bool;

	IM_OUT_Log_Message_ID_1: int;

	IM_OUT_Actual_Infusion_Duration_1: real;

	IM_OUT_Is_Locked_Out_1: bool;

	inPatientBolus, inPatientBolus_1: bool;

	number_pbolus, number_pbolus_1: int;

	paused_KVO_timer, paused_KVO_timer_1: int;

	pbolus_dur_timer, pbolus_dur_timer_1: int;

	pbolus_timer, pbolus_timer_1: real;

	sbolusInter_timer, sbolusInter_timer_1: real;

	sbolus_dur_timer, sbolus_dur_timer_1: int;

	sbolus_req, sbolus_req_1: bool;

	sbolus_timer, sbolus_timer_1: real;

	idInfusionMGR_InfusionMGR, idInfusionMGR_InfusionMGR_1: int;

	idPAUSED_Arbiter, idPAUSED_Arbiter_1: int;

	idPAUSED_Manual_Paused, idPAUSED_Manual_Paused_1: int;

	idPAUSED_Alarm_Paused, idPAUSED_Alarm_Paused_1: int;

	idTHERAPY_PAUSED, idTHERAPY_PAUSED_1: int;

	idACTIVE_Arbiter, idACTIVE_Arbiter_1: int;

	idINTERMITTENT_OFF, idINTERMITTENT_OFF_1: int;

	idACTIVE_INTERMITTENT, idACTIVE_INTERMITTENT_1: int;

	idACTIVE_PATIENT, idACTIVE_PATIENT_1: int;

	idACTIVE_BASAL, idACTIVE_BASAL_1: int;

	idTHERAPY_ACTIVE, idTHERAPY_ACTIVE_1: int;

	idInfusion_Manager_THERAPY, idInfusion_Manager_THERAPY_1: int;

	idInfusionMGR_Infusion_Manager, idInfusionMGR_Infusion_Manager_1: int;

		step_size: real;

	let

	IM_OUT_Flow_Rate_Commanded_1 = 0 -> pre IM_OUT_Flow_Rate_Commanded;

	IM_OUT_Current_System_Mode_1 = 0 -> pre IM_OUT_Current_System_Mode;

	IM_OUT_Lock_Timer_1 = 0.0 -> pre IM_OUT_Lock_Timer;

	IM_OUT_New_Infusion_1 = false -> pre IM_OUT_New_Infusion;

	IM_OUT_Log_Message_ID_1 = 0 -> pre IM_OUT_Log_Message_ID;

	IM_OUT_Actual_Infusion_Duration_1 = 0.0 -> pre IM_OUT_Actual_Infusion_Duration;

	IM_OUT_Is_Locked_Out_1 = false -> pre IM_OUT_Is_Locked_Out;

	inPatientBolus_1 = false -> pre inPatientBolus;

	number_pbolus_1 = 0 -> pre number_pbolus;

	paused_KVO_timer_1 = 0 -> pre paused_KVO_timer;

	pbolus_dur_timer_1 = 0 -> pre pbolus_dur_timer;

	pbolus_timer_1 = 0.0 -> pre pbolus_timer;

	sbolusInter_timer_1 = 0.0 -> pre sbolusInter_timer;

	sbolus_dur_timer_1 = 0 -> pre sbolus_dur_timer;

	sbolus_req_1 = false -> pre sbolus_req;

	sbolus_timer_1 = 0.0 -> pre sbolus_timer;

	idInfusionMGR_InfusionMGR_1 = 0 -> pre idInfusionMGR_InfusionMGR;

	idPAUSED_Arbiter_1 = 0 -> pre idPAUSED_Arbiter;

	idPAUSED_Manual_Paused_1 = 0 -> pre idPAUSED_Manual_Paused;

	idPAUSED_Alarm_Paused_1 = 0 -> pre idPAUSED_Alarm_Paused;

	idTHERAPY_PAUSED_1 = 0 -> pre idTHERAPY_PAUSED;

	idACTIVE_Arbiter_1 = 0 -> pre idACTIVE_Arbiter;

	idINTERMITTENT_OFF_1 = 0 -> pre idINTERMITTENT_OFF;

	idACTIVE_INTERMITTENT_1 = 0 -> pre idACTIVE_INTERMITTENT;

	idACTIVE_PATIENT_1 = 0 -> pre idACTIVE_PATIENT;

	idACTIVE_BASAL_1 = 0 -> pre idACTIVE_BASAL;

	idTHERAPY_ACTIVE_1 = 0 -> pre idTHERAPY_ACTIVE;

	idInfusion_Manager_THERAPY_1 = 0 -> pre idInfusion_Manager_THERAPY;

	idInfusionMGR_Infusion_Manager_1 = 0 -> pre idInfusionMGR_Infusion_Manager;

	step_size = 1.000000;

	



	(idInfusionMGR_InfusionMGR, IM_OUT_Current_System_Mode, IM_OUT_Flow_Rate_Commanded, IM_OUT_Is_Locked_Out, IM_OUT_Lock_Timer, idACTIVE_Arbiter, idACTIVE_BASAL, idACTIVE_INTERMITTENT, idACTIVE_PATIENT, idInfusionMGR_Infusion_Manager, idInfusion_Manager_THERAPY, idPAUSED_Alarm_Paused, idPAUSED_Arbiter, idPAUSED_Manual_Paused, idTHERAPY_ACTIVE, idTHERAPY_PAUSED, inPatientBolus, number_pbolus, pbolus_timer, sbolusInter_timer, sbolus_req, sbolus_timer, IM_OUT_New_Infusion, IM_OUT_Actual_Infusion_Duration)
	 = InfusionMGR_InfusionMGR_node(idInfusionMGR_InfusionMGR_1, TLM_MODE_IN_System_On, ALARM_IN_Highest_Level_Alarm, CONFIG_IN_Flow_Rate_Basal, CONFIG_IN_Flow_Rate_Intermittent_Bolus, CONFIG_IN_Flow_Rate_KVO, CONFIG_IN_Flow_Rate_Patient_Bolus, CONFIG_IN_Interval_Intermittent_Bolus, IM_OUT_Current_System_Mode_1, IM_OUT_Flow_Rate_Commanded_1, IM_OUT_Is_Locked_Out_1, IM_OUT_Lock_Timer_1, OP_CMD_IN_Infusion_Inhibit, idACTIVE_Arbiter_1, idACTIVE_BASAL_1, idACTIVE_INTERMITTENT_1, idACTIVE_PATIENT_1, idInfusionMGR_Infusion_Manager_1, idInfusion_Manager_THERAPY_1, idPAUSED_Alarm_Paused_1, idPAUSED_Arbiter_1, idPAUSED_Manual_Paused_1, idTHERAPY_ACTIVE_1, idTHERAPY_PAUSED_1, inPatientBolus_1, number_pbolus_1, pbolus_timer_1, sbolusInter_timer_1, sbolus_req_1, sbolus_timer_1, step_size, IM_OUT_New_Infusion_1, CONFIG_IN_Configured, CONFIG_IN_Duration_Intermittent_Bolus, CONFIG_IN_Duration_Patient_Bolus, CONFIG_IN_Infusion_Total_Duration, CONFIG_IN_Lockout_Period_Patient_Bolus, CONFIG_IN_Max_Number_of_Patient_Bolus, CONFIG_IN_VTBI_Total, IM_OUT_Actual_Infusion_Duration_1, OP_CMD_IN_Infusion_Cancel, OP_CMD_IN_Infusion_Initiate, PATIENT_IN_Patient_Bolus_Request, SYS_STAT_IN_Reservoir_Empty, SYS_STAT_Volume_Infused);


--unused outputs
	IM_OUT_Log_Message_ID = 0;

	idINTERMITTENT_OFF = 0;

	paused_KVO_timer = 0;

	pbolus_dur_timer = 0;

	sbolus_dur_timer = 0;

	

tel



node GPCA_INFUSION_MGR (Sys_On_1_1 : bool; Infusion_initial_1_1 : bool; In3_1_1 : bool; In4_1_1 : bool; In5_1_1 : bool; In6_1_1 : int; In7_1_1 : int; In8_1_1 : real; In9_1_1 : int; In10_1_1 : real; In11_1_1 : real; In12_1_1 : int; In13_1_1 : real; In14_1_1 : real; In15_1_1 : int; In16_1_1 : int; In17_1_1 : int; In18_1_1 : int; In19_1_1 : bool; In20_1_1 : int)
returns (Flow_Rate_1_1 : int;
	Sys_mode_2_1 : int;
	out3_3_1 : real;
	out4_4_1 : bool;
	out5_5_1 : int;
	out6_6_1 : real;
	out7_7_1 : bool); 
var
	InfusionMGR_1_1 : int; InfusionMGR_2_1 : int; InfusionMGR_3_1 : real; InfusionMGR_4_1 : bool; InfusionMGR_5_1 : int; InfusionMGR_6_1 : real; InfusionMGR_7_1 : bool;
let 
	(InfusionMGR_1_1, InfusionMGR_2_1, InfusionMGR_3_1, InfusionMGR_4_1, InfusionMGR_5_1, InfusionMGR_6_1, InfusionMGR_7_1) =  GPCA_INFUSION_MGR_InfusionMGR(Sys_On_1_1, Infusion_initial_1_1, In3_1_1, In4_1_1, In5_1_1, In6_1_1, In7_1_1, In8_1_1, In9_1_1, In10_1_1, In11_1_1, In12_1_1, In13_1_1, In14_1_1, In15_1_1, In16_1_1, In17_1_1, In18_1_1, In19_1_1, In20_1_1);
	Flow_Rate_1_1 = InfusionMGR_1_1;
	Sys_mode_2_1 = InfusionMGR_2_1;
	out3_3_1 = InfusionMGR_3_1;
	out4_4_1 = InfusionMGR_4_1;
	out5_5_1 = InfusionMGR_5_1;
	out6_6_1 = InfusionMGR_6_1;
	out7_7_1 = InfusionMGR_7_1;
tel

