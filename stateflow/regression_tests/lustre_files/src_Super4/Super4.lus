-- This file has been generated by cocoSim


-- System nodes

















--During action for state :Super4_D
node Super4_D_du(out_1:real)

returns (out:real);


var 	out_2:real;


let



	out_2 
	=  out_1  + 1.;
	

	(out) 
	= (out_2);
	

tel





-- Entry action for state :Super4_D
node Super4_D_en(idSuper4_Super4_1:int;
	isInner:bool)

returns (idSuper4_Super4:int);


var 	idSuper4_Super4_2:int;


let



	-- set state as active 
	idSuper4_Super4_2 
	= 1058;
	

	(idSuper4_Super4) 
	= (idSuper4_Super4_2);
	

tel





-- Exit action for state :Super4_D
node Super4_D_ex(idSuper4_Super4_1:int;
	isInner:bool)

returns (idSuper4_Super4:int);


var 	idSuper4_Super4_2:int;


let



	-- set state as inactive 
	idSuper4_Super4_2
	 = if (not isInner) then 0 else idSuper4_Super4_1;


	(idSuper4_Super4) 
	= (idSuper4_Super4_1);
	

tel






--During action for state :B_B1
node B_B1_du(out_1:real)

returns (out:real);


var 	out_2:real;


let



	out_2 
	=  out_1  + 1.;
	

	(out) 
	= (out_2);
	

tel





-- Entry action for state :B_B1
node B_B1_en(idSuper4_B_1:int;
	isInner:bool)

returns (idSuper4_B:int);


var 	idSuper4_B_2:int;


let



	-- set state as active 
	idSuper4_B_2 
	= 1060;
	

	(idSuper4_B) 
	= (idSuper4_B_2);
	

tel





-- Exit action for state :B_B1
node B_B1_ex(idSuper4_B_1:int;
	isInner:bool)

returns (idSuper4_B:int);


var 	idSuper4_B_2:int;


let



	-- set state as inactive 
	idSuper4_B_2
	 = if (not isInner) then 0 else idSuper4_B_1;


	(idSuper4_B) 
	= (idSuper4_B_1);
	

tel






--During action for state :Super4_B
node Super4_B_du(out_1:real)

returns (out:real);


var 	out_2:real;


let



	out_2 
	=  out_1  + 1.;
	

	(out) 
	= (out_2);
	

tel





-- Entry action for state :Super4_B
node Super4_B_en(idSuper4_B_1:int;
	idSuper4_Super4_1:int;
	isInner:bool)

returns (idSuper4_B:int;
	idSuper4_Super4:int);


var 	idSuper4_B_2, idSuper4_B_3, idSuper4_B_4, idSuper4_B_5:int;
	idSuper4_Super4_2, idSuper4_Super4_3, idSuper4_Super4_4:int;


let



	-- set state as active 
	idSuper4_Super4_2 
	= 1056;
	

	
-- transition trace :
	--POINT__To__B_B1_1
		(idSuper4_B_2) 
	= B_B1_en(idSuper4_B_1, false);
		

	(idSuper4_B_3, idSuper4_Super4_3) 
	= 

	if ( idSuper4_B_1 = 0) then

	 (idSuper4_B_2, idSuper4_Super4_2)

	 else(idSuper4_B_1, idSuper4_Super4_2);

	

	(idSuper4_B_4) 
	= 
	if ( idSuper4_B_1 = 1060) then
	B_B1_en(idSuper4_B_1, false)
	 else (idSuper4_B_1);

	

	(idSuper4_B_5, idSuper4_Super4_4) 
	= 
		 if ( idSuper4_B_1 = 0) then 
		(idSuper4_B_3, idSuper4_Super4_3)
		 else
		 if ( idSuper4_B_1 = 1060) then 
		(idSuper4_B_4, idSuper4_Super4_3)
		 else (idSuper4_B_1, idSuper4_Super4_2);


	(idSuper4_B, idSuper4_Super4) 
	= (idSuper4_B_5, idSuper4_Super4_4);
	

tel





-- Exit action for state :Super4_B
node Super4_B_ex(idSuper4_B_1:int;
	idSuper4_Super4_1:int;
	isInner:bool)

returns (idSuper4_B:int;
	idSuper4_Super4:int);


var 	idSuper4_B_2, idSuper4_B_3, idSuper4_B_4:int;
	idSuper4_Super4_2:int;


let



	
	(idSuper4_B_2) 
	= 
	if ( idSuper4_B_1 = 1060) then
	B_B1_ex(idSuper4_B_1, false)
	 else (idSuper4_B_1);

	

	(idSuper4_B_3) 
	= 
		 if ( idSuper4_B_1 = 1060) then 
		(idSuper4_B_2)
		 else (idSuper4_B_1);


	-- set state as inactive 
	idSuper4_Super4_2
	 = if (not isInner) then 0 else idSuper4_Super4_1;

	idSuper4_B_4 
	= 0;
	

	(idSuper4_B, idSuper4_Super4) 
	= (idSuper4_B_4, idSuper4_Super4_1);
	

tel






--During action for state :A_A1
node A_A1_du(out_1:real)

returns (out:real);


var 	out_2:real;


let



	out_2 
	=  out_1  + 1.;
	

	(out) 
	= (out_2);
	

tel





-- Entry action for state :A_A1
node A_A1_en(idSuper4_A_1:int;
	isInner:bool)

returns (idSuper4_A:int);


var 	idSuper4_A_2:int;


let



	-- set state as active 
	idSuper4_A_2 
	= 1059;
	

	(idSuper4_A) 
	= (idSuper4_A_2);
	

tel





-- Exit action for state :A_A1
node A_A1_ex(idSuper4_A_1:int;
	isInner:bool)

returns (idSuper4_A:int);


var 	idSuper4_A_2:int;


let



	-- set state as inactive 
	idSuper4_A_2
	 = if (not isInner) then 0 else idSuper4_A_1;


	(idSuper4_A) 
	= (idSuper4_A_1);
	

tel






--During action for state :Super4_A
node Super4_A_du(out_1:real)

returns (out:real);


var 	out_2:real;


let



	out_2 
	=  out_1  + 1.;
	

	(out) 
	= (out_2);
	

tel





-- Entry action for state :Super4_A
node Super4_A_en(idSuper4_A_1:int;
	idSuper4_Super4_1:int;
	isInner:bool)

returns (idSuper4_A:int;
	idSuper4_Super4:int);


var 	idSuper4_A_2, idSuper4_A_3, idSuper4_A_4, idSuper4_A_5:int;
	idSuper4_Super4_2, idSuper4_Super4_3, idSuper4_Super4_4:int;


let



	-- set state as active 
	idSuper4_Super4_2 
	= 1055;
	

	
-- transition trace :
	--POINT__To__A_A1_1
		(idSuper4_A_2) 
	= A_A1_en(idSuper4_A_1, false);
		

	(idSuper4_A_3, idSuper4_Super4_3) 
	= 

	if ( idSuper4_A_1 = 0) then

	 (idSuper4_A_2, idSuper4_Super4_2)

	 else(idSuper4_A_1, idSuper4_Super4_2);

	

	(idSuper4_A_4) 
	= 
	if ( idSuper4_A_1 = 1059) then
	A_A1_en(idSuper4_A_1, false)
	 else (idSuper4_A_1);

	

	(idSuper4_A_5, idSuper4_Super4_4) 
	= 
		 if ( idSuper4_A_1 = 0) then 
		(idSuper4_A_3, idSuper4_Super4_3)
		 else
		 if ( idSuper4_A_1 = 1059) then 
		(idSuper4_A_4, idSuper4_Super4_3)
		 else (idSuper4_A_1, idSuper4_Super4_2);


	(idSuper4_A, idSuper4_Super4) 
	= (idSuper4_A_5, idSuper4_Super4_4);
	

tel





-- Exit action for state :Super4_A
node Super4_A_ex(idSuper4_A_1:int;
	idSuper4_Super4_1:int;
	isInner:bool)

returns (idSuper4_A:int;
	idSuper4_Super4:int);


var 	idSuper4_A_2, idSuper4_A_3, idSuper4_A_4:int;
	idSuper4_Super4_2:int;


let



	
	(idSuper4_A_2) 
	= 
	if ( idSuper4_A_1 = 1059) then
	A_A1_ex(idSuper4_A_1, false)
	 else (idSuper4_A_1);

	

	(idSuper4_A_3) 
	= 
		 if ( idSuper4_A_1 = 1059) then 
		(idSuper4_A_2)
		 else (idSuper4_A_1);


	-- set state as inactive 
	idSuper4_Super4_2
	 = if (not isInner) then 0 else idSuper4_Super4_1;

	idSuper4_A_4 
	= 0;
	

	(idSuper4_A, idSuper4_Super4) 
	= (idSuper4_A_4, idSuper4_Super4_1);
	

tel






--During action for state :Super4_C
node Super4_C_du(out_1:real)

returns (out:real);


var 	out_2:real;


let



	out_2 
	=  out_1  + 1.;
	

	(out) 
	= (out_2);
	

tel





-- Entry action for state :Super4_C
node Super4_C_en(idSuper4_Super4_1:int;
	isInner:bool)

returns (idSuper4_Super4:int);


var 	idSuper4_Super4_2:int;


let



	-- set state as active 
	idSuper4_Super4_2 
	= 1057;
	

	(idSuper4_Super4) 
	= (idSuper4_Super4_2);
	

tel





-- Exit action for state :Super4_C
node Super4_C_ex(idSuper4_Super4_1:int;
	isInner:bool)

returns (idSuper4_Super4:int);


var 	idSuper4_Super4_2:int;


let



	-- set state as inactive 
	idSuper4_Super4_2
	 = if (not isInner) then 0 else idSuper4_Super4_1;


	(idSuper4_Super4) 
	= (idSuper4_Super4_1);
	

tel


--***************************************************State :Super4_B Automaton***************************************************

node Super4_B_node(idSuper4_B_1:int;
	E:bool;
	idSuper4_Super4_1:int;
	F:bool;
	idSuper4_A_1:int;
	out_1:real)

returns (idSuper4_B:int;
	idSuper4_Super4:int;
	idSuper4_A:int;
	out:real);


let

	 automaton super4_b

	state POINTSuper4_B:
	unless (idSuper4_B_1=0) restart POINT__TO__B_B1_1



	unless (idSuper4_B_1=1060) and E restart B_B1__TO__SUPER4_D_1



	unless (idSuper4_B_1=1060) and F restart B_B1__TO__A_A1_2



	unless (idSuper4_B_1=1060) restart B_B1_IDL

	let

		(idSuper4_B, idSuper4_Super4, idSuper4_A, out) 
	= (idSuper4_B_1, idSuper4_Super4_1, idSuper4_A_1, out_1);
	

	tel



	state POINT__TO__B_B1_1:

	 var 	idSuper4_B_2:int;
	let

		-- transition trace :
	--POINT__To__B_B1_1
		(idSuper4_B_2) 
	= B_B1_en(idSuper4_B_1, false);
		

	(idSuper4_B) 
	=  (idSuper4_B_2);

	--add unused variables
	(idSuper4_A, idSuper4_Super4, out) 
	= (idSuper4_A_1, idSuper4_Super4_1, out_1);
	

	tel

	until true restart POINTSuper4_B



	state B_B1__TO__SUPER4_D_1:

	 var 	idSuper4_B_2:int;
	idSuper4_Super4_2, idSuper4_Super4_3:int;
	let

		-- transition trace :
	--B_B1__To__Super4_D_1
		(idSuper4_B_2, idSuper4_Super4_2) 
	= Super4_B_ex(idSuper4_B_1, idSuper4_Super4_1, false);
		

		(idSuper4_Super4_3) 
	= Super4_D_en(idSuper4_Super4_2, false);
		

	(idSuper4_B, idSuper4_Super4) 
	=  (idSuper4_B_2, idSuper4_Super4_3);

	--add unused variables
	(idSuper4_A, out) 
	= (idSuper4_A_1, out_1);
	

	tel

	until true restart POINTSuper4_B



	state B_B1__TO__A_A1_2:

	 var 	idSuper4_B_2:int;
	idSuper4_Super4_2, idSuper4_Super4_3:int;
	idSuper4_A_2, idSuper4_A_3:int;
	let

		-- transition trace :
	--B_B1__To__A_A1_2
		(idSuper4_B_2, idSuper4_Super4_2) 
	= Super4_B_ex(idSuper4_B_1, idSuper4_Super4_1, false);
		

		idSuper4_A_2 
	= 1059;
	
		(idSuper4_A_3, idSuper4_Super4_3) 
	= Super4_A_en(idSuper4_A_2, idSuper4_Super4_2, false);
		

	(idSuper4_B, idSuper4_Super4, idSuper4_A) 
	=  (idSuper4_B_2, idSuper4_Super4_3, idSuper4_A_3);

	--add unused variables
	(out) 
	= (out_1);
	

	tel

	until true restart POINTSuper4_B



	state B_B1_IDL:

	 var 	out_2:real;
	let

		
	(out_2) 
	= B_B1_du(out_1);

		


	(idSuper4_B, idSuper4_Super4, idSuper4_A, out) 
	= (idSuper4_B_1, idSuper4_Super4_1, idSuper4_A_1, out_2);
	

	tel

	until true restart POINTSuper4_B



tel


--***************************************************State :Super4_A Automaton***************************************************

node Super4_A_node(idSuper4_A_1:int;
	E:bool;
	idSuper4_Super4_1:int;
	idSuper4_B_1:int;
	F:bool;
	out_1:real)

returns (idSuper4_A:int;
	idSuper4_Super4:int;
	idSuper4_B:int;
	out:real);


let

	 automaton super4_a

	state POINTSuper4_A:
	unless (idSuper4_A_1=0) restart POINT__TO__A_A1_1



	unless (idSuper4_A_1=1059) and E restart A_A1__TO__B_B1_1



	unless (idSuper4_A_1=1059) and F restart A_A1__TO__SUPER4_C_2



	unless (idSuper4_A_1=1059) restart A_A1_IDL

	let

		(idSuper4_A, idSuper4_Super4, idSuper4_B, out) 
	= (idSuper4_A_1, idSuper4_Super4_1, idSuper4_B_1, out_1);
	

	tel



	state POINT__TO__A_A1_1:

	 var 	idSuper4_A_2:int;
	let

		-- transition trace :
	--POINT__To__A_A1_1
		(idSuper4_A_2) 
	= A_A1_en(idSuper4_A_1, false);
		

	(idSuper4_A) 
	=  (idSuper4_A_2);

	--add unused variables
	(idSuper4_B, idSuper4_Super4, out) 
	= (idSuper4_B_1, idSuper4_Super4_1, out_1);
	

	tel

	until true restart POINTSuper4_A



	state A_A1__TO__B_B1_1:

	 var 	idSuper4_A_2:int;
	idSuper4_Super4_2, idSuper4_Super4_3:int;
	idSuper4_B_2, idSuper4_B_3:int;
	let

		-- transition trace :
	--A_A1__To__B_B1_1
		(idSuper4_A_2, idSuper4_Super4_2) 
	= Super4_A_ex(idSuper4_A_1, idSuper4_Super4_1, false);
		

		idSuper4_B_2 
	= 1060;
	
		(idSuper4_B_3, idSuper4_Super4_3) 
	= Super4_B_en(idSuper4_B_2, idSuper4_Super4_2, false);
		

	(idSuper4_A, idSuper4_Super4, idSuper4_B) 
	=  (idSuper4_A_2, idSuper4_Super4_3, idSuper4_B_3);

	--add unused variables
	(out) 
	= (out_1);
	

	tel

	until true restart POINTSuper4_A



	state A_A1__TO__SUPER4_C_2:

	 var 	idSuper4_A_2:int;
	idSuper4_Super4_2, idSuper4_Super4_3:int;
	let

		-- transition trace :
	--A_A1__To__Super4_C_2
		(idSuper4_A_2, idSuper4_Super4_2) 
	= Super4_A_ex(idSuper4_A_1, idSuper4_Super4_1, false);
		

		(idSuper4_Super4_3) 
	= Super4_C_en(idSuper4_Super4_2, false);
		

	(idSuper4_A, idSuper4_Super4, idSuper4_B) 
	=  (idSuper4_A_2, idSuper4_Super4_3, idSuper4_B_1);

	--add unused variables
	(out) 
	= (out_1);
	

	tel

	until true restart POINTSuper4_A



	state A_A1_IDL:

	 var 	out_2:real;
	let

		
	(out_2) 
	= A_A1_du(out_1);

		


	(idSuper4_A, idSuper4_Super4, idSuper4_B, out) 
	= (idSuper4_A_1, idSuper4_Super4_1, idSuper4_B_1, out_2);
	

	tel

	until true restart POINTSuper4_A



tel


--***************************************************State :Super4_Super4 Automaton***************************************************

node Super4_Super4_node(idSuper4_Super4_1:int;
	G:bool;
	idSuper4_A_1:int;
	idSuper4_B_1:int;
	F:bool;
	E:bool;
	out_1:real)

returns (idSuper4_Super4:int;
	idSuper4_A:int;
	idSuper4_B:int;
	out:real);


let

	 automaton super4_super4

	state POINTSuper4_Super4:
	unless (idSuper4_Super4_1=0) restart POINT__TO__SUPER4_C_1



	unless (idSuper4_Super4_1=1055) and G restart SUPER4_A__TO__SUPER4_B_1



	unless (idSuper4_Super4_1=1056) and G restart SUPER4_B__TO__SUPER4_A_1



	unless (idSuper4_Super4_1=1057) and F restart SUPER4_C__TO__SUPER4_D_1



	unless (idSuper4_Super4_1=1057) and E restart SUPER4_C__TO__A_A1_2



	unless (idSuper4_Super4_1=1058) and E restart SUPER4_D__TO__SUPER4_C_1



	unless (idSuper4_Super4_1=1058) and F restart SUPER4_D__TO__B_B1_2



	unless (idSuper4_Super4_1=1055) restart SUPER4_A_IDL

	unless (idSuper4_Super4_1=1056) restart SUPER4_B_IDL

	unless (idSuper4_Super4_1=1057) restart SUPER4_C_IDL

	unless (idSuper4_Super4_1=1058) restart SUPER4_D_IDL

	let

		(idSuper4_Super4, idSuper4_A, idSuper4_B, out) 
	= (idSuper4_Super4_1, idSuper4_A_1, idSuper4_B_1, out_1);
	

	tel



	state POINT__TO__SUPER4_C_1:

	 var 	idSuper4_Super4_2:int;
	let

		-- transition trace :
	--POINT__To__Super4_C_1
		(idSuper4_Super4_2) 
	= Super4_C_en(idSuper4_Super4_1, false);
		

	(idSuper4_Super4) 
	=  (idSuper4_Super4_2);

	--add unused variables
	(idSuper4_A, idSuper4_B, out) 
	= (idSuper4_A_1, idSuper4_B_1, out_1);
	

	tel

	until true restart POINTSuper4_Super4



	state SUPER4_A__TO__SUPER4_B_1:

	 var 	idSuper4_Super4_2, idSuper4_Super4_3:int;
	idSuper4_A_2:int;
	idSuper4_B_2:int;
	let

		-- transition trace :
	--Super4_A__To__Super4_B_1
		(idSuper4_A_2, idSuper4_Super4_2) 
	= Super4_A_ex(idSuper4_A_1, idSuper4_Super4_1, false);
		

		(idSuper4_B_2, idSuper4_Super4_3) 
	= Super4_B_en(idSuper4_B_1, idSuper4_Super4_2, false);
		

	(idSuper4_Super4, idSuper4_A, idSuper4_B) 
	=  (idSuper4_Super4_3, idSuper4_A_2, idSuper4_B_2);

	--add unused variables
	(out) 
	= (out_1);
	

	tel

	until true restart POINTSuper4_Super4



	state SUPER4_B__TO__SUPER4_A_1:

	 var 	idSuper4_Super4_2, idSuper4_Super4_3:int;
	idSuper4_A_2:int;
	idSuper4_B_2:int;
	let

		-- transition trace :
	--Super4_B__To__Super4_A_1
		(idSuper4_B_2, idSuper4_Super4_2) 
	= Super4_B_ex(idSuper4_B_1, idSuper4_Super4_1, false);
		

		(idSuper4_A_2, idSuper4_Super4_3) 
	= Super4_A_en(idSuper4_A_1, idSuper4_Super4_2, false);
		

	(idSuper4_Super4, idSuper4_A, idSuper4_B) 
	=  (idSuper4_Super4_3, idSuper4_A_2, idSuper4_B_2);

	--add unused variables
	(out) 
	= (out_1);
	

	tel

	until true restart POINTSuper4_Super4



	state SUPER4_C__TO__SUPER4_D_1:

	 var 	idSuper4_Super4_2, idSuper4_Super4_3:int;
	let

		-- transition trace :
	--Super4_C__To__Super4_D_1
		(idSuper4_Super4_2) 
	= Super4_C_ex(idSuper4_Super4_1, false);
		

		(idSuper4_Super4_3) 
	= Super4_D_en(idSuper4_Super4_2, false);
		

	(idSuper4_Super4, idSuper4_A, idSuper4_B) 
	=  (idSuper4_Super4_3, idSuper4_A_1, idSuper4_B_1);

	--add unused variables
	(out) 
	= (out_1);
	

	tel

	until true restart POINTSuper4_Super4



	state SUPER4_C__TO__A_A1_2:

	 var 	idSuper4_Super4_2, idSuper4_Super4_3:int;
	idSuper4_A_2, idSuper4_A_3:int;
	let

		-- transition trace :
	--Super4_C__To__A_A1_2
		(idSuper4_Super4_2) 
	= Super4_C_ex(idSuper4_Super4_1, false);
		

		idSuper4_A_2 
	= 1059;
	
		(idSuper4_A_3, idSuper4_Super4_3) 
	= Super4_A_en(idSuper4_A_2, idSuper4_Super4_2, false);
		

	(idSuper4_Super4, idSuper4_A, idSuper4_B) 
	=  (idSuper4_Super4_3, idSuper4_A_3, idSuper4_B_1);

	--add unused variables
	(out) 
	= (out_1);
	

	tel

	until true restart POINTSuper4_Super4



	state SUPER4_D__TO__SUPER4_C_1:

	 var 	idSuper4_Super4_2, idSuper4_Super4_3:int;
	let

		-- transition trace :
	--Super4_D__To__Super4_C_1
		(idSuper4_Super4_2) 
	= Super4_D_ex(idSuper4_Super4_1, false);
		

		(idSuper4_Super4_3) 
	= Super4_C_en(idSuper4_Super4_2, false);
		

	(idSuper4_Super4, idSuper4_A, idSuper4_B) 
	=  (idSuper4_Super4_3, idSuper4_A_1, idSuper4_B_1);

	--add unused variables
	(out) 
	= (out_1);
	

	tel

	until true restart POINTSuper4_Super4



	state SUPER4_D__TO__B_B1_2:

	 var 	idSuper4_Super4_2, idSuper4_Super4_3:int;
	idSuper4_B_2, idSuper4_B_3:int;
	let

		-- transition trace :
	--Super4_D__To__B_B1_2
		(idSuper4_Super4_2) 
	= Super4_D_ex(idSuper4_Super4_1, false);
		

		idSuper4_B_2 
	= 1060;
	
		(idSuper4_B_3, idSuper4_Super4_3) 
	= Super4_B_en(idSuper4_B_2, idSuper4_Super4_2, false);
		

	(idSuper4_Super4, idSuper4_A, idSuper4_B) 
	=  (idSuper4_Super4_3, idSuper4_A_1, idSuper4_B_3);

	--add unused variables
	(out) 
	= (out_1);
	

	tel

	until true restart POINTSuper4_Super4



	state SUPER4_A_IDL:

	 var 	idSuper4_Super4_2:int;
	idSuper4_A_2:int;
	idSuper4_B_2:int;
	out_2, out_3:real;
	let

		
	(out_2) 
	= Super4_A_du(out_1);

		

	(idSuper4_A_2, idSuper4_Super4_2, idSuper4_B_2, out_3) 
	= Super4_A_node(idSuper4_A_1, E, idSuper4_Super4_1, idSuper4_B_1, F, out_2);

		


	(idSuper4_Super4, idSuper4_A, idSuper4_B, out) 
	= (idSuper4_Super4_2, idSuper4_A_2, idSuper4_B_2, out_3);
	

	tel

	until true restart POINTSuper4_Super4



	state SUPER4_B_IDL:

	 var 	idSuper4_Super4_2:int;
	idSuper4_A_2:int;
	idSuper4_B_2:int;
	out_2, out_3:real;
	let

		
	(out_2) 
	= Super4_B_du(out_1);

		

	(idSuper4_B_2, idSuper4_Super4_2, idSuper4_A_2, out_3) 
	= Super4_B_node(idSuper4_B_1, E, idSuper4_Super4_1, F, idSuper4_A_1, out_2);

		


	(idSuper4_Super4, idSuper4_A, idSuper4_B, out) 
	= (idSuper4_Super4_2, idSuper4_A_2, idSuper4_B_2, out_3);
	

	tel

	until true restart POINTSuper4_Super4



	state SUPER4_C_IDL:

	 var 	out_2:real;
	let

		
	(out_2) 
	= Super4_C_du(out_1);

		


	(idSuper4_Super4, idSuper4_A, idSuper4_B, out) 
	= (idSuper4_Super4_1, idSuper4_A_1, idSuper4_B_1, out_2);
	

	tel

	until true restart POINTSuper4_Super4



	state SUPER4_D_IDL:

	 var 	out_2:real;
	let

		
	(out_2) 
	= Super4_D_du(out_1);

		


	(idSuper4_Super4, idSuper4_A, idSuper4_B, out) 
	= (idSuper4_Super4_1, idSuper4_A_1, idSuper4_B_1, out_2);
	

	tel

	until true restart POINTSuper4_Super4



tel


--***************************************************State :Super4_Super4 Automaton***************************************************

node Super4_Super4(E:bool;
	G:bool;
	F:bool)

returns (out:real);


var out_1: real;

	idSuper4_Super4, idSuper4_Super4_1: int;

	idSuper4_B, idSuper4_B_1: int;

	idSuper4_A, idSuper4_A_1: int;

		idSuper4_Super4_2, idSuper4_Super4_3:int;
	idSuper4_A_2, idSuper4_A_3:int;
	idSuper4_B_2, idSuper4_B_3:int;
	out_2, out_3:real;
let

	out_1 = 0.0 -> pre out;

	idSuper4_Super4_1 = 0 -> pre idSuper4_Super4;

	idSuper4_B_1 = 0 -> pre idSuper4_B;

	idSuper4_A_1 = 0 -> pre idSuper4_A;

	



	(idSuper4_Super4_2, idSuper4_A_2, idSuper4_B_2, out_2)
	 = 

	 if E then Super4_Super4_node(idSuper4_Super4_1, false, idSuper4_A_1, idSuper4_B_1, false, E, out_1)

	 else (idSuper4_Super4_1, idSuper4_A_1, idSuper4_B_1, out_1);

	



	(idSuper4_Super4_3, idSuper4_A_3, idSuper4_B_3, out_3)
	 = 

	 if G then Super4_Super4_node(idSuper4_Super4_2, G, idSuper4_A_2, idSuper4_B_2, false, false, out_2)

	 else (idSuper4_Super4_2, idSuper4_A_2, idSuper4_B_2, out_2);

	



	(idSuper4_Super4, idSuper4_A, idSuper4_B, out)
	 = 

	 if F then Super4_Super4_node(idSuper4_Super4_3, false, idSuper4_A_3, idSuper4_B_3, F, false, out_3)

	 else (idSuper4_Super4_3, idSuper4_A_3, idSuper4_B_3, out_3);

	


--unused outputs
	

tel



node Super4 (E_1_1 : real; F_1_1 : real; E2_1_1 : real)
returns (Out_1_1 : real); 
var
	Mux_1_1 : real; Mux_1_2 : real; Mux_1_3 : real;
	Super4_1_1 : real;
	Mux_1_1_event: bool;
	Mux_1_2_event: bool;
	Mux_1_3_event: bool;
let 
	Mux_1_1 = E_1_1 ;
	Mux_1_2 = F_1_1 ;
	Mux_1_3 = E2_1_1 ;
	Mux_1_1_event = false -> ((pre(Mux_1_1) > 0.0 and Mux_1_1 <= 0.0) or (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0));
	Mux_1_2_event = false -> ((pre(Mux_1_2) > 0.0 and Mux_1_2 <= 0.0) or (pre(Mux_1_2) <= 0.0 and Mux_1_2 > 0.0));
	Mux_1_3_event = false -> ((pre(Mux_1_3) > 0.0 and Mux_1_3 <= 0.0) or (pre(Mux_1_3) <= 0.0 and Mux_1_3 > 0.0));
	Super4_1_1 =  Super4_Super4(Mux_1_1_event, Mux_1_2_event, Mux_1_3_event);
	Out_1_1 = Super4_1_1;
tel

