-- This file has been generated by cocoSim

#open <conv>
-- System nodes
node enable_test_EnabledandTriggeredSubsystem1 (In1_1_1 : real; enable_test_EnabledandTriggeredSubsystem1_Enable_1_1: bool)
returns (Out1_1_1 : bool); 
var
	Enable_1_1 : bool;
	Trigger_1_1 : real;
	Add_1_1 : real;
	CompareToZero_1_1 : bool;
	LogicalOperator_1_1 : bool;
let 
	Enable_1_1 = enable_test_EnabledandTriggeredSubsystem1_Enable_1_1;
	Trigger_1_1 = -1.0;
	Add_1_1 = Trigger_1_1 + In1_1_1;
	CompareToZero_1_1 = Add_1_1 <= 0.0000000000;
	LogicalOperator_1_1 = CompareToZero_1_1 and Enable_1_1;
	Out1_1_1 = LogicalOperator_1_1;
tel

node enable_test_EnabledandTriggeredSubsystem (In1_1_1 : real)
returns (Out1_1_1 : real); 
let 
	Out1_1_1 = In1_1_1;
tel

node enable_test_EnabledSubsystem4 (In1_1_1 : real; enable_test_EnabledSubsystem4_Enable_1_1: real; enable_test_EnabledSubsystem4_enable_reset: bool)
returns (Out1_1_1 : real;
	Out2_2_1 : real;
	Out3_3_1 : real;
	Out4_4_1 : real); 
var
	Enable_1_1 : real;
	Add_1_1 : real;
	DiscreteTimeIntegrator_1_1 : real;
	DiscreteTimeIntegrator1_1_1 : real;
	DiscreteTimeIntegrator2_1_1 : real;
	DiscreteTimeIntegrator3_1_1 : real;
	DiscreteTimeIntegrator1_Reset_Trigger1_1: bool;
	DiscreteTimeIntegrator3_Reset_Trigger1_1: bool;
let 
	Enable_1_1 = enable_test_EnabledSubsystem4_Enable_1_1;
	Add_1_1 = Enable_1_1 + In1_1_1;
	DiscreteTimeIntegrator_1_1 = if enable_test_EnabledSubsystem4_enable_reset then 0.0000000000 else 0.0000000000 -> (1.0000000000 * 1.0000000000)*(pre Add_1_1) + pre DiscreteTimeIntegrator_1_1;
	DiscreteTimeIntegrator1_Reset_Trigger1_1 = false -> (pre(Enable_1_1) > 0.0 and Enable_1_1 <= 0.0);
	DiscreteTimeIntegrator1_1_1 = if enable_test_EnabledSubsystem4_enable_reset then 0.0000000000 else 0.0000000000 -> if DiscreteTimeIntegrator1_Reset_Trigger1_1 then 0.0000000000 else (1.0000000000 * 1.0000000000)*(pre Add_1_1) + pre DiscreteTimeIntegrator1_1_1;
	DiscreteTimeIntegrator2_1_1 = if enable_test_EnabledSubsystem4_enable_reset then In1_1_1 else In1_1_1 -> (1.0000000000 * 1.0000000000)*(pre Add_1_1) + pre DiscreteTimeIntegrator2_1_1;
	DiscreteTimeIntegrator3_Reset_Trigger1_1 = false -> Enable_1_1>0.0 or (not((pre(Enable_1_1) > 0.0 and Enable_1_1 <= 0.0) or (pre(Enable_1_1) <= 0.0 and Enable_1_1 > 0.0)));
	DiscreteTimeIntegrator3_1_1 = if enable_test_EnabledSubsystem4_enable_reset then In1_1_1 else In1_1_1 -> if DiscreteTimeIntegrator3_Reset_Trigger1_1 then In1_1_1 else (1.0000000000 * 1.0000000000)*(pre Add_1_1) + pre DiscreteTimeIntegrator3_1_1;
	Out1_1_1 = DiscreteTimeIntegrator_1_1;
	Out2_2_1 = DiscreteTimeIntegrator1_1_1;
	Out3_3_1 = DiscreteTimeIntegrator2_1_1;
	Out4_4_1 = DiscreteTimeIntegrator3_1_1;
tel

node enable_test_EnabledSubsystem3 (In1_1_1 : real; enable_test_EnabledSubsystem3_Enable_1_1: real)
returns (Out1_1_1 : real); 
var
	Enable_1_1 : real;
	Add_1_1 : real;
let 
	Enable_1_1 = enable_test_EnabledSubsystem3_Enable_1_1;
	Add_1_1 = Enable_1_1 + In1_1_1;
	Out1_1_1 = Add_1_1;
tel

node enable_test_EnabledSubsystem2 (In1_1_1 : real; enable_test_EnabledSubsystem2_Enable_1_1: int; enable_test_EnabledSubsystem2_Enable_1_2: int; enable_test_EnabledSubsystem2_Enable_1_3: int; enable_test_EnabledSubsystem2_enable_reset: bool)
returns (Out1_1_1 : real; Out1_1_2 : real; Out1_1_3 : real); 
var
	Enable_1_1 : int; Enable_1_2 : int; Enable_1_3 : int;
	Add_1_1 : real; Add_1_2 : real; Add_1_3 : real;
	Memory_1_1 : real; Memory_1_2 : real; Memory_1_3 : real;
let 
	Enable_1_1 = enable_test_EnabledSubsystem2_Enable_1_1;
	Enable_1_2 = enable_test_EnabledSubsystem2_Enable_1_2;
	Enable_1_3 = enable_test_EnabledSubsystem2_Enable_1_3;
	Add_1_1 = (int_to_real(Enable_1_1)) + In1_1_1;
	Add_1_2 = (int_to_real(Enable_1_2)) + In1_1_1;
	Add_1_3 = (int_to_real(Enable_1_3)) + In1_1_1;
	Memory_1_1 = if enable_test_EnabledSubsystem2_enable_reset then 0.0000000000 else 0.0000000000 -> pre Add_1_1;
	Memory_1_2 = if enable_test_EnabledSubsystem2_enable_reset then 0.0000000000 else 0.0000000000 -> pre Add_1_2;
	Memory_1_3 = if enable_test_EnabledSubsystem2_enable_reset then 0.0000000000 else 0.0000000000 -> pre Add_1_3;
	Out1_1_1 = Memory_1_1;
	Out1_1_2 = Memory_1_2;
	Out1_1_3 = Memory_1_3;
tel

node enable_test_EnabledSubsystem1 (In1_1_1 : real; enable_test_EnabledSubsystem1_Enable_1_1: bool; enable_test_EnabledSubsystem1_enable_reset: bool)
returns (Out1_1_1 : real); 
var
	Enable_1_1 : bool;
	Add_1_1 : real;
	UnitDelay_1_1 : real;
let 
	Enable_1_1 = enable_test_EnabledSubsystem1_Enable_1_1;
	Add_1_1 = (if Enable_1_1 then 1.0 else 0.0) + In1_1_1;
	UnitDelay_1_1 = if enable_test_EnabledSubsystem1_enable_reset then 0.0000000000 else 0.0000000000 -> pre Add_1_1;
	Out1_1_1 = UnitDelay_1_1;
tel

node enable_test_EnabledSubsystem (In1_1_1 : real)
returns (Out1_1_1 : real); 
let 
	Out1_1_1 = In1_1_1;
tel

node enable_test (In1_1_1 : real; In2_1_1 : bool; In3_1_1 : int; In3_1_2 : int; In3_1_3 : int; In4_1_1 : real; In5_1_1 : real; In6_1_1 : real)
returns (Out3_1_1 : real;
	Out1_2_1 : real;
	Out2_3_1 : real;
	Out4_4_1 : real; Out4_4_2 : real; Out4_4_3 : real;
	Out5_5_1 : real;
	Out6_6_1 : bool;
	Out7_7_1 : real;
	Out8_8_1 : real;
	Out9_9_1 : real;
	Out10_10_1 : real); 
var
	EnabledSubsystem_1_1 : real;
	EnabledSubsystem1_1_1 : real;
	EnabledSubsystem2_1_1 : real; EnabledSubsystem2_1_2 : real; EnabledSubsystem2_1_3 : real;
	EnabledSubsystem3_1_1 : real;
	EnabledSubsystem4_1_1 : real; EnabledSubsystem4_2_1 : real; EnabledSubsystem4_3_1 : real; EnabledSubsystem4_4_1 : real;
	EnabledandTriggeredSubsystem_1_1 : real;
	EnabledandTriggeredSubsystem1_1_1 : bool;
	i_virtual_local : real;
	EnabledSubsystem1_reset_cond: bool;
	EnabledSubsystem2_reset_cond: bool;
	EnabledSubsystem4_reset_cond: bool;
	EnabledandTriggeredSubsystemIn2_1_1_cond_str_trigger: bool;
	EnabledandTriggeredSubsystem1In2_1_1_cond_str_trigger: bool;
let 
	EnabledSubsystem_1_1 = if (In2_1_1) then enable_test_EnabledSubsystem(In1_1_1) else pre EnabledSubsystem_1_1;
	EnabledSubsystem1_reset_cond = (In2_1_1) and not pre ((In2_1_1));
	EnabledSubsystem1_1_1 = if (In2_1_1) then enable_test_EnabledSubsystem1(In1_1_1, In2_1_1, EnabledSubsystem1_reset_cond) else pre EnabledSubsystem1_1_1;
	EnabledSubsystem2_reset_cond = (In3_1_1 > 0 or In3_1_2 > 0 or In3_1_3 > 0) and not pre ((In3_1_1 > 0 or In3_1_2 > 0 or In3_1_3 > 0));
	(EnabledSubsystem2_1_1, EnabledSubsystem2_1_2, EnabledSubsystem2_1_3) = if (In3_1_1 > 0 or In3_1_2 > 0 or In3_1_3 > 0) then enable_test_EnabledSubsystem2(In1_1_1, In3_1_1, In3_1_2, In3_1_3, EnabledSubsystem2_reset_cond) else (pre EnabledSubsystem2_1_1, pre EnabledSubsystem2_1_2, pre EnabledSubsystem2_1_3);
	EnabledSubsystem3_1_1 = if (In4_1_1 > 0.0) then enable_test_EnabledSubsystem3(In1_1_1, In4_1_1) else pre EnabledSubsystem3_1_1;
	EnabledSubsystem4_reset_cond = (In6_1_1 > 0.0) and not pre ((In6_1_1 > 0.0));
	(EnabledSubsystem4_1_1, EnabledSubsystem4_2_1, EnabledSubsystem4_3_1, EnabledSubsystem4_4_1) = if (In6_1_1 > 0.0) then enable_test_EnabledSubsystem4(In1_1_1, In6_1_1, EnabledSubsystem4_reset_cond) else (pre EnabledSubsystem4_1_1, pre EnabledSubsystem4_2_1, pre EnabledSubsystem4_3_1, pre EnabledSubsystem4_4_1);
	EnabledandTriggeredSubsystemIn2_1_1_cond_str_trigger = false -> (not(pre In2_1_1) and In2_1_1);
	EnabledandTriggeredSubsystem_1_1 = if (EnabledandTriggeredSubsystemIn2_1_1_cond_str_trigger and In2_1_1) then enable_test_EnabledandTriggeredSubsystem(In1_1_1) else pre EnabledandTriggeredSubsystem_1_1;
	EnabledandTriggeredSubsystem1In2_1_1_cond_str_trigger = false -> (pre(In2_1_1) and not(In2_1_1));
	EnabledandTriggeredSubsystem1_1_1 = if (EnabledandTriggeredSubsystem1In2_1_1_cond_str_trigger and In2_1_1) then enable_test_EnabledandTriggeredSubsystem1(In5_1_1, In2_1_1) else pre EnabledandTriggeredSubsystem1_1_1;
	Out3_1_1 = EnabledSubsystem_1_1;
	Out1_2_1 = EnabledandTriggeredSubsystem_1_1;
	Out2_3_1 = EnabledSubsystem1_1_1;
	Out4_4_1 = EnabledSubsystem2_1_1;
	Out4_4_2 = EnabledSubsystem2_1_2;
	Out4_4_3 = EnabledSubsystem2_1_3;
	Out5_5_1 = EnabledSubsystem3_1_1;
	Out6_6_1 = EnabledandTriggeredSubsystem1_1_1;
	Out7_7_1 = EnabledSubsystem4_1_1;
	Out8_8_1 = EnabledSubsystem4_2_1;
	Out9_9_1 = EnabledSubsystem4_3_1;
	Out10_10_1 = EnabledSubsystem4_4_1;
	i_virtual_local= 0.0 -> 1.0;
tel

