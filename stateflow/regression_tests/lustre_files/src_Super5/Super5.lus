-- This file has been generated by cocoSim


-- System nodes

























-- Entry action for state :B_B1
node B_B1_en(idSuper5_B_1:int;
	s_1:real;
	isInner:bool)

returns (idSuper5_B:int;
	s:real);


var 	idSuper5_B_2:int;
	s_2:real;


let



	-- set state as active 
	idSuper5_B_2 
	= 1126;
	

	s_2 
	= if (not isInner) then 4.
	 else s_1;
	

	(idSuper5_B, s) 
	= (idSuper5_B_2, s_2);
	

tel





--During action for state :B_B1
node B_B1_du(d_1:real)

returns (d:real);


var 	d_2:real;


let



	d_2 
	=  d_1  + 1.;
	

	(d) 
	= (d_2);
	

tel





-- Exit action for state :B_B1
node B_B1_ex(idSuper5_B_1:int;
	isInner:bool)

returns (idSuper5_B:int);


var 	idSuper5_B_2:int;


let



	-- set state as inactive 
	idSuper5_B_2
	 = if (not isInner) then 0 else idSuper5_B_1;


	(idSuper5_B) 
	= (idSuper5_B_1);
	

tel






-- Entry action for state :Super5_B
node Super5_B_en(idSuper5_B_1:int;
	idSuper5_Super5_1:int;
	s_1:real;
	isInner:bool)

returns (idSuper5_B:int;
	idSuper5_Super5:int;
	s:real);


var 	idSuper5_B_2, idSuper5_B_3, idSuper5_B_4, idSuper5_B_5:int;
	idSuper5_Super5_2, idSuper5_Super5_3, idSuper5_Super5_4:int;
	s_2, s_3, s_4, s_5, s_6:real;


let



	-- set state as active 
	idSuper5_Super5_2 
	= 1122;
	

	s_2 
	= if (not isInner) then 3.
	 else s_1;
	

	
-- transition trace :
	--POINT__To__B_B1_1
		(idSuper5_B_2, s_3) 
	= B_B1_en(idSuper5_B_1, s_2, false);
		

	(idSuper5_B_3, idSuper5_Super5_3, s_4) 
	= 

	if ( idSuper5_B_1 = 0) then

	 (idSuper5_B_2, idSuper5_Super5_2, s_3)

	 else(idSuper5_B_1, idSuper5_Super5_2, s_2);

	

	(idSuper5_B_4, s_5) 
	= 
	if ( idSuper5_B_1 = 1126) then
	B_B1_en(idSuper5_B_1, s_2, false)
	 else (idSuper5_B_1, s_2);

	

	(idSuper5_B_5, idSuper5_Super5_4, s_6) 
	= 
		 if ( idSuper5_B_1 = 0) then 
		(idSuper5_B_3, idSuper5_Super5_3, s_4)
		 else
		 if ( idSuper5_B_1 = 1126) then 
		(idSuper5_B_4, idSuper5_Super5_3, s_5)
		 else (idSuper5_B_1, idSuper5_Super5_2, s_2);


	(idSuper5_B, idSuper5_Super5, s) 
	= (idSuper5_B_5, idSuper5_Super5_4, s_6);
	

tel





--During action for state :Super5_B
node Super5_B_du(d_1:real)

returns (d:real);


var 	d_2:real;


let



	d_2 
	=  d_1  + 1.;
	

	(d) 
	= (d_2);
	

tel





-- Exit action for state :Super5_B
node Super5_B_ex(idSuper5_B_1:int;
	idSuper5_Super5_1:int;
	isInner:bool)

returns (idSuper5_B:int;
	idSuper5_Super5:int);


var 	idSuper5_B_2, idSuper5_B_3, idSuper5_B_4:int;
	idSuper5_Super5_2:int;


let



	
	(idSuper5_B_2) 
	= 
	if ( idSuper5_B_1 = 1126) then
	B_B1_ex(idSuper5_B_1, false)
	 else (idSuper5_B_1);

	

	(idSuper5_B_3) 
	= 
		 if ( idSuper5_B_1 = 1126) then 
		(idSuper5_B_2)
		 else (idSuper5_B_1);


	-- set state as inactive 
	idSuper5_Super5_2
	 = if (not isInner) then 0 else idSuper5_Super5_1;

	idSuper5_B_4 
	= 0;
	

	(idSuper5_B, idSuper5_Super5) 
	= (idSuper5_B_4, idSuper5_Super5_1);
	

tel






-- Entry action for state :C_C1
node C_C1_en(idSuper5_C_1:int;
	s_1:real;
	isInner:bool)

returns (idSuper5_C:int;
	s:real);


var 	idSuper5_C_2:int;
	s_2:real;


let



	-- set state as active 
	idSuper5_C_2 
	= 1124;
	

	s_2 
	= if (not isInner) then 8.
	 else s_1;
	

	(idSuper5_C, s) 
	= (idSuper5_C_2, s_2);
	

tel





--During action for state :C_C1
node C_C1_du(d_1:real)

returns (d:real);


var 	d_2:real;


let



	d_2 
	=  d_1  + 1.;
	

	(d) 
	= (d_2);
	

tel





-- Exit action for state :C_C1
node C_C1_ex(idSuper5_C_1:int;
	isInner:bool)

returns (idSuper5_C:int);


var 	idSuper5_C_2:int;


let



	-- set state as inactive 
	idSuper5_C_2
	 = if (not isInner) then 0 else idSuper5_C_1;


	(idSuper5_C) 
	= (idSuper5_C_1);
	

tel






-- Entry action for state :Super5_C
node Super5_C_en(idSuper5_C_1:int;
	idSuper5_Super5_1:int;
	s_1:real;
	isInner:bool)

returns (idSuper5_C:int;
	idSuper5_Super5:int;
	s:real);


var 	idSuper5_C_2, idSuper5_C_3, idSuper5_C_4, idSuper5_C_5:int;
	idSuper5_Super5_2, idSuper5_Super5_3, idSuper5_Super5_4:int;
	s_2, s_3, s_4, s_5, s_6:real;


let



	-- set state as active 
	idSuper5_Super5_2 
	= 1128;
	

	s_2 
	= if (not isInner) then 7.
	 else s_1;
	

	
-- transition trace :
	--POINT__To__C_C1_1
		(idSuper5_C_2, s_3) 
	= C_C1_en(idSuper5_C_1, s_2, false);
		

	(idSuper5_C_3, idSuper5_Super5_3, s_4) 
	= 

	if ( idSuper5_C_1 = 0) then

	 (idSuper5_C_2, idSuper5_Super5_2, s_3)

	 else(idSuper5_C_1, idSuper5_Super5_2, s_2);

	

	(idSuper5_C_4, s_5) 
	= 
	if ( idSuper5_C_1 = 1124) then
	C_C1_en(idSuper5_C_1, s_2, false)
	 else (idSuper5_C_1, s_2);

	

	(idSuper5_C_5, idSuper5_Super5_4, s_6) 
	= 
		 if ( idSuper5_C_1 = 0) then 
		(idSuper5_C_3, idSuper5_Super5_3, s_4)
		 else
		 if ( idSuper5_C_1 = 1124) then 
		(idSuper5_C_4, idSuper5_Super5_3, s_5)
		 else (idSuper5_C_1, idSuper5_Super5_2, s_2);


	(idSuper5_C, idSuper5_Super5, s) 
	= (idSuper5_C_5, idSuper5_Super5_4, s_6);
	

tel





--During action for state :Super5_C
node Super5_C_du(d_1:real)

returns (d:real);


var 	d_2:real;


let



	d_2 
	=  d_1  + 1.;
	

	(d) 
	= (d_2);
	

tel





-- Exit action for state :Super5_C
node Super5_C_ex(idSuper5_C_1:int;
	idSuper5_Super5_1:int;
	isInner:bool)

returns (idSuper5_C:int;
	idSuper5_Super5:int);


var 	idSuper5_C_2, idSuper5_C_3, idSuper5_C_4:int;
	idSuper5_Super5_2:int;


let



	
	(idSuper5_C_2) 
	= 
	if ( idSuper5_C_1 = 1124) then
	C_C1_ex(idSuper5_C_1, false)
	 else (idSuper5_C_1);

	

	(idSuper5_C_3) 
	= 
		 if ( idSuper5_C_1 = 1124) then 
		(idSuper5_C_2)
		 else (idSuper5_C_1);


	-- set state as inactive 
	idSuper5_Super5_2
	 = if (not isInner) then 0 else idSuper5_Super5_1;

	idSuper5_C_4 
	= 0;
	

	(idSuper5_C, idSuper5_Super5) 
	= (idSuper5_C_4, idSuper5_Super5_1);
	

tel






-- Entry action for state :A_A1
node A_A1_en(idSuper5_A_1:int;
	s_1:real;
	isInner:bool)

returns (idSuper5_A:int;
	s:real);


var 	idSuper5_A_2:int;
	s_2:real;


let



	-- set state as active 
	idSuper5_A_2 
	= 1125;
	

	s_2 
	= if (not isInner) then 2.
	 else s_1;
	

	(idSuper5_A, s) 
	= (idSuper5_A_2, s_2);
	

tel





--During action for state :A_A1
node A_A1_du(d_1:real)

returns (d:real);


var 	d_2:real;


let



	d_2 
	=  d_1  + 1.;
	

	(d) 
	= (d_2);
	

tel





-- Exit action for state :A_A1
node A_A1_ex(idSuper5_A_1:int;
	isInner:bool)

returns (idSuper5_A:int);


var 	idSuper5_A_2:int;


let



	-- set state as inactive 
	idSuper5_A_2
	 = if (not isInner) then 0 else idSuper5_A_1;


	(idSuper5_A) 
	= (idSuper5_A_1);
	

tel






-- Entry action for state :Super5_A
node Super5_A_en(idSuper5_A_1:int;
	idSuper5_Super5_1:int;
	s_1:real;
	isInner:bool)

returns (idSuper5_A:int;
	idSuper5_Super5:int;
	s:real);


var 	idSuper5_A_2, idSuper5_A_3, idSuper5_A_4, idSuper5_A_5:int;
	idSuper5_Super5_2, idSuper5_Super5_3, idSuper5_Super5_4:int;
	s_2, s_3, s_4, s_5, s_6:real;


let



	-- set state as active 
	idSuper5_Super5_2 
	= 1121;
	

	s_2 
	= if (not isInner) then 1.
	 else s_1;
	

	
-- transition trace :
	--POINT__To__A_A1_1
		(idSuper5_A_2, s_3) 
	= A_A1_en(idSuper5_A_1, s_2, false);
		

	(idSuper5_A_3, idSuper5_Super5_3, s_4) 
	= 

	if ( idSuper5_A_1 = 0) then

	 (idSuper5_A_2, idSuper5_Super5_2, s_3)

	 else(idSuper5_A_1, idSuper5_Super5_2, s_2);

	

	(idSuper5_A_4, s_5) 
	= 
	if ( idSuper5_A_1 = 1125) then
	A_A1_en(idSuper5_A_1, s_2, false)
	 else (idSuper5_A_1, s_2);

	

	(idSuper5_A_5, idSuper5_Super5_4, s_6) 
	= 
		 if ( idSuper5_A_1 = 0) then 
		(idSuper5_A_3, idSuper5_Super5_3, s_4)
		 else
		 if ( idSuper5_A_1 = 1125) then 
		(idSuper5_A_4, idSuper5_Super5_3, s_5)
		 else (idSuper5_A_1, idSuper5_Super5_2, s_2);


	(idSuper5_A, idSuper5_Super5, s) 
	= (idSuper5_A_5, idSuper5_Super5_4, s_6);
	

tel





--During action for state :Super5_A
node Super5_A_du(d_1:real)

returns (d:real);


var 	d_2:real;


let



	d_2 
	=  d_1  + 1.;
	

	(d) 
	= (d_2);
	

tel





-- Exit action for state :Super5_A
node Super5_A_ex(idSuper5_A_1:int;
	idSuper5_Super5_1:int;
	isInner:bool)

returns (idSuper5_A:int;
	idSuper5_Super5:int);


var 	idSuper5_A_2, idSuper5_A_3, idSuper5_A_4:int;
	idSuper5_Super5_2:int;


let



	
	(idSuper5_A_2) 
	= 
	if ( idSuper5_A_1 = 1125) then
	A_A1_ex(idSuper5_A_1, false)
	 else (idSuper5_A_1);

	

	(idSuper5_A_3) 
	= 
		 if ( idSuper5_A_1 = 1125) then 
		(idSuper5_A_2)
		 else (idSuper5_A_1);


	-- set state as inactive 
	idSuper5_Super5_2
	 = if (not isInner) then 0 else idSuper5_Super5_1;

	idSuper5_A_4 
	= 0;
	

	(idSuper5_A, idSuper5_Super5) 
	= (idSuper5_A_4, idSuper5_Super5_1);
	

tel






-- Entry action for state :D_D1
node D_D1_en(idSuper5_D_1:int;
	s_1:real;
	isInner:bool)

returns (idSuper5_D:int;
	s:real);


var 	idSuper5_D_2:int;
	s_2:real;


let



	-- set state as active 
	idSuper5_D_2 
	= 1123;
	

	s_2 
	= if (not isInner) then 6.
	 else s_1;
	

	(idSuper5_D, s) 
	= (idSuper5_D_2, s_2);
	

tel





--During action for state :D_D1
node D_D1_du(d_1:real)

returns (d:real);


var 	d_2:real;


let



	d_2 
	=  d_1  + 1.;
	

	(d) 
	= (d_2);
	

tel





-- Exit action for state :D_D1
node D_D1_ex(idSuper5_D_1:int;
	isInner:bool)

returns (idSuper5_D:int);


var 	idSuper5_D_2:int;


let



	-- set state as inactive 
	idSuper5_D_2
	 = if (not isInner) then 0 else idSuper5_D_1;


	(idSuper5_D) 
	= (idSuper5_D_1);
	

tel






-- Entry action for state :Super5_D
node Super5_D_en(idSuper5_D_1:int;
	idSuper5_Super5_1:int;
	s_1:real;
	isInner:bool)

returns (idSuper5_D:int;
	idSuper5_Super5:int;
	s:real);


var 	idSuper5_D_2, idSuper5_D_3, idSuper5_D_4, idSuper5_D_5:int;
	idSuper5_Super5_2, idSuper5_Super5_3, idSuper5_Super5_4:int;
	s_2, s_3, s_4, s_5, s_6:real;


let



	-- set state as active 
	idSuper5_Super5_2 
	= 1127;
	

	s_2 
	= if (not isInner) then 5.
	 else s_1;
	

	
-- transition trace :
	--POINT__To__D_D1_1
		(idSuper5_D_2, s_3) 
	= D_D1_en(idSuper5_D_1, s_2, false);
		

	(idSuper5_D_3, idSuper5_Super5_3, s_4) 
	= 

	if ( idSuper5_D_1 = 0) then

	 (idSuper5_D_2, idSuper5_Super5_2, s_3)

	 else(idSuper5_D_1, idSuper5_Super5_2, s_2);

	

	(idSuper5_D_4, s_5) 
	= 
	if ( idSuper5_D_1 = 1123) then
	D_D1_en(idSuper5_D_1, s_2, false)
	 else (idSuper5_D_1, s_2);

	

	(idSuper5_D_5, idSuper5_Super5_4, s_6) 
	= 
		 if ( idSuper5_D_1 = 0) then 
		(idSuper5_D_3, idSuper5_Super5_3, s_4)
		 else
		 if ( idSuper5_D_1 = 1123) then 
		(idSuper5_D_4, idSuper5_Super5_3, s_5)
		 else (idSuper5_D_1, idSuper5_Super5_2, s_2);


	(idSuper5_D, idSuper5_Super5, s) 
	= (idSuper5_D_5, idSuper5_Super5_4, s_6);
	

tel





--During action for state :Super5_D
node Super5_D_du(d_1:real)

returns (d:real);


var 	d_2:real;


let



	d_2 
	=  d_1  + 1.;
	

	(d) 
	= (d_2);
	

tel





-- Exit action for state :Super5_D
node Super5_D_ex(idSuper5_D_1:int;
	idSuper5_Super5_1:int;
	isInner:bool)

returns (idSuper5_D:int;
	idSuper5_Super5:int);


var 	idSuper5_D_2, idSuper5_D_3, idSuper5_D_4:int;
	idSuper5_Super5_2:int;


let



	
	(idSuper5_D_2) 
	= 
	if ( idSuper5_D_1 = 1123) then
	D_D1_ex(idSuper5_D_1, false)
	 else (idSuper5_D_1);

	

	(idSuper5_D_3) 
	= 
		 if ( idSuper5_D_1 = 1123) then 
		(idSuper5_D_2)
		 else (idSuper5_D_1);


	-- set state as inactive 
	idSuper5_Super5_2
	 = if (not isInner) then 0 else idSuper5_Super5_1;

	idSuper5_D_4 
	= 0;
	

	(idSuper5_D, idSuper5_Super5) 
	= (idSuper5_D_4, idSuper5_Super5_1);
	

tel


--***************************************************State :Super5_B Automaton***************************************************

node Super5_B_node(idSuper5_B_1:int;
	s_1:real;
	E:bool;
	idSuper5_Super5_1:int;
	idSuper5_C_1:int;
	F:bool;
	idSuper5_A_1:int;
	d_1:real)

returns (idSuper5_B:int;
	s:real;
	idSuper5_Super5:int;
	idSuper5_C:int;
	idSuper5_A:int;
	d:real);


let

	 automaton super5_b

	state POINTSuper5_B:
	unless (idSuper5_B_1=0) restart POINT__TO__B_B1_1



	unless (idSuper5_B_1=1126) and E restart B_B1__TO__C_C1_1



	unless (idSuper5_B_1=1126) and F restart B_B1__TO__A_A1_2



	unless (idSuper5_B_1=1126) restart B_B1_IDL

	let

		(idSuper5_B, s, idSuper5_Super5, idSuper5_C, idSuper5_A, d) 
	= (idSuper5_B_1, s_1, idSuper5_Super5_1, idSuper5_C_1, idSuper5_A_1, d_1);
	

	tel



	state POINT__TO__B_B1_1:

	 var 	idSuper5_B_2:int;
	s_2:real;
	let

		-- transition trace :
	--POINT__To__B_B1_1
		(idSuper5_B_2, s_2) 
	= B_B1_en(idSuper5_B_1, s_1, false);
		

	(idSuper5_B, s) 
	=  (idSuper5_B_2, s_2);

	--add unused variables
	(d, idSuper5_A, idSuper5_C, idSuper5_Super5) 
	= (d_1, idSuper5_A_1, idSuper5_C_1, idSuper5_Super5_1);
	

	tel

	until true restart POINTSuper5_B



	state B_B1__TO__C_C1_1:

	 var 	idSuper5_B_2:int;
	s_2:real;
	idSuper5_Super5_2, idSuper5_Super5_3:int;
	idSuper5_C_2, idSuper5_C_3:int;
	let

		-- transition trace :
	--B_B1__To__C_C1_1
		(idSuper5_B_2, idSuper5_Super5_2) 
	= Super5_B_ex(idSuper5_B_1, idSuper5_Super5_1, false);
		

		idSuper5_C_2 
	= 1124;
	
		(idSuper5_C_3, idSuper5_Super5_3, s_2) 
	= Super5_C_en(idSuper5_C_2, idSuper5_Super5_2, s_1, false);
		

	(idSuper5_B, s, idSuper5_Super5, idSuper5_C) 
	=  (idSuper5_B_2, s_2, idSuper5_Super5_3, idSuper5_C_3);

	--add unused variables
	(d, idSuper5_A) 
	= (d_1, idSuper5_A_1);
	

	tel

	until true restart POINTSuper5_B



	state B_B1__TO__A_A1_2:

	 var 	idSuper5_B_2:int;
	s_2:real;
	idSuper5_Super5_2, idSuper5_Super5_3:int;
	idSuper5_A_2, idSuper5_A_3:int;
	let

		-- transition trace :
	--B_B1__To__A_A1_2
		(idSuper5_B_2, idSuper5_Super5_2) 
	= Super5_B_ex(idSuper5_B_1, idSuper5_Super5_1, false);
		

		idSuper5_A_2 
	= 1125;
	
		(idSuper5_A_3, idSuper5_Super5_3, s_2) 
	= Super5_A_en(idSuper5_A_2, idSuper5_Super5_2, s_1, false);
		

	(idSuper5_B, s, idSuper5_Super5, idSuper5_C, idSuper5_A) 
	=  (idSuper5_B_2, s_2, idSuper5_Super5_3, idSuper5_C_1, idSuper5_A_3);

	--add unused variables
	(d) 
	= (d_1);
	

	tel

	until true restart POINTSuper5_B



	state B_B1_IDL:

	 var 	d_2:real;
	let

		
	(d_2) 
	= B_B1_du(d_1);

		


	(idSuper5_B, s, idSuper5_Super5, idSuper5_C, idSuper5_A, d) 
	= (idSuper5_B_1, s_1, idSuper5_Super5_1, idSuper5_C_1, idSuper5_A_1, d_2);
	

	tel

	until true restart POINTSuper5_B



tel


--***************************************************State :Super5_C Automaton***************************************************

node Super5_C_node(idSuper5_C_1:int;
	s_1:real;
	F:bool;
	idSuper5_Super5_1:int;
	idSuper5_B_1:int;
	E:bool;
	idSuper5_D_1:int;
	d_1:real)

returns (idSuper5_C:int;
	s:real;
	idSuper5_Super5:int;
	idSuper5_B:int;
	idSuper5_D:int;
	d:real);


let

	 automaton super5_c

	state POINTSuper5_C:
	unless (idSuper5_C_1=0) restart POINT__TO__C_C1_1



	unless (idSuper5_C_1=1124) and F restart C_C1__TO__B_B1_1



	unless (idSuper5_C_1=1124) and E restart C_C1__TO__D_D1_2



	unless (idSuper5_C_1=1124) restart C_C1_IDL

	let

		(idSuper5_C, s, idSuper5_Super5, idSuper5_B, idSuper5_D, d) 
	= (idSuper5_C_1, s_1, idSuper5_Super5_1, idSuper5_B_1, idSuper5_D_1, d_1);
	

	tel



	state POINT__TO__C_C1_1:

	 var 	idSuper5_C_2:int;
	s_2:real;
	let

		-- transition trace :
	--POINT__To__C_C1_1
		(idSuper5_C_2, s_2) 
	= C_C1_en(idSuper5_C_1, s_1, false);
		

	(idSuper5_C, s) 
	=  (idSuper5_C_2, s_2);

	--add unused variables
	(d, idSuper5_B, idSuper5_D, idSuper5_Super5) 
	= (d_1, idSuper5_B_1, idSuper5_D_1, idSuper5_Super5_1);
	

	tel

	until true restart POINTSuper5_C



	state C_C1__TO__B_B1_1:

	 var 	idSuper5_C_2:int;
	s_2:real;
	idSuper5_Super5_2, idSuper5_Super5_3:int;
	idSuper5_B_2, idSuper5_B_3:int;
	let

		-- transition trace :
	--C_C1__To__B_B1_1
		(idSuper5_C_2, idSuper5_Super5_2) 
	= Super5_C_ex(idSuper5_C_1, idSuper5_Super5_1, false);
		

		idSuper5_B_2 
	= 1126;
	
		(idSuper5_B_3, idSuper5_Super5_3, s_2) 
	= Super5_B_en(idSuper5_B_2, idSuper5_Super5_2, s_1, false);
		

	(idSuper5_C, s, idSuper5_Super5, idSuper5_B) 
	=  (idSuper5_C_2, s_2, idSuper5_Super5_3, idSuper5_B_3);

	--add unused variables
	(d, idSuper5_D) 
	= (d_1, idSuper5_D_1);
	

	tel

	until true restart POINTSuper5_C



	state C_C1__TO__D_D1_2:

	 var 	idSuper5_C_2:int;
	s_2:real;
	idSuper5_Super5_2, idSuper5_Super5_3:int;
	idSuper5_D_2, idSuper5_D_3:int;
	let

		-- transition trace :
	--C_C1__To__D_D1_2
		(idSuper5_C_2, idSuper5_Super5_2) 
	= Super5_C_ex(idSuper5_C_1, idSuper5_Super5_1, false);
		

		idSuper5_D_2 
	= 1123;
	
		(idSuper5_D_3, idSuper5_Super5_3, s_2) 
	= Super5_D_en(idSuper5_D_2, idSuper5_Super5_2, s_1, false);
		

	(idSuper5_C, s, idSuper5_Super5, idSuper5_B, idSuper5_D) 
	=  (idSuper5_C_2, s_2, idSuper5_Super5_3, idSuper5_B_1, idSuper5_D_3);

	--add unused variables
	(d) 
	= (d_1);
	

	tel

	until true restart POINTSuper5_C



	state C_C1_IDL:

	 var 	d_2:real;
	let

		
	(d_2) 
	= C_C1_du(d_1);

		


	(idSuper5_C, s, idSuper5_Super5, idSuper5_B, idSuper5_D, d) 
	= (idSuper5_C_1, s_1, idSuper5_Super5_1, idSuper5_B_1, idSuper5_D_1, d_2);
	

	tel

	until true restart POINTSuper5_C



tel


--***************************************************State :Super5_A Automaton***************************************************

node Super5_A_node(idSuper5_A_1:int;
	s_1:real;
	E:bool;
	idSuper5_Super5_1:int;
	idSuper5_B_1:int;
	F:bool;
	idSuper5_D_1:int;
	d_1:real)

returns (idSuper5_A:int;
	s:real;
	idSuper5_Super5:int;
	idSuper5_B:int;
	idSuper5_D:int;
	d:real);


let

	 automaton super5_a

	state POINTSuper5_A:
	unless (idSuper5_A_1=0) restart POINT__TO__A_A1_1



	unless (idSuper5_A_1=1125) and E restart A_A1__TO__B_B1_1



	unless (idSuper5_A_1=1125) and F restart A_A1__TO__D_D1_2



	unless (idSuper5_A_1=1125) restart A_A1_IDL

	let

		(idSuper5_A, s, idSuper5_Super5, idSuper5_B, idSuper5_D, d) 
	= (idSuper5_A_1, s_1, idSuper5_Super5_1, idSuper5_B_1, idSuper5_D_1, d_1);
	

	tel



	state POINT__TO__A_A1_1:

	 var 	idSuper5_A_2:int;
	s_2:real;
	let

		-- transition trace :
	--POINT__To__A_A1_1
		(idSuper5_A_2, s_2) 
	= A_A1_en(idSuper5_A_1, s_1, false);
		

	(idSuper5_A, s) 
	=  (idSuper5_A_2, s_2);

	--add unused variables
	(d, idSuper5_B, idSuper5_D, idSuper5_Super5) 
	= (d_1, idSuper5_B_1, idSuper5_D_1, idSuper5_Super5_1);
	

	tel

	until true restart POINTSuper5_A



	state A_A1__TO__B_B1_1:

	 var 	idSuper5_A_2:int;
	s_2:real;
	idSuper5_Super5_2, idSuper5_Super5_3:int;
	idSuper5_B_2, idSuper5_B_3:int;
	let

		-- transition trace :
	--A_A1__To__B_B1_1
		(idSuper5_A_2, idSuper5_Super5_2) 
	= Super5_A_ex(idSuper5_A_1, idSuper5_Super5_1, false);
		

		idSuper5_B_2 
	= 1126;
	
		(idSuper5_B_3, idSuper5_Super5_3, s_2) 
	= Super5_B_en(idSuper5_B_2, idSuper5_Super5_2, s_1, false);
		

	(idSuper5_A, s, idSuper5_Super5, idSuper5_B) 
	=  (idSuper5_A_2, s_2, idSuper5_Super5_3, idSuper5_B_3);

	--add unused variables
	(d, idSuper5_D) 
	= (d_1, idSuper5_D_1);
	

	tel

	until true restart POINTSuper5_A



	state A_A1__TO__D_D1_2:

	 var 	idSuper5_A_2:int;
	s_2:real;
	idSuper5_Super5_2, idSuper5_Super5_3:int;
	idSuper5_D_2, idSuper5_D_3:int;
	let

		-- transition trace :
	--A_A1__To__D_D1_2
		(idSuper5_A_2, idSuper5_Super5_2) 
	= Super5_A_ex(idSuper5_A_1, idSuper5_Super5_1, false);
		

		idSuper5_D_2 
	= 1123;
	
		(idSuper5_D_3, idSuper5_Super5_3, s_2) 
	= Super5_D_en(idSuper5_D_2, idSuper5_Super5_2, s_1, false);
		

	(idSuper5_A, s, idSuper5_Super5, idSuper5_B, idSuper5_D) 
	=  (idSuper5_A_2, s_2, idSuper5_Super5_3, idSuper5_B_1, idSuper5_D_3);

	--add unused variables
	(d) 
	= (d_1);
	

	tel

	until true restart POINTSuper5_A



	state A_A1_IDL:

	 var 	d_2:real;
	let

		
	(d_2) 
	= A_A1_du(d_1);

		


	(idSuper5_A, s, idSuper5_Super5, idSuper5_B, idSuper5_D, d) 
	= (idSuper5_A_1, s_1, idSuper5_Super5_1, idSuper5_B_1, idSuper5_D_1, d_2);
	

	tel

	until true restart POINTSuper5_A



tel


--***************************************************State :Super5_D Automaton***************************************************

node Super5_D_node(idSuper5_D_1:int;
	s_1:real;
	E:bool;
	idSuper5_Super5_1:int;
	idSuper5_A_1:int;
	F:bool;
	idSuper5_C_1:int;
	d_1:real)

returns (idSuper5_D:int;
	s:real;
	idSuper5_Super5:int;
	idSuper5_A:int;
	idSuper5_C:int;
	d:real);


let

	 automaton super5_d

	state POINTSuper5_D:
	unless (idSuper5_D_1=0) restart POINT__TO__D_D1_1



	unless (idSuper5_D_1=1123) and E restart D_D1__TO__A_A1_1



	unless (idSuper5_D_1=1123) and F restart D_D1__TO__C_C1_2



	unless (idSuper5_D_1=1123) restart D_D1_IDL

	let

		(idSuper5_D, s, idSuper5_Super5, idSuper5_A, idSuper5_C, d) 
	= (idSuper5_D_1, s_1, idSuper5_Super5_1, idSuper5_A_1, idSuper5_C_1, d_1);
	

	tel



	state POINT__TO__D_D1_1:

	 var 	idSuper5_D_2:int;
	s_2:real;
	let

		-- transition trace :
	--POINT__To__D_D1_1
		(idSuper5_D_2, s_2) 
	= D_D1_en(idSuper5_D_1, s_1, false);
		

	(idSuper5_D, s) 
	=  (idSuper5_D_2, s_2);

	--add unused variables
	(d, idSuper5_A, idSuper5_C, idSuper5_Super5) 
	= (d_1, idSuper5_A_1, idSuper5_C_1, idSuper5_Super5_1);
	

	tel

	until true restart POINTSuper5_D



	state D_D1__TO__A_A1_1:

	 var 	idSuper5_D_2:int;
	s_2:real;
	idSuper5_Super5_2, idSuper5_Super5_3:int;
	idSuper5_A_2, idSuper5_A_3:int;
	let

		-- transition trace :
	--D_D1__To__A_A1_1
		(idSuper5_D_2, idSuper5_Super5_2) 
	= Super5_D_ex(idSuper5_D_1, idSuper5_Super5_1, false);
		

		idSuper5_A_2 
	= 1125;
	
		(idSuper5_A_3, idSuper5_Super5_3, s_2) 
	= Super5_A_en(idSuper5_A_2, idSuper5_Super5_2, s_1, false);
		

	(idSuper5_D, s, idSuper5_Super5, idSuper5_A) 
	=  (idSuper5_D_2, s_2, idSuper5_Super5_3, idSuper5_A_3);

	--add unused variables
	(d, idSuper5_C) 
	= (d_1, idSuper5_C_1);
	

	tel

	until true restart POINTSuper5_D



	state D_D1__TO__C_C1_2:

	 var 	idSuper5_D_2:int;
	s_2:real;
	idSuper5_Super5_2, idSuper5_Super5_3:int;
	idSuper5_C_2, idSuper5_C_3:int;
	let

		-- transition trace :
	--D_D1__To__C_C1_2
		(idSuper5_D_2, idSuper5_Super5_2) 
	= Super5_D_ex(idSuper5_D_1, idSuper5_Super5_1, false);
		

		idSuper5_C_2 
	= 1124;
	
		(idSuper5_C_3, idSuper5_Super5_3, s_2) 
	= Super5_C_en(idSuper5_C_2, idSuper5_Super5_2, s_1, false);
		

	(idSuper5_D, s, idSuper5_Super5, idSuper5_A, idSuper5_C) 
	=  (idSuper5_D_2, s_2, idSuper5_Super5_3, idSuper5_A_1, idSuper5_C_3);

	--add unused variables
	(d) 
	= (d_1);
	

	tel

	until true restart POINTSuper5_D



	state D_D1_IDL:

	 var 	d_2:real;
	let

		
	(d_2) 
	= D_D1_du(d_1);

		


	(idSuper5_D, s, idSuper5_Super5, idSuper5_A, idSuper5_C, d) 
	= (idSuper5_D_1, s_1, idSuper5_Super5_1, idSuper5_A_1, idSuper5_C_1, d_2);
	

	tel

	until true restart POINTSuper5_D



tel


--***************************************************State :Super5_Super5 Automaton***************************************************

node Super5_Super5_node(idSuper5_Super5_1:int;
	idSuper5_A_1:int;
	s_1:real;
	G:bool;
	idSuper5_B_1:int;
	H:bool;
	idSuper5_D_1:int;
	idSuper5_C_1:int;
	d_1:real;
	E:bool;
	F:bool)

returns (idSuper5_Super5:int;
	idSuper5_A:int;
	s:real;
	idSuper5_B:int;
	idSuper5_D:int;
	idSuper5_C:int;
	d:real);


let

	 automaton super5_super5

	state POINTSuper5_Super5:
	unless (idSuper5_Super5_1=0) restart POINT__TO__SUPER5_A_1



	unless (idSuper5_Super5_1=1121) and G restart SUPER5_A__TO__SUPER5_B_1



	unless (idSuper5_Super5_1=1121) and H restart SUPER5_A__TO__SUPER5_D_2



	unless (idSuper5_Super5_1=1122) and G restart SUPER5_B__TO__SUPER5_C_1



	unless (idSuper5_Super5_1=1122) and H restart SUPER5_B__TO__SUPER5_A_2



	unless (idSuper5_Super5_1=1127) and G restart SUPER5_D__TO__SUPER5_A_1



	unless (idSuper5_Super5_1=1127) and H restart SUPER5_D__TO__SUPER5_C_2



	unless (idSuper5_Super5_1=1128) and H restart SUPER5_C__TO__SUPER5_B_1



	unless (idSuper5_Super5_1=1128) and G restart SUPER5_C__TO__SUPER5_D_2



	unless (idSuper5_Super5_1=1121) restart SUPER5_A_IDL

	unless (idSuper5_Super5_1=1122) restart SUPER5_B_IDL

	unless (idSuper5_Super5_1=1127) restart SUPER5_D_IDL

	unless (idSuper5_Super5_1=1128) restart SUPER5_C_IDL

	let

		(idSuper5_Super5, idSuper5_A, s, idSuper5_B, idSuper5_D, idSuper5_C, d) 
	= (idSuper5_Super5_1, idSuper5_A_1, s_1, idSuper5_B_1, idSuper5_D_1, idSuper5_C_1, d_1);
	

	tel



	state POINT__TO__SUPER5_A_1:

	 var 	idSuper5_Super5_2:int;
	idSuper5_A_2:int;
	s_2:real;
	let

		-- transition trace :
	--POINT__To__Super5_A_1
		(idSuper5_A_2, idSuper5_Super5_2, s_2) 
	= Super5_A_en(idSuper5_A_1, idSuper5_Super5_1, s_1, false);
		

	(idSuper5_Super5, idSuper5_A, s) 
	=  (idSuper5_Super5_2, idSuper5_A_2, s_2);

	--add unused variables
	(d, idSuper5_B, idSuper5_C, idSuper5_D) 
	= (d_1, idSuper5_B_1, idSuper5_C_1, idSuper5_D_1);
	

	tel

	until true restart POINTSuper5_Super5



	state SUPER5_A__TO__SUPER5_B_1:

	 var 	idSuper5_Super5_2, idSuper5_Super5_3:int;
	idSuper5_A_2:int;
	s_2:real;
	idSuper5_B_2:int;
	let

		-- transition trace :
	--Super5_A__To__Super5_B_1
		(idSuper5_A_2, idSuper5_Super5_2) 
	= Super5_A_ex(idSuper5_A_1, idSuper5_Super5_1, false);
		

		(idSuper5_B_2, idSuper5_Super5_3, s_2) 
	= Super5_B_en(idSuper5_B_1, idSuper5_Super5_2, s_1, false);
		

	(idSuper5_Super5, idSuper5_A, s, idSuper5_B) 
	=  (idSuper5_Super5_3, idSuper5_A_2, s_2, idSuper5_B_2);

	--add unused variables
	(d, idSuper5_C, idSuper5_D) 
	= (d_1, idSuper5_C_1, idSuper5_D_1);
	

	tel

	until true restart POINTSuper5_Super5



	state SUPER5_A__TO__SUPER5_D_2:

	 var 	idSuper5_Super5_2, idSuper5_Super5_3:int;
	idSuper5_A_2:int;
	s_2:real;
	idSuper5_D_2:int;
	let

		-- transition trace :
	--Super5_A__To__Super5_D_2
		(idSuper5_A_2, idSuper5_Super5_2) 
	= Super5_A_ex(idSuper5_A_1, idSuper5_Super5_1, false);
		

		(idSuper5_D_2, idSuper5_Super5_3, s_2) 
	= Super5_D_en(idSuper5_D_1, idSuper5_Super5_2, s_1, false);
		

	(idSuper5_Super5, idSuper5_A, s, idSuper5_B, idSuper5_D) 
	=  (idSuper5_Super5_3, idSuper5_A_2, s_2, idSuper5_B_1, idSuper5_D_2);

	--add unused variables
	(d, idSuper5_C) 
	= (d_1, idSuper5_C_1);
	

	tel

	until true restart POINTSuper5_Super5



	state SUPER5_B__TO__SUPER5_C_1:

	 var 	idSuper5_Super5_2, idSuper5_Super5_3:int;
	s_2:real;
	idSuper5_B_2:int;
	idSuper5_C_2:int;
	let

		-- transition trace :
	--Super5_B__To__Super5_C_1
		(idSuper5_B_2, idSuper5_Super5_2) 
	= Super5_B_ex(idSuper5_B_1, idSuper5_Super5_1, false);
		

		(idSuper5_C_2, idSuper5_Super5_3, s_2) 
	= Super5_C_en(idSuper5_C_1, idSuper5_Super5_2, s_1, false);
		

	(idSuper5_Super5, idSuper5_A, s, idSuper5_B, idSuper5_D, idSuper5_C) 
	=  (idSuper5_Super5_3, idSuper5_A_1, s_2, idSuper5_B_2, idSuper5_D_1, idSuper5_C_2);

	--add unused variables
	(d) 
	= (d_1);
	

	tel

	until true restart POINTSuper5_Super5



	state SUPER5_B__TO__SUPER5_A_2:

	 var 	idSuper5_Super5_2, idSuper5_Super5_3:int;
	idSuper5_A_2:int;
	s_2:real;
	idSuper5_B_2:int;
	let

		-- transition trace :
	--Super5_B__To__Super5_A_2
		(idSuper5_B_2, idSuper5_Super5_2) 
	= Super5_B_ex(idSuper5_B_1, idSuper5_Super5_1, false);
		

		(idSuper5_A_2, idSuper5_Super5_3, s_2) 
	= Super5_A_en(idSuper5_A_1, idSuper5_Super5_2, s_1, false);
		

	(idSuper5_Super5, idSuper5_A, s, idSuper5_B, idSuper5_D, idSuper5_C) 
	=  (idSuper5_Super5_3, idSuper5_A_2, s_2, idSuper5_B_2, idSuper5_D_1, idSuper5_C_1);

	--add unused variables
	(d) 
	= (d_1);
	

	tel

	until true restart POINTSuper5_Super5



	state SUPER5_D__TO__SUPER5_A_1:

	 var 	idSuper5_Super5_2, idSuper5_Super5_3:int;
	idSuper5_A_2:int;
	s_2:real;
	idSuper5_D_2:int;
	let

		-- transition trace :
	--Super5_D__To__Super5_A_1
		(idSuper5_D_2, idSuper5_Super5_2) 
	= Super5_D_ex(idSuper5_D_1, idSuper5_Super5_1, false);
		

		(idSuper5_A_2, idSuper5_Super5_3, s_2) 
	= Super5_A_en(idSuper5_A_1, idSuper5_Super5_2, s_1, false);
		

	(idSuper5_Super5, idSuper5_A, s, idSuper5_B, idSuper5_D, idSuper5_C) 
	=  (idSuper5_Super5_3, idSuper5_A_2, s_2, idSuper5_B_1, idSuper5_D_2, idSuper5_C_1);

	--add unused variables
	(d) 
	= (d_1);
	

	tel

	until true restart POINTSuper5_Super5



	state SUPER5_D__TO__SUPER5_C_2:

	 var 	idSuper5_Super5_2, idSuper5_Super5_3:int;
	s_2:real;
	idSuper5_D_2:int;
	idSuper5_C_2:int;
	let

		-- transition trace :
	--Super5_D__To__Super5_C_2
		(idSuper5_D_2, idSuper5_Super5_2) 
	= Super5_D_ex(idSuper5_D_1, idSuper5_Super5_1, false);
		

		(idSuper5_C_2, idSuper5_Super5_3, s_2) 
	= Super5_C_en(idSuper5_C_1, idSuper5_Super5_2, s_1, false);
		

	(idSuper5_Super5, idSuper5_A, s, idSuper5_B, idSuper5_D, idSuper5_C) 
	=  (idSuper5_Super5_3, idSuper5_A_1, s_2, idSuper5_B_1, idSuper5_D_2, idSuper5_C_2);

	--add unused variables
	(d) 
	= (d_1);
	

	tel

	until true restart POINTSuper5_Super5



	state SUPER5_C__TO__SUPER5_B_1:

	 var 	idSuper5_Super5_2, idSuper5_Super5_3:int;
	s_2:real;
	idSuper5_B_2:int;
	idSuper5_C_2:int;
	let

		-- transition trace :
	--Super5_C__To__Super5_B_1
		(idSuper5_C_2, idSuper5_Super5_2) 
	= Super5_C_ex(idSuper5_C_1, idSuper5_Super5_1, false);
		

		(idSuper5_B_2, idSuper5_Super5_3, s_2) 
	= Super5_B_en(idSuper5_B_1, idSuper5_Super5_2, s_1, false);
		

	(idSuper5_Super5, idSuper5_A, s, idSuper5_B, idSuper5_D, idSuper5_C) 
	=  (idSuper5_Super5_3, idSuper5_A_1, s_2, idSuper5_B_2, idSuper5_D_1, idSuper5_C_2);

	--add unused variables
	(d) 
	= (d_1);
	

	tel

	until true restart POINTSuper5_Super5



	state SUPER5_C__TO__SUPER5_D_2:

	 var 	idSuper5_Super5_2, idSuper5_Super5_3:int;
	s_2:real;
	idSuper5_D_2:int;
	idSuper5_C_2:int;
	let

		-- transition trace :
	--Super5_C__To__Super5_D_2
		(idSuper5_C_2, idSuper5_Super5_2) 
	= Super5_C_ex(idSuper5_C_1, idSuper5_Super5_1, false);
		

		(idSuper5_D_2, idSuper5_Super5_3, s_2) 
	= Super5_D_en(idSuper5_D_1, idSuper5_Super5_2, s_1, false);
		

	(idSuper5_Super5, idSuper5_A, s, idSuper5_B, idSuper5_D, idSuper5_C) 
	=  (idSuper5_Super5_3, idSuper5_A_1, s_2, idSuper5_B_1, idSuper5_D_2, idSuper5_C_2);

	--add unused variables
	(d) 
	= (d_1);
	

	tel

	until true restart POINTSuper5_Super5



	state SUPER5_A_IDL:

	 var 	idSuper5_Super5_2:int;
	idSuper5_A_2:int;
	s_2:real;
	idSuper5_B_2:int;
	idSuper5_D_2:int;
	d_2, d_3:real;
	let

		
	(d_2) 
	= Super5_A_du(d_1);

		

	(idSuper5_A_2, s_2, idSuper5_Super5_2, idSuper5_B_2, idSuper5_D_2, d_3) 
	= Super5_A_node(idSuper5_A_1, s_1, E, idSuper5_Super5_1, idSuper5_B_1, F, idSuper5_D_1, d_2);

		


	(idSuper5_Super5, idSuper5_A, s, idSuper5_B, idSuper5_D, idSuper5_C, d) 
	= (idSuper5_Super5_2, idSuper5_A_2, s_2, idSuper5_B_2, idSuper5_D_2, idSuper5_C_1, d_3);
	

	tel

	until true restart POINTSuper5_Super5



	state SUPER5_B_IDL:

	 var 	idSuper5_Super5_2:int;
	idSuper5_A_2:int;
	s_2:real;
	idSuper5_B_2:int;
	idSuper5_C_2:int;
	d_2, d_3:real;
	let

		
	(d_2) 
	= Super5_B_du(d_1);

		

	(idSuper5_B_2, s_2, idSuper5_Super5_2, idSuper5_C_2, idSuper5_A_2, d_3) 
	= Super5_B_node(idSuper5_B_1, s_1, E, idSuper5_Super5_1, idSuper5_C_1, F, idSuper5_A_1, d_2);

		


	(idSuper5_Super5, idSuper5_A, s, idSuper5_B, idSuper5_D, idSuper5_C, d) 
	= (idSuper5_Super5_2, idSuper5_A_2, s_2, idSuper5_B_2, idSuper5_D_1, idSuper5_C_2, d_3);
	

	tel

	until true restart POINTSuper5_Super5



	state SUPER5_D_IDL:

	 var 	idSuper5_Super5_2:int;
	idSuper5_A_2:int;
	s_2:real;
	idSuper5_D_2:int;
	idSuper5_C_2:int;
	d_2, d_3:real;
	let

		
	(d_2) 
	= Super5_D_du(d_1);

		

	(idSuper5_D_2, s_2, idSuper5_Super5_2, idSuper5_A_2, idSuper5_C_2, d_3) 
	= Super5_D_node(idSuper5_D_1, s_1, E, idSuper5_Super5_1, idSuper5_A_1, F, idSuper5_C_1, d_2);

		


	(idSuper5_Super5, idSuper5_A, s, idSuper5_B, idSuper5_D, idSuper5_C, d) 
	= (idSuper5_Super5_2, idSuper5_A_2, s_2, idSuper5_B_1, idSuper5_D_2, idSuper5_C_2, d_3);
	

	tel

	until true restart POINTSuper5_Super5



	state SUPER5_C_IDL:

	 var 	idSuper5_Super5_2:int;
	s_2:real;
	idSuper5_B_2:int;
	idSuper5_D_2:int;
	idSuper5_C_2:int;
	d_2, d_3:real;
	let

		
	(d_2) 
	= Super5_C_du(d_1);

		

	(idSuper5_C_2, s_2, idSuper5_Super5_2, idSuper5_B_2, idSuper5_D_2, d_3) 
	= Super5_C_node(idSuper5_C_1, s_1, F, idSuper5_Super5_1, idSuper5_B_1, E, idSuper5_D_1, d_2);

		


	(idSuper5_Super5, idSuper5_A, s, idSuper5_B, idSuper5_D, idSuper5_C, d) 
	= (idSuper5_Super5_2, idSuper5_A_1, s_2, idSuper5_B_2, idSuper5_D_2, idSuper5_C_2, d_3);
	

	tel

	until true restart POINTSuper5_Super5



tel


--***************************************************State :Super5_Super5 Automaton***************************************************

node Super5_Super5(E:bool;
	G:bool;
	F:bool;
	H:bool)

returns (s:real;
	d:real);


var s_1: real;

	d_1: real;

	idSuper5_Super5, idSuper5_Super5_1: int;

	idSuper5_B, idSuper5_B_1: int;

	idSuper5_C, idSuper5_C_1: int;

	idSuper5_A, idSuper5_A_1: int;

	idSuper5_D, idSuper5_D_1: int;

		idSuper5_Super5_2, idSuper5_Super5_3, idSuper5_Super5_4:int;
	idSuper5_A_2, idSuper5_A_3, idSuper5_A_4:int;
	s_2, s_3, s_4:real;
	idSuper5_B_2, idSuper5_B_3, idSuper5_B_4:int;
	idSuper5_D_2, idSuper5_D_3, idSuper5_D_4:int;
	idSuper5_C_2, idSuper5_C_3, idSuper5_C_4:int;
	d_2, d_3, d_4:real;
let

	s_1 = 0.0 -> pre s;

	d_1 = 0.0 -> pre d;

	idSuper5_Super5_1 = 0 -> pre idSuper5_Super5;

	idSuper5_B_1 = 0 -> pre idSuper5_B;

	idSuper5_C_1 = 0 -> pre idSuper5_C;

	idSuper5_A_1 = 0 -> pre idSuper5_A;

	idSuper5_D_1 = 0 -> pre idSuper5_D;

	



	(idSuper5_Super5_2, idSuper5_A_2, s_2, idSuper5_B_2, idSuper5_D_2, idSuper5_C_2, d_2)
	 = 

	 if E then Super5_Super5_node(idSuper5_Super5_1, idSuper5_A_1, s_1, false, idSuper5_B_1, false, idSuper5_D_1, idSuper5_C_1, d_1, E, false)

	 else (idSuper5_Super5_1, idSuper5_A_1, s_1, idSuper5_B_1, idSuper5_D_1, idSuper5_C_1, d_1);

	



	(idSuper5_Super5_3, idSuper5_A_3, s_3, idSuper5_B_3, idSuper5_D_3, idSuper5_C_3, d_3)
	 = 

	 if G then Super5_Super5_node(idSuper5_Super5_2, idSuper5_A_2, s_2, G, idSuper5_B_2, false, idSuper5_D_2, idSuper5_C_2, d_2, false, false)

	 else (idSuper5_Super5_2, idSuper5_A_2, s_2, idSuper5_B_2, idSuper5_D_2, idSuper5_C_2, d_2);

	



	(idSuper5_Super5_4, idSuper5_A_4, s_4, idSuper5_B_4, idSuper5_D_4, idSuper5_C_4, d_4)
	 = 

	 if F then Super5_Super5_node(idSuper5_Super5_3, idSuper5_A_3, s_3, false, idSuper5_B_3, false, idSuper5_D_3, idSuper5_C_3, d_3, false, F)

	 else (idSuper5_Super5_3, idSuper5_A_3, s_3, idSuper5_B_3, idSuper5_D_3, idSuper5_C_3, d_3);

	



	(idSuper5_Super5, idSuper5_A, s, idSuper5_B, idSuper5_D, idSuper5_C, d)
	 = 

	 if H then Super5_Super5_node(idSuper5_Super5_4, idSuper5_A_4, s_4, false, idSuper5_B_4, H, idSuper5_D_4, idSuper5_C_4, d_4, false, false)

	 else (idSuper5_Super5_4, idSuper5_A_4, s_4, idSuper5_B_4, idSuper5_D_4, idSuper5_C_4, d_4);

	


--unused outputs
	

tel



node Super5 (E_1_1 : real; G_1_1 : real; F_1_1 : real; H_1_1 : real)
returns (s_1_1 : real;
	d_2_1 : real); 
var
	Mux_1_1 : real; Mux_1_2 : real; Mux_1_3 : real; Mux_1_4 : real;
	Super5_1_1 : real; Super5_2_1 : real;
	Mux_1_1_event: bool;
	Mux_1_2_event: bool;
	Mux_1_3_event: bool;
	Mux_1_4_event: bool;
let 
	Mux_1_1 = E_1_1 ;
	Mux_1_2 = G_1_1 ;
	Mux_1_3 = F_1_1 ;
	Mux_1_4 = H_1_1 ;
	Mux_1_1_event = false -> ((pre(Mux_1_1) > 0.0 and Mux_1_1 <= 0.0) or (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0));
	Mux_1_2_event = false -> ((pre(Mux_1_2) > 0.0 and Mux_1_2 <= 0.0) or (pre(Mux_1_2) <= 0.0 and Mux_1_2 > 0.0));
	Mux_1_3_event = false -> ((pre(Mux_1_3) > 0.0 and Mux_1_3 <= 0.0) or (pre(Mux_1_3) <= 0.0 and Mux_1_3 > 0.0));
	Mux_1_4_event = false -> ((pre(Mux_1_4) > 0.0 and Mux_1_4 <= 0.0) or (pre(Mux_1_4) <= 0.0 and Mux_1_4 > 0.0));
	(Super5_1_1, Super5_2_1) =  Super5_Super5(Mux_1_1_event, Mux_1_2_event, Mux_1_3_event, Mux_1_4_event);
	s_1_1 = Super5_1_1;
	d_2_1 = Super5_2_1;
tel

