-- This file has been generated by cocoSim


-- System nodes







-- Entry action for state :SetReset_On
node SetReset_On_en(idSetReset_SetReset_1:int;
	x_1:int;
	isInner:bool)

returns (idSetReset_SetReset:int;
	x:int);


var 	idSetReset_SetReset_2:int;
	x_2:int;


let



	-- set state as active 
	idSetReset_SetReset_2 
	= 483;
	

	x_2 
	= if (not isInner) then 1
	 else x_1;
	

	(idSetReset_SetReset, x) 
	= (idSetReset_SetReset_2, x_2);
	

tel





-- Exit action for state :SetReset_On
node SetReset_On_ex(idSetReset_SetReset_1:int;
	isInner:bool)

returns (idSetReset_SetReset:int);


var 	idSetReset_SetReset_2:int;


let



	-- set state as inactive 
	idSetReset_SetReset_2
	 = if (not isInner) then 0 else idSetReset_SetReset_1;


	(idSetReset_SetReset) 
	= (idSetReset_SetReset_1);
	

tel






-- Entry action for state :SetReset_Off
node SetReset_Off_en(idSetReset_SetReset_1:int;
	x_1:int;
	isInner:bool)

returns (idSetReset_SetReset:int;
	x:int);


var 	idSetReset_SetReset_2:int;
	x_2:int;


let



	-- set state as active 
	idSetReset_SetReset_2 
	= 482;
	

	x_2 
	= if (not isInner) then 0
	 else x_1;
	

	(idSetReset_SetReset, x) 
	= (idSetReset_SetReset_2, x_2);
	

tel





-- Exit action for state :SetReset_Off
node SetReset_Off_ex(idSetReset_SetReset_1:int;
	isInner:bool)

returns (idSetReset_SetReset:int);


var 	idSetReset_SetReset_2:int;


let



	-- set state as inactive 
	idSetReset_SetReset_2
	 = if (not isInner) then 0 else idSetReset_SetReset_1;


	(idSetReset_SetReset) 
	= (idSetReset_SetReset_1);
	

tel


--***************************************************State :SetReset_SetReset Automaton***************************************************

node SetReset_SetReset_node(idSetReset_SetReset_1:int;
	x_1:int;
	Set:bool;
	Reset:bool)

returns (idSetReset_SetReset:int;
	x:int);


let

	 automaton setreset_setreset

	state POINTSetReset_SetReset:
	unless (idSetReset_SetReset_1=0) restart POINT__TO__SETRESET_OFF_1



	unless (idSetReset_SetReset_1=482) and Set restart SETRESET_OFF__TO__SETRESET_ON_1



	unless (idSetReset_SetReset_1=483) and Reset restart SETRESET_ON__TO__SETRESET_OFF_1



	unless (idSetReset_SetReset_1=482) restart SETRESET_OFF_IDL

	unless (idSetReset_SetReset_1=483) restart SETRESET_ON_IDL

	let

		(idSetReset_SetReset, x) 
	= (idSetReset_SetReset_1, x_1);
	

	tel



	state POINT__TO__SETRESET_OFF_1:

	 var 	idSetReset_SetReset_2:int;
	x_2:int;
	let

		-- transition trace :
	--POINT__To__SetReset_Off_1
		(idSetReset_SetReset_2, x_2) 
	= SetReset_Off_en(idSetReset_SetReset_1, x_1, false);
		

	(idSetReset_SetReset, x) 
	=  (idSetReset_SetReset_2, x_2);


	tel

	until true restart POINTSetReset_SetReset



	state SETRESET_OFF__TO__SETRESET_ON_1:

	 var 	idSetReset_SetReset_2, idSetReset_SetReset_3:int;
	x_2:int;
	let

		-- transition trace :
	--SetReset_Off__To__SetReset_On_1
		(idSetReset_SetReset_2) 
	= SetReset_Off_ex(idSetReset_SetReset_1, false);
		

		(idSetReset_SetReset_3, x_2) 
	= SetReset_On_en(idSetReset_SetReset_2, x_1, false);
		

	(idSetReset_SetReset, x) 
	=  (idSetReset_SetReset_3, x_2);


	tel

	until true restart POINTSetReset_SetReset



	state SETRESET_ON__TO__SETRESET_OFF_1:

	 var 	idSetReset_SetReset_2, idSetReset_SetReset_3:int;
	x_2:int;
	let

		-- transition trace :
	--SetReset_On__To__SetReset_Off_1
		(idSetReset_SetReset_2) 
	= SetReset_On_ex(idSetReset_SetReset_1, false);
		

		(idSetReset_SetReset_3, x_2) 
	= SetReset_Off_en(idSetReset_SetReset_2, x_1, false);
		

	(idSetReset_SetReset, x) 
	=  (idSetReset_SetReset_3, x_2);


	tel

	until true restart POINTSetReset_SetReset



	state SETRESET_OFF_IDL:

	 	let

		

	(idSetReset_SetReset, x) 
	= (idSetReset_SetReset_1, x_1);
	

	tel

	until true restart POINTSetReset_SetReset



	state SETRESET_ON_IDL:

	 	let

		

	(idSetReset_SetReset, x) 
	= (idSetReset_SetReset_1, x_1);
	

	tel

	until true restart POINTSetReset_SetReset



tel


--***************************************************State :SetReset_SetReset Automaton***************************************************

node SetReset_SetReset(Set:bool;
	Reset:bool)

returns (x:int);


var x_1: int;

	idSetReset_SetReset, idSetReset_SetReset_1: int;

		idSetReset_SetReset_2:int;
	x_2:int;
let

	x_1 = 0 -> pre x;

	idSetReset_SetReset_1 = 0 -> pre idSetReset_SetReset;

	



	(idSetReset_SetReset_2, x_2)
	 = 

	 if Set then SetReset_SetReset_node(idSetReset_SetReset_1, x_1, Set, false)

	 else (idSetReset_SetReset_1, x_1);

	



	(idSetReset_SetReset, x)
	 = 

	 if Reset then SetReset_SetReset_node(idSetReset_SetReset_2, x_2, false, Reset)

	 else (idSetReset_SetReset_2, x_2);

	


--unused outputs
	

tel



node SetReset (Set_1_1 : real; Reset_1_1 : real)
returns (output_1_1 : int); 
var
	Mux_1_1 : real; Mux_1_2 : real;
	SetReset_1_1 : int;
	Mux_1_1_event: bool;
	Mux_1_2_event: bool;
let 
	Mux_1_1 = Set_1_1 ;
	Mux_1_2 = Reset_1_1 ;
	Mux_1_1_event = false -> (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0);
	Mux_1_2_event = false -> (pre(Mux_1_2) <= 0.0 and Mux_1_2 > 0.0);
	SetReset_1_1 =  SetReset_SetReset(Mux_1_1_event, Mux_1_2_event);
	output_1_1 = SetReset_1_1;
tel

