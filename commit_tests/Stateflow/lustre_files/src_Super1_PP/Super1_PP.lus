-- This file has been generated by CoCoSim


-- System nodes

















-- Entry action for state :Super1_B867
node Super1_B867_en(idSuper1_Super1865_1:int;
	s_1:int;
	isInner:bool)

returns (idSuper1_Super1865:int;
	s:int);


var 	idSuper1_Super1865_2:int;
	s_2:int;


let



	-- set state as active 
	idSuper1_Super1865_2 
	= 867;
	

	s_2 
	= if (not isInner) then 5
	 else s_1;
	

	(idSuper1_Super1865, s) 
	= (idSuper1_Super1865_2, s_2);
	

tel





-- Exit action for state :Super1_B867
node Super1_B867_ex(idSuper1_Super1865_1:int;
	isInner:bool)

returns (idSuper1_Super1865:int);


var 	idSuper1_Super1865_2:int;


let



	-- set state as inactive 
	idSuper1_Super1865_2
	 = if (not isInner) then 0 else idSuper1_Super1865_1;


	(idSuper1_Super1865) 
	= (idSuper1_Super1865_1);
	

tel






-- Entry action for state :C_C1869
node C_C1869_en(idSuper1_C868_1:int;
	s_1:int;
	isInner:bool)

returns (idSuper1_C868:int;
	s:int);


var 	idSuper1_C868_2:int;
	s_2:int;


let



	-- set state as active 
	idSuper1_C868_2 
	= 869;
	

	s_2 
	= if (not isInner) then 3
	 else s_1;
	

	(idSuper1_C868, s) 
	= (idSuper1_C868_2, s_2);
	

tel





-- Exit action for state :C_C1869
node C_C1869_ex(idSuper1_C868_1:int;
	isInner:bool)

returns (idSuper1_C868:int);


var 	idSuper1_C868_2:int;


let



	-- set state as inactive 
	idSuper1_C868_2
	 = if (not isInner) then 0 else idSuper1_C868_1;


	(idSuper1_C868) 
	= (idSuper1_C868_1);
	

tel






-- Entry action for state :C_C2870
node C_C2870_en(idSuper1_C868_1:int;
	s_1:int;
	isInner:bool)

returns (idSuper1_C868:int;
	s:int);


var 	idSuper1_C868_2:int;
	s_2:int;


let



	-- set state as active 
	idSuper1_C868_2 
	= 870;
	

	s_2 
	= if (not isInner) then 4
	 else s_1;
	

	(idSuper1_C868, s) 
	= (idSuper1_C868_2, s_2);
	

tel





-- Exit action for state :C_C2870
node C_C2870_ex(idSuper1_C868_1:int;
	isInner:bool)

returns (idSuper1_C868:int);


var 	idSuper1_C868_2:int;


let



	-- set state as inactive 
	idSuper1_C868_2
	 = if (not isInner) then 0 else idSuper1_C868_1;


	(idSuper1_C868) 
	= (idSuper1_C868_1);
	

tel






-- Entry action for state :Super1_C868
node Super1_C868_en(idSuper1_C868_1:int;
	idSuper1_Super1865_1:int;
	s_1:int;
	isInner:bool)

returns (idSuper1_C868:int;
	idSuper1_Super1865:int;
	s:int);


var 	idSuper1_C868_2, idSuper1_C868_3, idSuper1_C868_4, idSuper1_C868_5, idSuper1_C868_6:int;
	idSuper1_Super1865_2, idSuper1_Super1865_3, idSuper1_Super1865_4:int;
	s_2, s_3, s_4, s_5, s_6:int;


let



	-- set state as active 
	idSuper1_Super1865_2 
	= 868;
	

	
-- transition trace :
	--POINT__To__C_C1869_1
		(idSuper1_C868_2, s_2) 
	= C_C1869_en(idSuper1_C868_1, s_1, false);
		

	(idSuper1_C868_3, idSuper1_Super1865_3, s_3) 
	= 

	if ( idSuper1_C868_1 = 0) then

	 (idSuper1_C868_2, idSuper1_Super1865_2, s_2)

	 else(idSuper1_C868_1, idSuper1_Super1865_2, s_1);

	

	(idSuper1_C868_4, s_4) 
	= 
	if ( idSuper1_C868_1 = 869) then
	C_C1869_en(idSuper1_C868_1, s_1, false)
	 else (idSuper1_C868_1, s_1);

	

	(idSuper1_C868_5, s_5) 
	= 
	if ( idSuper1_C868_1 = 870) then
	C_C2870_en(idSuper1_C868_1, s_1, false)
	 else (idSuper1_C868_1, s_1);

	

	(idSuper1_C868_6, idSuper1_Super1865_4, s_6) 
	= 
		 if ( idSuper1_C868_1 = 0) then 
		(idSuper1_C868_3, idSuper1_Super1865_3, s_3)
		 else
		 if ( idSuper1_C868_1 = 869) then 
		(idSuper1_C868_4, idSuper1_Super1865_3, s_4)
		 else
		 if ( idSuper1_C868_1 = 870) then 
		(idSuper1_C868_5, idSuper1_Super1865_3, s_5)
		 else (idSuper1_C868_1, idSuper1_Super1865_2, s_1);


	(idSuper1_C868, idSuper1_Super1865, s) 
	= (idSuper1_C868_6, idSuper1_Super1865_4, s_6);
	

tel





-- Exit action for state :Super1_C868
node Super1_C868_ex(idSuper1_C868_1:int;
	idSuper1_Super1865_1:int;
	isInner:bool)

returns (idSuper1_C868:int;
	idSuper1_Super1865:int);


var 	idSuper1_C868_2, idSuper1_C868_3, idSuper1_C868_4, idSuper1_C868_5:int;
	idSuper1_Super1865_2:int;


let



	
	(idSuper1_C868_2) 
	= 
	if ( idSuper1_C868_1 = 869) then
	C_C1869_ex(idSuper1_C868_1, false)
	 else (idSuper1_C868_1);

	

	(idSuper1_C868_3) 
	= 
	if ( idSuper1_C868_1 = 870) then
	C_C2870_ex(idSuper1_C868_1, false)
	 else (idSuper1_C868_1);

	

	(idSuper1_C868_4) 
	= 
		 if ( idSuper1_C868_1 = 869) then 
		(idSuper1_C868_2)
		 else
		 if ( idSuper1_C868_1 = 870) then 
		(idSuper1_C868_3)
		 else (idSuper1_C868_1);


	-- set state as inactive 
	idSuper1_Super1865_2
	 = if (not isInner) then 0 else idSuper1_Super1865_1;

	idSuper1_C868_5 
	= 0;
	

	(idSuper1_C868, idSuper1_Super1865) 
	= (idSuper1_C868_5, idSuper1_Super1865_1);
	

tel






-- Entry action for state :Super1_A866
node Super1_A866_en(idSuper1_Super1865_1:int;
	s_1:int;
	isInner:bool)

returns (idSuper1_Super1865:int;
	s:int);


var 	idSuper1_Super1865_2:int;
	s_2:int;


let



	-- set state as active 
	idSuper1_Super1865_2 
	= 866;
	

	s_2 
	= if (not isInner) then 1
	 else s_1;
	

	(idSuper1_Super1865, s) 
	= (idSuper1_Super1865_2, s_2);
	

tel





-- Exit action for state :Super1_A866
node Super1_A866_ex(idSuper1_Super1865_1:int;
	isInner:bool)

returns (idSuper1_Super1865:int);


var 	idSuper1_Super1865_2:int;


let



	-- set state as inactive 
	idSuper1_Super1865_2
	 = if (not isInner) then 0 else idSuper1_Super1865_1;


	(idSuper1_Super1865) 
	= (idSuper1_Super1865_1);
	

tel






-- Entry action for state :Super1_D871
node Super1_D871_en(idSuper1_Super1865_1:int;
	s_1:int;
	isInner:bool)

returns (idSuper1_Super1865:int;
	s:int);


var 	idSuper1_Super1865_2:int;
	s_2:int;


let



	-- set state as active 
	idSuper1_Super1865_2 
	= 871;
	

	s_2 
	= if (not isInner) then 2
	 else s_1;
	

	(idSuper1_Super1865, s) 
	= (idSuper1_Super1865_2, s_2);
	

tel





-- Exit action for state :Super1_D871
node Super1_D871_ex(idSuper1_Super1865_1:int;
	isInner:bool)

returns (idSuper1_Super1865:int);


var 	idSuper1_Super1865_2:int;


let



	-- set state as inactive 
	idSuper1_Super1865_2
	 = if (not isInner) then 0 else idSuper1_Super1865_1;


	(idSuper1_Super1865) 
	= (idSuper1_Super1865_1);
	

tel


--***************************************************State :Super1_C868 Automaton***************************************************

node Super1_C868_node(idSuper1_C868_1:int;
	s_1:int;
	E:bool;
	idSuper1_Super1865_1:int;
	F:bool;
	x:int)

returns (idSuper1_C868:int;
	s:int;
	idSuper1_Super1865:int);


let

	 automaton super1_c868

	state POINTSuper1_C868:
	unless (idSuper1_C868_1=0) restart POINT__TO__C_C1869_1



	unless (idSuper1_C868_1=869) and E restart C_C1869__TO__SUPER1_B867_1



	unless (idSuper1_C868_1=869) and F restart C_C1869__TO__C_C2870_2



	unless (idSuper1_C868_1=870) and E and ( x<2 ) restart C_C2870__TO__SUPER1_SUPER1865JUNCTION880_1



	unless (idSuper1_C868_1=870) and F restart C_C2870__TO__C_C1869_2



	unless (idSuper1_C868_1=869) restart C_C1869_IDL

	unless (idSuper1_C868_1=870) restart C_C2870_IDL

	let

		(idSuper1_C868, s, idSuper1_Super1865) 
	= (idSuper1_C868_1, s_1, idSuper1_Super1865_1);
	

	tel



	state POINT__TO__C_C1869_1:

	 var 	idSuper1_C868_2:int;
	s_2:int;
	let

		-- transition trace :
	--POINT__To__C_C1869_1
		(idSuper1_C868_2, s_2) 
	= C_C1869_en(idSuper1_C868_1, s_1, false);
		

	(idSuper1_C868, s) 
	=  (idSuper1_C868_2, s_2);

	--add unused variables
	(idSuper1_Super1865) 
	= (idSuper1_Super1865_1);
	

	tel

	until true restart POINTSuper1_C868



	state C_C1869__TO__SUPER1_B867_1:

	 var 	idSuper1_C868_2:int;
	s_2:int;
	idSuper1_Super1865_2, idSuper1_Super1865_3:int;
	let

		-- transition trace :
	--C_C1869__To__Super1_B867_1
		(idSuper1_C868_2, idSuper1_Super1865_2) 
	= Super1_C868_ex(idSuper1_C868_1, idSuper1_Super1865_1, false);
		

		(idSuper1_Super1865_3, s_2) 
	= Super1_B867_en(idSuper1_Super1865_2, s_1, false);
		

	(idSuper1_C868, s, idSuper1_Super1865) 
	=  (idSuper1_C868_2, s_2, idSuper1_Super1865_3);


	tel

	until true restart POINTSuper1_C868



	state C_C1869__TO__C_C2870_2:

	 var 	idSuper1_C868_2, idSuper1_C868_3:int;
	s_2:int;
	let

		-- transition trace :
	--C_C1869__To__C_C2870_2
		(idSuper1_C868_2) 
	= C_C1869_ex(idSuper1_C868_1, false);
		

		(idSuper1_C868_3, s_2) 
	= C_C2870_en(idSuper1_C868_2, s_1, false);
		

	(idSuper1_C868, s, idSuper1_Super1865) 
	=  (idSuper1_C868_3, s_2, idSuper1_Super1865_1);


	tel

	until true restart POINTSuper1_C868



	state C_C2870__TO__SUPER1_SUPER1865JUNCTION880_1:

	 var 	idSuper1_C868_2, idSuper1_C868_3:int;
	s_2, s_3:int;
	idSuper1_Super1865_2, idSuper1_Super1865_3, idSuper1_Super1865_4, idSuper1_Super1865_5:int;
	let

		

-- transition trace :
	--C_C2870__To__Junction880_1, Junction880__To__Super1_D871_1
		(idSuper1_C868_2, idSuper1_Super1865_2) 
	= 
		 if (( x!=0 )) then 
		Super1_C868_ex(idSuper1_C868_1, idSuper1_Super1865_1, false)
		 else (idSuper1_C868_1, idSuper1_Super1865_1);
		

		(idSuper1_Super1865_3, s_2) 
	= 
		 if (( x!=0 )) then 
		Super1_D871_en(idSuper1_Super1865_2, s_1, false)
		 else (idSuper1_Super1865_2, s_1);
		


-- transition trace :
	--C_C2870__To__Junction880_1, Junction880__To__Super1_A866_2
		(idSuper1_C868_3, idSuper1_Super1865_4) 
	= 
		 if (( x=0 )) then 
		Super1_C868_ex(idSuper1_C868_1, idSuper1_Super1865_1, false)
		 else (idSuper1_C868_1, idSuper1_Super1865_1);
		

		(idSuper1_Super1865_5, s_3) 
	= 
		 if (( x=0 )) then 
		Super1_A866_en(idSuper1_Super1865_4, s_1, false)
		 else (idSuper1_Super1865_4, s_1);
		

	(idSuper1_C868, s, idSuper1_Super1865) 
	= 
		 if (( x!=0 )) then 
		(idSuper1_C868_2, s_2, idSuper1_Super1865_3)
		 else
		 if (( x=0 )) then 
		(idSuper1_C868_3, s_3, idSuper1_Super1865_5)
		 else (idSuper1_C868_1, s_1, idSuper1_Super1865_1);


	tel

	until true restart POINTSuper1_C868



	state C_C2870__TO__C_C1869_2:

	 var 	idSuper1_C868_2, idSuper1_C868_3:int;
	s_2:int;
	let

		-- transition trace :
	--C_C2870__To__C_C1869_2
		(idSuper1_C868_2) 
	= C_C2870_ex(idSuper1_C868_1, false);
		

		(idSuper1_C868_3, s_2) 
	= C_C1869_en(idSuper1_C868_2, s_1, false);
		

	(idSuper1_C868, s, idSuper1_Super1865) 
	=  (idSuper1_C868_3, s_2, idSuper1_Super1865_1);


	tel

	until true restart POINTSuper1_C868



	state C_C1869_IDL:

	 	let

		

	(idSuper1_C868, s, idSuper1_Super1865) 
	= (idSuper1_C868_1, s_1, idSuper1_Super1865_1);
	

	tel

	until true restart POINTSuper1_C868



	state C_C2870_IDL:

	 	let

		

	(idSuper1_C868, s, idSuper1_Super1865) 
	= (idSuper1_C868_1, s_1, idSuper1_Super1865_1);
	

	tel

	until true restart POINTSuper1_C868



tel


--***************************************************State :Super1_Super1865 Automaton***************************************************

node Super1_Super1865_node(idSuper1_Super1865_1:int;
	s_1:int;
	E:bool;
	x:int;
	idSuper1_C868_1:int;
	F:bool)

returns (idSuper1_Super1865:int;
	s:int;
	idSuper1_C868:int);


let

	 automaton super1_super1865

	state POINTSuper1_Super1865:
	unless (idSuper1_Super1865_1=0) restart POINT__TO__SUPER1_A866_1



	unless (idSuper1_Super1865_1=866) and E restart SUPER1_A866__TO__SUPER1_SUPER1865JUNCTION879_1



	unless (idSuper1_Super1865_1=867) and E restart SUPER1_B867__TO__C_C2870_1



	unless (idSuper1_Super1865_1=871) and F restart SUPER1_D871__TO__SUPER1_A866_1



	unless (idSuper1_Super1865_1=866) restart SUPER1_A866_IDL

	unless (idSuper1_Super1865_1=867) restart SUPER1_B867_IDL

	unless (idSuper1_Super1865_1=868) restart SUPER1_C868_IDL

	unless (idSuper1_Super1865_1=871) restart SUPER1_D871_IDL

	let

		(idSuper1_Super1865, s, idSuper1_C868) 
	= (idSuper1_Super1865_1, s_1, idSuper1_C868_1);
	

	tel



	state POINT__TO__SUPER1_A866_1:

	 var 	idSuper1_Super1865_2:int;
	s_2:int;
	let

		-- transition trace :
	--POINT__To__Super1_A866_1
		(idSuper1_Super1865_2, s_2) 
	= Super1_A866_en(idSuper1_Super1865_1, s_1, false);
		

	(idSuper1_Super1865, s) 
	=  (idSuper1_Super1865_2, s_2);

	--add unused variables
	(idSuper1_C868) 
	= (idSuper1_C868_1);
	

	tel

	until true restart POINTSuper1_Super1865



	state SUPER1_A866__TO__SUPER1_SUPER1865JUNCTION879_1:

	 var 	idSuper1_Super1865_2, idSuper1_Super1865_3, idSuper1_Super1865_4, idSuper1_Super1865_5:int;
	s_2, s_3:int;
	idSuper1_C868_2, idSuper1_C868_3:int;
	let

		

-- transition trace :
	--Super1_A866__To__Junction879_1, Junction879__To__C_C1869_1
		(idSuper1_Super1865_2) 
	= 
		 if (( x=0 )) then 
		Super1_A866_ex(idSuper1_Super1865_1, false)
		 else (idSuper1_Super1865_1);
		

		idSuper1_C868_2 
	= 869;
	
		(idSuper1_C868_3, idSuper1_Super1865_3, s_2) 
	= 
		 if (( x=0 )) then 
		Super1_C868_en(idSuper1_C868_2, idSuper1_Super1865_2, s_1, false)
		 else (idSuper1_C868_2, idSuper1_Super1865_2, s_1);
		


-- transition trace :
	--Super1_A866__To__Junction879_1, Junction879__To__Super1_D871_2
		(idSuper1_Super1865_4) 
	= 
		 if (( x!=0 )) then 
		Super1_A866_ex(idSuper1_Super1865_1, false)
		 else (idSuper1_Super1865_1);
		

		(idSuper1_Super1865_5, s_3) 
	= 
		 if (( x!=0 )) then 
		Super1_D871_en(idSuper1_Super1865_4, s_1, false)
		 else (idSuper1_Super1865_4, s_1);
		

	(idSuper1_Super1865, s, idSuper1_C868) 
	= 
		 if (( x=0 )) then 
		(idSuper1_Super1865_3, s_2, idSuper1_C868_3)
		 else
		 if (( x!=0 )) then 
		(idSuper1_Super1865_5, s_3, idSuper1_C868_1)
		 else (idSuper1_Super1865_1, s_1, idSuper1_C868_1);


	tel

	until true restart POINTSuper1_Super1865



	state SUPER1_B867__TO__C_C2870_1:

	 var 	idSuper1_Super1865_2, idSuper1_Super1865_3:int;
	s_2:int;
	idSuper1_C868_2, idSuper1_C868_3:int;
	let

		-- transition trace :
	--Super1_B867__To__C_C2870_1
		(idSuper1_Super1865_2) 
	= Super1_B867_ex(idSuper1_Super1865_1, false);
		

		idSuper1_C868_2 
	= 870;
	
		(idSuper1_C868_3, idSuper1_Super1865_3, s_2) 
	= Super1_C868_en(idSuper1_C868_2, idSuper1_Super1865_2, s_1, false);
		

	(idSuper1_Super1865, s, idSuper1_C868) 
	=  (idSuper1_Super1865_3, s_2, idSuper1_C868_3);


	tel

	until true restart POINTSuper1_Super1865



	state SUPER1_D871__TO__SUPER1_A866_1:

	 var 	idSuper1_Super1865_2, idSuper1_Super1865_3:int;
	s_2:int;
	let

		-- transition trace :
	--Super1_D871__To__Super1_A866_1
		(idSuper1_Super1865_2) 
	= Super1_D871_ex(idSuper1_Super1865_1, false);
		

		(idSuper1_Super1865_3, s_2) 
	= Super1_A866_en(idSuper1_Super1865_2, s_1, false);
		

	(idSuper1_Super1865, s, idSuper1_C868) 
	=  (idSuper1_Super1865_3, s_2, idSuper1_C868_1);


	tel

	until true restart POINTSuper1_Super1865



	state SUPER1_A866_IDL:

	 	let

		

	(idSuper1_Super1865, s, idSuper1_C868) 
	= (idSuper1_Super1865_1, s_1, idSuper1_C868_1);
	

	tel

	until true restart POINTSuper1_Super1865



	state SUPER1_B867_IDL:

	 	let

		

	(idSuper1_Super1865, s, idSuper1_C868) 
	= (idSuper1_Super1865_1, s_1, idSuper1_C868_1);
	

	tel

	until true restart POINTSuper1_Super1865



	state SUPER1_C868_IDL:

	 var 	idSuper1_Super1865_2:int;
	s_2:int;
	idSuper1_C868_2:int;
	let

		
	(idSuper1_C868_2, s_2, idSuper1_Super1865_2) 
	= Super1_C868_node(idSuper1_C868_1, s_1, E, idSuper1_Super1865_1, F, x);

		


	(idSuper1_Super1865, s, idSuper1_C868) 
	= (idSuper1_Super1865_2, s_2, idSuper1_C868_2);
	

	tel

	until true restart POINTSuper1_Super1865



	state SUPER1_D871_IDL:

	 	let

		

	(idSuper1_Super1865, s, idSuper1_C868) 
	= (idSuper1_Super1865_1, s_1, idSuper1_C868_1);
	

	tel

	until true restart POINTSuper1_Super1865



tel


--***************************************************State :Super1_Super1865 Automaton***************************************************

node Super1_PP_Super1(x:int;
	E:bool;
	F:bool)

returns (s:int);


var s_1: int;

	idSuper1_Super1865, idSuper1_Super1865_1: int;

	idSuper1_C868, idSuper1_C868_1: int;

		idSuper1_Super1865_2:int;
	s_2:int;
	idSuper1_C868_2:int;
let

	s_1 = 0 -> pre s;

	idSuper1_Super1865_1 = 0 -> pre idSuper1_Super1865;

	idSuper1_C868_1 = 0 -> pre idSuper1_C868;

	



	(idSuper1_Super1865_2, s_2, idSuper1_C868_2)
	 = 

	 if E then Super1_Super1865_node(idSuper1_Super1865_1, s_1, E, x, idSuper1_C868_1, false)

	 else (idSuper1_Super1865_1, s_1, idSuper1_C868_1);

	



	(idSuper1_Super1865, s, idSuper1_C868)
	 = 

	 if F then Super1_Super1865_node(idSuper1_Super1865_2, s_2, false, x, idSuper1_C868_2, F)

	 else (idSuper1_Super1865_2, s_2, idSuper1_C868_2);

	


--unused outputs
	

tel



node Super1_PP (x_1_1 : int; E_1_1 : real; F_1_1 : real)
returns (s_1_1 : int); 
var
	Mux_1_1 : real; Mux_1_2 : real;
	Super1_1_1 : int;
	i_virtual_local : real;
	Super1Mux_1_1_event: bool;
	Super1Mux_1_2_event: bool;
let 
	Mux_1_1 = E_1_1 ;
	Mux_1_2 = F_1_1 ;
	Super1Mux_1_1_event = false -> ((pre(Mux_1_1) > 0.0 and Mux_1_1 <= 0.0) or (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0));
	Super1Mux_1_2_event = false -> ((pre(Mux_1_2) > 0.0 and Mux_1_2 <= 0.0) or (pre(Mux_1_2) <= 0.0 and Mux_1_2 > 0.0));
	Super1_1_1 =  Super1_PP_Super1(x_1_1, Super1Mux_1_1_event, Super1Mux_1_2_event);
	s_1_1 = Super1_1_1;
	i_virtual_local= 0.0 -> 1.0;
tel

