-- This file has been generated by CoCoSim


-- System nodes













-- Entry action for state :A2_A2a168
node A2_A2a168_en(idA_A2167_1:int;
	a_1:int;
	isInner:bool)

returns (idA_A2167:int;
	a:int);


var 	idA_A2167_2:int;
	a_2:int;


let



	-- set state as active 
	idA_A2167_2 
	= 168;
	

	a_2 
	= if (not isInner) then  a_1 +3
	 else a_1;
	

	(idA_A2167, a) 
	= (idA_A2167_2, a_2);
	

tel





-- Exit action for state :A2_A2a168
node A2_A2a168_ex(idA_A2167_1:int;
	isInner:bool)

returns (idA_A2167:int);


var 	idA_A2167_2:int;


let



	-- set state as inactive 
	idA_A2167_2
	 = if (not isInner) then 0 else idA_A2167_1;


	(idA_A2167) 
	= (idA_A2167_1);
	

tel






-- Entry action for state :A2_A2b169
node A2_A2b169_en(idA_A2167_1:int;
	a_1:int;
	isInner:bool)

returns (idA_A2167:int;
	a:int);


var 	idA_A2167_2:int;
	a_2:int;


let



	-- set state as active 
	idA_A2167_2 
	= 169;
	

	a_2 
	= if (not isInner) then  a_1 +4
	 else a_1;
	

	(idA_A2167, a) 
	= (idA_A2167_2, a_2);
	

tel





-- Exit action for state :A2_A2b169
node A2_A2b169_ex(idA_A2167_1:int;
	isInner:bool)

returns (idA_A2167:int);


var 	idA_A2167_2:int;


let



	-- set state as inactive 
	idA_A2167_2
	 = if (not isInner) then 0 else idA_A2167_1;


	(idA_A2167) 
	= (idA_A2167_1);
	

tel






-- Entry action for state :A_A2167
node A_A2167_en(idA_A2167_1:int;
	idEvents1_A166_1:int;
	a_1:int;
	isInner:bool)

returns (idA_A2167:int;
	idEvents1_A166:int;
	a:int);


var 	idA_A2167_2, idA_A2167_3, idA_A2167_4, idA_A2167_5, idA_A2167_6:int;
	idEvents1_A166_2, idEvents1_A166_3, idEvents1_A166_4:int;
	a_2, a_3, a_4, a_5, a_6:int;


let



	-- set state as active 
	idEvents1_A166_2 
	= 167;
	

	
-- transition trace :
	--POINT__To__A2_A2a168_1
		(idA_A2167_2, a_2) 
	= A2_A2a168_en(idA_A2167_1, a_1, false);
		

	(idA_A2167_3, idEvents1_A166_3, a_3) 
	= 

	if ( idA_A2167_1 = 0) then

	 (idA_A2167_2, idEvents1_A166_2, a_2)

	 else(idA_A2167_1, idEvents1_A166_2, a_1);

	

	(idA_A2167_4, a_4) 
	= 
	if ( idA_A2167_1 = 168) then
	A2_A2a168_en(idA_A2167_1, a_1, false)
	 else (idA_A2167_1, a_1);

	

	(idA_A2167_5, a_5) 
	= 
	if ( idA_A2167_1 = 169) then
	A2_A2b169_en(idA_A2167_1, a_1, false)
	 else (idA_A2167_1, a_1);

	

	(idA_A2167_6, idEvents1_A166_4, a_6) 
	= 
		 if ( idA_A2167_1 = 0) then 
		(idA_A2167_3, idEvents1_A166_3, a_3)
		 else
		 if ( idA_A2167_1 = 168) then 
		(idA_A2167_4, idEvents1_A166_3, a_4)
		 else
		 if ( idA_A2167_1 = 169) then 
		(idA_A2167_5, idEvents1_A166_3, a_5)
		 else (idA_A2167_1, idEvents1_A166_2, a_1);


	(idA_A2167, idEvents1_A166, a) 
	= (idA_A2167_6, idEvents1_A166_4, a_6);
	

tel





-- Exit action for state :A_A2167
node A_A2167_ex(idA_A2167_1:int;
	idEvents1_A166_1:int;
	isInner:bool)

returns (idA_A2167:int;
	idEvents1_A166:int);


var 	idA_A2167_2, idA_A2167_3, idA_A2167_4, idA_A2167_5:int;
	idEvents1_A166_2:int;


let



	
	(idA_A2167_2) 
	= 
	if ( idA_A2167_1 = 168) then
	A2_A2a168_ex(idA_A2167_1, false)
	 else (idA_A2167_1);

	

	(idA_A2167_3) 
	= 
	if ( idA_A2167_1 = 169) then
	A2_A2b169_ex(idA_A2167_1, false)
	 else (idA_A2167_1);

	

	(idA_A2167_4) 
	= 
		 if ( idA_A2167_1 = 168) then 
		(idA_A2167_2)
		 else
		 if ( idA_A2167_1 = 169) then 
		(idA_A2167_3)
		 else (idA_A2167_1);


	-- set state as inactive 
	idEvents1_A166_2
	 = if (not isInner) then 0 else idEvents1_A166_1;

	idA_A2167_5 
	= 0;
	

	(idA_A2167, idEvents1_A166) 
	= (idA_A2167_5, idEvents1_A166_1);
	

tel






-- Entry action for state :A1_A1b172
node A1_A1b172_en(idA_A1170_1:int;
	a_1:int;
	isInner:bool)

returns (idA_A1170:int;
	a:int);


var 	idA_A1170_2:int;
	a_2:int;


let



	-- set state as active 
	idA_A1170_2 
	= 172;
	

	a_2 
	= if (not isInner) then  a_1 +2
	 else a_1;
	

	(idA_A1170, a) 
	= (idA_A1170_2, a_2);
	

tel





-- Exit action for state :A1_A1b172
node A1_A1b172_ex(idA_A1170_1:int;
	isInner:bool)

returns (idA_A1170:int);


var 	idA_A1170_2:int;


let



	-- set state as inactive 
	idA_A1170_2
	 = if (not isInner) then 0 else idA_A1170_1;


	(idA_A1170) 
	= (idA_A1170_1);
	

tel






-- Entry action for state :A1_A1a171
node A1_A1a171_en(idA_A1170_1:int;
	a_1:int;
	isInner:bool)

returns (idA_A1170:int;
	a:int);


var 	idA_A1170_2:int;
	a_2:int;


let



	-- set state as active 
	idA_A1170_2 
	= 171;
	

	a_2 
	= if (not isInner) then  a_1 +1
	 else a_1;
	

	(idA_A1170, a) 
	= (idA_A1170_2, a_2);
	

tel





-- Exit action for state :A1_A1a171
node A1_A1a171_ex(idA_A1170_1:int;
	isInner:bool)

returns (idA_A1170:int);


var 	idA_A1170_2:int;


let



	-- set state as inactive 
	idA_A1170_2
	 = if (not isInner) then 0 else idA_A1170_1;


	(idA_A1170) 
	= (idA_A1170_1);
	

tel






-- Entry action for state :A_A1170
node A_A1170_en(idA_A1170_1:int;
	idEvents1_A166_1:int;
	a_1:int;
	isInner:bool)

returns (idA_A1170:int;
	idEvents1_A166:int;
	a:int);


var 	idA_A1170_2, idA_A1170_3, idA_A1170_4, idA_A1170_5, idA_A1170_6:int;
	idEvents1_A166_2, idEvents1_A166_3, idEvents1_A166_4:int;
	a_2, a_3, a_4, a_5, a_6:int;


let



	-- set state as active 
	idEvents1_A166_2 
	= 170;
	

	
-- transition trace :
	--POINT__To__A1_A1a171_1
		(idA_A1170_2, a_2) 
	= A1_A1a171_en(idA_A1170_1, a_1, false);
		

	(idA_A1170_3, idEvents1_A166_3, a_3) 
	= 

	if ( idA_A1170_1 = 0) then

	 (idA_A1170_2, idEvents1_A166_2, a_2)

	 else(idA_A1170_1, idEvents1_A166_2, a_1);

	

	(idA_A1170_4, a_4) 
	= 
	if ( idA_A1170_1 = 171) then
	A1_A1a171_en(idA_A1170_1, a_1, false)
	 else (idA_A1170_1, a_1);

	

	(idA_A1170_5, a_5) 
	= 
	if ( idA_A1170_1 = 172) then
	A1_A1b172_en(idA_A1170_1, a_1, false)
	 else (idA_A1170_1, a_1);

	

	(idA_A1170_6, idEvents1_A166_4, a_6) 
	= 
		 if ( idA_A1170_1 = 0) then 
		(idA_A1170_3, idEvents1_A166_3, a_3)
		 else
		 if ( idA_A1170_1 = 171) then 
		(idA_A1170_4, idEvents1_A166_3, a_4)
		 else
		 if ( idA_A1170_1 = 172) then 
		(idA_A1170_5, idEvents1_A166_3, a_5)
		 else (idA_A1170_1, idEvents1_A166_2, a_1);


	(idA_A1170, idEvents1_A166, a) 
	= (idA_A1170_6, idEvents1_A166_4, a_6);
	

tel





-- Exit action for state :A_A1170
node A_A1170_ex(idA_A1170_1:int;
	idEvents1_A166_1:int;
	isInner:bool)

returns (idA_A1170:int;
	idEvents1_A166:int);


var 	idA_A1170_2, idA_A1170_3, idA_A1170_4, idA_A1170_5:int;
	idEvents1_A166_2:int;


let



	
	(idA_A1170_2) 
	= 
	if ( idA_A1170_1 = 171) then
	A1_A1a171_ex(idA_A1170_1, false)
	 else (idA_A1170_1);

	

	(idA_A1170_3) 
	= 
	if ( idA_A1170_1 = 172) then
	A1_A1b172_ex(idA_A1170_1, false)
	 else (idA_A1170_1);

	

	(idA_A1170_4) 
	= 
		 if ( idA_A1170_1 = 171) then 
		(idA_A1170_2)
		 else
		 if ( idA_A1170_1 = 172) then 
		(idA_A1170_3)
		 else (idA_A1170_1);


	-- set state as inactive 
	idEvents1_A166_2
	 = if (not isInner) then 0 else idEvents1_A166_1;

	idA_A1170_5 
	= 0;
	

	(idA_A1170, idEvents1_A166) 
	= (idA_A1170_5, idEvents1_A166_1);
	

tel






-- Entry action for state :Events1_A166
node Events1_A166_en(idEvents1_A166_1:int;
	idEvents1_Events1165_1:int;
	a_1:int;
	idA_A1170_1:int;
	idA_A2167_1:int;
	isInner:bool)

returns (idEvents1_A166:int;
	idEvents1_Events1165:int;
	a:int;
	idA_A1170:int;
	idA_A2167:int);


var 	idEvents1_A166_2, idEvents1_A166_3, idEvents1_A166_4, idEvents1_A166_5, idEvents1_A166_6:int;
	idEvents1_Events1165_2, idEvents1_Events1165_3, idEvents1_Events1165_4:int;
	a_2, a_3, a_4, a_5, a_6:int;
	idA_A1170_2, idA_A1170_3, idA_A1170_4, idA_A1170_5:int;
	idA_A2167_2, idA_A2167_3:int;


let



	-- set state as active 
	idEvents1_Events1165_2 
	= 166;
	

	
-- transition trace :
	--POINT__To__A_A1170_1
		(idA_A1170_2, idEvents1_A166_2, a_2) 
	= A_A1170_en(idA_A1170_1, idEvents1_A166_1, a_1, false);
		

	(idEvents1_A166_3, idEvents1_Events1165_3, a_3, idA_A1170_3) 
	= 

	if ( idEvents1_A166_1 = 0) then

	 (idEvents1_A166_2, idEvents1_Events1165_2, a_2, idA_A1170_2)

	 else(idEvents1_A166_1, idEvents1_Events1165_2, a_1, idA_A1170_1);

	

	(idA_A2167_2, idEvents1_A166_4, a_4) 
	= 
	if ( idEvents1_A166_1 = 167) then
	A_A2167_en(idA_A2167_1, idEvents1_A166_1, a_1, false)
	 else (idA_A2167_1, idEvents1_A166_1, a_1);

	

	(idA_A1170_4, idEvents1_A166_5, a_5) 
	= 
	if ( idEvents1_A166_1 = 170) then
	A_A1170_en(idA_A1170_1, idEvents1_A166_1, a_1, false)
	 else (idA_A1170_1, idEvents1_A166_1, a_1);

	

	(idEvents1_A166_6, idEvents1_Events1165_4, a_6, idA_A1170_5, idA_A2167_3) 
	= 
		 if ( idEvents1_A166_1 = 0) then 
		(idEvents1_A166_3, idEvents1_Events1165_3, a_3, idA_A1170_3, idA_A2167_1)
		 else
		 if ( idEvents1_A166_1 = 167) then 
		(idEvents1_A166_4, idEvents1_Events1165_3, a_4, idA_A1170_1, idA_A2167_2)
		 else
		 if ( idEvents1_A166_1 = 170) then 
		(idEvents1_A166_5, idEvents1_Events1165_3, a_5, idA_A1170_4, idA_A2167_1)
		 else (idEvents1_A166_1, idEvents1_Events1165_2, a_1, idA_A1170_1, idA_A2167_1);


	(idEvents1_A166, idEvents1_Events1165, a, idA_A1170, idA_A2167) 
	= (idEvents1_A166_6, idEvents1_Events1165_4, a_6, idA_A1170_5, idA_A2167_3);
	

tel





-- Exit action for state :Events1_A166
node Events1_A166_ex(idA_A2167_1:int;
	idEvents1_A166_1:int;
	idA_A1170_1:int;
	idEvents1_Events1165_1:int;
	isInner:bool)

returns (idA_A2167:int;
	idEvents1_A166:int;
	idA_A1170:int;
	idEvents1_Events1165:int);


var 	idA_A2167_2, idA_A2167_3:int;
	idEvents1_A166_2, idEvents1_A166_3, idEvents1_A166_4, idEvents1_A166_5:int;
	idA_A1170_2, idA_A1170_3:int;
	idEvents1_Events1165_2:int;


let



	
	(idA_A2167_2, idEvents1_A166_2) 
	= 
	if ( idEvents1_A166_1 = 167) then
	A_A2167_ex(idA_A2167_1, idEvents1_A166_1, false)
	 else (idA_A2167_1, idEvents1_A166_1);

	

	(idA_A1170_2, idEvents1_A166_3) 
	= 
	if ( idEvents1_A166_1 = 170) then
	A_A1170_ex(idA_A1170_1, idEvents1_A166_1, false)
	 else (idA_A1170_1, idEvents1_A166_1);

	

	(idA_A2167_3, idEvents1_A166_4, idA_A1170_3) 
	= 
		 if ( idEvents1_A166_1 = 167) then 
		(idA_A2167_2, idEvents1_A166_2, idA_A1170_1)
		 else
		 if ( idEvents1_A166_1 = 170) then 
		(idA_A2167_1, idEvents1_A166_3, idA_A1170_2)
		 else (idA_A2167_1, idEvents1_A166_1, idA_A1170_1);


	-- set state as inactive 
	idEvents1_Events1165_2
	 = if (not isInner) then 0 else idEvents1_Events1165_1;

	idEvents1_A166_5 
	= 0;
	

	(idA_A2167, idEvents1_A166, idA_A1170, idEvents1_Events1165) 
	= (idA_A2167_3, idEvents1_A166_5, idA_A1170_3, idEvents1_Events1165_1);
	

tel


--***************************************************State :A_A2167 Automaton***************************************************

node A_A2167_node(idA_A2167_1:int;
	a_1:int;
	S:bool;
	R:bool)

returns (idA_A2167:int;
	a:int);


let

	 automaton a_a2167

	state POINTA_A2167:
	unless (idA_A2167_1=0) restart POINT__TO__A2_A2A168_1



	unless (idA_A2167_1=168) and S restart A2_A2A168__TO__A2_A2B169_1



	unless (idA_A2167_1=169) and R restart A2_A2B169__TO__A2_A2A168_1



	unless (idA_A2167_1=168) restart A2_A2A168_IDL

	unless (idA_A2167_1=169) restart A2_A2B169_IDL

	let

		(idA_A2167, a) 
	= (idA_A2167_1, a_1);
	

	tel



	state POINT__TO__A2_A2A168_1:

	 var 	idA_A2167_2:int;
	a_2:int;
	let

		-- transition trace :
	--POINT__To__A2_A2a168_1
		(idA_A2167_2, a_2) 
	= A2_A2a168_en(idA_A2167_1, a_1, false);
		

	(idA_A2167, a) 
	=  (idA_A2167_2, a_2);


	tel

	until true restart POINTA_A2167



	state A2_A2A168__TO__A2_A2B169_1:

	 var 	idA_A2167_2, idA_A2167_3:int;
	a_2:int;
	let

		-- transition trace :
	--A2_A2a168__To__A2_A2b169_1
		(idA_A2167_2) 
	= A2_A2a168_ex(idA_A2167_1, false);
		

		(idA_A2167_3, a_2) 
	= A2_A2b169_en(idA_A2167_2, a_1, false);
		

	(idA_A2167, a) 
	=  (idA_A2167_3, a_2);


	tel

	until true restart POINTA_A2167



	state A2_A2B169__TO__A2_A2A168_1:

	 var 	idA_A2167_2, idA_A2167_3:int;
	a_2:int;
	let

		-- transition trace :
	--A2_A2b169__To__A2_A2a168_1
		(idA_A2167_2) 
	= A2_A2b169_ex(idA_A2167_1, false);
		

		(idA_A2167_3, a_2) 
	= A2_A2a168_en(idA_A2167_2, a_1, false);
		

	(idA_A2167, a) 
	=  (idA_A2167_3, a_2);


	tel

	until true restart POINTA_A2167



	state A2_A2A168_IDL:

	 	let

		

	(idA_A2167, a) 
	= (idA_A2167_1, a_1);
	

	tel

	until true restart POINTA_A2167



	state A2_A2B169_IDL:

	 	let

		

	(idA_A2167, a) 
	= (idA_A2167_1, a_1);
	

	tel

	until true restart POINTA_A2167



tel


--***************************************************State :A_A1170 Automaton***************************************************

node A_A1170_node(idA_A1170_1:int;
	a_1:int;
	S:bool;
	R:bool)

returns (idA_A1170:int;
	a:int);


let

	 automaton a_a1170

	state POINTA_A1170:
	unless (idA_A1170_1=0) restart POINT__TO__A1_A1A171_1



	unless (idA_A1170_1=171) and S restart A1_A1A171__TO__A1_A1B172_1



	unless (idA_A1170_1=172) and R restart A1_A1B172__TO__A1_A1A171_1



	unless (idA_A1170_1=171) restart A1_A1A171_IDL

	unless (idA_A1170_1=172) restart A1_A1B172_IDL

	let

		(idA_A1170, a) 
	= (idA_A1170_1, a_1);
	

	tel



	state POINT__TO__A1_A1A171_1:

	 var 	idA_A1170_2:int;
	a_2:int;
	let

		-- transition trace :
	--POINT__To__A1_A1a171_1
		(idA_A1170_2, a_2) 
	= A1_A1a171_en(idA_A1170_1, a_1, false);
		

	(idA_A1170, a) 
	=  (idA_A1170_2, a_2);


	tel

	until true restart POINTA_A1170



	state A1_A1A171__TO__A1_A1B172_1:

	 var 	idA_A1170_2, idA_A1170_3:int;
	a_2:int;
	let

		-- transition trace :
	--A1_A1a171__To__A1_A1b172_1
		(idA_A1170_2) 
	= A1_A1a171_ex(idA_A1170_1, false);
		

		(idA_A1170_3, a_2) 
	= A1_A1b172_en(idA_A1170_2, a_1, false);
		

	(idA_A1170, a) 
	=  (idA_A1170_3, a_2);


	tel

	until true restart POINTA_A1170



	state A1_A1B172__TO__A1_A1A171_1:

	 var 	idA_A1170_2, idA_A1170_3:int;
	a_2:int;
	let

		-- transition trace :
	--A1_A1b172__To__A1_A1a171_1
		(idA_A1170_2) 
	= A1_A1b172_ex(idA_A1170_1, false);
		

		(idA_A1170_3, a_2) 
	= A1_A1a171_en(idA_A1170_2, a_1, false);
		

	(idA_A1170, a) 
	=  (idA_A1170_3, a_2);


	tel

	until true restart POINTA_A1170



	state A1_A1A171_IDL:

	 	let

		

	(idA_A1170, a) 
	= (idA_A1170_1, a_1);
	

	tel

	until true restart POINTA_A1170



	state A1_A1B172_IDL:

	 	let

		

	(idA_A1170, a) 
	= (idA_A1170_1, a_1);
	

	tel

	until true restart POINTA_A1170



tel


--***************************************************State :Events1_A166 Automaton***************************************************

node Events1_A166_node(idEvents1_A166_1:int;
	a_1:int;
	idA_A1170_1:int;
	T:bool;
	idA_A2167_1:int;
	R:bool;
	S:bool)

returns (idEvents1_A166:int;
	a:int;
	idA_A1170:int;
	idA_A2167:int);


let

	 automaton events1_a166

	state POINTEvents1_A166:
	unless (idEvents1_A166_1=0) restart POINT__TO__A_A1170_1



	unless (idEvents1_A166_1=167) and T restart A_A2167__TO__A_A1170_1



	unless (idEvents1_A166_1=170) and T restart A_A1170__TO__A_A2167_1



	unless (idEvents1_A166_1=167) restart A_A2167_IDL

	unless (idEvents1_A166_1=170) restart A_A1170_IDL

	let

		(idEvents1_A166, a, idA_A1170, idA_A2167) 
	= (idEvents1_A166_1, a_1, idA_A1170_1, idA_A2167_1);
	

	tel



	state POINT__TO__A_A1170_1:

	 var 	idEvents1_A166_2:int;
	a_2:int;
	idA_A1170_2:int;
	let

		-- transition trace :
	--POINT__To__A_A1170_1
		(idA_A1170_2, idEvents1_A166_2, a_2) 
	= A_A1170_en(idA_A1170_1, idEvents1_A166_1, a_1, false);
		

	(idEvents1_A166, a, idA_A1170) 
	=  (idEvents1_A166_2, a_2, idA_A1170_2);

	--add unused variables
	(idA_A2167) 
	= (idA_A2167_1);
	

	tel

	until true restart POINTEvents1_A166



	state A_A2167__TO__A_A1170_1:

	 var 	idEvents1_A166_2, idEvents1_A166_3:int;
	a_2:int;
	idA_A1170_2:int;
	idA_A2167_2:int;
	let

		-- transition trace :
	--A_A2167__To__A_A1170_1
		(idA_A2167_2, idEvents1_A166_2) 
	= A_A2167_ex(idA_A2167_1, idEvents1_A166_1, false);
		

		(idA_A1170_2, idEvents1_A166_3, a_2) 
	= A_A1170_en(idA_A1170_1, idEvents1_A166_2, a_1, false);
		

	(idEvents1_A166, a, idA_A1170, idA_A2167) 
	=  (idEvents1_A166_3, a_2, idA_A1170_2, idA_A2167_2);


	tel

	until true restart POINTEvents1_A166



	state A_A1170__TO__A_A2167_1:

	 var 	idEvents1_A166_2, idEvents1_A166_3:int;
	a_2:int;
	idA_A1170_2:int;
	idA_A2167_2:int;
	let

		-- transition trace :
	--A_A1170__To__A_A2167_1
		(idA_A1170_2, idEvents1_A166_2) 
	= A_A1170_ex(idA_A1170_1, idEvents1_A166_1, false);
		

		(idA_A2167_2, idEvents1_A166_3, a_2) 
	= A_A2167_en(idA_A2167_1, idEvents1_A166_2, a_1, false);
		

	(idEvents1_A166, a, idA_A1170, idA_A2167) 
	=  (idEvents1_A166_3, a_2, idA_A1170_2, idA_A2167_2);


	tel

	until true restart POINTEvents1_A166



	state A_A2167_IDL:

	 var 	a_2:int;
	idA_A2167_2:int;
	let

		
	(idA_A2167_2, a_2) 
	= A_A2167_node(idA_A2167_1, a_1, S, R);

		


	(idEvents1_A166, a, idA_A1170, idA_A2167) 
	= (idEvents1_A166_1, a_2, idA_A1170_1, idA_A2167_2);
	

	tel

	until true restart POINTEvents1_A166



	state A_A1170_IDL:

	 var 	a_2:int;
	idA_A1170_2:int;
	let

		
	(idA_A1170_2, a_2) 
	= A_A1170_node(idA_A1170_1, a_1, S, R);

		


	(idEvents1_A166, a, idA_A1170, idA_A2167) 
	= (idEvents1_A166_1, a_2, idA_A1170_2, idA_A2167_1);
	

	tel

	until true restart POINTEvents1_A166



tel


--***************************************************State :Events1_Events1165 Automaton***************************************************

node Events1_Events1165_node(idEvents1_Events1165_1:int;
	a_1:int;
	idA_A1170_1:int;
	idA_A2167_1:int;
	idEvents1_A166_1:int;
	R:bool;
	S:bool;
	T:bool)

returns (idEvents1_Events1165:int;
	a:int;
	idA_A1170:int;
	idA_A2167:int;
	idEvents1_A166:int);


let

	 automaton events1_events1165

	state POINTEvents1_Events1165:
	unless (idEvents1_Events1165_1=0) restart POINT__TO__EVENTS1_A166_1



	unless true  restart EVENTS1_EVENTS1165_PARALLEL_IDL

	let

		(idEvents1_Events1165, a, idA_A1170, idA_A2167, idEvents1_A166) 
	= (idEvents1_Events1165_1, a_1, idA_A1170_1, idA_A2167_1, idEvents1_A166_1);
	

	tel



	state POINT__TO__EVENTS1_A166_1:

	 var 	idEvents1_Events1165_2:int;
	a_2:int;
	idA_A1170_2:int;
	idA_A2167_2:int;
	idEvents1_A166_2:int;
	let

		-- transition trace :
	--POINT__To__Events1_A166_1
		(idEvents1_A166_2, idEvents1_Events1165_2, a_2, idA_A1170_2, idA_A2167_2) 
	= Events1_A166_en(idEvents1_A166_1, idEvents1_Events1165_1, a_1, idA_A1170_1, idA_A2167_1, false);
		

	(idEvents1_Events1165, a, idA_A1170, idA_A2167, idEvents1_A166) 
	=  (idEvents1_Events1165_2, a_2, idA_A1170_2, idA_A2167_2, idEvents1_A166_2);


	tel

	until true restart POINTEvents1_Events1165



	state EVENTS1_EVENTS1165_PARALLEL_IDL:

	 var 	a_2:int;
	idA_A1170_2:int;
	idA_A2167_2:int;
	idEvents1_A166_2:int;
	let

		

		(idEvents1_A166_2, a_2, idA_A1170_2, idA_A2167_2)
	= if not (idEvents1_A166_1= 0 ) then Events1_A166_node(idEvents1_A166_1, a_1, idA_A1170_1, T, idA_A2167_1, R, S)

		 else (idEvents1_A166_1, a_1, idA_A1170_1, idA_A2167_1);

		

		

	(idEvents1_Events1165, a, idA_A1170, idA_A2167, idEvents1_A166) 
	= (idEvents1_Events1165_1, a_2, idA_A1170_2, idA_A2167_2, idEvents1_A166_2);
	

	tel

	until true restart POINTEvents1_Events1165



tel


--***************************************************State :Events1_Events1165 Automaton***************************************************

node EventsOrder_PP_Events1(R:bool;
	S:bool;
	T:bool)

returns (a:int);


var a_1: int;

	idEvents1_Events1165, idEvents1_Events1165_1: int;

	idA_A2167, idA_A2167_1: int;

	idA_A1170, idA_A1170_1: int;

	idEvents1_A166, idEvents1_A166_1: int;

		idEvents1_Events1165_2, idEvents1_Events1165_3:int;
	a_2, a_3:int;
	idA_A1170_2, idA_A1170_3:int;
	idA_A2167_2, idA_A2167_3:int;
	idEvents1_A166_2, idEvents1_A166_3:int;
let

	a_1 = 0 -> pre a;

	idEvents1_Events1165_1 = 0 -> pre idEvents1_Events1165;

	idA_A2167_1 = 0 -> pre idA_A2167;

	idA_A1170_1 = 0 -> pre idA_A1170;

	idEvents1_A166_1 = 0 -> pre idEvents1_A166;

	



	(idEvents1_Events1165_2, a_2, idA_A1170_2, idA_A2167_2, idEvents1_A166_2)
	 = 

	 if R then Events1_Events1165_node(idEvents1_Events1165_1, a_1, idA_A1170_1, idA_A2167_1, idEvents1_A166_1, R, false, false)

	 else (idEvents1_Events1165_1, a_1, idA_A1170_1, idA_A2167_1, idEvents1_A166_1);

	



	(idEvents1_Events1165_3, a_3, idA_A1170_3, idA_A2167_3, idEvents1_A166_3)
	 = 

	 if S then Events1_Events1165_node(idEvents1_Events1165_2, a_2, idA_A1170_2, idA_A2167_2, idEvents1_A166_2, false, S, false)

	 else (idEvents1_Events1165_2, a_2, idA_A1170_2, idA_A2167_2, idEvents1_A166_2);

	



	(idEvents1_Events1165, a, idA_A1170, idA_A2167, idEvents1_A166)
	 = 

	 if T then Events1_Events1165_node(idEvents1_Events1165_3, a_3, idA_A1170_3, idA_A2167_3, idEvents1_A166_3, false, false, T)

	 else (idEvents1_Events1165_3, a_3, idA_A1170_3, idA_A2167_3, idEvents1_A166_3);

	


--unused outputs
	

tel



node EventsOrder_PP (R_1_1 : real; S_1_1 : real; T_1_1 : real)
returns (Out1_1_1 : int); 
var
	Events1_1_1 : int;
	Mux_1_1 : real; Mux_1_2 : real; Mux_1_3 : real;
	i_virtual_local : real;
	Events1Mux_1_1_event: bool;
	Events1Mux_1_2_event: bool;
	Events1Mux_1_3_event: bool;
let 
	Events1Mux_1_1_event = false -> ((pre(Mux_1_1) > 0.0 and Mux_1_1 <= 0.0) or (pre(Mux_1_1) <= 0.0 and Mux_1_1 > 0.0));
	Events1Mux_1_2_event = false -> ((pre(Mux_1_2) > 0.0 and Mux_1_2 <= 0.0) or (pre(Mux_1_2) <= 0.0 and Mux_1_2 > 0.0));
	Events1Mux_1_3_event = false -> ((pre(Mux_1_3) > 0.0 and Mux_1_3 <= 0.0) or (pre(Mux_1_3) <= 0.0 and Mux_1_3 > 0.0));
	Events1_1_1 =  EventsOrder_PP_Events1(Events1Mux_1_1_event, Events1Mux_1_2_event, Events1Mux_1_3_event);
	Mux_1_1 = R_1_1 ;
	Mux_1_2 = S_1_1 ;
	Mux_1_3 = T_1_1 ;
	Out1_1_1 = Events1_1_1;
	i_virtual_local= 0.0 -> 1.0;
tel

